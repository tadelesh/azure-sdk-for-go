//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappplatform_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appplatform/armappplatform"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestServices_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.ServiceResource{
			Name: to.Ptr("myservice"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armappplatform.ClusterResourceProperties{
				NetworkProfile: &armappplatform.NetworkProfile{
					OutboundIPs: &armappplatform.NetworkProfileOutboundIPs{
						PublicIPs: []*string{
							to.Ptr("20.39.3.173"),
							to.Ptr("40.64.67.13")},
					},
					RequiredTraffics: []*armappplatform.RequiredTraffic{
						{
							Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
							IPs: []*string{
								to.Ptr("20.62.211.25"),
								to.Ptr("52.188.47.226")},
							Port:     to.Ptr[int32](443),
							Protocol: to.Ptr("TCP"),
						},
						{
							Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
							IPs: []*string{
								to.Ptr("20.62.211.25"),
								to.Ptr("52.188.47.226")},
							Port:     to.Ptr[int32](1194),
							Protocol: to.Ptr("UDP"),
						},
						{
							Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
							IPs: []*string{
								to.Ptr("20.62.211.25"),
								to.Ptr("52.188.47.226")},
							Port:     to.Ptr[int32](9000),
							Protocol: to.Ptr("TCP"),
						}},
				},
				ProvisioningState: to.Ptr(armappplatform.ProvisioningStateSucceeded),
				ServiceID:         to.Ptr("12345678abcd1234abcd12345678abcd"),
			},
			SKU: &armappplatform.SKU{
				Name: to.Ptr("S0"),
				Tier: to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		armappplatform.ServiceResource{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armappplatform.ClusterResourceProperties{},
			SKU: &armappplatform.SKU{
				Name: to.Ptr("S0"),
				Tier: to.Ptr("Standard"),
			},
		},
		&armappplatform.ServicesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.ServiceResource{
			Name: to.Ptr("myservice"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armappplatform.ClusterResourceProperties{
				NetworkProfile: &armappplatform.NetworkProfile{
					OutboundIPs: &armappplatform.NetworkProfileOutboundIPs{
						PublicIPs: []*string{
							to.Ptr("20.39.3.173"),
							to.Ptr("40.64.67.13")},
					},
					RequiredTraffics: []*armappplatform.RequiredTraffic{
						{
							Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
							IPs: []*string{
								to.Ptr("20.62.211.25"),
								to.Ptr("52.188.47.226")},
							Port:     to.Ptr[int32](443),
							Protocol: to.Ptr("TCP"),
						},
						{
							Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
							IPs: []*string{
								to.Ptr("20.62.211.25"),
								to.Ptr("52.188.47.226")},
							Port:     to.Ptr[int32](1194),
							Protocol: to.Ptr("UDP"),
						},
						{
							Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
							IPs: []*string{
								to.Ptr("20.62.211.25"),
								to.Ptr("52.188.47.226")},
							Port:     to.Ptr[int32](9000),
							Protocol: to.Ptr("TCP"),
						}},
				},
				ProvisioningState: to.Ptr(armappplatform.ProvisioningStateSucceeded),
				ServiceID:         to.Ptr("12345678abcd1234abcd12345678abcd"),
			},
			SKU: &armappplatform.SKU{
				Name: to.Ptr("S0"),
				Tier: to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_CreateOrUpdate_VNetInjection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_CreateOrUpdate_VNetInjection"},
	})
	client = armappplatform.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		armappplatform.ServiceResource{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armappplatform.ClusterResourceProperties{
				NetworkProfile: &armappplatform.NetworkProfile{
					AppNetworkResourceGroup:            to.Ptr("my-app-network-rg"),
					AppSubnetID:                        to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/apps"),
					ServiceCidr:                        to.Ptr("10.8.0.0/16,10.244.0.0/16,10.245.0.1/16"),
					ServiceRuntimeNetworkResourceGroup: to.Ptr("my-service-runtime-network-rg"),
					ServiceRuntimeSubnetID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/serviceRuntime"),
				},
			},
			SKU: &armappplatform.SKU{
				Name: to.Ptr("S0"),
				Tier: to.Ptr("Standard"),
			},
		},
		&armappplatform.ServicesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_CreateOrUpdate_VNetInjection.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_CreateOrUpdate_VNetInjection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.ServiceResource{
			Name: to.Ptr("myservice"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armappplatform.ClusterResourceProperties{
				NetworkProfile: &armappplatform.NetworkProfile{
					AppNetworkResourceGroup: to.Ptr("my-app-network-rg"),
					AppSubnetID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/apps"),
					OutboundIPs: &armappplatform.NetworkProfileOutboundIPs{
						PublicIPs: []*string{
							to.Ptr("40.64.67.13")},
					},
					RequiredTraffics: []*armappplatform.RequiredTraffic{
						{
							Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
							IPs: []*string{
								to.Ptr("20.62.211.25"),
								to.Ptr("52.188.47.226")},
							Port:     to.Ptr[int32](443),
							Protocol: to.Ptr("TCP"),
						},
						{
							Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
							IPs: []*string{
								to.Ptr("20.62.211.25"),
								to.Ptr("52.188.47.226")},
							Port:     to.Ptr[int32](1194),
							Protocol: to.Ptr("UDP"),
						},
						{
							Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
							IPs: []*string{
								to.Ptr("20.62.211.25"),
								to.Ptr("52.188.47.226")},
							Port:     to.Ptr[int32](9000),
							Protocol: to.Ptr("TCP"),
						}},
					ServiceCidr:                        to.Ptr("10.8.0.0/16,10.244.0.0/16,10.245.0.1/16"),
					ServiceRuntimeNetworkResourceGroup: to.Ptr("my-service-runtime-network-rg"),
					ServiceRuntimeSubnetID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/serviceRuntime"),
				},
				ProvisioningState: to.Ptr(armappplatform.ProvisioningStateSucceeded),
				ServiceID:         to.Ptr("12345678abcd1234abcd12345678abcd"),
			},
			SKU: &armappplatform.SKU{
				Name: to.Ptr("S0"),
				Tier: to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_CreateOrUpdate_VNetInjection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		&armappplatform.ServicesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_Delete.json: %v", err)
	}
}

func TestServices_Update(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myservice",
		armappplatform.ServiceResource{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armappplatform.ClusterResourceProperties{},
			SKU: &armappplatform.SKU{
				Name: to.Ptr("S0"),
				Tier: to.Ptr("Standard"),
			},
		},
		&armappplatform.ServicesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.ServiceResource{
			Name: to.Ptr("myservice"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armappplatform.ClusterResourceProperties{
				NetworkProfile: &armappplatform.NetworkProfile{
					OutboundIPs: &armappplatform.NetworkProfileOutboundIPs{
						PublicIPs: []*string{
							to.Ptr("20.39.3.173"),
							to.Ptr("40.64.67.13")},
					},
					RequiredTraffics: []*armappplatform.RequiredTraffic{
						{
							Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
							IPs: []*string{
								to.Ptr("20.62.211.25"),
								to.Ptr("52.188.47.226")},
							Port:     to.Ptr[int32](443),
							Protocol: to.Ptr("TCP"),
						},
						{
							Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
							IPs: []*string{
								to.Ptr("20.62.211.25"),
								to.Ptr("52.188.47.226")},
							Port:     to.Ptr[int32](1194),
							Protocol: to.Ptr("UDP"),
						},
						{
							Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
							IPs: []*string{
								to.Ptr("20.62.211.25"),
								to.Ptr("52.188.47.226")},
							Port:     to.Ptr[int32](9000),
							Protocol: to.Ptr("TCP"),
						}},
				},
				ProvisioningState: to.Ptr(armappplatform.ProvisioningStateSucceeded),
				ServiceID:         to.Ptr("12345678abcd1234abcd12345678abcd"),
			},
			SKU: &armappplatform.SKU{
				Name: to.Ptr("S0"),
				Tier: to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_ListTestKeys(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_ListTestKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_ListTestKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ListTestKeys(ctx,
		"myResourceGroup",
		"myservice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_ListTestKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.TestKeys{
			Enabled:               to.Ptr(true),
			PrimaryKey:            to.Ptr("<primaryKey>"),
			PrimaryTestEndpoint:   to.Ptr("<primaryTestEndpoint>"),
			SecondaryKey:          to.Ptr("<secondaryKey>"),
			SecondaryTestEndpoint: to.Ptr("<secondaryTestEndpoint>"),
		}
		if !reflect.DeepEqual(exampleRes, res.TestKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TestKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_ListTestKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_RegenerateTestKey(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_RegenerateTestKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_RegenerateTestKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.RegenerateTestKey(ctx,
		"myResourceGroup",
		"myservice",
		armappplatform.RegenerateTestKeyRequestPayload{
			KeyType: to.Ptr(armappplatform.TestKeyTypePrimary),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_RegenerateTestKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.TestKeys{
			Enabled:               to.Ptr(true),
			PrimaryKey:            to.Ptr("<primaryKey>"),
			PrimaryTestEndpoint:   to.Ptr("<primaryTestEndpoint>"),
			SecondaryKey:          to.Ptr("<secondaryKey>"),
			SecondaryTestEndpoint: to.Ptr("<secondaryTestEndpoint>"),
		}
		if !reflect.DeepEqual(exampleRes, res.TestKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TestKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_RegenerateTestKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_DisableTestEndpoint(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_DisableTestEndpoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_DisableTestEndpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.DisableTestEndpoint(ctx,
		"myResourceGroup",
		"myservice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_DisableTestEndpoint.json: %v", err)
	}
}

func TestServices_EnableTestEndpoint(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_EnableTestEndpoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_EnableTestEndpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.EnableTestEndpoint(ctx,
		"myResourceGroup",
		"myservice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_EnableTestEndpoint.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.TestKeys{
			Enabled:               to.Ptr(true),
			PrimaryKey:            to.Ptr("<primaryKey>"),
			PrimaryTestEndpoint:   to.Ptr("<primaryTestEndpoint>"),
			SecondaryKey:          to.Ptr("<secondaryKey>"),
			SecondaryTestEndpoint: to.Ptr("<secondaryTestEndpoint>"),
		}
		if !reflect.DeepEqual(exampleRes, res.TestKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TestKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_EnableTestEndpoint.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_Stop(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_Stop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_Stop"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginStop(ctx,
		"myResourceGroup",
		"myservice",
		&armappplatform.ServicesClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_Stop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_Stop.json: %v", err)
	}
}

func TestServices_Start(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_Start.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_Start"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginStart(ctx,
		"myResourceGroup",
		"myservice",
		&armappplatform.ServicesClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_Start.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_Start.json: %v", err)
	}
}

func TestServices_CheckNameAvailability(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_CheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"eastus",
		armappplatform.NameAvailabilityParameters{
			Name: to.Ptr("myservice"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_CheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.NameAvailability{
			Message:       to.Ptr("The name is already used."),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr("AlreadyExists"),
		}
		if !reflect.DeepEqual(exampleRes, res.NameAvailability) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NameAvailability)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_ListBySubscription(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_ListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.ServiceResourceList{
			Value: []*armappplatform.ServiceResource{
				{
					Name: to.Ptr("myservice"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Properties: &armappplatform.ClusterResourceProperties{
						NetworkProfile: &armappplatform.NetworkProfile{
							OutboundIPs: &armappplatform.NetworkProfileOutboundIPs{
								PublicIPs: []*string{
									to.Ptr("20.39.3.173"),
									to.Ptr("40.64.67.13")},
							},
							RequiredTraffics: []*armappplatform.RequiredTraffic{
								{
									Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
									IPs: []*string{
										to.Ptr("20.62.211.25"),
										to.Ptr("52.188.47.226")},
									Port:     to.Ptr[int32](443),
									Protocol: to.Ptr("TCP"),
								},
								{
									Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
									IPs: []*string{
										to.Ptr("20.62.211.25"),
										to.Ptr("52.188.47.226")},
									Port:     to.Ptr[int32](1194),
									Protocol: to.Ptr("UDP"),
								},
								{
									Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
									IPs: []*string{
										to.Ptr("20.62.211.25"),
										to.Ptr("52.188.47.226")},
									Port:     to.Ptr[int32](9000),
									Protocol: to.Ptr("TCP"),
								}},
						},
						ProvisioningState: to.Ptr(armappplatform.ProvisioningStateSucceeded),
						ServiceID:         to.Ptr("12345678abcd1234abcd12345678abcd"),
					},
					SKU: &armappplatform.SKU{
						Name: to.Ptr("S0"),
						Tier: to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.ServiceResourceList{
			Value: []*armappplatform.ServiceResource{
				{
					Name: to.Ptr("myservice"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Properties: &armappplatform.ClusterResourceProperties{
						NetworkProfile: &armappplatform.NetworkProfile{
							OutboundIPs: &armappplatform.NetworkProfileOutboundIPs{
								PublicIPs: []*string{
									to.Ptr("20.39.3.173"),
									to.Ptr("40.64.67.13")},
							},
							RequiredTraffics: []*armappplatform.RequiredTraffic{
								{
									Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
									IPs: []*string{
										to.Ptr("20.62.211.25"),
										to.Ptr("52.188.47.226")},
									Port:     to.Ptr[int32](443),
									Protocol: to.Ptr("TCP"),
								},
								{
									Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
									IPs: []*string{
										to.Ptr("20.62.211.25"),
										to.Ptr("52.188.47.226")},
									Port:     to.Ptr[int32](1194),
									Protocol: to.Ptr("UDP"),
								},
								{
									Direction: to.Ptr(armappplatform.TrafficDirectionOutbound),
									IPs: []*string{
										to.Ptr("20.62.211.25"),
										to.Ptr("52.188.47.226")},
									Port:     to.Ptr[int32](9000),
									Protocol: to.Ptr("TCP"),
								}},
						},
						ProvisioningState: to.Ptr(armappplatform.ProvisioningStateSucceeded),
						ServiceID:         to.Ptr("12345678abcd1234abcd12345678abcd"),
					},
					SKU: &armappplatform.SKU{
						Name: to.Ptr("S0"),
						Tier: to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Services_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigServers_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigServers_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigServers_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewConfigServersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigServers_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.ConfigServerResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/configServers"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configServers/default"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.ConfigServerProperties{
				ConfigServer: &armappplatform.ConfigServerSettings{
					GitProperty: &armappplatform.ConfigServerGitProperty{
						Label: to.Ptr("master"),
						SearchPaths: []*string{
							to.Ptr("/")},
						URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
					},
				},
				ProvisioningState: to.Ptr(armappplatform.ConfigServerStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigServerResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigServerResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigServers_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigServers_UpdatePut(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigServers_UpdatePut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigServers_UpdatePut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewConfigServersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdatePut(ctx,
		"myResourceGroup",
		"myservice",
		armappplatform.ConfigServerResource{
			Properties: &armappplatform.ConfigServerProperties{
				ConfigServer: &armappplatform.ConfigServerSettings{
					GitProperty: &armappplatform.ConfigServerGitProperty{
						Label: to.Ptr("master"),
						SearchPaths: []*string{
							to.Ptr("/")},
						URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
					},
				},
			},
		},
		&armappplatform.ConfigServersClientBeginUpdatePutOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigServers_UpdatePut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigServers_UpdatePut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.ConfigServerResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/configServers"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configServers/default"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.ConfigServerProperties{
				ConfigServer: &armappplatform.ConfigServerSettings{
					GitProperty: &armappplatform.ConfigServerGitProperty{
						Label: to.Ptr("master"),
						SearchPaths: []*string{
							to.Ptr("/")},
						URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
					},
				},
				ProvisioningState: to.Ptr(armappplatform.ConfigServerStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigServerResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigServerResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigServers_UpdatePut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigServers_UpdatePatch(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigServers_UpdatePatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigServers_UpdatePatch"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewConfigServersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdatePatch(ctx,
		"myResourceGroup",
		"myservice",
		armappplatform.ConfigServerResource{
			Properties: &armappplatform.ConfigServerProperties{
				ConfigServer: &armappplatform.ConfigServerSettings{
					GitProperty: &armappplatform.ConfigServerGitProperty{
						Label: to.Ptr("master"),
						SearchPaths: []*string{
							to.Ptr("/")},
						URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
					},
				},
			},
		},
		&armappplatform.ConfigServersClientBeginUpdatePatchOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigServers_UpdatePatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigServers_UpdatePatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.ConfigServerResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/configServers"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configServers/default"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.ConfigServerProperties{
				ConfigServer: &armappplatform.ConfigServerSettings{
					GitProperty: &armappplatform.ConfigServerGitProperty{
						Label: to.Ptr("master"),
						SearchPaths: []*string{
							to.Ptr("/")},
						URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
					},
				},
				ProvisioningState: to.Ptr(armappplatform.ConfigServerStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigServerResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigServerResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigServers_UpdatePatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigServers_Validate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigServers_Validate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigServers_Validate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewConfigServersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginValidate(ctx,
		"myResourceGroup",
		"myservice",
		armappplatform.ConfigServerSettings{
			GitProperty: &armappplatform.ConfigServerGitProperty{
				Label: to.Ptr("master"),
				SearchPaths: []*string{
					to.Ptr("/")},
				URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
			},
		},
		&armappplatform.ConfigServersClientBeginValidateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigServers_Validate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigServers_Validate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.ConfigServerSettingsValidateResult{
			IsValid: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigServerSettingsValidateResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigServerSettingsValidateResult)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigServers_Validate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationServices_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigurationServices_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationServices_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewConfigurationServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigurationServices_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.ConfigurationServiceResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/configurationServices"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configurationServices/default"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.ConfigurationServiceProperties{
				Instances: []*armappplatform.ConfigurationServiceInstance{
					{
						Name:   to.Ptr("instance1"),
						Status: to.Ptr("Running"),
					},
					{
						Name:   to.Ptr("instance2"),
						Status: to.Ptr("Running"),
					}},
				ProvisioningState: to.Ptr(armappplatform.ConfigurationServiceProvisioningStateSucceeded),
				ResourceRequests: &armappplatform.ConfigurationServiceResourceRequests{
					CPU:           to.Ptr("1"),
					InstanceCount: to.Ptr[int32](2),
					Memory:        to.Ptr("1G"),
				},
				Settings: &armappplatform.ConfigurationServiceSettings{
					GitProperty: &armappplatform.ConfigurationServiceGitProperty{
						Repositories: []*armappplatform.ConfigurationServiceGitRepository{
							{
								Name:  to.Ptr("fake"),
								Label: to.Ptr("master"),
								Patterns: []*string{
									to.Ptr("app1"),
									to.Ptr("app2/dev")},
								URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
							}},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigurationServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigurationServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigurationServices_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationServices_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigurationServices_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationServices_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewConfigurationServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		armappplatform.ConfigurationServiceResource{
			Properties: &armappplatform.ConfigurationServiceProperties{
				Settings: &armappplatform.ConfigurationServiceSettings{
					GitProperty: &armappplatform.ConfigurationServiceGitProperty{
						Repositories: []*armappplatform.ConfigurationServiceGitRepository{
							{
								Name:  to.Ptr("fake"),
								Label: to.Ptr("master"),
								Patterns: []*string{
									to.Ptr("app/dev")},
								URI: to.Ptr("https://github.com/fake-user/fake-repository"),
							}},
					},
				},
			},
		},
		&armappplatform.ConfigurationServicesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigurationServices_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigurationServices_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.ConfigurationServiceResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/configurationServices"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configurationServices/default"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.ConfigurationServiceProperties{
				Instances: []*armappplatform.ConfigurationServiceInstance{
					{
						Name:   to.Ptr("instance1"),
						Status: to.Ptr("Running"),
					},
					{
						Name:   to.Ptr("instance2"),
						Status: to.Ptr("Running"),
					}},
				ProvisioningState: to.Ptr(armappplatform.ConfigurationServiceProvisioningStateSucceeded),
				ResourceRequests: &armappplatform.ConfigurationServiceResourceRequests{
					CPU:           to.Ptr("1"),
					InstanceCount: to.Ptr[int32](2),
					Memory:        to.Ptr("1G"),
				},
				Settings: &armappplatform.ConfigurationServiceSettings{
					GitProperty: &armappplatform.ConfigurationServiceGitProperty{
						Repositories: []*armappplatform.ConfigurationServiceGitRepository{
							{
								Name:  to.Ptr("fake"),
								Label: to.Ptr("master"),
								Patterns: []*string{
									to.Ptr("app/dev")},
								URI: to.Ptr("https://github.com/fake-user/fake-repository"),
							}},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigurationServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigurationServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigurationServices_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationServices_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigurationServices_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationServices_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewConfigurationServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		&armappplatform.ConfigurationServicesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigurationServices_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigurationServices_Delete.json: %v", err)
	}
}

func TestConfigurationServices_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigurationServices_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationServices_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewConfigurationServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myservice",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigurationServices_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.ConfigurationServiceResourceCollection{
			Value: []*armappplatform.ConfigurationServiceResource{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/configurationServices"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configurationServices/default"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Properties: &armappplatform.ConfigurationServiceProperties{
						Instances: []*armappplatform.ConfigurationServiceInstance{
							{
								Name:   to.Ptr("instance1"),
								Status: to.Ptr("Running"),
							},
							{
								Name:   to.Ptr("instance2"),
								Status: to.Ptr("Running"),
							}},
						ProvisioningState: to.Ptr(armappplatform.ConfigurationServiceProvisioningStateSucceeded),
						ResourceRequests: &armappplatform.ConfigurationServiceResourceRequests{
							CPU:           to.Ptr("1"),
							InstanceCount: to.Ptr[int32](2),
							Memory:        to.Ptr("1G"),
						},
						Settings: &armappplatform.ConfigurationServiceSettings{
							GitProperty: &armappplatform.ConfigurationServiceGitProperty{
								Repositories: []*armappplatform.ConfigurationServiceGitRepository{
									{
										Name:  to.Ptr("fake"),
										Label: to.Ptr("master"),
										Patterns: []*string{
											to.Ptr("app1"),
											to.Ptr("app2/dev")},
										URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
									}},
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConfigurationServiceResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConfigurationServiceResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigurationServices_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationServices_Validate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigurationServices_Validate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationServices_Validate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewConfigurationServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginValidate(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		armappplatform.ConfigurationServiceSettings{
			GitProperty: &armappplatform.ConfigurationServiceGitProperty{
				Repositories: []*armappplatform.ConfigurationServiceGitRepository{
					{
						Name:  to.Ptr("fake"),
						Label: to.Ptr("master"),
						Patterns: []*string{
							to.Ptr("app/dev")},
						URI: to.Ptr("https://github.com/fake-user/fake-repository"),
					}},
			},
		},
		&armappplatform.ConfigurationServicesClientBeginValidateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigurationServices_Validate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigurationServices_Validate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.ConfigurationServiceSettingsValidateResult{
			GitPropertyValidationResult: &armappplatform.ConfigurationServiceGitPropertyValidateResult{
				IsValid: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigurationServiceSettingsValidateResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigurationServiceSettingsValidateResult)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigurationServices_Validate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceRegistries_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ServiceRegistries_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceRegistries_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewServiceRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ServiceRegistries_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.ServiceRegistryResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/serviceRegistries"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/serviceRegistries/default"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.ServiceRegistryProperties{
				Instances: []*armappplatform.ServiceRegistryInstance{
					{
						Name:   to.Ptr("instance1"),
						Status: to.Ptr("Running"),
					},
					{
						Name:   to.Ptr("instance2"),
						Status: to.Ptr("Running"),
					}},
				ProvisioningState: to.Ptr(armappplatform.ServiceRegistryProvisioningStateSucceeded),
				ResourceRequests: &armappplatform.ServiceRegistryResourceRequests{
					CPU:           to.Ptr("1"),
					InstanceCount: to.Ptr[int32](2),
					Memory:        to.Ptr("1G"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceRegistryResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceRegistryResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ServiceRegistries_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceRegistries_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ServiceRegistries_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceRegistries_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewServiceRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		&armappplatform.ServiceRegistriesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ServiceRegistries_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ServiceRegistries_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.ServiceRegistryResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/serviceRegistries"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/serviceRegistries/default"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.ServiceRegistryProperties{
				Instances: []*armappplatform.ServiceRegistryInstance{
					{
						Name:   to.Ptr("instance1"),
						Status: to.Ptr("Running"),
					},
					{
						Name:   to.Ptr("instance2"),
						Status: to.Ptr("Running"),
					}},
				ProvisioningState: to.Ptr(armappplatform.ServiceRegistryProvisioningStateSucceeded),
				ResourceRequests: &armappplatform.ServiceRegistryResourceRequests{
					CPU:           to.Ptr("1"),
					InstanceCount: to.Ptr[int32](2),
					Memory:        to.Ptr("1G"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceRegistryResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceRegistryResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ServiceRegistries_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceRegistries_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ServiceRegistries_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceRegistries_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewServiceRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		&armappplatform.ServiceRegistriesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ServiceRegistries_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ServiceRegistries_Delete.json: %v", err)
	}
}

func TestServiceRegistries_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ServiceRegistries_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceRegistries_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewServiceRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myservice",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ServiceRegistries_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.ServiceRegistryResourceCollection{
			Value: []*armappplatform.ServiceRegistryResource{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/serviceRegistries"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/serviceRegistries/default"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Properties: &armappplatform.ServiceRegistryProperties{
						Instances: []*armappplatform.ServiceRegistryInstance{
							{
								Name:   to.Ptr("instance1"),
								Status: to.Ptr("Running"),
							},
							{
								Name:   to.Ptr("instance2"),
								Status: to.Ptr("Running"),
							}},
						ProvisioningState: to.Ptr(armappplatform.ServiceRegistryProvisioningStateSucceeded),
						ResourceRequests: &armappplatform.ServiceRegistryResourceRequests{
							CPU:           to.Ptr("1"),
							InstanceCount: to.Ptr[int32](2),
							Memory:        to.Ptr("1G"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceRegistryResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceRegistryResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ServiceRegistries_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBuildService_ListBuildServices(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_ListBuildServices.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildService_ListBuildServices"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildServiceClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBuildServices("myResourceGroup",
		"myservice",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_ListBuildServices.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.BuildServiceCollection{
			Value: []*armappplatform.BuildService{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/buildServices"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Properties: &armappplatform.BuildServiceProperties{
						KPackVersion:      to.Ptr("0.3.1"),
						ProvisioningState: to.Ptr(armappplatform.BuildServiceProvisioningStateSucceeded),
						ResourceRequests: &armappplatform.BuildServicePropertiesResourceRequests{
							CPU:    to.Ptr("200m"),
							Memory: to.Ptr("4Gi"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BuildServiceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BuildServiceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_ListBuildServices.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBuildService_GetBuildService(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_GetBuildService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildService_GetBuildService"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildServiceClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.GetBuildService(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_GetBuildService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.BuildService{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/buildServices"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.BuildServiceProperties{
				KPackVersion:      to.Ptr("0.3.1"),
				ProvisioningState: to.Ptr(armappplatform.BuildServiceProvisioningStateSucceeded),
				ResourceRequests: &armappplatform.BuildServicePropertiesResourceRequests{
					CPU:    to.Ptr("200m"),
					Memory: to.Ptr("4Gi"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BuildService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BuildService)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_GetBuildService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBuildService_ListBuilds(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_ListBuilds.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildService_ListBuilds"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildServiceClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBuilds("myResourceGroup",
		"myservice",
		"default",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_ListBuilds.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.BuildCollection{
			Value: []*armappplatform.Build{
				{
					Name: to.Ptr("myBuild"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/buildServices/builds"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/builds/myBuild"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Properties: &armappplatform.BuildProperties{
						AgentPool: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/agentPools/default"),
						Builder:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/builders/default"),
						Env: map[string]*string{
							"environmentVariable": to.Ptr("test"),
						},
						ProvisioningState: to.Ptr(armappplatform.BuildProvisioningStateSucceeded),
						RelativePath:      to.Ptr("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855-20210601-3ed9f4a2-986b-4bbd-b833-a42dccb2f777"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BuildCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BuildCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_ListBuilds.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBuildService_GetBuild(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_GetBuild.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildService_GetBuild"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildServiceClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.GetBuild(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"mybuild",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_GetBuild.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.Build{
			Name: to.Ptr("123"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/buildServices/builds/results"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/builds/mybuild/results/123"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.BuildProperties{
				AgentPool: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/agentPools/default"),
				Builder:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/builders/default"),
				Env: map[string]*string{
					"environmentVariable": to.Ptr("test"),
				},
				ProvisioningState: to.Ptr(armappplatform.BuildProvisioningStateSucceeded),
				RelativePath:      to.Ptr("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855-20210601-3ed9f4a2-986b-4bbd-b833-a42dccb2f777"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Build) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Build)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_GetBuild.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBuildService_CreateOrUpdateBuild(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_CreateOrUpdateBuild.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildService_CreateOrUpdateBuild"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildServiceClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateOrUpdateBuild(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"mybuild",
		armappplatform.Build{
			Properties: &armappplatform.BuildProperties{
				AgentPool: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/agentPools/default"),
				Builder:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/builders/default"),
				Env: map[string]*string{
					"environmentVariable": to.Ptr("test"),
				},
				RelativePath: to.Ptr("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855-20210601-3ed9f4a2-986b-4bbd-b833-a42dccb2f777"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_CreateOrUpdateBuild.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.Build{
			Name: to.Ptr("mybuild"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/buildServices/builds"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/builds/mybuild"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.BuildProperties{
				AgentPool: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/agentPools/default"),
				Builder:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/builders/default"),
				Env: map[string]*string{
					"environmentVariable": to.Ptr("test"),
				},
				ProvisioningState: to.Ptr(armappplatform.BuildProvisioningStateSucceeded),
				RelativePath:      to.Ptr("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855-20210601-3ed9f4a2-986b-4bbd-b833-a42dccb2f777"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Build) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Build)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_CreateOrUpdateBuild.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBuildService_ListBuildResults(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_ListBuildResults.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildService_ListBuildResults"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildServiceClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBuildResults("myResourceGroup",
		"myservice",
		"default",
		"mybuild",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_ListBuildResults.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.BuildResultCollection{
			Value: []*armappplatform.BuildResult{
				{
					Name: to.Ptr("123"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/buildServices/builds/results"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/builds/mybuild/results/123"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Properties: &armappplatform.BuildResultProperties{
						Name:         to.Ptr("123"),
						BuildPodName: to.Ptr("mybuild-default-1"),
						BuildStages: []*armappplatform.BuildStageProperties{
							{
								Name:   to.Ptr("prepare"),
								Status: to.Ptr(armappplatform.KPackBuildStageProvisioningStateRunning),
							},
							{
								Name:   to.Ptr("detect"),
								Status: to.Ptr(armappplatform.KPackBuildStageProvisioningStateNotStarted),
							},
							{
								Name:   to.Ptr("analyze"),
								Status: to.Ptr(armappplatform.KPackBuildStageProvisioningStateNotStarted),
							},
							{
								Name:   to.Ptr("restore"),
								Status: to.Ptr(armappplatform.KPackBuildStageProvisioningStateNotStarted),
							},
							{
								Name:   to.Ptr("build"),
								Status: to.Ptr(armappplatform.KPackBuildStageProvisioningStateNotStarted),
							},
							{
								Name:   to.Ptr("export"),
								Status: to.Ptr(armappplatform.KPackBuildStageProvisioningStateNotStarted),
							}},
						ProvisioningState: to.Ptr(armappplatform.BuildResultProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BuildResultCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BuildResultCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_ListBuildResults.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBuildService_GetBuildResult(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_GetBuildResult.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildService_GetBuildResult"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildServiceClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.GetBuildResult(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"mybuild",
		"123",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_GetBuildResult.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.BuildResult{
			Name: to.Ptr("123"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/buildServices/builds/results"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/builds/mybuild/results/123"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.BuildResultProperties{
				Name:         to.Ptr("123"),
				BuildPodName: to.Ptr("mybuild-default-1"),
				BuildStages: []*armappplatform.BuildStageProperties{
					{
						Name:   to.Ptr("prepare"),
						Status: to.Ptr(armappplatform.KPackBuildStageProvisioningStateRunning),
					},
					{
						Name:   to.Ptr("detect"),
						Status: to.Ptr(armappplatform.KPackBuildStageProvisioningStateNotStarted),
					},
					{
						Name:   to.Ptr("analyze"),
						Status: to.Ptr(armappplatform.KPackBuildStageProvisioningStateNotStarted),
					},
					{
						Name:   to.Ptr("restore"),
						Status: to.Ptr(armappplatform.KPackBuildStageProvisioningStateNotStarted),
					},
					{
						Name:   to.Ptr("build"),
						Status: to.Ptr(armappplatform.KPackBuildStageProvisioningStateNotStarted),
					},
					{
						Name:   to.Ptr("export"),
						Status: to.Ptr(armappplatform.KPackBuildStageProvisioningStateNotStarted),
					}},
				ProvisioningState: to.Ptr(armappplatform.BuildResultProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BuildResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BuildResult)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_GetBuildResult.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBuildService_GetBuildResultLog(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_GetBuildResultLog.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildService_GetBuildResultLog"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildServiceClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.GetBuildResultLog(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"mybuild",
		"123",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_GetBuildResultLog.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.BuildResultLog{
			BlobURL: to.Ptr("https://sample-storage-account-name.blob.core.windows.net/sample-log-blob-file?readonly-sas-token"),
		}
		if !reflect.DeepEqual(exampleRes, res.BuildResultLog) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BuildResultLog)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_GetBuildResultLog.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBuildService_ListSupportedBuildpacks(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_ListSupportedBuildpacks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildService_ListSupportedBuildpacks"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildServiceClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ListSupportedBuildpacks(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_ListSupportedBuildpacks.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.SupportedBuildpacksCollection{
			Value: []*armappplatform.SupportedBuildpackResource{
				{
					Name: to.Ptr("tanzu-buildpacks-java-azure"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/buildServices/supportedBuildpacks"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/supportedBuildpacks/tanzu-buildpacks-java-azure"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Properties: &armappplatform.SupportedBuildpackResourceProperties{
						BuildpackID: to.Ptr("tanzu-buildpacks/java-azure"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SupportedBuildpacksCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SupportedBuildpacksCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_ListSupportedBuildpacks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBuildService_GetSupportedBuildpack(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_GetSupportedBuildpack.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildService_GetSupportedBuildpack"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildServiceClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.GetSupportedBuildpack(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"tanzu-buildpacks-java-azure",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_GetSupportedBuildpack.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.SupportedBuildpackResource{
			Name: to.Ptr("tanzu-buildpacks-java-azure"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/buildServices/supportedBuildpacks"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/supportedBuildpacks/tanzu-buildpacks-java-azure"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.SupportedBuildpackResourceProperties{
				BuildpackID: to.Ptr("tanzu-buildpacks/java-azure"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SupportedBuildpackResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SupportedBuildpackResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_GetSupportedBuildpack.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBuildService_ListSupportedStacks(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_ListSupportedStacks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildService_ListSupportedStacks"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildServiceClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ListSupportedStacks(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_ListSupportedStacks.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.SupportedStacksCollection{
			Value: []*armappplatform.SupportedStackResource{
				{
					Name: to.Ptr("io.buildpacks.stacks.bionic-base"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/buildServices/supportedStacks"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/supportedStacks/io.buildpacks.stacks.bionic-base"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Properties: &armappplatform.SupportedStackResourceProperties{
						StackID: to.Ptr("io.buildpacks.stacks.bionic"),
						Version: to.Ptr("base"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SupportedStacksCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SupportedStacksCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_ListSupportedStacks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBuildService_GetSupportedStack(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_GetSupportedStack.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildService_GetSupportedStack"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildServiceClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.GetSupportedStack(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"io.buildpacks.stacks.bionic-base",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_GetSupportedStack.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.SupportedStackResource{
			Name: to.Ptr("io.buildpacks.stacks.bionic-base"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/buildServices/supportedStacks"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/supportedBuildpacks/io.buildpacks.stacks.bionic-base"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.SupportedStackResourceProperties{
				StackID: to.Ptr("io.buildpacks.stacks.bionic"),
				Version: to.Ptr("base"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SupportedStackResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SupportedStackResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildService_GetSupportedStack.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBuildpackBinding_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildpackBinding_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildpackBinding_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildpackBindingClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"default",
		"myBuildpackBinding",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildpackBinding_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.BuildpackBindingResource{
			Name: to.Ptr("myBuildpackBinding"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/buildServices/builders/buildpackBindings"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/builders/default/buildpackBindings/myBuildpackBinding"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.BuildpackBindingProperties{
				BindingType: to.Ptr(armappplatform.BindingTypeApplicationInsights),
				LaunchProperties: &armappplatform.BuildpackBindingLaunchProperties{
					Properties: map[string]*string{
						"abc":           to.Ptr("def"),
						"any-string":    to.Ptr("any-string"),
						"sampling-rate": to.Ptr("12.0"),
					},
					Secrets: map[string]*string{
						"connection-string": to.Ptr("*"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BuildpackBindingResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BuildpackBindingResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildpackBinding_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBuildpackBinding_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildpackBinding_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildpackBinding_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildpackBindingClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"default",
		"myBuildpackBinding",
		armappplatform.BuildpackBindingResource{
			Properties: &armappplatform.BuildpackBindingProperties{
				BindingType: to.Ptr(armappplatform.BindingTypeApplicationInsights),
				LaunchProperties: &armappplatform.BuildpackBindingLaunchProperties{
					Properties: map[string]*string{
						"abc":           to.Ptr("def"),
						"any-string":    to.Ptr("any-string"),
						"sampling-rate": to.Ptr("12.0"),
					},
					Secrets: map[string]*string{
						"connection-string": to.Ptr("XXXXXXXXXXXXXXXXX=XXXXXXXXXXXXX-XXXXXXXXXXXXXXXXXXX;XXXXXXXXXXXXXXXXX=XXXXXXXXXXXXXXXXXXX"),
					},
				},
			},
		},
		&armappplatform.BuildpackBindingClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildpackBinding_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildpackBinding_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.BuildpackBindingResource{
			Name: to.Ptr("myBuildpackBinding"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/buildServices/builders/buildpackBindings"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/builders/default/buildpackBindings/myBuildpackBinding"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.BuildpackBindingProperties{
				BindingType: to.Ptr(armappplatform.BindingTypeApplicationInsights),
				LaunchProperties: &armappplatform.BuildpackBindingLaunchProperties{
					Properties: map[string]*string{
						"abc":           to.Ptr("def"),
						"any-string":    to.Ptr("any-string"),
						"sampling-rate": to.Ptr("12.0"),
					},
					Secrets: map[string]*string{
						"connection-string": to.Ptr("*"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BuildpackBindingResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BuildpackBindingResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildpackBinding_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBuildpackBinding_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildpackBinding_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildpackBinding_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildpackBindingClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"default",
		"myBuildpackBinding",
		&armappplatform.BuildpackBindingClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildpackBinding_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildpackBinding_Delete.json: %v", err)
	}
}

func TestBuildpackBinding_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildpackBinding_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildpackBinding_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildpackBindingClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myservice",
		"default",
		"default",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildpackBinding_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.BuildpackBindingResourceCollection{
			Value: []*armappplatform.BuildpackBindingResource{
				{
					Name: to.Ptr("myBuildpackBinding"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/buildServices/builders/buildpackBindings"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/builders/default/buildpackBindings/myBuildpackBinding"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Properties: &armappplatform.BuildpackBindingProperties{
						BindingType: to.Ptr(armappplatform.BindingTypeApplicationInsights),
						LaunchProperties: &armappplatform.BuildpackBindingLaunchProperties{
							Properties: map[string]*string{
								"abc":           to.Ptr("def"),
								"any-string":    to.Ptr("any-string"),
								"sampling-rate": to.Ptr("12.0"),
							},
							Secrets: map[string]*string{
								"connection-string": to.Ptr("*"),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BuildpackBindingResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BuildpackBindingResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildpackBinding_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBuildServiceBuilder_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceBuilder_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildServiceBuilder_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildServiceBuilderClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"mybuilder",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceBuilder_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.BuilderResource{
			Name: to.Ptr("mybuilder"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/buildServices/builders"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/builders/mybuilder"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.BuilderProperties{
				BuildpackGroups: []*armappplatform.BuildpacksGroupProperties{
					{
						Name: to.Ptr("mix"),
						Buildpacks: []*armappplatform.BuildpackProperties{
							{
								ID: to.Ptr("tanzu-buildpacks/java-azure"),
							}},
					}},
				ProvisioningState: to.Ptr(armappplatform.BuilderProvisioningStateSucceeded),
				Stack: &armappplatform.StackProperties{
					ID:      to.Ptr("io.buildpacks.stacks.bionic"),
					Version: to.Ptr("base"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BuilderResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BuilderResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceBuilder_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBuildServiceBuilder_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceBuilder_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildServiceBuilder_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildServiceBuilderClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"mybuilder",
		armappplatform.BuilderResource{
			Properties: &armappplatform.BuilderProperties{
				BuildpackGroups: []*armappplatform.BuildpacksGroupProperties{
					{
						Name: to.Ptr("mix"),
						Buildpacks: []*armappplatform.BuildpackProperties{
							{
								ID: to.Ptr("tanzu-buildpacks/java-azure"),
							}},
					}},
				Stack: &armappplatform.StackProperties{
					ID:      to.Ptr("io.buildpacks.stacks.bionic"),
					Version: to.Ptr("base"),
				},
			},
		},
		&armappplatform.BuildServiceBuilderClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceBuilder_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceBuilder_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.BuilderResource{
			Name: to.Ptr("mybuilder"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/buildServices/builders"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/builders/mybuilder"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.BuilderProperties{
				BuildpackGroups: []*armappplatform.BuildpacksGroupProperties{
					{
						Name: to.Ptr("mix"),
						Buildpacks: []*armappplatform.BuildpackProperties{
							{
								ID: to.Ptr("tanzu-buildpacks/java-azure"),
							},
							{
								ID: to.Ptr("tanzu-buildpacks/dotnet-core"),
							}},
					}},
				ProvisioningState: to.Ptr(armappplatform.BuilderProvisioningStateSucceeded),
				Stack: &armappplatform.StackProperties{
					ID:      to.Ptr("io.buildpacks.stacks.bionic"),
					Version: to.Ptr("base"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BuilderResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BuilderResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceBuilder_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBuildServiceBuilder_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceBuilder_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildServiceBuilder_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildServiceBuilderClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"mybuilder",
		&armappplatform.BuildServiceBuilderClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceBuilder_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceBuilder_Delete.json: %v", err)
	}
}

func TestBuildServiceBuilder_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceBuilder_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildServiceBuilder_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildServiceBuilderClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myservice",
		"default",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceBuilder_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.BuilderResourceCollection{
			Value: []*armappplatform.BuilderResource{
				{
					Name: to.Ptr("mybuilder"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/buildServices/builders"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/builders/mybuilder"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Properties: &armappplatform.BuilderProperties{
						BuildpackGroups: []*armappplatform.BuildpacksGroupProperties{
							{
								Name: to.Ptr("mix"),
								Buildpacks: []*armappplatform.BuildpackProperties{
									{
										ID: to.Ptr("tanzu-buildpacks/java-azure"),
									}},
							}},
						ProvisioningState: to.Ptr(armappplatform.BuilderProvisioningStateSucceeded),
						Stack: &armappplatform.StackProperties{
							ID:      to.Ptr("io.buildpacks.stacks.bionic"),
							Version: to.Ptr("base"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BuilderResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BuilderResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceBuilder_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBuildServiceAgentPool_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceAgentPool_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildServiceAgentPool_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildServiceAgentPoolClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myservice",
		"default",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceAgentPool_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.BuildServiceAgentPoolResourceCollection{
			Value: []*armappplatform.BuildServiceAgentPoolResource{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/buildServices/agentPools"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/agentPools/default"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Properties: &armappplatform.BuildServiceAgentPoolProperties{
						PoolSize: &armappplatform.BuildServiceAgentPoolSizeProperties{
							Name:   to.Ptr("S3"),
							CPU:    to.Ptr("4"),
							Memory: to.Ptr("8Gi"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BuildServiceAgentPoolResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BuildServiceAgentPoolResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceAgentPool_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBuildServiceAgentPool_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceAgentPool_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildServiceAgentPool_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildServiceAgentPoolClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceAgentPool_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.BuildServiceAgentPoolResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/buildServices/agentPools"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/agentPools/default"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.BuildServiceAgentPoolProperties{
				PoolSize: &armappplatform.BuildServiceAgentPoolSizeProperties{
					Name:   to.Ptr("S3"),
					CPU:    to.Ptr("4"),
					Memory: to.Ptr("8Gi"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BuildServiceAgentPoolResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BuildServiceAgentPoolResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceAgentPool_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBuildServiceAgentPool_UpdatePut(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceAgentPool_UpdatePut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BuildServiceAgentPool_UpdatePut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBuildServiceAgentPoolClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdatePut(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"default",
		armappplatform.BuildServiceAgentPoolResource{
			Properties: &armappplatform.BuildServiceAgentPoolProperties{
				PoolSize: &armappplatform.BuildServiceAgentPoolSizeProperties{
					Name: to.Ptr("S3"),
				},
			},
		},
		&armappplatform.BuildServiceAgentPoolClientBeginUpdatePutOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceAgentPool_UpdatePut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceAgentPool_UpdatePut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.BuildServiceAgentPoolResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/buildServices/agentPools"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/buildServices/default/agentPools/default"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.BuildServiceAgentPoolProperties{
				PoolSize: &armappplatform.BuildServiceAgentPoolSizeProperties{
					Name:   to.Ptr("S3"),
					CPU:    to.Ptr("4"),
					Memory: to.Ptr("8Gi"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BuildServiceAgentPoolResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BuildServiceAgentPoolResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/BuildServiceAgentPool_UpdatePut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitoringSettings_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/MonitoringSettings_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MonitoringSettings_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewMonitoringSettingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/MonitoringSettings_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.MonitoringSettingResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/monitoringSettings"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/monitoringSettings/default"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.MonitoringSettingProperties{
				AppInsightsAgentVersions: &armappplatform.ApplicationInsightsAgentVersions{
					Java: to.Ptr("3.0.0"),
				},
				AppInsightsInstrumentationKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
				AppInsightsSamplingRate:       to.Ptr[float64](10),
				ProvisioningState:             to.Ptr(armappplatform.MonitoringSettingStateSucceeded),
				TraceEnabled:                  to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitoringSettingResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitoringSettingResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/MonitoringSettings_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitoringSettings_UpdatePut(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/MonitoringSettings_UpdatePut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MonitoringSettings_UpdatePut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewMonitoringSettingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdatePut(ctx,
		"myResourceGroup",
		"myservice",
		armappplatform.MonitoringSettingResource{
			Properties: &armappplatform.MonitoringSettingProperties{
				AppInsightsInstrumentationKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
				AppInsightsSamplingRate:       to.Ptr[float64](10),
				TraceEnabled:                  to.Ptr(true),
			},
		},
		&armappplatform.MonitoringSettingsClientBeginUpdatePutOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/MonitoringSettings_UpdatePut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/MonitoringSettings_UpdatePut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.MonitoringSettingResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/monitoringSettings"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/monitoringSettings/default"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.MonitoringSettingProperties{
				AppInsightsAgentVersions: &armappplatform.ApplicationInsightsAgentVersions{
					Java: to.Ptr("3.0.0"),
				},
				AppInsightsInstrumentationKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
				AppInsightsSamplingRate:       to.Ptr[float64](10),
				ProvisioningState:             to.Ptr(armappplatform.MonitoringSettingStateSucceeded),
				TraceEnabled:                  to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitoringSettingResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitoringSettingResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/MonitoringSettings_UpdatePut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitoringSettings_UpdatePatch(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/MonitoringSettings_UpdatePatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MonitoringSettings_UpdatePatch"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewMonitoringSettingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdatePatch(ctx,
		"myResourceGroup",
		"myservice",
		armappplatform.MonitoringSettingResource{
			Properties: &armappplatform.MonitoringSettingProperties{
				AppInsightsInstrumentationKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
				AppInsightsSamplingRate:       to.Ptr[float64](10),
				TraceEnabled:                  to.Ptr(true),
			},
		},
		&armappplatform.MonitoringSettingsClientBeginUpdatePatchOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/MonitoringSettings_UpdatePatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/MonitoringSettings_UpdatePatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.MonitoringSettingResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/monitoringSettings"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/monitoringSettings/default"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.MonitoringSettingProperties{
				AppInsightsAgentVersions: &armappplatform.ApplicationInsightsAgentVersions{
					Java: to.Ptr("3.0.0"),
				},
				AppInsightsInstrumentationKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
				AppInsightsSamplingRate:       to.Ptr[float64](10),
				ProvisioningState:             to.Ptr(armappplatform.MonitoringSettingStateSucceeded),
				TraceEnabled:                  to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitoringSettingResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitoringSettingResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/MonitoringSettings_UpdatePatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApps_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		&armappplatform.AppsClientGetOptions{SyncStatus: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.AppResource{
			Name: to.Ptr("myapp"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/apps"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Identity: &armappplatform.ManagedIdentityProperties{
				Type:        to.Ptr(armappplatform.ManagedIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("principalid"),
				TenantID:    to.Ptr("tenantid"),
			},
			Location: to.Ptr("eastus"),
			Properties: &armappplatform.AppResourceProperties{
				CustomPersistentDisks: []*armappplatform.CustomPersistentDiskResource{
					{
						CustomPersistentDiskProperties: &armappplatform.AzureFileVolume{
							Type: to.Ptr(armappplatform.CustomPersistentDiskPropertiesTypeAzureFileVolume),
							MountOptions: []*string{
								to.Ptr("uid=0"),
								to.Ptr("gid=0"),
								to.Ptr("dir_mode=0777"),
								to.Ptr("file_mode=0777")},
							MountPath: to.Ptr("/mypath1/mypath2"),
							ShareName: to.Ptr("myFileShare"),
						},
						StorageID: to.Ptr("myASCStorageID"),
					}},
				EnableEndToEndTLS: to.Ptr(false),
				Fqdn:              to.Ptr("myapp.mydomain.com"),
				HTTPSOnly:         to.Ptr(false),
				LoadedCertificates: []*armappplatform.LoadedCertificate{
					{
						LoadTrustStore: to.Ptr(false),
						ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/certificates/mycert1"),
					},
					{
						LoadTrustStore: to.Ptr(true),
						ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/certificates/mycert2"),
					}},
				PersistentDisk: &armappplatform.PersistentDisk{
					MountPath: to.Ptr("/mypersistentdisk"),
					SizeInGB:  to.Ptr[int32](2),
					UsedInGB:  to.Ptr[int32](1),
				},
				ProvisioningState: to.Ptr(armappplatform.AppResourceProvisioningStateSucceeded),
				Public:            to.Ptr(true),
				TemporaryDisk: &armappplatform.TemporaryDisk{
					MountPath: to.Ptr("/mytemporarydisk"),
					SizeInGB:  to.Ptr[int32](2),
				},
				URL: to.Ptr("myapp.myservice.azuremicroservices.io"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AppResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AppResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApps_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		armappplatform.AppResource{
			Location: to.Ptr("eastus"),
			Properties: &armappplatform.AppResourceProperties{
				AddonConfigs: map[string]map[string]interface{}{
					"ApplicationConfigurationService": {
						"resourceId": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configurationServices/myacs",
					},
					"ServiceRegistry": {
						"resourceId": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/serviceRegistries/myServiceRegistry",
					},
				},
				CustomPersistentDisks: []*armappplatform.CustomPersistentDiskResource{
					{
						CustomPersistentDiskProperties: &armappplatform.AzureFileVolume{
							Type: to.Ptr(armappplatform.CustomPersistentDiskPropertiesTypeAzureFileVolume),
							MountOptions: []*string{
								to.Ptr("uid=0"),
								to.Ptr("gid=0"),
								to.Ptr("dir_mode=0777"),
								to.Ptr("file_mode=0777")},
							MountPath: to.Ptr("/mypath1/mypath2"),
							ShareName: to.Ptr("myFileShare"),
						},
						StorageID: to.Ptr("myASCStorageID"),
					}},
				EnableEndToEndTLS: to.Ptr(false),
				Fqdn:              to.Ptr("myapp.mydomain.com"),
				HTTPSOnly:         to.Ptr(false),
				LoadedCertificates: []*armappplatform.LoadedCertificate{
					{
						LoadTrustStore: to.Ptr(false),
						ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/certificates/mycert1"),
					},
					{
						LoadTrustStore: to.Ptr(true),
						ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/certificates/mycert2"),
					}},
				PersistentDisk: &armappplatform.PersistentDisk{
					MountPath: to.Ptr("/mypersistentdisk"),
					SizeInGB:  to.Ptr[int32](2),
				},
				Public: to.Ptr(true),
				TemporaryDisk: &armappplatform.TemporaryDisk{
					MountPath: to.Ptr("/mytemporarydisk"),
					SizeInGB:  to.Ptr[int32](2),
				},
			},
		},
		&armappplatform.AppsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.AppResource{
			Name: to.Ptr("myapp"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/apps"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Identity: &armappplatform.ManagedIdentityProperties{
				Type:        to.Ptr(armappplatform.ManagedIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("principalid"),
				TenantID:    to.Ptr("tenantid"),
			},
			Location: to.Ptr("eastus"),
			Properties: &armappplatform.AppResourceProperties{
				AddonConfigs: map[string]map[string]interface{}{
					"ApplicationConfigurationService": {
						"resourceId": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configurationServices/myacs",
					},
					"ServiceRegistry": {
						"resourceId": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/serviceRegistries/myServiceRegistry",
					},
				},
				CustomPersistentDisks: []*armappplatform.CustomPersistentDiskResource{
					{
						CustomPersistentDiskProperties: &armappplatform.AzureFileVolume{
							Type: to.Ptr(armappplatform.CustomPersistentDiskPropertiesTypeAzureFileVolume),
							MountOptions: []*string{
								to.Ptr("uid=0"),
								to.Ptr("gid=0"),
								to.Ptr("dir_mode=0777"),
								to.Ptr("file_mode=0777")},
							MountPath: to.Ptr("/mypath1/mypath2"),
							ShareName: to.Ptr("myFileShare"),
						},
						StorageID: to.Ptr("myASCStorageID"),
					}},
				EnableEndToEndTLS: to.Ptr(false),
				Fqdn:              to.Ptr("myapp.mydomain.com"),
				HTTPSOnly:         to.Ptr(false),
				PersistentDisk: &armappplatform.PersistentDisk{
					MountPath: to.Ptr("/mypersistentdisk"),
					SizeInGB:  to.Ptr[int32](2),
					UsedInGB:  to.Ptr[int32](1),
				},
				ProvisioningState: to.Ptr(armappplatform.AppResourceProvisioningStateSucceeded),
				Public:            to.Ptr(true),
				TemporaryDisk: &armappplatform.TemporaryDisk{
					MountPath: to.Ptr("/mytemporarydisk"),
					SizeInGB:  to.Ptr[int32](2),
				},
				URL: to.Ptr("myapp.myservice.azuremicroservices.io"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AppResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AppResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApps_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		&armappplatform.AppsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_Delete.json: %v", err)
	}
}

func TestApps_Update(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		armappplatform.AppResource{
			Identity: &armappplatform.ManagedIdentityProperties{
				Type: to.Ptr(armappplatform.ManagedIdentityTypeSystemAssigned),
			},
			Location: to.Ptr("eastus"),
			Properties: &armappplatform.AppResourceProperties{
				CustomPersistentDisks: []*armappplatform.CustomPersistentDiskResource{
					{
						CustomPersistentDiskProperties: &armappplatform.AzureFileVolume{
							Type:         to.Ptr(armappplatform.CustomPersistentDiskPropertiesTypeAzureFileVolume),
							MountOptions: []*string{},
							MountPath:    to.Ptr("/mypath1/mypath2"),
							ShareName:    to.Ptr("myFileShare"),
						},
						StorageID: to.Ptr("myASCStorageID"),
					}},
				EnableEndToEndTLS: to.Ptr(false),
				Fqdn:              to.Ptr("myapp.mydomain.com"),
				HTTPSOnly:         to.Ptr(false),
				PersistentDisk: &armappplatform.PersistentDisk{
					MountPath: to.Ptr("/mypersistentdisk"),
					SizeInGB:  to.Ptr[int32](2),
				},
				Public: to.Ptr(true),
				TemporaryDisk: &armappplatform.TemporaryDisk{
					MountPath: to.Ptr("/mytemporarydisk"),
					SizeInGB:  to.Ptr[int32](2),
				},
			},
		},
		&armappplatform.AppsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.AppResource{
			Name: to.Ptr("myapp"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/apps"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Identity: &armappplatform.ManagedIdentityProperties{
				Type:        to.Ptr(armappplatform.ManagedIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("principalid"),
				TenantID:    to.Ptr("tenantid"),
			},
			Location: to.Ptr("eastus"),
			Properties: &armappplatform.AppResourceProperties{
				CustomPersistentDisks: []*armappplatform.CustomPersistentDiskResource{
					{
						CustomPersistentDiskProperties: &armappplatform.AzureFileVolume{
							Type:         to.Ptr(armappplatform.CustomPersistentDiskPropertiesTypeAzureFileVolume),
							MountOptions: []*string{},
							MountPath:    to.Ptr("/mypath1/mypath2"),
							ShareName:    to.Ptr("myFileShare"),
						},
						StorageID: to.Ptr("myASCStorageID"),
					}},
				EnableEndToEndTLS: to.Ptr(false),
				Fqdn:              to.Ptr("myapp.mydomain.com"),
				HTTPSOnly:         to.Ptr(false),
				PersistentDisk: &armappplatform.PersistentDisk{
					MountPath: to.Ptr("/mypersistentdisk"),
					SizeInGB:  to.Ptr[int32](2),
					UsedInGB:  to.Ptr[int32](1),
				},
				ProvisioningState: to.Ptr(armappplatform.AppResourceProvisioningStateSucceeded),
				Public:            to.Ptr(true),
				TemporaryDisk: &armappplatform.TemporaryDisk{
					MountPath: to.Ptr("/mytemporarydisk"),
					SizeInGB:  to.Ptr[int32](2),
				},
				URL: to.Ptr("myapp.myservice.azuremicroservices.io"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AppResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AppResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApps_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myservice",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.AppResourceCollection{
			Value: []*armappplatform.AppResource{
				{
					Name: to.Ptr("myapp"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/apps"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Identity: &armappplatform.ManagedIdentityProperties{
						Type:        to.Ptr(armappplatform.ManagedIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("principalid"),
						TenantID:    to.Ptr("tenantid"),
					},
					Location: to.Ptr("eastus"),
					Properties: &armappplatform.AppResourceProperties{
						CustomPersistentDisks: []*armappplatform.CustomPersistentDiskResource{
							{
								CustomPersistentDiskProperties: &armappplatform.AzureFileVolume{
									Type: to.Ptr(armappplatform.CustomPersistentDiskPropertiesTypeAzureFileVolume),
									MountOptions: []*string{
										to.Ptr("uid=0"),
										to.Ptr("gid=0"),
										to.Ptr("dir_mode=0777"),
										to.Ptr("file_mode=0777")},
									MountPath: to.Ptr("/mypath1/mypath2"),
									ShareName: to.Ptr("myFileShare"),
								},
								StorageID: to.Ptr("myASCStorageID"),
							}},
						EnableEndToEndTLS: to.Ptr(false),
						Fqdn:              to.Ptr("myapp.mydomain.com"),
						HTTPSOnly:         to.Ptr(false),
						LoadedCertificates: []*armappplatform.LoadedCertificate{
							{
								LoadTrustStore: to.Ptr(false),
								ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/certificates/mycert1"),
							},
							{
								LoadTrustStore: to.Ptr(true),
								ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/certificates/mycert2"),
							}},
						PersistentDisk: &armappplatform.PersistentDisk{
							MountPath: to.Ptr("/mypersistentdisk"),
							SizeInGB:  to.Ptr[int32](2),
							UsedInGB:  to.Ptr[int32](1),
						},
						ProvisioningState: to.Ptr(armappplatform.AppResourceProvisioningStateSucceeded),
						Public:            to.Ptr(true),
						TemporaryDisk: &armappplatform.TemporaryDisk{
							MountPath: to.Ptr("/mytemporarydisk"),
							SizeInGB:  to.Ptr[int32](2),
						},
						URL: to.Ptr("myapp.myservice.azuremicroservices.io"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AppResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AppResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApps_SetActiveDeployments(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_SetActiveDeployments.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_SetActiveDeployments"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginSetActiveDeployments(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		armappplatform.ActiveDeploymentCollection{
			ActiveDeploymentNames: []*string{
				to.Ptr("default")},
		},
		&armappplatform.AppsClientBeginSetActiveDeploymentsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_SetActiveDeployments.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_SetActiveDeployments.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.AppResource{
			Name: to.Ptr("myapp"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/apps"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Identity: &armappplatform.ManagedIdentityProperties{
				Type:        to.Ptr(armappplatform.ManagedIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("principalid"),
				TenantID:    to.Ptr("tenantid"),
			},
			Location: to.Ptr("eastus"),
			Properties: &armappplatform.AppResourceProperties{
				CustomPersistentDisks: []*armappplatform.CustomPersistentDiskResource{
					{
						CustomPersistentDiskProperties: &armappplatform.AzureFileVolume{
							Type:         to.Ptr(armappplatform.CustomPersistentDiskPropertiesTypeAzureFileVolume),
							MountOptions: []*string{},
							MountPath:    to.Ptr("/mypath1/mypath2"),
							ShareName:    to.Ptr("myFileShare"),
						},
						StorageID: to.Ptr("myASCStorageID"),
					}},
				EnableEndToEndTLS: to.Ptr(false),
				Fqdn:              to.Ptr("myapp.mydomain.com"),
				HTTPSOnly:         to.Ptr(false),
				PersistentDisk: &armappplatform.PersistentDisk{
					MountPath: to.Ptr("/mypersistentdisk"),
					SizeInGB:  to.Ptr[int32](2),
					UsedInGB:  to.Ptr[int32](1),
				},
				ProvisioningState: to.Ptr(armappplatform.AppResourceProvisioningStateSucceeded),
				Public:            to.Ptr(true),
				TemporaryDisk: &armappplatform.TemporaryDisk{
					MountPath: to.Ptr("/mytemporarydisk"),
					SizeInGB:  to.Ptr[int32](2),
				},
				URL: to.Ptr("myapp.myservice.azuremicroservices.io"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AppResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AppResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_SetActiveDeployments.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApps_ValidateDomain(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_ValidateDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_ValidateDomain"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ValidateDomain(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		armappplatform.CustomDomainValidatePayload{
			Name: to.Ptr("mydomain.io"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_ValidateDomain.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.CustomDomainValidateResult{
			IsValid: to.Ptr(false),
			Message: to.Ptr("Certificate is invalid, please check if it is a self signed cert or if it contains a suitable dns name"),
		}
		if !reflect.DeepEqual(exampleRes, res.CustomDomainValidateResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomDomainValidateResult)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Apps_ValidateDomain.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBindings_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Bindings_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Bindings_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBindingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mybinding",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Bindings_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.BindingResource{
			Name: to.Ptr("mybinding"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/bindings"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/bindings/mybinding"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.BindingResourceProperties{
				BindingParameters: map[string]interface{}{
					"apiType":      "SQL",
					"databaseName": "db1",
				},
				CreatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
				GeneratedProperties: to.Ptr("spring.datasource.url=jdbc:mysql://localhost:3306/test\nspring.datasource.username=root\nspring.datasource.password=1****6"),
				ResourceID:          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
				ResourceName:        to.Ptr("my-cosmosdb-1"),
				ResourceType:        to.Ptr("Microsoft.DocumentDB"),
				UpdatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BindingResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BindingResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Bindings_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBindings_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Bindings_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Bindings_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBindingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mybinding",
		armappplatform.BindingResource{
			Properties: &armappplatform.BindingResourceProperties{
				BindingParameters: map[string]interface{}{
					"apiType":      "SQL",
					"databaseName": "db1",
				},
				Key:        to.Ptr("xxxx"),
				ResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
			},
		},
		&armappplatform.BindingsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Bindings_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Bindings_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.BindingResource{
			Name: to.Ptr("mybinding"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/bindings"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/bindings/mybinding"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.BindingResourceProperties{
				BindingParameters: map[string]interface{}{
					"apiType":      "SQL",
					"databaseName": "db1",
				},
				CreatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
				GeneratedProperties: to.Ptr("spring.datasource.url=jdbc:mysql://localhost:3306/test\nspring.datasource.username=root\nspring.datasource.password=1****6"),
				ResourceID:          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
				ResourceName:        to.Ptr("my-cosmosdb-1"),
				ResourceType:        to.Ptr("Microsoft.DocumentDB"),
				UpdatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BindingResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BindingResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Bindings_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBindings_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Bindings_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Bindings_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBindingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mybinding",
		&armappplatform.BindingsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Bindings_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Bindings_Delete.json: %v", err)
	}
}

func TestBindings_Update(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Bindings_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Bindings_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBindingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mybinding",
		armappplatform.BindingResource{
			Properties: &armappplatform.BindingResourceProperties{
				BindingParameters: map[string]interface{}{
					"apiType":      "SQL",
					"databaseName": "db1",
				},
				Key: to.Ptr("xxxx"),
			},
		},
		&armappplatform.BindingsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Bindings_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Bindings_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.BindingResource{
			Name: to.Ptr("mybinding"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/bindings"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/bindings/mybinding"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.BindingResourceProperties{
				BindingParameters: map[string]interface{}{
					"apiType":      "SQL",
					"databaseName": "db1",
				},
				CreatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
				GeneratedProperties: to.Ptr("spring.datasource.url=jdbc:mysql://localhost:3306/test\nspring.datasource.username=root\nspring.datasource.password=1****6"),
				ResourceID:          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
				ResourceName:        to.Ptr("my-cosmosdb-1"),
				ResourceType:        to.Ptr("Microsoft.DocumentDB"),
				UpdatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BindingResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BindingResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Bindings_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBindings_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Bindings_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Bindings_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewBindingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myservice",
		"myapp",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Bindings_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.BindingResourceCollection{
			Value: []*armappplatform.BindingResource{
				{
					Name: to.Ptr("mybinding"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/bindings"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/bindings/mybinding"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Properties: &armappplatform.BindingResourceProperties{
						BindingParameters: map[string]interface{}{
							"apiType":      "SQL",
							"databaseName": "db1",
						},
						CreatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
						GeneratedProperties: to.Ptr("spring.datasource.url=jdbc:mysql://localhost:3306/test\nspring.datasource.username=root\nspring.datasource.password=1****6"),
						ResourceID:          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
						ResourceName:        to.Ptr("my-cosmosdb-1"),
						ResourceType:        to.Ptr("Microsoft.DocumentDB"),
						UpdatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BindingResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BindingResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Bindings_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorages_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Storages_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Storages_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewStoragesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"mystorage",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Storages_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.StorageResource{
			Name: to.Ptr("mystorage"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/storages"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/storages/mystorage"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.StorageAccount{
				StorageType: to.Ptr(armappplatform.StoragePropertiesStorageTypeStorageAccount),
				AccountName: to.Ptr("storage-account-name"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StorageResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StorageResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Storages_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorages_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Storages_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Storages_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewStoragesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"mystorage",
		armappplatform.StorageResource{
			Properties: &armappplatform.StorageAccount{
				StorageType: to.Ptr(armappplatform.StoragePropertiesStorageTypeStorageAccount),
				AccountKey:  to.Ptr("account-key-of-storage-account"),
				AccountName: to.Ptr("storage-account-name"),
			},
		},
		&armappplatform.StoragesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Storages_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Storages_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.StorageResource{
			Name: to.Ptr("mystorage"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/storages"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/storages/mystorage"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.StorageAccount{
				StorageType: to.Ptr(armappplatform.StoragePropertiesStorageTypeStorageAccount),
				AccountName: to.Ptr("storage-account-name"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StorageResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StorageResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Storages_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorages_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Storages_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Storages_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewStoragesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"mystorage",
		&armappplatform.StoragesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Storages_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Storages_Delete.json: %v", err)
	}
}

func TestStorages_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Storages_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Storages_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewStoragesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myService",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Storages_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.StorageResourceCollection{
			Value: []*armappplatform.StorageResource{
				{
					Name: to.Ptr("mystorage"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/storages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/storages/mystorage"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Properties: &armappplatform.StorageAccount{
						StorageType: to.Ptr(armappplatform.StoragePropertiesStorageTypeStorageAccount),
						AccountName: to.Ptr("storage-account-name"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StorageResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StorageResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Storages_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificates_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Certificates_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Certificates_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewCertificatesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"mycertificate",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Certificates_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.CertificateResource{
			Name: to.Ptr("mycertificate"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/certificates"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/certificates/mycertificate"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.KeyVaultCertificateProperties{
				Type:         to.Ptr("KeyVaultCertificate"),
				ActivateDate: to.Ptr("2019-02-22T07:40:42Z"),
				DNSNames: []*string{
					to.Ptr("mydomain.com"),
					to.Ptr("mydomain.net"),
					to.Ptr("mydomain.io")},
				ExpirationDate:    to.Ptr("2019-02-21T07:40:42Z"),
				IssuedDate:        to.Ptr("2019-02-20T07:40:42Z"),
				Issuer:            to.Ptr("mydomain.com"),
				SubjectName:       to.Ptr("mysubjectname"),
				Thumbprint:        to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
				CertVersion:       to.Ptr("08a219d06d874795a96db47e06fbb01e"),
				ExcludePrivateKey: to.Ptr(false),
				KeyVaultCertName:  to.Ptr("mycert"),
				VaultURI:          to.Ptr("https://myvault.vault.azure.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CertificateResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CertificateResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Certificates_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificates_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Certificates_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Certificates_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewCertificatesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"mycertificate",
		armappplatform.CertificateResource{
			Properties: &armappplatform.KeyVaultCertificateProperties{
				Type:             to.Ptr("KeyVaultCertificate"),
				CertVersion:      to.Ptr("08a219d06d874795a96db47e06fbb01e"),
				KeyVaultCertName: to.Ptr("mycert"),
				VaultURI:         to.Ptr("https://myvault.vault.azure.net"),
			},
		},
		&armappplatform.CertificatesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Certificates_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Certificates_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.CertificateResource{
			Name: to.Ptr("mycertificate"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/certificates"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/certificates/mycertificate"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.KeyVaultCertificateProperties{
				Type:         to.Ptr("KeyVaultCertificate"),
				ActivateDate: to.Ptr("2019-02-22T07:40:42Z"),
				DNSNames: []*string{
					to.Ptr("mydomain.com"),
					to.Ptr("mydomain.net"),
					to.Ptr("mydomain.io")},
				ExpirationDate:    to.Ptr("2019-02-21T07:40:42Z"),
				IssuedDate:        to.Ptr("2019-02-20T07:40:42Z"),
				Issuer:            to.Ptr("mydomain.com"),
				SubjectName:       to.Ptr("mysubjectname"),
				Thumbprint:        to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
				CertVersion:       to.Ptr("08a219d06d874795a96db47e06fbb01e"),
				ExcludePrivateKey: to.Ptr(false),
				KeyVaultCertName:  to.Ptr("mycert"),
				VaultURI:          to.Ptr("https://myvault.vault.azure.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CertificateResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CertificateResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Certificates_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificates_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Certificates_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Certificates_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewCertificatesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"mycertificate",
		&armappplatform.CertificatesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Certificates_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Certificates_Delete.json: %v", err)
	}
}

func TestCertificates_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Certificates_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Certificates_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewCertificatesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myService",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Certificates_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.CertificateResourceCollection{
			Value: []*armappplatform.CertificateResource{
				{
					Name: to.Ptr("mycertificate"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/certificates"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/certificates/mycertificate"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Properties: &armappplatform.KeyVaultCertificateProperties{
						Type:         to.Ptr("KeyVaultCertificate"),
						ActivateDate: to.Ptr("2019-02-22T07:40:42Z"),
						DNSNames: []*string{
							to.Ptr("mydomain.com"),
							to.Ptr("mydomain.net"),
							to.Ptr("mydomain.io")},
						ExpirationDate:    to.Ptr("2019-02-21T07:40:42Z"),
						IssuedDate:        to.Ptr("2019-02-20T07:40:42Z"),
						Issuer:            to.Ptr("mydomain.com"),
						SubjectName:       to.Ptr("mysubjectname"),
						Thumbprint:        to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
						CertVersion:       to.Ptr("08a219d06d874795a96db47e06fbb01e"),
						ExcludePrivateKey: to.Ptr(false),
						KeyVaultCertName:  to.Ptr("mycert"),
						VaultURI:          to.Ptr("https://myvault.vault.azure.net"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CertificateResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CertificateResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Certificates_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomDomains_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/CustomDomains_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomDomains_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydomain.com",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/CustomDomains_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.CustomDomainResource{
			Name: to.Ptr("mydomain.com"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/domains"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/domains/mydomain.com"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.CustomDomainProperties{
				AppName:    to.Ptr("myapp"),
				CertName:   to.Ptr("mycert"),
				Thumbprint: to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomDomainResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomDomainResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/CustomDomains_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomDomains_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/CustomDomains_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomDomains_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydomain.com",
		armappplatform.CustomDomainResource{
			Properties: &armappplatform.CustomDomainProperties{
				CertName:   to.Ptr("mycert"),
				Thumbprint: to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
			},
		},
		&armappplatform.CustomDomainsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/CustomDomains_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/CustomDomains_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.CustomDomainResource{
			Name: to.Ptr("mydomain.com"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/domains"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/domains/mydomain.com"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.CustomDomainProperties{
				AppName:    to.Ptr("myapp"),
				CertName:   to.Ptr("mycert"),
				Thumbprint: to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomDomainResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomDomainResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/CustomDomains_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomDomains_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/CustomDomains_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomDomains_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydomain.com",
		&armappplatform.CustomDomainsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/CustomDomains_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/CustomDomains_Delete.json: %v", err)
	}
}

func TestCustomDomains_Update(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/CustomDomains_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomDomains_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydomain.com",
		armappplatform.CustomDomainResource{
			Properties: &armappplatform.CustomDomainProperties{
				CertName:   to.Ptr("mycert"),
				Thumbprint: to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
			},
		},
		&armappplatform.CustomDomainsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/CustomDomains_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/CustomDomains_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.CustomDomainResource{
			Name: to.Ptr("mydomain.com"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/domains"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/domains/mydomain.com"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.CustomDomainProperties{
				AppName:    to.Ptr("myapp"),
				CertName:   to.Ptr("mycert"),
				Thumbprint: to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomDomainResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomDomainResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/CustomDomains_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomDomains_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/CustomDomains_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomDomains_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myservice",
		"myapp",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/CustomDomains_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.CustomDomainResourceCollection{
			Value: []*armappplatform.CustomDomainResource{
				{
					Name: to.Ptr("mydomain.com"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/domains"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/domains/mydomain.com"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Properties: &armappplatform.CustomDomainProperties{
						AppName:    to.Ptr("myapp"),
						CertName:   to.Ptr("mycert"),
						Thumbprint: to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CustomDomainResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CustomDomainResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/CustomDomains_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.DeploymentResource{
			Name: to.Ptr("mydeployment"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/deployments"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.DeploymentResourceProperties{
				Active: to.Ptr(true),
				DeploymentSettings: &armappplatform.DeploymentSettings{
					EnvironmentVariables: map[string]*string{
						"env": to.Ptr("test"),
					},
					ResourceRequests: &armappplatform.ResourceRequests{
						CPU:    to.Ptr("1000m"),
						Memory: to.Ptr("3Gi"),
					},
				},
				Instances: []*armappplatform.DeploymentInstance{
					{
						Name:            to.Ptr("instance1"),
						DiscoveryStatus: to.Ptr("pending"),
						StartTime:       to.Ptr("2020-08-26T01:55:02Z"),
						Status:          to.Ptr("Running"),
					}},
				ProvisioningState: to.Ptr(armappplatform.DeploymentResourceProvisioningStateSucceeded),
				Source: &armappplatform.SourceUploadedUserSourceInfo{
					Type:             to.Ptr("Source"),
					Version:          to.Ptr("1.0"),
					RelativePath:     to.Ptr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
					ArtifactSelector: to.Ptr("sub-module-1"),
				},
				Status: to.Ptr(armappplatform.DeploymentResourceStatusRunning),
			},
			SKU: &armappplatform.SKU{
				Name:     to.Ptr("S0"),
				Capacity: to.Ptr[int32](1),
				Tier:     to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeploymentResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeploymentResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Get_CustomContainer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_Get_CustomContainer"},
	})
	client = armappplatform.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Get_CustomContainer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.DeploymentResource{
			Name: to.Ptr("mydeployment"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/deployments"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.DeploymentResourceProperties{
				Active: to.Ptr(false),
				DeploymentSettings: &armappplatform.DeploymentSettings{
					EnvironmentVariables: map[string]*string{
						"env": to.Ptr("test"),
					},
					ResourceRequests: &armappplatform.ResourceRequests{
						CPU:    to.Ptr("1000m"),
						Memory: to.Ptr("3Gi"),
					},
				},
				Instances: []*armappplatform.DeploymentInstance{
					{
						Name:            to.Ptr("instance1"),
						DiscoveryStatus: to.Ptr("N/A"),
						StartTime:       to.Ptr("2020-08-26T01:55:02Z"),
						Status:          to.Ptr("Running"),
					}},
				ProvisioningState: to.Ptr(armappplatform.DeploymentResourceProvisioningStateSucceeded),
				Source: &armappplatform.CustomContainerUserSourceInfo{
					Type: to.Ptr("Container"),
					CustomContainer: &armappplatform.CustomContainer{
						Args: []*string{
							to.Ptr("-c"),
							to.Ptr("while true; do echo hello; sleep 10;done")},
						Command: []*string{
							to.Ptr("/bin/sh")},
						ContainerImage: to.Ptr("myContainerImage:v1"),
						ImageRegistryCredential: &armappplatform.ImageRegistryCredential{
							Password: to.Ptr(""),
							Username: to.Ptr("myUsername"),
						},
						Server: to.Ptr("myacr.azurecr.io"),
					},
				},
				Status: to.Ptr(armappplatform.DeploymentResourceStatusRunning),
			},
			SKU: &armappplatform.SKU{
				Name:     to.Ptr("S0"),
				Capacity: to.Ptr[int32](1),
				Tier:     to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeploymentResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeploymentResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Get_CustomContainer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		armappplatform.DeploymentResource{
			Properties: &armappplatform.DeploymentResourceProperties{
				DeploymentSettings: &armappplatform.DeploymentSettings{
					AddonConfigs: map[string]map[string]interface{}{
						"ApplicationConfigurationService": {
							"patterns": []interface{}{
								"mypattern",
							},
						},
					},
					EnvironmentVariables: map[string]*string{
						"env": to.Ptr("test"),
					},
					ResourceRequests: &armappplatform.ResourceRequests{
						CPU:    to.Ptr("1000m"),
						Memory: to.Ptr("3Gi"),
					},
				},
				Source: &armappplatform.SourceUploadedUserSourceInfo{
					Type:             to.Ptr("Source"),
					Version:          to.Ptr("1.0"),
					RelativePath:     to.Ptr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
					ArtifactSelector: to.Ptr("sub-module-1"),
				},
			},
			SKU: &armappplatform.SKU{
				Name:     to.Ptr("S0"),
				Capacity: to.Ptr[int32](1),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armappplatform.DeploymentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.DeploymentResource{
			Name: to.Ptr("mydeployment"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/deployments"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.DeploymentResourceProperties{
				Active: to.Ptr(false),
				DeploymentSettings: &armappplatform.DeploymentSettings{
					EnvironmentVariables: map[string]*string{
						"env": to.Ptr("test"),
					},
					ResourceRequests: &armappplatform.ResourceRequests{
						CPU:    to.Ptr("1000m"),
						Memory: to.Ptr("3Gi"),
					},
				},
				Instances: []*armappplatform.DeploymentInstance{
					{
						Name:            to.Ptr("instance1"),
						DiscoveryStatus: to.Ptr("pending"),
						StartTime:       to.Ptr("2020-08-26T01:55:02Z"),
						Status:          to.Ptr("Running"),
					}},
				ProvisioningState: to.Ptr(armappplatform.DeploymentResourceProvisioningStateSucceeded),
				Source: &armappplatform.SourceUploadedUserSourceInfo{
					Type:             to.Ptr("Source"),
					Version:          to.Ptr("1.0"),
					RelativePath:     to.Ptr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
					ArtifactSelector: to.Ptr("sub-module-1"),
				},
				Status: to.Ptr(armappplatform.DeploymentResourceStatusRunning),
			},
			SKU: &armappplatform.SKU{
				Name:     to.Ptr("S0"),
				Capacity: to.Ptr[int32](1),
				Tier:     to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeploymentResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeploymentResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_CreateOrUpdate_CustomContainer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_CreateOrUpdate_CustomContainer"},
	})
	client = armappplatform.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		armappplatform.DeploymentResource{
			Properties: &armappplatform.DeploymentResourceProperties{
				DeploymentSettings: &armappplatform.DeploymentSettings{
					EnvironmentVariables: map[string]*string{
						"env": to.Ptr("test"),
					},
					ResourceRequests: &armappplatform.ResourceRequests{
						CPU:    to.Ptr("1000m"),
						Memory: to.Ptr("3Gi"),
					},
				},
				Source: &armappplatform.CustomContainerUserSourceInfo{
					Type: to.Ptr("Container"),
					CustomContainer: &armappplatform.CustomContainer{
						Args: []*string{
							to.Ptr("-c"),
							to.Ptr("while true; do echo hello; sleep 10;done")},
						Command: []*string{
							to.Ptr("/bin/sh")},
						ContainerImage: to.Ptr("myContainerImage:v1"),
						ImageRegistryCredential: &armappplatform.ImageRegistryCredential{
							Password: to.Ptr("myPassword"),
							Username: to.Ptr("myUsername"),
						},
						Server: to.Ptr("myacr.azurecr.io"),
					},
				},
			},
		},
		&armappplatform.DeploymentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_CreateOrUpdate_CustomContainer.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_CreateOrUpdate_CustomContainer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.DeploymentResource{
			Name: to.Ptr("mydeployment"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/deployments"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.DeploymentResourceProperties{
				Active: to.Ptr(false),
				DeploymentSettings: &armappplatform.DeploymentSettings{
					EnvironmentVariables: map[string]*string{
						"env": to.Ptr("test"),
					},
					ResourceRequests: &armappplatform.ResourceRequests{
						CPU:    to.Ptr("1000m"),
						Memory: to.Ptr("3Gi"),
					},
				},
				Instances: []*armappplatform.DeploymentInstance{
					{
						Name:            to.Ptr("instance1"),
						DiscoveryStatus: to.Ptr("N/A"),
						StartTime:       to.Ptr("2020-08-26T01:55:02Z"),
						Status:          to.Ptr("Running"),
					}},
				ProvisioningState: to.Ptr(armappplatform.DeploymentResourceProvisioningStateSucceeded),
				Source: &armappplatform.CustomContainerUserSourceInfo{
					Type: to.Ptr("Container"),
					CustomContainer: &armappplatform.CustomContainer{
						ContainerImage: to.Ptr("myContainerImage:v1"),
						ImageRegistryCredential: &armappplatform.ImageRegistryCredential{
							Password: to.Ptr(""),
							Username: to.Ptr("myUsername"),
						},
						Server: to.Ptr("myacr.azurecr.io"),
					},
				},
				Status: to.Ptr(armappplatform.DeploymentResourceStatusRunning),
			},
			SKU: &armappplatform.SKU{
				Name:     to.Ptr("S0"),
				Capacity: to.Ptr[int32](1),
				Tier:     to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeploymentResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeploymentResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_CreateOrUpdate_CustomContainer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		&armappplatform.DeploymentsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Delete.json: %v", err)
	}
}

func TestDeployments_Update(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		armappplatform.DeploymentResource{
			Properties: &armappplatform.DeploymentResourceProperties{
				Source: &armappplatform.SourceUploadedUserSourceInfo{
					Type:             to.Ptr("Source"),
					Version:          to.Ptr("1.0"),
					RelativePath:     to.Ptr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
					ArtifactSelector: to.Ptr("sub-module-1"),
				},
			},
		},
		&armappplatform.DeploymentsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.DeploymentResource{
			Name: to.Ptr("mydeployment"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/deployments"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.DeploymentResourceProperties{
				Active: to.Ptr(true),
				DeploymentSettings: &armappplatform.DeploymentSettings{
					EnvironmentVariables: map[string]*string{
						"env": to.Ptr("test"),
					},
					ResourceRequests: &armappplatform.ResourceRequests{
						CPU:    to.Ptr("1000m"),
						Memory: to.Ptr("3Gi"),
					},
				},
				Instances: []*armappplatform.DeploymentInstance{
					{
						Name:            to.Ptr("instance1"),
						DiscoveryStatus: to.Ptr("pending"),
						StartTime:       to.Ptr("2020-08-26T01:55:02Z"),
						Status:          to.Ptr("Running"),
					}},
				ProvisioningState: to.Ptr(armappplatform.DeploymentResourceProvisioningStateSucceeded),
				Source: &armappplatform.SourceUploadedUserSourceInfo{
					Type:             to.Ptr("Source"),
					Version:          to.Ptr("1.0"),
					RelativePath:     to.Ptr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
					ArtifactSelector: to.Ptr("sub-module-1"),
				},
				Status: to.Ptr(armappplatform.DeploymentResourceStatusRunning),
			},
			SKU: &armappplatform.SKU{
				Name:     to.Ptr("S0"),
				Capacity: to.Ptr[int32](1),
				Tier:     to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeploymentResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeploymentResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Update_CustomContainer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_Update_CustomContainer"},
	})
	client = armappplatform.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		armappplatform.DeploymentResource{
			Properties: &armappplatform.DeploymentResourceProperties{
				Source: &armappplatform.CustomContainerUserSourceInfo{
					Type: to.Ptr("Container"),
					CustomContainer: &armappplatform.CustomContainer{
						Args: []*string{
							to.Ptr("-c"),
							to.Ptr("while true; do echo hello; sleep 10;done")},
						Command: []*string{
							to.Ptr("/bin/sh")},
						ContainerImage: to.Ptr("myNewContainerImage:v1"),
						ImageRegistryCredential: &armappplatform.ImageRegistryCredential{
							Password: to.Ptr("<myNewPassword>"),
							Username: to.Ptr("myNewUsername"),
						},
						Server: to.Ptr("mynewacr.azurecr.io"),
					},
				},
			},
		},
		&armappplatform.DeploymentsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Update_CustomContainer.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Update_CustomContainer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.DeploymentResource{
			Name: to.Ptr("mydeployment"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/deployments"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.DeploymentResourceProperties{
				Active: to.Ptr(false),
				DeploymentSettings: &armappplatform.DeploymentSettings{
					EnvironmentVariables: map[string]*string{
						"env": to.Ptr("test"),
					},
					ResourceRequests: &armappplatform.ResourceRequests{
						CPU:    to.Ptr("1000m"),
						Memory: to.Ptr("3Gi"),
					},
				},
				Instances: []*armappplatform.DeploymentInstance{
					{
						Name:            to.Ptr("instance1"),
						DiscoveryStatus: to.Ptr("N/A"),
						StartTime:       to.Ptr("2020-08-26T01:55:02Z"),
						Status:          to.Ptr("Running"),
					}},
				ProvisioningState: to.Ptr(armappplatform.DeploymentResourceProvisioningStateSucceeded),
				Source: &armappplatform.CustomContainerUserSourceInfo{
					Type: to.Ptr("Container"),
					CustomContainer: &armappplatform.CustomContainer{
						ContainerImage: to.Ptr("myNewContainerImage:v1"),
						ImageRegistryCredential: &armappplatform.ImageRegistryCredential{
							Password: to.Ptr(""),
							Username: to.Ptr("myNewUsername"),
						},
						Server: to.Ptr("mynewacr.azurecr.io"),
					},
				},
				Status: to.Ptr(armappplatform.DeploymentResourceStatusRunning),
			},
			SKU: &armappplatform.SKU{
				Name:     to.Ptr("S0"),
				Capacity: to.Ptr[int32](1),
				Tier:     to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeploymentResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeploymentResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Update_CustomContainer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myservice",
		"myapp",
		&armappplatform.DeploymentsClientListOptions{Version: []string{}})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.DeploymentResourceCollection{
			Value: []*armappplatform.DeploymentResource{
				{
					Name: to.Ptr("mydeployment"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/deployments"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Properties: &armappplatform.DeploymentResourceProperties{
						Active: to.Ptr(true),
						DeploymentSettings: &armappplatform.DeploymentSettings{
							EnvironmentVariables: map[string]*string{
								"env": to.Ptr("test"),
							},
							ResourceRequests: &armappplatform.ResourceRequests{
								CPU:    to.Ptr("1000m"),
								Memory: to.Ptr("3Gi"),
							},
						},
						Instances: []*armappplatform.DeploymentInstance{
							{
								Name:            to.Ptr("instance1"),
								DiscoveryStatus: to.Ptr("pending"),
								StartTime:       to.Ptr("2020-08-26T01:55:02Z"),
								Status:          to.Ptr("Running"),
							}},
						ProvisioningState: to.Ptr(armappplatform.DeploymentResourceProvisioningStateSucceeded),
						Source: &armappplatform.SourceUploadedUserSourceInfo{
							Type:             to.Ptr("Source"),
							Version:          to.Ptr("1.0"),
							RelativePath:     to.Ptr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
							ArtifactSelector: to.Ptr("sub-module-1"),
						},
						Status: to.Ptr(armappplatform.DeploymentResourceStatusRunning),
					},
					SKU: &armappplatform.SKU{
						Name:     to.Ptr("S0"),
						Capacity: to.Ptr[int32](1),
						Tier:     to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeploymentResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeploymentResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_ListForCluster(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_ListForCluster.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_ListForCluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListForCluster("myResourceGroup",
		"myservice",
		&armappplatform.DeploymentsClientListForClusterOptions{Version: []string{}})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_ListForCluster.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.DeploymentResourceCollection{
			Value: []*armappplatform.DeploymentResource{
				{
					Name: to.Ptr("mydeployment"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/deployments"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Properties: &armappplatform.DeploymentResourceProperties{
						Active: to.Ptr(true),
						DeploymentSettings: &armappplatform.DeploymentSettings{
							EnvironmentVariables: map[string]*string{
								"env": to.Ptr("test"),
							},
							ResourceRequests: &armappplatform.ResourceRequests{
								CPU:    to.Ptr("1000m"),
								Memory: to.Ptr("3Gi"),
							},
						},
						Instances: []*armappplatform.DeploymentInstance{
							{
								Name:            to.Ptr("instance1"),
								DiscoveryStatus: to.Ptr("pending"),
								StartTime:       to.Ptr("2020-08-26T01:55:02Z"),
								Status:          to.Ptr("Running"),
							}},
						ProvisioningState: to.Ptr(armappplatform.DeploymentResourceProvisioningStateSucceeded),
						Source: &armappplatform.SourceUploadedUserSourceInfo{
							Type:             to.Ptr("Source"),
							Version:          to.Ptr("1.0"),
							RelativePath:     to.Ptr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
							ArtifactSelector: to.Ptr("sub-module-1"),
						},
						Status: to.Ptr(armappplatform.DeploymentResourceStatusRunning),
					},
					SKU: &armappplatform.SKU{
						Name:     to.Ptr("S0"),
						Capacity: to.Ptr[int32](1),
						Tier:     to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeploymentResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeploymentResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_ListForCluster.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_Start(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Start.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_Start"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginStart(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		&armappplatform.DeploymentsClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Start.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Start.json: %v", err)
	}
}

func TestDeployments_Stop(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Stop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_Stop"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginStop(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		&armappplatform.DeploymentsClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Stop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Stop.json: %v", err)
	}
}

func TestDeployments_Restart(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Restart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_Restart"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginRestart(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		&armappplatform.DeploymentsClientBeginRestartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Restart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_Restart.json: %v", err)
	}
}

func TestDeployments_GenerateHeapDump(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_GenerateHeapDump.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_GenerateHeapDump"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginGenerateHeapDump(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		armappplatform.DiagnosticParameters{
			AppInstance: to.Ptr("myappinstance"),
			FilePath:    to.Ptr("/byos/diagnose"),
		},
		&armappplatform.DeploymentsClientBeginGenerateHeapDumpOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_GenerateHeapDump.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_GenerateHeapDump.json: %v", err)
	}
}

func TestDeployments_GenerateThreadDump(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_GenerateThreadDump.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_GenerateHeapDump"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginGenerateThreadDump(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		armappplatform.DiagnosticParameters{
			AppInstance: to.Ptr("myappinstance"),
			FilePath:    to.Ptr("/byos/diagnose"),
		},
		&armappplatform.DeploymentsClientBeginGenerateThreadDumpOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_GenerateThreadDump.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_GenerateThreadDump.json: %v", err)
	}
}

func TestDeployments_StartJFR(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_StartJFR.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_StartJFR"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginStartJFR(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		armappplatform.DiagnosticParameters{
			AppInstance: to.Ptr("myappinstance"),
			Duration:    to.Ptr("60s"),
			FilePath:    to.Ptr("/byos/diagnose"),
		},
		&armappplatform.DeploymentsClientBeginStartJFROptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_StartJFR.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Deployments_StartJFR.json: %v", err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.AvailableOperations{
			Value: []*armappplatform.OperationDetail{
				{
					Name: to.Ptr("Microsoft.AppPlatform/Spring/read"),
					Display: &armappplatform.OperationDisplay{
						Description: to.Ptr("Create or Update Managed Applications"),
						Operation:   to.Ptr("Create or Update Managed Applications"),
						Provider:    to.Ptr("Microsoft Azure Distributed Managed Service for Spring"),
						Resource:    to.Ptr("Managed Applications"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &armappplatform.OperationProperties{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AvailableOperations) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AvailableOperations)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRuntimeVersions_ListRuntimeVersions(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/RuntimeVersions_ListRuntimeVersions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RuntimeVersions_ListRuntimeVersions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewRuntimeVersionsClient(cred, &options)
	res, err := client.ListRuntimeVersions(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/RuntimeVersions_ListRuntimeVersions.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.AvailableRuntimeVersions{
			Value: []*armappplatform.SupportedRuntimeVersion{
				{
					Platform: to.Ptr(armappplatform.SupportedRuntimePlatformJava),
					Value:    to.Ptr(armappplatform.SupportedRuntimeValueJava8),
					Version:  to.Ptr("8"),
				},
				{
					Platform: to.Ptr(armappplatform.SupportedRuntimePlatformJava),
					Value:    to.Ptr(armappplatform.SupportedRuntimeValueJava11),
					Version:  to.Ptr("11"),
				},
				{
					Platform: to.Ptr(armappplatform.SupportedRuntimePlatformJava),
					Value:    to.Ptr(armappplatform.SupportedRuntimeValueJava17),
					Version:  to.Ptr("17"),
				},
				{
					Platform: to.Ptr(armappplatform.SupportedRuntimePlatformNETCore),
					Value:    to.Ptr(armappplatform.SupportedRuntimeValueNetCore31),
					Version:  to.Ptr("3.1"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AvailableRuntimeVersions) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AvailableRuntimeVersions)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/RuntimeVersions_ListRuntimeVersions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSKUs_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Skus_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Skus_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewSKUsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Skus_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.ResourceSKUCollection{
			Value: []*armappplatform.ResourceSKU{
				{
					Name: to.Ptr("B0"),
					Capacity: &armappplatform.SKUCapacity{
						Default:   to.Ptr[int32](1),
						Maximum:   to.Ptr[int32](20),
						Minimum:   to.Ptr[int32](1),
						ScaleType: to.Ptr(armappplatform.SKUScaleTypeAutomatic),
					},
					LocationInfo: []*armappplatform.ResourceSKULocationInfo{
						{
							Location:    to.Ptr("eastus"),
							ZoneDetails: []*armappplatform.ResourceSKUZoneDetails{},
							Zones:       []*string{},
						}},
					Locations: []*string{
						to.Ptr("eastus")},
					ResourceType: to.Ptr("Spring"),
					Restrictions: []*armappplatform.ResourceSKURestrictions{},
					Tier:         to.Ptr("Basic"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceSKUCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceSKUCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Skus_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGateways_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Gateways_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gateways_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewGatewaysClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Gateways_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.GatewayResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/gateways"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/gateways/default"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.GatewayProperties{
				Instances: []*armappplatform.GatewayInstance{
					{
						Name:   to.Ptr("instance1"),
						Status: to.Ptr("Running"),
					},
					{
						Name:   to.Ptr("instance2"),
						Status: to.Ptr("Running"),
					}},
				OperatorProperties: &armappplatform.GatewayOperatorProperties{
					Instances: []*armappplatform.GatewayInstance{
						{
							Name:   to.Ptr("instance1"),
							Status: to.Ptr("Running"),
						},
						{
							Name:   to.Ptr("instance2"),
							Status: to.Ptr("Running"),
						}},
					ResourceRequests: &armappplatform.GatewayOperatorResourceRequests{
						CPU:           to.Ptr("1"),
						InstanceCount: to.Ptr[int32](2),
						Memory:        to.Ptr("1G"),
					},
				},
				ProvisioningState: to.Ptr(armappplatform.GatewayProvisioningStateSucceeded),
				Public:            to.Ptr(true),
				ResourceRequests: &armappplatform.GatewayResourceRequests{
					CPU:    to.Ptr("1"),
					Memory: to.Ptr("1G"),
				},
				URL: to.Ptr("test-url"),
			},
			SKU: &armappplatform.SKU{
				Name:     to.Ptr("E0"),
				Capacity: to.Ptr[int32](2),
				Tier:     to.Ptr("Enterprise"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GatewayResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GatewayResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Gateways_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGateways_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Gateways_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gateways_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewGatewaysClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		armappplatform.GatewayResource{
			Properties: &armappplatform.GatewayProperties{
				Public: to.Ptr(true),
				ResourceRequests: &armappplatform.GatewayResourceRequests{
					CPU:    to.Ptr("1"),
					Memory: to.Ptr("1G"),
				},
			},
			SKU: &armappplatform.SKU{
				Name:     to.Ptr("E0"),
				Capacity: to.Ptr[int32](2),
				Tier:     to.Ptr("Enterprise"),
			},
		},
		&armappplatform.GatewaysClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Gateways_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Gateways_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.GatewayResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/gateways"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/gateways/default"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.GatewayProperties{
				Instances: []*armappplatform.GatewayInstance{
					{
						Name:   to.Ptr("instance1"),
						Status: to.Ptr("Running"),
					},
					{
						Name:   to.Ptr("instance2"),
						Status: to.Ptr("Running"),
					}},
				OperatorProperties: &armappplatform.GatewayOperatorProperties{
					Instances: []*armappplatform.GatewayInstance{
						{
							Name:   to.Ptr("instance1"),
							Status: to.Ptr("Running"),
						},
						{
							Name:   to.Ptr("instance2"),
							Status: to.Ptr("Running"),
						}},
					ResourceRequests: &armappplatform.GatewayOperatorResourceRequests{
						CPU:           to.Ptr("1"),
						InstanceCount: to.Ptr[int32](2),
						Memory:        to.Ptr("1G"),
					},
				},
				ProvisioningState: to.Ptr(armappplatform.GatewayProvisioningStateSucceeded),
				Public:            to.Ptr(true),
				ResourceRequests: &armappplatform.GatewayResourceRequests{
					CPU:    to.Ptr("1"),
					Memory: to.Ptr("1G"),
				},
				URL: to.Ptr("test-url"),
			},
			SKU: &armappplatform.SKU{
				Name:     to.Ptr("E0"),
				Capacity: to.Ptr[int32](2),
				Tier:     to.Ptr("Enterprise"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GatewayResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GatewayResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Gateways_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGateways_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Gateways_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gateways_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewGatewaysClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		&armappplatform.GatewaysClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Gateways_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Gateways_Delete.json: %v", err)
	}
}

func TestGateways_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Gateways_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gateways_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewGatewaysClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myservice",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Gateways_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.GatewayResourceCollection{
			Value: []*armappplatform.GatewayResource{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/gateways"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/gateways/default"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Properties: &armappplatform.GatewayProperties{
						Instances: []*armappplatform.GatewayInstance{
							{
								Name:   to.Ptr("instance1"),
								Status: to.Ptr("Running"),
							},
							{
								Name:   to.Ptr("instance2"),
								Status: to.Ptr("Running"),
							}},
						OperatorProperties: &armappplatform.GatewayOperatorProperties{
							Instances: []*armappplatform.GatewayInstance{
								{
									Name:   to.Ptr("instance1"),
									Status: to.Ptr("Running"),
								},
								{
									Name:   to.Ptr("instance2"),
									Status: to.Ptr("Running"),
								}},
							ResourceRequests: &armappplatform.GatewayOperatorResourceRequests{
								CPU:           to.Ptr("1"),
								InstanceCount: to.Ptr[int32](2),
								Memory:        to.Ptr("1G"),
							},
						},
						ProvisioningState: to.Ptr(armappplatform.GatewayProvisioningStateSucceeded),
						Public:            to.Ptr(true),
						ResourceRequests: &armappplatform.GatewayResourceRequests{
							CPU:    to.Ptr("1"),
							Memory: to.Ptr("1G"),
						},
						URL: to.Ptr("test-url"),
					},
					SKU: &armappplatform.SKU{
						Name:     to.Ptr("E0"),
						Capacity: to.Ptr[int32](2),
						Tier:     to.Ptr("Enterprise"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GatewayResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GatewayResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Gateways_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGateways_ValidateDomain(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Gateways_ValidateDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gateways_ValidateDomain"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewGatewaysClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ValidateDomain(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		armappplatform.CustomDomainValidatePayload{
			Name: to.Ptr("mydomain.io"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Gateways_ValidateDomain.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.CustomDomainValidateResult{
			IsValid: to.Ptr(false),
			Message: to.Ptr("Certificate is invalid, please check if it is a self signed cert or if it contains a suitable dns name"),
		}
		if !reflect.DeepEqual(exampleRes, res.CustomDomainValidateResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomDomainValidateResult)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/Gateways_ValidateDomain.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGatewayRouteConfigs_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayRouteConfigs_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GatewayRouteConfigs_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewGatewayRouteConfigsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"myRouteConfig",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayRouteConfigs_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.GatewayRouteConfigResource{
			Name: to.Ptr("myRouteConfig"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/gateways/routeConfigs"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/gateways/default/routeConfigs/myRouteConfig"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.GatewayRouteConfigProperties{
				AppResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myApp"),
				ProvisioningState: to.Ptr(armappplatform.GatewayProvisioningStateSucceeded),
				Routes: []*armappplatform.GatewayAPIRoute{
					{
						Filters: []*string{
							to.Ptr("StripPrefix=2"),
							to.Ptr("RateLimit=1,1s")},
						Predicates: []*string{
							to.Ptr("Path=/api5/customer/**")},
						SsoEnabled: to.Ptr(true),
						Title:      to.Ptr("myApp route config"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GatewayRouteConfigResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GatewayRouteConfigResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayRouteConfigs_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGatewayRouteConfigs_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayRouteConfigs_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GatewayRouteConfigs_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewGatewayRouteConfigsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"myRouteConfig",
		armappplatform.GatewayRouteConfigResource{
			Properties: &armappplatform.GatewayRouteConfigProperties{
				AppResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myApp"),
				Routes: []*armappplatform.GatewayAPIRoute{
					{
						Filters: []*string{
							to.Ptr("StripPrefix=2"),
							to.Ptr("RateLimit=1,1s")},
						Predicates: []*string{
							to.Ptr("Path=/api5/customer/**")},
						SsoEnabled: to.Ptr(true),
						Title:      to.Ptr("myApp route config"),
					}},
			},
		},
		&armappplatform.GatewayRouteConfigsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayRouteConfigs_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayRouteConfigs_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.GatewayRouteConfigResource{
			Name: to.Ptr("myRouteConfig"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/gateways/routeConfigs"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/gateways/default/routeConfigs/myRouteConfig"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.GatewayRouteConfigProperties{
				AppResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myApp"),
				ProvisioningState: to.Ptr(armappplatform.GatewayProvisioningStateSucceeded),
				Routes: []*armappplatform.GatewayAPIRoute{
					{
						Filters: []*string{
							to.Ptr("StripPrefix=2"),
							to.Ptr("RateLimit=1,1s")},
						Predicates: []*string{
							to.Ptr("Path=/api5/customer/**")},
						SsoEnabled: to.Ptr(true),
						Title:      to.Ptr("myApp route config"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GatewayRouteConfigResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GatewayRouteConfigResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayRouteConfigs_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGatewayRouteConfigs_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayRouteConfigs_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GatewayRouteConfigs_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewGatewayRouteConfigsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"myRouteConfig",
		&armappplatform.GatewayRouteConfigsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayRouteConfigs_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayRouteConfigs_Delete.json: %v", err)
	}
}

func TestGatewayRouteConfigs_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayRouteConfigs_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GatewayRouteConfigs_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewGatewayRouteConfigsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myservice",
		"default",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayRouteConfigs_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.GatewayRouteConfigResourceCollection{
			Value: []*armappplatform.GatewayRouteConfigResource{
				{
					Name: to.Ptr("myRouteConfig"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/gateways/routeConfigs"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/gateways/default/routeConfigs/myRouteConfig"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Properties: &armappplatform.GatewayRouteConfigProperties{
						AppResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myApp"),
						ProvisioningState: to.Ptr(armappplatform.GatewayProvisioningStateSucceeded),
						Routes: []*armappplatform.GatewayAPIRoute{
							{
								Filters: []*string{
									to.Ptr("StripPrefix=2"),
									to.Ptr("RateLimit=1,1s")},
								Predicates: []*string{
									to.Ptr("Path=/api5/customer/**")},
								SsoEnabled: to.Ptr(true),
								Title:      to.Ptr("myApp route config"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GatewayRouteConfigResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GatewayRouteConfigResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayRouteConfigs_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGatewayCustomDomains_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayCustomDomains_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GatewayCustomDomains_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewGatewayCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"myDomainName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayCustomDomains_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.GatewayCustomDomainResource{
			Name: to.Ptr("myDomainName"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/gateways/domains"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/gateways/default/domains/myDomainName"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.GatewayCustomDomainProperties{
				Thumbprint: to.Ptr("*"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GatewayCustomDomainResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GatewayCustomDomainResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayCustomDomains_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGatewayCustomDomains_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayCustomDomains_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GatewayCustomDomains_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewGatewayCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"myDomainName",
		armappplatform.GatewayCustomDomainResource{
			Properties: &armappplatform.GatewayCustomDomainProperties{
				Thumbprint: to.Ptr("*"),
			},
		},
		&armappplatform.GatewayCustomDomainsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayCustomDomains_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayCustomDomains_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.GatewayCustomDomainResource{
			Name: to.Ptr("myDomainName"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/gateways/domains"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/gateways/default/domains/myDomainName"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.GatewayCustomDomainProperties{
				Thumbprint: to.Ptr("*"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GatewayCustomDomainResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GatewayCustomDomainResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayCustomDomains_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGatewayCustomDomains_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayCustomDomains_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GatewayCustomDomains_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewGatewayCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"myDomainName",
		&armappplatform.GatewayCustomDomainsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayCustomDomains_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayCustomDomains_Delete.json: %v", err)
	}
}

func TestGatewayCustomDomains_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayCustomDomains_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GatewayCustomDomains_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewGatewayCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myservice",
		"default",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayCustomDomains_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.GatewayCustomDomainResourceCollection{
			Value: []*armappplatform.GatewayCustomDomainResource{
				{
					Name: to.Ptr("myDomain"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/gateways/domains"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/gateways/default/domains/myDomain"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Properties: &armappplatform.GatewayCustomDomainProperties{
						Thumbprint: to.Ptr("*"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GatewayCustomDomainResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GatewayCustomDomainResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/GatewayCustomDomains_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIPortals_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortals_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiPortals_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewAPIPortalsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortals_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.APIPortalResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/apiPortals"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apiPortals/default"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.APIPortalProperties{
				GatewayIDs: []*string{
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/gateways/default")},
				Instances: []*armappplatform.APIPortalInstance{
					{
						Name:   to.Ptr("instance1"),
						Status: to.Ptr("Running"),
					},
					{
						Name:   to.Ptr("instance2"),
						Status: to.Ptr("Running"),
					}},
				ProvisioningState: to.Ptr(armappplatform.APIPortalProvisioningStateSucceeded),
				Public:            to.Ptr(true),
				ResourceRequests: &armappplatform.APIPortalResourceRequests{
					CPU:    to.Ptr("1"),
					Memory: to.Ptr("1G"),
				},
				URL: to.Ptr("test-url"),
			},
			SKU: &armappplatform.SKU{
				Name:     to.Ptr("E0"),
				Capacity: to.Ptr[int32](2),
				Tier:     to.Ptr("Enterprise"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIPortalResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIPortalResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortals_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIPortals_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortals_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiPortals_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewAPIPortalsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		armappplatform.APIPortalResource{
			Properties: &armappplatform.APIPortalProperties{
				GatewayIDs: []*string{
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/gateways/default")},
				Public: to.Ptr(true),
			},
			SKU: &armappplatform.SKU{
				Name:     to.Ptr("E0"),
				Capacity: to.Ptr[int32](2),
				Tier:     to.Ptr("Enterprise"),
			},
		},
		&armappplatform.APIPortalsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortals_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortals_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.APIPortalResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/apiPortals"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apiPortals/default"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.APIPortalProperties{
				GatewayIDs: []*string{
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/gateways/default")},
				Instances: []*armappplatform.APIPortalInstance{
					{
						Name:   to.Ptr("instance1"),
						Status: to.Ptr("Running"),
					},
					{
						Name:   to.Ptr("instance2"),
						Status: to.Ptr("Running"),
					}},
				ProvisioningState: to.Ptr(armappplatform.APIPortalProvisioningStateSucceeded),
				Public:            to.Ptr(true),
				ResourceRequests: &armappplatform.APIPortalResourceRequests{
					CPU:    to.Ptr("1"),
					Memory: to.Ptr("1G"),
				},
				URL: to.Ptr("test-url"),
			},
			SKU: &armappplatform.SKU{
				Name:     to.Ptr("E0"),
				Capacity: to.Ptr[int32](2),
				Tier:     to.Ptr("Enterprise"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIPortalResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIPortalResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortals_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIPortals_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortals_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiPortals_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewAPIPortalsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		&armappplatform.APIPortalsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortals_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortals_Delete.json: %v", err)
	}
}

func TestAPIPortals_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortals_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiPortals_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewAPIPortalsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myservice",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortals_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.APIPortalResourceCollection{
			Value: []*armappplatform.APIPortalResource{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/apiPortals"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apiPortals/default"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Properties: &armappplatform.APIPortalProperties{
						GatewayIDs: []*string{
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/gateways/default")},
						Instances: []*armappplatform.APIPortalInstance{
							{
								Name:   to.Ptr("instance1"),
								Status: to.Ptr("Running"),
							},
							{
								Name:   to.Ptr("instance2"),
								Status: to.Ptr("Running"),
							}},
						ProvisioningState: to.Ptr(armappplatform.APIPortalProvisioningStateSucceeded),
						Public:            to.Ptr(true),
						ResourceRequests: &armappplatform.APIPortalResourceRequests{
							CPU:    to.Ptr("1"),
							Memory: to.Ptr("1G"),
						},
						URL: to.Ptr("test-url"),
					},
					SKU: &armappplatform.SKU{
						Name:     to.Ptr("E0"),
						Capacity: to.Ptr[int32](2),
						Tier:     to.Ptr("Enterprise"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.APIPortalResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.APIPortalResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortals_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIPortals_ValidateDomain(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortals_ValidateDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiPortals_ValidateDomain"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewAPIPortalsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ValidateDomain(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		armappplatform.CustomDomainValidatePayload{
			Name: to.Ptr("mydomain.io"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortals_ValidateDomain.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.CustomDomainValidateResult{
			IsValid: to.Ptr(false),
			Message: to.Ptr("Certificate is invalid, please check if it is a self signed cert or if it contains a suitable dns name"),
		}
		if !reflect.DeepEqual(exampleRes, res.CustomDomainValidateResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomDomainValidateResult)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortals_ValidateDomain.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIPortalCustomDomains_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortalCustomDomains_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiPortalCustomDomains_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewAPIPortalCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"myDomainName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortalCustomDomains_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.APIPortalCustomDomainResource{
			Name: to.Ptr("myDomainName"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/apiPortals/domains"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apiPortals/default/domains/myDomainName"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.APIPortalCustomDomainProperties{
				Thumbprint: to.Ptr("*"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIPortalCustomDomainResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIPortalCustomDomainResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortalCustomDomains_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIPortalCustomDomains_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortalCustomDomains_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiPortalCustomDomains_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewAPIPortalCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"myDomainName",
		armappplatform.APIPortalCustomDomainResource{
			Properties: &armappplatform.APIPortalCustomDomainProperties{
				Thumbprint: to.Ptr("*"),
			},
		},
		&armappplatform.APIPortalCustomDomainsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortalCustomDomains_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortalCustomDomains_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappplatform.APIPortalCustomDomainResource{
			Name: to.Ptr("myDomainName"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring/apiPortals/domains"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apiPortals/default/domains/myDomainName"),
			SystemData: &armappplatform.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
				CreatedBy:          to.Ptr("sample-user"),
				CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
				LastModifiedBy:     to.Ptr("sample-user"),
				LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
			},
			Properties: &armappplatform.APIPortalCustomDomainProperties{
				Thumbprint: to.Ptr("*"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIPortalCustomDomainResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIPortalCustomDomainResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortalCustomDomains_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIPortalCustomDomains_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortalCustomDomains_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiPortalCustomDomains_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewAPIPortalCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"default",
		"myDomainName",
		&armappplatform.APIPortalCustomDomainsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortalCustomDomains_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortalCustomDomains_Delete.json: %v", err)
	}
}

func TestAPIPortalCustomDomains_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortalCustomDomains_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiPortalCustomDomains_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappplatform.NewAPIPortalCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myservice",
		"default",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortalCustomDomains_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappplatform.APIPortalCustomDomainResourceCollection{
			Value: []*armappplatform.APIPortalCustomDomainResource{
				{
					Name: to.Ptr("myDomain"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/apiPortals/domains"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apiPortals/default/domains/myDomain"),
					SystemData: &armappplatform.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:16:03.944Z"); return t }()),
						CreatedBy:          to.Ptr("sample-user"),
						CreatedByType:      to.Ptr(armappplatform.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-11T03:17:03.944Z"); return t }()),
						LastModifiedBy:     to.Ptr("sample-user"),
						LastModifiedByType: to.Ptr(armappplatform.LastModifiedByTypeUser),
					},
					Properties: &armappplatform.APIPortalCustomDomainProperties{
						Thumbprint: to.Ptr("*"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.APIPortalCustomDomainResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.APIPortalCustomDomainResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ApiPortalCustomDomains_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
