//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatamigration

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// FilesClientListPager provides operations for iterating over paged responses.
type FilesClientListPager struct {
	client    *FilesClient
	current   FilesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, FilesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *FilesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FileList.NextLink == nil || len(*p.current.FileList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *FilesClientListPager) NextPage(ctx context.Context) (FilesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return FilesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return FilesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return FilesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return FilesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return FilesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ProjectsClientListPager provides operations for iterating over paged responses.
type ProjectsClientListPager struct {
	client    *ProjectsClient
	current   ProjectsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ProjectsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ProjectsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProjectList.NextLink == nil || len(*p.current.ProjectList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ProjectsClientListPager) NextPage(ctx context.Context) (ProjectsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ProjectsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ProjectsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ProjectsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ProjectsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ProjectsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ResourceSKUsClientListSKUsPager provides operations for iterating over paged responses.
type ResourceSKUsClientListSKUsPager struct {
	client    *ResourceSKUsClient
	current   ResourceSKUsClientListSKUsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceSKUsClientListSKUsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ResourceSKUsClientListSKUsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceSKUsResult.NextLink == nil || len(*p.current.ResourceSKUsResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ResourceSKUsClientListSKUsPager) NextPage(ctx context.Context) (ResourceSKUsClientListSKUsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ResourceSKUsClientListSKUsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ResourceSKUsClientListSKUsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ResourceSKUsClientListSKUsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ResourceSKUsClientListSKUsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listSKUsHandleResponse(resp)
	if err != nil {
		return ResourceSKUsClientListSKUsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SQLMigrationServicesClientListByResourceGroupPager provides operations for iterating over paged responses.
type SQLMigrationServicesClientListByResourceGroupPager struct {
	client    *SQLMigrationServicesClient
	current   SQLMigrationServicesClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SQLMigrationServicesClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SQLMigrationServicesClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SQLMigrationListResult.NextLink == nil || len(*p.current.SQLMigrationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SQLMigrationServicesClientListByResourceGroupPager) NextPage(ctx context.Context) (SQLMigrationServicesClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SQLMigrationServicesClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SQLMigrationServicesClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SQLMigrationServicesClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SQLMigrationServicesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return SQLMigrationServicesClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SQLMigrationServicesClientListBySubscriptionPager provides operations for iterating over paged responses.
type SQLMigrationServicesClientListBySubscriptionPager struct {
	client    *SQLMigrationServicesClient
	current   SQLMigrationServicesClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SQLMigrationServicesClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SQLMigrationServicesClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SQLMigrationListResult.NextLink == nil || len(*p.current.SQLMigrationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SQLMigrationServicesClientListBySubscriptionPager) NextPage(ctx context.Context) (SQLMigrationServicesClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SQLMigrationServicesClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SQLMigrationServicesClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SQLMigrationServicesClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SQLMigrationServicesClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return SQLMigrationServicesClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SQLMigrationServicesClientListMigrationsPager provides operations for iterating over paged responses.
type SQLMigrationServicesClientListMigrationsPager struct {
	client    *SQLMigrationServicesClient
	current   SQLMigrationServicesClientListMigrationsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SQLMigrationServicesClientListMigrationsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SQLMigrationServicesClientListMigrationsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatabaseMigrationListResult.NextLink == nil || len(*p.current.DatabaseMigrationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SQLMigrationServicesClientListMigrationsPager) NextPage(ctx context.Context) (SQLMigrationServicesClientListMigrationsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SQLMigrationServicesClientListMigrationsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SQLMigrationServicesClientListMigrationsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SQLMigrationServicesClientListMigrationsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SQLMigrationServicesClientListMigrationsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listMigrationsHandleResponse(resp)
	if err != nil {
		return SQLMigrationServicesClientListMigrationsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ServiceTasksClientListPager provides operations for iterating over paged responses.
type ServiceTasksClientListPager struct {
	client    *ServiceTasksClient
	current   ServiceTasksClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ServiceTasksClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ServiceTasksClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TaskList.NextLink == nil || len(*p.current.TaskList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ServiceTasksClientListPager) NextPage(ctx context.Context) (ServiceTasksClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ServiceTasksClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ServiceTasksClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ServiceTasksClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ServiceTasksClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ServiceTasksClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ServicesClientListByResourceGroupPager provides operations for iterating over paged responses.
type ServicesClientListByResourceGroupPager struct {
	client    *ServicesClient
	current   ServicesClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ServicesClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ServicesClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServiceList.NextLink == nil || len(*p.current.ServiceList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ServicesClientListByResourceGroupPager) NextPage(ctx context.Context) (ServicesClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ServicesClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ServicesClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ServicesClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ServicesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return ServicesClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ServicesClientListPager provides operations for iterating over paged responses.
type ServicesClientListPager struct {
	client    *ServicesClient
	current   ServicesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ServicesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ServicesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServiceList.NextLink == nil || len(*p.current.ServiceList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ServicesClientListPager) NextPage(ctx context.Context) (ServicesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ServicesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ServicesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ServicesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ServicesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ServicesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ServicesClientListSKUsPager provides operations for iterating over paged responses.
type ServicesClientListSKUsPager struct {
	client    *ServicesClient
	current   ServicesClientListSKUsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ServicesClientListSKUsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ServicesClientListSKUsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServiceSKUList.NextLink == nil || len(*p.current.ServiceSKUList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ServicesClientListSKUsPager) NextPage(ctx context.Context) (ServicesClientListSKUsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ServicesClientListSKUsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ServicesClientListSKUsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ServicesClientListSKUsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ServicesClientListSKUsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listSKUsHandleResponse(resp)
	if err != nil {
		return ServicesClientListSKUsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// TasksClientListPager provides operations for iterating over paged responses.
type TasksClientListPager struct {
	client    *TasksClient
	current   TasksClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TasksClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *TasksClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TaskList.NextLink == nil || len(*p.current.TaskList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *TasksClientListPager) NextPage(ctx context.Context) (TasksClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return TasksClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return TasksClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return TasksClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return TasksClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return TasksClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// UsagesClientListPager provides operations for iterating over paged responses.
type UsagesClientListPager struct {
	client    *UsagesClient
	current   UsagesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, UsagesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *UsagesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.QuotaList.NextLink == nil || len(*p.current.QuotaList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *UsagesClientListPager) NextPage(ctx context.Context) (UsagesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return UsagesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return UsagesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return UsagesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return UsagesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return UsagesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
