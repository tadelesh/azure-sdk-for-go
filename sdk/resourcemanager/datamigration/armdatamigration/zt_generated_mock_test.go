//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatamigration_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datamigration/armdatamigration"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestDatabaseMigrationsSQLMi_Get(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlMiGetDatabaseMigration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Database Migration resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewDatabaseMigrationsSQLMiClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"managedInstance1",
		"db1",
		&armdatamigration.DatabaseMigrationsSQLMiClientGetOptions{MigrationOperationID: nil,
			Expand: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlMiGetDatabaseMigration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.DatabaseMigrationSQLMi{
			Name: to.Ptr("targetdb"),
			Type: to.Ptr("Microsoft.DataMigration/dataMigrations"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/miname/providers/Microsoft.DataMigration/databaseMigrations/targetdb"),
			Properties: &armdatamigration.DatabaseMigrationPropertiesSQLMi{
				EndedOn:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
				Kind:                 to.Ptr(armdatamigration.ResourceTypeSQLMi),
				MigrationOperationID: to.Ptr("858ba109-5ab7-4fa1-8aea-bea487cacdcd"),
				MigrationStatus:      to.Ptr("InProgress"),
				Scope:                to.Ptr("subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/managedInstance1"),
				SourceDatabaseName:   to.Ptr("sourcename"),
				StartedOn:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
				MigrationStatusDetails: &armdatamigration.MigrationStatusDetails{
					ActiveBackupSets:     []*armdatamigration.SQLBackupSetInfo{},
					IsFullBackupRestored: to.Ptr(false),
					MigrationState:       to.Ptr("WaitForFullBackupUploadOperation"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseMigrationSQLMi) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseMigrationSQLMi)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlMiGetDatabaseMigration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseMigrationsSQLMi_CreateOrUpdate(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlMiCreateOrUpdateDatabaseMigrationMAX.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update Database Migration resource with Maximum parameters."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewDatabaseMigrationsSQLMiClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg",
		"managedInstance1",
		"db1",
		armdatamigration.DatabaseMigrationSQLMi{
			Properties: &armdatamigration.DatabaseMigrationPropertiesSQLMi{
				Kind:               to.Ptr(armdatamigration.ResourceTypeSQLMi),
				MigrationService:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.DataMigration/sqlMigrationServices/testagent"),
				Scope:              to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/instance"),
				SourceDatabaseName: to.Ptr("aaa"),
				SourceSQLConnection: &armdatamigration.SQLConnectionInformation{
					Authentication:         to.Ptr("WindowsAuthentication"),
					DataSource:             to.Ptr("aaa"),
					EncryptConnection:      to.Ptr(true),
					Password:               to.Ptr("placeholder"),
					TrustServerCertificate: to.Ptr(true),
					UserName:               to.Ptr("bbb"),
				},
				BackupConfiguration: &armdatamigration.BackupConfiguration{
					SourceLocation: &armdatamigration.SourceLocation{
						FileShare: &armdatamigration.SQLFileShare{
							Path:     to.Ptr("C:\\aaa\\bbb\\ccc"),
							Password: to.Ptr("placeholder"),
							Username: to.Ptr("name"),
						},
					},
					TargetLocation: &armdatamigration.TargetLocation{
						AccountKey:               to.Ptr("abcd"),
						StorageAccountResourceID: to.Ptr("account.database.windows.net"),
					},
				},
				OfflineConfiguration: &armdatamigration.OfflineConfiguration{
					LastBackupName: to.Ptr("last_backup_file_name"),
					Offline:        to.Ptr(true),
				},
			},
		},
		&armdatamigration.DatabaseMigrationsSQLMiClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlMiCreateOrUpdateDatabaseMigrationMAX.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlMiCreateOrUpdateDatabaseMigrationMAX.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.DatabaseMigrationSQLMi{
			Name: to.Ptr("testagent"),
			Type: to.Ptr("Microsoft.DataMigration/sqlMigrationServices"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.DataMigration/sqlMigrationServices/testagent"),
			Properties: &armdatamigration.DatabaseMigrationPropertiesSQLMi{
				EndedOn:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
				Kind:                 to.Ptr(armdatamigration.ResourceTypeSQLMi),
				MigrationOperationID: to.Ptr("858ba109-5ab7-4fa1-8aea-bea487cacdcd"),
				MigrationStatus:      to.Ptr("InProgress"),
				Scope:                to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/instance"),
				SourceDatabaseName:   to.Ptr("sourcename"),
				StartedOn:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
				MigrationStatusDetails: &armdatamigration.MigrationStatusDetails{
					ActiveBackupSets:     []*armdatamigration.SQLBackupSetInfo{},
					IsFullBackupRestored: to.Ptr(false),
					MigrationState:       to.Ptr("WaitForFullBackupUploadOperation"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseMigrationSQLMi) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseMigrationSQLMi)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlMiCreateOrUpdateDatabaseMigrationMAX.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlMiCreateOrUpdateDatabaseMigrationMIN.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update Database Migration resource with Minimum parameters."},
	})
	client = armdatamigration.NewDatabaseMigrationsSQLMiClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg",
		"managedInstance1",
		"db1",
		armdatamigration.DatabaseMigrationSQLMi{
			Properties: &armdatamigration.DatabaseMigrationPropertiesSQLMi{
				Kind:               to.Ptr(armdatamigration.ResourceTypeSQLMi),
				MigrationService:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.DataMigration/sqlMigrationServices/testagent"),
				Scope:              to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/instance"),
				SourceDatabaseName: to.Ptr("aaa"),
				SourceSQLConnection: &armdatamigration.SQLConnectionInformation{
					Authentication:         to.Ptr("WindowsAuthentication"),
					DataSource:             to.Ptr("aaa"),
					EncryptConnection:      to.Ptr(true),
					Password:               to.Ptr("placeholder"),
					TrustServerCertificate: to.Ptr(true),
					UserName:               to.Ptr("bbb"),
				},
				BackupConfiguration: &armdatamigration.BackupConfiguration{
					SourceLocation: &armdatamigration.SourceLocation{
						FileShare: &armdatamigration.SQLFileShare{
							Path:     to.Ptr("C:\\aaa\\bbb\\ccc"),
							Password: to.Ptr("placeholder"),
							Username: to.Ptr("name"),
						},
					},
					TargetLocation: &armdatamigration.TargetLocation{
						AccountKey:               to.Ptr("abcd"),
						StorageAccountResourceID: to.Ptr("account.database.windows.net"),
					},
				},
				OfflineConfiguration: &armdatamigration.OfflineConfiguration{
					LastBackupName: to.Ptr("last_backup_file_name"),
					Offline:        to.Ptr(true),
				},
			},
		},
		&armdatamigration.DatabaseMigrationsSQLMiClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlMiCreateOrUpdateDatabaseMigrationMIN.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlMiCreateOrUpdateDatabaseMigrationMIN.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.DatabaseMigrationSQLMi{
			Name: to.Ptr("testagent"),
			Type: to.Ptr("Microsoft.DataMigration/sqlMigrationServices"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.DataMigration/sqlMigrationServices/testagent"),
			Properties: &armdatamigration.DatabaseMigrationPropertiesSQLMi{
				EndedOn:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
				Kind:                 to.Ptr(armdatamigration.ResourceTypeSQLMi),
				MigrationOperationID: to.Ptr("858ba109-5ab7-4fa1-8aea-bea487cacdcd"),
				MigrationStatus:      to.Ptr("InProgress"),
				Scope:                to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/instance"),
				SourceDatabaseName:   to.Ptr("sourcename"),
				StartedOn:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
				MigrationStatusDetails: &armdatamigration.MigrationStatusDetails{
					ActiveBackupSets:     []*armdatamigration.SQLBackupSetInfo{},
					IsFullBackupRestored: to.Ptr(false),
					MigrationState:       to.Ptr("WaitForFullBackupUploadOperation"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseMigrationSQLMi) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseMigrationSQLMi)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlMiCreateOrUpdateDatabaseMigrationMIN.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseMigrationsSQLMi_Cancel(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlMiCancelDatabaseMigration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop ongoing migration for the database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewDatabaseMigrationsSQLMiClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCancel(ctx,
		"testrg",
		"managedInstance1",
		"db1",
		armdatamigration.MigrationOperationInput{
			MigrationOperationID: to.Ptr("4124fe90-d1b6-4b50-b4d9-46d02381f59a"),
		},
		&armdatamigration.DatabaseMigrationsSQLMiClientBeginCancelOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlMiCancelDatabaseMigration.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlMiCancelDatabaseMigration.json: %v", err)
	}
}

func TestDatabaseMigrationsSQLMi_Cutover(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlMiCutoverDatabaseMigration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Cutover online migration operation for the database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewDatabaseMigrationsSQLMiClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCutover(ctx,
		"testrg",
		"managedInstance1",
		"db1",
		armdatamigration.MigrationOperationInput{
			MigrationOperationID: to.Ptr("4124fe90-d1b6-4b50-b4d9-46d02381f59a"),
		},
		&armdatamigration.DatabaseMigrationsSQLMiClientBeginCutoverOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlMiCutoverDatabaseMigration.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlMiCutoverDatabaseMigration.json: %v", err)
	}
}

func TestDatabaseMigrationsSQLVM_Get(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlVmGetDatabaseMigration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Database Migration resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewDatabaseMigrationsSQLVMClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"testvm",
		"db1",
		&armdatamigration.DatabaseMigrationsSQLVMClientGetOptions{MigrationOperationID: nil,
			Expand: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlVmGetDatabaseMigration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.DatabaseMigrationSQLVM{
			Name: to.Ptr("targetdb"),
			Type: to.Ptr("Microsoft.DataMigration/dataMigrations"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm/providers/Microsoft.DataMigration/databaseMigrations/targetdb"),
			Properties: &armdatamigration.DatabaseMigrationPropertiesSQLVM{
				EndedOn:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
				Kind:                 to.Ptr(armdatamigration.ResourceTypeSQLVM),
				MigrationOperationID: to.Ptr("858ba109-5ab7-4fa1-8aea-bea487cacdcd"),
				MigrationStatus:      to.Ptr("InProgress"),
				Scope:                to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm"),
				SourceDatabaseName:   to.Ptr("sourcename"),
				StartedOn:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
				MigrationStatusDetails: &armdatamigration.MigrationStatusDetails{
					ActiveBackupSets:     []*armdatamigration.SQLBackupSetInfo{},
					IsFullBackupRestored: to.Ptr(false),
					MigrationState:       to.Ptr("WaitForFullBackupUploadOperation"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseMigrationSQLVM) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseMigrationSQLVM)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlVmGetDatabaseMigration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseMigrationsSQLVM_CreateOrUpdate(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlVmCreateOrUpdateDatabaseMigrationMAX.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update Database Migration resource with Maximum parameters."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewDatabaseMigrationsSQLVMClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg",
		"testvm",
		"db1",
		armdatamigration.DatabaseMigrationSQLVM{
			Properties: &armdatamigration.DatabaseMigrationPropertiesSQLVM{
				Kind:               to.Ptr(armdatamigration.ResourceTypeSQLVM),
				MigrationService:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.DataMigration/sqlMigrationServices/testagent"),
				Scope:              to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm"),
				SourceDatabaseName: to.Ptr("aaa"),
				SourceSQLConnection: &armdatamigration.SQLConnectionInformation{
					Authentication:         to.Ptr("WindowsAuthentication"),
					DataSource:             to.Ptr("aaa"),
					EncryptConnection:      to.Ptr(true),
					Password:               to.Ptr("placeholder"),
					TrustServerCertificate: to.Ptr(true),
					UserName:               to.Ptr("bbb"),
				},
				BackupConfiguration: &armdatamigration.BackupConfiguration{
					SourceLocation: &armdatamigration.SourceLocation{
						FileShare: &armdatamigration.SQLFileShare{
							Path:     to.Ptr("C:\\aaa\\bbb\\ccc"),
							Password: to.Ptr("placeholder"),
							Username: to.Ptr("name"),
						},
					},
					TargetLocation: &armdatamigration.TargetLocation{
						AccountKey:               to.Ptr("abcd"),
						StorageAccountResourceID: to.Ptr("account.database.windows.net"),
					},
				},
				OfflineConfiguration: &armdatamigration.OfflineConfiguration{
					LastBackupName: to.Ptr("last_backup_file_name"),
					Offline:        to.Ptr(true),
				},
			},
		},
		&armdatamigration.DatabaseMigrationsSQLVMClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlVmCreateOrUpdateDatabaseMigrationMAX.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlVmCreateOrUpdateDatabaseMigrationMAX.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.DatabaseMigrationSQLVM{
			Name: to.Ptr("testagent"),
			Type: to.Ptr("Microsoft.DataMigration/sqlMigrationServices"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.DataMigration/sqlMigrationServices/testagent"),
			Properties: &armdatamigration.DatabaseMigrationPropertiesSQLVM{
				EndedOn:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
				Kind:                 to.Ptr(armdatamigration.ResourceTypeSQLVM),
				MigrationOperationID: to.Ptr("858ba109-5ab7-4fa1-8aea-bea487cacdcd"),
				MigrationStatus:      to.Ptr("InProgress"),
				Scope:                to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm"),
				SourceDatabaseName:   to.Ptr("sourcename"),
				StartedOn:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
				MigrationStatusDetails: &armdatamigration.MigrationStatusDetails{
					ActiveBackupSets:     []*armdatamigration.SQLBackupSetInfo{},
					IsFullBackupRestored: to.Ptr(false),
					MigrationState:       to.Ptr("WaitForFullBackupUploadOperation"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseMigrationSQLVM) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseMigrationSQLVM)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlVmCreateOrUpdateDatabaseMigrationMAX.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlVmCreateOrUpdateDatabaseMigrationMIN.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update Database Migration resource with Minimum parameters."},
	})
	client = armdatamigration.NewDatabaseMigrationsSQLVMClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg",
		"testvm",
		"db1",
		armdatamigration.DatabaseMigrationSQLVM{
			Properties: &armdatamigration.DatabaseMigrationPropertiesSQLVM{
				Kind:               to.Ptr(armdatamigration.ResourceTypeSQLVM),
				MigrationService:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.DataMigration/sqlMigrationServices/testagent"),
				Scope:              to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm"),
				SourceDatabaseName: to.Ptr("aaa"),
				SourceSQLConnection: &armdatamigration.SQLConnectionInformation{
					Authentication:         to.Ptr("WindowsAuthentication"),
					DataSource:             to.Ptr("aaa"),
					EncryptConnection:      to.Ptr(true),
					Password:               to.Ptr("placeholder"),
					TrustServerCertificate: to.Ptr(true),
					UserName:               to.Ptr("bbb"),
				},
				BackupConfiguration: &armdatamigration.BackupConfiguration{
					SourceLocation: &armdatamigration.SourceLocation{
						FileShare: &armdatamigration.SQLFileShare{
							Path:     to.Ptr("C:\\aaa\\bbb\\ccc"),
							Password: to.Ptr("placeholder"),
							Username: to.Ptr("name"),
						},
					},
					TargetLocation: &armdatamigration.TargetLocation{
						AccountKey:               to.Ptr("abcd"),
						StorageAccountResourceID: to.Ptr("account.database.windows.net"),
					},
				},
				OfflineConfiguration: &armdatamigration.OfflineConfiguration{
					LastBackupName: to.Ptr("last_backup_file_name"),
					Offline:        to.Ptr(true),
				},
			},
		},
		&armdatamigration.DatabaseMigrationsSQLVMClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlVmCreateOrUpdateDatabaseMigrationMIN.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlVmCreateOrUpdateDatabaseMigrationMIN.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.DatabaseMigrationSQLVM{
			Name: to.Ptr("testagent"),
			Type: to.Ptr("Microsoft.DataMigration/sqlMigrationServices"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.DataMigration/sqlMigrationServices/testagent"),
			Properties: &armdatamigration.DatabaseMigrationPropertiesSQLVM{
				EndedOn:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
				Kind:                 to.Ptr(armdatamigration.ResourceTypeSQLVM),
				MigrationOperationID: to.Ptr("858ba109-5ab7-4fa1-8aea-bea487cacdcd"),
				MigrationStatus:      to.Ptr("InProgress"),
				Scope:                to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm"),
				SourceDatabaseName:   to.Ptr("sourcename"),
				StartedOn:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
				MigrationStatusDetails: &armdatamigration.MigrationStatusDetails{
					ActiveBackupSets:     []*armdatamigration.SQLBackupSetInfo{},
					IsFullBackupRestored: to.Ptr(false),
					MigrationState:       to.Ptr("WaitForFullBackupUploadOperation"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseMigrationSQLVM) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseMigrationSQLVM)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlVmCreateOrUpdateDatabaseMigrationMIN.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseMigrationsSQLVM_Cancel(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlVmCancelDatabaseMigration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop ongoing migration for the database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewDatabaseMigrationsSQLVMClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCancel(ctx,
		"testrg",
		"testvm",
		"db1",
		armdatamigration.MigrationOperationInput{
			MigrationOperationID: to.Ptr("4124fe90-d1b6-4b50-b4d9-46d02381f59a"),
		},
		&armdatamigration.DatabaseMigrationsSQLVMClientBeginCancelOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlVmCancelDatabaseMigration.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlVmCancelDatabaseMigration.json: %v", err)
	}
}

func TestDatabaseMigrationsSQLVM_Cutover(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlVmCutoverDatabaseMigration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Cutover online migration operation for the database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewDatabaseMigrationsSQLVMClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCutover(ctx,
		"testrg",
		"testvm",
		"db1",
		armdatamigration.MigrationOperationInput{
			MigrationOperationID: to.Ptr("4124fe90-d1b6-4b50-b4d9-46d02381f59a"),
		},
		&armdatamigration.DatabaseMigrationsSQLVMClientBeginCutoverOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlVmCutoverDatabaseMigration.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlVmCutoverDatabaseMigration.json: %v", err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ListOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all of the available SQL Rest API operations."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ListOperation.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatamigration.OperationListResult{
			Value: []*armdatamigration.OperationsDefinition{
				{
					Name: to.Ptr("Microsoft.DataMigration/sqlMigrationServices/write"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Create a new or change properties of existing Service"),
						Operation:   to.Ptr("Create or update properties of existing Service"),
						Resource:    to.Ptr("SQL Migration Service"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataMigration/sqlMigrationServices/write"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Update tag of the Service"),
						Operation:   to.Ptr("Update tag of the Service"),
						Resource:    to.Ptr("SQL Migration Service"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataMigration/sqlMigrationServices/delete"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Delete existing Service"),
						Operation:   to.Ptr("Delete existing Service"),
						Resource:    to.Ptr("SQL Migration Service"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataMigration/sqlMigrationServices/read"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Retrieve details of Migration Service"),
						Operation:   to.Ptr("Get Migration Service details"),
						Resource:    to.Ptr("SQL Migration Service"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataMigration/sqlMigrationServices/read"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Retrieve details of Migration Services in a Resource Group"),
						Operation:   to.Ptr("Get Migration Service details in a Resource Group"),
						Resource:    to.Ptr("SQL Migration Service"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataMigration/sqlMigrationServices/listAuthKeys/action"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Retrieve the List of AuthKeys"),
						Operation:   to.Ptr("Get List of AuthKeys"),
						Resource:    to.Ptr("SQL Migration Service"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataMigration/sqlMigrationServices/regenerateAuthKeys/action"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Regenerate the AuthKeys"),
						Operation:   to.Ptr("Regenerate the AuthKeys"),
						Resource:    to.Ptr("SQL Migration Service"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataMigration/sqlMigrationServices/monitoringData/action"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Retrieve the Monitoring Data"),
						Operation:   to.Ptr("Get the Monitoring Data"),
						Resource:    to.Ptr("SQL Migration Service"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataMigration/sqlMigrationServices/updateNode/action"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Update Node"),
						Operation:   to.Ptr("Update Node"),
						Resource:    to.Ptr("SQL Migration Service"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataMigration/sqlMigrationServices/deleteNode/action"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Delete Node"),
						Operation:   to.Ptr("DeleteNode"),
						Resource:    to.Ptr("SQL Migration Service"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataMigration/operations/read"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Get all REST Operations"),
						Operation:   to.Ptr("Get all REST Operations"),
						Resource:    to.Ptr("Available REST operations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Sql/managedInstances/providers/Microsoft.DataMigration/databaseMigrations/cancel/action"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Stop ongoing migration for the database"),
						Operation:   to.Ptr("Stop ongoing migration for the database"),
						Resource:    to.Ptr("Database Migration Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Sql/managedInstances/providers/Microsoft.DataMigration/databaseMigrations/start/action"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Start stopped migration for the database"),
						Operation:   to.Ptr("Start stopped migration for the database"),
						Resource:    to.Ptr("Database Migration Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Sql/managedInstances/providers/Microsoft.DataMigration/databaseMigrations/cutover/action"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Cutover online migration operation for the database"),
						Operation:   to.Ptr("Cutover online migration operation for the database"),
						Resource:    to.Ptr("Database Migration Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Sql/managedInstances/providers/Microsoft.DataMigration/databaseMigrations/write"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Create or Update Database Migration resource"),
						Operation:   to.Ptr("Create or Update Database Migration resource"),
						Resource:    to.Ptr("Database Migration Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Sql/managedInstances/providers/Microsoft.DataMigration/databaseMigrations/write"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Update Database Migration resource"),
						Operation:   to.Ptr("Update Database Migration resource"),
						Resource:    to.Ptr("Database Migration Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Sql/managedInstances/providers/Microsoft.DataMigration/delete"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Delete Database Migration resource"),
						Operation:   to.Ptr("Delete Database Migration resource"),
						Resource:    to.Ptr("Database Migration Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Sql/managedInstances/providers/Microsoft.DataMigration/read"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Retrieve the Database Migration resource"),
						Operation:   to.Ptr("Get the Database Migration resource"),
						Resource:    to.Ptr("Database Migration Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Sql/managedInstances/providers/Microsoft.DataMigration/read"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Retrieve Database Migration for the server"),
						Operation:   to.Ptr("Get Database Migration in the server"),
						Resource:    to.Ptr("Database Migration Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Sql/managedInstances/providers/loginMigrations/cancel/action"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Stop ongoing login migration"),
						Operation:   to.Ptr("Stop ongoing login migration"),
						Resource:    to.Ptr("Login Migration Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Sql/managedInstances/providers/loginMigrations/validate/action"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Validate login migration"),
						Operation:   to.Ptr("Validate login migration"),
						Resource:    to.Ptr("Login Migration Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Sql/managedInstances/providers/loginMigrations/checkNameAvailability/action"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Operation: to.Ptr("Check Name availability for login migration"),
						Resource:  to.Ptr("Login Migration Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Sql/managedInstances/providers/loginMigrations/write"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Create or Update Login Migration resource"),
						Operation:   to.Ptr("Create or Update Login Migration resource"),
						Resource:    to.Ptr("Login Migration Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Sql/managedInstances/providers/loginMigrations/write"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Update Login Migration resource"),
						Operation:   to.Ptr("Update Login Migration resource"),
						Resource:    to.Ptr("Login Migration Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Sql/managedInstances/providers/loginMigrations/delete"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Delete Login Migration resource"),
						Operation:   to.Ptr("Delete Login Migration resource"),
						Resource:    to.Ptr("Login Migration Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Sql/managedInstances/providers/loginMigrations/read"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Retrieve the Login Migration resource"),
						Operation:   to.Ptr("Get Login Migration resource"),
						Resource:    to.Ptr("Login Migration Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Sql/managedInstances/providers/loginMigrations/read"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Retrieve the Login Migrations"),
						Operation:   to.Ptr("Get all Login Migration resources by server"),
						Resource:    to.Ptr("Login Migration Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataMigration/sqlMigrationServices/read"),
					Display: &armdatamigration.OperationsDisplayDefinition{
						Description: to.Ptr("Retrieve all services in the Subscription"),
						Operation:   to.Ptr("Get all services in the Subscription"),
						Resource:    to.Ptr("SQL Migration Service"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ListOperation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLMigrationServices_Get(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/GetMigrationService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Migration Service."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewSQLMigrationServicesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"service1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/GetMigrationService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.SQLMigrationService{
			Name:     to.Ptr("service1"),
			Type:     to.Ptr("Microsoft.DataMigration/sqlMigrationServices"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.DataMigration/sqlMigrationServices/service1"),
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"myTag": to.Ptr("myVal"),
			},
			Properties: &armdatamigration.SQLMigrationServiceProperties{
				IntegrationRuntimeState: to.Ptr("NeedRegistration"),
				ProvisioningState:       to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLMigrationService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLMigrationService)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/GetMigrationService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLMigrationServices_CreateOrUpdate(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/CreateOrUpdateMigrationServiceMAX.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update SQL Migration Service with maximum parameters."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewSQLMigrationServicesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg",
		"testagent",
		armdatamigration.SQLMigrationService{
			Location: to.Ptr("northeurope"),
		},
		&armdatamigration.SQLMigrationServicesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/CreateOrUpdateMigrationServiceMAX.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/CreateOrUpdateMigrationServiceMAX.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.SQLMigrationService{
			Name:     to.Ptr("testagent"),
			Type:     to.Ptr("Microsoft.DataMigration/sqlMigrationServices"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.DataMigration/sqlMigrationServices/testagent"),
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"myTag": to.Ptr("myVal"),
			},
			Properties: &armdatamigration.SQLMigrationServiceProperties{
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLMigrationService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLMigrationService)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/CreateOrUpdateMigrationServiceMAX.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/CreateOrUpdateMigrationServiceMIN.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update SQL Migration Service with minimum parameters."},
	})
	client = armdatamigration.NewSQLMigrationServicesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg",
		"testagent",
		armdatamigration.SQLMigrationService{
			Location: to.Ptr("northeurope"),
		},
		&armdatamigration.SQLMigrationServicesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/CreateOrUpdateMigrationServiceMIN.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/CreateOrUpdateMigrationServiceMIN.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.SQLMigrationService{
			Name:     to.Ptr("testagent"),
			Type:     to.Ptr("Microsoft.DataMigration/sqlMigrationServices"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.DataMigration/sqlMigrationServices/testagent"),
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"myTag": to.Ptr("myVal"),
			},
			Properties: &armdatamigration.SQLMigrationServiceProperties{
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLMigrationService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLMigrationService)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/CreateOrUpdateMigrationServiceMIN.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLMigrationServices_Delete(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/DeleteMigrationService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete SQL Migration Service."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewSQLMigrationServicesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testrg",
		"service1",
		&armdatamigration.SQLMigrationServicesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/DeleteMigrationService.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/DeleteMigrationService.json: %v", err)
	}
}

func TestSQLMigrationServices_Update(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/UpdateMigrationService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update SQL Migration Service."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewSQLMigrationServicesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"testrg",
		"testagent",
		armdatamigration.SQLMigrationServiceUpdate{
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
		},
		&armdatamigration.SQLMigrationServicesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/UpdateMigrationService.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/UpdateMigrationService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.SQLMigrationService{
			Name:     to.Ptr("testagent"),
			Type:     to.Ptr("Microsoft.DataMigration/sqlMigrationServices"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.DataMigration/sqlMigrationServices/testagent"),
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
			Properties: &armdatamigration.SQLMigrationServiceProperties{},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLMigrationService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLMigrationService)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/UpdateMigrationService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLMigrationServices_ListByResourceGroup(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ListByResourceGroupMigrationService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Migration Services in the Resource Group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewSQLMigrationServicesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByResourceGroup("testrg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ListByResourceGroupMigrationService.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatamigration.SQLMigrationListResult{
			Value: []*armdatamigration.SQLMigrationService{
				{
					Name:     to.Ptr("service1"),
					Type:     to.Ptr("Microsoft.DataMigration/sqlMigrationServices"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.DataMigration/sqlMigrationServices/service1"),
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					Properties: &armdatamigration.SQLMigrationServiceProperties{
						IntegrationRuntimeState: to.Ptr("NeedRegistration"),
						ProvisioningState:       to.Ptr("Succeeded"),
					},
				},
				{
					Name:     to.Ptr("service2"),
					Type:     to.Ptr("Microsoft.DataMigration/sqlMigrationServices"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.DataMigration/sqlMigrationServices/service1"),
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					Properties: &armdatamigration.SQLMigrationServiceProperties{
						IntegrationRuntimeState: to.Ptr("NeedRegistration"),
						ProvisioningState:       to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SQLMigrationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SQLMigrationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ListByResourceGroupMigrationService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLMigrationServices_ListAuthKeys(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ListAuthKeysMigrationService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Retrieve the List of Authentication Keys."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewSQLMigrationServicesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.ListAuthKeys(ctx,
		"testrg",
		"service1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ListAuthKeysMigrationService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.AuthenticationKeys{
			AuthKey1: to.Ptr("IR@3c400518-8dce-479f-97f9-83d17c3d8c24@dmsv2test7@ServiceEndpoint=wu.frontend.int.clouddatahub-int.net@Kjvm37BceBapP0z7R2n3zZrvY/M79yo7Hg3rR+LjFFI="),
			AuthKey2: to.Ptr("IR@3c499528-8ace-47xf-97z9-83d17c3d8c24@dmsv2test7@ServiceEndpoint=wu.frontend.int.clouddatahub-int.net@Kjvm37BceBapP0z7R2n3zZrvY/M79yo7Hg3rR+LjFFI="),
		}
		if !reflect.DeepEqual(exampleRes, res.AuthenticationKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AuthenticationKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ListAuthKeysMigrationService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLMigrationServices_RegenerateAuthKeys(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/RegenAuthKeysMigrationService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Regenerate the of Authentication Keys."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewSQLMigrationServicesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.RegenerateAuthKeys(ctx,
		"testrg",
		"service1",
		armdatamigration.RegenAuthKeys{
			KeyName: to.Ptr("authKey1"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/RegenAuthKeysMigrationService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.RegenAuthKeys{
			AuthKey1: to.Ptr("IR@3c400538-8dce-479f-97f9-8abcd@dmsv2test7@ServiceEndpoint=wu.frontend.int.clouddatahub-int.net@KXYZ="),
		}
		if !reflect.DeepEqual(exampleRes, res.RegenAuthKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RegenAuthKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/RegenAuthKeysMigrationService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLMigrationServices_DeleteNode(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/DeleteIntegrationRuntimeNode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete the integration runtime node."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewSQLMigrationServicesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.DeleteNode(ctx,
		"testrg",
		"service1",
		armdatamigration.DeleteNode{
			IntegrationRuntimeName: to.Ptr("IRName"),
			NodeName:               to.Ptr("nodeName"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/DeleteIntegrationRuntimeNode.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.DeleteNode{
			IntegrationRuntimeName: to.Ptr("IRName"),
			NodeName:               to.Ptr("nodeName"),
		}
		if !reflect.DeepEqual(exampleRes, res.DeleteNode) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeleteNode)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/DeleteIntegrationRuntimeNode.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLMigrationServices_ListMigrations(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ListMigrationsByMigrationService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List database migrations attached to the service."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewSQLMigrationServicesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListMigrations("testrg",
		"service1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ListMigrationsByMigrationService.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatamigration.DatabaseMigrationListResult{
			Value: []*armdatamigration.DatabaseMigration{
				{
					Name: to.Ptr("targetdb"),
					Type: to.Ptr("Microsoft.DataMigration/dataMigrations"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/miname/providers/Microsoft.DataMigration/databaseMigrations/targetdb"),
					Properties: &armdatamigration.DatabaseMigrationPropertiesSQLMi{
						EndedOn:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
						Kind:                 to.Ptr(armdatamigration.ResourceTypeSQLMi),
						MigrationOperationID: to.Ptr("858ba109-5ab7-4fa1-8aea-bea487cacdcd"),
						MigrationStatus:      to.Ptr("InProgress"),
						Scope:                to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/miname"),
						SourceDatabaseName:   to.Ptr("sourcename"),
						StartedOn:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
						MigrationStatusDetails: &armdatamigration.MigrationStatusDetails{
							ActiveBackupSets:     []*armdatamigration.SQLBackupSetInfo{},
							IsFullBackupRestored: to.Ptr(false),
							MigrationState:       to.Ptr("WaitForFullBackupUploadOperation"),
						},
					},
				},
				{
					Name: to.Ptr("targetdb"),
					Type: to.Ptr("Microsoft.DataMigration/dataMigrations"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/miname/providers/Microsoft.DataMigration/databaseMigrations/targetdb"),
					Properties: &armdatamigration.DatabaseMigrationPropertiesSQLMi{
						EndedOn:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
						Kind:                 to.Ptr(armdatamigration.ResourceTypeSQLMi),
						MigrationOperationID: to.Ptr("858ba109-5ab7-4fa1-8aea-bea487cacdcd"),
						MigrationStatus:      to.Ptr("InProgress"),
						Scope:                to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/miname"),
						SourceDatabaseName:   to.Ptr("sourcename"),
						StartedOn:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
						MigrationStatusDetails: &armdatamigration.MigrationStatusDetails{
							ActiveBackupSets:     []*armdatamigration.SQLBackupSetInfo{},
							IsFullBackupRestored: to.Ptr(false),
							MigrationState:       to.Ptr("WaitForFullBackupUploadOperation"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseMigrationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseMigrationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ListMigrationsByMigrationService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLMigrationServices_ListMonitoringData(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/GetMonitorDataMigrationService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Retrieve the Monitoring Data."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewSQLMigrationServicesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.ListMonitoringData(ctx,
		"testrg",
		"service1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/GetMonitorDataMigrationService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.IntegrationRuntimeMonitoringData{
			Name: to.Ptr("IntegrationRuntime1"),
			Nodes: []*armdatamigration.NodeMonitoringData{
				{
					AvailableMemoryInMB:   to.Ptr[int32](4219),
					ConcurrentJobsLimit:   to.Ptr[int32](20),
					ConcurrentJobsRunning: to.Ptr[int32](0),
					CPUUtilization:        to.Ptr[int32](66),
					NodeName:              to.Ptr("DESKTOP-6AAAAAA"),
					ReceivedBytes:         to.Ptr[float64](0.14946500957012177),
					SentBytes:             to.Ptr[float64](0.24564747512340546),
				},
				{
					AvailableMemoryInMB:   to.Ptr[int32](4219),
					ConcurrentJobsLimit:   to.Ptr[int32](20),
					ConcurrentJobsRunning: to.Ptr[int32](0),
					CPUUtilization:        to.Ptr[int32](66),
					NodeName:              to.Ptr("DESKTOP-6AAAAAB"),
					ReceivedBytes:         to.Ptr[float64](0.14946500957012177),
					SentBytes:             to.Ptr[float64](0.24564747512340546),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeMonitoringData) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeMonitoringData)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/GetMonitorDataMigrationService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLMigrationServices_ListBySubscription(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ListBySubscriptionMigrationService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Services in the Subscriptions."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewSQLMigrationServicesClient("subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/managedInstance1", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ListBySubscriptionMigrationService.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatamigration.SQLMigrationListResult{
			Value: []*armdatamigration.SQLMigrationService{
				{
					Name:     to.Ptr("service1"),
					Type:     to.Ptr("Microsoft.DataMigration/sqlMigrationServices"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg1/providers/Microsoft.DataMigration/sqlMigrationServices/service1"),
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					Properties: &armdatamigration.SQLMigrationServiceProperties{
						IntegrationRuntimeState: to.Ptr("NeedRegistration"),
						ProvisioningState:       to.Ptr("Succeeded"),
					},
				},
				{
					Name:     to.Ptr("service2"),
					Type:     to.Ptr("Microsoft.DataMigration/sqlMigrationServices"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg2/providers/Microsoft.DataMigration/sqlMigrationServices/service2"),
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					Properties: &armdatamigration.SQLMigrationServiceProperties{
						IntegrationRuntimeState: to.Ptr("NeedRegistration"),
						ProvisioningState:       to.Ptr("Succeeded"),
					},
				},
				{
					Name:     to.Ptr("service3"),
					Type:     to.Ptr("Microsoft.DataMigration/sqlMigrationServices"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg2/providers/Microsoft.DataMigration/sqlMigrationServices/service3"),
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					Properties: &armdatamigration.SQLMigrationServiceProperties{
						IntegrationRuntimeState: to.Ptr("NeedRegistration"),
						ProvisioningState:       to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SQLMigrationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SQLMigrationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ListBySubscriptionMigrationService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_CreateOrUpdate(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewServicesClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		armdatamigration.Service{
			Location: to.Ptr("southcentralus"),
			Properties: &armdatamigration.ServiceProperties{
				VirtualSubnetID: to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkTestNetwork/providers/Microsoft.Network/virtualNetworks/DmsSdkTestNetwork/subnets/default"),
			},
			SKU: &armdatamigration.ServiceSKU{
				Name: to.Ptr("Basic_1vCore"),
			},
		},
		&armdatamigration.ServicesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.Service{
			Name:     to.Ptr("DmsSdkService"),
			Type:     to.Ptr("Microsoft.DataMigration/services"),
			ID:       to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService"),
			Location: to.Ptr("southcentralus"),
			Etag:     to.Ptr("9QuK/U0GvTJpjIrlOzITXVy68+bmmQ3bFkHudLxmkUw="),
			Properties: &armdatamigration.ServiceProperties{
				ProvisioningState: to.Ptr(armdatamigration.ServiceProvisioningStateSucceeded),
				VirtualSubnetID:   to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkTestNetwork/providers/Microsoft.Network/virtualNetworks/DmsSdkTestNetwork/subnets/default"),
			},
			SKU: &armdatamigration.ServiceSKU{
				Name: to.Ptr("Basic_1vCore"),
				Size: to.Ptr("1 vCore"),
				Tier: to.Ptr("Basic"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Service) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Service)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_Get(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewServicesClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	res, err := client.Get(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.Service{
			Name:     to.Ptr("DmsSdkService"),
			Type:     to.Ptr("Microsoft.DataMigration/services"),
			ID:       to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService"),
			Location: to.Ptr("southcentralus"),
			Etag:     to.Ptr("qt85+bWDN84/6PR8Gllxf63krZcXZX1h3wxAbs6pCjc="),
			Properties: &armdatamigration.ServiceProperties{
				ProvisioningState: to.Ptr(armdatamigration.ServiceProvisioningStateSucceeded),
				PublicKey:         to.Ptr("0;AQAB;sCMXX00QDnuOIEQdXyY96h3VPSk3ccsBeYOGxntqg7y6oXbq4JbQHf8GnUhf5NsmUYBq1rO+6xSumIuLLANIIqNPpHCT8x7W+tcuShlju4fdSKfpyKbJnTJJzGLhRJYG97hDPo9D76qpEYQN66k0IfkKJVDTh7LAxqcE3lxdA98LB2EDM6vYoZ+raKXygYc1UUHDpkfksLk2YRTVCaayTFBh5HT/+CY+48V+rbx/nruvEEEbSg720m5Fc0k8ivM3A+RGkeK9pzQx+TtskSCDXiWL50a8Rrb5ORkBusgY+s0XLyKOuxZCIUOEO8JzUjCeZYdOfLJzx8yfTxEmSlOPqQ=="),
				VirtualSubnetID:   to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkTestNetwork/providers/Microsoft.Network/virtualNetworks/DmsSdkTestNetwork/subnets/default"),
			},
			SKU: &armdatamigration.ServiceSKU{
				Name: to.Ptr("Basic_1vCore"),
				Size: to.Ptr("1 vCore"),
				Tier: to.Ptr("Basic"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Service) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Service)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_Delete(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewServicesClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		&armdatamigration.ServicesClientBeginDeleteOptions{DeleteRunningTasks: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_Delete.json: %v", err)
	}
}

func TestServices_Update(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewServicesClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		armdatamigration.Service{
			Location: to.Ptr("southcentralus"),
			Properties: &armdatamigration.ServiceProperties{
				VirtualSubnetID: to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkTestNetwork/providers/Microsoft.Network/virtualNetworks/DmsSdkTestNetwork/subnets/default"),
			},
		},
		&armdatamigration.ServicesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.Service{
			Name:     to.Ptr("DmsSdkService"),
			Type:     to.Ptr("Microsoft.DataMigration/services"),
			ID:       to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService"),
			Location: to.Ptr("southcentralus"),
			Etag:     to.Ptr("9QuK/U0GvTJpjIrlOzITXVy68+bmmQ3bFkHudLxmkUw="),
			Properties: &armdatamigration.ServiceProperties{
				ProvisioningState: to.Ptr(armdatamigration.ServiceProvisioningStateSucceeded),
				VirtualSubnetID:   to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkTestNetwork/providers/Microsoft.Network/virtualNetworks/DmsSdkTestNetwork/subnets/default"),
			},
			SKU: &armdatamigration.ServiceSKU{
				Name: to.Ptr("Basic_1vCore"),
				Size: to.Ptr("1 vCore"),
				Tier: to.Ptr("Basic"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Service) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Service)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_CheckStatus(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_CheckStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_CheckStatus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewServicesClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	res, err := client.CheckStatus(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_CheckStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.ServiceStatusResponse{
			AgentVersion: to.Ptr("3.3.3871.6"),
			Status:       to.Ptr("Online"),
			SupportedTaskTypes: []*string{
				to.Ptr("diagnostic.count"),
				to.Ptr("diagnostic.echo"),
				to.Ptr("diagnostic.error"),
				to.Ptr("diagnostic.fastCount"),
				to.Ptr("ConnectToSource.SqlServer.Sync"),
				to.Ptr("SyncMigrationOperationalTelemetry.LogCollector"),
				to.Ptr("GetUserTables.AzureSqlDb.Sync"),
				to.Ptr("ConnectToTarget.SqlDb.Sync"),
				to.Ptr("Migrate.MySql.AzureDbForMySql.Sync"),
				to.Ptr("Migrate.SqlServer.AzureSqlDb.Sync"),
				to.Ptr("ValidateMigrationInput.SqlServer.SqlDb.Sync"),
				to.Ptr("DataMigration.AzureSqlDbPostMigrationValidationScenarioId"),
				to.Ptr("GetTDECertificates.Sql"),
				to.Ptr("Migrate.SqlServer.AzureSqlDbMI"),
				to.Ptr("ValidateMigrationInput.SqlServer.AzureSqlDbMI"),
				to.Ptr("ConnectToTarget.AzureDbForMySql"),
				to.Ptr("ConnectToSource.SqlServer"),
				to.Ptr("GetUserTables.Sql"),
				to.Ptr("ConnectToTarget.AzureSqlDbMI"),
				to.Ptr("ConnectToTarget.SqlDb"),
				to.Ptr("Migrate.SqlServer.SqlDb"),
				to.Ptr("ConnectToSource.MySql")},
			VMSize: to.Ptr("Standard_A4_v2"),
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceStatusResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceStatusResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_CheckStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_Start(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_Start.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_Start"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewServicesClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	poller, err := client.BeginStart(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		&armdatamigration.ServicesClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_Start.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_Start.json: %v", err)
	}
}

func TestServices_Stop(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_Stop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_Stop"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewServicesClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	poller, err := client.BeginStop(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		&armdatamigration.ServicesClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_Stop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_Stop.json: %v", err)
	}
}

func TestServices_CheckChildrenNameAvailability(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_CheckChildrenNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_CheckChildrenNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewServicesClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	res, err := client.CheckChildrenNameAvailability(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		armdatamigration.NameAvailabilityRequest{
			Name: to.Ptr("Task1"),
			Type: to.Ptr("tasks"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_CheckChildrenNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.NameAvailabilityResponse{
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.NameAvailabilityResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NameAvailabilityResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_CheckChildrenNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_ListByResourceGroup(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewServicesClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	pager := client.ListByResourceGroup("DmsSdkRg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatamigration.ServiceList{
			Value: []*armdatamigration.Service{
				{
					Name:     to.Ptr("DmsSdkService1"),
					Type:     to.Ptr("Microsoft.DataMigration/services"),
					ID:       to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService1"),
					Location: to.Ptr("southcentralus"),
					SKU: &armdatamigration.ServiceSKU{
						Name: to.Ptr("GeneralPurpose_4vCores"),
						Size: to.Ptr("4 vCores"),
						Tier: to.Ptr("General Purpose"),
					},
				},
				{
					Name:     to.Ptr("DmsSdkService2"),
					Type:     to.Ptr("Microsoft.DataMigration/services"),
					ID:       to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService2"),
					Location: to.Ptr("southcentralus"),
					SKU: &armdatamigration.ServiceSKU{
						Name: to.Ptr("Basic_2vCores"),
						Size: to.Ptr("2 vCores"),
						Tier: to.Ptr("Basic"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceList)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_List(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewServicesClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatamigration.ServiceList{
			Value: []*armdatamigration.Service{
				{
					Name:     to.Ptr("DmsSdkService1"),
					Type:     to.Ptr("Microsoft.DataMigration/services"),
					ID:       to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg1/providers/Microsoft.DataMigration/services/DmsSdkService1"),
					Location: to.Ptr("southcentralus"),
					SKU: &armdatamigration.ServiceSKU{
						Name: to.Ptr("GeneralPurpose_4vCores"),
						Size: to.Ptr("4 vCores"),
						Tier: to.Ptr("General Purpose"),
					},
				},
				{
					Name:     to.Ptr("DmsSdkService2"),
					Type:     to.Ptr("Microsoft.DataMigration/services"),
					ID:       to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg2/providers/Microsoft.DataMigration/services/DmsSdkService2"),
					Location: to.Ptr("centralus"),
					SKU: &armdatamigration.ServiceSKU{
						Name: to.Ptr("Basic_2vCores"),
						Size: to.Ptr("2 vCores"),
						Tier: to.Ptr("Basic"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceList)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_CheckNameAvailability(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_CheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewServicesClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"eastus",
		armdatamigration.NameAvailabilityRequest{
			Name: to.Ptr("DmsSdkService"),
			Type: to.Ptr("services"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_CheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.NameAvailabilityResponse{
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.NameAvailabilityResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NameAvailabilityResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Services_CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTasks_List(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Tasks_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewTasksClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	pager := client.List("DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		&armdatamigration.TasksClientListOptions{TaskType: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Tasks_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatamigration.TaskList{
			Value: []*armdatamigration.ProjectTask{
				{
					Name: to.Ptr("DmsSdkTask"),
					Type: to.Ptr("Microsoft.DataMigration/services/projects/tasks"),
					ID:   to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService/projects/DmsSdkProject/tasks/DmsSdkTask"),
					Etag: to.Ptr("0vPYxzfnDaDH9yhOJAnqTyTRpa09Kb7pm+LEukDBbw8="),
					Properties: &armdatamigration.ConnectToTargetSQLDbTaskProperties{
						State:    to.Ptr(armdatamigration.TaskStateQueued),
						TaskType: to.Ptr(armdatamigration.TaskTypeConnectToTargetSQLDb),
						Input: &armdatamigration.ConnectToTargetSQLDbTaskInput{
							TargetConnectionInfo: &armdatamigration.SQLConnectionInfo{
								Type:                   to.Ptr("SqlConnectionInfo"),
								UserName:               to.Ptr("testuser"),
								Authentication:         to.Ptr(armdatamigration.AuthenticationTypeSQLAuthentication),
								DataSource:             to.Ptr("ssma-test-server.database.windows.net"),
								EncryptConnection:      to.Ptr(true),
								TrustServerCertificate: to.Ptr(true),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TaskList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TaskList)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Tasks_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTasks_CreateOrUpdate(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Tasks_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewTasksClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"DmsSdkTask",
		armdatamigration.ProjectTask{
			Properties: &armdatamigration.ConnectToTargetSQLDbTaskProperties{
				TaskType: to.Ptr(armdatamigration.TaskTypeConnectToTargetSQLDb),
				Input: &armdatamigration.ConnectToTargetSQLDbTaskInput{
					TargetConnectionInfo: &armdatamigration.SQLConnectionInfo{
						Type:                   to.Ptr("SqlConnectionInfo"),
						Password:               to.Ptr("testpassword"),
						UserName:               to.Ptr("testuser"),
						Authentication:         to.Ptr(armdatamigration.AuthenticationTypeSQLAuthentication),
						DataSource:             to.Ptr("ssma-test-server.database.windows.net"),
						EncryptConnection:      to.Ptr(true),
						TrustServerCertificate: to.Ptr(true),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Tasks_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.ProjectTask{
			Name: to.Ptr("DmsSdkTask"),
			Type: to.Ptr("Microsoft.DataMigration/services/projects/tasks"),
			ID:   to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService/projects/DmsSdkProject/tasks/DmsSdkTask"),
			Etag: to.Ptr("0vPYxzfnDaDH9yhOJAnqTyTRpa09Kb7pm+LEukDBbw8="),
			Properties: &armdatamigration.ConnectToTargetSQLDbTaskProperties{
				State:    to.Ptr(armdatamigration.TaskStateQueued),
				TaskType: to.Ptr(armdatamigration.TaskTypeConnectToTargetSQLDb),
				Input: &armdatamigration.ConnectToTargetSQLDbTaskInput{
					TargetConnectionInfo: &armdatamigration.SQLConnectionInfo{
						Type:                   to.Ptr("SqlConnectionInfo"),
						UserName:               to.Ptr("testuser"),
						Authentication:         to.Ptr(armdatamigration.AuthenticationTypeSQLAuthentication),
						DataSource:             to.Ptr("ssma-test-server.database.windows.net"),
						EncryptConnection:      to.Ptr(true),
						TrustServerCertificate: to.Ptr(true),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProjectTask) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProjectTask)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Tasks_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTasks_Get(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Tasks_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewTasksClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	res, err := client.Get(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"DmsSdkTask",
		&armdatamigration.TasksClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Tasks_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.ProjectTask{
			Name: to.Ptr("DmsSdkTask"),
			Type: to.Ptr("Microsoft.DataMigration/services/projects/tasks"),
			ID:   to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService/projects/DmsSdkProject/tasks/DmsSdkTask"),
			Etag: to.Ptr("0vPYxzfnDaDH9yhOJAnqTyTRpa09Kb7pm+LEukDBbw8="),
			Properties: &armdatamigration.ConnectToTargetSQLDbTaskProperties{
				State:    to.Ptr(armdatamigration.TaskStateQueued),
				TaskType: to.Ptr(armdatamigration.TaskTypeConnectToTargetSQLDb),
				Input: &armdatamigration.ConnectToTargetSQLDbTaskInput{
					TargetConnectionInfo: &armdatamigration.SQLConnectionInfo{
						Type:                   to.Ptr("SqlConnectionInfo"),
						UserName:               to.Ptr("testuser"),
						Authentication:         to.Ptr(armdatamigration.AuthenticationTypeSQLAuthentication),
						DataSource:             to.Ptr("ssma-test-server.database.windows.net"),
						EncryptConnection:      to.Ptr(true),
						TrustServerCertificate: to.Ptr(true),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProjectTask) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProjectTask)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Tasks_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTasks_Delete(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Tasks_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewTasksClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	_, err := client.Delete(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"DmsSdkTask",
		&armdatamigration.TasksClientDeleteOptions{DeleteRunningTasks: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Tasks_Delete.json: %v", err)
	}
}

func TestTasks_Update(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Tasks_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewTasksClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	res, err := client.Update(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"DmsSdkTask",
		armdatamigration.ProjectTask{
			Properties: &armdatamigration.ConnectToTargetSQLDbTaskProperties{
				TaskType: to.Ptr(armdatamigration.TaskTypeConnectToTargetSQLDb),
				Input: &armdatamigration.ConnectToTargetSQLDbTaskInput{
					TargetConnectionInfo: &armdatamigration.SQLConnectionInfo{
						Type:                   to.Ptr("SqlConnectionInfo"),
						Password:               to.Ptr("testpassword"),
						UserName:               to.Ptr("testuser"),
						Authentication:         to.Ptr(armdatamigration.AuthenticationTypeSQLAuthentication),
						DataSource:             to.Ptr("ssma-test-server.database.windows.net"),
						EncryptConnection:      to.Ptr(true),
						TrustServerCertificate: to.Ptr(true),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Tasks_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.ProjectTask{
			Name: to.Ptr("DmsSdkTask"),
			Type: to.Ptr("Microsoft.DataMigration/services/projects/tasks"),
			ID:   to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService/projects/DmsSdkProject/tasks/DmsSdkTask"),
			Etag: to.Ptr("0vPYxzfnDaDH9yhOJAnqTyTRpa09Kb7pm+LEukDBbw8="),
			Properties: &armdatamigration.ConnectToTargetSQLDbTaskProperties{
				State:    to.Ptr(armdatamigration.TaskStateQueued),
				TaskType: to.Ptr(armdatamigration.TaskTypeConnectToTargetSQLDb),
				Input: &armdatamigration.ConnectToTargetSQLDbTaskInput{
					TargetConnectionInfo: &armdatamigration.SQLConnectionInfo{
						Type:                   to.Ptr("SqlConnectionInfo"),
						UserName:               to.Ptr("testuser"),
						Authentication:         to.Ptr(armdatamigration.AuthenticationTypeSQLAuthentication),
						DataSource:             to.Ptr("ssma-test-server.database.windows.net"),
						EncryptConnection:      to.Ptr(true),
						TrustServerCertificate: to.Ptr(true),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProjectTask) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProjectTask)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Tasks_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTasks_Cancel(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Tasks_Cancel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Cancel"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewTasksClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	res, err := client.Cancel(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"DmsSdkTask",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Tasks_Cancel.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.ProjectTask{
			Name: to.Ptr("DmsSdkTask"),
			Type: to.Ptr("Microsoft.DataMigration/services/projects/tasks"),
			ID:   to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService/projects/DmsSdkProject/tasks/DmsSdkTask"),
			Etag: to.Ptr("0vPYxzfnDaDH9yhOJAnqTyTRpa09Kb7pm+LEukDBbw8="),
			Properties: &armdatamigration.ConnectToTargetSQLDbTaskProperties{
				State:    to.Ptr(armdatamigration.TaskStateQueued),
				TaskType: to.Ptr(armdatamigration.TaskTypeConnectToTargetSQLDb),
				Input: &armdatamigration.ConnectToTargetSQLDbTaskInput{
					TargetConnectionInfo: &armdatamigration.SQLConnectionInfo{
						Type:                   to.Ptr("SqlConnectionInfo"),
						UserName:               to.Ptr("testuser"),
						Authentication:         to.Ptr(armdatamigration.AuthenticationTypeSQLAuthentication),
						DataSource:             to.Ptr("ssma-test-server.database.windows.net"),
						EncryptConnection:      to.Ptr(true),
						TrustServerCertificate: to.Ptr(true),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProjectTask) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProjectTask)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Tasks_Cancel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTasks_Command(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Tasks_Command.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Command"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewTasksClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	res, err := client.Command(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"DmsSdkTask",
		&armdatamigration.MigrateSyncCompleteCommandProperties{
			CommandType: to.Ptr(armdatamigration.CommandTypeMigrateSyncCompleteDatabase),
			Input: &armdatamigration.MigrateSyncCompleteCommandInput{
				DatabaseName: to.Ptr("TestDatabase"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Tasks_Command.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.TasksClientCommandResponse{
			&armdatamigration.MigrateSyncCompleteCommandProperties{
				CommandType: to.Ptr(armdatamigration.CommandTypeMigrateSyncCompleteDatabase),
				State:       to.Ptr(armdatamigration.CommandStateAccepted),
				Input: &armdatamigration.MigrateSyncCompleteCommandInput{
					DatabaseName: to.Ptr("TestDatabase"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Tasks_Command.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceTasks_List(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ServiceTasks_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceTasks_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewServiceTasksClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	pager := client.List("DmsSdkRg",
		"DmsSdkService",
		&armdatamigration.ServiceTasksClientListOptions{TaskType: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ServiceTasks_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatamigration.TaskList{
			Value: []*armdatamigration.ProjectTask{
				{
					Name: to.Ptr("DmsSdkTask"),
					Type: to.Ptr("Microsoft.DataMigration/services/serviceTasks"),
					ID:   to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService/serviceTasks/DmsSdkTask"),
					Etag: to.Ptr("0vPYxzfnDaDH9yhOJAnqTyTRpa09Kb7pm+LEukDBbw8="),
					Properties: &armdatamigration.CheckOCIDriverTaskProperties{
						State:    to.Ptr(armdatamigration.TaskStateQueued),
						TaskType: to.Ptr(armdatamigration.TaskTypeServiceCheckOCI),
						Input: &armdatamigration.CheckOCIDriverTaskInput{
							ServerVersion: to.Ptr("NA"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TaskList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TaskList)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ServiceTasks_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceTasks_CreateOrUpdate(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ServiceTasks_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewServiceTasksClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkTask",
		armdatamigration.ProjectTask{
			Properties: &armdatamigration.CheckOCIDriverTaskProperties{
				TaskType: to.Ptr(armdatamigration.TaskTypeServiceCheckOCI),
				Input: &armdatamigration.CheckOCIDriverTaskInput{
					ServerVersion: to.Ptr("NA"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ServiceTasks_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.ProjectTask{
			Name: to.Ptr("DmsSdkTask"),
			Type: to.Ptr("Microsoft.DataMigration/services/serviceTasks"),
			ID:   to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService/serviceTasks/DmsSdkTask"),
			Etag: to.Ptr("0vPYxzfnDaDH9yhOJAnqTyTRpa09Kb7pm+LEukDBbw8="),
			Properties: &armdatamigration.CheckOCIDriverTaskProperties{
				State:    to.Ptr(armdatamigration.TaskStateQueued),
				TaskType: to.Ptr(armdatamigration.TaskTypeServiceCheckOCI),
				Input: &armdatamigration.CheckOCIDriverTaskInput{
					ServerVersion: to.Ptr("NA"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProjectTask) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProjectTask)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ServiceTasks_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceTasks_Get(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ServiceTasks_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewServiceTasksClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	res, err := client.Get(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkTask",
		&armdatamigration.ServiceTasksClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ServiceTasks_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.ProjectTask{
			Name: to.Ptr("DmsSdkTask"),
			Type: to.Ptr("Microsoft.DataMigration/services/serviceTasks"),
			ID:   to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService/serviceTasks/DmsSdkTask"),
			Etag: to.Ptr("0vPYxzfnDaDH9yhOJAnqTyTRpa09Kb7pm+LEukDBbw8="),
			Properties: &armdatamigration.CheckOCIDriverTaskProperties{
				State:    to.Ptr(armdatamigration.TaskStateQueued),
				TaskType: to.Ptr(armdatamigration.TaskTypeServiceCheckOCI),
				Input: &armdatamigration.CheckOCIDriverTaskInput{
					ServerVersion: to.Ptr("NA"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProjectTask) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProjectTask)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ServiceTasks_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceTasks_Delete(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ServiceTasks_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewServiceTasksClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	_, err := client.Delete(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkTask",
		&armdatamigration.ServiceTasksClientDeleteOptions{DeleteRunningTasks: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ServiceTasks_Delete.json: %v", err)
	}
}

func TestServiceTasks_Update(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ServiceTasks_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewServiceTasksClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	res, err := client.Update(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkTask",
		armdatamigration.ProjectTask{
			Properties: &armdatamigration.CheckOCIDriverTaskProperties{
				TaskType: to.Ptr(armdatamigration.TaskTypeServiceCheckOCI),
				Input: &armdatamigration.CheckOCIDriverTaskInput{
					ServerVersion: to.Ptr("NA"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ServiceTasks_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.ProjectTask{
			Name: to.Ptr("DmsSdkTask"),
			Type: to.Ptr("Microsoft.DataMigration/services/serviceTasks"),
			ID:   to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService/serviceTasks/DmsSdkTask"),
			Etag: to.Ptr("0vPYxzfnDaDH9yhOJAnqTyTRpa09Kb7pm+LEukDBbw8="),
			Properties: &armdatamigration.CheckOCIDriverTaskProperties{
				State:    to.Ptr(armdatamigration.TaskStateQueued),
				TaskType: to.Ptr(armdatamigration.TaskTypeServiceCheckOCI),
				Input: &armdatamigration.CheckOCIDriverTaskInput{
					ServerVersion: to.Ptr("NA"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProjectTask) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProjectTask)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ServiceTasks_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceTasks_Cancel(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ServiceTasks_Cancel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Cancel"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewServiceTasksClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	res, err := client.Cancel(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkTask",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ServiceTasks_Cancel.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.ProjectTask{
			Name: to.Ptr("DmsSdkTask"),
			Type: to.Ptr("Microsoft.DataMigration/services/serviceTasks"),
			ID:   to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService/serviceTasks/DmsSdkTask"),
			Etag: to.Ptr("0vPYxzfnDaDH9yhOJAnqTyTRpa09Kb7pm+LEukDBbw8="),
			Properties: &armdatamigration.CheckOCIDriverTaskProperties{
				State:    to.Ptr(armdatamigration.TaskStateQueued),
				TaskType: to.Ptr(armdatamigration.TaskTypeServiceCheckOCI),
				Input: &armdatamigration.CheckOCIDriverTaskInput{
					ServerVersion: to.Ptr("NA"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProjectTask) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProjectTask)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/ServiceTasks_Cancel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProjects_List(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Projects_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Projects_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewProjectsClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	pager := client.List("DmsSdkRg",
		"DmsSdkService",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Projects_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatamigration.ProjectList{
			Value: []*armdatamigration.Project{
				{
					Name:     to.Ptr("project1"),
					Type:     to.Ptr("Microsoft.DataMigration/services/projects"),
					ID:       to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService/projects/project1"),
					Location: to.Ptr("southcentralus"),
					Properties: &armdatamigration.ProjectProperties{
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-14T01:29:56.3049263+00:00"); return t }()),
						ProvisioningState: to.Ptr(armdatamigration.ProjectProvisioningStateSucceeded),
						SourcePlatform:    to.Ptr(armdatamigration.ProjectSourcePlatformSQL),
						TargetPlatform:    to.Ptr(armdatamigration.ProjectTargetPlatformSQLDB),
					},
				},
				{
					Name:     to.Ptr("project2"),
					Type:     to.Ptr("Microsoft.DataMigration/services/projects"),
					ID:       to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService/projects/project2"),
					Location: to.Ptr("southcentralus"),
					Properties: &armdatamigration.ProjectProperties{
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-14T01:30:05.6185148+00:00"); return t }()),
						ProvisioningState: to.Ptr(armdatamigration.ProjectProvisioningStateSucceeded),
						SourcePlatform:    to.Ptr(armdatamigration.ProjectSourcePlatformSQL),
						TargetPlatform:    to.Ptr(armdatamigration.ProjectTargetPlatformSQLDB),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProjectList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProjectList)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Projects_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProjects_CreateOrUpdate(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Projects_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Projects_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewProjectsClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		armdatamigration.Project{
			Location: to.Ptr("southcentralus"),
			Properties: &armdatamigration.ProjectProperties{
				SourcePlatform: to.Ptr(armdatamigration.ProjectSourcePlatformSQL),
				TargetPlatform: to.Ptr(armdatamigration.ProjectTargetPlatformSQLDB),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Projects_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.Project{
			Name:     to.Ptr("DmsSdkProject"),
			Type:     to.Ptr("Microsoft.DataMigration/services/projects"),
			ID:       to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService/projects/DmsSdkProject"),
			Location: to.Ptr("southcentralus"),
			Properties: &armdatamigration.ProjectProperties{
				CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-03T02:14:54.2458282-07:00"); return t }()),
				ProvisioningState: to.Ptr(armdatamigration.ProjectProvisioningStateSucceeded),
				SourcePlatform:    to.Ptr(armdatamigration.ProjectSourcePlatformSQL),
				TargetPlatform:    to.Ptr(armdatamigration.ProjectTargetPlatformSQLDB),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Project) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Project)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Projects_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProjects_Get(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Projects_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Projects_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewProjectsClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	res, err := client.Get(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Projects_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.Project{
			Name:     to.Ptr("DmsSdkProject"),
			Type:     to.Ptr("Microsoft.DataMigration/services/projects"),
			ID:       to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService/projects/DmsSdkProject"),
			Location: to.Ptr("southcentralus"),
			Properties: &armdatamigration.ProjectProperties{
				CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-03T02:35:11.6561001-07:00"); return t }()),
				ProvisioningState: to.Ptr(armdatamigration.ProjectProvisioningStateSucceeded),
				SourcePlatform:    to.Ptr(armdatamigration.ProjectSourcePlatformSQL),
				TargetPlatform:    to.Ptr(armdatamigration.ProjectTargetPlatformSQLDB),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Project) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Project)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Projects_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProjects_Delete(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Projects_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Projects_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewProjectsClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	_, err := client.Delete(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		&armdatamigration.ProjectsClientDeleteOptions{DeleteRunningTasks: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Projects_Delete.json: %v", err)
	}
}

func TestProjects_Update(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Projects_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Projects_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewProjectsClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	res, err := client.Update(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		armdatamigration.Project{
			Location: to.Ptr("southcentralus"),
			Properties: &armdatamigration.ProjectProperties{
				SourcePlatform: to.Ptr(armdatamigration.ProjectSourcePlatformSQL),
				TargetPlatform: to.Ptr(armdatamigration.ProjectTargetPlatformSQLDB),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Projects_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.Project{
			Name:     to.Ptr("DmsSdkProject"),
			Type:     to.Ptr("Microsoft.DataMigration/services/projects"),
			ID:       to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService/projects/DmsSdkProject"),
			Location: to.Ptr("southcentralus"),
			Properties: &armdatamigration.ProjectProperties{
				CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-03T02:14:54.2458282-07:00"); return t }()),
				ProvisioningState: to.Ptr(armdatamigration.ProjectProvisioningStateSucceeded),
				SourcePlatform:    to.Ptr(armdatamigration.ProjectSourcePlatformSQL),
				TargetPlatform:    to.Ptr(armdatamigration.ProjectTargetPlatformSQLDB),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Project) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Project)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Projects_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUsages_List(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Usages_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_Usages"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewUsagesClient("90fb80a6-0f71-4761-8f03-921e7396f3c0", cred, &options)
	pager := client.List("westus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Usages_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatamigration.QuotaList{
			Value: []*armdatamigration.Quota{
				{
					Name: &armdatamigration.QuotaName{
						LocalizedValue: to.Ptr("DMS service instances per region"),
						Value:          to.Ptr("Services"),
					},
					CurrentValue: to.Ptr[float64](1),
					ID:           to.Ptr("/subscriptions/90fb80a6-0f71-4761-8f03-921e7396f3c0/providers/Microsoft.DataMigration/locations/westus/usages/Services"),
					Limit:        to.Ptr[float64](2),
					Unit:         to.Ptr("Count"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.QuotaList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.QuotaList)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Usages_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFiles_List(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Files_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Files_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewFilesClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	pager := client.List("DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Files_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatamigration.FileList{
			Value: []*armdatamigration.ProjectFile{
				{
					Name: to.Ptr("x114d023d8"),
					Type: to.Ptr("Microsoft.DataMigration/services/projects/files"),
					ID:   to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService/projects/DmsSdkProject/files/x114d023d8"),
					Properties: &armdatamigration.ProjectFileProperties{
						Extension:    to.Ptr("sql"),
						FilePath:     to.Ptr("SchemaInput/DmsSdkFile.sql"),
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-15T20:01:33+00:00"); return t }()),
						MediaType:    to.Ptr("text/plain"),
						Size:         to.Ptr[int64](51835),
					},
				},
				{
					Name: to.Ptr("pfpu7fxqcpziyg2h3qj2vb7d8jpbbg7p"),
					Type: to.Ptr("Microsoft.DataMigration/services/projects/files"),
					ID:   to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService/projects/DmsSdkProject/files/pfpu7fxqcpziyg2h3qj2vb7d8jpbbg7p"),
					Properties: &armdatamigration.ProjectFileProperties{
						Extension:    to.Ptr("sql"),
						FilePath:     to.Ptr("7daf055f-82b0-483e-9da0-4244b4eaa9b0/AdventureWorks2008.sql"),
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-05T16:51:03+00:00"); return t }()),
						MediaType:    to.Ptr("text/plain"),
						Size:         to.Ptr[int64](910278),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FileList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FileList)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Files_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFiles_Get(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Files_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Files_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewFilesClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	res, err := client.Get(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"x114d023d8",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Files_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.ProjectFile{
			Name: to.Ptr("x114d023d8"),
			Type: to.Ptr("Microsoft.DataMigration/services/projects/files"),
			ID:   to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService/projects/DmsSdkProject/files/x114d023d8"),
			Properties: &armdatamigration.ProjectFileProperties{
				Extension:    to.Ptr("sql"),
				FilePath:     to.Ptr("SchemaInput/DmsSdkFile.sql"),
				LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-15T20:01:33+00:00"); return t }()),
				MediaType:    to.Ptr("text/plain"),
				Size:         to.Ptr[int64](51835),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProjectFile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProjectFile)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Files_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFiles_CreateOrUpdate(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Files_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Files_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewFilesClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"x114d023d8",
		armdatamigration.ProjectFile{
			Properties: &armdatamigration.ProjectFileProperties{
				FilePath: to.Ptr("DmsSdkFilePath/DmsSdkFile.sql"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Files_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.ProjectFile{
			Name: to.Ptr("x114d023d8"),
			Type: to.Ptr("Microsoft.DataMigration/services/projects/files"),
			ID:   to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService/projects/DmsSdkProject/files/x114d023d8"),
			Etag: to.Ptr("C2WE6C3yt2I0hunjpjzffY8LhTLqrJZHJ20gkuq2ZOA="),
			Properties: &armdatamigration.ProjectFileProperties{
				Extension: to.Ptr("sql"),
				FilePath:  to.Ptr("DmsSdkFilePath/DmsSdkFile.sql"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProjectFile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProjectFile)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Files_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFiles_Delete(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Files_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Files_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewFilesClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	_, err := client.Delete(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"x114d023d8",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Files_Delete.json: %v", err)
	}
}

func TestFiles_Update(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Files_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Files_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewFilesClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	res, err := client.Update(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"x114d023d8",
		armdatamigration.ProjectFile{
			Properties: &armdatamigration.ProjectFileProperties{
				FilePath: to.Ptr("DmsSdkFilePath/DmsSdkFile.sql"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Files_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.ProjectFile{
			Name: to.Ptr("x114d023d8"),
			Type: to.Ptr("Microsoft.DataMigration/services/projects/files"),
			ID:   to.Ptr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkRg/providers/Microsoft.DataMigration/services/DmsSdkService/projects/DmsSdkProject/files/x114d023d8"),
			Etag: to.Ptr("C2WE6C3yt2I0hunjpjzffY8LhTLqrJZHJ20gkuq2ZOA="),
			Properties: &armdatamigration.ProjectFileProperties{
				Extension: to.Ptr("sql"),
				FilePath:  to.Ptr("DmsSdkFilePath/DmsSdkFile.sql"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProjectFile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProjectFile)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Files_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFiles_Read(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Files_Read.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Files_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewFilesClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	res, err := client.Read(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"x114d023d8",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Files_Read.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.FileStorageInfo{
			Headers: map[string]*string{
				"x-ms-blob-type": to.Ptr("BlockBlob"),
			},
			URI: to.Ptr("https://dmssdkservicestorage.blob.core.windows.net/dmssdkservicecontainer/_rpfiles/dmssdkproject/pfpu7fxqcpziyg2h3qj2vb7d8jpbbg7p?sv=2016-05-31&sr=b&sig=sassignature&se=2018-10-05T18%3A21%3A42Z&sp=r"),
		}
		if !reflect.DeepEqual(exampleRes, res.FileStorageInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FileStorageInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Files_Read.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFiles_ReadWrite(t *testing.T) {
	// From example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Files_ReadWrite.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Files_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatamigration.NewFilesClient("fc04246f-04c5-437e-ac5e-206a19e7193f", cred, &options)
	res, err := client.ReadWrite(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"x114d023d8",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Files_ReadWrite.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatamigration.FileStorageInfo{
			Headers: map[string]*string{
				"x-ms-blob-type": to.Ptr("BlockBlob"),
			},
			URI: to.Ptr("https://dmssdkservicestorage.blob.core.windows.net/dmssdkservicecontainer/_rpfiles/dmssdkproject/pfpu7fxqcpziyg2h3qj2vb7d8jpbbg7p?sv=2016-05-31&sr=b&sig=sassignature&se=2018-10-05T18%3A21%3A42Z&sp=racwd"),
		}
		if !reflect.DeepEqual(exampleRes, res.FileStorageInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FileStorageInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/Files_ReadWrite.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
