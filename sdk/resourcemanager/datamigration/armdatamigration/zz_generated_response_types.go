//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatamigration

import (
	"context"
	"net/http"
	"time"

	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
)

// FilesCreateOrUpdateResponse contains the response from method Files.CreateOrUpdate.
type FilesCreateOrUpdateResponse struct {
	FilesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FilesCreateOrUpdateResult contains the result from method Files.CreateOrUpdate.
type FilesCreateOrUpdateResult struct {
	ProjectFile
}

// FilesDeleteResponse contains the response from method Files.Delete.
type FilesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FilesGetResponse contains the response from method Files.Get.
type FilesGetResponse struct {
	FilesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FilesGetResult contains the result from method Files.Get.
type FilesGetResult struct {
	ProjectFile
}

// FilesListResponse contains the response from method Files.List.
type FilesListResponse struct {
	FilesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FilesListResult contains the result from method Files.List.
type FilesListResult struct {
	FileList
}

// FilesReadResponse contains the response from method Files.Read.
type FilesReadResponse struct {
	FilesReadResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FilesReadResult contains the result from method Files.Read.
type FilesReadResult struct {
	FileStorageInfo
}

// FilesReadWriteResponse contains the response from method Files.ReadWrite.
type FilesReadWriteResponse struct {
	FilesReadWriteResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FilesReadWriteResult contains the result from method Files.ReadWrite.
type FilesReadWriteResult struct {
	FileStorageInfo
}

// FilesUpdateResponse contains the response from method Files.Update.
type FilesUpdateResponse struct {
	FilesUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FilesUpdateResult contains the result from method Files.Update.
type FilesUpdateResult struct {
	ProjectFile
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	ServiceOperationList
}

// ProjectsCreateOrUpdateResponse contains the response from method Projects.CreateOrUpdate.
type ProjectsCreateOrUpdateResponse struct {
	ProjectsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProjectsCreateOrUpdateResult contains the result from method Projects.CreateOrUpdate.
type ProjectsCreateOrUpdateResult struct {
	Project
}

// ProjectsDeleteResponse contains the response from method Projects.Delete.
type ProjectsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProjectsGetResponse contains the response from method Projects.Get.
type ProjectsGetResponse struct {
	ProjectsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProjectsGetResult contains the result from method Projects.Get.
type ProjectsGetResult struct {
	Project
}

// ProjectsListResponse contains the response from method Projects.List.
type ProjectsListResponse struct {
	ProjectsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProjectsListResult contains the result from method Projects.List.
type ProjectsListResult struct {
	ProjectList
}

// ProjectsUpdateResponse contains the response from method Projects.Update.
type ProjectsUpdateResponse struct {
	ProjectsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProjectsUpdateResult contains the result from method Projects.Update.
type ProjectsUpdateResult struct {
	Project
}

// ResourceSKUsListSKUsResponse contains the response from method ResourceSKUs.ListSKUs.
type ResourceSKUsListSKUsResponse struct {
	ResourceSKUsListSKUsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceSKUsListSKUsResult contains the result from method ResourceSKUs.ListSKUs.
type ResourceSKUsListSKUsResult struct {
	ResourceSKUsResult
}

// ServiceTasksCancelResponse contains the response from method ServiceTasks.Cancel.
type ServiceTasksCancelResponse struct {
	ServiceTasksCancelResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceTasksCancelResult contains the result from method ServiceTasks.Cancel.
type ServiceTasksCancelResult struct {
	ProjectTask
}

// ServiceTasksCreateOrUpdateResponse contains the response from method ServiceTasks.CreateOrUpdate.
type ServiceTasksCreateOrUpdateResponse struct {
	ServiceTasksCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceTasksCreateOrUpdateResult contains the result from method ServiceTasks.CreateOrUpdate.
type ServiceTasksCreateOrUpdateResult struct {
	ProjectTask
}

// ServiceTasksDeleteResponse contains the response from method ServiceTasks.Delete.
type ServiceTasksDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceTasksGetResponse contains the response from method ServiceTasks.Get.
type ServiceTasksGetResponse struct {
	ServiceTasksGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceTasksGetResult contains the result from method ServiceTasks.Get.
type ServiceTasksGetResult struct {
	ProjectTask
}

// ServiceTasksListResponse contains the response from method ServiceTasks.List.
type ServiceTasksListResponse struct {
	ServiceTasksListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceTasksListResult contains the result from method ServiceTasks.List.
type ServiceTasksListResult struct {
	TaskList
}

// ServiceTasksUpdateResponse contains the response from method ServiceTasks.Update.
type ServiceTasksUpdateResponse struct {
	ServiceTasksUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceTasksUpdateResult contains the result from method ServiceTasks.Update.
type ServiceTasksUpdateResult struct {
	ProjectTask
}

// ServicesCheckChildrenNameAvailabilityResponse contains the response from method Services.CheckChildrenNameAvailability.
type ServicesCheckChildrenNameAvailabilityResponse struct {
	ServicesCheckChildrenNameAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesCheckChildrenNameAvailabilityResult contains the result from method Services.CheckChildrenNameAvailability.
type ServicesCheckChildrenNameAvailabilityResult struct {
	NameAvailabilityResponse
}

// ServicesCheckNameAvailabilityResponse contains the response from method Services.CheckNameAvailability.
type ServicesCheckNameAvailabilityResponse struct {
	ServicesCheckNameAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesCheckNameAvailabilityResult contains the result from method Services.CheckNameAvailability.
type ServicesCheckNameAvailabilityResult struct {
	NameAvailabilityResponse
}

// ServicesCheckStatusResponse contains the response from method Services.CheckStatus.
type ServicesCheckStatusResponse struct {
	ServicesCheckStatusResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesCheckStatusResult contains the result from method Services.CheckStatus.
type ServicesCheckStatusResult struct {
	DataMigrationServiceStatusResponse
}

// ServicesCreateOrUpdatePollerResponse contains the response from method Services.CreateOrUpdate.
type ServicesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServicesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ServicesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServicesCreateOrUpdateResponse, error) {
	respType := ServicesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.DataMigrationService)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServicesCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *ServicesCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *ServicesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServicesClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &ServicesCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServicesCreateOrUpdateResponse contains the response from method Services.CreateOrUpdate.
type ServicesCreateOrUpdateResponse struct {
	ServicesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesCreateOrUpdateResult contains the result from method Services.CreateOrUpdate.
type ServicesCreateOrUpdateResult struct {
	DataMigrationService
}

// ServicesDeletePollerResponse contains the response from method Services.Delete.
type ServicesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServicesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ServicesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServicesDeleteResponse, error) {
	respType := ServicesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServicesDeletePollerResponse from the provided client and resume token.
func (l *ServicesDeletePollerResponse) Resume(ctx context.Context, client *ServicesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServicesClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &ServicesDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServicesDeleteResponse contains the response from method Services.Delete.
type ServicesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesGetResponse contains the response from method Services.Get.
type ServicesGetResponse struct {
	ServicesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesGetResult contains the result from method Services.Get.
type ServicesGetResult struct {
	DataMigrationService
}

// ServicesListByResourceGroupResponse contains the response from method Services.ListByResourceGroup.
type ServicesListByResourceGroupResponse struct {
	ServicesListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesListByResourceGroupResult contains the result from method Services.ListByResourceGroup.
type ServicesListByResourceGroupResult struct {
	DataMigrationServiceList
}

// ServicesListResponse contains the response from method Services.List.
type ServicesListResponse struct {
	ServicesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesListResult contains the result from method Services.List.
type ServicesListResult struct {
	DataMigrationServiceList
}

// ServicesListSKUsResponse contains the response from method Services.ListSKUs.
type ServicesListSKUsResponse struct {
	ServicesListSKUsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesListSKUsResult contains the result from method Services.ListSKUs.
type ServicesListSKUsResult struct {
	ServiceSKUList
}

// ServicesStartPollerResponse contains the response from method Services.Start.
type ServicesStartPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServicesStartPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ServicesStartPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServicesStartResponse, error) {
	respType := ServicesStartResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServicesStartPollerResponse from the provided client and resume token.
func (l *ServicesStartPollerResponse) Resume(ctx context.Context, client *ServicesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServicesClient.Start", token, client.pl, client.startHandleError)
	if err != nil {
		return err
	}
	poller := &ServicesStartPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServicesStartResponse contains the response from method Services.Start.
type ServicesStartResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesStopPollerResponse contains the response from method Services.Stop.
type ServicesStopPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServicesStopPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ServicesStopPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServicesStopResponse, error) {
	respType := ServicesStopResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServicesStopPollerResponse from the provided client and resume token.
func (l *ServicesStopPollerResponse) Resume(ctx context.Context, client *ServicesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServicesClient.Stop", token, client.pl, client.stopHandleError)
	if err != nil {
		return err
	}
	poller := &ServicesStopPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServicesStopResponse contains the response from method Services.Stop.
type ServicesStopResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesUpdatePollerResponse contains the response from method Services.Update.
type ServicesUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServicesUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ServicesUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServicesUpdateResponse, error) {
	respType := ServicesUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.DataMigrationService)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServicesUpdatePollerResponse from the provided client and resume token.
func (l *ServicesUpdatePollerResponse) Resume(ctx context.Context, client *ServicesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServicesClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &ServicesUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServicesUpdateResponse contains the response from method Services.Update.
type ServicesUpdateResponse struct {
	ServicesUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesUpdateResult contains the result from method Services.Update.
type ServicesUpdateResult struct {
	DataMigrationService
}

// TasksCancelResponse contains the response from method Tasks.Cancel.
type TasksCancelResponse struct {
	TasksCancelResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TasksCancelResult contains the result from method Tasks.Cancel.
type TasksCancelResult struct {
	ProjectTask
}

// TasksCommandResponse contains the response from method Tasks.Command.
type TasksCommandResponse struct {
	TasksCommandResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TasksCommandResult contains the result from method Tasks.Command.
type TasksCommandResult struct {
	CommandPropertiesClassification
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TasksCommandResult.
func (t *TasksCommandResult) UnmarshalJSON(data []byte) error {
	res, err := unmarshalCommandPropertiesClassification(data)
	if err != nil {
		return err
	}
	t.CommandPropertiesClassification = res
	return nil
}

// TasksCreateOrUpdateResponse contains the response from method Tasks.CreateOrUpdate.
type TasksCreateOrUpdateResponse struct {
	TasksCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TasksCreateOrUpdateResult contains the result from method Tasks.CreateOrUpdate.
type TasksCreateOrUpdateResult struct {
	ProjectTask
}

// TasksDeleteResponse contains the response from method Tasks.Delete.
type TasksDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TasksGetResponse contains the response from method Tasks.Get.
type TasksGetResponse struct {
	TasksGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TasksGetResult contains the result from method Tasks.Get.
type TasksGetResult struct {
	ProjectTask
}

// TasksListResponse contains the response from method Tasks.List.
type TasksListResponse struct {
	TasksListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TasksListResult contains the result from method Tasks.List.
type TasksListResult struct {
	TaskList
}

// TasksUpdateResponse contains the response from method Tasks.Update.
type TasksUpdateResponse struct {
	TasksUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TasksUpdateResult contains the result from method Tasks.Update.
type TasksUpdateResult struct {
	ProjectTask
}

// UsagesListResponse contains the response from method Usages.List.
type UsagesListResponse struct {
	UsagesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// UsagesListResult contains the result from method Usages.List.
type UsagesListResult struct {
	QuotaList
}
