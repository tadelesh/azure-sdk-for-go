//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatamigration_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datamigration/armdatamigration"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlMiGetDatabaseMigration.json
func ExampleDatabaseMigrationsSQLMiClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}

	ctx := context.Background()
	client := armdatamigration.NewDatabaseMigrationsSQLMiClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<managed-instance-name>",
		"<target-db-name>",
		&armdatamigration.DatabaseMigrationsSQLMiClientGetOptions{MigrationOperationID: nil,
			Expand: nil,
		})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlMiCreateOrUpdateDatabaseMigrationMAX.json
func ExampleDatabaseMigrationsSQLMiClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}

	ctx := context.Background()
	client := armdatamigration.NewDatabaseMigrationsSQLMiClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"<resource-group-name>",
		"<managed-instance-name>",
		"<target-db-name>",
		armdatamigration.DatabaseMigrationSQLMi{
			Properties: &armdatamigration.DatabaseMigrationPropertiesSQLMi{
				Kind:               to.Ptr(armdatamigration.ResourceTypeSQLMi),
				MigrationService:   to.Ptr("<migration-service>"),
				Scope:              to.Ptr("<scope>"),
				SourceDatabaseName: to.Ptr("<source-database-name>"),
				SourceSQLConnection: &armdatamigration.SQLConnectionInformation{
					Authentication:         to.Ptr("<authentication>"),
					DataSource:             to.Ptr("<data-source>"),
					EncryptConnection:      to.Ptr(true),
					Password:               to.Ptr("<password>"),
					TrustServerCertificate: to.Ptr(true),
					UserName:               to.Ptr("<user-name>"),
				},
				BackupConfiguration: &armdatamigration.BackupConfiguration{
					SourceLocation: &armdatamigration.SourceLocation{
						FileShare: &armdatamigration.SQLFileShare{
							Path:     to.Ptr("<path>"),
							Password: to.Ptr("<password>"),
							Username: to.Ptr("<username>"),
						},
					},
					TargetLocation: &armdatamigration.TargetLocation{
						AccountKey:               to.Ptr("<account-key>"),
						StorageAccountResourceID: to.Ptr("<storage-account-resource-id>"),
					},
				},
				OfflineConfiguration: &armdatamigration.OfflineConfiguration{
					LastBackupName: to.Ptr("<last-backup-name>"),
					Offline:        to.Ptr(true),
				},
			},
		},
		&armdatamigration.DatabaseMigrationsSQLMiClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlMiCancelDatabaseMigration.json
func ExampleDatabaseMigrationsSQLMiClient_BeginCancel() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}

	ctx := context.Background()
	client := armdatamigration.NewDatabaseMigrationsSQLMiClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCancel(ctx,
		"<resource-group-name>",
		"<managed-instance-name>",
		"<target-db-name>",
		armdatamigration.MigrationOperationInput{
			MigrationOperationID: to.Ptr("<migration-operation-id>"),
		},
		&armdatamigration.DatabaseMigrationsSQLMiClientBeginCancelOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
		return
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/datamigration/resource-manager/Microsoft.DataMigration/preview/2021-10-30-preview/examples/SqlMiCutoverDatabaseMigration.json
func ExampleDatabaseMigrationsSQLMiClient_BeginCutover() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}

	ctx := context.Background()
	client := armdatamigration.NewDatabaseMigrationsSQLMiClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCutover(ctx,
		"<resource-group-name>",
		"<managed-instance-name>",
		"<target-db-name>",
		armdatamigration.MigrationOperationInput{
			MigrationOperationID: to.Ptr("<migration-operation-id>"),
		},
		&armdatamigration.DatabaseMigrationsSQLMiClientBeginCutoverOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
		return
	}
}
