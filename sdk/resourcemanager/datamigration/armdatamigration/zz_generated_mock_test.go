//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatamigration

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestResourceSkus_ListSkus(t *testing.T) {
	// From example ListSkus
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceSKUsClient(con,
		"subid")
	pager := client.ListSKUs(&ResourceSKUsListSKUsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestServices_CreateOrUpdate(t *testing.T) {
	// From example Services_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		DataMigrationService{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("southcentralus"),
			},
			Properties: &DataMigrationServiceProperties{
				VirtualSubnetID: to.StringPtr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkTestNetwork/providers/Microsoft.Network/virtualNetworks/DmsSdkTestNetwork/subnets/default"),
			},
			SKU: &ServiceSKU{
				Name: to.StringPtr("Basic_1vCore"),
			},
		},
		&ServicesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DataMigrationService.ID == nil {
		t.Fatal("DataMigrationService.ID should not be nil!")
	}
}

func TestServices_Get(t *testing.T) {
	// From example Services_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	res, err := client.Get(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		&ServicesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataMigrationService.ID == nil {
		t.Fatal("DataMigrationService.ID should not be nil!")
	}
}

func TestServices_Delete(t *testing.T) {
	// From example Services_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	poller, err := client.BeginDelete(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		&ServicesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServices_Update(t *testing.T) {
	// From example Services_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	poller, err := client.BeginUpdate(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		DataMigrationService{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("southcentralus"),
			},
			Properties: &DataMigrationServiceProperties{
				VirtualSubnetID: to.StringPtr("/subscriptions/fc04246f-04c5-437e-ac5e-206a19e7193f/resourceGroups/DmsSdkTestNetwork/providers/Microsoft.Network/virtualNetworks/DmsSdkTestNetwork/subnets/default"),
			},
		},
		&ServicesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DataMigrationService.ID == nil {
		t.Fatal("DataMigrationService.ID should not be nil!")
	}
}

func TestServices_CheckStatus(t *testing.T) {
	// From example Services_CheckStatus
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	_, err := client.CheckStatus(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		&ServicesCheckStatusOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServices_Start(t *testing.T) {
	// From example Services_Start
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	poller, err := client.BeginStart(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		&ServicesBeginStartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServices_Stop(t *testing.T) {
	// From example Services_Stop
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	poller, err := client.BeginStop(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		&ServicesBeginStopOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServices_ListSkus(t *testing.T) {
	// From example Services_ListSkus
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	pager := client.ListSKUs("DmsSdkRg",
		"DmsSdkService",
		&ServicesListSKUsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestServices_CheckChildrenNameAvailability(t *testing.T) {
	// From example Services_CheckChildrenNameAvailability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	_, err := client.CheckChildrenNameAvailability(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		NameAvailabilityRequest{},
		&ServicesCheckChildrenNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServices_ListByResourceGroup(t *testing.T) {
	// From example Services_ListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	pager := client.ListByResourceGroup("DmsSdkRg",
		&ServicesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DataMigrationService.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DataMigrationService.ID should not be nil!")
			}
		}
	}
}

func TestServices_List(t *testing.T) {
	// From example Services_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	pager := client.List(&ServicesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DataMigrationService.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DataMigrationService.ID should not be nil!")
			}
		}
	}
}

func TestServices_CheckNameAvailability(t *testing.T) {
	// From example Services_CheckNameAvailability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	_, err := client.CheckNameAvailability(ctx,
		"eastus",
		NameAvailabilityRequest{},
		&ServicesCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTasks_List(t *testing.T) {
	// From example Tasks_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTasksClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	pager := client.List("DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		&TasksListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ProjectTask.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ProjectTask.ID should not be nil!")
			}
		}
	}
}

func TestTasks_CreateOrUpdate(t *testing.T) {
	// From example Tasks_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTasksClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	res, err := client.CreateOrUpdate(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"DmsSdkTask",
		ProjectTask{
			Properties: &ConnectToTargetSQLDbTaskProperties{
				ProjectTaskProperties: ProjectTaskProperties{
					TaskType: to.StringPtr("ConnectToTarget.SqlDb"),
				},
				Input: &ConnectToTargetSQLDbTaskInput{
					TargetConnectionInfo: &SQLConnectionInfo{
						ConnectionInfo: ConnectionInfo{
							Type:     to.StringPtr("SqlConnectionInfo"),
							Password: to.StringPtr("testpassword"),
							UserName: to.StringPtr("testuser"),
						},
						Authentication:         AuthenticationTypeSQLAuthentication.ToPtr(),
						DataSource:             to.StringPtr("ssma-test-server.database.windows.net"),
						EncryptConnection:      to.BoolPtr(true),
						TrustServerCertificate: to.BoolPtr(true),
					},
				},
			},
		},
		&TasksCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ProjectTask.ID == nil {
		t.Fatal("ProjectTask.ID should not be nil!")
	}
}

func TestTasks_Get(t *testing.T) {
	// From example Tasks_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTasksClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	res, err := client.Get(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"DmsSdkTask",
		&TasksGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ProjectTask.ID == nil {
		t.Fatal("ProjectTask.ID should not be nil!")
	}
}

func TestTasks_Delete(t *testing.T) {
	// From example Tasks_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTasksClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	_, err := client.Delete(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"DmsSdkTask",
		&TasksDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTasks_Update(t *testing.T) {
	// From example Tasks_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTasksClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	res, err := client.Update(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"DmsSdkTask",
		ProjectTask{
			Properties: &ConnectToTargetSQLDbTaskProperties{
				ProjectTaskProperties: ProjectTaskProperties{
					TaskType: to.StringPtr("ConnectToTarget.SqlDb"),
				},
				Input: &ConnectToTargetSQLDbTaskInput{
					TargetConnectionInfo: &SQLConnectionInfo{
						ConnectionInfo: ConnectionInfo{
							Type:     to.StringPtr("SqlConnectionInfo"),
							Password: to.StringPtr("testpassword"),
							UserName: to.StringPtr("testuser"),
						},
						Authentication:         AuthenticationTypeSQLAuthentication.ToPtr(),
						DataSource:             to.StringPtr("ssma-test-server.database.windows.net"),
						EncryptConnection:      to.BoolPtr(true),
						TrustServerCertificate: to.BoolPtr(true),
					},
				},
			},
		},
		&TasksUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ProjectTask.ID == nil {
		t.Fatal("ProjectTask.ID should not be nil!")
	}
}

func TestTasks_Cancel(t *testing.T) {
	// From example Tasks_Cancel
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTasksClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	res, err := client.Cancel(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"DmsSdkTask",
		&TasksCancelOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ProjectTask.ID == nil {
		t.Fatal("ProjectTask.ID should not be nil!")
	}
}

func TestTasks_Command(t *testing.T) {
	// From example Tasks_Command
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTasksClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	_, err := client.Command(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"DmsSdkTask",
		MigrateSyncCompleteCommandProperties{
			CommandProperties: CommandProperties{
				CommandType: to.StringPtr("Migrate.Sync.Complete.Database"),
			},
			Input: &MigrateSyncCompleteCommandInput{
				DatabaseName: to.StringPtr("TestDatabase"),
			},
		},
		&TasksCommandOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServiceTasks_List(t *testing.T) {
	// From example ServiceTasks_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceTasksClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	pager := client.List("DmsSdkRg",
		"DmsSdkService",
		&ServiceTasksListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ProjectTask.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ProjectTask.ID should not be nil!")
			}
		}
	}
}

func TestServiceTasks_CreateOrUpdate(t *testing.T) {
	// From example Tasks_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceTasksClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	res, err := client.CreateOrUpdate(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkTask",
		ProjectTask{
			Properties: &CheckOCIDriverTaskProperties{
				ProjectTaskProperties: ProjectTaskProperties{
					TaskType: to.StringPtr("Service.Check.OCI"),
				},
				Input: &CheckOCIDriverTaskInput{
					ServerVersion: to.StringPtr("NA"),
				},
			},
		},
		&ServiceTasksCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ProjectTask.ID == nil {
		t.Fatal("ProjectTask.ID should not be nil!")
	}
}

func TestServiceTasks_Get(t *testing.T) {
	// From example Tasks_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceTasksClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	res, err := client.Get(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkTask",
		&ServiceTasksGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ProjectTask.ID == nil {
		t.Fatal("ProjectTask.ID should not be nil!")
	}
}

func TestServiceTasks_Delete(t *testing.T) {
	// From example Tasks_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceTasksClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	_, err := client.Delete(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkTask",
		&ServiceTasksDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServiceTasks_Update(t *testing.T) {
	// From example Tasks_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceTasksClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	res, err := client.Update(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkTask",
		ProjectTask{
			Properties: &CheckOCIDriverTaskProperties{
				ProjectTaskProperties: ProjectTaskProperties{
					TaskType: to.StringPtr("Service.Check.OCI"),
				},
				Input: &CheckOCIDriverTaskInput{
					ServerVersion: to.StringPtr("NA"),
				},
			},
		},
		&ServiceTasksUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ProjectTask.ID == nil {
		t.Fatal("ProjectTask.ID should not be nil!")
	}
}

func TestServiceTasks_Cancel(t *testing.T) {
	// From example Tasks_Cancel
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceTasksClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	res, err := client.Cancel(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkTask",
		&ServiceTasksCancelOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ProjectTask.ID == nil {
		t.Fatal("ProjectTask.ID should not be nil!")
	}
}

func TestProjects_List(t *testing.T) {
	// From example Projects_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProjectsClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	pager := client.List("DmsSdkRg",
		"DmsSdkService",
		&ProjectsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Project.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Project.ID should not be nil!")
			}
		}
	}
}

func TestProjects_CreateOrUpdate(t *testing.T) {
	// From example Projects_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProjectsClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	res, err := client.CreateOrUpdate(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		Project{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("southcentralus"),
			},
			Properties: &ProjectProperties{
				SourcePlatform: ProjectSourcePlatformSQL.ToPtr(),
				TargetPlatform: ProjectTargetPlatformSQLDB.ToPtr(),
			},
		},
		&ProjectsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Project.ID == nil {
		t.Fatal("Project.ID should not be nil!")
	}
}

func TestProjects_Get(t *testing.T) {
	// From example Projects_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProjectsClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	res, err := client.Get(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		&ProjectsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Project.ID == nil {
		t.Fatal("Project.ID should not be nil!")
	}
}

func TestProjects_Delete(t *testing.T) {
	// From example Projects_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProjectsClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	_, err := client.Delete(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		&ProjectsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestProjects_Update(t *testing.T) {
	// From example Projects_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProjectsClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	res, err := client.Update(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		Project{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("southcentralus"),
			},
			Properties: &ProjectProperties{
				SourcePlatform: ProjectSourcePlatformSQL.ToPtr(),
				TargetPlatform: ProjectTargetPlatformSQLDB.ToPtr(),
			},
		},
		&ProjectsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Project.ID == nil {
		t.Fatal("Project.ID should not be nil!")
	}
}

func TestUsages_List(t *testing.T) {
	// From example Services_Usages
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsagesClient(con,
		"90fb80a6-0f71-4761-8f03-921e7396f3c0")
	pager := client.List("westus",
		&UsagesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Quota.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Quota.ID should not be nil!")
			}
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example Operations_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestFiles_List(t *testing.T) {
	// From example Files_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFilesClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	pager := client.List("DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		&FilesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ProjectFile.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ProjectFile.ID should not be nil!")
			}
		}
	}
}

func TestFiles_Get(t *testing.T) {
	// From example Files_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFilesClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	res, err := client.Get(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"x114d023d8",
		&FilesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ProjectFile.ID == nil {
		t.Fatal("ProjectFile.ID should not be nil!")
	}
}

func TestFiles_CreateOrUpdate(t *testing.T) {
	// From example Files_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFilesClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	res, err := client.CreateOrUpdate(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"x114d023d8",
		ProjectFile{
			Properties: &ProjectFileProperties{
				FilePath: to.StringPtr("DmsSdkFilePath/DmsSdkFile.sql"),
			},
		},
		&FilesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ProjectFile.ID == nil {
		t.Fatal("ProjectFile.ID should not be nil!")
	}
}

func TestFiles_Delete(t *testing.T) {
	// From example Files_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFilesClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	_, err := client.Delete(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"x114d023d8",
		&FilesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestFiles_Update(t *testing.T) {
	// From example Files_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFilesClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	res, err := client.Update(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"x114d023d8",
		ProjectFile{
			Properties: &ProjectFileProperties{
				FilePath: to.StringPtr("DmsSdkFilePath/DmsSdkFile.sql"),
			},
		},
		&FilesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ProjectFile.ID == nil {
		t.Fatal("ProjectFile.ID should not be nil!")
	}
}

func TestFiles_Read(t *testing.T) {
	// From example Files_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFilesClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	_, err := client.Read(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"x114d023d8",
		&FilesReadOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestFiles_ReadWrite(t *testing.T) {
	// From example Files_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFilesClient(con,
		"fc04246f-04c5-437e-ac5e-206a19e7193f")
	_, err := client.ReadWrite(ctx,
		"DmsSdkRg",
		"DmsSdkService",
		"DmsSdkProject",
		"x114d023d8",
		&FilesReadWriteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
