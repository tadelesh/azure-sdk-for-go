//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatamigration

const (
	moduleName    = "armdatamigration"
	moduleVersion = "v0.1.0"
)

// AuthenticationType - An enumeration of possible authentication types when connecting
type AuthenticationType string

const (
	AuthenticationTypeActiveDirectoryIntegrated AuthenticationType = "ActiveDirectoryIntegrated"
	AuthenticationTypeActiveDirectoryPassword   AuthenticationType = "ActiveDirectoryPassword"
	AuthenticationTypeNone                      AuthenticationType = "None"
	AuthenticationTypeSQLAuthentication         AuthenticationType = "SqlAuthentication"
	AuthenticationTypeWindowsAuthentication     AuthenticationType = "WindowsAuthentication"
)

// PossibleAuthenticationTypeValues returns the possible values for the AuthenticationType const type.
func PossibleAuthenticationTypeValues() []AuthenticationType {
	return []AuthenticationType{
		AuthenticationTypeActiveDirectoryIntegrated,
		AuthenticationTypeActiveDirectoryPassword,
		AuthenticationTypeNone,
		AuthenticationTypeSQLAuthentication,
		AuthenticationTypeWindowsAuthentication,
	}
}

// ToPtr returns a *AuthenticationType pointing to the current value.
func (c AuthenticationType) ToPtr() *AuthenticationType {
	return &c
}

// BackupFileStatus - An enumeration of Status of the log backup file.
type BackupFileStatus string

const (
	BackupFileStatusArrived   BackupFileStatus = "Arrived"
	BackupFileStatusCancelled BackupFileStatus = "Cancelled"
	BackupFileStatusQueued    BackupFileStatus = "Queued"
	BackupFileStatusRestored  BackupFileStatus = "Restored"
	BackupFileStatusRestoring BackupFileStatus = "Restoring"
	BackupFileStatusUploaded  BackupFileStatus = "Uploaded"
	BackupFileStatusUploading BackupFileStatus = "Uploading"
)

// PossibleBackupFileStatusValues returns the possible values for the BackupFileStatus const type.
func PossibleBackupFileStatusValues() []BackupFileStatus {
	return []BackupFileStatus{
		BackupFileStatusArrived,
		BackupFileStatusCancelled,
		BackupFileStatusQueued,
		BackupFileStatusRestored,
		BackupFileStatusRestoring,
		BackupFileStatusUploaded,
		BackupFileStatusUploading,
	}
}

// ToPtr returns a *BackupFileStatus pointing to the current value.
func (c BackupFileStatus) ToPtr() *BackupFileStatus {
	return &c
}

// BackupMode - An enumeration of backup modes
type BackupMode string

const (
	BackupModeCreateBackup   BackupMode = "CreateBackup"
	BackupModeExistingBackup BackupMode = "ExistingBackup"
)

// PossibleBackupModeValues returns the possible values for the BackupMode const type.
func PossibleBackupModeValues() []BackupMode {
	return []BackupMode{
		BackupModeCreateBackup,
		BackupModeExistingBackup,
	}
}

// ToPtr returns a *BackupMode pointing to the current value.
func (c BackupMode) ToPtr() *BackupMode {
	return &c
}

// BackupType - Enum of the different backup types.
type BackupType string

const (
	BackupTypeDatabase             BackupType = "Database"
	BackupTypeDifferentialDatabase BackupType = "DifferentialDatabase"
	BackupTypeDifferentialFile     BackupType = "DifferentialFile"
	BackupTypeDifferentialPartial  BackupType = "DifferentialPartial"
	BackupTypeFile                 BackupType = "File"
	BackupTypePartial              BackupType = "Partial"
	BackupTypeTransactionLog       BackupType = "TransactionLog"
)

// PossibleBackupTypeValues returns the possible values for the BackupType const type.
func PossibleBackupTypeValues() []BackupType {
	return []BackupType{
		BackupTypeDatabase,
		BackupTypeDifferentialDatabase,
		BackupTypeDifferentialFile,
		BackupTypeDifferentialPartial,
		BackupTypeFile,
		BackupTypePartial,
		BackupTypeTransactionLog,
	}
}

// ToPtr returns a *BackupType pointing to the current value.
func (c BackupType) ToPtr() *BackupType {
	return &c
}

// CommandState - The state of the command. This is ignored if submitted.
type CommandState string

const (
	CommandStateAccepted  CommandState = "Accepted"
	CommandStateFailed    CommandState = "Failed"
	CommandStateRunning   CommandState = "Running"
	CommandStateSucceeded CommandState = "Succeeded"
	CommandStateUnknown   CommandState = "Unknown"
)

// PossibleCommandStateValues returns the possible values for the CommandState const type.
func PossibleCommandStateValues() []CommandState {
	return []CommandState{
		CommandStateAccepted,
		CommandStateFailed,
		CommandStateRunning,
		CommandStateSucceeded,
		CommandStateUnknown,
	}
}

// ToPtr returns a *CommandState pointing to the current value.
func (c CommandState) ToPtr() *CommandState {
	return &c
}

// CommandType - Command type.
type CommandType string

const (
	CommandTypeCancel                               CommandType = "cancel"
	CommandTypeFinish                               CommandType = "finish"
	CommandTypeMigrateSQLServerAzureDbSQLMiComplete CommandType = "Migrate.SqlServer.AzureDbSqlMi.Complete"
	CommandTypeMigrateSyncCompleteDatabase          CommandType = "Migrate.Sync.Complete.Database"
	CommandTypeRestart                              CommandType = "restart"
)

// PossibleCommandTypeValues returns the possible values for the CommandType const type.
func PossibleCommandTypeValues() []CommandType {
	return []CommandType{
		CommandTypeCancel,
		CommandTypeFinish,
		CommandTypeMigrateSQLServerAzureDbSQLMiComplete,
		CommandTypeMigrateSyncCompleteDatabase,
		CommandTypeRestart,
	}
}

// ToPtr returns a *CommandType pointing to the current value.
func (c CommandType) ToPtr() *CommandType {
	return &c
}

type CreatedByType string

const (
	CreatedByTypeApplication     CreatedByType = "Application"
	CreatedByTypeKey             CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser            CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// ToPtr returns a *CreatedByType pointing to the current value.
func (c CreatedByType) ToPtr() *CreatedByType {
	return &c
}

// DataMigrationResultCode - Result code of the data migration
type DataMigrationResultCode string

const (
	DataMigrationResultCodeCompleted                  DataMigrationResultCode = "Completed"
	DataMigrationResultCodeFatalError                 DataMigrationResultCode = "FatalError"
	DataMigrationResultCodeInitial                    DataMigrationResultCode = "Initial"
	DataMigrationResultCodeObjectNotExistsInSource    DataMigrationResultCode = "ObjectNotExistsInSource"
	DataMigrationResultCodeObjectNotExistsInTarget    DataMigrationResultCode = "ObjectNotExistsInTarget"
	DataMigrationResultCodeTargetObjectIsInaccessible DataMigrationResultCode = "TargetObjectIsInaccessible"
)

// PossibleDataMigrationResultCodeValues returns the possible values for the DataMigrationResultCode const type.
func PossibleDataMigrationResultCodeValues() []DataMigrationResultCode {
	return []DataMigrationResultCode{
		DataMigrationResultCodeCompleted,
		DataMigrationResultCodeFatalError,
		DataMigrationResultCodeInitial,
		DataMigrationResultCodeObjectNotExistsInSource,
		DataMigrationResultCodeObjectNotExistsInTarget,
		DataMigrationResultCodeTargetObjectIsInaccessible,
	}
}

// ToPtr returns a *DataMigrationResultCode pointing to the current value.
func (c DataMigrationResultCode) ToPtr() *DataMigrationResultCode {
	return &c
}

// DatabaseCompatLevel - An enumeration of SQL Server database compatibility levels
type DatabaseCompatLevel string

const (
	DatabaseCompatLevelCompatLevel100 DatabaseCompatLevel = "CompatLevel100"
	DatabaseCompatLevelCompatLevel110 DatabaseCompatLevel = "CompatLevel110"
	DatabaseCompatLevelCompatLevel120 DatabaseCompatLevel = "CompatLevel120"
	DatabaseCompatLevelCompatLevel130 DatabaseCompatLevel = "CompatLevel130"
	DatabaseCompatLevelCompatLevel140 DatabaseCompatLevel = "CompatLevel140"
	DatabaseCompatLevelCompatLevel80  DatabaseCompatLevel = "CompatLevel80"
	DatabaseCompatLevelCompatLevel90  DatabaseCompatLevel = "CompatLevel90"
)

// PossibleDatabaseCompatLevelValues returns the possible values for the DatabaseCompatLevel const type.
func PossibleDatabaseCompatLevelValues() []DatabaseCompatLevel {
	return []DatabaseCompatLevel{
		DatabaseCompatLevelCompatLevel100,
		DatabaseCompatLevelCompatLevel110,
		DatabaseCompatLevelCompatLevel120,
		DatabaseCompatLevelCompatLevel130,
		DatabaseCompatLevelCompatLevel140,
		DatabaseCompatLevelCompatLevel80,
		DatabaseCompatLevelCompatLevel90,
	}
}

// ToPtr returns a *DatabaseCompatLevel pointing to the current value.
func (c DatabaseCompatLevel) ToPtr() *DatabaseCompatLevel {
	return &c
}

// DatabaseFileType - An enumeration of SQL Server database file types
type DatabaseFileType string

const (
	DatabaseFileTypeFilestream   DatabaseFileType = "Filestream"
	DatabaseFileTypeFulltext     DatabaseFileType = "Fulltext"
	DatabaseFileTypeLog          DatabaseFileType = "Log"
	DatabaseFileTypeNotSupported DatabaseFileType = "NotSupported"
	DatabaseFileTypeRows         DatabaseFileType = "Rows"
)

// PossibleDatabaseFileTypeValues returns the possible values for the DatabaseFileType const type.
func PossibleDatabaseFileTypeValues() []DatabaseFileType {
	return []DatabaseFileType{
		DatabaseFileTypeFilestream,
		DatabaseFileTypeFulltext,
		DatabaseFileTypeLog,
		DatabaseFileTypeNotSupported,
		DatabaseFileTypeRows,
	}
}

// ToPtr returns a *DatabaseFileType pointing to the current value.
func (c DatabaseFileType) ToPtr() *DatabaseFileType {
	return &c
}

// DatabaseMigrationStage - Current stage of migration
type DatabaseMigrationStage string

const (
	DatabaseMigrationStageBackup     DatabaseMigrationStage = "Backup"
	DatabaseMigrationStageCompleted  DatabaseMigrationStage = "Completed"
	DatabaseMigrationStageFileCopy   DatabaseMigrationStage = "FileCopy"
	DatabaseMigrationStageInitialize DatabaseMigrationStage = "Initialize"
	DatabaseMigrationStageNone       DatabaseMigrationStage = "None"
	DatabaseMigrationStageRestore    DatabaseMigrationStage = "Restore"
)

// PossibleDatabaseMigrationStageValues returns the possible values for the DatabaseMigrationStage const type.
func PossibleDatabaseMigrationStageValues() []DatabaseMigrationStage {
	return []DatabaseMigrationStage{
		DatabaseMigrationStageBackup,
		DatabaseMigrationStageCompleted,
		DatabaseMigrationStageFileCopy,
		DatabaseMigrationStageInitialize,
		DatabaseMigrationStageNone,
		DatabaseMigrationStageRestore,
	}
}

// ToPtr returns a *DatabaseMigrationStage pointing to the current value.
func (c DatabaseMigrationStage) ToPtr() *DatabaseMigrationStage {
	return &c
}

// DatabaseMigrationState - Database level migration state.
type DatabaseMigrationState string

const (
	DatabaseMigrationStateCANCELLED             DatabaseMigrationState = "CANCELLED"
	DatabaseMigrationStateCOMPLETED             DatabaseMigrationState = "COMPLETED"
	DatabaseMigrationStateCUTOVERSTART          DatabaseMigrationState = "CUTOVER_START"
	DatabaseMigrationStateFAILED                DatabaseMigrationState = "FAILED"
	DatabaseMigrationStateFULLBACKUPUPLOADSTART DatabaseMigrationState = "FULL_BACKUP_UPLOAD_START"
	DatabaseMigrationStateINITIAL               DatabaseMigrationState = "INITIAL"
	DatabaseMigrationStateLOGSHIPPINGSTART      DatabaseMigrationState = "LOG_SHIPPING_START"
	DatabaseMigrationStatePOSTCUTOVERCOMPLETE   DatabaseMigrationState = "POST_CUTOVER_COMPLETE"
	DatabaseMigrationStateUNDEFINED             DatabaseMigrationState = "UNDEFINED"
	DatabaseMigrationStateUPLOADLOGFILESSTART   DatabaseMigrationState = "UPLOAD_LOG_FILES_START"
)

// PossibleDatabaseMigrationStateValues returns the possible values for the DatabaseMigrationState const type.
func PossibleDatabaseMigrationStateValues() []DatabaseMigrationState {
	return []DatabaseMigrationState{
		DatabaseMigrationStateCANCELLED,
		DatabaseMigrationStateCOMPLETED,
		DatabaseMigrationStateCUTOVERSTART,
		DatabaseMigrationStateFAILED,
		DatabaseMigrationStateFULLBACKUPUPLOADSTART,
		DatabaseMigrationStateINITIAL,
		DatabaseMigrationStateLOGSHIPPINGSTART,
		DatabaseMigrationStatePOSTCUTOVERCOMPLETE,
		DatabaseMigrationStateUNDEFINED,
		DatabaseMigrationStateUPLOADLOGFILESSTART,
	}
}

// ToPtr returns a *DatabaseMigrationState pointing to the current value.
func (c DatabaseMigrationState) ToPtr() *DatabaseMigrationState {
	return &c
}

// DatabaseState - An enumeration of SQL Server Database states
type DatabaseState string

const (
	DatabaseStateCopying          DatabaseState = "Copying"
	DatabaseStateEmergency        DatabaseState = "Emergency"
	DatabaseStateOffline          DatabaseState = "Offline"
	DatabaseStateOfflineSecondary DatabaseState = "OfflineSecondary"
	DatabaseStateOnline           DatabaseState = "Online"
	DatabaseStateRecovering       DatabaseState = "Recovering"
	DatabaseStateRecoveryPending  DatabaseState = "RecoveryPending"
	DatabaseStateRestoring        DatabaseState = "Restoring"
	DatabaseStateSuspect          DatabaseState = "Suspect"
)

// PossibleDatabaseStateValues returns the possible values for the DatabaseState const type.
func PossibleDatabaseStateValues() []DatabaseState {
	return []DatabaseState{
		DatabaseStateCopying,
		DatabaseStateEmergency,
		DatabaseStateOffline,
		DatabaseStateOfflineSecondary,
		DatabaseStateOnline,
		DatabaseStateRecovering,
		DatabaseStateRecoveryPending,
		DatabaseStateRestoring,
		DatabaseStateSuspect,
	}
}

// ToPtr returns a *DatabaseState pointing to the current value.
func (c DatabaseState) ToPtr() *DatabaseState {
	return &c
}

// ErrorType - Error type
type ErrorType string

const (
	ErrorTypeDefault ErrorType = "Default"
	ErrorTypeError   ErrorType = "Error"
	ErrorTypeWarning ErrorType = "Warning"
)

// PossibleErrorTypeValues returns the possible values for the ErrorType const type.
func PossibleErrorTypeValues() []ErrorType {
	return []ErrorType{
		ErrorTypeDefault,
		ErrorTypeError,
		ErrorTypeWarning,
	}
}

// ToPtr returns a *ErrorType pointing to the current value.
func (c ErrorType) ToPtr() *ErrorType {
	return &c
}

// LoginMigrationStage - Enum of the different stage of login migration.
type LoginMigrationStage string

const (
	LoginMigrationStageAssignRoleMembership       LoginMigrationStage = "AssignRoleMembership"
	LoginMigrationStageAssignRoleOwnership        LoginMigrationStage = "AssignRoleOwnership"
	LoginMigrationStageCompleted                  LoginMigrationStage = "Completed"
	LoginMigrationStageEstablishObjectPermissions LoginMigrationStage = "EstablishObjectPermissions"
	LoginMigrationStageEstablishServerPermissions LoginMigrationStage = "EstablishServerPermissions"
	LoginMigrationStageEstablishUserMapping       LoginMigrationStage = "EstablishUserMapping"
	LoginMigrationStageInitialize                 LoginMigrationStage = "Initialize"
	LoginMigrationStageLoginMigration             LoginMigrationStage = "LoginMigration"
	LoginMigrationStageNone                       LoginMigrationStage = "None"
)

// PossibleLoginMigrationStageValues returns the possible values for the LoginMigrationStage const type.
func PossibleLoginMigrationStageValues() []LoginMigrationStage {
	return []LoginMigrationStage{
		LoginMigrationStageAssignRoleMembership,
		LoginMigrationStageAssignRoleOwnership,
		LoginMigrationStageCompleted,
		LoginMigrationStageEstablishObjectPermissions,
		LoginMigrationStageEstablishServerPermissions,
		LoginMigrationStageEstablishUserMapping,
		LoginMigrationStageInitialize,
		LoginMigrationStageLoginMigration,
		LoginMigrationStageNone,
	}
}

// ToPtr returns a *LoginMigrationStage pointing to the current value.
func (c LoginMigrationStage) ToPtr() *LoginMigrationStage {
	return &c
}

// LoginType - Enum mapping of SMO LoginType.
type LoginType string

const (
	LoginTypeAsymmetricKey LoginType = "AsymmetricKey"
	LoginTypeCertificate   LoginType = "Certificate"
	LoginTypeExternalGroup LoginType = "ExternalGroup"
	LoginTypeExternalUser  LoginType = "ExternalUser"
	LoginTypeSQLLogin      LoginType = "SqlLogin"
	LoginTypeWindowsGroup  LoginType = "WindowsGroup"
	LoginTypeWindowsUser   LoginType = "WindowsUser"
)

// PossibleLoginTypeValues returns the possible values for the LoginType const type.
func PossibleLoginTypeValues() []LoginType {
	return []LoginType{
		LoginTypeAsymmetricKey,
		LoginTypeCertificate,
		LoginTypeExternalGroup,
		LoginTypeExternalUser,
		LoginTypeSQLLogin,
		LoginTypeWindowsGroup,
		LoginTypeWindowsUser,
	}
}

// ToPtr returns a *LoginType pointing to the current value.
func (c LoginType) ToPtr() *LoginType {
	return &c
}

// MigrationState - Current state of migration
type MigrationState string

const (
	MigrationStateCompleted  MigrationState = "Completed"
	MigrationStateFailed     MigrationState = "Failed"
	MigrationStateInProgress MigrationState = "InProgress"
	MigrationStateNone       MigrationState = "None"
	MigrationStateSkipped    MigrationState = "Skipped"
	MigrationStateStopped    MigrationState = "Stopped"
	MigrationStateWarning    MigrationState = "Warning"
)

// PossibleMigrationStateValues returns the possible values for the MigrationState const type.
func PossibleMigrationStateValues() []MigrationState {
	return []MigrationState{
		MigrationStateCompleted,
		MigrationStateFailed,
		MigrationStateInProgress,
		MigrationStateNone,
		MigrationStateSkipped,
		MigrationStateStopped,
		MigrationStateWarning,
	}
}

// ToPtr returns a *MigrationState pointing to the current value.
func (c MigrationState) ToPtr() *MigrationState {
	return &c
}

// MigrationStatus - Current status of migration
type MigrationStatus string

const (
	MigrationStatusCompleted               MigrationStatus = "Completed"
	MigrationStatusCompletedWithWarnings   MigrationStatus = "CompletedWithWarnings"
	MigrationStatusConfigured              MigrationStatus = "Configured"
	MigrationStatusConnecting              MigrationStatus = "Connecting"
	MigrationStatusDefault                 MigrationStatus = "Default"
	MigrationStatusError                   MigrationStatus = "Error"
	MigrationStatusRunning                 MigrationStatus = "Running"
	MigrationStatusSelectLogins            MigrationStatus = "SelectLogins"
	MigrationStatusSourceAndTargetSelected MigrationStatus = "SourceAndTargetSelected"
	MigrationStatusStopped                 MigrationStatus = "Stopped"
)

// PossibleMigrationStatusValues returns the possible values for the MigrationStatus const type.
func PossibleMigrationStatusValues() []MigrationStatus {
	return []MigrationStatus{
		MigrationStatusCompleted,
		MigrationStatusCompletedWithWarnings,
		MigrationStatusConfigured,
		MigrationStatusConnecting,
		MigrationStatusDefault,
		MigrationStatusError,
		MigrationStatusRunning,
		MigrationStatusSelectLogins,
		MigrationStatusSourceAndTargetSelected,
		MigrationStatusStopped,
	}
}

// ToPtr returns a *MigrationStatus pointing to the current value.
func (c MigrationStatus) ToPtr() *MigrationStatus {
	return &c
}

// MongoDbClusterType - The type of data source
type MongoDbClusterType string

const (
	MongoDbClusterTypeBlobContainer MongoDbClusterType = "BlobContainer"
	MongoDbClusterTypeCosmosDb      MongoDbClusterType = "CosmosDb"
	MongoDbClusterTypeMongoDb       MongoDbClusterType = "MongoDb"
)

// PossibleMongoDbClusterTypeValues returns the possible values for the MongoDbClusterType const type.
func PossibleMongoDbClusterTypeValues() []MongoDbClusterType {
	return []MongoDbClusterType{
		MongoDbClusterTypeBlobContainer,
		MongoDbClusterTypeCosmosDb,
		MongoDbClusterTypeMongoDb,
	}
}

// ToPtr returns a *MongoDbClusterType pointing to the current value.
func (c MongoDbClusterType) ToPtr() *MongoDbClusterType {
	return &c
}

// MongoDbErrorType - The type of error or warning
type MongoDbErrorType string

const (
	MongoDbErrorTypeError           MongoDbErrorType = "Error"
	MongoDbErrorTypeValidationError MongoDbErrorType = "ValidationError"
	MongoDbErrorTypeWarning         MongoDbErrorType = "Warning"
)

// PossibleMongoDbErrorTypeValues returns the possible values for the MongoDbErrorType const type.
func PossibleMongoDbErrorTypeValues() []MongoDbErrorType {
	return []MongoDbErrorType{
		MongoDbErrorTypeError,
		MongoDbErrorTypeValidationError,
		MongoDbErrorTypeWarning,
	}
}

// ToPtr returns a *MongoDbErrorType pointing to the current value.
func (c MongoDbErrorType) ToPtr() *MongoDbErrorType {
	return &c
}

type MongoDbMigrationState string

const (
	MongoDbMigrationStateCanceled        MongoDbMigrationState = "Canceled"
	MongoDbMigrationStateComplete        MongoDbMigrationState = "Complete"
	MongoDbMigrationStateCopying         MongoDbMigrationState = "Copying"
	MongoDbMigrationStateFailed          MongoDbMigrationState = "Failed"
	MongoDbMigrationStateFinalizing      MongoDbMigrationState = "Finalizing"
	MongoDbMigrationStateInitialReplay   MongoDbMigrationState = "InitialReplay"
	MongoDbMigrationStateInitializing    MongoDbMigrationState = "Initializing"
	MongoDbMigrationStateNotStarted      MongoDbMigrationState = "NotStarted"
	MongoDbMigrationStateReplaying       MongoDbMigrationState = "Replaying"
	MongoDbMigrationStateRestarting      MongoDbMigrationState = "Restarting"
	MongoDbMigrationStateValidatingInput MongoDbMigrationState = "ValidatingInput"
)

// PossibleMongoDbMigrationStateValues returns the possible values for the MongoDbMigrationState const type.
func PossibleMongoDbMigrationStateValues() []MongoDbMigrationState {
	return []MongoDbMigrationState{
		MongoDbMigrationStateCanceled,
		MongoDbMigrationStateComplete,
		MongoDbMigrationStateCopying,
		MongoDbMigrationStateFailed,
		MongoDbMigrationStateFinalizing,
		MongoDbMigrationStateInitialReplay,
		MongoDbMigrationStateInitializing,
		MongoDbMigrationStateNotStarted,
		MongoDbMigrationStateReplaying,
		MongoDbMigrationStateRestarting,
		MongoDbMigrationStateValidatingInput,
	}
}

// ToPtr returns a *MongoDbMigrationState pointing to the current value.
func (c MongoDbMigrationState) ToPtr() *MongoDbMigrationState {
	return &c
}

// MongoDbProgressResultType - The type of progress object
type MongoDbProgressResultType string

const (
	MongoDbProgressResultTypeCollection MongoDbProgressResultType = "Collection"
	MongoDbProgressResultTypeDatabase   MongoDbProgressResultType = "Database"
	MongoDbProgressResultTypeMigration  MongoDbProgressResultType = "Migration"
)

// PossibleMongoDbProgressResultTypeValues returns the possible values for the MongoDbProgressResultType const type.
func PossibleMongoDbProgressResultTypeValues() []MongoDbProgressResultType {
	return []MongoDbProgressResultType{
		MongoDbProgressResultTypeCollection,
		MongoDbProgressResultTypeDatabase,
		MongoDbProgressResultTypeMigration,
	}
}

// ToPtr returns a *MongoDbProgressResultType pointing to the current value.
func (c MongoDbProgressResultType) ToPtr() *MongoDbProgressResultType {
	return &c
}

// MongoDbReplication - Describes how changes will be replicated from the source to the target. The default is OneTime.
type MongoDbReplication string

const (
	MongoDbReplicationContinuous MongoDbReplication = "Continuous"
	MongoDbReplicationDisabled   MongoDbReplication = "Disabled"
	MongoDbReplicationOneTime    MongoDbReplication = "OneTime"
)

// PossibleMongoDbReplicationValues returns the possible values for the MongoDbReplication const type.
func PossibleMongoDbReplicationValues() []MongoDbReplication {
	return []MongoDbReplication{
		MongoDbReplicationContinuous,
		MongoDbReplicationDisabled,
		MongoDbReplicationOneTime,
	}
}

// ToPtr returns a *MongoDbReplication pointing to the current value.
func (c MongoDbReplication) ToPtr() *MongoDbReplication {
	return &c
}

// MongoDbShardKeyOrder - The field ordering
type MongoDbShardKeyOrder string

const (
	MongoDbShardKeyOrderForward MongoDbShardKeyOrder = "Forward"
	MongoDbShardKeyOrderHashed  MongoDbShardKeyOrder = "Hashed"
	MongoDbShardKeyOrderReverse MongoDbShardKeyOrder = "Reverse"
)

// PossibleMongoDbShardKeyOrderValues returns the possible values for the MongoDbShardKeyOrder const type.
func PossibleMongoDbShardKeyOrderValues() []MongoDbShardKeyOrder {
	return []MongoDbShardKeyOrder{
		MongoDbShardKeyOrderForward,
		MongoDbShardKeyOrderHashed,
		MongoDbShardKeyOrderReverse,
	}
}

// ToPtr returns a *MongoDbShardKeyOrder pointing to the current value.
func (c MongoDbShardKeyOrder) ToPtr() *MongoDbShardKeyOrder {
	return &c
}

// MySQLTargetPlatformType - An enumeration of possible target types when migrating from MySQL
type MySQLTargetPlatformType string

const (
	MySQLTargetPlatformTypeAzureDbForMySQL MySQLTargetPlatformType = "AzureDbForMySQL"
	MySQLTargetPlatformTypeSQLServer       MySQLTargetPlatformType = "SqlServer"
)

// PossibleMySQLTargetPlatformTypeValues returns the possible values for the MySQLTargetPlatformType const type.
func PossibleMySQLTargetPlatformTypeValues() []MySQLTargetPlatformType {
	return []MySQLTargetPlatformType{
		MySQLTargetPlatformTypeAzureDbForMySQL,
		MySQLTargetPlatformTypeSQLServer,
	}
}

// ToPtr returns a *MySQLTargetPlatformType pointing to the current value.
func (c MySQLTargetPlatformType) ToPtr() *MySQLTargetPlatformType {
	return &c
}

// NameCheckFailureReason - The reason why the name is not available, if nameAvailable is false
type NameCheckFailureReason string

const (
	NameCheckFailureReasonAlreadyExists NameCheckFailureReason = "AlreadyExists"
	NameCheckFailureReasonInvalid       NameCheckFailureReason = "Invalid"
)

// PossibleNameCheckFailureReasonValues returns the possible values for the NameCheckFailureReason const type.
func PossibleNameCheckFailureReasonValues() []NameCheckFailureReason {
	return []NameCheckFailureReason{
		NameCheckFailureReasonAlreadyExists,
		NameCheckFailureReasonInvalid,
	}
}

// ToPtr returns a *NameCheckFailureReason pointing to the current value.
func (c NameCheckFailureReason) ToPtr() *NameCheckFailureReason {
	return &c
}

// ObjectType - An enumeration of type of objects
type ObjectType string

const (
	ObjectTypeFunction         ObjectType = "Function"
	ObjectTypeStoredProcedures ObjectType = "StoredProcedures"
	ObjectTypeTable            ObjectType = "Table"
	ObjectTypeUser             ObjectType = "User"
	ObjectTypeView             ObjectType = "View"
)

// PossibleObjectTypeValues returns the possible values for the ObjectType const type.
func PossibleObjectTypeValues() []ObjectType {
	return []ObjectType{
		ObjectTypeFunction,
		ObjectTypeStoredProcedures,
		ObjectTypeTable,
		ObjectTypeUser,
		ObjectTypeView,
	}
}

// ToPtr returns a *ObjectType pointing to the current value.
func (c ObjectType) ToPtr() *ObjectType {
	return &c
}

type OperationOrigin string

const (
	OperationOriginSystem OperationOrigin = "system"
	OperationOriginUser   OperationOrigin = "user"
)

// PossibleOperationOriginValues returns the possible values for the OperationOrigin const type.
func PossibleOperationOriginValues() []OperationOrigin {
	return []OperationOrigin{
		OperationOriginSystem,
		OperationOriginUser,
	}
}

// ToPtr returns a *OperationOrigin pointing to the current value.
func (c OperationOrigin) ToPtr() *OperationOrigin {
	return &c
}

// ProjectProvisioningState - The project's provisioning state
type ProjectProvisioningState string

const (
	ProjectProvisioningStateDeleting  ProjectProvisioningState = "Deleting"
	ProjectProvisioningStateSucceeded ProjectProvisioningState = "Succeeded"
)

// PossibleProjectProvisioningStateValues returns the possible values for the ProjectProvisioningState const type.
func PossibleProjectProvisioningStateValues() []ProjectProvisioningState {
	return []ProjectProvisioningState{
		ProjectProvisioningStateDeleting,
		ProjectProvisioningStateSucceeded,
	}
}

// ToPtr returns a *ProjectProvisioningState pointing to the current value.
func (c ProjectProvisioningState) ToPtr() *ProjectProvisioningState {
	return &c
}

// ProjectSourcePlatform - Source platform of the project
type ProjectSourcePlatform string

const (
	ProjectSourcePlatformMongoDb    ProjectSourcePlatform = "MongoDb"
	ProjectSourcePlatformMySQL      ProjectSourcePlatform = "MySQL"
	ProjectSourcePlatformPostgreSQL ProjectSourcePlatform = "PostgreSql"
	ProjectSourcePlatformSQL        ProjectSourcePlatform = "SQL"
	ProjectSourcePlatformUnknown    ProjectSourcePlatform = "Unknown"
)

// PossibleProjectSourcePlatformValues returns the possible values for the ProjectSourcePlatform const type.
func PossibleProjectSourcePlatformValues() []ProjectSourcePlatform {
	return []ProjectSourcePlatform{
		ProjectSourcePlatformMongoDb,
		ProjectSourcePlatformMySQL,
		ProjectSourcePlatformPostgreSQL,
		ProjectSourcePlatformSQL,
		ProjectSourcePlatformUnknown,
	}
}

// ToPtr returns a *ProjectSourcePlatform pointing to the current value.
func (c ProjectSourcePlatform) ToPtr() *ProjectSourcePlatform {
	return &c
}

// ProjectTargetPlatform - Target platform of the project
type ProjectTargetPlatform string

const (
	ProjectTargetPlatformAzureDbForMySQL      ProjectTargetPlatform = "AzureDbForMySql"
	ProjectTargetPlatformAzureDbForPostgreSQL ProjectTargetPlatform = "AzureDbForPostgreSql"
	ProjectTargetPlatformMongoDb              ProjectTargetPlatform = "MongoDb"
	ProjectTargetPlatformSQLDB                ProjectTargetPlatform = "SQLDB"
	ProjectTargetPlatformSQLMI                ProjectTargetPlatform = "SQLMI"
	ProjectTargetPlatformUnknown              ProjectTargetPlatform = "Unknown"
)

// PossibleProjectTargetPlatformValues returns the possible values for the ProjectTargetPlatform const type.
func PossibleProjectTargetPlatformValues() []ProjectTargetPlatform {
	return []ProjectTargetPlatform{
		ProjectTargetPlatformAzureDbForMySQL,
		ProjectTargetPlatformAzureDbForPostgreSQL,
		ProjectTargetPlatformMongoDb,
		ProjectTargetPlatformSQLDB,
		ProjectTargetPlatformSQLMI,
		ProjectTargetPlatformUnknown,
	}
}

// ToPtr returns a *ProjectTargetPlatform pointing to the current value.
func (c ProjectTargetPlatform) ToPtr() *ProjectTargetPlatform {
	return &c
}

// ReplicateMigrationState - Wrapper for replicate reported migration states.
type ReplicateMigrationState string

const (
	ReplicateMigrationStateACTIONREQUIRED ReplicateMigrationState = "ACTION_REQUIRED"
	ReplicateMigrationStateCOMPLETE       ReplicateMigrationState = "COMPLETE"
	ReplicateMigrationStateFAILED         ReplicateMigrationState = "FAILED"
	ReplicateMigrationStatePENDING        ReplicateMigrationState = "PENDING"
	ReplicateMigrationStateUNDEFINED      ReplicateMigrationState = "UNDEFINED"
	ReplicateMigrationStateVALIDATING     ReplicateMigrationState = "VALIDATING"
)

// PossibleReplicateMigrationStateValues returns the possible values for the ReplicateMigrationState const type.
func PossibleReplicateMigrationStateValues() []ReplicateMigrationState {
	return []ReplicateMigrationState{
		ReplicateMigrationStateACTIONREQUIRED,
		ReplicateMigrationStateCOMPLETE,
		ReplicateMigrationStateFAILED,
		ReplicateMigrationStatePENDING,
		ReplicateMigrationStateUNDEFINED,
		ReplicateMigrationStateVALIDATING,
	}
}

// ToPtr returns a *ReplicateMigrationState pointing to the current value.
func (c ReplicateMigrationState) ToPtr() *ReplicateMigrationState {
	return &c
}

// ResourceSKUCapacityScaleType - The scale type applicable to the SKU.
type ResourceSKUCapacityScaleType string

const (
	ResourceSKUCapacityScaleTypeAutomatic ResourceSKUCapacityScaleType = "Automatic"
	ResourceSKUCapacityScaleTypeManual    ResourceSKUCapacityScaleType = "Manual"
	ResourceSKUCapacityScaleTypeNone      ResourceSKUCapacityScaleType = "None"
)

// PossibleResourceSKUCapacityScaleTypeValues returns the possible values for the ResourceSKUCapacityScaleType const type.
func PossibleResourceSKUCapacityScaleTypeValues() []ResourceSKUCapacityScaleType {
	return []ResourceSKUCapacityScaleType{
		ResourceSKUCapacityScaleTypeAutomatic,
		ResourceSKUCapacityScaleTypeManual,
		ResourceSKUCapacityScaleTypeNone,
	}
}

// ToPtr returns a *ResourceSKUCapacityScaleType pointing to the current value.
func (c ResourceSKUCapacityScaleType) ToPtr() *ResourceSKUCapacityScaleType {
	return &c
}

// ResourceSKURestrictionsReasonCode - The reason code for restriction.
type ResourceSKURestrictionsReasonCode string

const (
	ResourceSKURestrictionsReasonCodeNotAvailableForSubscription ResourceSKURestrictionsReasonCode = "NotAvailableForSubscription"
	ResourceSKURestrictionsReasonCodeQuotaID                     ResourceSKURestrictionsReasonCode = "QuotaId"
)

// PossibleResourceSKURestrictionsReasonCodeValues returns the possible values for the ResourceSKURestrictionsReasonCode const type.
func PossibleResourceSKURestrictionsReasonCodeValues() []ResourceSKURestrictionsReasonCode {
	return []ResourceSKURestrictionsReasonCode{
		ResourceSKURestrictionsReasonCodeNotAvailableForSubscription,
		ResourceSKURestrictionsReasonCodeQuotaID,
	}
}

// ToPtr returns a *ResourceSKURestrictionsReasonCode pointing to the current value.
func (c ResourceSKURestrictionsReasonCode) ToPtr() *ResourceSKURestrictionsReasonCode {
	return &c
}

// ResourceSKURestrictionsType - The type of restrictions.
type ResourceSKURestrictionsType string

const (
	ResourceSKURestrictionsTypeLocation ResourceSKURestrictionsType = "location"
)

// PossibleResourceSKURestrictionsTypeValues returns the possible values for the ResourceSKURestrictionsType const type.
func PossibleResourceSKURestrictionsTypeValues() []ResourceSKURestrictionsType {
	return []ResourceSKURestrictionsType{
		ResourceSKURestrictionsTypeLocation,
	}
}

// ToPtr returns a *ResourceSKURestrictionsType pointing to the current value.
func (c ResourceSKURestrictionsType) ToPtr() *ResourceSKURestrictionsType {
	return &c
}

type ResourceType string

const (
	ResourceTypeSQLMi ResourceType = "SqlMi"
	ResourceTypeSQLVM ResourceType = "SqlVm"
)

// PossibleResourceTypeValues returns the possible values for the ResourceType const type.
func PossibleResourceTypeValues() []ResourceType {
	return []ResourceType{
		ResourceTypeSQLMi,
		ResourceTypeSQLVM,
	}
}

// ToPtr returns a *ResourceType pointing to the current value.
func (c ResourceType) ToPtr() *ResourceType {
	return &c
}

// SQLSourcePlatform - An enumeration of source platform types
type SQLSourcePlatform string

const (
	SQLSourcePlatformSQLOnPrem SQLSourcePlatform = "SqlOnPrem"
)

// PossibleSQLSourcePlatformValues returns the possible values for the SQLSourcePlatform const type.
func PossibleSQLSourcePlatformValues() []SQLSourcePlatform {
	return []SQLSourcePlatform{
		SQLSourcePlatformSQLOnPrem,
	}
}

// ToPtr returns a *SQLSourcePlatform pointing to the current value.
func (c SQLSourcePlatform) ToPtr() *SQLSourcePlatform {
	return &c
}

// ScenarioSource - An enumeration of source type
type ScenarioSource string

const (
	ScenarioSourceAccess        ScenarioSource = "Access"
	ScenarioSourceDB2           ScenarioSource = "DB2"
	ScenarioSourceMongoDB       ScenarioSource = "MongoDB"
	ScenarioSourceMySQL         ScenarioSource = "MySQL"
	ScenarioSourceMySQLRDS      ScenarioSource = "MySQLRDS"
	ScenarioSourceOracle        ScenarioSource = "Oracle"
	ScenarioSourcePostgreSQL    ScenarioSource = "PostgreSQL"
	ScenarioSourcePostgreSQLRDS ScenarioSource = "PostgreSQLRDS"
	ScenarioSourceSQL           ScenarioSource = "SQL"
	ScenarioSourceSQLRDS        ScenarioSource = "SQLRDS"
	ScenarioSourceSybase        ScenarioSource = "Sybase"
)

// PossibleScenarioSourceValues returns the possible values for the ScenarioSource const type.
func PossibleScenarioSourceValues() []ScenarioSource {
	return []ScenarioSource{
		ScenarioSourceAccess,
		ScenarioSourceDB2,
		ScenarioSourceMongoDB,
		ScenarioSourceMySQL,
		ScenarioSourceMySQLRDS,
		ScenarioSourceOracle,
		ScenarioSourcePostgreSQL,
		ScenarioSourcePostgreSQLRDS,
		ScenarioSourceSQL,
		ScenarioSourceSQLRDS,
		ScenarioSourceSybase,
	}
}

// ToPtr returns a *ScenarioSource pointing to the current value.
func (c ScenarioSource) ToPtr() *ScenarioSource {
	return &c
}

// ScenarioTarget - An enumeration of target type
type ScenarioTarget string

const (
	ScenarioTargetAzureDBForMySQL       ScenarioTarget = "AzureDBForMySql"
	ScenarioTargetAzureDBForPostgresSQL ScenarioTarget = "AzureDBForPostgresSQL"
	ScenarioTargetMongoDB               ScenarioTarget = "MongoDB"
	ScenarioTargetSQLDB                 ScenarioTarget = "SQLDB"
	ScenarioTargetSQLDW                 ScenarioTarget = "SQLDW"
	ScenarioTargetSQLMI                 ScenarioTarget = "SQLMI"
	ScenarioTargetSQLServer             ScenarioTarget = "SQLServer"
)

// PossibleScenarioTargetValues returns the possible values for the ScenarioTarget const type.
func PossibleScenarioTargetValues() []ScenarioTarget {
	return []ScenarioTarget{
		ScenarioTargetAzureDBForMySQL,
		ScenarioTargetAzureDBForPostgresSQL,
		ScenarioTargetMongoDB,
		ScenarioTargetSQLDB,
		ScenarioTargetSQLDW,
		ScenarioTargetSQLMI,
		ScenarioTargetSQLServer,
	}
}

// ToPtr returns a *ScenarioTarget pointing to the current value.
func (c ScenarioTarget) ToPtr() *ScenarioTarget {
	return &c
}

// SchemaMigrationOption - Option for how schema is extracted and applied to target
type SchemaMigrationOption string

const (
	SchemaMigrationOptionExtractFromSource SchemaMigrationOption = "ExtractFromSource"
	SchemaMigrationOptionNone              SchemaMigrationOption = "None"
	SchemaMigrationOptionUseStorageFile    SchemaMigrationOption = "UseStorageFile"
)

// PossibleSchemaMigrationOptionValues returns the possible values for the SchemaMigrationOption const type.
func PossibleSchemaMigrationOptionValues() []SchemaMigrationOption {
	return []SchemaMigrationOption{
		SchemaMigrationOptionExtractFromSource,
		SchemaMigrationOptionNone,
		SchemaMigrationOptionUseStorageFile,
	}
}

// ToPtr returns a *SchemaMigrationOption pointing to the current value.
func (c SchemaMigrationOption) ToPtr() *SchemaMigrationOption {
	return &c
}

// SchemaMigrationStage - Current stage of schema migration
type SchemaMigrationStage string

const (
	SchemaMigrationStageCollectingObjects     SchemaMigrationStage = "CollectingObjects"
	SchemaMigrationStageCompleted             SchemaMigrationStage = "Completed"
	SchemaMigrationStageCompletedWithWarnings SchemaMigrationStage = "CompletedWithWarnings"
	SchemaMigrationStageDeployingSchema       SchemaMigrationStage = "DeployingSchema"
	SchemaMigrationStageDownloadingScript     SchemaMigrationStage = "DownloadingScript"
	SchemaMigrationStageFailed                SchemaMigrationStage = "Failed"
	SchemaMigrationStageGeneratingScript      SchemaMigrationStage = "GeneratingScript"
	SchemaMigrationStageNotStarted            SchemaMigrationStage = "NotStarted"
	SchemaMigrationStageUploadingScript       SchemaMigrationStage = "UploadingScript"
	SchemaMigrationStageValidatingInputs      SchemaMigrationStage = "ValidatingInputs"
)

// PossibleSchemaMigrationStageValues returns the possible values for the SchemaMigrationStage const type.
func PossibleSchemaMigrationStageValues() []SchemaMigrationStage {
	return []SchemaMigrationStage{
		SchemaMigrationStageCollectingObjects,
		SchemaMigrationStageCompleted,
		SchemaMigrationStageCompletedWithWarnings,
		SchemaMigrationStageDeployingSchema,
		SchemaMigrationStageDownloadingScript,
		SchemaMigrationStageFailed,
		SchemaMigrationStageGeneratingScript,
		SchemaMigrationStageNotStarted,
		SchemaMigrationStageUploadingScript,
		SchemaMigrationStageValidatingInputs,
	}
}

// ToPtr returns a *SchemaMigrationStage pointing to the current value.
func (c SchemaMigrationStage) ToPtr() *SchemaMigrationStage {
	return &c
}

// ServerLevelPermissionsGroup - Permission group for validations. These groups will run a set of permissions for validating
// user activity. Select the permission group for the activity that you are performing.
type ServerLevelPermissionsGroup string

const (
	ServerLevelPermissionsGroupDefault                             ServerLevelPermissionsGroup = "Default"
	ServerLevelPermissionsGroupMigrationFromSQLServerToAzureDB     ServerLevelPermissionsGroup = "MigrationFromSqlServerToAzureDB"
	ServerLevelPermissionsGroupMigrationFromSQLServerToAzureMI     ServerLevelPermissionsGroup = "MigrationFromSqlServerToAzureMI"
	ServerLevelPermissionsGroupMigrationFromMySQLToAzureDBForMySQL ServerLevelPermissionsGroup = "MigrationFromMySQLToAzureDBForMySQL"
)

// PossibleServerLevelPermissionsGroupValues returns the possible values for the ServerLevelPermissionsGroup const type.
func PossibleServerLevelPermissionsGroupValues() []ServerLevelPermissionsGroup {
	return []ServerLevelPermissionsGroup{
		ServerLevelPermissionsGroupDefault,
		ServerLevelPermissionsGroupMigrationFromSQLServerToAzureDB,
		ServerLevelPermissionsGroupMigrationFromSQLServerToAzureMI,
		ServerLevelPermissionsGroupMigrationFromMySQLToAzureDBForMySQL,
	}
}

// ToPtr returns a *ServerLevelPermissionsGroup pointing to the current value.
func (c ServerLevelPermissionsGroup) ToPtr() *ServerLevelPermissionsGroup {
	return &c
}

// ServiceProvisioningState - The resource's provisioning state
type ServiceProvisioningState string

const (
	ServiceProvisioningStateAccepted      ServiceProvisioningState = "Accepted"
	ServiceProvisioningStateDeleting      ServiceProvisioningState = "Deleting"
	ServiceProvisioningStateDeploying     ServiceProvisioningState = "Deploying"
	ServiceProvisioningStateFailed        ServiceProvisioningState = "Failed"
	ServiceProvisioningStateFailedToStart ServiceProvisioningState = "FailedToStart"
	ServiceProvisioningStateFailedToStop  ServiceProvisioningState = "FailedToStop"
	ServiceProvisioningStateStarting      ServiceProvisioningState = "Starting"
	ServiceProvisioningStateStopped       ServiceProvisioningState = "Stopped"
	ServiceProvisioningStateStopping      ServiceProvisioningState = "Stopping"
	ServiceProvisioningStateSucceeded     ServiceProvisioningState = "Succeeded"
)

// PossibleServiceProvisioningStateValues returns the possible values for the ServiceProvisioningState const type.
func PossibleServiceProvisioningStateValues() []ServiceProvisioningState {
	return []ServiceProvisioningState{
		ServiceProvisioningStateAccepted,
		ServiceProvisioningStateDeleting,
		ServiceProvisioningStateDeploying,
		ServiceProvisioningStateFailed,
		ServiceProvisioningStateFailedToStart,
		ServiceProvisioningStateFailedToStop,
		ServiceProvisioningStateStarting,
		ServiceProvisioningStateStopped,
		ServiceProvisioningStateStopping,
		ServiceProvisioningStateSucceeded,
	}
}

// ToPtr returns a *ServiceProvisioningState pointing to the current value.
func (c ServiceProvisioningState) ToPtr() *ServiceProvisioningState {
	return &c
}

// ServiceScalability - The scalability approach
type ServiceScalability string

const (
	ServiceScalabilityAutomatic ServiceScalability = "automatic"
	ServiceScalabilityManual    ServiceScalability = "manual"
	ServiceScalabilityNone      ServiceScalability = "none"
)

// PossibleServiceScalabilityValues returns the possible values for the ServiceScalability const type.
func PossibleServiceScalabilityValues() []ServiceScalability {
	return []ServiceScalability{
		ServiceScalabilityAutomatic,
		ServiceScalabilityManual,
		ServiceScalabilityNone,
	}
}

// ToPtr returns a *ServiceScalability pointing to the current value.
func (c ServiceScalability) ToPtr() *ServiceScalability {
	return &c
}

// Severity - Severity of the validation error
type Severity string

const (
	SeverityError   Severity = "Error"
	SeverityMessage Severity = "Message"
	SeverityWarning Severity = "Warning"
)

// PossibleSeverityValues returns the possible values for the Severity const type.
func PossibleSeverityValues() []Severity {
	return []Severity{
		SeverityError,
		SeverityMessage,
		SeverityWarning,
	}
}

// ToPtr returns a *Severity pointing to the current value.
func (c Severity) ToPtr() *Severity {
	return &c
}

// SsisMigrationOverwriteOption - The overwrite option for SSIS object migration, only ignore and overwrite are supported
// in DMS now and future may add Reuse option for container object
type SsisMigrationOverwriteOption string

const (
	SsisMigrationOverwriteOptionIgnore    SsisMigrationOverwriteOption = "Ignore"
	SsisMigrationOverwriteOptionOverwrite SsisMigrationOverwriteOption = "Overwrite"
)

// PossibleSsisMigrationOverwriteOptionValues returns the possible values for the SsisMigrationOverwriteOption const type.
func PossibleSsisMigrationOverwriteOptionValues() []SsisMigrationOverwriteOption {
	return []SsisMigrationOverwriteOption{
		SsisMigrationOverwriteOptionIgnore,
		SsisMigrationOverwriteOptionOverwrite,
	}
}

// ToPtr returns a *SsisMigrationOverwriteOption pointing to the current value.
func (c SsisMigrationOverwriteOption) ToPtr() *SsisMigrationOverwriteOption {
	return &c
}

// SsisMigrationStage - Current stage of SSIS migration
type SsisMigrationStage string

const (
	SsisMigrationStageCompleted  SsisMigrationStage = "Completed"
	SsisMigrationStageInProgress SsisMigrationStage = "InProgress"
	SsisMigrationStageInitialize SsisMigrationStage = "Initialize"
	SsisMigrationStageNone       SsisMigrationStage = "None"
)

// PossibleSsisMigrationStageValues returns the possible values for the SsisMigrationStage const type.
func PossibleSsisMigrationStageValues() []SsisMigrationStage {
	return []SsisMigrationStage{
		SsisMigrationStageCompleted,
		SsisMigrationStageInProgress,
		SsisMigrationStageInitialize,
		SsisMigrationStageNone,
	}
}

// ToPtr returns a *SsisMigrationStage pointing to the current value.
func (c SsisMigrationStage) ToPtr() *SsisMigrationStage {
	return &c
}

// SsisStoreType - An enumeration of supported source SSIS store type in DMS
type SsisStoreType string

const (
	SsisStoreTypeSsisCatalog SsisStoreType = "SsisCatalog"
)

// PossibleSsisStoreTypeValues returns the possible values for the SsisStoreType const type.
func PossibleSsisStoreTypeValues() []SsisStoreType {
	return []SsisStoreType{
		SsisStoreTypeSsisCatalog,
	}
}

// ToPtr returns a *SsisStoreType pointing to the current value.
func (c SsisStoreType) ToPtr() *SsisStoreType {
	return &c
}

// SyncDatabaseMigrationReportingState - Enum of the different state of database level online migration.
type SyncDatabaseMigrationReportingState string

const (
	SyncDatabaseMigrationReportingStateBACKUPCOMPLETED    SyncDatabaseMigrationReportingState = "BACKUP_COMPLETED"
	SyncDatabaseMigrationReportingStateBACKUPINPROGRESS   SyncDatabaseMigrationReportingState = "BACKUP_IN_PROGRESS"
	SyncDatabaseMigrationReportingStateCANCELLED          SyncDatabaseMigrationReportingState = "CANCELLED"
	SyncDatabaseMigrationReportingStateCANCELLING         SyncDatabaseMigrationReportingState = "CANCELLING"
	SyncDatabaseMigrationReportingStateCOMPLETE           SyncDatabaseMigrationReportingState = "COMPLETE"
	SyncDatabaseMigrationReportingStateCOMPLETING         SyncDatabaseMigrationReportingState = "COMPLETING"
	SyncDatabaseMigrationReportingStateCONFIGURING        SyncDatabaseMigrationReportingState = "CONFIGURING"
	SyncDatabaseMigrationReportingStateFAILED             SyncDatabaseMigrationReportingState = "FAILED"
	SyncDatabaseMigrationReportingStateINITIALIAZING      SyncDatabaseMigrationReportingState = "INITIALIAZING"
	SyncDatabaseMigrationReportingStateREADYTOCOMPLETE    SyncDatabaseMigrationReportingState = "READY_TO_COMPLETE"
	SyncDatabaseMigrationReportingStateRESTORECOMPLETED   SyncDatabaseMigrationReportingState = "RESTORE_COMPLETED"
	SyncDatabaseMigrationReportingStateRESTOREINPROGRESS  SyncDatabaseMigrationReportingState = "RESTORE_IN_PROGRESS"
	SyncDatabaseMigrationReportingStateRUNNING            SyncDatabaseMigrationReportingState = "RUNNING"
	SyncDatabaseMigrationReportingStateSTARTING           SyncDatabaseMigrationReportingState = "STARTING"
	SyncDatabaseMigrationReportingStateUNDEFINED          SyncDatabaseMigrationReportingState = "UNDEFINED"
	SyncDatabaseMigrationReportingStateVALIDATING         SyncDatabaseMigrationReportingState = "VALIDATING"
	SyncDatabaseMigrationReportingStateVALIDATIONCOMPLETE SyncDatabaseMigrationReportingState = "VALIDATION_COMPLETE"
	SyncDatabaseMigrationReportingStateVALIDATIONFAILED   SyncDatabaseMigrationReportingState = "VALIDATION_FAILED"
)

// PossibleSyncDatabaseMigrationReportingStateValues returns the possible values for the SyncDatabaseMigrationReportingState const type.
func PossibleSyncDatabaseMigrationReportingStateValues() []SyncDatabaseMigrationReportingState {
	return []SyncDatabaseMigrationReportingState{
		SyncDatabaseMigrationReportingStateBACKUPCOMPLETED,
		SyncDatabaseMigrationReportingStateBACKUPINPROGRESS,
		SyncDatabaseMigrationReportingStateCANCELLED,
		SyncDatabaseMigrationReportingStateCANCELLING,
		SyncDatabaseMigrationReportingStateCOMPLETE,
		SyncDatabaseMigrationReportingStateCOMPLETING,
		SyncDatabaseMigrationReportingStateCONFIGURING,
		SyncDatabaseMigrationReportingStateFAILED,
		SyncDatabaseMigrationReportingStateINITIALIAZING,
		SyncDatabaseMigrationReportingStateREADYTOCOMPLETE,
		SyncDatabaseMigrationReportingStateRESTORECOMPLETED,
		SyncDatabaseMigrationReportingStateRESTOREINPROGRESS,
		SyncDatabaseMigrationReportingStateRUNNING,
		SyncDatabaseMigrationReportingStateSTARTING,
		SyncDatabaseMigrationReportingStateUNDEFINED,
		SyncDatabaseMigrationReportingStateVALIDATING,
		SyncDatabaseMigrationReportingStateVALIDATIONCOMPLETE,
		SyncDatabaseMigrationReportingStateVALIDATIONFAILED,
	}
}

// ToPtr returns a *SyncDatabaseMigrationReportingState pointing to the current value.
func (c SyncDatabaseMigrationReportingState) ToPtr() *SyncDatabaseMigrationReportingState {
	return &c
}

// SyncTableMigrationState - Enum of the different state of table level online migration.
type SyncTableMigrationState string

const (
	SyncTableMigrationStateBEFORELOAD SyncTableMigrationState = "BEFORE_LOAD"
	SyncTableMigrationStateCANCELED   SyncTableMigrationState = "CANCELED"
	SyncTableMigrationStateCOMPLETED  SyncTableMigrationState = "COMPLETED"
	SyncTableMigrationStateERROR      SyncTableMigrationState = "ERROR"
	SyncTableMigrationStateFAILED     SyncTableMigrationState = "FAILED"
	SyncTableMigrationStateFULLLOAD   SyncTableMigrationState = "FULL_LOAD"
)

// PossibleSyncTableMigrationStateValues returns the possible values for the SyncTableMigrationState const type.
func PossibleSyncTableMigrationStateValues() []SyncTableMigrationState {
	return []SyncTableMigrationState{
		SyncTableMigrationStateBEFORELOAD,
		SyncTableMigrationStateCANCELED,
		SyncTableMigrationStateCOMPLETED,
		SyncTableMigrationStateERROR,
		SyncTableMigrationStateFAILED,
		SyncTableMigrationStateFULLLOAD,
	}
}

// ToPtr returns a *SyncTableMigrationState pointing to the current value.
func (c SyncTableMigrationState) ToPtr() *SyncTableMigrationState {
	return &c
}

// TaskState - The state of the task. This is ignored if submitted.
type TaskState string

const (
	TaskStateCanceled              TaskState = "Canceled"
	TaskStateFailed                TaskState = "Failed"
	TaskStateFailedInputValidation TaskState = "FailedInputValidation"
	TaskStateFaulted               TaskState = "Faulted"
	TaskStateQueued                TaskState = "Queued"
	TaskStateRunning               TaskState = "Running"
	TaskStateSucceeded             TaskState = "Succeeded"
	TaskStateUnknown               TaskState = "Unknown"
)

// PossibleTaskStateValues returns the possible values for the TaskState const type.
func PossibleTaskStateValues() []TaskState {
	return []TaskState{
		TaskStateCanceled,
		TaskStateFailed,
		TaskStateFailedInputValidation,
		TaskStateFaulted,
		TaskStateQueued,
		TaskStateRunning,
		TaskStateSucceeded,
		TaskStateUnknown,
	}
}

// ToPtr returns a *TaskState pointing to the current value.
func (c TaskState) ToPtr() *TaskState {
	return &c
}

// TaskType - Task type.
type TaskType string

const (
	TaskTypeConnectMongoDb                                     TaskType = "Connect.MongoDb"
	TaskTypeConnectToSourceMySQL                               TaskType = "ConnectToSource.MySql"
	TaskTypeConnectToSourceOracleSync                          TaskType = "ConnectToSource.Oracle.Sync"
	TaskTypeConnectToSourcePostgreSQLSync                      TaskType = "ConnectToSource.PostgreSql.Sync"
	TaskTypeConnectToSourceSQLServer                           TaskType = "ConnectToSource.SqlServer"
	TaskTypeConnectToSourceSQLServerSync                       TaskType = "ConnectToSource.SqlServer.Sync"
	TaskTypeConnectToTargetAzureDbForMySQL                     TaskType = "ConnectToTarget.AzureDbForMySql"
	TaskTypeConnectToTargetAzureDbForPostgreSQLSync            TaskType = "ConnectToTarget.AzureDbForPostgreSql.Sync"
	TaskTypeConnectToTargetAzureSQLDbMI                        TaskType = "ConnectToTarget.AzureSqlDbMI"
	TaskTypeConnectToTargetAzureSQLDbMISyncLRS                 TaskType = "ConnectToTarget.AzureSqlDbMI.Sync.LRS"
	TaskTypeConnectToTargetOracleAzureDbForPostgreSQLSync      TaskType = "ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync"
	TaskTypeConnectToTargetSQLDb                               TaskType = "ConnectToTarget.SqlDb"
	TaskTypeConnectToTargetSQLDbSync                           TaskType = "ConnectToTarget.SqlDb.Sync"
	TaskTypeGetTDECertificatesSQL                              TaskType = "GetTDECertificates.Sql"
	TaskTypeGetUserTablesAzureSQLDbSync                        TaskType = "GetUserTables.AzureSqlDb.Sync"
	TaskTypeGetUserTablesMySQL                                 TaskType = "GetUserTablesMySql"
	TaskTypeGetUserTablesOracle                                TaskType = "GetUserTablesOracle"
	TaskTypeGetUserTablesPostgreSQL                            TaskType = "GetUserTablesPostgreSql"
	TaskTypeGetUserTablesSQL                                   TaskType = "GetUserTables.Sql"
	TaskTypeMigrateMongoDb                                     TaskType = "Migrate.MongoDb"
	TaskTypeMigrateMySQLAzureDbForMySQL                        TaskType = "Migrate.MySql.AzureDbForMySql"
	TaskTypeMigrateMySQLAzureDbForMySQLSync                    TaskType = "Migrate.MySql.AzureDbForMySql.Sync"
	TaskTypeMigrateOracleAzureDbForPostgreSQLSync              TaskType = "Migrate.Oracle.AzureDbForPostgreSql.Sync"
	TaskTypeMigratePostgreSQLAzureDbForPostgreSQLSyncV2        TaskType = "Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2"
	TaskTypeMigrateSQLServerAzureSQLDbMI                       TaskType = "Migrate.SqlServer.AzureSqlDbMI"
	TaskTypeMigrateSQLServerAzureSQLDbMISyncLRS                TaskType = "Migrate.SqlServer.AzureSqlDbMI.Sync.LRS"
	TaskTypeMigrateSQLServerAzureSQLDbSync                     TaskType = "Migrate.SqlServer.AzureSqlDb.Sync"
	TaskTypeMigrateSQLServerSQLDb                              TaskType = "Migrate.SqlServer.SqlDb"
	TaskTypeMigrateSchemaSQLServerSQLDb                        TaskType = "MigrateSchemaSqlServerSqlDb"
	TaskTypeMigrateSsis                                        TaskType = "Migrate.Ssis"
	TaskTypeServiceCheckOCI                                    TaskType = "Service.Check.OCI"
	TaskTypeServiceInstallOCI                                  TaskType = "Service.Install.OCI"
	TaskTypeServiceUploadOCI                                   TaskType = "Service.Upload.OCI"
	TaskTypeValidateMigrationInputSQLServerAzureSQLDbMI        TaskType = "ValidateMigrationInput.SqlServer.AzureSqlDbMI"
	TaskTypeValidateMigrationInputSQLServerAzureSQLDbMISyncLRS TaskType = "ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS"
	TaskTypeValidateMigrationInputSQLServerSQLDbSync           TaskType = "ValidateMigrationInput.SqlServer.SqlDb.Sync"
	TaskTypeValidateMongoDb                                    TaskType = "Validate.MongoDb"
	TaskTypeValidateOracleAzureDbPostgreSQLSync                TaskType = "Validate.Oracle.AzureDbPostgreSql.Sync"
)

// PossibleTaskTypeValues returns the possible values for the TaskType const type.
func PossibleTaskTypeValues() []TaskType {
	return []TaskType{
		TaskTypeConnectMongoDb,
		TaskTypeConnectToSourceMySQL,
		TaskTypeConnectToSourceOracleSync,
		TaskTypeConnectToSourcePostgreSQLSync,
		TaskTypeConnectToSourceSQLServer,
		TaskTypeConnectToSourceSQLServerSync,
		TaskTypeConnectToTargetAzureDbForMySQL,
		TaskTypeConnectToTargetAzureDbForPostgreSQLSync,
		TaskTypeConnectToTargetAzureSQLDbMI,
		TaskTypeConnectToTargetAzureSQLDbMISyncLRS,
		TaskTypeConnectToTargetOracleAzureDbForPostgreSQLSync,
		TaskTypeConnectToTargetSQLDb,
		TaskTypeConnectToTargetSQLDbSync,
		TaskTypeGetTDECertificatesSQL,
		TaskTypeGetUserTablesAzureSQLDbSync,
		TaskTypeGetUserTablesMySQL,
		TaskTypeGetUserTablesOracle,
		TaskTypeGetUserTablesPostgreSQL,
		TaskTypeGetUserTablesSQL,
		TaskTypeMigrateMongoDb,
		TaskTypeMigrateMySQLAzureDbForMySQL,
		TaskTypeMigrateMySQLAzureDbForMySQLSync,
		TaskTypeMigrateOracleAzureDbForPostgreSQLSync,
		TaskTypeMigratePostgreSQLAzureDbForPostgreSQLSyncV2,
		TaskTypeMigrateSQLServerAzureSQLDbMI,
		TaskTypeMigrateSQLServerAzureSQLDbMISyncLRS,
		TaskTypeMigrateSQLServerAzureSQLDbSync,
		TaskTypeMigrateSQLServerSQLDb,
		TaskTypeMigrateSchemaSQLServerSQLDb,
		TaskTypeMigrateSsis,
		TaskTypeServiceCheckOCI,
		TaskTypeServiceInstallOCI,
		TaskTypeServiceUploadOCI,
		TaskTypeValidateMigrationInputSQLServerAzureSQLDbMI,
		TaskTypeValidateMigrationInputSQLServerAzureSQLDbMISyncLRS,
		TaskTypeValidateMigrationInputSQLServerSQLDbSync,
		TaskTypeValidateMongoDb,
		TaskTypeValidateOracleAzureDbPostgreSQLSync,
	}
}

// ToPtr returns a *TaskType pointing to the current value.
func (c TaskType) ToPtr() *TaskType {
	return &c
}

// UpdateActionType - Type of the actual difference for the compared object, while performing schema comparison
type UpdateActionType string

const (
	UpdateActionTypeAddedOnTarget   UpdateActionType = "AddedOnTarget"
	UpdateActionTypeChangedOnTarget UpdateActionType = "ChangedOnTarget"
	UpdateActionTypeDeletedOnTarget UpdateActionType = "DeletedOnTarget"
)

// PossibleUpdateActionTypeValues returns the possible values for the UpdateActionType const type.
func PossibleUpdateActionTypeValues() []UpdateActionType {
	return []UpdateActionType{
		UpdateActionTypeAddedOnTarget,
		UpdateActionTypeChangedOnTarget,
		UpdateActionTypeDeletedOnTarget,
	}
}

// ToPtr returns a *UpdateActionType pointing to the current value.
func (c UpdateActionType) ToPtr() *UpdateActionType {
	return &c
}

// ValidationStatus - Current status of the validation
type ValidationStatus string

const (
	ValidationStatusCompleted           ValidationStatus = "Completed"
	ValidationStatusCompletedWithIssues ValidationStatus = "CompletedWithIssues"
	ValidationStatusDefault             ValidationStatus = "Default"
	ValidationStatusFailed              ValidationStatus = "Failed"
	ValidationStatusInProgress          ValidationStatus = "InProgress"
	ValidationStatusInitialized         ValidationStatus = "Initialized"
	ValidationStatusNotStarted          ValidationStatus = "NotStarted"
	ValidationStatusStopped             ValidationStatus = "Stopped"
)

// PossibleValidationStatusValues returns the possible values for the ValidationStatus const type.
func PossibleValidationStatusValues() []ValidationStatus {
	return []ValidationStatus{
		ValidationStatusCompleted,
		ValidationStatusCompletedWithIssues,
		ValidationStatusDefault,
		ValidationStatusFailed,
		ValidationStatusInProgress,
		ValidationStatusInitialized,
		ValidationStatusNotStarted,
		ValidationStatusStopped,
	}
}

// ToPtr returns a *ValidationStatus pointing to the current value.
func (c ValidationStatus) ToPtr() *ValidationStatus {
	return &c
}
