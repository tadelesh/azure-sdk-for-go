//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armorbital

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// AvailableGroundStationsClientListByCapabilityPager provides operations for iterating over paged responses.
type AvailableGroundStationsClientListByCapabilityPager struct {
	client    *AvailableGroundStationsClient
	current   AvailableGroundStationsClientListByCapabilityResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AvailableGroundStationsClientListByCapabilityResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AvailableGroundStationsClientListByCapabilityPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailableGroundStationListResult.NextLink == nil || len(*p.current.AvailableGroundStationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AvailableGroundStationsClientListByCapabilityPager) NextPage(ctx context.Context) (AvailableGroundStationsClientListByCapabilityResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AvailableGroundStationsClientListByCapabilityResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AvailableGroundStationsClientListByCapabilityResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AvailableGroundStationsClientListByCapabilityResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AvailableGroundStationsClientListByCapabilityResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByCapabilityHandleResponse(resp)
	if err != nil {
		return AvailableGroundStationsClientListByCapabilityResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ContactProfilesClientListBySubscriptionPager provides operations for iterating over paged responses.
type ContactProfilesClientListBySubscriptionPager struct {
	client    *ContactProfilesClient
	current   ContactProfilesClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ContactProfilesClientListBySubscriptionPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ContactProfilesClientListBySubscriptionPager) NextPage(ctx context.Context) (ContactProfilesClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ContactProfilesClientListBySubscriptionResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ContactProfilesClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ContactProfilesClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ContactProfilesClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return ContactProfilesClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ContactProfilesClientListPager provides operations for iterating over paged responses.
type ContactProfilesClientListPager struct {
	client    *ContactProfilesClient
	current   ContactProfilesClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ContactProfilesClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ContactProfilesClientListPager) NextPage(ctx context.Context) (ContactProfilesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ContactProfilesClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ContactProfilesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ContactProfilesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ContactProfilesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ContactProfilesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ContactsClientListPager provides operations for iterating over paged responses.
type ContactsClientListPager struct {
	client    *ContactsClient
	current   ContactsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ContactsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ContactsClientListPager) NextPage(ctx context.Context) (ContactsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ContactsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ContactsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ContactsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ContactsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ContactsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return OperationsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SpacecraftsClientListBySubscriptionPager provides operations for iterating over paged responses.
type SpacecraftsClientListBySubscriptionPager struct {
	client    *SpacecraftsClient
	current   SpacecraftsClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SpacecraftsClientListBySubscriptionPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *SpacecraftsClientListBySubscriptionPager) NextPage(ctx context.Context) (SpacecraftsClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return SpacecraftsClientListBySubscriptionResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SpacecraftsClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SpacecraftsClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SpacecraftsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return SpacecraftsClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SpacecraftsClientListPager provides operations for iterating over paged responses.
type SpacecraftsClientListPager struct {
	client    *SpacecraftsClient
	current   SpacecraftsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SpacecraftsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *SpacecraftsClientListPager) NextPage(ctx context.Context) (SpacecraftsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return SpacecraftsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SpacecraftsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SpacecraftsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SpacecraftsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return SpacecraftsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
