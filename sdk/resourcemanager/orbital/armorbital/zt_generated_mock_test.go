//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armorbital_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/orbital/armorbital"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/OperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OperationsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armorbital.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/OperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armorbital.OperationListResult{
			Value: []*armorbital.Operation{
				{
					Name: to.Ptr("Microsoft.Orbital/spacecrafts/write"),
					Display: &armorbital.OperationDisplay{
						Description: to.Ptr("Creates or Update a spacecraft"),
						Operation:   to.Ptr("Create/Update a spacecraft"),
						Provider:    to.Ptr("Microsoft Orbital"),
						Resource:    to.Ptr("Spacecraft"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/OperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSpacecrafts_ListBySubscription(t *testing.T) {
	// From example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/SpacecraftsBySubscriptionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List of Spacecraft by Subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armorbital.NewSpacecraftsClient("subid", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/SpacecraftsBySubscriptionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armorbital.SpacecraftListResult{
			Value: []*armorbital.Spacecraft{
				{
					Name:     to.Ptr("AQUA"),
					Type:     to.Ptr("Microsoft.Orbital/spacecrafts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Orbital/spacecrafts/AQUA"),
					Location: to.Ptr("westus"),
					Properties: &armorbital.SpacecraftsProperties{
						AuthorizationStatus:         to.Ptr(armorbital.AuthorizationStatusAllowed),
						AuthorizationStatusExtended: to.Ptr("string"),
						Links: []*armorbital.SpacecraftLink{
							{
								BandwidthMHz:       to.Ptr[float32](0.036),
								CenterFrequencyMHz: to.Ptr[float32](2106.4063),
								Direction:          to.Ptr(armorbital.DirectionUplink),
								Polarization:       to.Ptr(armorbital.PolarizationRHCP),
							},
							{
								BandwidthMHz:       to.Ptr[float32](150),
								CenterFrequencyMHz: to.Ptr[float32](8125),
								Direction:          to.Ptr(armorbital.DirectionDownlink),
								Polarization:       to.Ptr(armorbital.PolarizationRHCP),
							}},
						NoradID:   to.Ptr("27424"),
						TitleLine: to.Ptr("AQUA"),
						TleLine1:  to.Ptr("1 27424U 02022A   20195.59202355  .00000039  00000-0  18634-4 0  9991"),
						TleLine2:  to.Ptr("2 27424  98.2098 135.8486 0000176  28.4050 144.5909 14.57108832967671"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SpacecraftListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SpacecraftListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/SpacecraftsBySubscriptionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSpacecrafts_List(t *testing.T) {
	// From example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/SpacecraftsByResourceGroupList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List of Spacecraft by Resource Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armorbital.NewSpacecraftsClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/SpacecraftsByResourceGroupList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armorbital.SpacecraftListResult{
			Value: []*armorbital.Spacecraft{
				{
					Name:     to.Ptr("AQUA"),
					Type:     to.Ptr("Microsoft.Orbital/spacecrafts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Orbital/spacecrafts/AQUA"),
					Location: to.Ptr("westus"),
					Properties: &armorbital.SpacecraftsProperties{
						AuthorizationStatus:         to.Ptr(armorbital.AuthorizationStatusAllowed),
						AuthorizationStatusExtended: to.Ptr("string"),
						Links: []*armorbital.SpacecraftLink{
							{
								BandwidthMHz:       to.Ptr[float32](0.036),
								CenterFrequencyMHz: to.Ptr[float32](2106.4063),
								Direction:          to.Ptr(armorbital.DirectionUplink),
								Polarization:       to.Ptr(armorbital.PolarizationRHCP),
							},
							{
								BandwidthMHz:       to.Ptr[float32](150),
								CenterFrequencyMHz: to.Ptr[float32](8125),
								Direction:          to.Ptr(armorbital.DirectionDownlink),
								Polarization:       to.Ptr(armorbital.PolarizationRHCP),
							}},
						NoradID:   to.Ptr("27424"),
						TitleLine: to.Ptr("AQUA"),
						TleLine1:  to.Ptr("1 27424U 02022A   20195.59202355  .00000039  00000-0  18634-4 0  9991"),
						TleLine2:  to.Ptr("2 27424  98.2098 135.8486 0000176  28.4050 144.5909 14.57108832967671"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SpacecraftListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SpacecraftListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/SpacecraftsByResourceGroupList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSpacecrafts_Get(t *testing.T) {
	// From example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/SpacecraftGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Spacecraft"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armorbital.NewSpacecraftsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"AQUA",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/SpacecraftGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armorbital.Spacecraft{
			Name:     to.Ptr("AQUA"),
			Type:     to.Ptr("Microsoft.Orbital/spacecrafts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Orbital/spacecrafts/AQUA"),
			Location: to.Ptr("westus"),
			Properties: &armorbital.SpacecraftsProperties{
				AuthorizationStatus:         to.Ptr(armorbital.AuthorizationStatusAllowed),
				AuthorizationStatusExtended: to.Ptr("string"),
				Links: []*armorbital.SpacecraftLink{
					{
						BandwidthMHz:       to.Ptr[float32](0.036),
						CenterFrequencyMHz: to.Ptr[float32](2106.4063),
						Direction:          to.Ptr(armorbital.DirectionUplink),
						Polarization:       to.Ptr(armorbital.PolarizationRHCP),
					},
					{
						BandwidthMHz:       to.Ptr[float32](150),
						CenterFrequencyMHz: to.Ptr[float32](8125),
						Direction:          to.Ptr(armorbital.DirectionDownlink),
						Polarization:       to.Ptr(armorbital.PolarizationRHCP),
					}},
				NoradID:   to.Ptr("27424"),
				TitleLine: to.Ptr("AQUA"),
				TleLine1:  to.Ptr("1 27424U 02022A   20195.59202355  .00000039  00000-0  18634-4 0  9991"),
				TleLine2:  to.Ptr("2 27424  98.2098 135.8486 0000176  28.4050 144.5909 14.57108832967671"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Spacecraft) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Spacecraft)
			t.Fatalf("Mock response is not equal to example response for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/SpacecraftGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSpacecrafts_CreateOrUpdate(t *testing.T) {
	// From example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/SpacecraftCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a spacecraft"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armorbital.NewSpacecraftsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"AQUA",
		armorbital.Spacecraft{
			Location: to.Ptr("westus"),
			Properties: &armorbital.SpacecraftsProperties{
				Links: []*armorbital.SpacecraftLink{
					{
						BandwidthMHz:       to.Ptr[float32](0.036),
						CenterFrequencyMHz: to.Ptr[float32](2106.4063),
						Direction:          to.Ptr(armorbital.DirectionUplink),
						Polarization:       to.Ptr(armorbital.PolarizationRHCP),
					},
					{
						BandwidthMHz:       to.Ptr[float32](150),
						CenterFrequencyMHz: to.Ptr[float32](8125),
						Direction:          to.Ptr(armorbital.DirectionDownlink),
						Polarization:       to.Ptr(armorbital.PolarizationRHCP),
					}},
				NoradID:   to.Ptr("27424"),
				TitleLine: to.Ptr("(AQUA)"),
				TleLine1:  to.Ptr("1 27424U 02022A   20195.59202355  .00000039  00000-0  18634-4 0  9991"),
				TleLine2:  to.Ptr("2 27424  98.2098 135.8486 0000176  28.4050 144.5909 14.57108832967671"),
			},
		},
		&armorbital.SpacecraftsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/SpacecraftCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/SpacecraftCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armorbital.Spacecraft{
			Name:     to.Ptr("AQUA"),
			Type:     to.Ptr("Microsoft.Orbital/spacecrafts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Orbital/spacecrafts/AQUA"),
			Location: to.Ptr("westus"),
			Properties: &armorbital.SpacecraftsProperties{
				AuthorizationStatus:         to.Ptr(armorbital.AuthorizationStatusAllowed),
				AuthorizationStatusExtended: to.Ptr("string"),
				Links: []*armorbital.SpacecraftLink{
					{
						BandwidthMHz:       to.Ptr[float32](0.036),
						CenterFrequencyMHz: to.Ptr[float32](2106.4063),
						Direction:          to.Ptr(armorbital.DirectionUplink),
						Polarization:       to.Ptr(armorbital.PolarizationRHCP),
					},
					{
						BandwidthMHz:       to.Ptr[float32](150),
						CenterFrequencyMHz: to.Ptr[float32](8125),
						Direction:          to.Ptr(armorbital.DirectionDownlink),
						Polarization:       to.Ptr(armorbital.PolarizationRHCP),
					}},
				NoradID:   to.Ptr("27424"),
				TitleLine: to.Ptr("AQUA"),
				TleLine1:  to.Ptr("1 27424U 02022A   20195.59202355  .00000039  00000-0  18634-4 0  9991"),
				TleLine2:  to.Ptr("2 27424  98.2098 135.8486 0000176  28.4050 144.5909 14.57108832967671"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Spacecraft) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Spacecraft)
			t.Fatalf("Mock response is not equal to example response for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/SpacecraftCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSpacecrafts_Delete(t *testing.T) {
	// From example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/SpacecraftDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Spacecraft"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armorbital.NewSpacecraftsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"AQUA",
		&armorbital.SpacecraftsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/SpacecraftDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/SpacecraftDelete.json: %v", err)
	}
}

func TestSpacecrafts_UpdateTags(t *testing.T) {
	// From example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/SpacecraftUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Spacecraft tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armorbital.NewSpacecraftsClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"AQUA",
		armorbital.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/SpacecraftUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armorbital.Spacecraft{
			Name:     to.Ptr("AQUA"),
			Type:     to.Ptr("Microsoft.Orbital/spacecrafts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Orbital/spacecrafts/AQUA"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armorbital.SpacecraftsProperties{
				AuthorizationStatus:         to.Ptr(armorbital.AuthorizationStatusAllowed),
				AuthorizationStatusExtended: to.Ptr("string"),
				Links: []*armorbital.SpacecraftLink{
					{
						BandwidthMHz:       to.Ptr[float32](0.036),
						CenterFrequencyMHz: to.Ptr[float32](2106.4063),
						Direction:          to.Ptr(armorbital.DirectionUplink),
						Polarization:       to.Ptr(armorbital.PolarizationRHCP),
					},
					{
						BandwidthMHz:       to.Ptr[float32](150),
						CenterFrequencyMHz: to.Ptr[float32](8125),
						Direction:          to.Ptr(armorbital.DirectionDownlink),
						Polarization:       to.Ptr(armorbital.PolarizationRHCP),
					}},
				NoradID:   to.Ptr("27424"),
				TitleLine: to.Ptr("AQUA"),
				TleLine1:  to.Ptr("1 27424U 02022A   20195.59202355  .00000039  00000-0  18634-4 0  9991"),
				TleLine2:  to.Ptr("2 27424  98.2098 135.8486 0000176  28.4050 144.5909 14.57108832967671"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Spacecraft) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Spacecraft)
			t.Fatalf("Mock response is not equal to example response for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/SpacecraftUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSpacecrafts_ListAvailableContacts(t *testing.T) {
	// From example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/AvailableContactsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List of Contact"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armorbital.NewSpacecraftsClient("subid", cred, &options)
	poller, err := client.BeginListAvailableContacts(ctx,
		"rgName",
		"AQUA",
		armorbital.ContactParameters{
			ContactProfile: &armorbital.ResourceReference{
				ID: to.Ptr("/subscriptions/subId/resourceGroups/rg/Microsoft.Orbital/contactProfiles/AQUA_DIRECTPLAYBACK_WITH_UPLINK"),
			},
			EndTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-17T23:49:40.00Z"); return t }()),
			GroundStationName: to.Ptr("westus_gs1"),
			StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T05:40:21.00Z"); return t }()),
		},
		&armorbital.SpacecraftsClientBeginListAvailableContactsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/AvailableContactsList.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/AvailableContactsList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armorbital.AvailableContactsListResult{
			Value: []*armorbital.AvailableContacts{
				{
					GroundStationName: to.Ptr("westus_gs1"),
					Properties: &armorbital.ContactInstanceProperties{
						EndAzimuthDegrees:       to.Ptr[float32](353.837),
						EndElevationDegrees:     to.Ptr[float32](10),
						MaximumElevationDegrees: to.Ptr[float32](70.94),
						RxEndTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:49:40.00Z"); return t }()),
						RxStartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:40:21.00Z"); return t }()),
						StartAzimuthDegrees:     to.Ptr[float32](148.237),
						StartElevationDegrees:   to.Ptr[float32](10),
						TxEndTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:49:40.00Z"); return t }()),
						TxStartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:40:21.00Z"); return t }()),
					},
					Spacecraft: &armorbital.ResourceReference{
						ID: to.Ptr("/subscriptions/subId/resourceGroups/rg/Microsoft.Orbital/spacecrafts/AQUA"),
					},
				},
				{
					GroundStationName: to.Ptr("westus_gs1"),
					Properties: &armorbital.ContactInstanceProperties{
						EndAzimuthDegrees:       to.Ptr[float32](194.36),
						EndElevationDegrees:     to.Ptr[float32](10),
						MaximumElevationDegrees: to.Ptr[float32](87.153),
						RxEndTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-17T10:23:30.00Z"); return t }()),
						RxStartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-17T10:13:55.00Z"); return t }()),
						StartAzimuthDegrees:     to.Ptr[float32](14.392),
						StartElevationDegrees:   to.Ptr[float32](10),
						TxEndTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-17T10:23:30.00Z"); return t }()),
						TxStartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-17T10:13:55.00Z"); return t }()),
					},
					Spacecraft: &armorbital.ResourceReference{
						ID: to.Ptr("/subscriptions/subId/resourceGroups/rg/Microsoft.Orbital/spacecrafts/AQUA"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AvailableContactsListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AvailableContactsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/AvailableContactsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContacts_List(t *testing.T) {
	// From example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactsBySpacecraftNameList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List of Contacts"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armorbital.NewContactsClient("subid", cred, &options)
	pager := client.List("rg1",
		"AQUA",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactsBySpacecraftNameList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armorbital.ContactListResult{
			Value: []*armorbital.Contact{
				{
					Name: to.Ptr("contact1"),
					Type: to.Ptr("Microsoft.Orbital/contacts"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Orbital/spacecrafts/AQUA/contacts/contact1"),
					Properties: &armorbital.ContactsProperties{
						ContactProfile: &armorbital.ResourceReference{
							ID: to.Ptr("/subscriptions/subId/resourceGroups/rg/Microsoft.Orbital/contactProfiles/AQUA_DIRECTPLAYBACK_WITH_UPLINK"),
						},
						EndAzimuthDegrees:       to.Ptr[float32](353.837),
						EndElevationDegrees:     to.Ptr[float32](10),
						ErrorMessage:            to.Ptr(""),
						GroundStationName:       to.Ptr("westus_gs1"),
						MaximumElevationDegrees: to.Ptr[float32](70.94),
						ReservationEndTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:55:00.00Z"); return t }()),
						ReservationStartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:35:00.00Z"); return t }()),
						RxEndTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:49:40.00Z"); return t }()),
						RxStartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:40:21.00Z"); return t }()),
						StartAzimuthDegrees:     to.Ptr[float32](148.237),
						StartElevationDegrees:   to.Ptr[float32](10),
						Status:                  to.Ptr(armorbital.StatusScheduled),
						TxEndTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:49:40.00Z"); return t }()),
						TxStartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:40:21.00Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("contact2"),
					Type: to.Ptr("Microsoft.Orbital/contacts"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Orbital/spacecrafts/AQUA/contacts/contact2"),
					Properties: &armorbital.ContactsProperties{
						ContactProfile: &armorbital.ResourceReference{
							ID: to.Ptr("/subscriptions/subId/resourceGroups/rg/Microsoft.Orbital/contactProfiles/AQUA_DIRECTPLAYBACK_WITH_UPLINK"),
						},
						EndAzimuthDegrees:       to.Ptr[float32](353.837),
						EndElevationDegrees:     to.Ptr[float32](10),
						ErrorMessage:            to.Ptr(""),
						GroundStationName:       to.Ptr("westus_gs1"),
						MaximumElevationDegrees: to.Ptr[float32](70.94),
						ReservationEndTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-23T20:55:00.00Z"); return t }()),
						ReservationStartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-23T20:35:00.00Z"); return t }()),
						RxEndTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-23T20:49:40.00Z"); return t }()),
						RxStartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-23T20:40:21.00Z"); return t }()),
						StartAzimuthDegrees:     to.Ptr[float32](148.237),
						StartElevationDegrees:   to.Ptr[float32](10),
						Status:                  to.Ptr(armorbital.StatusScheduled),
						TxEndTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-23T20:49:40.00Z"); return t }()),
						TxStartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-23T20:40:21.00Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ContactListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ContactListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactsBySpacecraftNameList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContacts_Get(t *testing.T) {
	// From example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Contact"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armorbital.NewContactsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"AQUA",
		"contact1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armorbital.Contact{
			Name: to.Ptr("contact1"),
			Type: to.Ptr("Microsoft.Orbital/contacts"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Orbital/spacecrafts/AQUA/contacts/contact1"),
			Properties: &armorbital.ContactsProperties{
				ContactProfile: &armorbital.ResourceReference{
					ID: to.Ptr("/subscriptions/subId/resourceGroups/rg/Microsoft.Orbital/contactProfiles/AQUA_DIRECTPLAYBACK_WITH_UPLINK"),
				},
				EndAzimuthDegrees:       to.Ptr[float32](353.837),
				EndElevationDegrees:     to.Ptr[float32](10),
				ErrorMessage:            to.Ptr(""),
				GroundStationName:       to.Ptr("westus_gs1"),
				MaximumElevationDegrees: to.Ptr[float32](70.94),
				ReservationEndTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:55:00.00Z"); return t }()),
				ReservationStartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:35:00.00Z"); return t }()),
				RxEndTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:49:40.00Z"); return t }()),
				RxStartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:40:21.00Z"); return t }()),
				StartAzimuthDegrees:     to.Ptr[float32](148.237),
				StartElevationDegrees:   to.Ptr[float32](10),
				Status:                  to.Ptr(armorbital.StatusScheduled),
				TxEndTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:49:40.00Z"); return t }()),
				TxStartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:40:21.00Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Contact) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Contact)
			t.Fatalf("Mock response is not equal to example response for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContacts_Create(t *testing.T) {
	// From example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a contact"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armorbital.NewContactsClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"rg1",
		"AQUA",
		"contact1",
		armorbital.Contact{
			Properties: &armorbital.ContactsProperties{
				ContactProfile: &armorbital.ResourceReference{
					ID: to.Ptr("/subscriptions/subId/resourceGroups/rg/Microsoft.Orbital/contactProfiles/AQUA_DIRECTPLAYBACK_WITH_UPLINK"),
				},
				GroundStationName:    to.Ptr("westus_gs1"),
				ReservationEndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:55:00.00Z"); return t }()),
				ReservationStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:35:00.00Z"); return t }()),
			},
		},
		&armorbital.ContactsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armorbital.Contact{
			Name: to.Ptr("contact1"),
			Type: to.Ptr("Microsoft.Orbital/contacts"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Orbital/spacecrafts/AQUA/contacts/contact1"),
			Properties: &armorbital.ContactsProperties{
				ContactProfile: &armorbital.ResourceReference{
					ID: to.Ptr("/subscriptions/subId/resourceGroups/rg/Microsoft.Orbital/contactProfiles/AQUA_DIRECTPLAYBACK_WITH_UPLINK"),
				},
				EndAzimuthDegrees:       to.Ptr[float32](353.837),
				EndElevationDegrees:     to.Ptr[float32](10),
				ErrorMessage:            to.Ptr(""),
				GroundStationName:       to.Ptr("westus_gs1"),
				MaximumElevationDegrees: to.Ptr[float32](70.94),
				ReservationEndTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:55:00.00Z"); return t }()),
				ReservationStartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:35:00.00Z"); return t }()),
				RxEndTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:49:40.00Z"); return t }()),
				RxStartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:40:21.00Z"); return t }()),
				StartAzimuthDegrees:     to.Ptr[float32](148.237),
				StartElevationDegrees:   to.Ptr[float32](10),
				Status:                  to.Ptr(armorbital.StatusScheduled),
				TxEndTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:49:40.00Z"); return t }()),
				TxStartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-16T20:40:21.00Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Contact) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Contact)
			t.Fatalf("Mock response is not equal to example response for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContacts_Delete(t *testing.T) {
	// From example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Contact"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armorbital.NewContactsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"AQUA",
		"contact1",
		&armorbital.ContactsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactDelete.json: %v", err)
	}
}

func TestContactProfiles_Get(t *testing.T) {
	// From example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactProfileGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a contact profile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armorbital.NewContactProfilesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"AQUA_DIRECTPLAYBACK_WITH_UPLINK",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactProfileGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armorbital.ContactProfile{
			Name:     to.Ptr("AQUA_DIRECTPLAYBACK_WITH_UPLINK"),
			Type:     to.Ptr("Microsoft.Orbital/contactProfiles"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Orbital/contactProfiles/AQUA_DIRECTPLAYBACK_WITH_UPLINK"),
			Location: to.Ptr("westus"),
			Properties: &armorbital.ContactProfilesProperties{
				AutoTrackingConfiguration: to.Ptr(armorbital.AutoTrackingConfigurationXBand),
				EventHubURI:               to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.EventHub/namespaces/orbitalppewestus2-ns/eventhubs/telemetry-hub/"),
				Links: []*armorbital.ContactProfileLink{
					{
						Channels: []*armorbital.ContactProfileLinkChannel{
							{
								BandwidthMHz:              to.Ptr[float32](0.036),
								CenterFrequencyMHz:        to.Ptr[float32](2106.4063),
								DecodingConfiguration:     to.Ptr("na"),
								DemodulationConfiguration: to.Ptr("na"),
								EncodingConfiguration:     to.Ptr("AQUA_CMD_CCSDS"),
								EndPoint: &armorbital.EndPoint{
									EndPointName: to.Ptr("AQUA_command"),
									IPAddress:    to.Ptr("10.0.1.0"),
									Port:         to.Ptr("4000"),
									Protocol:     to.Ptr(armorbital.ProtocolTCP),
								},
								ModulationConfiguration: to.Ptr("AQUA_UPLINK_BPSK"),
							}},
						Direction:           to.Ptr(armorbital.DirectionUplink),
						EirpdBW:             to.Ptr[float32](45),
						GainOverTemperature: to.Ptr[float32](0),
						Polarization:        to.Ptr(armorbital.PolarizationRHCP),
					},
					{
						Channels: []*armorbital.ContactProfileLinkChannel{
							{
								BandwidthMHz:              to.Ptr[float32](150),
								CenterFrequencyMHz:        to.Ptr[float32](8160),
								DecodingConfiguration:     to.Ptr("AQUA_DIRECTPLAYBACK_CCSDS"),
								DemodulationConfiguration: to.Ptr("AQUA_DOWNLINK_QPSK"),
								EncodingConfiguration:     to.Ptr("na"),
								EndPoint: &armorbital.EndPoint{
									EndPointName: to.Ptr("AQUA_directplayback"),
									IPAddress:    to.Ptr("10.0.2.0"),
									Port:         to.Ptr("4000"),
									Protocol:     to.Ptr(armorbital.ProtocolTCP),
								},
								ModulationConfiguration: to.Ptr("na"),
							}},
						Direction:           to.Ptr(armorbital.DirectionDownlink),
						EirpdBW:             to.Ptr[float32](0),
						GainOverTemperature: to.Ptr[float32](25),
						Polarization:        to.Ptr(armorbital.PolarizationRHCP),
					}},
				MinimumElevationDegrees:      to.Ptr[float32](10),
				MinimumViableContactDuration: to.Ptr("PT1M"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ContactProfile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContactProfile)
			t.Fatalf("Mock response is not equal to example response for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactProfileGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContactProfiles_CreateOrUpdate(t *testing.T) {
	// From example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactProfileCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a contact profile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armorbital.NewContactProfilesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"AQUA_DIRECTPLAYBACK_WITH_UPLINK",
		armorbital.ContactProfile{
			Location: to.Ptr("westus"),
			Properties: &armorbital.ContactProfilesProperties{
				AutoTrackingConfiguration: to.Ptr(armorbital.AutoTrackingConfigurationXBand),
				EventHubURI:               to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.EventHub/namespaces/orbitalppewestus2-ns/eventhubs/telemetry-hub/"),
				Links: []*armorbital.ContactProfileLink{
					{
						Channels: []*armorbital.ContactProfileLinkChannel{
							{
								BandwidthMHz:              to.Ptr[float32](0.036),
								CenterFrequencyMHz:        to.Ptr[float32](2106.4063),
								DecodingConfiguration:     to.Ptr("na"),
								DemodulationConfiguration: to.Ptr("na"),
								EncodingConfiguration:     to.Ptr("AQUA_CMD_CCSDS"),
								EndPoint: &armorbital.EndPoint{
									EndPointName: to.Ptr("AQUA_command"),
									IPAddress:    to.Ptr("10.0.1.0"),
									Port:         to.Ptr("4000"),
									Protocol:     to.Ptr(armorbital.ProtocolTCP),
								},
								ModulationConfiguration: to.Ptr("AQUA_UPLINK_BPSK"),
							}},
						Direction:           to.Ptr(armorbital.DirectionUplink),
						EirpdBW:             to.Ptr[float32](45),
						GainOverTemperature: to.Ptr[float32](0),
						Polarization:        to.Ptr(armorbital.PolarizationRHCP),
					},
					{
						Channels: []*armorbital.ContactProfileLinkChannel{
							{
								BandwidthMHz:              to.Ptr[float32](150),
								CenterFrequencyMHz:        to.Ptr[float32](8160),
								DecodingConfiguration:     to.Ptr("AQUA_DIRECTPLAYBACK_CCSDS"),
								DemodulationConfiguration: to.Ptr("AQUA_DOWNLINK_QPSK"),
								EncodingConfiguration:     to.Ptr("na"),
								EndPoint: &armorbital.EndPoint{
									EndPointName: to.Ptr("AQUA_directplayback"),
									IPAddress:    to.Ptr("10.0.2.0"),
									Port:         to.Ptr("4000"),
									Protocol:     to.Ptr(armorbital.ProtocolTCP),
								},
								ModulationConfiguration: to.Ptr("na"),
							}},
						Direction:           to.Ptr(armorbital.DirectionDownlink),
						EirpdBW:             to.Ptr[float32](0),
						GainOverTemperature: to.Ptr[float32](25),
						Polarization:        to.Ptr(armorbital.PolarizationRHCP),
					}},
				MinimumElevationDegrees:      to.Ptr[float32](10),
				MinimumViableContactDuration: to.Ptr("PT1M"),
			},
		},
		&armorbital.ContactProfilesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactProfileCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactProfileCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armorbital.ContactProfile{
			Name:     to.Ptr("AQUA_DIRECTPLAYBACK_WITH_UPLINK"),
			Type:     to.Ptr("Microsoft.Orbital/contactProfiles"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Orbital/contactProfiles/AQUA_DIRECTPLAYBACK_WITH_UPLINK"),
			Location: to.Ptr("westus"),
			Properties: &armorbital.ContactProfilesProperties{
				AutoTrackingConfiguration: to.Ptr(armorbital.AutoTrackingConfigurationXBand),
				EventHubURI:               to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.EventHub/namespaces/orbitalppewestus2-ns/eventhubs/telemetry-hub/"),
				Links: []*armorbital.ContactProfileLink{
					{
						Channels: []*armorbital.ContactProfileLinkChannel{
							{
								BandwidthMHz:              to.Ptr[float32](0.036),
								CenterFrequencyMHz:        to.Ptr[float32](2106.4063),
								DecodingConfiguration:     to.Ptr("na"),
								DemodulationConfiguration: to.Ptr("na"),
								EncodingConfiguration:     to.Ptr("AQUA_CMD_CCSDS"),
								EndPoint: &armorbital.EndPoint{
									EndPointName: to.Ptr("AQUA_command"),
									IPAddress:    to.Ptr("10.0.1.0"),
									Port:         to.Ptr("4000"),
									Protocol:     to.Ptr(armorbital.ProtocolTCP),
								},
								ModulationConfiguration: to.Ptr("AQUA_UPLINK_BPSK"),
							}},
						Direction:           to.Ptr(armorbital.DirectionUplink),
						EirpdBW:             to.Ptr[float32](45),
						GainOverTemperature: to.Ptr[float32](0),
						Polarization:        to.Ptr(armorbital.PolarizationRHCP),
					},
					{
						Channels: []*armorbital.ContactProfileLinkChannel{
							{
								BandwidthMHz:              to.Ptr[float32](150),
								CenterFrequencyMHz:        to.Ptr[float32](8160),
								DecodingConfiguration:     to.Ptr("AQUA_DIRECTPLAYBACK_CCSDS"),
								DemodulationConfiguration: to.Ptr("AQUA_DOWNLINK_QPSK"),
								EncodingConfiguration:     to.Ptr("na"),
								EndPoint: &armorbital.EndPoint{
									EndPointName: to.Ptr("AQUA_directplayback"),
									IPAddress:    to.Ptr("10.0.2.0"),
									Port:         to.Ptr("4000"),
									Protocol:     to.Ptr(armorbital.ProtocolTCP),
								},
								ModulationConfiguration: to.Ptr("na"),
							}},
						Direction:           to.Ptr(armorbital.DirectionDownlink),
						EirpdBW:             to.Ptr[float32](0),
						GainOverTemperature: to.Ptr[float32](25),
						Polarization:        to.Ptr(armorbital.PolarizationRHCP),
					}},
				MinimumElevationDegrees:      to.Ptr[float32](10),
				MinimumViableContactDuration: to.Ptr("PT1M"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ContactProfile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContactProfile)
			t.Fatalf("Mock response is not equal to example response for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactProfileCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContactProfiles_Delete(t *testing.T) {
	// From example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactProfileDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Contact Profile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armorbital.NewContactProfilesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"AQUA_DIRECTPLAYBACK_WITH_UPLINK",
		&armorbital.ContactProfilesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactProfileDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactProfileDelete.json: %v", err)
	}
}

func TestContactProfiles_UpdateTags(t *testing.T) {
	// From example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactProfileUpdateTag.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Contact Profile tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armorbital.NewContactProfilesClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"rg1",
		"AQUA_DIRECTPLAYBACK_WITH_UPLINK",
		armorbital.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactProfileUpdateTag.json: %v", err)
	}
	// Response check
	{
		exampleRes := armorbital.ContactProfile{
			Name:     to.Ptr("AQUA_DIRECTPLAYBACK_WITH_UPLINK"),
			Type:     to.Ptr("Microsoft.Orbital/contactProfiles"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Orbital/contactProfiles/AQUA_DIRECTPLAYBACK_WITH_UPLINK"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armorbital.ContactProfilesProperties{
				AutoTrackingConfiguration: to.Ptr(armorbital.AutoTrackingConfigurationXBand),
				EventHubURI:               to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.EventHub/namespaces/orbitalppewestus2-ns/eventhubs/telemetry-hub/"),
				Links: []*armorbital.ContactProfileLink{
					{
						Channels: []*armorbital.ContactProfileLinkChannel{
							{
								BandwidthMHz:              to.Ptr[float32](0.036),
								CenterFrequencyMHz:        to.Ptr[float32](2106.4063),
								DecodingConfiguration:     to.Ptr("na"),
								DemodulationConfiguration: to.Ptr("na"),
								EncodingConfiguration:     to.Ptr("AQUA_CMD_CCSDS"),
								EndPoint: &armorbital.EndPoint{
									EndPointName: to.Ptr("AQUA_command"),
									IPAddress:    to.Ptr("10.0.1.0"),
									Port:         to.Ptr("4000"),
									Protocol:     to.Ptr(armorbital.ProtocolTCP),
								},
								ModulationConfiguration: to.Ptr("AQUA_UPLINK_BPSK"),
							}},
						Direction:           to.Ptr(armorbital.DirectionUplink),
						EirpdBW:             to.Ptr[float32](45),
						GainOverTemperature: to.Ptr[float32](0),
						Polarization:        to.Ptr(armorbital.PolarizationRHCP),
					},
					{
						Channels: []*armorbital.ContactProfileLinkChannel{
							{
								BandwidthMHz:              to.Ptr[float32](150),
								CenterFrequencyMHz:        to.Ptr[float32](8160),
								DecodingConfiguration:     to.Ptr("AQUA_DIRECTPLAYBACK_CCSDS"),
								DemodulationConfiguration: to.Ptr("AQUA_DOWNLINK_QPSK"),
								EncodingConfiguration:     to.Ptr("na"),
								EndPoint: &armorbital.EndPoint{
									EndPointName: to.Ptr("AQUA_directplayback"),
									IPAddress:    to.Ptr("10.0.2.0"),
									Port:         to.Ptr("4000"),
									Protocol:     to.Ptr(armorbital.ProtocolTCP),
								},
								ModulationConfiguration: to.Ptr("na"),
							}},
						Direction:           to.Ptr(armorbital.DirectionDownlink),
						EirpdBW:             to.Ptr[float32](0),
						GainOverTemperature: to.Ptr[float32](25),
						Polarization:        to.Ptr(armorbital.PolarizationRHCP),
					}},
				MinimumElevationDegrees:      to.Ptr[float32](10),
				MinimumViableContactDuration: to.Ptr("PT1M"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ContactProfile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContactProfile)
			t.Fatalf("Mock response is not equal to example response for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactProfileUpdateTag.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContactProfiles_ListBySubscription(t *testing.T) {
	// From example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactProfilesBySubscriptionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List of Contact Profiles by Subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armorbital.NewContactProfilesClient("subid", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactProfilesBySubscriptionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armorbital.ContactProfileListResult{
			Value: []*armorbital.ContactProfile{
				{
					Name:     to.Ptr("AQUA_DIRECTPLAYBACK_WITH_UPLINK"),
					Type:     to.Ptr("Microsoft.Orbital/contactProfiles"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Orbital/contactProfiles/AQUA_DIRECTPLAYBACK_WITH_UPLINK"),
					Location: to.Ptr("westus"),
					Properties: &armorbital.ContactProfilesProperties{
						AutoTrackingConfiguration: to.Ptr(armorbital.AutoTrackingConfigurationXBand),
						EventHubURI:               to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.EventHub/namespaces/orbitalppewestus2-ns/eventhubs/telemetry-hub/"),
						Links: []*armorbital.ContactProfileLink{
							{
								Channels: []*armorbital.ContactProfileLinkChannel{
									{
										BandwidthMHz:              to.Ptr[float32](0.036),
										CenterFrequencyMHz:        to.Ptr[float32](2106.4063),
										DecodingConfiguration:     to.Ptr("na"),
										DemodulationConfiguration: to.Ptr("na"),
										EncodingConfiguration:     to.Ptr("AQUA_CMD_CCSDS"),
										EndPoint: &armorbital.EndPoint{
											EndPointName: to.Ptr("AQUA_command"),
											IPAddress:    to.Ptr("10.0.1.0"),
											Port:         to.Ptr("4000"),
											Protocol:     to.Ptr(armorbital.ProtocolTCP),
										},
										ModulationConfiguration: to.Ptr("AQUA_UPLINK_BPSK"),
									}},
								Direction:           to.Ptr(armorbital.DirectionUplink),
								EirpdBW:             to.Ptr[float32](45),
								GainOverTemperature: to.Ptr[float32](0),
								Polarization:        to.Ptr(armorbital.PolarizationRHCP),
							},
							{
								Channels: []*armorbital.ContactProfileLinkChannel{
									{
										BandwidthMHz:              to.Ptr[float32](150),
										CenterFrequencyMHz:        to.Ptr[float32](8160),
										DecodingConfiguration:     to.Ptr("AQUA_DIRECTPLAYBACK_CCSDS"),
										DemodulationConfiguration: to.Ptr("AQUA_DOWNLINK_QPSK"),
										EncodingConfiguration:     to.Ptr("na"),
										EndPoint: &armorbital.EndPoint{
											EndPointName: to.Ptr("AQUA_directplayback"),
											IPAddress:    to.Ptr("10.0.2.0"),
											Port:         to.Ptr("4000"),
											Protocol:     to.Ptr(armorbital.ProtocolTCP),
										},
										ModulationConfiguration: to.Ptr("na"),
									}},
								Direction:           to.Ptr(armorbital.DirectionDownlink),
								EirpdBW:             to.Ptr[float32](0),
								GainOverTemperature: to.Ptr[float32](25),
								Polarization:        to.Ptr(armorbital.PolarizationRHCP),
							}},
						MinimumElevationDegrees:      to.Ptr[float32](10),
						MinimumViableContactDuration: to.Ptr("PT1M"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ContactProfileListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ContactProfileListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactProfilesBySubscriptionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContactProfiles_List(t *testing.T) {
	// From example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactProfilesByResourceGroupList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List of Contact Profiles by Resource Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armorbital.NewContactProfilesClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactProfilesByResourceGroupList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armorbital.ContactProfileListResult{
			Value: []*armorbital.ContactProfile{
				{
					Name:     to.Ptr("AQUA_DIRECTPLAYBACK_WITH_UPLINK"),
					Type:     to.Ptr("Microsoft.Orbital/contactProfiles"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Orbital/contactProfiles/AQUA_DIRECTPLAYBACK_WITH_UPLINK"),
					Location: to.Ptr("westus"),
					Properties: &armorbital.ContactProfilesProperties{
						AutoTrackingConfiguration: to.Ptr(armorbital.AutoTrackingConfigurationXBand),
						EventHubURI:               to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.EventHub/namespaces/orbitalppewestus2-ns/eventhubs/telemetry-hub/"),
						Links: []*armorbital.ContactProfileLink{
							{
								Channels: []*armorbital.ContactProfileLinkChannel{
									{
										BandwidthMHz:              to.Ptr[float32](0.036),
										CenterFrequencyMHz:        to.Ptr[float32](2106.4063),
										DecodingConfiguration:     to.Ptr("na"),
										DemodulationConfiguration: to.Ptr("na"),
										EncodingConfiguration:     to.Ptr("AQUA_CMD_CCSDS"),
										EndPoint: &armorbital.EndPoint{
											EndPointName: to.Ptr("AQUA_command"),
											IPAddress:    to.Ptr("10.0.1.0"),
											Port:         to.Ptr("4000"),
											Protocol:     to.Ptr(armorbital.ProtocolTCP),
										},
										ModulationConfiguration: to.Ptr("AQUA_UPLINK_BPSK"),
									}},
								Direction:           to.Ptr(armorbital.DirectionUplink),
								EirpdBW:             to.Ptr[float32](45),
								GainOverTemperature: to.Ptr[float32](0),
								Polarization:        to.Ptr(armorbital.PolarizationRHCP),
							},
							{
								Channels: []*armorbital.ContactProfileLinkChannel{
									{
										BandwidthMHz:              to.Ptr[float32](150),
										CenterFrequencyMHz:        to.Ptr[float32](8160),
										DecodingConfiguration:     to.Ptr("AQUA_DIRECTPLAYBACK_CCSDS"),
										DemodulationConfiguration: to.Ptr("AQUA_DOWNLINK_QPSK"),
										EncodingConfiguration:     to.Ptr("na"),
										EndPoint: &armorbital.EndPoint{
											EndPointName: to.Ptr("AQUA_directplayback"),
											IPAddress:    to.Ptr("10.0.2.0"),
											Port:         to.Ptr("4000"),
											Protocol:     to.Ptr(armorbital.ProtocolTCP),
										},
										ModulationConfiguration: to.Ptr("na"),
									}},
								Direction:           to.Ptr(armorbital.DirectionDownlink),
								EirpdBW:             to.Ptr[float32](0),
								GainOverTemperature: to.Ptr[float32](25),
								Polarization:        to.Ptr(armorbital.PolarizationRHCP),
							}},
						MinimumElevationDegrees:      to.Ptr[float32](10),
						MinimumViableContactDuration: to.Ptr("PT1M"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ContactProfileListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ContactProfileListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/ContactProfilesByResourceGroupList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAvailableGroundStations_ListByCapability(t *testing.T) {
	// From example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/AvailableGroundStationsByCapabilityList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List of Ground Stations by Capability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armorbital.NewAvailableGroundStationsClient("subId", cred, &options)
	pager := client.ListByCapability(armorbital.CapabilityTypeEarthObservation,
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/AvailableGroundStationsByCapabilityList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armorbital.AvailableGroundStationListResult{
			Value: []*armorbital.AvailableGroundStation{
				{
					Name:     to.Ptr("westus_gs1"),
					Type:     to.Ptr("Microsoft.Orbital/availableGroundStations"),
					ID:       to.Ptr("/subscriptions/subId/providers/Microsoft.Orbital/availableGroundStations/westus_gs1"),
					Location: to.Ptr("westus"),
					Properties: &armorbital.AvailableGroundStationProperties{
						AltitudeMeters:   to.Ptr[float32](1500.83),
						City:             to.Ptr("redmond"),
						LatitudeDegrees:  to.Ptr[float32](-122.122),
						LongitudeDegrees: to.Ptr[float32](47.674),
						ProviderName:     to.Ptr("Microsoft"),
					},
				},
				{
					Name:     to.Ptr("westus_gs2"),
					Type:     to.Ptr("Microsoft.Orbital/availableGroundStations"),
					ID:       to.Ptr("/subscriptions/subId/providers/Microsoft.Orbital/availableGroundStations/westus_gs2"),
					Location: to.Ptr("westus"),
					Properties: &armorbital.AvailableGroundStationProperties{
						AltitudeMeters:   to.Ptr[float32](1500.83),
						City:             to.Ptr("redmond"),
						LatitudeDegrees:  to.Ptr[float32](-122.122),
						LongitudeDegrees: to.Ptr[float32](47.674),
						ProviderName:     to.Ptr("Microsoft"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AvailableGroundStationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AvailableGroundStationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/AvailableGroundStationsByCapabilityList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAvailableGroundStations_Get(t *testing.T) {
	// From example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/AvailableGroundStationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get GroundStation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armorbital.NewAvailableGroundStationsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"westus_gs1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/AvailableGroundStationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armorbital.AvailableGroundStation{
			Name:     to.Ptr("westus_gs1"),
			Type:     to.Ptr("Microsoft.Orbital/availableGroundStations"),
			ID:       to.Ptr("/subscriptions/subid/providers/Microsoft.Orbital/availableGroundStations/westus_gs1"),
			Location: to.Ptr("westus"),
			Properties: &armorbital.AvailableGroundStationProperties{
				AltitudeMeters:   to.Ptr[float32](1500.83),
				City:             to.Ptr("redmond"),
				LatitudeDegrees:  to.Ptr[float32](-122.122),
				LongitudeDegrees: to.Ptr[float32](47.674),
				ProviderName:     to.Ptr("Microsoft"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AvailableGroundStation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AvailableGroundStation)
			t.Fatalf("Mock response is not equal to example response for example specification/orbital/resource-manager/Microsoft.Orbital/preview/2021-04-04-preview/examples/AvailableGroundStationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
