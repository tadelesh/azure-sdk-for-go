//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armextendedlocation_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/extendedlocation/armextendedlocation"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestCustomLocations_ListOperations(t *testing.T) {
	// From example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsListOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Custom Locations operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armextendedlocation.NewCustomLocationsClient("<subscription-id>", cred, &options)
	pager := client.ListOperations(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsListOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armextendedlocation.CustomLocationOperationsList{
			Value: []*armextendedlocation.CustomLocationOperation{
				{
					Name: to.Ptr("Microsoft.ExtendedLocation/operations/read"),
					Display: &armextendedlocation.CustomLocationOperationValueDisplay{
						Description: to.Ptr("Gets list of Available Operations for Custom Locations"),
						Operation:   to.Ptr("List Available Operations for Custom Locations"),
						Provider:    to.Ptr("Microsoft.ExtendedLocation"),
						Resource:    to.Ptr("Operations"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ExtendedLocation/register/action"),
					Display: &armextendedlocation.CustomLocationOperationValueDisplay{
						Description: to.Ptr("Registers the subscription for Custom Location resource provider and enables the creation of Custom Location."),
						Operation:   to.Ptr("Registers the Custom Location Resource Provider"),
						Provider:    to.Ptr("Microsoft.ExtendedLocation"),
						Resource:    to.Ptr("Custom Locations Resource Provider"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ExtendedLocation/unregister/action"),
					Display: &armextendedlocation.CustomLocationOperationValueDisplay{
						Description: to.Ptr("UnRegisters the subscription for Custom Location resource provider and disables the creation of Custom Location."),
						Operation:   to.Ptr("UnRegisters the Custom Location Resource Provider"),
						Provider:    to.Ptr("Microsoft.ExtendedLocation"),
						Resource:    to.Ptr("Custom Locations Resource Provider"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ExtendedLocation/customLocations/read"),
					Display: &armextendedlocation.CustomLocationOperationValueDisplay{
						Description: to.Ptr("Gets an Custom Location resource"),
						Operation:   to.Ptr("Get Custom Location"),
						Provider:    to.Ptr("Microsoft.ExtendedLocation"),
						Resource:    to.Ptr("Custom Locations"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ExtendedLocation/customLocations/write"),
					Display: &armextendedlocation.CustomLocationOperationValueDisplay{
						Description: to.Ptr("Creates or Updates Custom Location resource"),
						Operation:   to.Ptr("Create or Update Custom Location"),
						Provider:    to.Ptr("Microsoft.ExtendedLocation"),
						Resource:    to.Ptr("Custom Locations"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ExtendedLocation/customLocations/deploy/action"),
					Display: &armextendedlocation.CustomLocationOperationValueDisplay{
						Description: to.Ptr("Deploy permissions to a Custom Location resource"),
						Operation:   to.Ptr("Deploy permissions to Custom Location"),
						Provider:    to.Ptr("Microsoft.ExtendedLocation"),
						Resource:    to.Ptr("Custom Locations"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ExtendedLocation/customLocations/delete"),
					Display: &armextendedlocation.CustomLocationOperationValueDisplay{
						Description: to.Ptr("Deletes Custom Location resource"),
						Operation:   to.Ptr("Delete Custom Location"),
						Provider:    to.Ptr("Microsoft.ExtendedLocation"),
						Resource:    to.Ptr("Custom Locations"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ExtendedLocation/customLocations/enabledresourcetypes/read"),
					Display: &armextendedlocation.CustomLocationOperationValueDisplay{
						Description: to.Ptr("Gets EnabledResourceTypes for a Custom Location resource"),
						Operation:   to.Ptr("Get EnabledResourceTypes for Custom Location"),
						Provider:    to.Ptr("Microsoft.ExtendedLocation"),
						Resource:    to.Ptr("Custom Locations"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ExtendedLocation/locations/operationsstatus/read"),
					Display: &armextendedlocation.CustomLocationOperationValueDisplay{
						Description: to.Ptr("Get result of Custom Location operation"),
						Operation:   to.Ptr("Get status of Custom Location operation"),
						Provider:    to.Ptr("Microsoft.ExtendedLocation"),
						Resource:    to.Ptr("Custom Location Operation Status"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.ExtendedLocation/locations/operationresults/read"),
					Display: &armextendedlocation.CustomLocationOperationValueDisplay{
						Description: to.Ptr("Get result of Custom Location operation"),
						Operation:   to.Ptr("Get the status of Custom Location operation"),
						Provider:    to.Ptr("Microsoft.ExtendedLocation"),
						Resource:    to.Ptr("Custom Location Operation Result"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CustomLocationOperationsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CustomLocationOperationsList)
			t.Fatalf("Mock response is not equal to example response for example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsListOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomLocations_ListBySubscription(t *testing.T) {
	// From example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Custom Locations by subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armextendedlocation.NewCustomLocationsClient("11111111-2222-3333-4444-555555555555", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armextendedlocation.CustomLocationListResult{
			Value: []*armextendedlocation.CustomLocation{
				{
					Name:     to.Ptr("customLocation01"),
					Type:     to.Ptr("Microsoft.ExtendedLocation/customLocations"),
					ID:       to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ExtendedLocation/"),
					Location: to.Ptr("West US"),
					Identity: &armextendedlocation.Identity{
						Type:        to.Ptr(armextendedlocation.ResourceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("11111111-1111-1111-1111-111111111111"),
						TenantID:    to.Ptr("111111-1111-1111-1111-111111111111"),
					},
					Properties: &armextendedlocation.CustomLocationProperties{
						Authentication: &armextendedlocation.CustomLocationPropertiesAuthentication{
							Type: to.Ptr("KubeConfig"),
						},
						ClusterExtensionIDs: []*string{
							to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ContainerService/managedClusters/cluster01/Microsoft.KubernetesConfiguration/clusterExtensions/fooExtension")},
						DisplayName:       to.Ptr("customLocationLocation01"),
						HostResourceID:    to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ContainerService/managedClusters/cluster01"),
						Namespace:         to.Ptr("namespace01"),
						ProvisioningState: to.Ptr("Succeeded"),
					},
					SystemData: &armextendedlocation.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T18:53:29.0928001Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armextendedlocation.CreatedByTypeApplication),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T18:53:29.0928001Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armextendedlocation.CreatedByTypeApplication),
					},
				},
				{
					Name:     to.Ptr("customLocation02"),
					Type:     to.Ptr("Microsoft.ExtendedLocation/customLocations"),
					ID:       to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ExtendedLocation/"),
					Location: to.Ptr("West US"),
					Identity: &armextendedlocation.Identity{
						Type:        to.Ptr(armextendedlocation.ResourceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("11111111-1111-1111-1111-111111111111"),
						TenantID:    to.Ptr("111111-1111-1111-1111-111111111111"),
					},
					Properties: &armextendedlocation.CustomLocationProperties{
						Authentication: &armextendedlocation.CustomLocationPropertiesAuthentication{
							Type: to.Ptr("KubeConfig"),
						},
						ClusterExtensionIDs: []*string{
							to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ContainerService/managedClusters/cluster02/Microsoft.KubernetesConfiguration/clusterExtensions/fooExtension")},
						DisplayName:       to.Ptr("customLocationLocation02"),
						HostResourceID:    to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ContainerService/managedClusters/cluster02"),
						Namespace:         to.Ptr("namespace02"),
						ProvisioningState: to.Ptr("Succeeded"),
					},
					SystemData: &armextendedlocation.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-24T18:53:29.0928001Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armextendedlocation.CreatedByTypeApplication),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-24T18:53:29.0928001Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armextendedlocation.CreatedByTypeApplication),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CustomLocationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CustomLocationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomLocations_ListByResourceGroup(t *testing.T) {
	// From example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Custom Locations by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armextendedlocation.NewCustomLocationsClient("11111111-2222-3333-4444-555555555555", cred, &options)
	pager := client.ListByResourceGroup("testresourcegroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armextendedlocation.CustomLocationListResult{
			Value: []*armextendedlocation.CustomLocation{
				{
					Name:     to.Ptr("customLocation01"),
					Type:     to.Ptr("Microsoft.ExtendedLocation/customLocations"),
					ID:       to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ExtendedLocation/"),
					Location: to.Ptr("West US"),
					Identity: &armextendedlocation.Identity{
						Type:        to.Ptr(armextendedlocation.ResourceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("11111111-1111-1111-1111-111111111111"),
						TenantID:    to.Ptr("111111-1111-1111-1111-111111111111"),
					},
					Properties: &armextendedlocation.CustomLocationProperties{
						Authentication: &armextendedlocation.CustomLocationPropertiesAuthentication{
							Type: to.Ptr("KubeConfig"),
						},
						ClusterExtensionIDs: []*string{
							to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ContainerService/managedClusters/cluster01/Microsoft.KubernetesConfiguration/clusterExtensions/fooExtension")},
						DisplayName:       to.Ptr("customLocationLocation01"),
						HostResourceID:    to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ContainerService/managedClusters/cluster01"),
						Namespace:         to.Ptr("namespace01"),
						ProvisioningState: to.Ptr("Succeeded"),
					},
					SystemData: &armextendedlocation.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T18:53:29.0928001Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armextendedlocation.CreatedByTypeApplication),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T18:53:29.0928001Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armextendedlocation.CreatedByTypeApplication),
					},
				},
				{
					Name:     to.Ptr("customLocation02"),
					Type:     to.Ptr("Microsoft.ExtendedLocation/customLocations"),
					ID:       to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ExtendedLocation/"),
					Location: to.Ptr("West US"),
					Identity: &armextendedlocation.Identity{
						Type:        to.Ptr(armextendedlocation.ResourceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("11111111-1111-1111-1111-111111111111"),
						TenantID:    to.Ptr("111111-1111-1111-1111-111111111111"),
					},
					Properties: &armextendedlocation.CustomLocationProperties{
						Authentication: &armextendedlocation.CustomLocationPropertiesAuthentication{
							Type: to.Ptr("KubeConfig"),
						},
						ClusterExtensionIDs: []*string{
							to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ContainerService/managedClusters/cluster02/Microsoft.KubernetesConfiguration/clusterExtensions/fooExtension")},
						DisplayName:       to.Ptr("customLocationLocation02"),
						HostResourceID:    to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ContainerService/managedClusters/cluster02"),
						Namespace:         to.Ptr("namespace02"),
						ProvisioningState: to.Ptr("Succeeded"),
					},
					SystemData: &armextendedlocation.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-24T18:53:29.0928001Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armextendedlocation.CreatedByTypeApplication),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-24T18:53:29.0928001Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armextendedlocation.CreatedByTypeApplication),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CustomLocationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CustomLocationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomLocations_Get(t *testing.T) {
	// From example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Custom Location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armextendedlocation.NewCustomLocationsClient("11111111-2222-3333-4444-555555555555", cred, &options)
	res, err := client.Get(ctx,
		"testresourcegroup",
		"customLocation01",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armextendedlocation.CustomLocation{
			Name:     to.Ptr("customLocation01"),
			Type:     to.Ptr("Microsoft.ExtendedLocation/customLocations"),
			ID:       to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/customLocation01"),
			Location: to.Ptr("West US"),
			Identity: &armextendedlocation.Identity{
				Type:        to.Ptr(armextendedlocation.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("11111111-1111-1111-1111-111111111111"),
				TenantID:    to.Ptr("111111-1111-1111-1111-111111111111"),
			},
			Properties: &armextendedlocation.CustomLocationProperties{
				Authentication: &armextendedlocation.CustomLocationPropertiesAuthentication{
					Type: to.Ptr("KubeConfig"),
				},
				ClusterExtensionIDs: []*string{
					to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ContainerService/managedClusters/cluster01/Microsoft.KubernetesConfiguration/clusterExtensions/fooExtension")},
				DisplayName:       to.Ptr("customLocationLocation01"),
				HostResourceID:    to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ContainerService/managedClusters/cluster01"),
				Namespace:         to.Ptr("namespace01"),
				ProvisioningState: to.Ptr("Succeeded"),
			},
			SystemData: &armextendedlocation.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-24T18:53:29.0928001Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armextendedlocation.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-24T18:53:29.0928001Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armextendedlocation.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomLocation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomLocation)
			t.Fatalf("Mock response is not equal to example response for example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomLocations_CreateOrUpdate(t *testing.T) {
	// From example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsCreate_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update Custom Location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armextendedlocation.NewCustomLocationsClient("11111111-2222-3333-4444-555555555555", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testresourcegroup",
		"customLocation01",
		armextendedlocation.CustomLocation{
			Location: to.Ptr("West US"),
			Identity: &armextendedlocation.Identity{
				Type: to.Ptr(armextendedlocation.ResourceIdentityTypeSystemAssigned),
			},
			Properties: &armextendedlocation.CustomLocationProperties{
				Authentication: &armextendedlocation.CustomLocationPropertiesAuthentication{
					Type:  to.Ptr("KubeConfig"),
					Value: to.Ptr("<base64 KubeConfig>"),
				},
				ClusterExtensionIDs: []*string{
					to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kubernetes/connectedCluster/someCluster/Microsoft.KubernetesConfiguration/clusterExtensions/fooExtension")},
				DisplayName:    to.Ptr("customLocationLocation01"),
				HostResourceID: to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ContainerService/managedClusters/cluster01"),
				Namespace:      to.Ptr("namespace01"),
			},
		},
		&armextendedlocation.CustomLocationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsCreate_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsCreate_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armextendedlocation.CustomLocation{
			Name:     to.Ptr("customLocation01"),
			Type:     to.Ptr("Microsoft.ExtendedLocation/customLocations"),
			ID:       to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/customLocation01"),
			Location: to.Ptr("West US"),
			Identity: &armextendedlocation.Identity{
				Type:        to.Ptr(armextendedlocation.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("11111111-1111-1111-1111-111111111111"),
				TenantID:    to.Ptr("111111-1111-1111-1111-111111111111"),
			},
			Properties: &armextendedlocation.CustomLocationProperties{
				Authentication: &armextendedlocation.CustomLocationPropertiesAuthentication{
					Type: to.Ptr("KubeConfig"),
				},
				ClusterExtensionIDs: []*string{
					to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ContainerService/managedClusters/cluster01/Microsoft.KubernetesConfiguration/clusterExtensions/fooExtension")},
				DisplayName:       to.Ptr("customLocationLocation01"),
				HostResourceID:    to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ContainerService/managedClusters/cluster01"),
				Namespace:         to.Ptr("namespace01"),
				ProvisioningState: to.Ptr("Succeeded"),
			},
			SystemData: &armextendedlocation.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T18:53:29.0928001Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armextendedlocation.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T18:53:29.0928001Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armextendedlocation.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomLocation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomLocation)
			t.Fatalf("Mock response is not equal to example response for example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsCreate_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomLocations_Delete(t *testing.T) {
	// From example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Custom Location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armextendedlocation.NewCustomLocationsClient("11111111-2222-3333-4444-555555555555", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testresourcegroup",
		"customLocation01",
		&armextendedlocation.CustomLocationsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsDelete.json: %v", err)
	}
}

func TestCustomLocations_Update(t *testing.T) {
	// From example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Custom Location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armextendedlocation.NewCustomLocationsClient("11111111-2222-3333-4444-555555555555", cred, &options)
	res, err := client.Update(ctx,
		"testresourcegroup",
		"customLocation01",
		armextendedlocation.PatchableCustomLocations{
			Identity: &armextendedlocation.Identity{
				Type: to.Ptr(armextendedlocation.ResourceIdentityTypeSystemAssigned),
			},
			Properties: &armextendedlocation.CustomLocationProperties{
				ClusterExtensionIDs: []*string{
					to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ContainerService/managedClusters/cluster01/Microsoft.KubernetesConfiguration/clusterExtensions/fooExtension"),
					to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ContainerService/managedClusters/cluster01/Microsoft.KubernetesConfiguration/clusterExtensions/barExtension")},
			},
			Tags: map[string]*string{
				"archv3": to.Ptr(""),
				"tier":   to.Ptr("testing"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armextendedlocation.CustomLocation{
			Name:     to.Ptr("customLocation01"),
			Type:     to.Ptr("Microsoft.ExtendedLocation/customLocations"),
			ID:       to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/customLocation01"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"archv3": to.Ptr(""),
				"tier":   to.Ptr("testing"),
			},
			Identity: &armextendedlocation.Identity{
				Type:        to.Ptr(armextendedlocation.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("11111111-1111-1111-1111-111111111111"),
				TenantID:    to.Ptr("111111-1111-1111-1111-111111111111"),
			},
			Properties: &armextendedlocation.CustomLocationProperties{
				Authentication: &armextendedlocation.CustomLocationPropertiesAuthentication{
					Type: to.Ptr("KubeConfig"),
				},
				ClusterExtensionIDs: []*string{
					to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ContainerService/managedClusters/cluster01/Microsoft.KubernetesConfiguration/clusterExtensions/fooExtension"),
					to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ContainerService/managedClusters/cluster01/Microsoft.KubernetesConfiguration/clusterExtensions/barExtension")},
				DisplayName:       to.Ptr("customLocationLocation01"),
				HostResourceID:    to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup/providers/Microsoft.ContainerService/managedClusters/cluster01"),
				Namespace:         to.Ptr("namespace01"),
				ProvisioningState: to.Ptr("Succeeded"),
			},
			SystemData: &armextendedlocation.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-24T18:53:29.0928001Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armextendedlocation.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-24T18:53:29.0928001Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armextendedlocation.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomLocation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomLocation)
			t.Fatalf("Mock response is not equal to example response for example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomLocations_ListEnabledResourceTypes(t *testing.T) {
	// From example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsListEnabledResourceTypes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Custom Location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armextendedlocation.NewCustomLocationsClient("11111111-2222-3333-4444-555555555555", cred, &options)
	pager := client.ListEnabledResourceTypes("testresourcegroup",
		"customLocation01",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsListEnabledResourceTypes.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armextendedlocation.EnabledResourceTypesListResult{
			Value: []*armextendedlocation.EnabledResourceType{
				{
					Name: to.Ptr("d016ecf26dae90594806aca3c1a6326c668357037f68103587edf2e657824737"),
					Type: to.Ptr("Microsoft.ExtendedLocation/customLocations/enabledResourceTypes"),
					ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/customLocation01/enabledResourceTypes/d016ecf26dae90594806aca3c1a6326c668357037f68103587edf2e657824737"),
					Properties: &armextendedlocation.EnabledResourceTypeProperties{
						ClusterExtensionID: to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/cldfe2econnectedcluster/providers/Microsoft.KubernetesConfiguration/extensions/vmware-extension"),
						ExtensionType:      to.Ptr("arc-vmware"),
						TypesMetadata: []*armextendedlocation.EnabledResourceTypePropertiesTypesMetadataItem{
							{
								APIVersion:                to.Ptr("2020-01-01-preview"),
								ResourceProviderNamespace: to.Ptr("Microsoft.VMware"),
								ResourceType:              to.Ptr("virtualMachines"),
							},
							{
								APIVersion:                to.Ptr("2020-01-22-preview"),
								ResourceProviderNamespace: to.Ptr("Microsoft.VMware"),
								ResourceType:              to.Ptr("virtualmachines"),
							}},
					},
					SystemData: &armextendedlocation.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T18:53:29.0928001Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armextendedlocation.CreatedByTypeApplication),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T18:53:29.0928001Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armextendedlocation.CreatedByTypeApplication),
					},
				},
				{
					Name: to.Ptr("266e9d31e5be6be1e919574e25780d5783586d502f0b2cc422e0a228a34e00a6"),
					Type: to.Ptr("Microsoft.ExtendedLocation/customLocations/enabledResourceTypes"),
					ID:   to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/customLocation01/enabledResourceTypes/266e9d31e5be6be1e919574e25780d5783586d502f0b2cc422e0a228a34e00a6"),
					Properties: &armextendedlocation.EnabledResourceTypeProperties{
						ClusterExtensionID: to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/cldfe2econnectedcluster/providers/Microsoft.KubernetesConfiguration/extensions/cassandra-extension"),
						ExtensionType:      to.Ptr("cassandradatacentersoperator"),
						TypesMetadata: []*armextendedlocation.EnabledResourceTypePropertiesTypesMetadataItem{
							{
								APIVersion:                to.Ptr("2020-01-01-preview"),
								ResourceProviderNamespace: to.Ptr("Microsoft.Cassandra"),
								ResourceType:              to.Ptr("cassandraDataCenters"),
							},
							{
								APIVersion:                to.Ptr("2020-01-22-preview"),
								ResourceProviderNamespace: to.Ptr("Microsoft.Cassandra"),
								ResourceType:              to.Ptr("cassandrabackups"),
							}},
					},
					SystemData: &armextendedlocation.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-24T18:53:29.0928001Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armextendedlocation.CreatedByTypeApplication),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-24T18:53:29.0928001Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armextendedlocation.CreatedByTypeApplication),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EnabledResourceTypesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EnabledResourceTypesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/stable/2021-08-15/examples/CustomLocationsListEnabledResourceTypes.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
