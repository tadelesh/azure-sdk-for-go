//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armextendedlocation

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// CustomLocationsClientListByResourceGroupPager provides operations for iterating over paged responses.
type CustomLocationsClientListByResourceGroupPager struct {
	client    *CustomLocationsClient
	current   CustomLocationsClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CustomLocationsClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *CustomLocationsClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CustomLocationListResult.NextLink == nil || len(*p.current.CustomLocationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *CustomLocationsClientListByResourceGroupPager) NextPage(ctx context.Context) (CustomLocationsClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return CustomLocationsClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return CustomLocationsClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return CustomLocationsClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return CustomLocationsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return CustomLocationsClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// CustomLocationsClientListBySubscriptionPager provides operations for iterating over paged responses.
type CustomLocationsClientListBySubscriptionPager struct {
	client    *CustomLocationsClient
	current   CustomLocationsClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CustomLocationsClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *CustomLocationsClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CustomLocationListResult.NextLink == nil || len(*p.current.CustomLocationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *CustomLocationsClientListBySubscriptionPager) NextPage(ctx context.Context) (CustomLocationsClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return CustomLocationsClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return CustomLocationsClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return CustomLocationsClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return CustomLocationsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return CustomLocationsClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// CustomLocationsClientListEnabledResourceTypesPager provides operations for iterating over paged responses.
type CustomLocationsClientListEnabledResourceTypesPager struct {
	client    *CustomLocationsClient
	current   CustomLocationsClientListEnabledResourceTypesResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CustomLocationsClientListEnabledResourceTypesResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *CustomLocationsClientListEnabledResourceTypesPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EnabledResourceTypesListResult.NextLink == nil || len(*p.current.EnabledResourceTypesListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *CustomLocationsClientListEnabledResourceTypesPager) NextPage(ctx context.Context) (CustomLocationsClientListEnabledResourceTypesResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return CustomLocationsClientListEnabledResourceTypesResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return CustomLocationsClientListEnabledResourceTypesResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return CustomLocationsClientListEnabledResourceTypesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return CustomLocationsClientListEnabledResourceTypesResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listEnabledResourceTypesHandleResponse(resp)
	if err != nil {
		return CustomLocationsClientListEnabledResourceTypesResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// CustomLocationsClientListOperationsPager provides operations for iterating over paged responses.
type CustomLocationsClientListOperationsPager struct {
	client    *CustomLocationsClient
	current   CustomLocationsClientListOperationsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CustomLocationsClientListOperationsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *CustomLocationsClientListOperationsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CustomLocationOperationsList.NextLink == nil || len(*p.current.CustomLocationOperationsList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *CustomLocationsClientListOperationsPager) NextPage(ctx context.Context) (CustomLocationsClientListOperationsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return CustomLocationsClientListOperationsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return CustomLocationsClientListOperationsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return CustomLocationsClientListOperationsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return CustomLocationsClientListOperationsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listOperationsHandleResponse(resp)
	if err != nil {
		return CustomLocationsClientListOperationsResponse{}, err
	}
	p.current = result
	return p.current, nil
}
