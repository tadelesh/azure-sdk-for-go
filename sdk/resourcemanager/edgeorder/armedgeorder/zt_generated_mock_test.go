//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armedgeorder_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/edgeorder/armedgeorder"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestEdgeOrderManagementClient_ListOperations(t *testing.T) {
	// From example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListOperations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorder.NewManagementClient("<subscription-id>", cred, &options)
	pager := client.ListOperations(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armedgeorder.OperationListResult{
			Value: []*armedgeorder.Operation{
				{
					Name: to.Ptr("Microsoft.EdgeOrder/addresses/read"),
					Display: &armedgeorder.OperationDisplay{
						Description: to.Ptr("List or get the Addresses"),
						Operation:   to.Ptr("List or Get Addresses"),
						Provider:    to.Ptr("Edge Ordering"),
						Resource:    to.Ptr("Addresses"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr(armedgeorder.OriginUser),
				},
				{
					Name: to.Ptr("Microsoft.EdgeOrder/addresses/delete"),
					Display: &armedgeorder.OperationDisplay{
						Description: to.Ptr("Delete the Addresses"),
						Operation:   to.Ptr("Delete Addresses"),
						Provider:    to.Ptr("Edge Ordering"),
						Resource:    to.Ptr("Addresses"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr(armedgeorder.OriginUser),
				},
				{
					Name: to.Ptr("Microsoft.EdgeOrder/addresses/write"),
					Display: &armedgeorder.OperationDisplay{
						Description: to.Ptr("Create or update the Addresses"),
						Operation:   to.Ptr("Create or Update Addresses"),
						Provider:    to.Ptr("Edge Ordering"),
						Resource:    to.Ptr("Addresses"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr(armedgeorder.OriginUser),
				},
				{
					Name: to.Ptr("Microsoft.EdgeOrder/locations/operationResults/read"),
					Display: &armedgeorder.OperationDisplay{
						Description: to.Ptr("List or get the Operation Results"),
						Operation:   to.Ptr("List or Get Operation Results"),
						Provider:    to.Ptr("Edge Ordering"),
						Resource:    to.Ptr("Operation Results"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr(armedgeorder.OriginUser),
				},
				{
					Name: to.Ptr("Microsoft.EdgeOrder/operations/read"),
					Display: &armedgeorder.OperationDisplay{
						Description: to.Ptr("List or get the Operations"),
						Operation:   to.Ptr("List or Get Operations"),
						Provider:    to.Ptr("Edge Ordering"),
						Resource:    to.Ptr("Operations"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr(armedgeorder.OriginUser),
				},
				{
					Name: to.Ptr("Microsoft.EdgeOrder/locations/orders/read"),
					Display: &armedgeorder.OperationDisplay{
						Description: to.Ptr("List or get the Order"),
						Operation:   to.Ptr("List or Get Order"),
						Provider:    to.Ptr("Edge Ordering"),
						Resource:    to.Ptr("Order"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr(armedgeorder.OriginUser),
				},
				{
					Name: to.Ptr("Microsoft.EdgeOrder/orders/read"),
					Display: &armedgeorder.OperationDisplay{
						Description: to.Ptr("List or get the Order"),
						Operation:   to.Ptr("List or Get Order"),
						Provider:    to.Ptr("Edge Ordering"),
						Resource:    to.Ptr("Order"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr(armedgeorder.OriginUser),
				},
				{
					Name: to.Ptr("Microsoft.EdgeOrder/orderItems/cancel/action"),
					Display: &armedgeorder.OperationDisplay{
						Description: to.Ptr("Cancels an OrderItem in progress."),
						Operation:   to.Ptr("Cancel OrderItem"),
						Provider:    to.Ptr("Edge Ordering"),
						Resource:    to.Ptr("OrderItem"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr(armedgeorder.OriginUser),
				},
				{
					Name: to.Ptr("Microsoft.EdgeOrder/orderItems/return/action"),
					Display: &armedgeorder.OperationDisplay{
						Description: to.Ptr("Return an OrderItem."),
						Operation:   to.Ptr("Return OrderItem"),
						Provider:    to.Ptr("Edge Ordering"),
						Resource:    to.Ptr("OrderItem"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr(armedgeorder.OriginUser),
				},
				{
					Name: to.Ptr("Microsoft.EdgeOrder/orderItems/read"),
					Display: &armedgeorder.OperationDisplay{
						Description: to.Ptr("List or get the OrderItem"),
						Operation:   to.Ptr("List or Get OrderItem"),
						Provider:    to.Ptr("Edge Ordering"),
						Resource:    to.Ptr("OrderItem"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr(armedgeorder.OriginUser),
				},
				{
					Name: to.Ptr("Microsoft.EdgeOrder/orderItems/delete"),
					Display: &armedgeorder.OperationDisplay{
						Description: to.Ptr("Delete the OrderItem"),
						Operation:   to.Ptr("Delete OrderItem"),
						Provider:    to.Ptr("Edge Ordering"),
						Resource:    to.Ptr("OrderItem"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr(armedgeorder.OriginUser),
				},
				{
					Name: to.Ptr("Microsoft.EdgeOrder/orderItems/write"),
					Display: &armedgeorder.OperationDisplay{
						Description: to.Ptr("Create or update the OrderItem"),
						Operation:   to.Ptr("Create or Update OrderItem"),
						Provider:    to.Ptr("Edge Ordering"),
						Resource:    to.Ptr("OrderItem"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr(armedgeorder.OriginUser),
				},
				{
					Name: to.Ptr("Microsoft.EdgeOrder/productFamiliesMetadata/action"),
					Display: &armedgeorder.OperationDisplay{
						Description: to.Ptr("This method lists or gets the product families metadata."),
						Operation:   to.Ptr("List or Get product families metadata"),
						Provider:    to.Ptr("Edge Ordering"),
						Resource:    to.Ptr("ArmApiRes_Microsoft.EdgeOrder"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr(armedgeorder.OriginUser),
				},
				{
					Name: to.Ptr("Microsoft.EdgeOrder/listProductFamilies/read"),
					Display: &armedgeorder.OperationDisplay{
						Description: to.Ptr("This method returns list of product families."),
						Operation:   to.Ptr("List Product Families"),
						Provider:    to.Ptr("Edge Ordering"),
						Resource:    to.Ptr("ArmApiRes_Microsoft.EdgeOrder"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr(armedgeorder.OriginUser),
				},
				{
					Name: to.Ptr("Microsoft.EdgeOrder/listConfigurations/action"),
					Display: &armedgeorder.OperationDisplay{
						Description: to.Ptr("This method returns list of product configurations."),
						Operation:   to.Ptr("List Product Configurations"),
						Provider:    to.Ptr("Edge Ordering"),
						Resource:    to.Ptr("ArmApiRes_Microsoft.EdgeOrder"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr(armedgeorder.OriginUser),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEdgeOrderManagementClient_ListAddressesAtSubscriptionLevel(t *testing.T) {
	// From example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListAddressesAtSubscriptionLevel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListAddressesAtSubscriptionLevel"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorder.NewManagementClient("fa68082f-8ff7-4a25-95c7-ce9da541242f", cred, &options)
	pager := client.ListAddressesAtSubscriptionLevel(&armedgeorder.ManagementClientListAddressesAtSubscriptionLevelOptions{Filter: nil,
		SkipToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListAddressesAtSubscriptionLevel.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armedgeorder.AddressResourceList{
			Value: []*armedgeorder.AddressResource{
				{
					Name:     to.Ptr("TestAddressName0"),
					Type:     to.Ptr("Microsoft.EdgeOrder/addresses"),
					ID:       to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/addresses/TestAddressName0"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armedgeorder.AddressProperties{
						ContactDetails: &armedgeorder.ContactDetails{
							ContactName: to.Ptr("Petr Cech"),
							EmailList: []*string{
								to.Ptr("ssemmail@microsoft.com")},
							Phone:          to.Ptr("1234567890"),
							PhoneExtension: to.Ptr(""),
						},
						ShippingAddress: &armedgeorder.ShippingAddress{
							AddressType:     to.Ptr(armedgeorder.AddressTypeNone),
							City:            to.Ptr("San Francisco"),
							CompanyName:     to.Ptr("Microsoft"),
							Country:         to.Ptr("US"),
							PostalCode:      to.Ptr("94107"),
							StateOrProvince: to.Ptr("CA"),
							StreetAddress1:  to.Ptr("16 TOWNSEND ST"),
							StreetAddress2:  to.Ptr("UNIT 1"),
						},
					},
				},
				{
					Name:     to.Ptr("TestAddressName2"),
					Type:     to.Ptr("Microsoft.EdgeOrder/addresses"),
					ID:       to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/addresses/TestAddressName2"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armedgeorder.AddressProperties{
						ContactDetails: &armedgeorder.ContactDetails{
							ContactName: to.Ptr("Petr Cech"),
							EmailList: []*string{
								to.Ptr("ssemmail@microsoft.com")},
							Phone:          to.Ptr("1234567890"),
							PhoneExtension: to.Ptr(""),
						},
						ShippingAddress: &armedgeorder.ShippingAddress{
							AddressType:     to.Ptr(armedgeorder.AddressTypeNone),
							City:            to.Ptr("San Francisco"),
							CompanyName:     to.Ptr("Microsoft"),
							Country:         to.Ptr("US"),
							PostalCode:      to.Ptr("94107"),
							StateOrProvince: to.Ptr("CA"),
							StreetAddress1:  to.Ptr("16 TOWNSEND ST"),
							StreetAddress2:  to.Ptr("UNIT 1"),
						},
					},
				},
				{
					Name:     to.Ptr("TestMSAddressName"),
					Type:     to.Ptr("Microsoft.EdgeOrder/addresses"),
					ID:       to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/addresses/TestMSAddressName"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armedgeorder.AddressProperties{
						ContactDetails: &armedgeorder.ContactDetails{
							ContactName: to.Ptr("Petr Cech"),
							EmailList: []*string{
								to.Ptr("ssemcr@microsoft.com")},
							Phone:          to.Ptr("1234567890"),
							PhoneExtension: to.Ptr(""),
						},
						ShippingAddress: &armedgeorder.ShippingAddress{
							AddressType:     to.Ptr(armedgeorder.AddressTypeNone),
							City:            to.Ptr("San Francisco"),
							CompanyName:     to.Ptr("Microsoft"),
							Country:         to.Ptr("US"),
							PostalCode:      to.Ptr("94107"),
							StateOrProvince: to.Ptr("CA"),
							StreetAddress1:  to.Ptr("16 TOWNSEND ST"),
							StreetAddress2:  to.Ptr("UNIT 1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AddressResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AddressResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListAddressesAtSubscriptionLevel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEdgeOrderManagementClient_ListProductFamilies(t *testing.T) {
	// From example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListProductFamilies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListProductFamilies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorder.NewManagementClient("fa68082f-8ff7-4a25-95c7-ce9da541242f", cred, &options)
	pager := client.ListProductFamilies(armedgeorder.ProductFamiliesRequest{
		FilterableProperties: map[string][]*armedgeorder.FilterableProperty{
			"azurestackedge": {
				{
					Type: to.Ptr(armedgeorder.SupportedFilterTypesShipToCountries),
					SupportedValues: []*string{
						to.Ptr("US")},
				}},
		},
	},
		&armedgeorder.ManagementClientListProductFamiliesOptions{Expand: nil,
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListProductFamilies.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armedgeorder.ProductFamilies{
			Value: []*armedgeorder.ProductFamily{
				{
					Properties: &armedgeorder.ProductFamilyProperties{
						Description: &armedgeorder.Description{
							Attributes:      []*string{},
							DescriptionType: to.Ptr(armedgeorder.DescriptionTypeBase),
							Keywords:        []*string{},
							Links:           []*armedgeorder.Link{},
						},
						AvailabilityInformation: &armedgeorder.AvailabilityInformation{
							AvailabilityStage: to.Ptr(armedgeorder.AvailabilityStageAvailable),
							DisabledReason:    to.Ptr(armedgeorder.DisabledReasonNone),
						},
						DisplayName: to.Ptr("Azure Stack Edge"),
						HierarchyInformation: &armedgeorder.HierarchyInformation{
							ConfigurationName: to.Ptr(""),
							ProductFamilyName: to.Ptr("azurestackedge"),
							ProductLineName:   to.Ptr(""),
							ProductName:       to.Ptr(""),
						},
						ImageInformation: []*armedgeorder.ImageInformation{},
						ProductLines: []*armedgeorder.ProductLine{
							{
								Properties: &armedgeorder.ProductLineProperties{
									Description: &armedgeorder.Description{
										Attributes:      []*string{},
										DescriptionType: to.Ptr(armedgeorder.DescriptionTypeBase),
										Keywords:        []*string{},
										Links:           []*armedgeorder.Link{},
									},
									AvailabilityInformation: &armedgeorder.AvailabilityInformation{
										AvailabilityStage: to.Ptr(armedgeorder.AvailabilityStageAvailable),
										DisabledReason:    to.Ptr(armedgeorder.DisabledReasonNone),
									},
									DisplayName: to.Ptr("Azure Stack Edge"),
									HierarchyInformation: &armedgeorder.HierarchyInformation{
										ConfigurationName: to.Ptr(""),
										ProductFamilyName: to.Ptr("azurestackedge"),
										ProductLineName:   to.Ptr("azurestackedge"),
										ProductName:       to.Ptr(""),
									},
									ImageInformation: []*armedgeorder.ImageInformation{},
									FilterableProperties: []*armedgeorder.FilterableProperty{
										{
											Type: to.Ptr(armedgeorder.SupportedFilterTypesShipToCountries),
											SupportedValues: []*string{
												to.Ptr("US")},
										}},
									Products: []*armedgeorder.Product{
										{
											Properties: &armedgeorder.ProductProperties{
												Description: &armedgeorder.Description{
													Attributes: []*string{
														to.Ptr("1U rack mount device with network data transfer capabilities"),
														to.Ptr("Hardware accelerated ML using Nvidia T4 GPU"),
														to.Ptr("Azure Private Edge Zones enabled")},
													DescriptionType: to.Ptr(armedgeorder.DescriptionTypeBase),
													Keywords: []*string{
														to.Ptr("GPU")},
													Links: []*armedgeorder.Link{
														{
															LinkType: to.Ptr(armedgeorder.LinkTypeSpecification),
															LinkURL:  to.Ptr("https://aka.ms/ase-gpu-devicespecs"),
														},
														{
															LinkType: to.Ptr(armedgeorder.LinkTypeGeneric),
															LinkURL:  to.Ptr("https://aka.ms/ase-gpu-billing"),
														},
														{
															LinkType: to.Ptr(armedgeorder.LinkTypeTermsAndConditions),
															LinkURL:  to.Ptr("https://aka.ms/ase-gpu-product-terms"),
														},
														{
															LinkType: to.Ptr(armedgeorder.LinkTypeKnowMore),
															LinkURL:  to.Ptr("https://aka.ms/ase-documentation"),
														}},
													LongDescription:  to.Ptr("Azure Stack Edge is an AI-enabled edge computing device with network data transfer capabilities. The device is powered with NVIDIA T4 GPUs to provide accelerated AI inferencing at the edge. You can choose from the available configurations with one or two GPUs basis your business need"),
													ShortDescription: to.Ptr("Azure managed physical edge compute device"),
												},
												AvailabilityInformation: &armedgeorder.AvailabilityInformation{
													AvailabilityStage: to.Ptr(armedgeorder.AvailabilityStageAvailable),
													DisabledReason:    to.Ptr(armedgeorder.DisabledReasonNone),
												},
												DisplayName: to.Ptr("Azure Stack Edge Pro - GPU"),
												HierarchyInformation: &armedgeorder.HierarchyInformation{
													ConfigurationName: to.Ptr(""),
													ProductFamilyName: to.Ptr("azurestackedge"),
													ProductLineName:   to.Ptr("azurestackedge"),
													ProductName:       to.Ptr("azurestackedgegpu"),
												},
												ImageInformation: []*armedgeorder.ImageInformation{},
												FilterableProperties: []*armedgeorder.FilterableProperty{
													{
														Type: to.Ptr(armedgeorder.SupportedFilterTypesShipToCountries),
														SupportedValues: []*string{
															to.Ptr("US")},
													}},
												Configurations: []*armedgeorder.Configuration{
													{
														Properties: &armedgeorder.ConfigurationProperties{
															Description: &armedgeorder.Description{
																Attributes:      []*string{},
																DescriptionType: to.Ptr(armedgeorder.DescriptionTypeBase),
																Keywords: []*string{
																	to.Ptr("GPU")},
																Links:            []*armedgeorder.Link{},
																LongDescription:  to.Ptr(""),
																ShortDescription: to.Ptr(""),
															},
															AvailabilityInformation: &armedgeorder.AvailabilityInformation{
																AvailabilityStage: to.Ptr(armedgeorder.AvailabilityStageAvailable),
																DisabledReason:    to.Ptr(armedgeorder.DisabledReasonNone),
															},
															CostInformation: &armedgeorder.CostInformation{
																BillingMeterDetails: []*armedgeorder.BillingMeterDetails{},
															},
															DisplayName: to.Ptr("Azure Stack Edge Pro - 1 GPU"),
															HierarchyInformation: &armedgeorder.HierarchyInformation{
																ConfigurationName: to.Ptr("edgep_base"),
																ProductFamilyName: to.Ptr("azurestackedge"),
																ProductLineName:   to.Ptr("azurestackedge"),
																ProductName:       to.Ptr("azurestackedgegpu"),
															},
															ImageInformation: []*armedgeorder.ImageInformation{},
															FilterableProperties: []*armedgeorder.FilterableProperty{
																{
																	Type: to.Ptr(armedgeorder.SupportedFilterTypesShipToCountries),
																	SupportedValues: []*string{
																		to.Ptr("US")},
																}},
															Dimensions: &armedgeorder.Dimensions{
																Depth:            to.Ptr[float64](2),
																Height:           to.Ptr[float64](15),
																Length:           to.Ptr[float64](50),
																LengthHeightUnit: to.Ptr(armedgeorder.LengthHeightUnitIN),
																Weight:           to.Ptr[float64](50),
																WeightUnit:       to.Ptr(armedgeorder.WeightMeasurementUnitLBS),
																Width:            to.Ptr[float64](5),
															},
															Specifications: []*armedgeorder.Specification{
																{
																	Name:  to.Ptr("Usable compute"),
																	Value: to.Ptr("40 vCPU"),
																},
																{
																	Name:  to.Ptr("Usable memory"),
																	Value: to.Ptr("102 GB"),
																},
																{
																	Name:  to.Ptr("Usable storage"),
																	Value: to.Ptr("4.2 TB"),
																}},
														},
													}},
											},
										}},
								},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProductFamilies) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProductFamilies)
			t.Fatalf("Mock response is not equal to example response for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListProductFamilies.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEdgeOrderManagementClient_ListConfigurations(t *testing.T) {
	// From example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListConfigurations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListConfigurations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorder.NewManagementClient("fa68082f-8ff7-4a25-95c7-ce9da541242f", cred, &options)
	pager := client.ListConfigurations(armedgeorder.ConfigurationsRequest{
		ConfigurationFilters: []*armedgeorder.ConfigurationFilters{
			{
				FilterableProperty: []*armedgeorder.FilterableProperty{
					{
						Type: to.Ptr(armedgeorder.SupportedFilterTypesShipToCountries),
						SupportedValues: []*string{
							to.Ptr("US")},
					}},
				HierarchyInformation: &armedgeorder.HierarchyInformation{
					ProductFamilyName: to.Ptr("AzureStackEdge"),
					ProductLineName:   to.Ptr("AzureStackEdge"),
					ProductName:       to.Ptr("AzureStackEdgeGPU"),
				},
			}},
	},
		&armedgeorder.ManagementClientListConfigurationsOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListConfigurations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armedgeorder.Configurations{
			Value: []*armedgeorder.Configuration{
				{
					Properties: &armedgeorder.ConfigurationProperties{
						Description: &armedgeorder.Description{
							Attributes:      []*string{},
							DescriptionType: to.Ptr(armedgeorder.DescriptionTypeBase),
							Keywords: []*string{
								to.Ptr("GPU")},
							Links:            []*armedgeorder.Link{},
							LongDescription:  to.Ptr(""),
							ShortDescription: to.Ptr(""),
						},
						AvailabilityInformation: &armedgeorder.AvailabilityInformation{
							AvailabilityStage: to.Ptr(armedgeorder.AvailabilityStageAvailable),
							DisabledReason:    to.Ptr(armedgeorder.DisabledReasonNone),
						},
						CostInformation: &armedgeorder.CostInformation{
							BillingMeterDetails: []*armedgeorder.BillingMeterDetails{},
						},
						DisplayName: to.Ptr("Azure Stack Edge Pro - 1 GPU"),
						HierarchyInformation: &armedgeorder.HierarchyInformation{
							ConfigurationName: to.Ptr("edgep_base"),
							ProductFamilyName: to.Ptr("azurestackedge"),
							ProductLineName:   to.Ptr("azurestackedge"),
							ProductName:       to.Ptr("azurestackedgegpu"),
						},
						ImageInformation: []*armedgeorder.ImageInformation{},
						FilterableProperties: []*armedgeorder.FilterableProperty{
							{
								Type: to.Ptr(armedgeorder.SupportedFilterTypesShipToCountries),
								SupportedValues: []*string{
									to.Ptr("US"),
									to.Ptr("AR")},
							}},
						Dimensions: &armedgeorder.Dimensions{
							Depth:            to.Ptr[float64](2),
							Height:           to.Ptr[float64](15),
							Length:           to.Ptr[float64](50),
							LengthHeightUnit: to.Ptr(armedgeorder.LengthHeightUnitIN),
							Weight:           to.Ptr[float64](50),
							WeightUnit:       to.Ptr(armedgeorder.WeightMeasurementUnitLBS),
							Width:            to.Ptr[float64](5),
						},
						Specifications: []*armedgeorder.Specification{
							{
								Name:  to.Ptr("Usable compute"),
								Value: to.Ptr("40 vCPU"),
							},
							{
								Name:  to.Ptr("Usable memory"),
								Value: to.Ptr("102 GB"),
							},
							{
								Name:  to.Ptr("Usable storage"),
								Value: to.Ptr("4.2 TB"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.Configurations) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.Configurations)
			t.Fatalf("Mock response is not equal to example response for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListConfigurations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEdgeOrderManagementClient_ListProductFamiliesMetadata(t *testing.T) {
	// From example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListProductFamiliesMetadata.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListProductFamiliesMetadata"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorder.NewManagementClient("fa68082f-8ff7-4a25-95c7-ce9da541242f", cred, &options)
	pager := client.ListProductFamiliesMetadata(&armedgeorder.ManagementClientListProductFamiliesMetadataOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListProductFamiliesMetadata.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armedgeorder.ProductFamiliesMetadata{
			Value: []*armedgeorder.ProductFamiliesMetadataDetails{
				{
					Properties: &armedgeorder.ProductFamilyProperties{
						Description: &armedgeorder.Description{
							Attributes:      []*string{},
							DescriptionType: to.Ptr(armedgeorder.DescriptionTypeBase),
							Keywords:        []*string{},
							Links:           []*armedgeorder.Link{},
						},
						AvailabilityInformation: &armedgeorder.AvailabilityInformation{
							AvailabilityStage: to.Ptr(armedgeorder.AvailabilityStageAvailable),
							DisabledReason:    to.Ptr(armedgeorder.DisabledReasonNone),
						},
						DisplayName: to.Ptr("Azure Stack Edge"),
						HierarchyInformation: &armedgeorder.HierarchyInformation{
							ConfigurationName: to.Ptr(""),
							ProductFamilyName: to.Ptr("azurestackedge"),
							ProductLineName:   to.Ptr(""),
							ProductName:       to.Ptr(""),
						},
						ImageInformation: []*armedgeorder.ImageInformation{},
						FilterableProperties: []*armedgeorder.FilterableProperty{
							{
								Type: to.Ptr(armedgeorder.SupportedFilterTypesShipToCountries),
								SupportedValues: []*string{
									to.Ptr("US")},
							},
							{
								Type: to.Ptr(armedgeorder.SupportedFilterTypesDoubleEncryptionStatus),
								SupportedValues: []*string{
									to.Ptr("Enabled")},
							}},
						ProductLines: []*armedgeorder.ProductLine{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProductFamiliesMetadata) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProductFamiliesMetadata)
			t.Fatalf("Mock response is not equal to example response for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListProductFamiliesMetadata.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEdgeOrderManagementClient_ListOrderAtSubscriptionLevel(t *testing.T) {
	// From example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListOrderAtSubscriptionLevel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListOrderAtSubscriptionLevel"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorder.NewManagementClient("fa68082f-8ff7-4a25-95c7-ce9da541242f", cred, &options)
	pager := client.ListOrderAtSubscriptionLevel(&armedgeorder.ManagementClientListOrderAtSubscriptionLevelOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListOrderAtSubscriptionLevel.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armedgeorder.OrderResourceList{
			Value: []*armedgeorder.OrderResource{
				{
					Name: to.Ptr("TestOrderItemName901"),
					Type: to.Ptr("Microsoft.EdgeOrder/orders"),
					ID:   to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/locations/westus/orders/TestOrderItemName901"),
					Properties: &armedgeorder.OrderProperties{
						CurrentStage: &armedgeorder.StageDetails{
							StageName:   to.Ptr(armedgeorder.StageNameInReview),
							StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
							StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T13:13:35.0789537+05:30"); return t }()),
						},
						OrderItemIDs: []*string{
							to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/orderItems/TestOrderItemName901")},
						OrderStageHistory: []*armedgeorder.StageDetails{
							{
								StageName:   to.Ptr(armedgeorder.StageNamePlaced),
								StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
								StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T13:08:16.3198555+05:30"); return t }()),
							},
							{
								StageName:   to.Ptr(armedgeorder.StageNameInReview),
								StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
								StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T13:13:35.0789537+05:30"); return t }()),
							}},
					},
				},
				{
					Name: to.Ptr("TestOrderItemName01"),
					Type: to.Ptr("Microsoft.EdgeOrder/orders"),
					ID:   to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/locations/westus/orders/TestOrderItemName01"),
					Properties: &armedgeorder.OrderProperties{
						CurrentStage: &armedgeorder.StageDetails{
							StageName:   to.Ptr(armedgeorder.StageNameInReview),
							StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
							StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T13:19:40.9984759+05:30"); return t }()),
						},
						OrderItemIDs: []*string{
							to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/orderItems/TestOrderItemName01")},
						OrderStageHistory: []*armedgeorder.StageDetails{
							{
								StageName:   to.Ptr(armedgeorder.StageNamePlaced),
								StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
								StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T13:14:39.9413253+05:30"); return t }()),
							},
							{
								StageName:   to.Ptr(armedgeorder.StageNameInReview),
								StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
								StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T13:19:40.9984759+05:30"); return t }()),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OrderResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OrderResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListOrderAtSubscriptionLevel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEdgeOrderManagementClient_ListOrderItemsAtSubscriptionLevel(t *testing.T) {
	// From example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListOrderItemsAtSubscriptionLevel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListOrderItemsAtSubscriptionLevel"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorder.NewManagementClient("fa68082f-8ff7-4a25-95c7-ce9da541242f", cred, &options)
	pager := client.ListOrderItemsAtSubscriptionLevel(&armedgeorder.ManagementClientListOrderItemsAtSubscriptionLevelOptions{Filter: nil,
		Expand:    nil,
		SkipToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListOrderItemsAtSubscriptionLevel.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armedgeorder.OrderItemResourceList{
			Value: []*armedgeorder.OrderItemResource{
				{
					Name:     to.Ptr("TestOrderItemName901"),
					Type:     to.Ptr("Microsoft.EdgeOrder/orderItems"),
					ID:       to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/orderItems/TestOrderItemName901"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"carrot": to.Ptr("vegetable"),
						"mango":  to.Ptr("fruit"),
					},
					Properties: &armedgeorder.OrderItemProperties{
						AddressDetails: &armedgeorder.AddressDetails{
							ForwardAddress: &armedgeorder.AddressProperties{
								ContactDetails: &armedgeorder.ContactDetails{
									ContactName: to.Ptr("164 TOWNSEND ST"),
									EmailList: []*string{
										to.Ptr("testemail@microsoft.com")},
									Phone: to.Ptr("3213131190"),
								},
								ShippingAddress: &armedgeorder.ShippingAddress{
									AddressType:     to.Ptr(armedgeorder.AddressTypeResidential),
									City:            to.Ptr("San Francisco"),
									CompanyName:     to.Ptr("Microsoft"),
									Country:         to.Ptr("US"),
									PostalCode:      to.Ptr("94107"),
									StateOrProvince: to.Ptr("CA"),
									StreetAddress1:  to.Ptr("16 TOWNSEND ST"),
									StreetAddress2:  to.Ptr("UNIT 1"),
									ZipExtendedCode: to.Ptr("1"),
								},
							},
						},
						OrderID: to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/locations/westus/orders/TestOrderItemName901"),
						OrderItemDetails: &armedgeorder.OrderItemDetails{
							CancellationStatus: to.Ptr(armedgeorder.OrderItemCancellationEnumCancellable),
							CurrentStage: &armedgeorder.StageDetails{
								StageName:   to.Ptr(armedgeorder.StageNamePlaced),
								StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
								StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T12:29:33.9791927+05:30"); return t }()),
							},
							DeletionStatus:        to.Ptr(armedgeorder.ActionStatusEnumNotAllowed),
							NotificationEmailList: []*string{},
							OrderItemStageHistory: []*armedgeorder.StageDetails{
								{
									StageName:   to.Ptr(armedgeorder.StageNamePlaced),
									StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
									StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T12:29:33.9791927+05:30"); return t }()),
								},
								{
									StageName:   to.Ptr(armedgeorder.StageNameConfirmed),
									StageStatus: to.Ptr(armedgeorder.StageStatusNone),
								},
								{
									StageName:   to.Ptr(armedgeorder.StageNameReadyToShip),
									StageStatus: to.Ptr(armedgeorder.StageStatusNone),
								},
								{
									StageName:   to.Ptr(armedgeorder.StageNameShipped),
									StageStatus: to.Ptr(armedgeorder.StageStatusNone),
								},
								{
									StageName:   to.Ptr(armedgeorder.StageNameDelivered),
									StageStatus: to.Ptr(armedgeorder.StageStatusNone),
								},
								{
									StageName:   to.Ptr(armedgeorder.StageNameInUse),
									StageStatus: to.Ptr(armedgeorder.StageStatusNone),
								}},
							OrderItemType: to.Ptr(armedgeorder.OrderItemTypePurchase),
							Preferences: &armedgeorder.Preferences{
								TransportPreferences: &armedgeorder.TransportPreferences{
									PreferredShipmentType: to.Ptr(armedgeorder.TransportShipmentTypesMicrosoftManaged),
								},
							},
							ProductDetails: &armedgeorder.ProductDetails{
								Count: to.Ptr[int32](0),
								DisplayInfo: &armedgeorder.DisplayInfo{
									ConfigurationDisplayName: to.Ptr("Azure Stack Edge Pro - 1 GPU"),
									ProductFamilyDisplayName: to.Ptr("Azure Stack Edge"),
								},
								HierarchyInformation: &armedgeorder.HierarchyInformation{
									ConfigurationName: to.Ptr("azurestackedgegpu"),
									ProductFamilyName: to.Ptr("azurestackedge"),
									ProductLineName:   to.Ptr("azurestackedge"),
									ProductName:       to.Ptr("azurestackedgegpu"),
								},
								ProductDoubleEncryptionStatus: to.Ptr(armedgeorder.DoubleEncryptionStatusDisabled),
							},
							ReturnStatus: to.Ptr(armedgeorder.OrderItemReturnEnumNotReturnable),
						},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T12:29:25.6656282+05:30"); return t }()),
					},
				},
				{
					Name:     to.Ptr("TestOrderItemName01"),
					Type:     to.Ptr("Microsoft.EdgeOrder/orderItems"),
					ID:       to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/orderItems/TestOrderItemName01"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"carrot": to.Ptr("vegetable"),
						"mango":  to.Ptr("fruit"),
					},
					Properties: &armedgeorder.OrderItemProperties{
						AddressDetails: &armedgeorder.AddressDetails{
							ForwardAddress: &armedgeorder.AddressProperties{
								ContactDetails: &armedgeorder.ContactDetails{
									ContactName: to.Ptr("164 TOWNSEND ST"),
									EmailList: []*string{
										to.Ptr("ssemmail@microsoft.com"),
										to.Ptr("vishwamdir@microsoft.com")},
									Phone: to.Ptr("32131311"),
								},
								ShippingAddress: &armedgeorder.ShippingAddress{
									AddressType:     to.Ptr(armedgeorder.AddressTypeResidential),
									City:            to.Ptr("San Francisco"),
									CompanyName:     to.Ptr("Microsoft"),
									Country:         to.Ptr("US"),
									PostalCode:      to.Ptr("94107"),
									StateOrProvince: to.Ptr("CA"),
									StreetAddress1:  to.Ptr("16 TOWNSEND ST"),
									StreetAddress2:  to.Ptr("UNIT 1"),
									ZipExtendedCode: to.Ptr("1"),
								},
							},
						},
						OrderID: to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/locations/westus/orders/TestOrderItemName01"),
						OrderItemDetails: &armedgeorder.OrderItemDetails{
							CancellationStatus: to.Ptr(armedgeorder.OrderItemCancellationEnumCancellable),
							CurrentStage: &armedgeorder.StageDetails{
								StageName:   to.Ptr(armedgeorder.StageNamePlaced),
								StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
								StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T12:49:48.8869361+05:30"); return t }()),
							},
							DeletionStatus:        to.Ptr(armedgeorder.ActionStatusEnumNotAllowed),
							NotificationEmailList: []*string{},
							OrderItemStageHistory: []*armedgeorder.StageDetails{
								{
									StageName:   to.Ptr(armedgeorder.StageNamePlaced),
									StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
									StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T12:31:07.7430555+05:30"); return t }()),
								},
								{
									StageName:   to.Ptr(armedgeorder.StageNameConfirmed),
									StageStatus: to.Ptr(armedgeorder.StageStatusNone),
								},
								{
									StageName:   to.Ptr(armedgeorder.StageNameReadyToShip),
									StageStatus: to.Ptr(armedgeorder.StageStatusNone),
								},
								{
									StageName:   to.Ptr(armedgeorder.StageNameShipped),
									StageStatus: to.Ptr(armedgeorder.StageStatusNone),
								},
								{
									StageName:   to.Ptr(armedgeorder.StageNameDelivered),
									StageStatus: to.Ptr(armedgeorder.StageStatusNone),
								},
								{
									StageName:   to.Ptr(armedgeorder.StageNameInUse),
									StageStatus: to.Ptr(armedgeorder.StageStatusNone),
								}},
							OrderItemType: to.Ptr(armedgeorder.OrderItemTypePurchase),
							Preferences: &armedgeorder.Preferences{
								TransportPreferences: &armedgeorder.TransportPreferences{
									PreferredShipmentType: to.Ptr(armedgeorder.TransportShipmentTypesMicrosoftManaged),
								},
							},
							ProductDetails: &armedgeorder.ProductDetails{
								Count: to.Ptr[int32](0),
								DisplayInfo: &armedgeorder.DisplayInfo{
									ConfigurationDisplayName: to.Ptr("Azure Stack Edge Pro - 1 GPU"),
									ProductFamilyDisplayName: to.Ptr("Azure Stack Edge"),
								},
								HierarchyInformation: &armedgeorder.HierarchyInformation{
									ConfigurationName: to.Ptr("azurestackedgegpu"),
									ProductFamilyName: to.Ptr("azurestackedge"),
									ProductLineName:   to.Ptr("azurestackedge"),
									ProductName:       to.Ptr("azurestackedgegpu"),
								},
								ProductDoubleEncryptionStatus: to.Ptr(armedgeorder.DoubleEncryptionStatusDisabled),
							},
							ReturnStatus: to.Ptr(armedgeorder.OrderItemReturnEnumNotReturnable),
						},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T12:31:06.1244193+05:30"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OrderItemResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OrderItemResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListOrderItemsAtSubscriptionLevel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEdgeOrderManagementClient_ListAddressesAtResourceGroupLevel(t *testing.T) {
	// From example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListAddressesAtResourceGroupLevel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListAddressesAtResourceGroupLevel"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorder.NewManagementClient("fa68082f-8ff7-4a25-95c7-ce9da541242f", cred, &options)
	pager := client.ListAddressesAtResourceGroupLevel("TestRG",
		&armedgeorder.ManagementClientListAddressesAtResourceGroupLevelOptions{Filter: nil,
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListAddressesAtResourceGroupLevel.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armedgeorder.AddressResourceList{
			Value: []*armedgeorder.AddressResource{
				{
					Name:     to.Ptr("TestAddressName0"),
					Type:     to.Ptr("Microsoft.EdgeOrder/addresses"),
					ID:       to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/addresses/TestAddressName0"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armedgeorder.AddressProperties{
						ContactDetails: &armedgeorder.ContactDetails{
							ContactName: to.Ptr("Petr Cech"),
							EmailList: []*string{
								to.Ptr("ssemmail@microsoft.com")},
							Phone:          to.Ptr("1234567890"),
							PhoneExtension: to.Ptr(""),
						},
						ShippingAddress: &armedgeorder.ShippingAddress{
							AddressType:     to.Ptr(armedgeorder.AddressTypeNone),
							City:            to.Ptr("San Francisco"),
							CompanyName:     to.Ptr("Microsoft"),
							Country:         to.Ptr("US"),
							PostalCode:      to.Ptr("94107"),
							StateOrProvince: to.Ptr("CA"),
							StreetAddress1:  to.Ptr("16 TOWNSEND ST"),
							StreetAddress2:  to.Ptr("UNIT 1"),
						},
					},
				},
				{
					Name:     to.Ptr("TestAddressName2"),
					Type:     to.Ptr("Microsoft.EdgeOrder/addresses"),
					ID:       to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/addresses/TestAddressName2"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armedgeorder.AddressProperties{
						ContactDetails: &armedgeorder.ContactDetails{
							ContactName: to.Ptr("Petr Cech"),
							EmailList: []*string{
								to.Ptr("ssemmail@microsoft.com")},
							Phone:          to.Ptr("1234567890"),
							PhoneExtension: to.Ptr(""),
						},
						ShippingAddress: &armedgeorder.ShippingAddress{
							AddressType:     to.Ptr(armedgeorder.AddressTypeNone),
							City:            to.Ptr("San Francisco"),
							CompanyName:     to.Ptr("Microsoft"),
							Country:         to.Ptr("US"),
							PostalCode:      to.Ptr("94107"),
							StateOrProvince: to.Ptr("CA"),
							StreetAddress1:  to.Ptr("16 TOWNSEND ST"),
							StreetAddress2:  to.Ptr("UNIT 1"),
						},
					},
				},
				{
					Name:     to.Ptr("TestMSAddressName"),
					Type:     to.Ptr("Microsoft.EdgeOrder/addresses"),
					ID:       to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/addresses/TestMSAddressName"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armedgeorder.AddressProperties{
						ContactDetails: &armedgeorder.ContactDetails{
							ContactName: to.Ptr("Petr Cech"),
							EmailList: []*string{
								to.Ptr("ssemmail@microsoft.com")},
							Phone:          to.Ptr("1234567890"),
							PhoneExtension: to.Ptr(""),
						},
						ShippingAddress: &armedgeorder.ShippingAddress{
							AddressType:     to.Ptr(armedgeorder.AddressTypeNone),
							City:            to.Ptr("San Francisco"),
							CompanyName:     to.Ptr("Microsoft"),
							Country:         to.Ptr("US"),
							PostalCode:      to.Ptr("94107"),
							StateOrProvince: to.Ptr("CA"),
							StreetAddress1:  to.Ptr("16 TOWNSEND ST"),
							StreetAddress2:  to.Ptr("UNIT 1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AddressResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AddressResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListAddressesAtResourceGroupLevel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEdgeOrderManagementClient_GetAddressByName(t *testing.T) {
	// From example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/GetAddressByName.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetAddressByName"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorder.NewManagementClient("fa68082f-8ff7-4a25-95c7-ce9da541242f", cred, &options)
	res, err := client.GetAddressByName(ctx,
		"TestMSAddressName",
		"TestRG",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/GetAddressByName.json: %v", err)
	}
	// Response check
	{
		exampleRes := armedgeorder.AddressResource{
			Name:     to.Ptr("TestMSAddressName"),
			Type:     to.Ptr("Microsoft.EdgeOrder/addresses"),
			ID:       to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/addresses/TestMSAddressName"),
			Location: to.Ptr("westus"),
			Tags:     map[string]*string{},
			Properties: &armedgeorder.AddressProperties{
				ContactDetails: &armedgeorder.ContactDetails{
					ContactName: to.Ptr("Petr Cech"),
					EmailList: []*string{
						to.Ptr("ssemcr@microsoft.com")},
					Phone:          to.Ptr("1234567890"),
					PhoneExtension: to.Ptr(""),
				},
				ShippingAddress: &armedgeorder.ShippingAddress{
					AddressType:     to.Ptr(armedgeorder.AddressTypeNone),
					City:            to.Ptr("San Francisco"),
					CompanyName:     to.Ptr("Microsoft"),
					Country:         to.Ptr("US"),
					PostalCode:      to.Ptr("94107"),
					StateOrProvince: to.Ptr("CA"),
					StreetAddress1:  to.Ptr("16 TOWNSEND ST"),
					StreetAddress2:  to.Ptr("UNIT 1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AddressResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AddressResource)
			t.Fatalf("Mock response is not equal to example response for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/GetAddressByName.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEdgeOrderManagementClient_CreateAddress(t *testing.T) {
	// From example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/CreateAddress.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateAddress"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorder.NewManagementClient("fa68082f-8ff7-4a25-95c7-ce9da541242f", cred, &options)
	poller, err := client.BeginCreateAddress(ctx,
		"TestMSAddressName",
		"TestRG",
		armedgeorder.AddressResource{
			Location: to.Ptr("westus"),
			Properties: &armedgeorder.AddressProperties{
				ContactDetails: &armedgeorder.ContactDetails{
					ContactName: to.Ptr("Petr Cech"),
					EmailList: []*string{
						to.Ptr("testemail@microsoft.com")},
					Phone:          to.Ptr("1234567890"),
					PhoneExtension: to.Ptr(""),
				},
				ShippingAddress: &armedgeorder.ShippingAddress{
					AddressType:     to.Ptr(armedgeorder.AddressTypeNone),
					City:            to.Ptr("San Francisco"),
					CompanyName:     to.Ptr("Microsoft"),
					Country:         to.Ptr("US"),
					PostalCode:      to.Ptr("94107"),
					StateOrProvince: to.Ptr("CA"),
					StreetAddress1:  to.Ptr("16 TOWNSEND ST"),
					StreetAddress2:  to.Ptr("UNIT 1"),
				},
			},
		},
		&armedgeorder.ManagementClientBeginCreateAddressOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/CreateAddress.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/CreateAddress.json: %v", err)
	}
	// Response check
	{
		exampleRes := armedgeorder.AddressResource{
			Name:     to.Ptr("TestMSAddressName"),
			Type:     to.Ptr("Microsoft.EdgeOrder/addresses"),
			ID:       to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/addresses/TestMSAddressName"),
			Location: to.Ptr("westus"),
			Tags:     map[string]*string{},
			Properties: &armedgeorder.AddressProperties{
				ContactDetails: &armedgeorder.ContactDetails{
					ContactName: to.Ptr("Petr Cech"),
					EmailList: []*string{
						to.Ptr("testemail@microsoft.com")},
					Phone:          to.Ptr("1234567890"),
					PhoneExtension: to.Ptr(""),
				},
				ShippingAddress: &armedgeorder.ShippingAddress{
					AddressType:     to.Ptr(armedgeorder.AddressTypeNone),
					City:            to.Ptr("San Francisco"),
					CompanyName:     to.Ptr("Microsoft"),
					Country:         to.Ptr("US"),
					PostalCode:      to.Ptr("94107"),
					StateOrProvince: to.Ptr("CA"),
					StreetAddress1:  to.Ptr("16 TOWNSEND ST"),
					StreetAddress2:  to.Ptr("UNIT 1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AddressResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AddressResource)
			t.Fatalf("Mock response is not equal to example response for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/CreateAddress.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEdgeOrderManagementClient_DeleteAddressByName(t *testing.T) {
	// From example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/DeleteAddressByName.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteAddressByName"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorder.NewManagementClient("fa68082f-8ff7-4a25-95c7-ce9da541242f", cred, &options)
	poller, err := client.BeginDeleteAddressByName(ctx,
		"TestAddressName1",
		"TestRG",
		&armedgeorder.ManagementClientBeginDeleteAddressByNameOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/DeleteAddressByName.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/DeleteAddressByName.json: %v", err)
	}
}

func TestEdgeOrderManagementClient_UpdateAddress(t *testing.T) {
	// From example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/UpdateAddress.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateAddress"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorder.NewManagementClient("fa68082f-8ff7-4a25-95c7-ce9da541242f", cred, &options)
	poller, err := client.BeginUpdateAddress(ctx,
		"TestAddressName2",
		"TestRG",
		armedgeorder.AddressUpdateParameter{
			Properties: &armedgeorder.AddressUpdateProperties{
				ContactDetails: &armedgeorder.ContactDetails{
					ContactName: to.Ptr("Petr Cech"),
					EmailList: []*string{
						to.Ptr("ssemcr@microsoft.com")},
					Phone:          to.Ptr("1234567890"),
					PhoneExtension: to.Ptr(""),
				},
				ShippingAddress: &armedgeorder.ShippingAddress{
					AddressType:     to.Ptr(armedgeorder.AddressTypeNone),
					City:            to.Ptr("San Francisco"),
					CompanyName:     to.Ptr("Microsoft"),
					Country:         to.Ptr("US"),
					PostalCode:      to.Ptr("94107"),
					StateOrProvince: to.Ptr("CA"),
					StreetAddress1:  to.Ptr("16 TOWNSEND STT"),
					StreetAddress2:  to.Ptr("UNIT 1"),
				},
			},
			Tags: map[string]*string{
				"Hobby":    to.Ptr("Web Series Added"),
				"Name":     to.Ptr("Smile-Updated"),
				"WhatElse": to.Ptr("Web Series Added"),
				"Work":     to.Ptr("Engineering"),
			},
		},
		&armedgeorder.ManagementClientBeginUpdateAddressOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/UpdateAddress.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/UpdateAddress.json: %v", err)
	}
	// Response check
	{
		exampleRes := armedgeorder.AddressResource{
			Name:     to.Ptr("TestAddressName2"),
			Type:     to.Ptr("Microsoft.EdgeOrder/addresses"),
			ID:       to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/addresses/TestAddressName2"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"name":     to.Ptr("Smile-Updated"),
				"hobby":    to.Ptr("Web Series Added"),
				"whatElse": to.Ptr("Web Series Added"),
				"work":     to.Ptr("Engineering"),
			},
			Properties: &armedgeorder.AddressProperties{
				ContactDetails: &armedgeorder.ContactDetails{
					ContactName: to.Ptr("Petr Cech"),
					EmailList: []*string{
						to.Ptr("ssemcr@microsoft.com")},
					Phone:          to.Ptr("1234567890"),
					PhoneExtension: to.Ptr(""),
				},
				ShippingAddress: &armedgeorder.ShippingAddress{
					AddressType:     to.Ptr(armedgeorder.AddressTypeNone),
					City:            to.Ptr("San Francisco"),
					CompanyName:     to.Ptr("Microsoft"),
					Country:         to.Ptr("US"),
					PostalCode:      to.Ptr("94107"),
					StateOrProvince: to.Ptr("CA"),
					StreetAddress1:  to.Ptr("16 TOWNSEND STT"),
					StreetAddress2:  to.Ptr("UNIT 1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AddressResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AddressResource)
			t.Fatalf("Mock response is not equal to example response for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/UpdateAddress.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEdgeOrderManagementClient_ListOrderAtResourceGroupLevel(t *testing.T) {
	// From example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListOrderAtResourceGroupLevel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListOrderAtResourceGroupLevel"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorder.NewManagementClient("fa68082f-8ff7-4a25-95c7-ce9da541242f", cred, &options)
	pager := client.ListOrderAtResourceGroupLevel("TestRG",
		&armedgeorder.ManagementClientListOrderAtResourceGroupLevelOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListOrderAtResourceGroupLevel.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armedgeorder.OrderResourceList{
			Value: []*armedgeorder.OrderResource{
				{
					Name: to.Ptr("TestOrderItemName901"),
					Type: to.Ptr("Microsoft.EdgeOrder/orders"),
					ID:   to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/locations/westus/orders/TestOrderItemName901"),
					Properties: &armedgeorder.OrderProperties{
						CurrentStage: &armedgeorder.StageDetails{
							StageName:   to.Ptr(armedgeorder.StageNameInReview),
							StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
							StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T13:13:35.0789537+05:30"); return t }()),
						},
						OrderItemIDs: []*string{
							to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/orderItems/TestOrderItemName901")},
						OrderStageHistory: []*armedgeorder.StageDetails{
							{
								StageName:   to.Ptr(armedgeorder.StageNamePlaced),
								StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
								StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T13:08:16.3198555+05:30"); return t }()),
							},
							{
								StageName:   to.Ptr(armedgeorder.StageNameInReview),
								StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
								StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T13:13:35.0789537+05:30"); return t }()),
							}},
					},
				},
				{
					Name: to.Ptr("TestOrderItemName01"),
					Type: to.Ptr("Microsoft.EdgeOrder/orders"),
					ID:   to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/locations/westus/orders/TestOrderItemName01"),
					Properties: &armedgeorder.OrderProperties{
						CurrentStage: &armedgeorder.StageDetails{
							StageName:   to.Ptr(armedgeorder.StageNameInReview),
							StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
							StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T13:19:40.9984759+05:30"); return t }()),
						},
						OrderItemIDs: []*string{
							to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/orderItems/TestOrderItemName01")},
						OrderStageHistory: []*armedgeorder.StageDetails{
							{
								StageName:   to.Ptr(armedgeorder.StageNamePlaced),
								StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
								StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T13:14:39.9413253+05:30"); return t }()),
							},
							{
								StageName:   to.Ptr(armedgeorder.StageNameInReview),
								StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
								StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T13:19:40.9984759+05:30"); return t }()),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OrderResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OrderResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListOrderAtResourceGroupLevel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEdgeOrderManagementClient_GetOrderByName(t *testing.T) {
	// From example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/GetOrderByName.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetOrderByName"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorder.NewManagementClient("fa68082f-8ff7-4a25-95c7-ce9da541242f", cred, &options)
	res, err := client.GetOrderByName(ctx,
		"TestOrderItemName901",
		"TestRG",
		"%7B%7B%7Blocation%7D%7D",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/GetOrderByName.json: %v", err)
	}
	// Response check
	{
		exampleRes := armedgeorder.OrderResource{
			Name: to.Ptr("TestOrderItemName901"),
			Type: to.Ptr("Microsoft.EdgeOrder/orders"),
			ID:   to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/locations/westus/orders/TestOrderItemName901"),
			Properties: &armedgeorder.OrderProperties{
				CurrentStage: &armedgeorder.StageDetails{
					StageName:   to.Ptr(armedgeorder.StageNameInReview),
					StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
					StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T15:30:35.4512229+05:30"); return t }()),
				},
				OrderItemIDs: []*string{
					to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/orderItems/TestOrderItemName901")},
				OrderStageHistory: []*armedgeorder.StageDetails{
					{
						StageName:   to.Ptr(armedgeorder.StageNamePlaced),
						StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
						StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T15:24:58.7140341+05:30"); return t }()),
					},
					{
						StageName:   to.Ptr(armedgeorder.StageNameInReview),
						StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
						StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T15:30:35.4512229+05:30"); return t }()),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OrderResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OrderResource)
			t.Fatalf("Mock response is not equal to example response for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/GetOrderByName.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEdgeOrderManagementClient_ListOrderItemsAtResourceGroupLevel(t *testing.T) {
	// From example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListOrderItemsAtResourceGroupLevel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListOrderItemsAtResourceGroupLevel"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorder.NewManagementClient("fa68082f-8ff7-4a25-95c7-ce9da541242f", cred, &options)
	pager := client.ListOrderItemsAtResourceGroupLevel("TestRG",
		&armedgeorder.ManagementClientListOrderItemsAtResourceGroupLevelOptions{Filter: nil,
			Expand:    nil,
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListOrderItemsAtResourceGroupLevel.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armedgeorder.OrderItemResourceList{
			Value: []*armedgeorder.OrderItemResource{
				{
					Name:     to.Ptr("TestOrderItemName901"),
					Type:     to.Ptr("Microsoft.EdgeOrder/orderItems"),
					ID:       to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/orderItems/TestOrderItemName901"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"carrot": to.Ptr("vegetable"),
						"mango":  to.Ptr("fruit"),
					},
					Properties: &armedgeorder.OrderItemProperties{
						AddressDetails: &armedgeorder.AddressDetails{
							ForwardAddress: &armedgeorder.AddressProperties{
								ContactDetails: &armedgeorder.ContactDetails{
									ContactName: to.Ptr("164 TOWNSEND ST"),
									EmailList: []*string{
										to.Ptr("ssemmail@microsoft.com"),
										to.Ptr("vishwamdir@microsoft.com")},
									Phone: to.Ptr("3213131190"),
								},
								ShippingAddress: &armedgeorder.ShippingAddress{
									AddressType:     to.Ptr(armedgeorder.AddressTypeResidential),
									City:            to.Ptr("San Francisco"),
									CompanyName:     to.Ptr("Microsoft"),
									Country:         to.Ptr("US"),
									PostalCode:      to.Ptr("94107"),
									StateOrProvince: to.Ptr("CA"),
									StreetAddress1:  to.Ptr("16 TOWNSEND ST"),
									StreetAddress2:  to.Ptr("UNIT 1"),
									ZipExtendedCode: to.Ptr("1"),
								},
							},
						},
						OrderID: to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/locations/westus/orders/TestOrderItemName901"),
						OrderItemDetails: &armedgeorder.OrderItemDetails{
							CancellationStatus: to.Ptr(armedgeorder.OrderItemCancellationEnumCancellable),
							CurrentStage: &armedgeorder.StageDetails{
								StageName:   to.Ptr(armedgeorder.StageNamePlaced),
								StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
								StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T12:29:33.9791927+05:30"); return t }()),
							},
							DeletionStatus:        to.Ptr(armedgeorder.ActionStatusEnumNotAllowed),
							NotificationEmailList: []*string{},
							OrderItemStageHistory: []*armedgeorder.StageDetails{
								{
									StageName:   to.Ptr(armedgeorder.StageNamePlaced),
									StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
									StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T12:29:33.9791927+05:30"); return t }()),
								},
								{
									StageName:   to.Ptr(armedgeorder.StageNameConfirmed),
									StageStatus: to.Ptr(armedgeorder.StageStatusNone),
								},
								{
									StageName:   to.Ptr(armedgeorder.StageNameReadyToShip),
									StageStatus: to.Ptr(armedgeorder.StageStatusNone),
								},
								{
									StageName:   to.Ptr(armedgeorder.StageNameShipped),
									StageStatus: to.Ptr(armedgeorder.StageStatusNone),
								},
								{
									StageName:   to.Ptr(armedgeorder.StageNameDelivered),
									StageStatus: to.Ptr(armedgeorder.StageStatusNone),
								},
								{
									StageName:   to.Ptr(armedgeorder.StageNameInUse),
									StageStatus: to.Ptr(armedgeorder.StageStatusNone),
								}},
							OrderItemType: to.Ptr(armedgeorder.OrderItemTypePurchase),
							Preferences: &armedgeorder.Preferences{
								TransportPreferences: &armedgeorder.TransportPreferences{
									PreferredShipmentType: to.Ptr(armedgeorder.TransportShipmentTypesMicrosoftManaged),
								},
							},
							ProductDetails: &armedgeorder.ProductDetails{
								Count: to.Ptr[int32](0),
								DisplayInfo: &armedgeorder.DisplayInfo{
									ConfigurationDisplayName: to.Ptr("Azure Stack Edge Pro - 1 GPU"),
									ProductFamilyDisplayName: to.Ptr("Azure Stack Edge"),
								},
								HierarchyInformation: &armedgeorder.HierarchyInformation{
									ConfigurationName: to.Ptr("azurestackedgegpu"),
									ProductFamilyName: to.Ptr("azurestackedge"),
									ProductLineName:   to.Ptr("azurestackedge"),
									ProductName:       to.Ptr("azurestackedgegpu"),
								},
								ProductDoubleEncryptionStatus: to.Ptr(armedgeorder.DoubleEncryptionStatusDisabled),
							},
							ReturnStatus: to.Ptr(armedgeorder.OrderItemReturnEnumNotReturnable),
						},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T12:29:25.6656282+05:30"); return t }()),
					},
				},
				{
					Name:     to.Ptr("TestOrderItemName01"),
					Type:     to.Ptr("Microsoft.EdgeOrder/orderItems"),
					ID:       to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/orderItems/TestOrderItemName01"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"carrot": to.Ptr("vegetable"),
						"mango":  to.Ptr("fruit"),
					},
					Properties: &armedgeorder.OrderItemProperties{
						AddressDetails: &armedgeorder.AddressDetails{
							ForwardAddress: &armedgeorder.AddressProperties{
								ContactDetails: &armedgeorder.ContactDetails{
									ContactName: to.Ptr("164 TOWNSEND ST"),
									EmailList: []*string{
										to.Ptr("ssemmail@microsoft.com"),
										to.Ptr("vishwamdir@microsoft.com")},
									Phone: to.Ptr("32131311"),
								},
								ShippingAddress: &armedgeorder.ShippingAddress{
									AddressType:     to.Ptr(armedgeorder.AddressTypeResidential),
									City:            to.Ptr("San Francisco"),
									CompanyName:     to.Ptr("Microsoft"),
									Country:         to.Ptr("US"),
									PostalCode:      to.Ptr("94107"),
									StateOrProvince: to.Ptr("CA"),
									StreetAddress1:  to.Ptr("16 TOWNSEND ST"),
									StreetAddress2:  to.Ptr("UNIT 1"),
									ZipExtendedCode: to.Ptr("1"),
								},
							},
						},
						OrderID: to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/locations/westus/orders/TestOrderItemName01"),
						OrderItemDetails: &armedgeorder.OrderItemDetails{
							CancellationStatus: to.Ptr(armedgeorder.OrderItemCancellationEnumCancellable),
							CurrentStage: &armedgeorder.StageDetails{
								StageName:   to.Ptr(armedgeorder.StageNamePlaced),
								StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
								StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T12:49:48.8869361+05:30"); return t }()),
							},
							DeletionStatus:        to.Ptr(armedgeorder.ActionStatusEnumNotAllowed),
							NotificationEmailList: []*string{},
							OrderItemStageHistory: []*armedgeorder.StageDetails{
								{
									StageName:   to.Ptr(armedgeorder.StageNamePlaced),
									StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
									StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T12:31:07.7430555+05:30"); return t }()),
								},
								{
									StageName:   to.Ptr(armedgeorder.StageNameConfirmed),
									StageStatus: to.Ptr(armedgeorder.StageStatusNone),
								},
								{
									StageName:   to.Ptr(armedgeorder.StageNameReadyToShip),
									StageStatus: to.Ptr(armedgeorder.StageStatusNone),
								},
								{
									StageName:   to.Ptr(armedgeorder.StageNameShipped),
									StageStatus: to.Ptr(armedgeorder.StageStatusNone),
								},
								{
									StageName:   to.Ptr(armedgeorder.StageNameDelivered),
									StageStatus: to.Ptr(armedgeorder.StageStatusNone),
								},
								{
									StageName:   to.Ptr(armedgeorder.StageNameInUse),
									StageStatus: to.Ptr(armedgeorder.StageStatusNone),
								}},
							OrderItemType: to.Ptr(armedgeorder.OrderItemTypePurchase),
							Preferences: &armedgeorder.Preferences{
								TransportPreferences: &armedgeorder.TransportPreferences{
									PreferredShipmentType: to.Ptr(armedgeorder.TransportShipmentTypesMicrosoftManaged),
								},
							},
							ProductDetails: &armedgeorder.ProductDetails{
								Count: to.Ptr[int32](0),
								DisplayInfo: &armedgeorder.DisplayInfo{
									ConfigurationDisplayName: to.Ptr("Azure Stack Edge Pro - 1 GPU"),
									ProductFamilyDisplayName: to.Ptr("Azure Stack Edge"),
								},
								HierarchyInformation: &armedgeorder.HierarchyInformation{
									ConfigurationName: to.Ptr("azurestackedgegpu"),
									ProductFamilyName: to.Ptr("azurestackedge"),
									ProductLineName:   to.Ptr("azurestackedge"),
									ProductName:       to.Ptr("azurestackedgegpu"),
								},
								ProductDoubleEncryptionStatus: to.Ptr(armedgeorder.DoubleEncryptionStatusDisabled),
							},
							ReturnStatus: to.Ptr(armedgeorder.OrderItemReturnEnumNotReturnable),
						},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T12:31:06.1244193+05:30"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OrderItemResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OrderItemResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListOrderItemsAtResourceGroupLevel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEdgeOrderManagementClient_GetOrderItemByName(t *testing.T) {
	// From example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/GetOrderItemByName.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetOrderItemByName"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorder.NewManagementClient("fa68082f-8ff7-4a25-95c7-ce9da541242f", cred, &options)
	res, err := client.GetOrderItemByName(ctx,
		"TestOrderItemName01",
		"TestRG",
		&armedgeorder.ManagementClientGetOrderItemByNameOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/GetOrderItemByName.json: %v", err)
	}
	// Response check
	{
		exampleRes := armedgeorder.OrderItemResource{
			Name:     to.Ptr("TestOrderItemName01"),
			Type:     to.Ptr("Microsoft.EdgeOrder/orderItems"),
			ID:       to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/orderItems/TestOrderItemName01"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"carrot": to.Ptr("vegetable"),
				"mango":  to.Ptr("fruit"),
			},
			Properties: &armedgeorder.OrderItemProperties{
				AddressDetails: &armedgeorder.AddressDetails{
					ForwardAddress: &armedgeorder.AddressProperties{
						ContactDetails: &armedgeorder.ContactDetails{
							ContactName: to.Ptr("164 TOWNSEND ST"),
							EmailList: []*string{
								to.Ptr("ssemmail@microsoft.com"),
								to.Ptr("vishwamdir@microsoft.com")},
							Phone: to.Ptr("3213131190"),
						},
						ShippingAddress: &armedgeorder.ShippingAddress{
							AddressType:     to.Ptr(armedgeorder.AddressTypeResidential),
							City:            to.Ptr("San Francisco"),
							CompanyName:     to.Ptr("Microsoft"),
							Country:         to.Ptr("US"),
							PostalCode:      to.Ptr("94107"),
							StateOrProvince: to.Ptr("CA"),
							StreetAddress1:  to.Ptr("16 TOWNSEND ST"),
							StreetAddress2:  to.Ptr("UNIT 1"),
							ZipExtendedCode: to.Ptr("1"),
						},
					},
				},
				OrderID: to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/locations/westus/orders/TestOrderItemName01"),
				OrderItemDetails: &armedgeorder.OrderItemDetails{
					CancellationStatus: to.Ptr(armedgeorder.OrderItemCancellationEnumCancellable),
					CurrentStage: &armedgeorder.StageDetails{
						StageName:   to.Ptr(armedgeorder.StageNamePlaced),
						StageStatus: to.Ptr(armedgeorder.StageStatusInProgress),
						StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T13:08:14.0368516+05:30"); return t }()),
					},
					DeletionStatus:        to.Ptr(armedgeorder.ActionStatusEnumNotAllowed),
					NotificationEmailList: []*string{},
					OrderItemStageHistory: []*armedgeorder.StageDetails{
						{
							StageName:   to.Ptr(armedgeorder.StageNamePlaced),
							StageStatus: to.Ptr(armedgeorder.StageStatusNone),
						},
						{
							StageName:   to.Ptr(armedgeorder.StageNameConfirmed),
							StageStatus: to.Ptr(armedgeorder.StageStatusNone),
						},
						{
							StageName:   to.Ptr(armedgeorder.StageNameReadyToShip),
							StageStatus: to.Ptr(armedgeorder.StageStatusNone),
						},
						{
							StageName:   to.Ptr(armedgeorder.StageNameShipped),
							StageStatus: to.Ptr(armedgeorder.StageStatusNone),
						},
						{
							StageName:   to.Ptr(armedgeorder.StageNameDelivered),
							StageStatus: to.Ptr(armedgeorder.StageStatusNone),
						},
						{
							StageName:   to.Ptr(armedgeorder.StageNameInUse),
							StageStatus: to.Ptr(armedgeorder.StageStatusNone),
						}},
					OrderItemType: to.Ptr(armedgeorder.OrderItemTypePurchase),
					Preferences: &armedgeorder.Preferences{
						TransportPreferences: &armedgeorder.TransportPreferences{
							PreferredShipmentType: to.Ptr(armedgeorder.TransportShipmentTypesMicrosoftManaged),
						},
					},
					ProductDetails: &armedgeorder.ProductDetails{
						Count: to.Ptr[int32](0),
						DisplayInfo: &armedgeorder.DisplayInfo{
							ConfigurationDisplayName: to.Ptr("Azure Stack Edge Pro - 1 GPU"),
							ProductFamilyDisplayName: to.Ptr("Azure Stack Edge"),
						},
						HierarchyInformation: &armedgeorder.HierarchyInformation{
							ConfigurationName: to.Ptr("azurestackedgegpu"),
							ProductFamilyName: to.Ptr("azurestackedge"),
							ProductLineName:   to.Ptr("azurestackedge"),
							ProductName:       to.Ptr("azurestackedgegpu"),
						},
						ProductDoubleEncryptionStatus: to.Ptr(armedgeorder.DoubleEncryptionStatusDisabled),
					},
					ReturnStatus: to.Ptr(armedgeorder.OrderItemReturnEnumNotReturnable),
				},
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T13:08:14.0368516+05:30"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OrderItemResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OrderItemResource)
			t.Fatalf("Mock response is not equal to example response for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/GetOrderItemByName.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEdgeOrderManagementClient_CreateOrderItem(t *testing.T) {
	// From example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/CreateOrderItem.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrderItem"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorder.NewManagementClient("fa68082f-8ff7-4a25-95c7-ce9da541242f", cred, &options)
	poller, err := client.BeginCreateOrderItem(ctx,
		"TestOrderItemName01",
		"TestRG",
		armedgeorder.OrderItemResource{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"carrot": to.Ptr("vegetable"),
				"mango":  to.Ptr("fruit"),
			},
			Properties: &armedgeorder.OrderItemProperties{
				AddressDetails: &armedgeorder.AddressDetails{
					ForwardAddress: &armedgeorder.AddressProperties{
						ContactDetails: &armedgeorder.ContactDetails{
							ContactName: to.Ptr("164 TOWNSEND ST"),
							EmailList: []*string{
								to.Ptr("ssemmail@microsoft.com"),
								to.Ptr("vishwamdir@microsoft.com")},
							Phone: to.Ptr("3213131190"),
						},
						ShippingAddress: &armedgeorder.ShippingAddress{
							AddressType:     to.Ptr(armedgeorder.AddressTypeResidential),
							City:            to.Ptr("San Francisco"),
							CompanyName:     to.Ptr("Microsoft"),
							Country:         to.Ptr("US"),
							PostalCode:      to.Ptr("94107"),
							StateOrProvince: to.Ptr("CA"),
							StreetAddress1:  to.Ptr("16 TOWNSEND ST"),
							StreetAddress2:  to.Ptr("UNIT 1"),
							ZipExtendedCode: to.Ptr("1"),
						},
					},
				},
				OrderID: to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/locations/westus/orders/TestOrderItemName01"),
				OrderItemDetails: &armedgeorder.OrderItemDetails{
					OrderItemType: to.Ptr(armedgeorder.OrderItemTypePurchase),
					Preferences: &armedgeorder.Preferences{
						TransportPreferences: &armedgeorder.TransportPreferences{
							PreferredShipmentType: to.Ptr(armedgeorder.TransportShipmentTypesMicrosoftManaged),
						},
					},
					ProductDetails: &armedgeorder.ProductDetails{
						HierarchyInformation: &armedgeorder.HierarchyInformation{
							ConfigurationName: to.Ptr("AzureStackEdgeGPU"),
							ProductFamilyName: to.Ptr("AzureStackEdge"),
							ProductLineName:   to.Ptr("AzureStackEdge"),
							ProductName:       to.Ptr("AzureStackEdgeGPU"),
						},
					},
				},
			},
		},
		&armedgeorder.ManagementClientBeginCreateOrderItemOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/CreateOrderItem.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/CreateOrderItem.json: %v", err)
	}
	// Response check
	{
		exampleRes := armedgeorder.OrderItemResource{
			Name:     to.Ptr("TestOrderItemName01"),
			Type:     to.Ptr("Microsoft.EdgeOrder/orderItems"),
			ID:       to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/orderItems/TestOrderItemName01"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"carrot": to.Ptr("vegetable"),
				"mango":  to.Ptr("fruit"),
			},
			Properties: &armedgeorder.OrderItemProperties{
				AddressDetails: &armedgeorder.AddressDetails{
					ForwardAddress: &armedgeorder.AddressProperties{
						ContactDetails: &armedgeorder.ContactDetails{
							ContactName: to.Ptr("164 TOWNSEND ST"),
							EmailList: []*string{
								to.Ptr("ssemmail@microsoft.com"),
								to.Ptr("vishwamdir@microsoft.com")},
							Phone: to.Ptr("3213131190"),
						},
						ShippingAddress: &armedgeorder.ShippingAddress{
							AddressType:     to.Ptr(armedgeorder.AddressTypeResidential),
							City:            to.Ptr("San Francisco"),
							CompanyName:     to.Ptr("Microsoft"),
							Country:         to.Ptr("US"),
							PostalCode:      to.Ptr("94107"),
							StateOrProvince: to.Ptr("CA"),
							StreetAddress1:  to.Ptr("16 TOWNSEND ST"),
							StreetAddress2:  to.Ptr("UNIT 1"),
							ZipExtendedCode: to.Ptr("1"),
						},
					},
				},
				OrderID: to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/locations/westus/orders/TestOrderItemName01"),
				OrderItemDetails: &armedgeorder.OrderItemDetails{
					CancellationStatus: to.Ptr(armedgeorder.OrderItemCancellationEnumCancellable),
					CurrentStage: &armedgeorder.StageDetails{
						StageName:   to.Ptr(armedgeorder.StageNamePlaced),
						StageStatus: to.Ptr(armedgeorder.StageStatusInProgress),
						StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T13:08:14.0368516+05:30"); return t }()),
					},
					DeletionStatus:        to.Ptr(armedgeorder.ActionStatusEnumNotAllowed),
					NotificationEmailList: []*string{},
					OrderItemStageHistory: []*armedgeorder.StageDetails{
						{
							StageName:   to.Ptr(armedgeorder.StageNamePlaced),
							StageStatus: to.Ptr(armedgeorder.StageStatusNone),
						},
						{
							StageName:   to.Ptr(armedgeorder.StageNameConfirmed),
							StageStatus: to.Ptr(armedgeorder.StageStatusNone),
						},
						{
							StageName:   to.Ptr(armedgeorder.StageNameReadyToShip),
							StageStatus: to.Ptr(armedgeorder.StageStatusNone),
						},
						{
							StageName:   to.Ptr(armedgeorder.StageNameShipped),
							StageStatus: to.Ptr(armedgeorder.StageStatusNone),
						},
						{
							StageName:   to.Ptr(armedgeorder.StageNameDelivered),
							StageStatus: to.Ptr(armedgeorder.StageStatusNone),
						},
						{
							StageName:   to.Ptr(armedgeorder.StageNameInUse),
							StageStatus: to.Ptr(armedgeorder.StageStatusNone),
						}},
					OrderItemType: to.Ptr(armedgeorder.OrderItemTypePurchase),
					Preferences: &armedgeorder.Preferences{
						TransportPreferences: &armedgeorder.TransportPreferences{
							PreferredShipmentType: to.Ptr(armedgeorder.TransportShipmentTypesMicrosoftManaged),
						},
					},
					ProductDetails: &armedgeorder.ProductDetails{
						Count: to.Ptr[int32](0),
						DisplayInfo: &armedgeorder.DisplayInfo{
							ConfigurationDisplayName: to.Ptr("Azure Stack Edge Pro - 1 GPU"),
							ProductFamilyDisplayName: to.Ptr("Azure Stack Edge"),
						},
						HierarchyInformation: &armedgeorder.HierarchyInformation{
							ConfigurationName: to.Ptr("azurestackedgegpu"),
							ProductFamilyName: to.Ptr("azurestackedge"),
							ProductLineName:   to.Ptr("azurestackedge"),
							ProductName:       to.Ptr("azurestackedgegpu"),
						},
						ProductDoubleEncryptionStatus: to.Ptr(armedgeorder.DoubleEncryptionStatusDisabled),
					},
					ReturnStatus: to.Ptr(armedgeorder.OrderItemReturnEnumNotReturnable),
				},
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T13:08:14.0368516+05:30"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OrderItemResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OrderItemResource)
			t.Fatalf("Mock response is not equal to example response for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/CreateOrderItem.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEdgeOrderManagementClient_DeleteOrderItemByName(t *testing.T) {
	// From example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/DeleteOrderItemByName.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteOrderItemByName"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorder.NewManagementClient("fa68082f-8ff7-4a25-95c7-ce9da541242f", cred, &options)
	poller, err := client.BeginDeleteOrderItemByName(ctx,
		"TestOrderItemName01",
		"TestRG",
		&armedgeorder.ManagementClientBeginDeleteOrderItemByNameOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/DeleteOrderItemByName.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/DeleteOrderItemByName.json: %v", err)
	}
}

func TestEdgeOrderManagementClient_UpdateOrderItem(t *testing.T) {
	// From example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/UpdateOrderItem.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateOrderItem"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorder.NewManagementClient("fa68082f-8ff7-4a25-95c7-ce9da541242f", cred, &options)
	poller, err := client.BeginUpdateOrderItem(ctx,
		"TestOrderItemName01",
		"TestRG",
		armedgeorder.OrderItemUpdateParameter{
			Properties: &armedgeorder.OrderItemUpdateProperties{
				ForwardAddress: &armedgeorder.AddressProperties{
					ContactDetails: &armedgeorder.ContactDetails{
						ContactName: to.Ptr("Updated contact name"),
						EmailList: []*string{
							to.Ptr("testemail@microsoft.com")},
						Phone: to.Ptr("2222200000"),
					},
				},
				Preferences: &armedgeorder.Preferences{
					TransportPreferences: &armedgeorder.TransportPreferences{
						PreferredShipmentType: to.Ptr(armedgeorder.TransportShipmentTypesCustomerManaged),
					},
				},
			},
			Tags: map[string]*string{
				"ant":    to.Ptr("insect"),
				"pigeon": to.Ptr("bird"),
				"tiger":  to.Ptr("animal"),
			},
		},
		&armedgeorder.ManagementClientBeginUpdateOrderItemOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/UpdateOrderItem.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/UpdateOrderItem.json: %v", err)
	}
	// Response check
	{
		exampleRes := armedgeorder.OrderItemResource{
			Name:     to.Ptr("TestOrderItemName01"),
			Type:     to.Ptr("Microsoft.EdgeOrder/orderItems"),
			ID:       to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/orderItems/TestOrderItemName01"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"ant":    to.Ptr("insect"),
				"pigeon": to.Ptr("bird"),
				"tiger":  to.Ptr("animal"),
			},
			Properties: &armedgeorder.OrderItemProperties{
				AddressDetails: &armedgeorder.AddressDetails{
					ForwardAddress: &armedgeorder.AddressProperties{
						ContactDetails: &armedgeorder.ContactDetails{
							ContactName: to.Ptr("Updated contact name"),
							EmailList: []*string{
								to.Ptr("testemail@microsoft.com")},
							Phone: to.Ptr("2222200000"),
						},
						ShippingAddress: &armedgeorder.ShippingAddress{
							AddressType:     to.Ptr(armedgeorder.AddressTypeResidential),
							City:            to.Ptr("San Francisco"),
							CompanyName:     to.Ptr("Microsoft"),
							Country:         to.Ptr("US"),
							PostalCode:      to.Ptr("94107"),
							StateOrProvince: to.Ptr("CA"),
							StreetAddress1:  to.Ptr("16 TOWNSEND ST"),
							StreetAddress2:  to.Ptr("UNIT 1"),
							ZipExtendedCode: to.Ptr("1"),
						},
					},
				},
				OrderID: to.Ptr("/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/locations/westus/orders/TestOrderItemName01"),
				OrderItemDetails: &armedgeorder.OrderItemDetails{
					CancellationStatus: to.Ptr(armedgeorder.OrderItemCancellationEnumCancellable),
					CurrentStage: &armedgeorder.StageDetails{
						StageName:   to.Ptr(armedgeorder.StageNamePlaced),
						StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
						StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T13:14:40.0815406+05:30"); return t }()),
					},
					DeletionStatus:        to.Ptr(armedgeorder.ActionStatusEnumNotAllowed),
					NotificationEmailList: []*string{},
					OrderItemStageHistory: []*armedgeorder.StageDetails{
						{
							StageName:   to.Ptr(armedgeorder.StageNamePlaced),
							StageStatus: to.Ptr(armedgeorder.StageStatusSucceeded),
							StartTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T13:14:40.0815406+05:30"); return t }()),
						},
						{
							StageName:   to.Ptr(armedgeorder.StageNameConfirmed),
							StageStatus: to.Ptr(armedgeorder.StageStatusNone),
						},
						{
							StageName:   to.Ptr(armedgeorder.StageNameReadyToShip),
							StageStatus: to.Ptr(armedgeorder.StageStatusNone),
						},
						{
							StageName:   to.Ptr(armedgeorder.StageNameShipped),
							StageStatus: to.Ptr(armedgeorder.StageStatusNone),
						},
						{
							StageName:   to.Ptr(armedgeorder.StageNameDelivered),
							StageStatus: to.Ptr(armedgeorder.StageStatusNone),
						},
						{
							StageName:   to.Ptr(armedgeorder.StageNameInUse),
							StageStatus: to.Ptr(armedgeorder.StageStatusNone),
						}},
					OrderItemType: to.Ptr(armedgeorder.OrderItemTypePurchase),
					Preferences: &armedgeorder.Preferences{
						TransportPreferences: &armedgeorder.TransportPreferences{
							PreferredShipmentType: to.Ptr(armedgeorder.TransportShipmentTypesCustomerManaged),
						},
					},
					ProductDetails: &armedgeorder.ProductDetails{
						Count: to.Ptr[int32](0),
						DisplayInfo: &armedgeorder.DisplayInfo{
							ConfigurationDisplayName: to.Ptr("Azure Stack Edge Pro - 1 GPU"),
							ProductFamilyDisplayName: to.Ptr("Azure Stack Edge"),
						},
						HierarchyInformation: &armedgeorder.HierarchyInformation{
							ConfigurationName: to.Ptr("azurestackedgegpu"),
							ProductFamilyName: to.Ptr("azurestackedge"),
							ProductLineName:   to.Ptr("azurestackedge"),
							ProductName:       to.Ptr("azurestackedgegpu"),
						},
						ProductDoubleEncryptionStatus: to.Ptr(armedgeorder.DoubleEncryptionStatusDisabled),
					},
					ReturnStatus: to.Ptr(armedgeorder.OrderItemReturnEnumNotReturnable),
				},
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T13:14:37.4649597+05:30"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OrderItemResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OrderItemResource)
			t.Fatalf("Mock response is not equal to example response for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/UpdateOrderItem.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEdgeOrderManagementClient_CancelOrderItem(t *testing.T) {
	// From example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/CancelOrderItem.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CancelOrderItem"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorder.NewManagementClient("fa68082f-8ff7-4a25-95c7-ce9da541242f", cred, &options)
	_, err := client.CancelOrderItem(ctx,
		"TestOrderItemName1",
		"TestRG",
		armedgeorder.CancellationReason{
			Reason: to.Ptr("Order cancelled"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/CancelOrderItem.json: %v", err)
	}
}

func TestEdgeOrderManagementClient_ReturnOrderItem(t *testing.T) {
	// From example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ReturnOrderItem.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReturnOrderItem"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armedgeorder.NewManagementClient("fa68082f-8ff7-4a25-95c7-ce9da541242f", cred, &options)
	poller, err := client.BeginReturnOrderItem(ctx,
		"TestOrderName1",
		"TestRG",
		armedgeorder.ReturnOrderItemDetails{
			ReturnReason: to.Ptr("Order returned"),
		},
		&armedgeorder.ManagementClientBeginReturnOrderItemOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ReturnOrderItem.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ReturnOrderItem.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
