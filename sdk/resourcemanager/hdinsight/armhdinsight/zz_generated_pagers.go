//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhdinsight

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// ApplicationsClientListByClusterPager provides operations for iterating over paged responses.
type ApplicationsClientListByClusterPager struct {
	client    *ApplicationsClient
	current   ApplicationsClientListByClusterResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ApplicationsClientListByClusterResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ApplicationsClientListByClusterPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ApplicationListResult.NextLink == nil || len(*p.current.ApplicationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ApplicationsClientListByClusterPager) NextPage(ctx context.Context) (ApplicationsClientListByClusterResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ApplicationsClientListByClusterResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ApplicationsClientListByClusterResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ApplicationsClientListByClusterResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ApplicationsClientListByClusterResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByClusterHandleResponse(resp)
	if err != nil {
		return ApplicationsClientListByClusterResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ClustersClientListByResourceGroupPager provides operations for iterating over paged responses.
type ClustersClientListByResourceGroupPager struct {
	client    *ClustersClient
	current   ClustersClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ClustersClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClustersClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ClusterListResult.NextLink == nil || len(*p.current.ClusterListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ClustersClientListByResourceGroupPager) NextPage(ctx context.Context) (ClustersClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ClustersClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClustersClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClustersClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClustersClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return ClustersClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ClustersClientListPager provides operations for iterating over paged responses.
type ClustersClientListPager struct {
	client    *ClustersClient
	current   ClustersClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ClustersClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClustersClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ClusterListResult.NextLink == nil || len(*p.current.ClusterListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ClustersClientListPager) NextPage(ctx context.Context) (ClustersClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ClustersClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClustersClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClustersClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClustersClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ClustersClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateEndpointConnectionsClientListByClusterPager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsClientListByClusterPager struct {
	client    *PrivateEndpointConnectionsClient
	current   PrivateEndpointConnectionsClientListByClusterResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsClientListByClusterResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateEndpointConnectionsClientListByClusterPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateEndpointConnectionsClientListByClusterPager) NextPage(ctx context.Context) (PrivateEndpointConnectionsClientListByClusterResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateEndpointConnectionsClientListByClusterResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateEndpointConnectionsClientListByClusterResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateEndpointConnectionsClientListByClusterResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateEndpointConnectionsClientListByClusterResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByClusterHandleResponse(resp)
	if err != nil {
		return PrivateEndpointConnectionsClientListByClusterResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ScriptActionsClientListByClusterPager provides operations for iterating over paged responses.
type ScriptActionsClientListByClusterPager struct {
	client    *ScriptActionsClient
	current   ScriptActionsClientListByClusterResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ScriptActionsClientListByClusterResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ScriptActionsClientListByClusterPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ScriptActionsList.NextLink == nil || len(*p.current.ScriptActionsList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ScriptActionsClientListByClusterPager) NextPage(ctx context.Context) (ScriptActionsClientListByClusterResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ScriptActionsClientListByClusterResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ScriptActionsClientListByClusterResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ScriptActionsClientListByClusterResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ScriptActionsClientListByClusterResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByClusterHandleResponse(resp)
	if err != nil {
		return ScriptActionsClientListByClusterResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ScriptExecutionHistoryClientListByClusterPager provides operations for iterating over paged responses.
type ScriptExecutionHistoryClientListByClusterPager struct {
	client    *ScriptExecutionHistoryClient
	current   ScriptExecutionHistoryClientListByClusterResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ScriptExecutionHistoryClientListByClusterResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ScriptExecutionHistoryClientListByClusterPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ScriptActionExecutionHistoryList.NextLink == nil || len(*p.current.ScriptActionExecutionHistoryList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ScriptExecutionHistoryClientListByClusterPager) NextPage(ctx context.Context) (ScriptExecutionHistoryClientListByClusterResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ScriptExecutionHistoryClientListByClusterResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ScriptExecutionHistoryClientListByClusterResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ScriptExecutionHistoryClientListByClusterResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ScriptExecutionHistoryClientListByClusterResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByClusterHandleResponse(resp)
	if err != nil {
		return ScriptExecutionHistoryClientListByClusterResponse{}, err
	}
	p.current = result
	return p.current, nil
}
