//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhdinsight_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hdinsight/armhdinsight"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestClusters_Create(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithAutoscaleConfig.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create HDInsight cluster with Autoscale configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewClustersClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"rg1",
		"cluster1",
		armhdinsight.ClusterCreateParametersExtended{
			Properties: &armhdinsight.ClusterCreateProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					ComponentVersion: map[string]*string{
						"Hadoop": to.Ptr("2.7"),
					},
					Configurations: map[string]interface{}{
						"gateway": map[string]interface{}{
							"restAuthCredential.isEnabled": true,
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: to.Ptr("hadoop"),
				},
				ClusterVersion: to.Ptr("3.6"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("workernode"),
							AutoscaleConfiguration: &armhdinsight.Autoscale{
								Recurrence: &armhdinsight.AutoscaleRecurrence{
									Schedule: []*armhdinsight.AutoscaleSchedule{
										{
											Days: []*armhdinsight.DaysOfWeek{
												to.Ptr(armhdinsight.DaysOfWeekMonday),
												to.Ptr(armhdinsight.DaysOfWeekTuesday),
												to.Ptr(armhdinsight.DaysOfWeekWednesday),
												to.Ptr(armhdinsight.DaysOfWeekThursday),
												to.Ptr(armhdinsight.DaysOfWeekFriday)},
											TimeAndCapacity: &armhdinsight.AutoscaleTimeAndCapacity{
												MaxInstanceCount: to.Ptr[int32](3),
												MinInstanceCount: to.Ptr[int32](3),
												Time:             to.Ptr("09:00"),
											},
										},
										{
											Days: []*armhdinsight.DaysOfWeek{
												to.Ptr(armhdinsight.DaysOfWeekMonday),
												to.Ptr(armhdinsight.DaysOfWeekTuesday),
												to.Ptr(armhdinsight.DaysOfWeekWednesday),
												to.Ptr(armhdinsight.DaysOfWeekThursday),
												to.Ptr(armhdinsight.DaysOfWeekFriday)},
											TimeAndCapacity: &armhdinsight.AutoscaleTimeAndCapacity{
												MaxInstanceCount: to.Ptr[int32](6),
												MinInstanceCount: to.Ptr[int32](6),
												Time:             to.Ptr("18:00"),
											},
										},
										{
											Days: []*armhdinsight.DaysOfWeek{
												to.Ptr(armhdinsight.DaysOfWeekSaturday),
												to.Ptr(armhdinsight.DaysOfWeekSunday)},
											TimeAndCapacity: &armhdinsight.AutoscaleTimeAndCapacity{
												MaxInstanceCount: to.Ptr[int32](2),
												MinInstanceCount: to.Ptr[int32](2),
												Time:             to.Ptr("09:00"),
											},
										},
										{
											Days: []*armhdinsight.DaysOfWeek{
												to.Ptr(armhdinsight.DaysOfWeekSaturday),
												to.Ptr(armhdinsight.DaysOfWeekSunday)},
											TimeAndCapacity: &armhdinsight.AutoscaleTimeAndCapacity{
												MaxInstanceCount: to.Ptr[int32](4),
												MinInstanceCount: to.Ptr[int32](4),
												Time:             to.Ptr("18:00"),
											},
										}},
									TimeZone: to.Ptr("China Standard Time"),
								},
							},
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D4_V2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							ScriptActions:       []*armhdinsight.ScriptAction{},
							TargetInstanceCount: to.Ptr[int32](4),
						}},
				},
				OSType: to.Ptr(armhdinsight.OSTypeLinux),
				StorageProfile: &armhdinsight.StorageProfile{
					Storageaccounts: []*armhdinsight.StorageAccount{
						{
							Name:      to.Ptr("mystorage.blob.core.windows.net"),
							Container: to.Ptr("hdinsight-autoscale-tes-2019-06-18t05-49-16-591z"),
							IsDefault: to.Ptr(true),
							Key:       to.Ptr("storagekey"),
						}},
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
		},
		&armhdinsight.ClustersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithAutoscaleConfig.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithAutoscaleConfig.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.Cluster{
			Name:     to.Ptr("cluster1"),
			Type:     to.Ptr("Microsoft.HDInsight/clusters"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1"),
			Location: to.Ptr("East US"),
			Etag:     to.Ptr("fdf2a6e8-ce83-42cc-8c2d-0ceb11a370ff"),
			Properties: &armhdinsight.ClusterGetProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Blueprint: to.Ptr("https://blueprints.azurehdinsight.net/hadoop-4.0.1000.1.1910270459.json"),
					ComponentVersion: map[string]*string{
						"Hadoop": to.Ptr("3.1"),
					},
					Kind: to.Ptr("HADOOP"),
				},
				ClusterState:   to.Ptr("Running"),
				ClusterVersion: to.Ptr("4.0.1000.1"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d12_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d4_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](4),
						},
						{
							Name: to.Ptr("zookeepernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_a2_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						}},
				},
				ConnectivityEndpoints: []*armhdinsight.ConnectivityEndpoint{
					{
						Name:     to.Ptr("SSH"),
						Location: to.Ptr("cluster1-ssh.azurehdinsight.net"),
						Port:     to.Ptr[int32](22),
						Protocol: to.Ptr("TCP"),
					},
					{
						Name:     to.Ptr("HTTPS"),
						Location: to.Ptr("cluster1.azurehdinsight.net"),
						Port:     to.Ptr[int32](443),
						Protocol: to.Ptr("TCP"),
					}},
				CreatedDate:       to.Ptr("2019-11-18T12:25:43.48"),
				OSType:            to.Ptr(armhdinsight.OSTypeLinux),
				ProvisioningState: to.Ptr(armhdinsight.HDInsightClusterProvisioningStateSucceeded),
				QuotaInfo: &armhdinsight.QuotaInfo{
					CoresUsed: to.Ptr[int32](40),
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithAutoscaleConfig.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxHadoopAdlsGen2.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Hadoop cluster with Azure Data Lake Storage Gen 2"},
	})
	client = armhdinsight.NewClustersClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"rg1",
		"cluster1",
		armhdinsight.ClusterCreateParametersExtended{
			Properties: &armhdinsight.ClusterCreateProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Configurations: map[string]interface{}{
						"gateway": map[string]interface{}{
							"restAuthCredential.isEnabled": "true",
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: to.Ptr("Hadoop"),
				},
				ClusterVersion: to.Ptr("3.6"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D3_V2"),
							},
							MinInstanceCount: to.Ptr[int32](1),
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D3_V2"),
							},
							MinInstanceCount: to.Ptr[int32](1),
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](4),
						},
						{
							Name: to.Ptr("zookeepernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Small"),
							},
							MinInstanceCount: to.Ptr[int32](1),
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						}},
				},
				OSType: to.Ptr(armhdinsight.OSTypeLinux),
				StorageProfile: &armhdinsight.StorageProfile{
					Storageaccounts: []*armhdinsight.StorageAccount{
						{
							Name:       to.Ptr("mystorage.dfs.core.windows.net"),
							FileSystem: to.Ptr("default"),
							IsDefault:  to.Ptr(true),
							Key:        to.Ptr("storagekey"),
						}},
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
			},
		},
		&armhdinsight.ClustersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxHadoopAdlsGen2.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxHadoopAdlsGen2.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.Cluster{
			Name:     to.Ptr("cluster1"),
			Type:     to.Ptr("Microsoft.HDInsight/clusters"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1"),
			Location: to.Ptr("East US"),
			Etag:     to.Ptr("fdf2a6e8-ce83-42cc-8c2d-0ceb11a370ff"),
			Properties: &armhdinsight.ClusterGetProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Blueprint: to.Ptr("https://blueprints.azurehdinsight.net/hadoop-4.0.1000.1.1910270459.json"),
					ComponentVersion: map[string]*string{
						"Hadoop": to.Ptr("3.1"),
					},
					Kind: to.Ptr("HADOOP"),
				},
				ClusterState:   to.Ptr("Running"),
				ClusterVersion: to.Ptr("4.0.1000.1"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d12_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d4_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](4),
						},
						{
							Name: to.Ptr("zookeepernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_a2_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						}},
				},
				ConnectivityEndpoints: []*armhdinsight.ConnectivityEndpoint{
					{
						Name:     to.Ptr("SSH"),
						Location: to.Ptr("cluster1-ssh.azurehdinsight.net"),
						Port:     to.Ptr[int32](22),
						Protocol: to.Ptr("TCP"),
					},
					{
						Name:     to.Ptr("HTTPS"),
						Location: to.Ptr("cluster1.azurehdinsight.net"),
						Port:     to.Ptr[int32](443),
						Protocol: to.Ptr("TCP"),
					}},
				CreatedDate:       to.Ptr("2019-11-18T12:25:43.48"),
				OSType:            to.Ptr(armhdinsight.OSTypeLinux),
				ProvisioningState: to.Ptr(armhdinsight.HDInsightClusterProvisioningStateSucceeded),
				QuotaInfo: &armhdinsight.QuotaInfo{
					CoresUsed: to.Ptr[int32](40),
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxHadoopAdlsGen2.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxHadoopSshPassword.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Hadoop on Linux cluster with SSH password"},
	})
	client = armhdinsight.NewClustersClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"rg1",
		"cluster1",
		armhdinsight.ClusterCreateParametersExtended{
			Properties: &armhdinsight.ClusterCreateProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Configurations: map[string]interface{}{
						"gateway": map[string]interface{}{
							"restAuthCredential.isEnabled": "true",
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: to.Ptr("Hadoop"),
				},
				ClusterVersion: to.Ptr("3.5"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D3_V2"),
							},
							MinInstanceCount: to.Ptr[int32](1),
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D3_V2"),
							},
							MinInstanceCount: to.Ptr[int32](1),
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](4),
						},
						{
							Name: to.Ptr("zookeepernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Small"),
							},
							MinInstanceCount: to.Ptr[int32](1),
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						}},
				},
				OSType: to.Ptr(armhdinsight.OSTypeLinux),
				StorageProfile: &armhdinsight.StorageProfile{
					Storageaccounts: []*armhdinsight.StorageAccount{
						{
							Name:      to.Ptr("mystorage.blob.core.windows.net"),
							Container: to.Ptr("containername"),
							IsDefault: to.Ptr(true),
							Key:       to.Ptr("storagekey"),
						}},
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
			},
		},
		&armhdinsight.ClustersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxHadoopSshPassword.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxHadoopSshPassword.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.Cluster{
			Name:     to.Ptr("cluster1"),
			Type:     to.Ptr("Microsoft.HDInsight/clusters"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1"),
			Location: to.Ptr("East US"),
			Etag:     to.Ptr("fdf2a6e8-ce83-42cc-8c2d-0ceb11a370ff"),
			Properties: &armhdinsight.ClusterGetProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Blueprint: to.Ptr("https://blueprints.azurehdinsight.net/hadoop-4.0.1000.1.1910270459.json"),
					ComponentVersion: map[string]*string{
						"Hadoop": to.Ptr("3.1"),
					},
					Kind: to.Ptr("HADOOP"),
				},
				ClusterState:   to.Ptr("Running"),
				ClusterVersion: to.Ptr("4.0.1000.1"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d12_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d4_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](4),
						},
						{
							Name: to.Ptr("zookeepernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_a2_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						}},
				},
				ConnectivityEndpoints: []*armhdinsight.ConnectivityEndpoint{
					{
						Name:     to.Ptr("SSH"),
						Location: to.Ptr("cluster1-ssh.azurehdinsight.net"),
						Port:     to.Ptr[int32](22),
						Protocol: to.Ptr("TCP"),
					},
					{
						Name:     to.Ptr("HTTPS"),
						Location: to.Ptr("cluster1.azurehdinsight.net"),
						Port:     to.Ptr[int32](443),
						Protocol: to.Ptr("TCP"),
					}},
				CreatedDate:       to.Ptr("2019-11-18T12:25:43.48"),
				OSType:            to.Ptr(armhdinsight.OSTypeLinux),
				ProvisioningState: to.Ptr(armhdinsight.HDInsightClusterProvisioningStateSucceeded),
				QuotaInfo: &armhdinsight.QuotaInfo{
					CoresUsed: to.Ptr[int32](40),
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxHadoopSshPassword.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxHadoopSshPublicKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Hadoop on Linux cluster with SSH public key"},
	})
	client = armhdinsight.NewClustersClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"rg1",
		"cluster1",
		armhdinsight.ClusterCreateParametersExtended{
			Properties: &armhdinsight.ClusterCreateProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Configurations: map[string]interface{}{
						"gateway": map[string]interface{}{
							"restAuthCredential.isEnabled": true,
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: to.Ptr("Hadoop"),
				},
				ClusterVersion: to.Ptr("3.5"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D3_V2"),
							},
							MinInstanceCount: to.Ptr[int32](1),
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									SSHProfile: &armhdinsight.SSHProfile{
										PublicKeys: []*armhdinsight.SSHPublicKey{
											{
												CertificateData: to.Ptr("**********"),
											}},
									},
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D3_V2"),
							},
							MinInstanceCount: to.Ptr[int32](1),
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](4),
						},
						{
							Name: to.Ptr("zookeepernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Small"),
							},
							MinInstanceCount: to.Ptr[int32](1),
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						}},
				},
				OSType: to.Ptr(armhdinsight.OSTypeLinux),
				StorageProfile: &armhdinsight.StorageProfile{
					Storageaccounts: []*armhdinsight.StorageAccount{
						{
							Name:      to.Ptr("mystorage.blob.core.windows.net"),
							Container: to.Ptr("containername"),
							IsDefault: to.Ptr(true),
							Key:       to.Ptr("storagekey"),
						}},
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
			},
		},
		&armhdinsight.ClustersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxHadoopSshPublicKey.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxHadoopSshPublicKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.Cluster{
			Name:     to.Ptr("cluster1"),
			Type:     to.Ptr("Microsoft.HDInsight/clusters"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1"),
			Location: to.Ptr("East US"),
			Etag:     to.Ptr("fdf2a6e8-ce83-42cc-8c2d-0ceb11a370ff"),
			Properties: &armhdinsight.ClusterGetProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Blueprint: to.Ptr("https://blueprints.azurehdinsight.net/hadoop-4.0.1000.1.1910270459.json"),
					ComponentVersion: map[string]*string{
						"Hadoop": to.Ptr("3.1"),
					},
					Kind: to.Ptr("HADOOP"),
				},
				ClusterState:   to.Ptr("Running"),
				ClusterVersion: to.Ptr("4.0.1000.1"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d12_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d4_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](4),
						},
						{
							Name: to.Ptr("zookeepernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_a2_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						}},
				},
				ConnectivityEndpoints: []*armhdinsight.ConnectivityEndpoint{
					{
						Name:     to.Ptr("SSH"),
						Location: to.Ptr("cluster1-ssh.azurehdinsight.net"),
						Port:     to.Ptr[int32](22),
						Protocol: to.Ptr("TCP"),
					},
					{
						Name:     to.Ptr("HTTPS"),
						Location: to.Ptr("cluster1.azurehdinsight.net"),
						Port:     to.Ptr[int32](443),
						Protocol: to.Ptr("TCP"),
					}},
				CreatedDate:       to.Ptr("2019-11-18T12:25:43.48"),
				OSType:            to.Ptr(armhdinsight.OSTypeLinux),
				ProvisioningState: to.Ptr(armhdinsight.HDInsightClusterProvisioningStateSucceeded),
				QuotaInfo: &armhdinsight.QuotaInfo{
					CoresUsed: to.Ptr[int32](40),
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxHadoopSshPublicKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateKafkaClusterWithKafkaRestProxy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Kafka cluster with Kafka Rest Proxy"},
	})
	client = armhdinsight.NewClustersClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"rg1",
		"cluster1",
		armhdinsight.ClusterCreateParametersExtended{
			Properties: &armhdinsight.ClusterCreateProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					ComponentVersion: map[string]*string{
						"Kafka": to.Ptr("2.1"),
					},
					Configurations: map[string]interface{}{
						"gateway": map[string]interface{}{
							"restAuthCredential.isEnabled": true,
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: to.Ptr("kafka"),
				},
				ClusterVersion: to.Ptr("4.0"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Large"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							DataDisksGroups: []*armhdinsight.DataDisksGroups{
								{
									DisksPerNode: to.Ptr[int32](8),
								}},
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Large"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						},
						{
							Name: to.Ptr("zookeepernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Small"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						},
						{
							Name: to.Ptr("kafkamanagementnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D4_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("kafkauser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						}},
				},
				KafkaRestProperties: &armhdinsight.KafkaRestProperties{
					ClientGroupInfo: &armhdinsight.ClientGroupInfo{
						GroupID:   to.Ptr("00000000-0000-0000-0000-111111111111"),
						GroupName: to.Ptr("Kafka security group name"),
					},
				},
				OSType: to.Ptr(armhdinsight.OSTypeLinux),
				StorageProfile: &armhdinsight.StorageProfile{
					Storageaccounts: []*armhdinsight.StorageAccount{
						{
							Name:      to.Ptr("mystorage.blob.core.windows.net"),
							Container: to.Ptr("containername"),
							IsDefault: to.Ptr(true),
							Key:       to.Ptr("storagekey"),
						}},
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
		},
		&armhdinsight.ClustersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateKafkaClusterWithKafkaRestProxy.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateKafkaClusterWithKafkaRestProxy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.Cluster{
			Name:     to.Ptr("cluster1"),
			Type:     to.Ptr("Microsoft.HDInsight/clusters"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1"),
			Location: to.Ptr("South Central US"),
			Etag:     to.Ptr("e1266b83-9bda-4797-a906-1bf82c8eb09a"),
			Properties: &armhdinsight.ClusterGetProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Blueprint: to.Ptr("https://blueprints.azurehdinsight.net/kafka-4.0.1000.1.1911212244.json"),
					ComponentVersion: map[string]*string{
						"Kafka": to.Ptr("2.1"),
					},
					Kind: to.Ptr("KAFKA"),
				},
				ClusterState:   to.Ptr("Running"),
				ClusterVersion: to.Ptr("4.0.1000.1"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d3_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							DataDisksGroups: []*armhdinsight.DataDisksGroups{
								{
									DiskSizeGB:         to.Ptr[int32](1023),
									DisksPerNode:       to.Ptr[int32](2),
									StorageAccountType: to.Ptr("Standard_LRS"),
								}},
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d3_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](4),
						},
						{
							Name: to.Ptr("kafkamanagementnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d4_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("zookeepernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_a4_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						}},
				},
				ConnectivityEndpoints: []*armhdinsight.ConnectivityEndpoint{
					{
						Name:     to.Ptr("SSH"),
						Location: to.Ptr("cluster1-ssh.azurehdinsight.net"),
						Port:     to.Ptr[int32](22),
						Protocol: to.Ptr("TCP"),
					},
					{
						Name:     to.Ptr("HTTPS"),
						Location: to.Ptr("cluster1.azurehdinsight.net"),
						Port:     to.Ptr[int32](443),
						Protocol: to.Ptr("TCP"),
					},
					{
						Name:     to.Ptr("KafkaRestProxyPublicEndpoint"),
						Location: to.Ptr("cluster1-kafkarest.azurehdinsight.net"),
						Port:     to.Ptr[int32](443),
						Protocol: to.Ptr("TCP"),
					}},
				CreatedDate: to.Ptr("2019-11-25T03:43:23.663"),
				KafkaRestProperties: &armhdinsight.KafkaRestProperties{
					ClientGroupInfo: &armhdinsight.ClientGroupInfo{
						GroupID:   to.Ptr("00000000-0000-0000-0000-000000000000"),
						GroupName: to.Ptr("security group name"),
					},
				},
				OSType:            to.Ptr(armhdinsight.OSTypeLinux),
				ProvisioningState: to.Ptr(armhdinsight.HDInsightClusterProvisioningStateSucceeded),
				QuotaInfo: &armhdinsight.QuotaInfo{
					CoresUsed: to.Ptr[int32](52),
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateKafkaClusterWithKafkaRestProxy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxHadoopSecureHadoop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Secure Hadoop cluster"},
	})
	client = armhdinsight.NewClustersClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"rg1",
		"cluster1",
		armhdinsight.ClusterCreateParametersExtended{
			Properties: &armhdinsight.ClusterCreateProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Configurations: map[string]interface{}{
						"gateway": map[string]interface{}{
							"restAuthCredential.isEnabled": true,
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: to.Ptr("Hadoop"),
				},
				ClusterVersion: to.Ptr("3.5"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D3_V2"),
							},
							MinInstanceCount: to.Ptr[int32](1),
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									SSHProfile: &armhdinsight.SSHProfile{
										PublicKeys: []*armhdinsight.SSHPublicKey{
											{
												CertificateData: to.Ptr("**********"),
											}},
									},
									Username: to.Ptr("sshuser"),
								},
							},
							ScriptActions:       []*armhdinsight.ScriptAction{},
							TargetInstanceCount: to.Ptr[int32](2),
							VirtualNetworkProfile: &armhdinsight.VirtualNetworkProfile{
								ID:     to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname"),
								Subnet: to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"),
							},
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D3_V2"),
							},
							MinInstanceCount: to.Ptr[int32](1),
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									SSHProfile: &armhdinsight.SSHProfile{
										PublicKeys: []*armhdinsight.SSHPublicKey{
											{
												CertificateData: to.Ptr("**********"),
											}},
									},
									Username: to.Ptr("sshuser"),
								},
							},
							ScriptActions:       []*armhdinsight.ScriptAction{},
							TargetInstanceCount: to.Ptr[int32](4),
							VirtualNetworkProfile: &armhdinsight.VirtualNetworkProfile{
								ID:     to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname"),
								Subnet: to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"),
							},
						},
						{
							Name: to.Ptr("zookeepernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Small"),
							},
							MinInstanceCount: to.Ptr[int32](1),
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									SSHProfile: &armhdinsight.SSHProfile{
										PublicKeys: []*armhdinsight.SSHPublicKey{
											{
												CertificateData: to.Ptr("**********"),
											}},
									},
									Username: to.Ptr("sshuser"),
								},
							},
							ScriptActions:       []*armhdinsight.ScriptAction{},
							TargetInstanceCount: to.Ptr[int32](3),
							VirtualNetworkProfile: &armhdinsight.VirtualNetworkProfile{
								ID:     to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname"),
								Subnet: to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"),
							},
						}},
				},
				OSType: to.Ptr(armhdinsight.OSTypeLinux),
				SecurityProfile: &armhdinsight.SecurityProfile{
					ClusterUsersGroupDNs: []*string{
						to.Ptr("hdiusers")},
					DirectoryType:      to.Ptr(armhdinsight.DirectoryTypeActiveDirectory),
					Domain:             to.Ptr("DomainName"),
					DomainUserPassword: to.Ptr("**********"),
					DomainUsername:     to.Ptr("DomainUsername"),
					LdapsUrls: []*string{
						to.Ptr("ldaps://10.10.0.4:636")},
					OrganizationalUnitDN: to.Ptr("OU=Hadoop,DC=hdinsight,DC=test"),
				},
				StorageProfile: &armhdinsight.StorageProfile{
					Storageaccounts: []*armhdinsight.StorageAccount{
						{
							Name:      to.Ptr("mystorage.blob.core.windows.net"),
							Container: to.Ptr("containername"),
							IsDefault: to.Ptr(true),
							Key:       to.Ptr("storage account key"),
						}},
				},
				Tier: to.Ptr(armhdinsight.TierPremium),
			},
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
			},
		},
		&armhdinsight.ClustersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxHadoopSecureHadoop.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxHadoopSecureHadoop.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.Cluster{
			Name:     to.Ptr("cluster1"),
			Type:     to.Ptr("Microsoft.HDInsight/clusters"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1"),
			Location: to.Ptr("East US"),
			Etag:     to.Ptr("fdf2a6e8-ce83-42cc-8c2d-0ceb11a370ff"),
			Properties: &armhdinsight.ClusterGetProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Blueprint: to.Ptr("https://blueprints.azurehdinsight.net/hadoop-4.0.1000.1.1910270459.json"),
					ComponentVersion: map[string]*string{
						"Hadoop": to.Ptr("3.1"),
					},
					Kind: to.Ptr("HADOOP"),
				},
				ClusterState:   to.Ptr("Running"),
				ClusterVersion: to.Ptr("4.0.1000.1"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d12_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d4_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](4),
						},
						{
							Name: to.Ptr("zookeepernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_a2_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						}},
				},
				ConnectivityEndpoints: []*armhdinsight.ConnectivityEndpoint{
					{
						Name:     to.Ptr("SSH"),
						Location: to.Ptr("cluster1-ssh.azurehdinsight.net"),
						Port:     to.Ptr[int32](22),
						Protocol: to.Ptr("TCP"),
					},
					{
						Name:     to.Ptr("HTTPS"),
						Location: to.Ptr("cluster1.azurehdinsight.net"),
						Port:     to.Ptr[int32](443),
						Protocol: to.Ptr("TCP"),
					}},
				CreatedDate:       to.Ptr("2019-11-18T12:25:43.48"),
				OSType:            to.Ptr(armhdinsight.OSTypeLinux),
				ProvisioningState: to.Ptr(armhdinsight.HDInsightClusterProvisioningStateSucceeded),
				QuotaInfo: &armhdinsight.QuotaInfo{
					CoresUsed: to.Ptr[int32](40),
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxHadoopSecureHadoop.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxSparkSshPassword.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Spark on Linux Cluster with SSH password"},
	})
	client = armhdinsight.NewClustersClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"rg1",
		"cluster1",
		armhdinsight.ClusterCreateParametersExtended{
			Properties: &armhdinsight.ClusterCreateProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					ComponentVersion: map[string]*string{
						"Spark": to.Ptr("2.0"),
					},
					Configurations: map[string]interface{}{
						"gateway": map[string]interface{}{
							"restAuthCredential.isEnabled": true,
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: to.Ptr("Spark"),
				},
				ClusterVersion: to.Ptr("3.5"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D12_V2"),
							},
							MinInstanceCount: to.Ptr[int32](1),
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D4_V2"),
							},
							MinInstanceCount: to.Ptr[int32](1),
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](4),
						}},
				},
				OSType: to.Ptr(armhdinsight.OSTypeLinux),
				StorageProfile: &armhdinsight.StorageProfile{
					Storageaccounts: []*armhdinsight.StorageAccount{
						{
							Name:      to.Ptr("mystorage.blob.core.windows.net"),
							Container: to.Ptr("containername"),
							IsDefault: to.Ptr(true),
							Key:       to.Ptr("storageapikey*"),
						}},
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
			},
		},
		&armhdinsight.ClustersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxSparkSshPassword.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxSparkSshPassword.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.Cluster{
			Name:     to.Ptr("cluster1"),
			Type:     to.Ptr("Microsoft.HDInsight/clusters"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1"),
			Location: to.Ptr("East US"),
			Etag:     to.Ptr("fdf2a6e8-ce83-42cc-8c2d-0ceb11a370ff"),
			Properties: &armhdinsight.ClusterGetProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Blueprint: to.Ptr("https://blueprints.azurehdinsight.net/hadoop-4.0.1000.1.1910270459.json"),
					ComponentVersion: map[string]*string{
						"Hadoop": to.Ptr("3.1"),
					},
					Kind: to.Ptr("SPARK"),
				},
				ClusterState:   to.Ptr("Running"),
				ClusterVersion: to.Ptr("4.0.1000.1"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d12_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d4_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](4),
						},
						{
							Name: to.Ptr("zookeepernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_a2_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						}},
				},
				ConnectivityEndpoints: []*armhdinsight.ConnectivityEndpoint{
					{
						Name:     to.Ptr("SSH"),
						Location: to.Ptr("cluster1-ssh.azurehdinsight.net"),
						Port:     to.Ptr[int32](22),
						Protocol: to.Ptr("TCP"),
					},
					{
						Name:     to.Ptr("HTTPS"),
						Location: to.Ptr("cluster1.azurehdinsight.net"),
						Port:     to.Ptr[int32](443),
						Protocol: to.Ptr("TCP"),
					}},
				CreatedDate:       to.Ptr("2019-11-18T12:25:43.48"),
				OSType:            to.Ptr(armhdinsight.OSTypeLinux),
				ProvisioningState: to.Ptr(armhdinsight.HDInsightClusterProvisioningStateSucceeded),
				QuotaInfo: &armhdinsight.QuotaInfo{
					CoresUsed: to.Ptr[int32](40),
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateLinuxSparkSshPassword.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithTLS12.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create cluster with TLS 1.2"},
	})
	client = armhdinsight.NewClustersClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"rg1",
		"cluster1",
		armhdinsight.ClusterCreateParametersExtended{
			Properties: &armhdinsight.ClusterCreateProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Configurations: map[string]interface{}{
						"gateway": map[string]interface{}{
							"restAuthCredential.isEnabled": true,
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: to.Ptr("Hadoop"),
				},
				ClusterVersion: to.Ptr("3.6"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Large"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Large"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						},
						{
							Name: to.Ptr("zookeepernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Small"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						}},
				},
				MinSupportedTLSVersion: to.Ptr("1.2"),
				OSType:                 to.Ptr(armhdinsight.OSTypeLinux),
				StorageProfile: &armhdinsight.StorageProfile{
					Storageaccounts: []*armhdinsight.StorageAccount{
						{
							Name:      to.Ptr("mystorage.blob.core.windows.net"),
							Container: to.Ptr("default8525"),
							IsDefault: to.Ptr(true),
							Key:       to.Ptr("storagekey"),
						}},
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
		},
		&armhdinsight.ClustersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithTLS12.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithTLS12.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.Cluster{
			Name:     to.Ptr("cluster1"),
			Type:     to.Ptr("Microsoft.HDInsight/clusters"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1"),
			Location: to.Ptr("South Central US"),
			Etag:     to.Ptr("3b76ce3d-892c-4036-9d8b-8ade18ba7a4b"),
			Properties: &armhdinsight.ClusterGetProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Blueprint: to.Ptr("https://blueprints.azurehdinsight.net/hadoop-3.6.1000.67.2001080246.json"),
					ComponentVersion: map[string]*string{
						"Hadoop": to.Ptr("2.7"),
					},
					Kind: to.Ptr("Hadoop"),
				},
				ClusterState:   to.Ptr("Running"),
				ClusterVersion: to.Ptr("3.6.1000.67"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_a4_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_a4_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						},
						{
							Name: to.Ptr("zookeepernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_a2_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						}},
				},
				ConnectivityEndpoints: []*armhdinsight.ConnectivityEndpoint{
					{
						Name:     to.Ptr("SSH"),
						Location: to.Ptr("cluster1-ssh.azurehdinsight.net"),
						Port:     to.Ptr[int32](22),
						Protocol: to.Ptr("TCP"),
					},
					{
						Name:     to.Ptr("HTTPS"),
						Location: to.Ptr("cluster1.azurehdinsight.net"),
						Port:     to.Ptr[int32](443),
						Protocol: to.Ptr("TCP"),
					}},
				CreatedDate:            to.Ptr("2020-01-10T08:36:39.153"),
				MinSupportedTLSVersion: to.Ptr("1.2"),
				OSType:                 to.Ptr(armhdinsight.OSTypeLinux),
				ProvisioningState:      to.Ptr(armhdinsight.HDInsightClusterProvisioningStateSucceeded),
				QuotaInfo: &armhdinsight.QuotaInfo{
					CoresUsed: to.Ptr[int32](20),
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithTLS12.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithAvailabilityZones.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create cluster with availability zones"},
	})
	client = armhdinsight.NewClustersClient("subId", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"rg1",
		"cluster1",
		armhdinsight.ClusterCreateParametersExtended{
			Properties: &armhdinsight.ClusterCreateProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Configurations: map[string]interface{}{
						"ambari-conf": map[string]interface{}{
							"database-name":          "{ambari database name}",
							"database-server":        "{sql server name}.database.windows.net",
							"database-user-name":     "**********",
							"database-user-password": "**********",
						},
						"gateway": map[string]interface{}{
							"restAuthCredential.isEnabled": true,
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
						"hive-env": map[string]interface{}{
							"hive_database":                       "Existing MSSQL Server database with SQL authentication",
							"hive_database_name":                  "{hive metastore name}",
							"hive_database_type":                  "mssql",
							"hive_existing_mssql_server_database": "{hive metastore name}",
							"hive_existing_mssql_server_host":     "{sql server name}.database.windows.net",
							"hive_hostname":                       "{sql server name}.database.windows.net",
						},
						"hive-site": map[string]interface{}{
							"javax.jdo.option.ConnectionDriverName": "com.microsoft.sqlserver.jdbc.SQLServerDriver",
							"javax.jdo.option.ConnectionPassword":   "**********!",
							"javax.jdo.option.ConnectionURL":        "jdbc:sqlserver://{sql server name}.database.windows.net;database={hive metastore name};encrypt=true;trustServerCertificate=true;create=false;loginTimeout=300;sendStringParametersAsUnicode=true;prepareSQL=0",
							"javax.jdo.option.ConnectionUserName":   "**********",
						},
						"oozie-env": map[string]interface{}{
							"oozie_database":                       "Existing MSSQL Server database with SQL authentication",
							"oozie_database_name":                  "{oozie metastore name}",
							"oozie_database_type":                  "mssql",
							"oozie_existing_mssql_server_database": "{oozie metastore name}",
							"oozie_existing_mssql_server_host":     "{sql server name}.database.windows.net",
							"oozie_hostname":                       "{sql server name}.database.windows.net",
						},
						"oozie-site": map[string]interface{}{
							"oozie.db.schema.name":                   "oozie",
							"oozie.service.JPAService.jdbc.driver":   "com.microsoft.sqlserver.jdbc.SQLServerDriver",
							"oozie.service.JPAService.jdbc.password": "**********",
							"oozie.service.JPAService.jdbc.url":      "jdbc:sqlserver://{sql server name}.database.windows.net;database={oozie metastore name};encrypt=true;trustServerCertificate=true;create=false;loginTimeout=300;sendStringParametersAsUnicode=true;prepareSQL=0",
							"oozie.service.JPAService.jdbc.username": "**********",
						},
					},
					Kind: to.Ptr("hadoop"),
				},
				ClusterVersion: to.Ptr("3.6"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d3"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									SSHProfile: &armhdinsight.SSHProfile{
										PublicKeys: []*armhdinsight.SSHPublicKey{
											{
												CertificateData: to.Ptr("**********"),
											}},
									},
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
							VirtualNetworkProfile: &armhdinsight.VirtualNetworkProfile{
								ID:     to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname"),
								Subnet: to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"),
							},
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d3"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									SSHProfile: &armhdinsight.SSHProfile{
										PublicKeys: []*armhdinsight.SSHPublicKey{
											{
												CertificateData: to.Ptr("**********"),
											}},
									},
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
							VirtualNetworkProfile: &armhdinsight.VirtualNetworkProfile{
								ID:     to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname"),
								Subnet: to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"),
							},
						}},
				},
				OSType: to.Ptr(armhdinsight.OSTypeLinux),
				StorageProfile: &armhdinsight.StorageProfile{
					Storageaccounts: []*armhdinsight.StorageAccount{
						{
							Name:      to.Ptr("mystorage"),
							Container: to.Ptr("containername"),
							IsDefault: to.Ptr(true),
							Key:       to.Ptr("storage account key"),
						}},
				},
			},
			Zones: []*string{
				to.Ptr("1")},
		},
		&armhdinsight.ClustersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithAvailabilityZones.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithAvailabilityZones.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.Cluster{
			Name:     to.Ptr("cluster1"),
			Type:     to.Ptr("Microsoft.HDInsight/clusters"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1"),
			Location: to.Ptr("South Central US"),
			Etag:     to.Ptr("fdf2a6e8-ce83-42cc-8c2d-0ceb11a370ff"),
			Properties: &armhdinsight.ClusterGetProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Blueprint: to.Ptr("https://blueprints.azurehdinsight.net/hadoop-3.6.1000.67.2005040905.json"),
					Kind:      to.Ptr("hadoop"),
				},
				ClusterID:      to.Ptr("8186508b6234470e9d16c9e8e13bd821"),
				ClusterState:   to.Ptr("Running"),
				ClusterVersion: to.Ptr("3.6.1000.67"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d3"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
							VirtualNetworkProfile: &armhdinsight.VirtualNetworkProfile{
								ID:     to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname"),
								Subnet: to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"),
							},
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d3"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
							VirtualNetworkProfile: &armhdinsight.VirtualNetworkProfile{
								ID:     to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname"),
								Subnet: to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"),
							},
						}},
				},
				CreatedDate:       to.Ptr("2020-06-09T12:25:43.48"),
				OSType:            to.Ptr(armhdinsight.OSTypeLinux),
				ProvisioningState: to.Ptr(armhdinsight.HDInsightClusterProvisioningStateSucceeded),
				QuotaInfo: &armhdinsight.QuotaInfo{
					CoresUsed: to.Ptr[int32](16),
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
			Zones: []*string{
				to.Ptr("1")},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithAvailabilityZones.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithComputeIsolationProperties.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create cluster with compute isolation properties"},
	})
	client = armhdinsight.NewClustersClient("subId", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"rg1",
		"cluster1",
		armhdinsight.ClusterCreateParametersExtended{
			Properties: &armhdinsight.ClusterCreateProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Configurations: map[string]interface{}{
						"gateway": map[string]interface{}{
							"restAuthCredential.isEnabled": true,
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: to.Ptr("hadoop"),
				},
				ClusterVersion: to.Ptr("3.6"),
				ComputeIsolationProperties: &armhdinsight.ComputeIsolationProperties{
					EnableComputeIsolation: to.Ptr(true),
				},
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d3"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									SSHProfile: &armhdinsight.SSHProfile{
										PublicKeys: []*armhdinsight.SSHPublicKey{
											{
												CertificateData: to.Ptr("**********"),
											}},
									},
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d3"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									SSHProfile: &armhdinsight.SSHProfile{
										PublicKeys: []*armhdinsight.SSHPublicKey{
											{
												CertificateData: to.Ptr("**********"),
											}},
									},
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						}},
				},
				OSType: to.Ptr(armhdinsight.OSTypeLinux),
				StorageProfile: &armhdinsight.StorageProfile{
					Storageaccounts: []*armhdinsight.StorageAccount{
						{
							Name:      to.Ptr("mystorage"),
							Container: to.Ptr("containername"),
							IsDefault: to.Ptr(true),
							Key:       to.Ptr("storage account key"),
						}},
				},
			},
		},
		&armhdinsight.ClustersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithComputeIsolationProperties.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithComputeIsolationProperties.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.Cluster{
			Name:     to.Ptr("cluster1"),
			Type:     to.Ptr("Microsoft.HDInsight/clusters"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1"),
			Location: to.Ptr("South Central US"),
			Etag:     to.Ptr("fdf2a6e8-ce83-42cc-8c2d-0ceb11a370ff"),
			Properties: &armhdinsight.ClusterGetProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Blueprint: to.Ptr("https://blueprints.azurehdinsight.net/hadoop-3.6.1000.67.2005040905.json"),
					Kind:      to.Ptr("hadoop"),
				},
				ClusterID:      to.Ptr("8186508b6234470e9d16c9e8e13bd821"),
				ClusterState:   to.Ptr("Running"),
				ClusterVersion: to.Ptr("3.6.1000.67"),
				ComputeIsolationProperties: &armhdinsight.ComputeIsolationProperties{
					EnableComputeIsolation: to.Ptr(true),
				},
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d3"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
							VirtualNetworkProfile: &armhdinsight.VirtualNetworkProfile{
								ID:     to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname"),
								Subnet: to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"),
							},
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d3"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						}},
				},
				CreatedDate:       to.Ptr("2020-06-09T12:25:43.48"),
				OSType:            to.Ptr(armhdinsight.OSTypeLinux),
				ProvisioningState: to.Ptr(armhdinsight.HDInsightClusterProvisioningStateSucceeded),
				QuotaInfo: &armhdinsight.QuotaInfo{
					CoresUsed: to.Ptr[int32](16),
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithComputeIsolationProperties.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithEncryptionAtHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create cluster with encryption at host"},
	})
	client = armhdinsight.NewClustersClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"rg1",
		"cluster1",
		armhdinsight.ClusterCreateParametersExtended{
			Properties: &armhdinsight.ClusterCreateProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Configurations: map[string]interface{}{
						"gateway": map[string]interface{}{
							"restAuthCredential.isEnabled": true,
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: to.Ptr("Hadoop"),
				},
				ClusterVersion: to.Ptr("3.6"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_DS14_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_DS14_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						},
						{
							Name: to.Ptr("zookeepernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_DS14_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						}},
				},
				DiskEncryptionProperties: &armhdinsight.DiskEncryptionProperties{
					EncryptionAtHost: to.Ptr(true),
				},
				OSType: to.Ptr(armhdinsight.OSTypeLinux),
				StorageProfile: &armhdinsight.StorageProfile{
					Storageaccounts: []*armhdinsight.StorageAccount{
						{
							Name:      to.Ptr("mystorage.blob.core.windows.net"),
							Container: to.Ptr("default8525"),
							IsDefault: to.Ptr(true),
							Key:       to.Ptr("storagekey"),
						}},
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
		},
		&armhdinsight.ClustersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithEncryptionAtHost.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithEncryptionAtHost.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.Cluster{
			Name:     to.Ptr("cluster1"),
			Type:     to.Ptr("Microsoft.HDInsight/clusters"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1"),
			Location: to.Ptr("South Central US"),
			Etag:     to.Ptr("3b76ce3d-892c-4036-9d8b-8ade18ba7a4b"),
			Properties: &armhdinsight.ClusterGetProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Blueprint: to.Ptr("https://blueprints.azurehdinsight.net/hadoop-3.6.1000.67.2001080246.json"),
					ComponentVersion: map[string]*string{
						"Hadoop": to.Ptr("2.7"),
					},
					Kind: to.Ptr("Hadoop"),
				},
				ClusterState:   to.Ptr("Running"),
				ClusterVersion: to.Ptr("3.6.1000.67"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_ds14_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_ds14_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						},
						{
							Name: to.Ptr("zookeepernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_ds14_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						}},
				},
				ConnectivityEndpoints: []*armhdinsight.ConnectivityEndpoint{
					{
						Name:     to.Ptr("SSH"),
						Location: to.Ptr("cluster1-ssh.azurehdinsight.net"),
						Port:     to.Ptr[int32](22),
						Protocol: to.Ptr("TCP"),
					},
					{
						Name:     to.Ptr("HTTPS"),
						Location: to.Ptr("cluster1.azurehdinsight.net"),
						Port:     to.Ptr[int32](443),
						Protocol: to.Ptr("TCP"),
					}},
				CreatedDate: to.Ptr("2020-01-10T08:36:39.153"),
				DiskEncryptionProperties: &armhdinsight.DiskEncryptionProperties{
					EncryptionAtHost: to.Ptr(true),
				},
				OSType:            to.Ptr(armhdinsight.OSTypeLinux),
				ProvisioningState: to.Ptr(armhdinsight.HDInsightClusterProvisioningStateSucceeded),
				QuotaInfo: &armhdinsight.QuotaInfo{
					CoresUsed: to.Ptr[int32](20),
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithEncryptionAtHost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithEncryptionInTransit.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create cluster with encryption in transit"},
	})
	client = armhdinsight.NewClustersClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"rg1",
		"cluster1",
		armhdinsight.ClusterCreateParametersExtended{
			Properties: &armhdinsight.ClusterCreateProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Configurations: map[string]interface{}{
						"gateway": map[string]interface{}{
							"restAuthCredential.isEnabled": true,
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: to.Ptr("Hadoop"),
				},
				ClusterVersion: to.Ptr("3.6"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Large"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Large"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						},
						{
							Name: to.Ptr("zookeepernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Small"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						}},
				},
				EncryptionInTransitProperties: &armhdinsight.EncryptionInTransitProperties{
					IsEncryptionInTransitEnabled: to.Ptr(true),
				},
				OSType: to.Ptr(armhdinsight.OSTypeLinux),
				StorageProfile: &armhdinsight.StorageProfile{
					Storageaccounts: []*armhdinsight.StorageAccount{
						{
							Name:      to.Ptr("mystorage.blob.core.windows.net"),
							Container: to.Ptr("default8525"),
							IsDefault: to.Ptr(true),
							Key:       to.Ptr("storagekey"),
						}},
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
		},
		&armhdinsight.ClustersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithEncryptionInTransit.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithEncryptionInTransit.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.Cluster{
			Name:     to.Ptr("cluster1"),
			Type:     to.Ptr("Microsoft.HDInsight/clusters"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1"),
			Location: to.Ptr("South Central US"),
			Etag:     to.Ptr("3b76ce3d-892c-4036-9d8b-8ade18ba7a4b"),
			Properties: &armhdinsight.ClusterGetProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Blueprint: to.Ptr("https://blueprints.azurehdinsight.net/hadoop-3.6.1000.67.2001080246.json"),
					ComponentVersion: map[string]*string{
						"Hadoop": to.Ptr("2.7"),
					},
					Kind: to.Ptr("Hadoop"),
				},
				ClusterState:   to.Ptr("Running"),
				ClusterVersion: to.Ptr("3.6.1000.67"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_a4_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_a4_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						},
						{
							Name: to.Ptr("zookeepernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_a2_v2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						}},
				},
				ConnectivityEndpoints: []*armhdinsight.ConnectivityEndpoint{
					{
						Name:     to.Ptr("SSH"),
						Location: to.Ptr("cluster1-ssh.azurehdinsight.net"),
						Port:     to.Ptr[int32](22),
						Protocol: to.Ptr("TCP"),
					},
					{
						Name:     to.Ptr("HTTPS"),
						Location: to.Ptr("cluster1.azurehdinsight.net"),
						Port:     to.Ptr[int32](443),
						Protocol: to.Ptr("TCP"),
					}},
				CreatedDate: to.Ptr("2020-01-10T08:36:39.153"),
				EncryptionInTransitProperties: &armhdinsight.EncryptionInTransitProperties{
					IsEncryptionInTransitEnabled: to.Ptr(true),
				},
				OSType:            to.Ptr(armhdinsight.OSTypeLinux),
				ProvisioningState: to.Ptr(armhdinsight.HDInsightClusterProvisioningStateSucceeded),
				QuotaInfo: &armhdinsight.QuotaInfo{
					CoresUsed: to.Ptr[int32](20),
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithEncryptionInTransit.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithCustomNetworkProperties.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create cluster with network properties"},
	})
	client = armhdinsight.NewClustersClient("subId", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"rg1",
		"cluster1",
		armhdinsight.ClusterCreateParametersExtended{
			Properties: &armhdinsight.ClusterCreateProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Configurations: map[string]interface{}{
						"gateway": map[string]interface{}{
							"restAuthCredential.isEnabled": true,
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: to.Ptr("hadoop"),
				},
				ClusterVersion: to.Ptr("3.6"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d3"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									SSHProfile: &armhdinsight.SSHProfile{
										PublicKeys: []*armhdinsight.SSHPublicKey{
											{
												CertificateData: to.Ptr("**********"),
											}},
									},
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
							VirtualNetworkProfile: &armhdinsight.VirtualNetworkProfile{
								ID:     to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname"),
								Subnet: to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"),
							},
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d3"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									SSHProfile: &armhdinsight.SSHProfile{
										PublicKeys: []*armhdinsight.SSHPublicKey{
											{
												CertificateData: to.Ptr("**********"),
											}},
									},
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
							VirtualNetworkProfile: &armhdinsight.VirtualNetworkProfile{
								ID:     to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname"),
								Subnet: to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"),
							},
						}},
				},
				NetworkProperties: &armhdinsight.NetworkProperties{
					PrivateLink:                to.Ptr(armhdinsight.PrivateLinkEnabled),
					ResourceProviderConnection: to.Ptr(armhdinsight.ResourceProviderConnectionOutbound),
				},
				OSType: to.Ptr(armhdinsight.OSTypeLinux),
				StorageProfile: &armhdinsight.StorageProfile{
					Storageaccounts: []*armhdinsight.StorageAccount{
						{
							Name:      to.Ptr("mystorage"),
							Container: to.Ptr("containername"),
							IsDefault: to.Ptr(true),
							Key:       to.Ptr("storage account key"),
						}},
				},
			},
		},
		&armhdinsight.ClustersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithCustomNetworkProperties.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithCustomNetworkProperties.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.Cluster{
			Name:     to.Ptr("cluster1"),
			Type:     to.Ptr("Microsoft.HDInsight/clusters"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1"),
			Location: to.Ptr("South Central US"),
			Etag:     to.Ptr("fdf2a6e8-ce83-42cc-8c2d-0ceb11a370ff"),
			Properties: &armhdinsight.ClusterGetProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Blueprint: to.Ptr("https://blueprints.azurehdinsight.net/hadoop-3.6.1000.67.2005040905.json"),
					Kind:      to.Ptr("hadoop"),
				},
				ClusterID:      to.Ptr("8186508b6234470e9d16c9e8e13bd821"),
				ClusterState:   to.Ptr("Running"),
				ClusterVersion: to.Ptr("3.6.1000.67"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d3"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
							VirtualNetworkProfile: &armhdinsight.VirtualNetworkProfile{
								ID:     to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname"),
								Subnet: to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"),
							},
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("standard_d3"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
							VirtualNetworkProfile: &armhdinsight.VirtualNetworkProfile{
								ID:     to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname"),
								Subnet: to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"),
							},
						}},
				},
				CreatedDate: to.Ptr("2020-06-09T12:25:43.48"),
				NetworkProperties: &armhdinsight.NetworkProperties{
					PrivateLink:                to.Ptr(armhdinsight.PrivateLinkEnabled),
					ResourceProviderConnection: to.Ptr(armhdinsight.ResourceProviderConnectionOutbound),
				},
				OSType:            to.Ptr(armhdinsight.OSTypeLinux),
				ProvisioningState: to.Ptr(armhdinsight.HDInsightClusterProvisioningStateSucceeded),
				QuotaInfo: &armhdinsight.QuotaInfo{
					CoresUsed: to.Ptr[int32](16),
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateHDInsightClusterWithCustomNetworkProperties.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_Update(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/PatchLinuxHadoopCluster.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch HDInsight Linux clusters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewClustersClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"cluster1",
		armhdinsight.ClusterPatchParameters{
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
				"key2": to.Ptr("val2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/PatchLinuxHadoopCluster.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.Cluster{
			Name:     to.Ptr("cluster1"),
			Type:     to.Ptr("Microsoft.HDInsight/clusters"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
				"key2": to.Ptr("val2"),
			},
			Etag: to.Ptr("f0212a39-b827-45e0-9ffa-4f5232e58851"),
			Properties: &armhdinsight.ClusterGetProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Blueprint: to.Ptr("https://blueprints.azurehdinsight.net/hadoop-3.5.1000.0.9243893.json"),
					Kind:      to.Ptr("hadoop"),
				},
				ClusterState:   to.Ptr("Running"),
				ClusterVersion: to.Ptr("3.5.1000.0"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D3_V2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D3_V2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](4),
						},
						{
							Name: to.Ptr("zookeepernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Medium"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						}},
				},
				ConnectivityEndpoints: []*armhdinsight.ConnectivityEndpoint{
					{
						Name:     to.Ptr("SSH"),
						Location: to.Ptr("cluster1-ssh.azurehdinsight.net"),
						Port:     to.Ptr[int32](22),
						Protocol: to.Ptr("TCP"),
					},
					{
						Name:     to.Ptr("HTTPS"),
						Location: to.Ptr("cluster1.azurehdinsight.net"),
						Port:     to.Ptr[int32](443),
						Protocol: to.Ptr("TCP"),
					}},
				CreatedDate:       to.Ptr("2017-01-11T18:58:26.187"),
				OSType:            to.Ptr(armhdinsight.OSTypeLinux),
				ProvisioningState: to.Ptr(armhdinsight.HDInsightClusterProvisioningStateSucceeded),
				QuotaInfo: &armhdinsight.QuotaInfo{
					CoresUsed: to.Ptr[int32](24),
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/PatchLinuxHadoopCluster.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_Delete(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DeleteLinuxHadoopCluster.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Hadoop on Linux cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewClustersClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"cluster1",
		&armhdinsight.ClustersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DeleteLinuxHadoopCluster.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DeleteLinuxHadoopCluster.json: %v", err)
	}
}

func TestClusters_Get(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetLinuxHadoopCluster.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Hadoop on Linux cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewClustersClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"cluster1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetLinuxHadoopCluster.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.Cluster{
			Name:     to.Ptr("cluster1"),
			Type:     to.Ptr("Microsoft.HDInsight/clusters"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
			},
			Etag: to.Ptr("f0212a39-b827-45e0-9ffa-4f5232e58851"),
			Properties: &armhdinsight.ClusterGetProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Blueprint: to.Ptr("https://blueprints.azurehdinsight.net/hadoop-3.5.1000.0.9243893.json"),
					Kind:      to.Ptr("hadoop"),
				},
				ClusterState:   to.Ptr("Running"),
				ClusterVersion: to.Ptr("3.5.1000.0"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D3_V2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D3_V2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](4),
						},
						{
							Name: to.Ptr("zookeepernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Medium"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						}},
				},
				ConnectivityEndpoints: []*armhdinsight.ConnectivityEndpoint{
					{
						Name:     to.Ptr("SSH"),
						Location: to.Ptr("cluster1-ssh.azurehdinsight.net"),
						Port:     to.Ptr[int32](22),
						Protocol: to.Ptr("TCP"),
					},
					{
						Name:     to.Ptr("HTTPS"),
						Location: to.Ptr("cluster1.azurehdinsight.net"),
						Port:     to.Ptr[int32](443),
						Protocol: to.Ptr("TCP"),
					}},
				CreatedDate:       to.Ptr("2017-01-11T18:58:26.187"),
				OSType:            to.Ptr(armhdinsight.OSTypeLinux),
				ProvisioningState: to.Ptr(armhdinsight.HDInsightClusterProvisioningStateSucceeded),
				QuotaInfo: &armhdinsight.QuotaInfo{
					CoresUsed: to.Ptr[int32](24),
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetLinuxHadoopCluster.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetLinuxSparkCluster.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Spark on Linux cluster"},
	})
	client = armhdinsight.NewClustersClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"cluster1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetLinuxSparkCluster.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.Cluster{
			Name:     to.Ptr("cluster1"),
			Type:     to.Ptr("Microsoft.HDInsight/clusters"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
			},
			Etag: to.Ptr("4cd8b5a9-ca9c-4239-9e5b-3916032e994c"),
			Properties: &armhdinsight.ClusterGetProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					Blueprint: to.Ptr("https://blueprints.azurehdinsight.net/spark-3.5.1000.0.9625065.json"),
					ComponentVersion: map[string]*string{
						"Spark": to.Ptr("2.0"),
					},
					Kind: to.Ptr("SPARK"),
				},
				ClusterState:   to.Ptr("Running"),
				ClusterVersion: to.Ptr("3.5.1000.0"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D12_V2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D4_V2"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](4),
						},
						{
							Name: to.Ptr("zookeepernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Medium"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Username: to.Ptr("sshuser"),
								},
							},
							TargetInstanceCount: to.Ptr[int32](3),
						}},
				},
				ConnectivityEndpoints: []*armhdinsight.ConnectivityEndpoint{
					{
						Name:     to.Ptr("SSH"),
						Location: to.Ptr("cluster1-ssh.azurehdinsight.net"),
						Port:     to.Ptr[int32](22),
						Protocol: to.Ptr("TCP"),
					},
					{
						Name:     to.Ptr("HTTPS"),
						Location: to.Ptr("cluster1.azurehdinsight.net"),
						Port:     to.Ptr[int32](443),
						Protocol: to.Ptr("TCP"),
					}},
				CreatedDate:       to.Ptr("2017-03-03T08:35:07.323"),
				OSType:            to.Ptr(armhdinsight.OSTypeLinux),
				ProvisioningState: to.Ptr(armhdinsight.HDInsightClusterProvisioningStateSucceeded),
				QuotaInfo: &armhdinsight.QuotaInfo{
					CoresUsed: to.Ptr[int32](40),
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetLinuxSparkCluster.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_ListByResourceGroup(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetLinuxHadoopAllClustersInResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get All Hadoop on Linux clusters in a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewClustersClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetLinuxHadoopAllClustersInResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhdinsight.ClusterListResult{
			Value: []*armhdinsight.Cluster{
				{
					Name:     to.Ptr("cluster1"),
					Type:     to.Ptr("Microsoft.HDInsight/clusters"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("val1"),
					},
					Etag: to.Ptr("f0212a39-b827-45e0-9ffa-4f5232e58851"),
					Properties: &armhdinsight.ClusterGetProperties{
						ClusterDefinition: &armhdinsight.ClusterDefinition{
							Blueprint: to.Ptr("https://blueprints.azurehdinsight.net/hadoop-3.5.1000.0.9243893.json"),
							Kind:      to.Ptr("hadoop"),
						},
						ClusterState:   to.Ptr("Running"),
						ClusterVersion: to.Ptr("3.5.1000.0"),
						ComputeProfile: &armhdinsight.ComputeProfile{
							Roles: []*armhdinsight.Role{
								{
									Name: to.Ptr("headnode"),
									HardwareProfile: &armhdinsight.HardwareProfile{
										VMSize: to.Ptr("Standard_D3_V2"),
									},
									OSProfile: &armhdinsight.OsProfile{
										LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
											Username: to.Ptr("pulkitssh"),
										},
									},
									TargetInstanceCount: to.Ptr[int32](2),
								},
								{
									Name: to.Ptr("workernode"),
									HardwareProfile: &armhdinsight.HardwareProfile{
										VMSize: to.Ptr("Standard_D3_V2"),
									},
									OSProfile: &armhdinsight.OsProfile{
										LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
											Username: to.Ptr("pulkitssh"),
										},
									},
									TargetInstanceCount: to.Ptr[int32](4),
								},
								{
									Name: to.Ptr("zookeepernode"),
									HardwareProfile: &armhdinsight.HardwareProfile{
										VMSize: to.Ptr("Medium"),
									},
									OSProfile: &armhdinsight.OsProfile{
										LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
											Username: to.Ptr("pulkitssh"),
										},
									},
									TargetInstanceCount: to.Ptr[int32](3),
								}},
						},
						ConnectivityEndpoints: []*armhdinsight.ConnectivityEndpoint{
							{
								Name:     to.Ptr("SSH"),
								Location: to.Ptr("cluster1-ssh.azurehdinsight.net"),
								Port:     to.Ptr[int32](22),
								Protocol: to.Ptr("TCP"),
							},
							{
								Name:     to.Ptr("HTTPS"),
								Location: to.Ptr("cluster1.azurehdinsight.net"),
								Port:     to.Ptr[int32](443),
								Protocol: to.Ptr("TCP"),
							}},
						CreatedDate:       to.Ptr("2017-01-11T18:58:26.187"),
						OSType:            to.Ptr(armhdinsight.OSTypeLinux),
						ProvisioningState: to.Ptr(armhdinsight.HDInsightClusterProvisioningStateSucceeded),
						QuotaInfo: &armhdinsight.QuotaInfo{
							CoresUsed: to.Ptr[int32](24),
						},
						Tier: to.Ptr(armhdinsight.TierStandard),
					},
				},
				{
					Name:     to.Ptr("cluster2"),
					Type:     to.Ptr("Microsoft.HDInsight/clusters"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster2"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("val1"),
					},
					Etag: to.Ptr("f0212a39-b827-45e0-9ffa-4f5232e58851"),
					Properties: &armhdinsight.ClusterGetProperties{
						ClusterDefinition: &armhdinsight.ClusterDefinition{
							Blueprint: to.Ptr("https://blueprints.azurehdinsight.net/hadoop-3.5.1000.0.9243893.json"),
							Kind:      to.Ptr("hadoop"),
						},
						ClusterState:   to.Ptr("Running"),
						ClusterVersion: to.Ptr("3.5.1000.0"),
						ComputeProfile: &armhdinsight.ComputeProfile{
							Roles: []*armhdinsight.Role{
								{
									Name: to.Ptr("headnode"),
									HardwareProfile: &armhdinsight.HardwareProfile{
										VMSize: to.Ptr("Standard_D3_V2"),
									},
									OSProfile: &armhdinsight.OsProfile{
										LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
											Username: to.Ptr("pulkitssh"),
										},
									},
									TargetInstanceCount: to.Ptr[int32](2),
								},
								{
									Name: to.Ptr("workernode"),
									HardwareProfile: &armhdinsight.HardwareProfile{
										VMSize: to.Ptr("Standard_D3_V2"),
									},
									OSProfile: &armhdinsight.OsProfile{
										LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
											Username: to.Ptr("pulkitssh"),
										},
									},
									TargetInstanceCount: to.Ptr[int32](4),
								},
								{
									Name: to.Ptr("zookeepernode"),
									HardwareProfile: &armhdinsight.HardwareProfile{
										VMSize: to.Ptr("Medium"),
									},
									OSProfile: &armhdinsight.OsProfile{
										LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
											Username: to.Ptr("pulkitssh"),
										},
									},
									TargetInstanceCount: to.Ptr[int32](3),
								}},
						},
						ConnectivityEndpoints: []*armhdinsight.ConnectivityEndpoint{
							{
								Name:     to.Ptr("SSH"),
								Location: to.Ptr("cluster2-ssh.azurehdinsight.net"),
								Port:     to.Ptr[int32](22),
								Protocol: to.Ptr("TCP"),
							},
							{
								Name:     to.Ptr("HTTPS"),
								Location: to.Ptr("cluster2.azurehdinsight.net"),
								Port:     to.Ptr[int32](443),
								Protocol: to.Ptr("TCP"),
							}},
						CreatedDate:       to.Ptr("2017-01-11T18:58:26.187"),
						OSType:            to.Ptr(armhdinsight.OSTypeLinux),
						ProvisioningState: to.Ptr(armhdinsight.HDInsightClusterProvisioningStateSucceeded),
						QuotaInfo: &armhdinsight.QuotaInfo{
							CoresUsed: to.Ptr[int32](24),
						},
						Tier: to.Ptr(armhdinsight.TierStandard),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ClusterListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ClusterListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetLinuxHadoopAllClustersInResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_Resize(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/ResizeLinuxHadoopCluster.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Resize the worker nodes for a Hadoop on Linux cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewClustersClient("subid", cred, &options)
	poller, err := client.BeginResize(ctx,
		"rg1",
		"cluster1",
		armhdinsight.RoleNameWorkernode,
		armhdinsight.ClusterResizeParameters{
			TargetInstanceCount: to.Ptr[int32](10),
		},
		&armhdinsight.ClustersClientBeginResizeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/ResizeLinuxHadoopCluster.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/ResizeLinuxHadoopCluster.json: %v", err)
	}
}

func TestClusters_UpdateAutoScaleConfiguration(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DisableClusterAutoScale.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Disable Autoscale for the HDInsight cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewClustersClient("subid", cred, &options)
	poller, err := client.BeginUpdateAutoScaleConfiguration(ctx,
		"rg1",
		"cluster1",
		armhdinsight.RoleNameWorkernode,
		armhdinsight.AutoscaleConfigurationUpdateParameter{},
		&armhdinsight.ClustersClientBeginUpdateAutoScaleConfigurationOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DisableClusterAutoScale.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DisableClusterAutoScale.json: %v", err)
	}

	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/EnableOrUpdateAutoScaleWithLoadBasedConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enable or Update Autoscale with the load based configuration for HDInsight cluster"},
	})
	client = armhdinsight.NewClustersClient("subid", cred, &options)
	poller, err = client.BeginUpdateAutoScaleConfiguration(ctx,
		"rg1",
		"cluster1",
		armhdinsight.RoleNameWorkernode,
		armhdinsight.AutoscaleConfigurationUpdateParameter{
			Autoscale: &armhdinsight.Autoscale{
				Capacity: &armhdinsight.AutoscaleCapacity{
					MaxInstanceCount: to.Ptr[int32](5),
					MinInstanceCount: to.Ptr[int32](3),
				},
			},
		},
		&armhdinsight.ClustersClientBeginUpdateAutoScaleConfigurationOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/EnableOrUpdateAutoScaleWithLoadBasedConfiguration.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/EnableOrUpdateAutoScaleWithLoadBasedConfiguration.json: %v", err)
	}

	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/EnableOrUpdateAutoScaleWithScheduleBasedConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enable or Update Autoscale with the schedule based configuration for HDInsight cluster"},
	})
	client = armhdinsight.NewClustersClient("subid", cred, &options)
	poller, err = client.BeginUpdateAutoScaleConfiguration(ctx,
		"rg1",
		"cluster1",
		armhdinsight.RoleNameWorkernode,
		armhdinsight.AutoscaleConfigurationUpdateParameter{
			Autoscale: &armhdinsight.Autoscale{
				Recurrence: &armhdinsight.AutoscaleRecurrence{
					Schedule: []*armhdinsight.AutoscaleSchedule{
						{
							Days: []*armhdinsight.DaysOfWeek{
								to.Ptr(armhdinsight.DaysOfWeekThursday)},
							TimeAndCapacity: &armhdinsight.AutoscaleTimeAndCapacity{
								MaxInstanceCount: to.Ptr[int32](4),
								MinInstanceCount: to.Ptr[int32](4),
								Time:             to.Ptr("16:00"),
							},
						}},
					TimeZone: to.Ptr("China Standard Time"),
				},
			},
		},
		&armhdinsight.ClustersClientBeginUpdateAutoScaleConfigurationOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/EnableOrUpdateAutoScaleWithScheduleBasedConfiguration.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/EnableOrUpdateAutoScaleWithScheduleBasedConfiguration.json: %v", err)
	}
}

func TestClusters_List(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetLinuxHadoopAllClusters.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get All Hadoop on Linux clusters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewClustersClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetLinuxHadoopAllClusters.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhdinsight.ClusterListResult{
			Value: []*armhdinsight.Cluster{
				{
					Name:     to.Ptr("cluster1"),
					Type:     to.Ptr("Microsoft.HDInsight/clusters"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("val1"),
					},
					Etag: to.Ptr("f0212a39-b827-45e0-9ffa-4f5232e58851"),
					Properties: &armhdinsight.ClusterGetProperties{
						ClusterDefinition: &armhdinsight.ClusterDefinition{
							Blueprint: to.Ptr("https://blueprints.azurehdinsight.net/hadoop-3.5.1000.0.9243893.json"),
							Kind:      to.Ptr("hadoop"),
						},
						ClusterState:   to.Ptr("Running"),
						ClusterVersion: to.Ptr("3.5.1000.0"),
						ComputeProfile: &armhdinsight.ComputeProfile{
							Roles: []*armhdinsight.Role{
								{
									Name: to.Ptr("headnode"),
									HardwareProfile: &armhdinsight.HardwareProfile{
										VMSize: to.Ptr("Standard_D3_V2"),
									},
									OSProfile: &armhdinsight.OsProfile{
										LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
											Username: to.Ptr("pulkitssh"),
										},
									},
									TargetInstanceCount: to.Ptr[int32](2),
								},
								{
									Name: to.Ptr("workernode"),
									HardwareProfile: &armhdinsight.HardwareProfile{
										VMSize: to.Ptr("Standard_D3_V2"),
									},
									OSProfile: &armhdinsight.OsProfile{
										LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
											Username: to.Ptr("pulkitssh"),
										},
									},
									TargetInstanceCount: to.Ptr[int32](4),
								},
								{
									Name: to.Ptr("zookeepernode"),
									HardwareProfile: &armhdinsight.HardwareProfile{
										VMSize: to.Ptr("Medium"),
									},
									OSProfile: &armhdinsight.OsProfile{
										LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
											Username: to.Ptr("pulkitssh"),
										},
									},
									TargetInstanceCount: to.Ptr[int32](3),
								}},
						},
						ConnectivityEndpoints: []*armhdinsight.ConnectivityEndpoint{
							{
								Name:     to.Ptr("SSH"),
								Location: to.Ptr("cluster1-ssh.azurehdinsight.net"),
								Port:     to.Ptr[int32](22),
								Protocol: to.Ptr("TCP"),
							},
							{
								Name:     to.Ptr("HTTPS"),
								Location: to.Ptr("cluster1.azurehdinsight.net"),
								Port:     to.Ptr[int32](443),
								Protocol: to.Ptr("TCP"),
							}},
						CreatedDate:       to.Ptr("2017-01-11T18:58:26.187"),
						OSType:            to.Ptr(armhdinsight.OSTypeLinux),
						ProvisioningState: to.Ptr(armhdinsight.HDInsightClusterProvisioningStateSucceeded),
						QuotaInfo: &armhdinsight.QuotaInfo{
							CoresUsed: to.Ptr[int32](24),
						},
						Tier: to.Ptr(armhdinsight.TierStandard),
					},
				},
				{
					Name:     to.Ptr("cluster2"),
					Type:     to.Ptr("Microsoft.HDInsight/clusters"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster2"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("val1"),
					},
					Etag: to.Ptr("f0212a39-b827-45e0-9ffa-4f5232e58851"),
					Properties: &armhdinsight.ClusterGetProperties{
						ClusterDefinition: &armhdinsight.ClusterDefinition{
							Blueprint: to.Ptr("https://blueprints.azurehdinsight.net/hadoop-3.5.1000.0.9243893.json"),
							Kind:      to.Ptr("hadoop"),
						},
						ClusterState:   to.Ptr("Running"),
						ClusterVersion: to.Ptr("3.5.1000.0"),
						ComputeProfile: &armhdinsight.ComputeProfile{
							Roles: []*armhdinsight.Role{
								{
									Name: to.Ptr("headnode"),
									HardwareProfile: &armhdinsight.HardwareProfile{
										VMSize: to.Ptr("Standard_D3_V2"),
									},
									OSProfile: &armhdinsight.OsProfile{
										LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
											Username: to.Ptr("pulkitssh"),
										},
									},
									TargetInstanceCount: to.Ptr[int32](2),
								},
								{
									Name: to.Ptr("workernode"),
									HardwareProfile: &armhdinsight.HardwareProfile{
										VMSize: to.Ptr("Standard_D3_V2"),
									},
									OSProfile: &armhdinsight.OsProfile{
										LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
											Username: to.Ptr("pulkitssh"),
										},
									},
									TargetInstanceCount: to.Ptr[int32](4),
								},
								{
									Name: to.Ptr("zookeepernode"),
									HardwareProfile: &armhdinsight.HardwareProfile{
										VMSize: to.Ptr("Medium"),
									},
									OSProfile: &armhdinsight.OsProfile{
										LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
											Username: to.Ptr("pulkitssh"),
										},
									},
									TargetInstanceCount: to.Ptr[int32](3),
								}},
						},
						ConnectivityEndpoints: []*armhdinsight.ConnectivityEndpoint{
							{
								Name:     to.Ptr("SSH"),
								Location: to.Ptr("cluster2-ssh.azurehdinsight.net"),
								Port:     to.Ptr[int32](22),
								Protocol: to.Ptr("TCP"),
							},
							{
								Name:     to.Ptr("HTTPS"),
								Location: to.Ptr("cluster2.azurehdinsight.net"),
								Port:     to.Ptr[int32](443),
								Protocol: to.Ptr("TCP"),
							}},
						CreatedDate:       to.Ptr("2017-01-11T18:58:26.187"),
						OSType:            to.Ptr(armhdinsight.OSTypeLinux),
						ProvisioningState: to.Ptr(armhdinsight.HDInsightClusterProvisioningStateSucceeded),
						QuotaInfo: &armhdinsight.QuotaInfo{
							CoresUsed: to.Ptr[int32](24),
						},
						Tier: to.Ptr(armhdinsight.TierStandard),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ClusterListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ClusterListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetLinuxHadoopAllClusters.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_RotateDiskEncryptionKey(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/RotateLinuxHadoopClusterDiskEncryptionKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Rotate disk encryption key of the specified HDInsight cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewClustersClient("subid", cred, &options)
	poller, err := client.BeginRotateDiskEncryptionKey(ctx,
		"rg1",
		"cluster1",
		armhdinsight.ClusterDiskEncryptionParameters{
			KeyName:    to.Ptr("newkeyname"),
			KeyVersion: to.Ptr("newkeyversion"),
			VaultURI:   to.Ptr("https://newkeyvault.vault.azure.net/"),
		},
		&armhdinsight.ClustersClientBeginRotateDiskEncryptionKeyOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/RotateLinuxHadoopClusterDiskEncryptionKey.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/RotateLinuxHadoopClusterDiskEncryptionKey.json: %v", err)
	}
}

func TestClusters_GetGatewaySettings(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Clusters_GetGatewaySettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get HTTP settings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewClustersClient("subid", cred, &options)
	res, err := client.GetGatewaySettings(ctx,
		"rg1",
		"cluster1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Clusters_GetGatewaySettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.GatewaySettings{
			IsCredentialEnabled: to.Ptr("true"),
			Password:            to.Ptr("**********"),
			UserName:            to.Ptr("hadoop"),
		}
		if !reflect.DeepEqual(exampleRes, res.GatewaySettings) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GatewaySettings)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Clusters_GetGatewaySettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_UpdateGatewaySettings(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Clusters_UpdateGatewaySettings_Enable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enable HTTP connectivity"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewClustersClient("subid", cred, &options)
	poller, err := client.BeginUpdateGatewaySettings(ctx,
		"rg1",
		"cluster1",
		armhdinsight.UpdateGatewaySettingsParameters{
			IsCredentialEnabled: to.Ptr(true),
			Password:            to.Ptr("**********"),
			UserName:            to.Ptr("hadoop"),
		},
		&armhdinsight.ClustersClientBeginUpdateGatewaySettingsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Clusters_UpdateGatewaySettings_Enable.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Clusters_UpdateGatewaySettings_Enable.json: %v", err)
	}
}

func TestClusters_GetAzureAsyncOperationStatus(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetClusterCreatingAsyncOperationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Async Operation Status of Creating Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewClustersClient("subid", cred, &options)
	res, err := client.GetAzureAsyncOperationStatus(ctx,
		"rg1",
		"cluster1",
		"CF938302-6B4D-44A0-A6D2-C0D67E847AEC",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetClusterCreatingAsyncOperationStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.AsyncOperationResult{
			Status: to.Ptr(armhdinsight.AsyncOperationStateInProgress),
		}
		if !reflect.DeepEqual(exampleRes, res.AsyncOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AsyncOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetClusterCreatingAsyncOperationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_UpdateIdentityCertificate(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Clusters_UpdateClusterIdentityCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update cluster identity certificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewClustersClient("subid", cred, &options)
	poller, err := client.BeginUpdateIdentityCertificate(ctx,
		"rg1",
		"cluster1",
		armhdinsight.UpdateClusterIdentityCertificateParameters{
			ApplicationID:       to.Ptr("applicationId"),
			Certificate:         to.Ptr("base64encodedcertificate"),
			CertificatePassword: to.Ptr("**********"),
		},
		&armhdinsight.ClustersClientBeginUpdateIdentityCertificateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Clusters_UpdateClusterIdentityCertificate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Clusters_UpdateClusterIdentityCertificate.json: %v", err)
	}
}

func TestClusters_ExecuteScriptActions(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/PostExecuteScriptAction.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute script action on HDInsight cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewClustersClient("subid", cred, &options)
	poller, err := client.BeginExecuteScriptActions(ctx,
		"rg1",
		"cluster1",
		armhdinsight.ExecuteScriptActionParameters{
			PersistOnSuccess: to.Ptr(false),
			ScriptActions: []*armhdinsight.RuntimeScriptAction{
				{
					Name:       to.Ptr("Test"),
					Parameters: to.Ptr(""),
					Roles: []*string{
						to.Ptr("headnode"),
						to.Ptr("workernode")},
					URI: to.Ptr("http://testurl.com/install.ssh"),
				}},
		},
		&armhdinsight.ClustersClientBeginExecuteScriptActionsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/PostExecuteScriptAction.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/PostExecuteScriptAction.json: %v", err)
	}
}

func TestApplications_ListByCluster(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetAllApplications.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get All Applications for an HDInsight cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewApplicationsClient("subid", cred, &options)
	pager := client.ListByCluster("rg1",
		"cluster1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetAllApplications.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhdinsight.ApplicationListResult{
			Value: []*armhdinsight.Application{
				{
					Name: to.Ptr("app"),
					Type: to.Ptr("Microsoft.HDInsight/clusters/applications"),
					ID:   to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1/applications/app"),
					Etag: to.Ptr("CF938302-6B4D-44A0-A6D2-C0D67E847AEC"),
					Properties: &armhdinsight.ApplicationProperties{
						ApplicationState: to.Ptr("Running"),
						ApplicationType:  to.Ptr("CustomApplication"),
						ComputeProfile: &armhdinsight.ComputeProfile{
							Roles: []*armhdinsight.Role{
								{
									Name: to.Ptr("edgenode"),
									HardwareProfile: &armhdinsight.HardwareProfile{
										VMSize: to.Ptr("Standard_D12_v2"),
									},
									TargetInstanceCount: to.Ptr[int32](1),
								}},
						},
						CreatedDate: to.Ptr("2017-03-22T21:34:39.293"),
						HTTPSEndpoints: []*armhdinsight.ApplicationGetHTTPSEndpoint{
							{
								AccessModes: []*string{
									to.Ptr("WebPage")},
								DestinationPort: to.Ptr[int32](20000),
								Location:        to.Ptr("https://cluster1-app.apps.azurehdinsight.net:443"),
								PublicPort:      to.Ptr[int32](443),
							}},
						InstallScriptActions: []*armhdinsight.RuntimeScriptAction{
							{
								Name: to.Ptr("app-install-app"),
								Roles: []*string{
									to.Ptr("edgenode")},
								URI: to.Ptr("http://testurl.com/public/hdi-app/20170301/hdinsight-app-install.sh"),
							}},
						MarketplaceIdentifier: to.Ptr("app-on-hdiapp-on-hdi.1.0.3"),
						ProvisioningState:     to.Ptr("Succeeded"),
						SSHEndpoints: []*armhdinsight.ApplicationGetEndpoint{
							{
								DestinationPort: to.Ptr[int32](22),
								Location:        to.Ptr("app.cluster1-ssh.azurehdinsight.net:22"),
								PublicPort:      to.Ptr[int32](22),
							}},
						UninstallScriptActions: []*armhdinsight.RuntimeScriptAction{},
					},
					Tags: map[string]*string{
						"key1": to.Ptr("val1"),
					},
				},
				{
					Name: to.Ptr("app2"),
					Type: to.Ptr("Microsoft.HDInsight/clusters/applications"),
					ID:   to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1/applications/app2"),
					Etag: to.Ptr("2C128F8E-BB26-4637-99E4-18EBC39FD51F"),
					Properties: &armhdinsight.ApplicationProperties{
						ApplicationState: to.Ptr("AzureVMConfiguration"),
						ApplicationType:  to.Ptr("CustomApplication"),
						ComputeProfile: &armhdinsight.ComputeProfile{
							Roles: []*armhdinsight.Role{
								{
									Name: to.Ptr("edgenode"),
									HardwareProfile: &armhdinsight.HardwareProfile{
										VMSize: to.Ptr("Standard_D3"),
									},
									TargetInstanceCount: to.Ptr[int32](1),
								}},
						},
						CreatedDate: to.Ptr("2017-03-28T02:01:25.107"),
						HTTPSEndpoints: []*armhdinsight.ApplicationGetHTTPSEndpoint{
							{
								AccessModes: []*string{
									to.Ptr("WebPage")},
								DestinationPort: to.Ptr[int32](18630),
								Location:        to.Ptr("location"),
								PublicPort:      to.Ptr[int32](443),
							}},
						InstallScriptActions: []*armhdinsight.RuntimeScriptAction{
							{
								Name: to.Ptr("app2-Install"),
								Roles: []*string{
									to.Ptr("edgenode")},
								URI: to.Ptr("https://app2url.com/azure/2.4.0.0/app2_install.sh"),
							}},
						MarketplaceIdentifier:  to.Ptr("app2-hdinsightsmall.1.0.8"),
						ProvisioningState:      to.Ptr("Succeeded"),
						SSHEndpoints:           []*armhdinsight.ApplicationGetEndpoint{},
						UninstallScriptActions: []*armhdinsight.RuntimeScriptAction{},
					},
					Tags: map[string]*string{
						"key1": to.Ptr("val1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ApplicationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ApplicationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetAllApplications.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplications_Get(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetApplicationInProgress.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get application on HDInsight cluster creation in progress"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewApplicationsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"cluster1",
		"app",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetApplicationInProgress.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.Application{
			Name: to.Ptr("app"),
			Type: to.Ptr("Microsoft.HDInsight/clusters/applications"),
			ID:   to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1/applications/app"),
			Etag: to.Ptr("2C128F8E-BB26-4637-99E4-18EBC39FD51F"),
			Properties: &armhdinsight.ApplicationProperties{
				ApplicationState: to.Ptr("AzureVMConfiguration"),
				ApplicationType:  to.Ptr("CustomApplication"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("edgenode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D3"),
							},
							TargetInstanceCount: to.Ptr[int32](1),
						}},
				},
				CreatedDate: to.Ptr("2017-03-28T02:01:25.107"),
				HTTPSEndpoints: []*armhdinsight.ApplicationGetHTTPSEndpoint{
					{
						AccessModes: []*string{
							to.Ptr("WebPage")},
						DestinationPort: to.Ptr[int32](18630),
						Location:        to.Ptr("location"),
						PublicPort:      to.Ptr[int32](443),
					}},
				InstallScriptActions: []*armhdinsight.RuntimeScriptAction{
					{
						Name: to.Ptr("app-Install"),
						Roles: []*string{
							to.Ptr("edgenode")},
						URI: to.Ptr("https://app.com/azure/app_install.sh"),
					}},
				MarketplaceIdentifier:  to.Ptr("id"),
				ProvisioningState:      to.Ptr("Succeeded"),
				SSHEndpoints:           []*armhdinsight.ApplicationGetEndpoint{},
				UninstallScriptActions: []*armhdinsight.RuntimeScriptAction{},
			},
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Application) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Application)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetApplicationInProgress.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetApplicationCreated.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get application on HDInsight cluster successfully created."},
	})
	client = armhdinsight.NewApplicationsClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"cluster1",
		"app",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetApplicationCreated.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.Application{
			Name: to.Ptr("app"),
			Type: to.Ptr("Microsoft.HDInsight/clusters/applications"),
			ID:   to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1/applications/app"),
			Etag: to.Ptr("CF938302-6B4D-44A0-A6D2-C0D67E847AEC"),
			Properties: &armhdinsight.ApplicationProperties{
				ApplicationState: to.Ptr("Running"),
				ApplicationType:  to.Ptr("CustomApplication"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("edgenode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D12_v2"),
							},
							TargetInstanceCount: to.Ptr[int32](1),
						}},
				},
				CreatedDate: to.Ptr("2017-03-22T21:34:39.293"),
				HTTPSEndpoints: []*armhdinsight.ApplicationGetHTTPSEndpoint{
					{
						AccessModes: []*string{
							to.Ptr("WebPage")},
						DestinationPort: to.Ptr[int32](20000),
						Location:        to.Ptr("https://cluster1.apps.azurehdinsight.net:443"),
						PublicPort:      to.Ptr[int32](443),
					}},
				InstallScriptActions: []*armhdinsight.RuntimeScriptAction{
					{
						Name: to.Ptr("app-install"),
						Roles: []*string{
							to.Ptr("edgenode")},
						URI: to.Ptr("http://app.com/public/hdi-app/20170301/app-install.sh"),
					}},
				MarketplaceIdentifier: to.Ptr("appMarketId"),
				ProvisioningState:     to.Ptr("Succeeded"),
				SSHEndpoints: []*armhdinsight.ApplicationGetEndpoint{
					{
						DestinationPort: to.Ptr[int32](22),
						Location:        to.Ptr("cluster1-ssh.azurehdinsight.net:22"),
						PublicPort:      to.Ptr[int32](22),
					}},
				UninstallScriptActions: []*armhdinsight.RuntimeScriptAction{},
			},
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Application) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Application)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetApplicationCreated.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplications_Create(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Application"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewApplicationsClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"rg1",
		"cluster1",
		"hue",
		armhdinsight.Application{
			Properties: &armhdinsight.ApplicationProperties{
				ApplicationType: to.Ptr("CustomApplication"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("edgenode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D12_v2"),
							},
							TargetInstanceCount: to.Ptr[int32](1),
						}},
				},
				Errors: []*armhdinsight.Errors{},
				HTTPSEndpoints: []*armhdinsight.ApplicationGetHTTPSEndpoint{
					{
						AccessModes: []*string{
							to.Ptr("WebPage")},
						DestinationPort: to.Ptr[int32](20000),
						SubDomainSuffix: to.Ptr("dss"),
					}},
				InstallScriptActions: []*armhdinsight.RuntimeScriptAction{
					{
						Name:       to.Ptr("app-install-app1"),
						Parameters: to.Ptr("-version latest -port 20000"),
						Roles: []*string{
							to.Ptr("edgenode")},
						URI: to.Ptr("https://.../install.sh"),
					}},
				UninstallScriptActions: []*armhdinsight.RuntimeScriptAction{},
			},
		},
		&armhdinsight.ApplicationsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateApplication.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateApplication.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.Application{
			Name: to.Ptr("hue"),
			Type: to.Ptr("Microsoft.HDInsight/clusters/applications"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1/applications/hue"),
			Etag: to.Ptr("etag"),
			Properties: &armhdinsight.ApplicationProperties{
				ApplicationState: to.Ptr("ApplicationConfiguration"),
				ApplicationType:  to.Ptr("CustomApplication"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("edgenode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D12_v2"),
							},
							TargetInstanceCount: to.Ptr[int32](1),
						}},
				},
				CreatedDate: to.Ptr("2017-02-28"),
				Errors:      []*armhdinsight.Errors{},
				HTTPSEndpoints: []*armhdinsight.ApplicationGetHTTPSEndpoint{
					{
						AccessModes: []*string{
							to.Ptr("WebPage")},
						DestinationPort: to.Ptr[int32](20000),
					}},
				InstallScriptActions: []*armhdinsight.RuntimeScriptAction{
					{
						Name: to.Ptr("app-install-app1"),
						Roles: []*string{
							to.Ptr("edgenode")},
						URI: to.Ptr("https://.../install.sh"),
					}},
				ProvisioningState:      to.Ptr("Succeeded"),
				SSHEndpoints:           []*armhdinsight.ApplicationGetEndpoint{},
				UninstallScriptActions: []*armhdinsight.RuntimeScriptAction{},
			},
			Tags: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.Application) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Application)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateApplication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplications_Delete(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DeleteApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Application from HDInsight cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewApplicationsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"cluster1",
		"hue",
		&armhdinsight.ApplicationsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DeleteApplication.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DeleteApplication.json: %v", err)
	}
}

func TestApplications_GetAzureAsyncOperationStatus(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetApplicationCreationAsyncOperationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the azure async operation status."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewApplicationsClient("subid", cred, &options)
	res, err := client.GetAzureAsyncOperationStatus(ctx,
		"rg1",
		"cluster1",
		"app",
		"CF938302-6B4D-44A0-A6D2-C0D67E847AEC",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetApplicationCreationAsyncOperationStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.AsyncOperationResult{
			Status: to.Ptr(armhdinsight.AsyncOperationStateInProgress),
		}
		if !reflect.DeepEqual(exampleRes, res.AsyncOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AsyncOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetApplicationCreationAsyncOperationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocations_GetCapabilities(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetHDInsightCapabilities.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the subscription capabilities for specific location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewLocationsClient("subid", cred, &options)
	res, err := client.GetCapabilities(ctx,
		"West US",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetHDInsightCapabilities.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.CapabilitiesResult{
			Features: []*string{
				to.Ptr("ALLOW_GATEWAY_AUTH_BYPASS"),
				to.Ptr("AUX_IAAS_FUNCTIONALITIES"),
				to.Ptr("BLOCK_APPS_FOR_SECURE_CLUSTER"),
				to.Ptr("CLUSTER_RESIZE"),
				to.Ptr("CLUSTERS_CONTRACT_1"),
				to.Ptr("CLUSTERS_CONTRACT_1_SDK"),
				to.Ptr("CLUSTERS_CONTRACT_2_SDK"),
				to.Ptr("CLUSTERS_CONTRACT_VERSION_3_SDK"),
				to.Ptr("COLLECTANONYMIZEDLOGS"),
				to.Ptr("CONTAINER_LOG_COLLECTOR"),
				to.Ptr("CONTAINER_RESOURCE_V3"),
				to.Ptr("CUSTOM_ACTIONS_V2"),
				to.Ptr("DATALAKE"),
				to.Ptr("DATALAKE_3_2"),
				to.Ptr("DATALAKE_3_4"),
				to.Ptr("DATALAKE_3_5"),
				to.Ptr("DATALAKE_DEFAULTFS_3_5"),
				to.Ptr("DEFAULT_CONTAINER_IDENTIFIER_AND_STORAGEFQDN_ALREADY_USED"),
				to.Ptr("DOCUMENT_VALIDATION_IN_API"),
				to.Ptr("ENABLEDATALAKE"),
				to.Ptr("ENABLEGENEVAANALYTICS"),
				to.Ptr("HADOOP_VIRTUAL_NETWORK_ENABLED"),
				to.Ptr("HS2_ZK_ROUTER_INTERACTIVEHIVE"),
				to.Ptr("IAAS_ALLOW_CUSTOM_DNS"),
				to.Ptr("IAAS_AMBARI_APP_TIMELINE_SERVER_HA_SERVICE"),
				to.Ptr("IAAS_AMBARI_DEPENDENCY_BASED_DEPLOYMENT"),
				to.Ptr("IAAS_AMBARI_HA_SERVICES"),
				to.Ptr("IAAS_AMBARI_HISTORYSERVER_HA_SERVICE"),
				to.Ptr("IAAS_AMBARI_LOWER_LATENCY"),
				to.Ptr("IAAS_AMBARI_SKIP_COMPONENTS_INSTALL"),
				to.Ptr("IAAS_ARM_PROVISIONING"),
				to.Ptr("IAAS_CLOSE_HEAD_HTTPS_END_POINT_AFTER_CLUSTER_CREATE"),
				to.Ptr("IAAS_CLUSTER_APPLICATION_ALLOW_MULTIPLE_ROLE_INSTANCES"),
				to.Ptr("IAAS_CLUSTER_APPLICATION_REMOVE"),
				to.Ptr("IAAS_CLUSTER_CONTAINER_PREUPLOAD_SUBMIT_WAIT"),
				to.Ptr("IAAS_CLUSTER_RSERVER"),
				to.Ptr("IAAS_DB_CREATION_IN_PARALLEL_TO_VM"),
				to.Ptr("IAAS_DELETE_LEAKED_RESOURCES"),
				to.Ptr("IAAS_DEPLOYMENTS"),
				to.Ptr("IAAS_DO_NOT_CREATE_WASB_TABLES_IN_CUSTOMER_STORAGE"),
				to.Ptr("IAAS_ENABLE_CLUSTER_CONFIG_OVERRIDES"),
				to.Ptr("IAAS_ENABLE_OFFLINE_CLEANUP"),
				to.Ptr("IAAS_ENABLE_OFFLINE_CLEANUP_FOR_DELETING_VMS"),
				to.Ptr("IAAS_INCLUDE_STORAGE_IN_SUBSCRIPTION_SELECTION"),
				to.Ptr("IAAS_PARALLEL_DB_CREATE"),
				to.Ptr("IAAS_PREPROVISION_METASTORES_SCHEMAS"),
				to.Ptr("IAAS_SCRIPTACTIONS_DELETE_VMS_CRUD_FAILURES"),
				to.Ptr("IAAS_SCRIPTACTIONS_RUNNING"),
				to.Ptr("IAAS_SHORT_VM_NAME"),
				to.Ptr("IAAS_SUBMIT_AMBARI_REQUEST_ONCE_LINUX_VM_ARE_AVAILABLE"),
				to.Ptr("IAAS_TEZ_ATS_V15"),
				to.Ptr("IAAS_USE_UNATTENDED_UPGRADES_FOR_PATCHING"),
				to.Ptr("IAAS_VALIDATE_CUSTOM_VNET"),
				to.Ptr("IAAS_VALIDATE_NSG"),
				to.Ptr("IAAS_WAIT_FOR_CLOSING_HEAD_HTTPS_END_POINT_AFTER_CLUSTER_CREATE"),
				to.Ptr("IAAS_YARN_HDINSIGHT_SQL_TIMELINE_STORE"),
				to.Ptr("IAAS_YARN_HDINSIGHT_TIMELINE_STORE"),
				to.Ptr("INTERACTIVEHIVE"),
				to.Ptr("MDSCENTRALLOGGING"),
				to.Ptr("NODE_SETUP_POLLER_ENABLED"),
				to.Ptr("OVERPROVISION_HOSTGROUP_edgenode"),
				to.Ptr("OVERPROVISION_HOSTGROUP_Gateway"),
				to.Ptr("OVERPROVISION_HOSTGROUP_Workernode"),
				to.Ptr("OVERPROVISION_HOSTGROUP_zookeepernode"),
				to.Ptr("PERF_OPTIMIZED_RESOURCE_LOCATION_FETCH"),
				to.Ptr("PORTALAPPINSTALL"),
				to.Ptr("POWERSHELL_SCRIPT_ACTION"),
				to.Ptr("POWERSHELL_SCRIPT_ACTION_SDK"),
				to.Ptr("PREMIUM_TIER_PREVIEW"),
				to.Ptr("PROVISIONING_AGENT"),
				to.Ptr("RMHA"),
				to.Ptr("RSERVER_CLUSTERTYPE_3_5_ENABLED"),
				to.Ptr("RSERVER_CLUSTERTYPE_ENABLED"),
				to.Ptr("SHOW_HUMBOLDT_GA"),
				to.Ptr("SHOW_IBIZA_CREATE"),
				to.Ptr("SPARK_2_1"),
				to.Ptr("SPARK_EXPERIMENTAL"),
				to.Ptr("STORM_PREVIEW"),
				to.Ptr("UI_CREATE_WIZARD_V2"),
				to.Ptr("VIRTUAL_NETWORK_ENABLED"),
				to.Ptr("VMSIZES_AUX")},
			Quota: &armhdinsight.QuotaCapability{
				CoresUsed:       to.Ptr[int64](0),
				MaxCoresAllowed: to.Ptr[int64](3000),
				RegionalQuotas: []*armhdinsight.RegionalQuotaCapability{
					{
						CoresAvailable: to.Ptr[int64](1000),
						CoresUsed:      to.Ptr[int64](0),
						RegionName:     to.Ptr("Australia East"),
					},
					{
						CoresAvailable: to.Ptr[int64](1000),
						CoresUsed:      to.Ptr[int64](0),
						RegionName:     to.Ptr("Australia Southeast"),
					},
					{
						CoresAvailable: to.Ptr[int64](1000),
						CoresUsed:      to.Ptr[int64](0),
						RegionName:     to.Ptr("Brazil South"),
					},
					{
						CoresAvailable: to.Ptr[int64](1000),
						CoresUsed:      to.Ptr[int64](0),
						RegionName:     to.Ptr("Canada Central"),
					},
					{
						CoresAvailable: to.Ptr[int64](1000),
						CoresUsed:      to.Ptr[int64](0),
						RegionName:     to.Ptr("Canada East"),
					},
					{
						CoresAvailable: to.Ptr[int64](1000),
						CoresUsed:      to.Ptr[int64](0),
						RegionName:     to.Ptr("Central India"),
					},
					{
						CoresAvailable: to.Ptr[int64](1000),
						CoresUsed:      to.Ptr[int64](24),
						RegionName:     to.Ptr("Central US"),
					},
					{
						CoresAvailable: to.Ptr[int64](1000),
						CoresUsed:      to.Ptr[int64](0),
						RegionName:     to.Ptr("Central US EUAP"),
					},
					{
						CoresAvailable: to.Ptr[int64](1000),
						CoresUsed:      to.Ptr[int64](24),
						RegionName:     to.Ptr("East Asia"),
					},
					{
						CoresAvailable: to.Ptr[int64](1000),
						CoresUsed:      to.Ptr[int64](24),
						RegionName:     to.Ptr("East US"),
					},
					{
						CoresAvailable: to.Ptr[int64](1000),
						CoresUsed:      to.Ptr[int64](0),
						RegionName:     to.Ptr("East US 2"),
					},
					{
						CoresAvailable: to.Ptr[int64](1000),
						CoresUsed:      to.Ptr[int64](0),
						RegionName:     to.Ptr("Japan East"),
					},
					{
						CoresAvailable: to.Ptr[int64](1000),
						CoresUsed:      to.Ptr[int64](0),
						RegionName:     to.Ptr("Japan West"),
					},
					{
						CoresAvailable: to.Ptr[int64](1000),
						CoresUsed:      to.Ptr[int64](0),
						RegionName:     to.Ptr("North Central US"),
					},
					{
						CoresAvailable: to.Ptr[int64](1000),
						CoresUsed:      to.Ptr[int64](0),
						RegionName:     to.Ptr("North Europe"),
					},
					{
						CoresAvailable: to.Ptr[int64](1000),
						CoresUsed:      to.Ptr[int64](0),
						RegionName:     to.Ptr("South Central US"),
					},
					{
						CoresAvailable: to.Ptr[int64](1000),
						CoresUsed:      to.Ptr[int64](0),
						RegionName:     to.Ptr("Southeast Asia"),
					},
					{
						CoresAvailable: to.Ptr[int64](1000),
						CoresUsed:      to.Ptr[int64](0),
						RegionName:     to.Ptr("West Central US"),
					},
					{
						CoresAvailable: to.Ptr[int64](1000),
						CoresUsed:      to.Ptr[int64](0),
						RegionName:     to.Ptr("West Europe"),
					},
					{
						CoresAvailable: to.Ptr[int64](1000),
						CoresUsed:      to.Ptr[int64](132),
						RegionName:     to.Ptr("West US"),
					},
					{
						CoresAvailable: to.Ptr[int64](1000),
						CoresUsed:      to.Ptr[int64](0),
						RegionName:     to.Ptr("West US 2"),
					}},
			},
			Regions: map[string]*armhdinsight.RegionsCapability{
				"iaas": {
					Available: []*string{
						to.Ptr("AUSTRALIA EAST"),
						to.Ptr("AUSTRALIA SOUTHEAST"),
						to.Ptr("BRAZIL SOUTH"),
						to.Ptr("CANADA CENTRAL"),
						to.Ptr("CANADA EAST"),
						to.Ptr("CENTRAL INDIA"),
						to.Ptr("CENTRAL US"),
						to.Ptr("CENTRAL US EUAP"),
						to.Ptr("EAST ASIA"),
						to.Ptr("EAST US"),
						to.Ptr("EAST US 2"),
						to.Ptr("JAPAN EAST"),
						to.Ptr("JAPAN WEST"),
						to.Ptr("NORTH CENTRAL US"),
						to.Ptr("NORTH EUROPE"),
						to.Ptr("SOUTH CENTRAL US"),
						to.Ptr("SOUTHEAST ASIA"),
						to.Ptr("WEST CENTRAL US"),
						to.Ptr("WEST EUROPE"),
						to.Ptr("WEST US"),
						to.Ptr("WEST US 2")},
				},
				"paas": {
					Available: []*string{
						to.Ptr("AUSTRALIA EAST"),
						to.Ptr("AUSTRALIA SOUTHEAST"),
						to.Ptr("BRAZIL SOUTH"),
						to.Ptr("CENTRAL INDIA"),
						to.Ptr("CENTRAL US"),
						to.Ptr("EAST ASIA"),
						to.Ptr("EAST US"),
						to.Ptr("EAST US 2"),
						to.Ptr("JAPAN EAST"),
						to.Ptr("JAPAN WEST"),
						to.Ptr("NORTH CENTRAL US"),
						to.Ptr("NORTH EUROPE"),
						to.Ptr("SOUTH CENTRAL US"),
						to.Ptr("SOUTHEAST ASIA"),
						to.Ptr("WEST EUROPE"),
						to.Ptr("WEST US"),
						to.Ptr("WEST US 2")},
				},
			},
			Versions: map[string]*armhdinsight.VersionsCapability{
				"iaas": {
					Available: []*armhdinsight.VersionSpec{
						{
							ComponentVersions: map[string]*string{
								"HBase":  to.Ptr("0.98.4"),
								"HDP":    to.Ptr("2.2"),
								"Hadoop": to.Ptr("2.6.0"),
								"Storm":  to.Ptr("0.9.3"),
							},
							DisplayName:  to.Ptr("Version 3.2.1000.0.8840373"),
							FriendlyName: to.Ptr("3.2"),
							IsDefault:    to.Ptr(false),
						},
						{
							ComponentVersions: map[string]*string{
								"HBase":  to.Ptr("1.1.2"),
								"HDP":    to.Ptr("2.3"),
								"Hadoop": to.Ptr("2.7.0"),
								"Spark":  to.Ptr("1.5.2"),
								"Storm":  to.Ptr("0.10.0"),
							},
							DisplayName:  to.Ptr("Version 3.3.1000.0.9776961"),
							FriendlyName: to.Ptr("3.3"),
							IsDefault:    to.Ptr(false),
						},
						{
							ComponentVersions: map[string]*string{
								"HBase":   to.Ptr("1.1.2"),
								"HDP":     to.Ptr("2.4"),
								"Hadoop":  to.Ptr("2.7.1"),
								"RServer": to.Ptr("8.0"),
								"Spark":   to.Ptr("1.6.2"),
								"Storm":   to.Ptr("0.10.0"),
							},
							DisplayName:  to.Ptr("Version 3.4.1000.0.9719475"),
							FriendlyName: to.Ptr("3.4"),
							IsDefault:    to.Ptr(false),
						},
						{
							ComponentVersions: map[string]*string{
								"HBase":           to.Ptr("1.1.2"),
								"HDP":             to.Ptr("2.5"),
								"Hadoop":          to.Ptr("2.7.3"),
								"InteractiveHive": to.Ptr("2.1.0"),
								"RServer":         to.Ptr("9.0"),
								"Spark":           to.Ptr("1.6.3,2.0.2"),
								"Storm":           to.Ptr("1.0.1"),
							},
							DisplayName:  to.Ptr("Version 3.5.1000.0.9732704"),
							FriendlyName: to.Ptr("3.5"),
							IsDefault:    to.Ptr(true),
						},
						{
							ComponentVersions: map[string]*string{
								"HDP":   to.Ptr("2.6"),
								"Spark": to.Ptr("2.1.0"),
							},
							DisplayName:  to.Ptr("Version 3.6.1000.0.9503998"),
							FriendlyName: to.Ptr("3.6"),
							IsDefault:    to.Ptr(false),
						},
						{
							DisplayName:  to.Ptr("Version 99.152.1000.0.6943836"),
							FriendlyName: to.Ptr("99.152"),
							IsDefault:    to.Ptr(false),
						}},
				},
				"paas": {
					Available: []*armhdinsight.VersionSpec{
						{
							DisplayName:  to.Ptr("HdInsight version 1.6.1.0.335536"),
							FriendlyName: to.Ptr("1.6"),
							IsDefault:    to.Ptr(false),
						},
						{
							ComponentVersions: map[string]*string{
								"HDP":    to.Ptr("1.3"),
								"Hadoop": to.Ptr("1.2.0"),
							},
							DisplayName:  to.Ptr("Version 2.1.9.406.1221105"),
							FriendlyName: to.Ptr("2.1"),
							IsDefault:    to.Ptr(false),
						},
						{
							ComponentVersions: map[string]*string{
								"HDP":    to.Ptr("2.0"),
								"Hadoop": to.Ptr("2.2.0"),
							},
							DisplayName:  to.Ptr("Version 3.0.6.989.2441725"),
							FriendlyName: to.Ptr("3.0"),
							IsDefault:    to.Ptr(false),
						},
						{
							ComponentVersions: map[string]*string{
								"HBase":  to.Ptr("0.98"),
								"HDP":    to.Ptr("2.1.7"),
								"Hadoop": to.Ptr("2.4.0"),
							},
							DisplayName:  to.Ptr("Version 3.1.4.989.2441725"),
							FriendlyName: to.Ptr("3.1"),
							IsDefault:    to.Ptr(false),
						},
						{
							ComponentVersions: map[string]*string{
								"HBase":  to.Ptr("0.98.4"),
								"HDP":    to.Ptr("2.2"),
								"Hadoop": to.Ptr("2.6.0"),
								"Storm":  to.Ptr("0.9.3"),
							},
							DisplayName:  to.Ptr("Version 3.2.7.989.2441725"),
							FriendlyName: to.Ptr("3.2"),
							IsDefault:    to.Ptr(false),
						},
						{
							ComponentVersions: map[string]*string{
								"HBase":  to.Ptr("1.1.2"),
								"HDP":    to.Ptr("2.3"),
								"Hadoop": to.Ptr("2.7.0"),
								"Storm":  to.Ptr("0.10.0"),
							},
							DisplayName:  to.Ptr("Version 3.3.0.989.2441725"),
							FriendlyName: to.Ptr("3.3"),
							IsDefault:    to.Ptr(true),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CapabilitiesResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CapabilitiesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetHDInsightCapabilities.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocations_ListUsages(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetHDInsightUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the subscription usages for specific location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewLocationsClient("subid", cred, &options)
	res, err := client.ListUsages(ctx,
		"West US",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetHDInsightUsages.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.UsagesListResult{
			Value: []*armhdinsight.Usage{
				{
					Name: &armhdinsight.LocalizedName{
						LocalizedValue: to.Ptr("Cores"),
						Value:          to.Ptr("cores"),
					},
					CurrentValue: to.Ptr[int64](0),
					Limit:        to.Ptr[int64](5000),
					Unit:         to.Ptr("Count"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.UsagesListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.UsagesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetHDInsightUsages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocations_ListBillingSpecs(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Locations_ListBillingSpecs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the subscription billingSpecs for the specified location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewLocationsClient("subid", cred, &options)
	res, err := client.ListBillingSpecs(ctx,
		"East US 2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Locations_ListBillingSpecs.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.BillingResponseListResult{
			BillingResources: []*armhdinsight.BillingResources{
				{
					BillingMeters:     []*armhdinsight.BillingMeters{},
					DiskBillingMeters: []*armhdinsight.DiskBillingMeters{},
					Region:            to.Ptr("East US 2"),
				},
				{
					BillingMeters: []*armhdinsight.BillingMeters{
						{
							Meter:          to.Ptr("11111111-1111-1111-1111-111111111111"),
							MeterParameter: to.Ptr("default"),
							Unit:           to.Ptr("CoreHours"),
						},
						{
							Meter:          to.Ptr("11111111-1111-1111-1111-111111111111"),
							MeterParameter: to.Ptr("Kafka"),
							Unit:           to.Ptr("CoreHours"),
						}},
					DiskBillingMeters: []*armhdinsight.DiskBillingMeters{
						{
							DiskRpMeter: to.Ptr("11111111-1111-1111-1111-111111111111"),
							SKU:         to.Ptr("All"),
							Tier:        to.Ptr(armhdinsight.TierStandard),
						},
						{
							DiskRpMeter: to.Ptr("11111111-1111-1111-1111-111111111111"),
							SKU:         to.Ptr("All"),
							Tier:        to.Ptr(armhdinsight.TierStandard),
						}},
					Region: to.Ptr("default"),
				}},
			VMSizeFilters: []*armhdinsight.VMSizeCompatibilityFilterV2{
				{
					FilterMode: to.Ptr(armhdinsight.FilterModeExclude),
				}},
			VMSizes: []*string{
				to.Ptr("A5"),
				to.Ptr("A6"),
				to.Ptr("A7")},
		}
		if !reflect.DeepEqual(exampleRes, res.BillingResponseListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BillingResponseListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Locations_ListBillingSpecs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocations_GetAzureAsyncOperationStatus(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Locations_GetAsyncOperationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the azure async operation status."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewLocationsClient("subid", cred, &options)
	res, err := client.GetAzureAsyncOperationStatus(ctx,
		"East US 2",
		"8a0348f4-8a85-4ec2-abe0-03b26104a9a0-0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Locations_GetAsyncOperationStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.AsyncOperationResult{
			Status: to.Ptr(armhdinsight.AsyncOperationStateSucceeded),
		}
		if !reflect.DeepEqual(exampleRes, res.AsyncOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AsyncOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Locations_GetAsyncOperationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocations_CheckNameAvailability(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Locations_CheckClusterNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the subscription usages for specific location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewLocationsClient("subid", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"westus",
		armhdinsight.NameAvailabilityCheckRequestParameters{
			Name: to.Ptr("test123"),
			Type: to.Ptr("clusters"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Locations_CheckClusterNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.NameAvailabilityCheckResult{
			Message:       to.Ptr("Cluster name 'test123' is unavailable"),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr("AlreadyExists"),
		}
		if !reflect.DeepEqual(exampleRes, res.NameAvailabilityCheckResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NameAvailabilityCheckResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Locations_CheckClusterNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocations_ValidateClusterCreateRequest(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Locations_ValidateClusterCreateRequest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the subscription usages for specific location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewLocationsClient("subid", cred, &options)
	res, err := client.ValidateClusterCreateRequest(ctx,
		"southcentralus",
		armhdinsight.ClusterCreateRequestValidationParameters{
			Location: to.Ptr("southcentralus"),
			Properties: &armhdinsight.ClusterCreateProperties{
				ClusterDefinition: &armhdinsight.ClusterDefinition{
					ComponentVersion: map[string]*string{
						"Spark": to.Ptr("2.4"),
					},
					Configurations: map[string]interface{}{
						"gateway": map[string]interface{}{
							"restAuthCredential.isEnabled": true,
							"restAuthCredential.password":  "**********",
							"restAuthCredential.username":  "admin",
						},
					},
					Kind: to.Ptr("spark"),
				},
				ClusterVersion: to.Ptr("4.0"),
				ComputeProfile: &armhdinsight.ComputeProfile{
					Roles: []*armhdinsight.Role{
						{
							Name: to.Ptr("headnode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_E8_V3"),
							},
							MinInstanceCount: to.Ptr[int32](1),
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("********"),
									Username: to.Ptr("sshuser"),
								},
							},
							ScriptActions:       []*armhdinsight.ScriptAction{},
							TargetInstanceCount: to.Ptr[int32](2),
						},
						{
							Name: to.Ptr("workernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_E8_V3"),
							},
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("********"),
									Username: to.Ptr("sshuser"),
								},
							},
							ScriptActions:       []*armhdinsight.ScriptAction{},
							TargetInstanceCount: to.Ptr[int32](4),
						},
						{
							Name: to.Ptr("zookeepernode"),
							HardwareProfile: &armhdinsight.HardwareProfile{
								VMSize: to.Ptr("Standard_D13_V2"),
							},
							MinInstanceCount: to.Ptr[int32](1),
							OSProfile: &armhdinsight.OsProfile{
								LinuxOperatingSystemProfile: &armhdinsight.LinuxOperatingSystemProfile{
									Password: to.Ptr("**********"),
									Username: to.Ptr("sshuser"),
								},
							},
							ScriptActions:       []*armhdinsight.ScriptAction{},
							TargetInstanceCount: to.Ptr[int32](3),
						}},
				},
				MinSupportedTLSVersion: to.Ptr("1.2"),
				OSType:                 to.Ptr(armhdinsight.OSTypeLinux),
				StorageProfile: &armhdinsight.StorageProfile{
					Storageaccounts: []*armhdinsight.StorageAccount{
						{
							Name:       to.Ptr("storagename.blob.core.windows.net"),
							Container:  to.Ptr("contianername"),
							IsDefault:  to.Ptr(true),
							Key:        to.Ptr("*******"),
							ResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Storage/storageAccounts/storagename"),
						}},
				},
				Tier: to.Ptr(armhdinsight.TierStandard),
			},
			Tags:               map[string]*string{},
			Name:               to.Ptr("testclustername"),
			Type:               to.Ptr("Microsoft.HDInsight/clusters"),
			FetchAaddsResource: to.Ptr(false),
			TenantID:           to.Ptr("00000000-0000-0000-0000-000000000000"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Locations_ValidateClusterCreateRequest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.ClusterCreateValidationResult{
			EstimatedCreationDuration: to.Ptr("00:20:00"),
			ValidationErrors:          []*armhdinsight.ValidationErrorInfo{},
		}
		if !reflect.DeepEqual(exampleRes, res.ClusterCreateValidationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ClusterCreateValidationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Locations_ValidateClusterCreateRequest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurations_List(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Configurations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all configuration information"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewConfigurationsClient("subid", cred, &options)
	res, err := client.List(ctx,
		"rg1",
		"cluster1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Configurations_List.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.ClusterConfigurations{
			Configurations: map[string]map[string]*string{
				"core-site": {
					"fs.azure.account.key.test.blob.core.windows.net": to.Ptr("accountKey"),
					"fs.defaultFS": to.Ptr("wasb://test.blob.core.windows.net"),
				},
				"gateway": {
					"restAuthCredential.isEnabled": to.Ptr("true"),
					"restAuthCredential.password":  to.Ptr("**********"),
					"restAuthCredential.username":  to.Ptr("admin"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ClusterConfigurations) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ClusterConfigurations)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Configurations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurations_Update(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/ChangeHttpConnectivityDisable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Disable HTTP connectivity"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewConfigurationsClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"cluster1",
		"gateway",
		map[string]*string{
			"restAuthCredential.isEnabled": to.Ptr("false"),
		},
		&armhdinsight.ConfigurationsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/ChangeHttpConnectivityDisable.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/ChangeHttpConnectivityDisable.json: %v", err)
	}

	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/ChangeHttpConnectivityEnable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enable HTTP connectivity"},
	})
	client = armhdinsight.NewConfigurationsClient("subid", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"rg1",
		"cluster1",
		"gateway",
		map[string]*string{
			"restAuthCredential.isEnabled": to.Ptr("true"),
			"restAuthCredential.password":  to.Ptr("**********"),
			"restAuthCredential.username":  to.Ptr("hadoop"),
		},
		&armhdinsight.ConfigurationsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/ChangeHttpConnectivityEnable.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/ChangeHttpConnectivityEnable.json: %v", err)
	}
}

func TestConfigurations_Get(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Configurations_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Core site settings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewConfigurationsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"cluster1",
		"core-site",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Configurations_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := map[string]*string{
			"fs.azure.account.key.test.blob.core.windows.net": to.Ptr("accountKey"),
			"fs.defaultFS": to.Ptr("wasb://test.blob.core.windows.net"),
		}
		if !reflect.DeepEqual(exampleRes, res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/HDI_Configurations_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtensions_EnableMonitoring(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/EnableLinuxClusterMonitoring.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enable cluster monitoring"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewExtensionsClient("subid", cred, &options)
	poller, err := client.BeginEnableMonitoring(ctx,
		"rg1",
		"cluster1",
		armhdinsight.ClusterMonitoringRequest{
			PrimaryKey:  to.Ptr("**********"),
			WorkspaceID: to.Ptr("a2090ead-8c9f-4fba-b70e-533e3e003163"),
		},
		&armhdinsight.ExtensionsClientBeginEnableMonitoringOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/EnableLinuxClusterMonitoring.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/EnableLinuxClusterMonitoring.json: %v", err)
	}
}

func TestExtensions_GetMonitoringStatus(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetLinuxClusterMonitoringStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enable cluster monitoring"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewExtensionsClient("subid", cred, &options)
	res, err := client.GetMonitoringStatus(ctx,
		"rg1",
		"cluster1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetLinuxClusterMonitoringStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.ClusterMonitoringResponse{
			ClusterMonitoringEnabled: to.Ptr(true),
			WorkspaceID:              to.Ptr("id"),
		}
		if !reflect.DeepEqual(exampleRes, res.ClusterMonitoringResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ClusterMonitoringResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetLinuxClusterMonitoringStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtensions_DisableMonitoring(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DisableLinuxClusterMonitoring.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enable cluster monitoring"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewExtensionsClient("subid", cred, &options)
	poller, err := client.BeginDisableMonitoring(ctx,
		"rg1",
		"cluster1",
		&armhdinsight.ExtensionsClientBeginDisableMonitoringOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DisableLinuxClusterMonitoring.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DisableLinuxClusterMonitoring.json: %v", err)
	}
}

func TestExtensions_EnableAzureMonitor(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/EnableLinuxClusterAzureMonitor.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enable cluster monitoring"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewExtensionsClient("subid", cred, &options)
	poller, err := client.BeginEnableAzureMonitor(ctx,
		"rg1",
		"cluster1",
		armhdinsight.AzureMonitorRequest{
			PrimaryKey:  to.Ptr("**********"),
			WorkspaceID: to.Ptr("a2090ead-8c9f-4fba-b70e-533e3e003163"),
		},
		&armhdinsight.ExtensionsClientBeginEnableAzureMonitorOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/EnableLinuxClusterAzureMonitor.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/EnableLinuxClusterAzureMonitor.json: %v", err)
	}
}

func TestExtensions_GetAzureMonitorStatus(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetLinuxClusterAzureMonitorStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enable cluster monitoring"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewExtensionsClient("subid", cred, &options)
	res, err := client.GetAzureMonitorStatus(ctx,
		"rg1",
		"cluster1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetLinuxClusterAzureMonitorStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.AzureMonitorResponse{
			ClusterMonitoringEnabled: to.Ptr(true),
			WorkspaceID:              to.Ptr("id"),
		}
		if !reflect.DeepEqual(exampleRes, res.AzureMonitorResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureMonitorResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetLinuxClusterAzureMonitorStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtensions_DisableAzureMonitor(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DisableLinuxClusterAzureMonitor.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enable cluster monitoring"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewExtensionsClient("subid", cred, &options)
	poller, err := client.BeginDisableAzureMonitor(ctx,
		"rg1",
		"cluster1",
		&armhdinsight.ExtensionsClientBeginDisableAzureMonitorOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DisableLinuxClusterAzureMonitor.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DisableLinuxClusterAzureMonitor.json: %v", err)
	}
}

func TestExtensions_Create(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateExtension.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a monitoring extension on Hadoop Linux cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewExtensionsClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"rg1",
		"cluster1",
		"clustermonitoring",
		armhdinsight.Extension{
			PrimaryKey:  to.Ptr("**********"),
			WorkspaceID: to.Ptr("a2090ead-8c9f-4fba-b70e-533e3e003163"),
		},
		&armhdinsight.ExtensionsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateExtension.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/CreateExtension.json: %v", err)
	}
}

func TestExtensions_Get(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetExtension.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an extension"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewExtensionsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"cluster1",
		"clustermonitoring",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetExtension.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.ClusterMonitoringResponse{
			ClusterMonitoringEnabled: to.Ptr(true),
			WorkspaceID:              to.Ptr("id"),
		}
		if !reflect.DeepEqual(exampleRes, res.ClusterMonitoringResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ClusterMonitoringResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetExtension.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtensions_Delete(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DeleteExtension.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an extension"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewExtensionsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"cluster1",
		"clustermonitoring",
		&armhdinsight.ExtensionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DeleteExtension.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DeleteExtension.json: %v", err)
	}
}

func TestExtensions_GetAzureAsyncOperationStatus(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetExtensionCreationAsyncOperationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the azure async operation status."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewExtensionsClient("subid", cred, &options)
	res, err := client.GetAzureAsyncOperationStatus(ctx,
		"rg1",
		"cluster1",
		"azuremonitor",
		"CF938302-6B4D-44A0-A6D2-C0D67E847AEC",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetExtensionCreationAsyncOperationStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.AsyncOperationResult{
			Status: to.Ptr(armhdinsight.AsyncOperationStateInProgress),
		}
		if !reflect.DeepEqual(exampleRes, res.AsyncOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AsyncOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetExtensionCreationAsyncOperationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScriptActions_Delete(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DeleteScriptAction.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a script action on HDInsight cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewScriptActionsClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"cluster1",
		"scriptName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DeleteScriptAction.json: %v", err)
	}
}

func TestScriptActions_ListByCluster(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetLinuxHadoopScriptAction.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all persisted script actions for the given cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewScriptActionsClient("subid", cred, &options)
	pager := client.ListByCluster("rg1",
		"cluster1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetLinuxHadoopScriptAction.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhdinsight.ScriptActionsList{
			Value: []*armhdinsight.RuntimeScriptActionDetail{
				{
					Name:            to.Ptr("app-Install"),
					ApplicationName: to.Ptr("app"),
					Roles: []*string{
						to.Ptr("edgenode")},
					URI: to.Ptr("https://app.com/azure/app_install.sh"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ScriptActionsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ScriptActionsList)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetLinuxHadoopScriptAction.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScriptActions_GetExecutionDetail(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetScriptActionById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get script execution history by script id"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewScriptActionsClient("subid", cred, &options)
	res, err := client.GetExecutionDetail(ctx,
		"rg1",
		"cluster1",
		"391145124054712",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetScriptActionById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.RuntimeScriptActionDetail{
			Name:            to.Ptr("Test"),
			ApplicationName: to.Ptr("app1"),
			Roles: []*string{
				to.Ptr("headnode"),
				to.Ptr("workernode")},
			URI:               to.Ptr("http://testurl.com/install.ssh"),
			DebugInformation:  to.Ptr(""),
			EndTime:           to.Ptr("2017-03-22T21:34:39.293"),
			ExecutionSummary:  []*armhdinsight.ScriptActionExecutionSummary{},
			Operation:         to.Ptr("PostClusterCreateScriptActionRequest"),
			ScriptExecutionID: to.Ptr[int64](391145124054712),
			StartTime:         to.Ptr("2017-03-22T21:34:39.293"),
			Status:            to.Ptr("ValidationFailed"),
		}
		if !reflect.DeepEqual(exampleRes, res.RuntimeScriptActionDetail) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RuntimeScriptActionDetail)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetScriptActionById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScriptActions_GetExecutionAsyncOperationStatus(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetScriptExecutionAsyncOperationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the async execution operation status."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewScriptActionsClient("subid", cred, &options)
	res, err := client.GetExecutionAsyncOperationStatus(ctx,
		"rg1",
		"cluster1",
		"CF938302-6B4D-44A0-A6D2-C0D67E847AEC",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetScriptExecutionAsyncOperationStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.AsyncOperationResult{
			Status: to.Ptr(armhdinsight.AsyncOperationStateInProgress),
		}
		if !reflect.DeepEqual(exampleRes, res.AsyncOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AsyncOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetScriptExecutionAsyncOperationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScriptExecutionHistory_ListByCluster(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetScriptExecutionHistory.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Script Execution History List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewScriptExecutionHistoryClient("subid", cred, &options)
	pager := client.ListByCluster("rg1",
		"cluster1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetScriptExecutionHistory.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhdinsight.ScriptActionExecutionHistoryList{
			Value: []*armhdinsight.RuntimeScriptActionDetail{
				{
					Name:            to.Ptr("Test"),
					ApplicationName: to.Ptr("app1"),
					Roles: []*string{
						to.Ptr("headnode"),
						to.Ptr("workernode")},
					URI:               to.Ptr("http://testurl.com/install.ssh"),
					EndTime:           to.Ptr("2017-03-22T21:34:39.293"),
					ExecutionSummary:  []*armhdinsight.ScriptActionExecutionSummary{},
					Operation:         to.Ptr("PostClusterCreateScriptActionRequest"),
					ScriptExecutionID: to.Ptr[int64](391145124054712),
					StartTime:         to.Ptr("2017-03-22T21:34:39.293"),
					Status:            to.Ptr("ValidationFailed"),
				},
				{
					Name:            to.Ptr("Test"),
					ApplicationName: to.Ptr("app2"),
					Roles: []*string{
						to.Ptr("headnode"),
						to.Ptr("workernode")},
					URI:               to.Ptr("http://testurl.com/install-script.ssh"),
					EndTime:           to.Ptr("2017-03-22T21:34:39.293"),
					ExecutionSummary:  []*armhdinsight.ScriptActionExecutionSummary{},
					Operation:         to.Ptr("PostClusterCreateScriptActionRequest"),
					ScriptExecutionID: to.Ptr[int64](391144597342127),
					StartTime:         to.Ptr("2017-03-22T21:34:39.293"),
					Status:            to.Ptr("ValidationFailed"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ScriptActionExecutionHistoryList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ScriptActionExecutionHistoryList)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetScriptExecutionHistory.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScriptExecutionHistory_Promote(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/PromoteLinuxHadoopScriptAction.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Promote a script action on HDInsight cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewScriptExecutionHistoryClient("subid", cred, &options)
	_, err := client.Promote(ctx,
		"rg1",
		"cluster1",
		"391145124054712",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/PromoteLinuxHadoopScriptAction.json: %v", err)
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachines_ListHosts(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetClusterVirtualMachines.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get All hosts in the cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewVirtualMachinesClient("subid", cred, &options)
	res, err := client.ListHosts(ctx,
		"rg1",
		"cluster1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetClusterVirtualMachines.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armhdinsight.HostInfo{
			{
				Name: to.Ptr("gateway1"),
			},
			{
				Name: to.Ptr("gateway3"),
			},
			{
				Name: to.Ptr("headnode0"),
			},
			{
				Name: to.Ptr("headnode3"),
			},
			{
				Name: to.Ptr("workernode0"),
			},
			{
				Name: to.Ptr("workernode1"),
			},
			{
				Name: to.Ptr("zookeepernode0"),
			},
			{
				Name: to.Ptr("zookeepernode2"),
			},
			{
				Name: to.Ptr("zookeepernode3"),
			}}
		if !reflect.DeepEqual(exampleRes, res.HostInfoArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HostInfoArray)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetClusterVirtualMachines.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_RestartHosts(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/RestartVirtualMachinesOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restarts the specified HDInsight cluster hosts."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewVirtualMachinesClient("subid", cred, &options)
	poller, err := client.BeginRestartHosts(ctx,
		"rg1",
		"cluster1",
		[]*string{
			to.Ptr("gateway1"),
			to.Ptr("gateway3")},
		&armhdinsight.VirtualMachinesClientBeginRestartHostsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/RestartVirtualMachinesOperation.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/RestartVirtualMachinesOperation.json: %v", err)
	}
}

func TestVirtualMachines_GetAsyncOperationStatus(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetRestartHostsAsyncOperationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the async operation status of restarting host."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewVirtualMachinesClient("subid", cred, &options)
	res, err := client.GetAsyncOperationStatus(ctx,
		"rg1",
		"cluster1",
		"CF938302-6B4D-44A0-A6D2-C0D67E847AEC",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetRestartHostsAsyncOperationStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.AsyncOperationResult{
			Status: to.Ptr(armhdinsight.AsyncOperationStateInProgress),
		}
		if !reflect.DeepEqual(exampleRes, res.AsyncOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AsyncOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetRestartHostsAsyncOperationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_ListByCluster(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetAllPrivateEndpointConnectionsInCluster.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all private endpoint connections for a specific HDInsight cluster."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewPrivateEndpointConnectionsClient("subid", cred, &options)
	pager := client.ListByCluster("rg1",
		"cluster1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetAllPrivateEndpointConnectionsInCluster.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhdinsight.PrivateEndpointConnectionListResult{
			Value: []*armhdinsight.PrivateEndpointConnection{
				{
					Name: to.Ptr("testprivateep.b3bf5fed-9b12-4560-b7d0-2abe1bba07e2"),
					Type: to.Ptr("Microsoft.HDInsight/clusters/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1/privateEndpointConnections/testprivateep.b3bf5fed-9b12-4560-b7d0-2abe1bba07e2"),
					Properties: &armhdinsight.PrivateEndpointConnectionProperties{
						LinkIdentifier: to.Ptr("620815036"),
						PrivateEndpoint: &armhdinsight.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/privateEndpoints/testprivateep"),
						},
						PrivateLinkServiceConnectionState: &armhdinsight.PrivateLinkServiceConnectionState{
							Description:     to.Ptr(""),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armhdinsight.PrivateLinkServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armhdinsight.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetAllPrivateEndpointConnectionsInCluster.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/ApprovePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Approve a private endpoint connection manually."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewPrivateEndpointConnectionsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"cluster1",
		"testprivateep.b3bf5fed-9b12-4560-b7d0-2abe1bba07e2",
		armhdinsight.PrivateEndpointConnection{
			Properties: &armhdinsight.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armhdinsight.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("update it from pending to approved."),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armhdinsight.PrivateLinkServiceConnectionStatusApproved),
				},
			},
		},
		&armhdinsight.PrivateEndpointConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/ApprovePrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/ApprovePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.PrivateEndpointConnection{
			Name: to.Ptr("testprivateep.b3bf5fed-9b12-4560-b7d0-2abe1bba07e2"),
			Type: to.Ptr("Microsoft.HDInsight/clusters/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1/privateEndpointConnections/testprivateep.b3bf5fed-9b12-4560-b7d0-2abe1bba07e2"),
			Properties: &armhdinsight.PrivateEndpointConnectionProperties{
				LinkIdentifier: to.Ptr("620815036"),
				PrivateEndpoint: &armhdinsight.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/privateEndpoints/testprivateep"),
				},
				PrivateLinkServiceConnectionState: &armhdinsight.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("update it from pending to approved."),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armhdinsight.PrivateLinkServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armhdinsight.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/ApprovePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get specific private endpoint connection for a specific HDInsight cluster."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewPrivateEndpointConnectionsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"cluster1",
		"testprivateep.b3bf5fed-9b12-4560-b7d0-2abe1bba07e2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.PrivateEndpointConnection{
			Name: to.Ptr("testprivateep.b3bf5fed-9b12-4560-b7d0-2abe1bba07e2"),
			Type: to.Ptr("Microsoft.HDInsight/clusters/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1/privateEndpointConnections/testprivateep.b3bf5fed-9b12-4560-b7d0-2abe1bba07e2"),
			Properties: &armhdinsight.PrivateEndpointConnectionProperties{
				LinkIdentifier: to.Ptr("620815036"),
				PrivateEndpoint: &armhdinsight.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/privateEndpoints/testprivateep"),
				},
				PrivateLinkServiceConnectionState: &armhdinsight.PrivateLinkServiceConnectionState{
					Description:     to.Ptr(""),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armhdinsight.PrivateLinkServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armhdinsight.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DeletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete specific private endpoint connection for a specific HDInsight cluster."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewPrivateEndpointConnectionsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"cluster1",
		"testprivateep.b3bf5fed-9b12-4560-b7d0-2abe1bba07e2",
		&armhdinsight.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DeletePrivateEndpointConnection.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/DeletePrivateEndpointConnection.json: %v", err)
	}
}

func TestPrivateLinkResources_ListByCluster(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetAllPrivateLinkResourcesInCluster.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all private link resources in a specific HDInsight cluster."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewPrivateLinkResourcesClient("subid", cred, &options)
	res, err := client.ListByCluster(ctx,
		"rg1",
		"cluster1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetAllPrivateLinkResourcesInCluster.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.PrivateLinkResourceListResult{
			Value: []*armhdinsight.PrivateLinkResource{
				{
					Name: to.Ptr("gateway"),
					Type: to.Ptr("Microsoft.HDInsight/clusters/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1/privateLinkResources/gateway"),
					Properties: &armhdinsight.PrivateLinkResourceProperties{
						GroupID: to.Ptr("gateway"),
						RequiredMembers: []*string{
							to.Ptr("gateway")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.azurehdinsight.net")},
					},
				},
				{
					Name: to.Ptr("headnode"),
					Type: to.Ptr("Microsoft.HDInsight/clusters/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1/privateLinkResources/headnode"),
					Properties: &armhdinsight.PrivateLinkResourceProperties{
						GroupID: to.Ptr("headnode"),
						RequiredMembers: []*string{
							to.Ptr("headnode")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.azurehdinsight.net")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetAllPrivateLinkResourcesInCluster.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetPrivateLinkResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get specific private link resource in a specific HDInsight cluster."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhdinsight.NewPrivateLinkResourcesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"cluster1",
		"gateway",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetPrivateLinkResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhdinsight.PrivateLinkResource{
			Name: to.Ptr("gateway"),
			Type: to.Ptr("Microsoft.HDInsight/clusters/privateLinkResources"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1/privateLinkResources/gateway"),
			Properties: &armhdinsight.PrivateLinkResourceProperties{
				GroupID: to.Ptr("gateway"),
				RequiredMembers: []*string{
					to.Ptr("gateway")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.azurehdinsight.net")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/hdinsight/resource-manager/Microsoft.HDInsight/stable/2021-06-01/examples/GetPrivateLinkResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
