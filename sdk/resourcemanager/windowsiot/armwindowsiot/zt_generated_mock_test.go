//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armwindowsiot_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/windowsiot/armwindowsiot"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/OperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwindowsiot.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/OperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armwindowsiot.OperationListResult{
			Value: []*armwindowsiot.OperationEntity{
				{
					Name: to.Ptr("Microsoft.WindowsIoT/Services/write"),
					Display: &armwindowsiot.OperationDisplayInfo{
						Description: to.Ptr("Creates a Windows IoT Subscription with the specified parameters or update the properties or tags or adds custom domain for the specified Windows IoT Subscription."),
						Operation:   to.Ptr("Create/Update Windows IoT Subscription"),
						Provider:    to.Ptr("Windows IoT"),
						Resource:    to.Ptr("Windows IoT Services"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.WindowsIoT/Services/delete"),
					Display: &armwindowsiot.OperationDisplayInfo{
						Description: to.Ptr("Deletes an existing Windows IoT Subscription."),
						Operation:   to.Ptr("Delete Windows IoT Subscription"),
						Provider:    to.Ptr("Windows IoT"),
						Resource:    to.Ptr("Windows IoT Services"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.WindowsIoT/checkNameAvailability/read"),
					Display: &armwindowsiot.OperationDisplayInfo{
						Description: to.Ptr("Checks that account name is valid and is not in use."),
						Operation:   to.Ptr("Check Name Availability"),
						Provider:    to.Ptr("Windows IoT"),
						Resource:    to.Ptr("Name Availability"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.WindowsIoT/Services/read"),
					Display: &armwindowsiot.OperationDisplayInfo{
						Description: to.Ptr("Returns the list of Windows IoT Services or gets the properties for the specified Windows IoT Subscription."),
						Operation:   to.Ptr("List/Get Windows IoT Subscription(s)"),
						Provider:    to.Ptr("Windows IoT"),
						Resource:    to.Ptr("Windows IoT Services"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.WindowsIoT/operations/read"),
					Display: &armwindowsiot.OperationDisplayInfo{
						Description: to.Ptr("Polls the status of an asynchronous operation."),
						Operation:   to.Ptr("Poll Asynchronous Operation"),
						Provider:    to.Ptr("Windows IoT"),
						Resource:    to.Ptr("Operations"),
					},
					Origin: to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/OperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_Get(t *testing.T) {
	// From example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/Service_GetProperties.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_GetProperties"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwindowsiot.NewServicesClient("45b60d85-fd72-427a-a708-f994d26e593e", cred, &options)
	res, err := client.Get(ctx,
		"res9407",
		"service8596",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/Service_GetProperties.json: %v", err)
	}
	// Response check
	{
		exampleRes := armwindowsiot.DeviceService{
			Name:     to.Ptr("service8596"),
			Type:     to.Ptr("Microsoft.WindowsIoT/Services"),
			ID:       to.Ptr("/subscriptions/45b60d85-fd72-427a-a708-f994d26e593e/resourceGroups/res9407/providers/Microsoft.WindowsIoT/Services/service8596"),
			Location: to.Ptr("westus"),
			Properties: &armwindowsiot.DeviceServiceProperties{
				AdminDomainName:   to.Ptr("d.e.f"),
				BillingDomainName: to.Ptr("a.b.c"),
				Notes:             to.Ptr("blah"),
				Quantity:          to.Ptr[int64](1000000),
				StartDate:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T12:00:00000Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeviceService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeviceService)
			t.Fatalf("Mock response is not equal to example response for example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/Service_GetProperties.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_CreateOrUpdate(t *testing.T) {
	// From example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/Service_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Service_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwindowsiot.NewServicesClient("27de630f-e1ee-42de-8849-90def4986454", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"res9101",
		"service4445",
		armwindowsiot.DeviceService{
			Location: to.Ptr("East US"),
			Properties: &armwindowsiot.DeviceServiceProperties{
				AdminDomainName:   to.Ptr("d.e.f"),
				BillingDomainName: to.Ptr("a.b.c"),
				Notes:             to.Ptr("blah"),
				Quantity:          to.Ptr[int64](1000000),
			},
		},
		&armwindowsiot.ServicesClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/Service_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armwindowsiot.DeviceService{
			Type:     to.Ptr("Microsoft.WindowsIoT/Services"),
			Location: to.Ptr("East US"),
			Properties: &armwindowsiot.DeviceServiceProperties{
				AdminDomainName:   to.Ptr("d.e.f"),
				BillingDomainName: to.Ptr("a.b.c"),
				Notes:             to.Ptr("blah"),
				Quantity:          to.Ptr[int64](1000000),
				StartDate:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T12:00:00000Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeviceService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeviceService)
			t.Fatalf("Mock response is not equal to example response for example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/Service_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_Update(t *testing.T) {
	// From example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/Service_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Service_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwindowsiot.NewServicesClient("45b60d85-fd72-427a-a708-f994d26e593e", cred, &options)
	res, err := client.Update(ctx,
		"res9407",
		"service8596",
		armwindowsiot.DeviceService{
			Location: to.Ptr("East US"),
			Properties: &armwindowsiot.DeviceServiceProperties{
				AdminDomainName:   to.Ptr("d.e.f"),
				BillingDomainName: to.Ptr("a.b.c"),
				Notes:             to.Ptr("blah"),
				Quantity:          to.Ptr[int64](1000000),
			},
		},
		&armwindowsiot.ServicesClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/Service_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armwindowsiot.DeviceService{
			Type:     to.Ptr("Microsoft.WindowsIoT/Services"),
			Location: to.Ptr("East US"),
			Properties: &armwindowsiot.DeviceServiceProperties{
				AdminDomainName:   to.Ptr("d.e.f"),
				BillingDomainName: to.Ptr("a.b.c"),
				Notes:             to.Ptr("blah"),
				Quantity:          to.Ptr[int64](1000000),
				StartDate:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T12:00:00000Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeviceService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeviceService)
			t.Fatalf("Mock response is not equal to example response for example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/Service_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_Delete(t *testing.T) {
	// From example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/Service_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Service_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwindowsiot.NewServicesClient("27de630f-e1ee-42de-8849-90def4986454", cred, &options)
	res, err := client.Delete(ctx,
		"res4228",
		"service2434",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/Service_Delete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armwindowsiot.DeviceService{
			Type: to.Ptr("Microsoft.WindowsIoT/Services"),
			Properties: &armwindowsiot.DeviceServiceProperties{
				AdminDomainName:   to.Ptr("d.e.f"),
				BillingDomainName: to.Ptr("a.b.c"),
				Notes:             to.Ptr("blah"),
				Quantity:          to.Ptr[int64](1000000),
				StartDate:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T12:00:00000Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeviceService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeviceService)
			t.Fatalf("Mock response is not equal to example response for example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/Service_Delete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_ListByResourceGroup(t *testing.T) {
	// From example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/Service_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Service_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwindowsiot.NewServicesClient("27de630f-e1ee-42de-8849-90def4986454", cred, &options)
	pager := client.ListByResourceGroup("res6117",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/Service_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armwindowsiot.DeviceServiceDescriptionListResult{
			Value: []*armwindowsiot.DeviceService{
				{
					Name: to.Ptr("service4036"),
					Type: to.Ptr("Microsoft.WindowsIoT/Services"),
					ID:   to.Ptr("/subscriptions/27de630f-e1ee-42de-8849-90def4986454/resourceGroups/res6117/providers/Microsoft.WindowsIoT/Services/service4036"),
					Properties: &armwindowsiot.DeviceServiceProperties{
						AdminDomainName:   to.Ptr("d.e.f"),
						BillingDomainName: to.Ptr("a.b.c"),
						Notes:             to.Ptr("blah"),
						Quantity:          to.Ptr[int64](1000000),
						StartDate:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T12:00:00000Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("service4452"),
					Type: to.Ptr("Microsoft.WindowsIoT/Services"),
					ID:   to.Ptr("/subscriptions/27de630f-e1ee-42de-8849-90def4986454/resourceGroups/res6117/providers/Microsoft.WindowsIoT/Services/service4452"),
					Properties: &armwindowsiot.DeviceServiceProperties{
						AdminDomainName:   to.Ptr("d.e.f"),
						BillingDomainName: to.Ptr("a.b.c"),
						Notes:             to.Ptr("blah"),
						Quantity:          to.Ptr[int64](1000000),
						StartDate:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T12:00:00000Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeviceServiceDescriptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeviceServiceDescriptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/Service_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_List(t *testing.T) {
	// From example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/Service_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Service_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwindowsiot.NewServicesClient("27de630f-e1ee-42de-8849-90def4986454", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/Service_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armwindowsiot.DeviceServiceDescriptionListResult{
			Value: []*armwindowsiot.DeviceService{
				{
					Name: to.Ptr("service1125"),
					Type: to.Ptr("Microsoft.WindowsIoT/Services"),
					ID:   to.Ptr("/subscriptions/27de630f-e1ee-42de-8849-90def4986454/resourceGroups/res2627/providers/Microsoft.WindowsIoT/Services/service1125"),
					Properties: &armwindowsiot.DeviceServiceProperties{
						AdminDomainName:   to.Ptr("d.e.f"),
						BillingDomainName: to.Ptr("a.b.c"),
						Notes:             to.Ptr("blah"),
						Quantity:          to.Ptr[int64](1000000),
						StartDate:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T12:00:00000Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("service3699"),
					Type: to.Ptr("Microsoft.WindowsIoT/Services"),
					ID:   to.Ptr("/subscriptions/27de630f-e1ee-42de-8849-90def4986454/resourceGroups/testcmk3/providers/Microsoft.WindowsIoT/Services/service3699"),
					Properties: &armwindowsiot.DeviceServiceProperties{
						AdminDomainName:   to.Ptr("d.e.f"),
						BillingDomainName: to.Ptr("a.b.c"),
						Notes:             to.Ptr("blah"),
						Quantity:          to.Ptr[int64](1000000),
						StartDate:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T12:00:00000Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("service6637"),
					Type: to.Ptr("Microsoft.WindowsIoT/Services"),
					ID:   to.Ptr("/subscriptions/27de630f-e1ee-42de-8849-90def4986454/resourceGroups/testcmk3/providers/Microsoft.WindowsIoT/Services/service6637"),
					Properties: &armwindowsiot.DeviceServiceProperties{
						AdminDomainName:   to.Ptr("d.e.f"),
						BillingDomainName: to.Ptr("a.b.c"),
						Notes:             to.Ptr("blah"),
						Quantity:          to.Ptr[int64](1000000),
						StartDate:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T12:00:00000Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("service834"),
					Type: to.Ptr("Microsoft.WindowsIoT/Services"),
					ID:   to.Ptr("/subscriptions/27de630f-e1ee-42de-8849-90def4986454/resourceGroups/res8186/providers/Microsoft.WindowsIoT/Services/service834"),
					Properties: &armwindowsiot.DeviceServiceProperties{
						AdminDomainName:   to.Ptr("d.e.f"),
						BillingDomainName: to.Ptr("a.b.c"),
						Notes:             to.Ptr("blah"),
						Quantity:          to.Ptr[int64](1000000),
						StartDate:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T12:00:00000Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("service9174"),
					Type: to.Ptr("Microsoft.WindowsIoT/Services"),
					ID:   to.Ptr("/subscriptions/27de630f-e1ee-42de-8849-90def4986454/resourceGroups/testcmk3/providers/Microsoft.WindowsIoT/Services/service9174"),
					Properties: &armwindowsiot.DeviceServiceProperties{
						AdminDomainName:   to.Ptr("d.e.f"),
						BillingDomainName: to.Ptr("a.b.c"),
						Notes:             to.Ptr("blah"),
						Quantity:          to.Ptr[int64](1000000),
						StartDate:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T12:00:00000Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeviceServiceDescriptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeviceServiceDescriptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/Service_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_CheckDeviceServiceNameAvailability(t *testing.T) {
	// From example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/Service_CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Service_CheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwindowsiot.NewServicesClient("27de630f-e1ee-42de-8849-90def4986454", cred, &options)
	res, err := client.CheckDeviceServiceNameAvailability(ctx,
		armwindowsiot.DeviceServiceCheckNameAvailabilityParameters{
			Name: to.Ptr("service3363"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/Service_CheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armwindowsiot.DeviceServiceNameAvailabilityInfo{
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.DeviceServiceNameAvailabilityInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeviceServiceNameAvailabilityInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/windowsiot/resource-manager/Microsoft.WindowsIoT/stable/2019-06-01/examples/Service_CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
