//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdigitaltwins_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/digitaltwins/armdigitaltwins"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestDigitalTwins_Get(t *testing.T) {
	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsGet_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a DigitalTwinsInstance resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdigitaltwins.NewClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	res, err := client.Get(ctx,
		"resRg",
		"myDigitalTwinsService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsGet_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.Description{
			Name:     to.Ptr("myDigitalTwinsService"),
			Type:     to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances"),
			ID:       to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService"),
			Location: to.Ptr("westus2"),
			SystemData: &armdigitaltwins.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:13:59.4037715Z"); return t }()),
				CreatedBy:          to.Ptr("user@example.com"),
				CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:02.5281409Z"); return t }()),
				LastModifiedBy:     to.Ptr("d2baee3d-44c0-41b6-9961-92563de66a97"),
				LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeApplication),
			},
			Properties: &armdigitaltwins.Properties{
				CreatedTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T12:55:05.229Z"); return t }()),
				HostName:            to.Ptr("https://myDigitalTwinsService.api.wus2.ss.azuredigitaltwins-test.net"),
				LastUpdatedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-06T12:21:58.610Z"); return t }()),
				ProvisioningState:   to.Ptr(armdigitaltwins.ProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr(armdigitaltwins.PublicNetworkAccessEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Description) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Description)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsGet_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsGet_WithPrivateEndpointConnection_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a DigitalTwinsInstance resource with a private endpoint connection"},
	})
	client = armdigitaltwins.NewClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	res, err = client.Get(ctx,
		"resRg",
		"myDigitalTwinsService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsGet_WithPrivateEndpointConnection_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.Description{
			Name:     to.Ptr("myDigitalTwinsService"),
			Type:     to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances"),
			ID:       to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService"),
			Location: to.Ptr("westus2"),
			SystemData: &armdigitaltwins.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:13:59.4037715Z"); return t }()),
				CreatedBy:          to.Ptr("user@example.com"),
				CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:02.5281409Z"); return t }()),
				LastModifiedBy:     to.Ptr("d2baee3d-44c0-41b6-9961-92563de66a97"),
				LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeApplication),
			},
			Properties: &armdigitaltwins.Properties{
				CreatedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T12:55:05.229Z"); return t }()),
				HostName:        to.Ptr("https://myDigitalTwinsService.api.wus2.ss.azuredigitaltwins-test.net"),
				LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-06T12:21:58.610Z"); return t }()),
				PrivateEndpointConnections: []*armdigitaltwins.PrivateEndpointConnection{
					{
						ID: to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService/privateEndpointConnections/myPrivateConnection"),
						Properties: &armdigitaltwins.ConnectionProperties{
							GroupIDs: []*string{
								to.Ptr("digitalTwinsInstance")},
							PrivateEndpoint: &armdigitaltwins.PrivateEndpoint{
								ID: to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourceGroups/resRg/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
							},
							PrivateLinkServiceConnectionState: &armdigitaltwins.ConnectionPropertiesPrivateLinkServiceConnectionState{
								Description:     to.Ptr("Please approve my request, thanks."),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr(armdigitaltwins.PrivateLinkServiceConnectionStatusPending),
							},
						},
					}},
				ProvisioningState:   to.Ptr(armdigitaltwins.ProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr(armdigitaltwins.PublicNetworkAccessEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Description) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Description)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsGet_WithPrivateEndpointConnection_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsGet_WithIdentity_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a DigitalTwinsInstance resource with identity"},
	})
	client = armdigitaltwins.NewClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	res, err = client.Get(ctx,
		"resRg",
		"myDigitalTwinsService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsGet_WithIdentity_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.Description{
			Name: to.Ptr("myDigitalTwinsService"),
			Type: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances"),
			ID:   to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService"),
			Identity: &armdigitaltwins.Identity{
				Type:        to.Ptr(armdigitaltwins.DigitalTwinsIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("544215a9-21d8-4fb5-8094-8efbcc311dd0"),
				TenantID:    to.Ptr("544215a9-21d8-4fb5-8094-8efbcc311dd0"),
			},
			Location: to.Ptr("westus2"),
			SystemData: &armdigitaltwins.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:13:59.4037715Z"); return t }()),
				CreatedBy:          to.Ptr("user@example.com"),
				CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:02.5281409Z"); return t }()),
				LastModifiedBy:     to.Ptr("d2baee3d-44c0-41b6-9961-92563de66a97"),
				LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeApplication),
			},
			Properties: &armdigitaltwins.Properties{
				CreatedTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T12:55:05.229Z"); return t }()),
				HostName:            to.Ptr("https://myDigitalTwinsService.api.wus2.ss.azuredigitaltwins-test.net"),
				LastUpdatedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-06T12:21:58.610Z"); return t }()),
				ProvisioningState:   to.Ptr(armdigitaltwins.ProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr(armdigitaltwins.PublicNetworkAccessEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Description) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Description)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsGet_WithIdentity_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDigitalTwins_CreateOrUpdate(t *testing.T) {
	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPut_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put a DigitalTwinsInstance resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdigitaltwins.NewClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resRg",
		"myDigitalTwinsService",
		armdigitaltwins.Description{
			Location: to.Ptr("WestUS2"),
		},
		&armdigitaltwins.ClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPut_example.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPut_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.Description{
			Name:     to.Ptr("myDigitalTwinsService"),
			Type:     to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances"),
			ID:       to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService"),
			Location: to.Ptr("westus2"),
			SystemData: &armdigitaltwins.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:59.4037715Z"); return t }()),
				CreatedBy:          to.Ptr("user@example.com"),
				CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:15:02.5281409Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@example.com"),
				LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeUser),
			},
			Tags: map[string]*string{
				"purpose": to.Ptr("dev"),
			},
			Properties: &armdigitaltwins.Properties{
				CreatedTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T12:55:05.229Z"); return t }()),
				HostName:            to.Ptr("https://myDigitalTwinsService.api.wus2.ss.azuredigitaltwins-test.net"),
				LastUpdatedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-06T12:21:58.610Z"); return t }()),
				ProvisioningState:   to.Ptr(armdigitaltwins.ProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr(armdigitaltwins.PublicNetworkAccessEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Description) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Description)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPut_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPut_WithIdentity_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put a DigitalTwinsInstance resource with identity"},
	})
	client = armdigitaltwins.NewClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"resRg",
		"myDigitalTwinsService",
		armdigitaltwins.Description{
			Identity: &armdigitaltwins.Identity{
				Type: to.Ptr(armdigitaltwins.DigitalTwinsIdentityTypeSystemAssigned),
			},
			Location: to.Ptr("WestUS2"),
		},
		&armdigitaltwins.ClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPut_WithIdentity_example.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPut_WithIdentity_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.Description{
			Name: to.Ptr("myDigitalTwinsService"),
			Type: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances"),
			ID:   to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService"),
			Identity: &armdigitaltwins.Identity{
				Type:        to.Ptr(armdigitaltwins.DigitalTwinsIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("544215a9-21d8-4fb5-8094-8efbcc311dd0"),
				TenantID:    to.Ptr("544215a9-21d8-4fb5-8094-8efbcc311dd0"),
			},
			Location: to.Ptr("westus2"),
			SystemData: &armdigitaltwins.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:59.4037715Z"); return t }()),
				CreatedBy:          to.Ptr("user@example.com"),
				CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:15:02.5281409Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@example.com"),
				LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeUser),
			},
			Tags: map[string]*string{
				"purpose": to.Ptr("dev"),
			},
			Properties: &armdigitaltwins.Properties{
				CreatedTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T12:55:05.229Z"); return t }()),
				HostName:            to.Ptr("https://myDigitalTwinsService.api.wus2.ss.azuredigitaltwins-test.net"),
				LastUpdatedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-06T12:21:58.610Z"); return t }()),
				ProvisioningState:   to.Ptr(armdigitaltwins.ProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr(armdigitaltwins.PublicNetworkAccessEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Description) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Description)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPut_WithIdentity_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPut_WithPublicNetworkAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put a DigitalTwinsInstance resource with publicNetworkAccess property"},
	})
	client = armdigitaltwins.NewClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"resRg",
		"myDigitalTwinsService",
		armdigitaltwins.Description{
			Location: to.Ptr("WestUS2"),
			Properties: &armdigitaltwins.Properties{
				PublicNetworkAccess: to.Ptr(armdigitaltwins.PublicNetworkAccessEnabled),
			},
		},
		&armdigitaltwins.ClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPut_WithPublicNetworkAccess.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPut_WithPublicNetworkAccess.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.Description{
			Name:     to.Ptr("myDigitalTwinsService"),
			Type:     to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances"),
			ID:       to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService"),
			Location: to.Ptr("westus2"),
			SystemData: &armdigitaltwins.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:59.4037715Z"); return t }()),
				CreatedBy:          to.Ptr("user@example.com"),
				CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:15:02.5281409Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@example.com"),
				LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeUser),
			},
			Properties: &armdigitaltwins.Properties{
				CreatedTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T12:55:05.229Z"); return t }()),
				HostName:            to.Ptr("https://myDigitalTwinsService.api.wus2.ss.azuredigitaltwins-test.net"),
				LastUpdatedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-06T12:21:58.610Z"); return t }()),
				ProvisioningState:   to.Ptr(armdigitaltwins.ProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr(armdigitaltwins.PublicNetworkAccessEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Description) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Description)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPut_WithPublicNetworkAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDigitalTwins_Update(t *testing.T) {
	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPatch_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch a DigitalTwinsInstance resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdigitaltwins.NewClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"resRg",
		"myDigitalTwinsService",
		armdigitaltwins.PatchDescription{
			Tags: map[string]*string{
				"purpose": to.Ptr("dev"),
			},
		},
		&armdigitaltwins.ClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPatch_example.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPatch_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.Description{
			Name:     to.Ptr("myDigitalTwinsService"),
			Type:     to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances"),
			ID:       to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService"),
			Location: to.Ptr("westus2"),
			SystemData: &armdigitaltwins.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:59.4037715Z"); return t }()),
				CreatedBy:          to.Ptr("user@example.com"),
				CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:15:02.5281409Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@example.com"),
				LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeUser),
			},
			Tags: map[string]*string{
				"purpose": to.Ptr("dev"),
			},
			Properties: &armdigitaltwins.Properties{
				CreatedTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T12:55:05.229Z"); return t }()),
				HostName:            to.Ptr("https://myDigitalTwinsService.api.wus2.ss.azuredigitaltwins-test.net"),
				LastUpdatedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-06T12:21:58.610Z"); return t }()),
				ProvisioningState:   to.Ptr(armdigitaltwins.ProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr(armdigitaltwins.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Description) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Description)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPatch_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPatch_WithIdentity_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch a DigitalTwinsInstance resource with identity"},
	})
	client = armdigitaltwins.NewClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"resRg",
		"myDigitalTwinsService",
		armdigitaltwins.PatchDescription{
			Identity: &armdigitaltwins.Identity{
				Type: to.Ptr(armdigitaltwins.DigitalTwinsIdentityTypeNone),
			},
		},
		&armdigitaltwins.ClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPatch_WithIdentity_example.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPatch_WithIdentity_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.Description{
			Name:     to.Ptr("myDigitalTwinsService"),
			Type:     to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances"),
			ID:       to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService"),
			Location: to.Ptr("westus2"),
			SystemData: &armdigitaltwins.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:59.4037715Z"); return t }()),
				CreatedBy:          to.Ptr("user@example.com"),
				CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:15:02.5281409Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@example.com"),
				LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeUser),
			},
			Tags: map[string]*string{
				"purpose": to.Ptr("dev"),
			},
			Properties: &armdigitaltwins.Properties{
				CreatedTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T12:55:05.229Z"); return t }()),
				HostName:            to.Ptr("https://myDigitalTwinsService.api.wus2.ss.azuredigitaltwins-test.net"),
				LastUpdatedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-06T12:21:58.610Z"); return t }()),
				ProvisioningState:   to.Ptr(armdigitaltwins.ProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr(armdigitaltwins.PublicNetworkAccessEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Description) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Description)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPatch_WithIdentity_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPatch_WithPublicNetworkAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch a DigitalTwinsInstance resource with publicNetworkAccess property"},
	})
	client = armdigitaltwins.NewClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"resRg",
		"myDigitalTwinsService",
		armdigitaltwins.PatchDescription{
			Properties: &armdigitaltwins.PatchProperties{
				PublicNetworkAccess: to.Ptr(armdigitaltwins.PublicNetworkAccessDisabled),
			},
		},
		&armdigitaltwins.ClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPatch_WithPublicNetworkAccess.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPatch_WithPublicNetworkAccess.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.Description{
			Name:     to.Ptr("myDigitalTwinsService"),
			Type:     to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances"),
			ID:       to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService"),
			Location: to.Ptr("westus2"),
			SystemData: &armdigitaltwins.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:59.4037715Z"); return t }()),
				CreatedBy:          to.Ptr("user@example.com"),
				CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:15:02.5281409Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@example.com"),
				LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeUser),
			},
			Tags: map[string]*string{
				"purpose": to.Ptr("dev"),
			},
			Properties: &armdigitaltwins.Properties{
				CreatedTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T12:55:05.229Z"); return t }()),
				HostName:            to.Ptr("https://myDigitalTwinsService.api.wus2.ss.azuredigitaltwins-test.net"),
				LastUpdatedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-06T12:21:58.610Z"); return t }()),
				ProvisioningState:   to.Ptr(armdigitaltwins.ProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr(armdigitaltwins.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Description) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Description)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsPatch_WithPublicNetworkAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDigitalTwins_Delete(t *testing.T) {
	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsDelete_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a DigitalTwinsInstance resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdigitaltwins.NewClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resRg",
		"myDigitalTwinsService",
		&armdigitaltwins.ClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsDelete_example.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsDelete_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.Description{
			Name:     to.Ptr("myDigitalTwinsService"),
			Type:     to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances"),
			ID:       to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService"),
			Location: to.Ptr("westus2"),
			SystemData: &armdigitaltwins.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:13:59.4037715Z"); return t }()),
				CreatedBy:          to.Ptr("user@example.com"),
				CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:02.5281409Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@example.com"),
				LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeUser),
			},
			Properties: &armdigitaltwins.Properties{
				CreatedTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T12:55:05.229Z"); return t }()),
				HostName:          to.Ptr("https://myDigitalTwinsService.api.wus2.ss.azuredigitaltwins-test.net"),
				LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-06T12:21:58.610Z"); return t }()),
				ProvisioningState: to.Ptr(armdigitaltwins.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Description) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Description)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsDelete_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsDelete_WithIdentity_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a DigitalTwinsInstance resource with identity"},
	})
	client = armdigitaltwins.NewClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	poller, err = client.BeginDelete(ctx,
		"resRg",
		"myDigitalTwinsService",
		&armdigitaltwins.ClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsDelete_WithIdentity_example.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsDelete_WithIdentity_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.Description{
			Name: to.Ptr("myDigitalTwinsService"),
			Type: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances"),
			ID:   to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService"),
			Identity: &armdigitaltwins.Identity{
				Type:        to.Ptr(armdigitaltwins.DigitalTwinsIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("544215a9-21d8-4fb5-8094-8efbcc311dd0"),
				TenantID:    to.Ptr("544215a9-21d8-4fb5-8094-8efbcc311dd0"),
			},
			Location: to.Ptr("westus2"),
			SystemData: &armdigitaltwins.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:13:59.4037715Z"); return t }()),
				CreatedBy:          to.Ptr("user@example.com"),
				CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:02.5281409Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@example.com"),
				LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeUser),
			},
			Properties: &armdigitaltwins.Properties{
				CreatedTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T12:55:05.229Z"); return t }()),
				HostName:          to.Ptr("https://myDigitalTwinsService.api.wus2.ss.azuredigitaltwins-test.net"),
				LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-06T12:21:58.610Z"); return t }()),
				ProvisioningState: to.Ptr(armdigitaltwins.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Description) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Description)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsDelete_WithIdentity_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDigitalTwins_List(t *testing.T) {
	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsList_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get DigitalTwinsInstance resources by subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdigitaltwins.NewClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsList_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdigitaltwins.DescriptionListResult{
			Value: []*armdigitaltwins.Description{
				{
					Name:     to.Ptr("myDigitalTwinsService"),
					Type:     to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances"),
					ID:       to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService"),
					Location: to.Ptr("westus2"),
					SystemData: &armdigitaltwins.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:13:59.4037715Z"); return t }()),
						CreatedBy:          to.Ptr("user@example.com"),
						CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:02.5281409Z"); return t }()),
						LastModifiedBy:     to.Ptr("d2baee3d-44c0-41b6-9961-92563de66a97"),
						LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeApplication),
					},
					Properties: &armdigitaltwins.Properties{
						CreatedTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T12:55:05.229Z"); return t }()),
						HostName:            to.Ptr("https://myDigitalTwinsService.api.wus2.ss.azuredigitaltwins-test.net"),
						LastUpdatedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T12:55:07.229Z"); return t }()),
						ProvisioningState:   to.Ptr(armdigitaltwins.ProvisioningStateSucceeded),
						PublicNetworkAccess: to.Ptr(armdigitaltwins.PublicNetworkAccessEnabled),
					},
				},
				{
					Name:     to.Ptr("myDigitalTwinsService2"),
					Type:     to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances"),
					ID:       to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg2/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService2"),
					Location: to.Ptr("westus2"),
					SystemData: &armdigitaltwins.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:59.4037715Z"); return t }()),
						CreatedBy:          to.Ptr("user@example.com"),
						CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:15:02.5281409Z"); return t }()),
						LastModifiedBy:     to.Ptr("429f7e65-6d99-455e-a469-7a885be68642"),
						LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeApplication),
					},
					Properties: &armdigitaltwins.Properties{
						CreatedTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T12:55:05.229Z"); return t }()),
						LastUpdatedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T12:55:07.229Z"); return t }()),
						ProvisioningState:   to.Ptr(armdigitaltwins.ProvisioningStateSucceeded),
						PublicNetworkAccess: to.Ptr(armdigitaltwins.PublicNetworkAccessEnabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DescriptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DescriptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsList_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDigitalTwins_ListByResourceGroup(t *testing.T) {
	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsListByResourceGroup_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get DigitalTwinsInstance resources by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdigitaltwins.NewClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	pager := client.ListByResourceGroup("resRg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsListByResourceGroup_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdigitaltwins.DescriptionListResult{
			Value: []*armdigitaltwins.Description{
				{
					Name:     to.Ptr("myDigitalTwinsService"),
					Type:     to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances"),
					ID:       to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService"),
					Location: to.Ptr("westus2"),
					SystemData: &armdigitaltwins.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:13:59.4037715Z"); return t }()),
						CreatedBy:          to.Ptr("user@example.com"),
						CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:02.5281409Z"); return t }()),
						LastModifiedBy:     to.Ptr("d2baee3d-44c0-41b6-9961-92563de66a97"),
						LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeApplication),
					},
					Properties: &armdigitaltwins.Properties{
						CreatedTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T12:55:05.229Z"); return t }()),
						HostName:            to.Ptr("https://myDigitalTwinsService.api.wus2.ss.azuredigitaltwins-test.net"),
						LastUpdatedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T12:51:05.229Z"); return t }()),
						ProvisioningState:   to.Ptr(armdigitaltwins.ProvisioningStateSucceeded),
						PublicNetworkAccess: to.Ptr(armdigitaltwins.PublicNetworkAccessEnabled),
					},
				},
				{
					Name:     to.Ptr("myDigitalTwinsService2"),
					Type:     to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances"),
					ID:       to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService2"),
					Location: to.Ptr("westus2"),
					SystemData: &armdigitaltwins.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:59.4037715Z"); return t }()),
						CreatedBy:          to.Ptr("user@example.com"),
						CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:15:02.5281409Z"); return t }()),
						LastModifiedBy:     to.Ptr("429f7e65-6d99-455e-a469-7a885be68642"),
						LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeApplication),
					},
					Properties: &armdigitaltwins.Properties{
						CreatedTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T12:55:07.229Z"); return t }()),
						LastUpdatedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T12:55:07.229Z"); return t }()),
						ProvisioningState:   to.Ptr(armdigitaltwins.ProvisioningStateSucceeded),
						PublicNetworkAccess: to.Ptr(armdigitaltwins.PublicNetworkAccessEnabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DescriptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DescriptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsListByResourceGroup_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDigitalTwins_CheckNameAvailability(t *testing.T) {
	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsCheckNameAvailability_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check name Availability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdigitaltwins.NewClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"WestUS2",
		armdigitaltwins.CheckNameRequest{
			Name: to.Ptr("myadtinstance"),
			Type: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsCheckNameAvailability_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.CheckNameResult{
			Message:       to.Ptr("Name 'myadtinstance' is already taken. Please specify a different name"),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr(armdigitaltwins.ReasonAlreadyExists),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameResult)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsCheckNameAvailability_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDigitalTwinsEndpoint_List(t *testing.T) {
	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointsGet_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a DigitalTwinsInstance endpoints"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdigitaltwins.NewEndpointClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	pager := client.List("resRg",
		"myDigitalTwinsService",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointsGet_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdigitaltwins.EndpointResourceListResult{
			Value: []*armdigitaltwins.EndpointResource{
				{
					Name: to.Ptr("myendpoint1"),
					Type: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances/endpoints"),
					ID:   to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService/endpoints/myServiceBus"),
					SystemData: &armdigitaltwins.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:13:59.4037715Z"); return t }()),
						CreatedBy:          to.Ptr("user@example.com"),
						CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:02.5281409Z"); return t }()),
						LastModifiedBy:     to.Ptr("user@example.com"),
						LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeUser),
					},
					Properties: &armdigitaltwins.ServiceBus{
						AuthenticationType:        to.Ptr(armdigitaltwins.AuthenticationTypeKeyBased),
						CreatedTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T01:10:34.350Z"); return t }()),
						EndpointType:              to.Ptr(armdigitaltwins.EndpointTypeServiceBus),
						ProvisioningState:         to.Ptr(armdigitaltwins.EndpointProvisioningStateSucceeded),
						PrimaryConnectionString:   to.Ptr("Endpoint=sb://***/;SharedAccessKeyName=***;SharedAccessKey=***;EntityPath=***"),
						SecondaryConnectionString: to.Ptr("Endpoint=sb://***/;SharedAccessKeyName=***;SharedAccessKey=***;EntityPath=***"),
					},
				},
				{
					Name: to.Ptr("myendpoint2"),
					Type: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances/endpoints"),
					ID:   to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService/endpoints/myServiceBus"),
					SystemData: &armdigitaltwins.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:13:59.4037715Z"); return t }()),
						CreatedBy:          to.Ptr("user@example.com"),
						CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:02.5281409Z"); return t }()),
						LastModifiedBy:     to.Ptr("user@example.com"),
						LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeUser),
					},
					Properties: &armdigitaltwins.EventHub{
						AuthenticationType:           to.Ptr(armdigitaltwins.AuthenticationTypeKeyBased),
						CreatedTime:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T01:10:34.350Z"); return t }()),
						EndpointType:                 to.Ptr(armdigitaltwins.EndpointTypeEventHub),
						ProvisioningState:            to.Ptr(armdigitaltwins.EndpointProvisioningStateSucceeded),
						ConnectionStringPrimaryKey:   to.Ptr("************"),
						ConnectionStringSecondaryKey: to.Ptr("************"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EndpointResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EndpointResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointsGet_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointsGet_WithIdentity_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a DigitalTwinsInstance endpoints with identity"},
	})
	client = armdigitaltwins.NewEndpointClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	pager = client.List("resRg",
		"myDigitalTwinsService",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointsGet_WithIdentity_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdigitaltwins.EndpointResourceListResult{
			Value: []*armdigitaltwins.EndpointResource{
				{
					Name: to.Ptr("myServiceBus"),
					Type: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances/endpoints"),
					ID:   to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService/endpoints/myServiceBus"),
					SystemData: &armdigitaltwins.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:13:59.4037715Z"); return t }()),
						CreatedBy:          to.Ptr("user@example.com"),
						CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:02.5281409Z"); return t }()),
						LastModifiedBy:     to.Ptr("user@example.com"),
						LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeUser),
					},
					Properties: &armdigitaltwins.ServiceBus{
						AuthenticationType: to.Ptr(armdigitaltwins.AuthenticationTypeIdentityBased),
						CreatedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T01:10:34.350Z"); return t }()),
						EndpointType:       to.Ptr(armdigitaltwins.EndpointTypeServiceBus),
						ProvisioningState:  to.Ptr(armdigitaltwins.EndpointProvisioningStateSucceeded),
						EndpointURI:        to.Ptr("sb://mysb.servicebus.windows.net/"),
						EntityPath:         to.Ptr("mysbtopic"),
					},
				},
				{
					Name: to.Ptr("myServiceBus"),
					Type: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances/endpoints"),
					ID:   to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService/endpoints/myServiceBus"),
					SystemData: &armdigitaltwins.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:13:59.4037715Z"); return t }()),
						CreatedBy:          to.Ptr("user@example.com"),
						CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:02.5281409Z"); return t }()),
						LastModifiedBy:     to.Ptr("user@example.com"),
						LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeUser),
					},
					Properties: &armdigitaltwins.EventHub{
						AuthenticationType:           to.Ptr(armdigitaltwins.AuthenticationTypeKeyBased),
						CreatedTime:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T01:10:34.350Z"); return t }()),
						EndpointType:                 to.Ptr(armdigitaltwins.EndpointTypeEventHub),
						ProvisioningState:            to.Ptr(armdigitaltwins.EndpointProvisioningStateSucceeded),
						ConnectionStringPrimaryKey:   to.Ptr("************"),
						ConnectionStringSecondaryKey: to.Ptr("************"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EndpointResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EndpointResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointsGet_WithIdentity_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDigitalTwinsEndpoint_Get(t *testing.T) {
	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointGet_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a DigitalTwinsInstance endpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdigitaltwins.NewEndpointClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	res, err := client.Get(ctx,
		"resRg",
		"myDigitalTwinsService",
		"myServiceBus",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointGet_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.EndpointResource{
			Name: to.Ptr("myServiceBus"),
			Type: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances/endpoints"),
			ID:   to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService/endpoints/myServiceBus"),
			SystemData: &armdigitaltwins.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:13:59.4037715Z"); return t }()),
				CreatedBy:          to.Ptr("user@example.com"),
				CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:02.5281409Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@example.com"),
				LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeUser),
			},
			Properties: &armdigitaltwins.ServiceBus{
				AuthenticationType:        to.Ptr(armdigitaltwins.AuthenticationTypeKeyBased),
				CreatedTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T01:10:34.350Z"); return t }()),
				EndpointType:              to.Ptr(armdigitaltwins.EndpointTypeServiceBus),
				ProvisioningState:         to.Ptr(armdigitaltwins.EndpointProvisioningStateSucceeded),
				PrimaryConnectionString:   to.Ptr("Endpoint=sb://***/;SharedAccessKeyName=***;SharedAccessKey=***;EntityPath=***"),
				SecondaryConnectionString: to.Ptr("Endpoint=sb://***/;SharedAccessKeyName=***;SharedAccessKey=***;EntityPath=***"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EndpointResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EndpointResource)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointGet_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointGet_WithIdentity_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a DigitalTwinsInstance endpoint with identity"},
	})
	client = armdigitaltwins.NewEndpointClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	res, err = client.Get(ctx,
		"resRg",
		"myDigitalTwinsService",
		"myServiceBus",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointGet_WithIdentity_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.EndpointResource{
			Name: to.Ptr("myServiceBus"),
			Type: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances/endpoints"),
			ID:   to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService/endpoints/myServiceBus"),
			SystemData: &armdigitaltwins.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:13:59.4037715Z"); return t }()),
				CreatedBy:          to.Ptr("user@example.com"),
				CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:02.5281409Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@example.com"),
				LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeUser),
			},
			Properties: &armdigitaltwins.ServiceBus{
				AuthenticationType: to.Ptr(armdigitaltwins.AuthenticationTypeIdentityBased),
				CreatedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T01:10:34.350Z"); return t }()),
				EndpointType:       to.Ptr(armdigitaltwins.EndpointTypeServiceBus),
				ProvisioningState:  to.Ptr(armdigitaltwins.EndpointProvisioningStateSucceeded),
				EndpointURI:        to.Ptr("sb://mysb.servicebus.windows.net/"),
				EntityPath:         to.Ptr("mysbtopic"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EndpointResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EndpointResource)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointGet_WithIdentity_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDigitalTwinsEndpoint_CreateOrUpdate(t *testing.T) {
	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointPut_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put a DigitalTwinsEndpoint resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdigitaltwins.NewEndpointClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resRg",
		"myDigitalTwinsService",
		"myServiceBus",
		armdigitaltwins.EndpointResource{
			Properties: &armdigitaltwins.ServiceBus{
				AuthenticationType:        to.Ptr(armdigitaltwins.AuthenticationTypeKeyBased),
				EndpointType:              to.Ptr(armdigitaltwins.EndpointTypeServiceBus),
				PrimaryConnectionString:   to.Ptr("Endpoint=sb://mysb.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=xyzxyzoX4=;EntityPath=abcabc"),
				SecondaryConnectionString: to.Ptr("Endpoint=sb://mysb.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=xyzxyzoX4=;EntityPath=abcabc"),
			},
		},
		&armdigitaltwins.EndpointClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointPut_example.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointPut_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.EndpointResource{
			Name: to.Ptr("myServiceBus"),
			Type: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances/endpoints"),
			ID:   to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService/endpoints/myServiceBus"),
			SystemData: &armdigitaltwins.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:13:59.4037715Z"); return t }()),
				CreatedBy:          to.Ptr("user@example.com"),
				CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:02.5281409Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@example.com"),
				LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeUser),
			},
			Properties: &armdigitaltwins.ServiceBus{
				AuthenticationType:        to.Ptr(armdigitaltwins.AuthenticationTypeKeyBased),
				CreatedTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T01:10:34.350Z"); return t }()),
				EndpointType:              to.Ptr(armdigitaltwins.EndpointTypeServiceBus),
				ProvisioningState:         to.Ptr(armdigitaltwins.EndpointProvisioningStateSucceeded),
				PrimaryConnectionString:   to.Ptr("Endpoint=sb://***/;SharedAccessKeyName=***;SharedAccessKey=***;EntityPath=***"),
				SecondaryConnectionString: to.Ptr("Endpoint=sb://***/;SharedAccessKeyName=***;SharedAccessKey=***;EntityPath=***"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EndpointResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EndpointResource)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointPut_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointPut_WithIdentity_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put a DigitalTwinsEndpoint resource with identity"},
	})
	client = armdigitaltwins.NewEndpointClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"resRg",
		"myDigitalTwinsService",
		"myServiceBus",
		armdigitaltwins.EndpointResource{
			Properties: &armdigitaltwins.ServiceBus{
				AuthenticationType: to.Ptr(armdigitaltwins.AuthenticationTypeIdentityBased),
				EndpointType:       to.Ptr(armdigitaltwins.EndpointTypeServiceBus),
				EndpointURI:        to.Ptr("sb://mysb.servicebus.windows.net/"),
				EntityPath:         to.Ptr("mysbtopic"),
			},
		},
		&armdigitaltwins.EndpointClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointPut_WithIdentity_example.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointPut_WithIdentity_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.EndpointResource{
			Name: to.Ptr("myServiceBus"),
			Type: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances/endpoints"),
			ID:   to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService/endpoints/myServiceBus"),
			SystemData: &armdigitaltwins.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:13:59.4037715Z"); return t }()),
				CreatedBy:          to.Ptr("user@example.com"),
				CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:02.5281409Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@example.com"),
				LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeUser),
			},
			Properties: &armdigitaltwins.ServiceBus{
				AuthenticationType: to.Ptr(armdigitaltwins.AuthenticationTypeIdentityBased),
				CreatedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T01:10:34.350Z"); return t }()),
				EndpointType:       to.Ptr(armdigitaltwins.EndpointTypeServiceBus),
				ProvisioningState:  to.Ptr(armdigitaltwins.EndpointProvisioningStateSucceeded),
				EndpointURI:        to.Ptr("sb://mysb.servicebus.windows.net/"),
				EntityPath:         to.Ptr("mysbtopic"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EndpointResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EndpointResource)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointPut_WithIdentity_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDigitalTwinsEndpoint_Delete(t *testing.T) {
	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointDelete_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a DigitalTwinsInstance endpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdigitaltwins.NewEndpointClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resRg",
		"myDigitalTwinsService",
		"myendpoint",
		&armdigitaltwins.EndpointClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointDelete_example.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointDelete_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.EndpointResource{
			Name: to.Ptr("myendpoint"),
			Type: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances/endpoints"),
			ID:   to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService/endpoints/myServiceBus"),
			SystemData: &armdigitaltwins.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:13:59.4037715Z"); return t }()),
				CreatedBy:          to.Ptr("user@example.com"),
				CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:02.5281409Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@example.com"),
				LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeUser),
			},
			Properties: &armdigitaltwins.ServiceBus{
				AuthenticationType:        to.Ptr(armdigitaltwins.AuthenticationTypeKeyBased),
				CreatedTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T01:10:34.350Z"); return t }()),
				EndpointType:              to.Ptr(armdigitaltwins.EndpointTypeServiceBus),
				ProvisioningState:         to.Ptr(armdigitaltwins.EndpointProvisioningStateSucceeded),
				PrimaryConnectionString:   to.Ptr("Endpoint=sb://***/;SharedAccessKeyName=***;SharedAccessKey=***;EntityPath=***"),
				SecondaryConnectionString: to.Ptr("Endpoint=sb://***/;SharedAccessKeyName=***;SharedAccessKey=***;EntityPath=***"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EndpointResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EndpointResource)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointDelete_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointDelete_WithIdentity_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a DigitalTwinsInstance endpoint with identity"},
	})
	client = armdigitaltwins.NewEndpointClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	poller, err = client.BeginDelete(ctx,
		"resRg",
		"myDigitalTwinsService",
		"myendpoint",
		&armdigitaltwins.EndpointClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointDelete_WithIdentity_example.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointDelete_WithIdentity_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.EndpointResource{
			Name: to.Ptr("myendpoint"),
			Type: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances/endpoints"),
			ID:   to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService/endpoints/myServiceBus"),
			SystemData: &armdigitaltwins.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:13:59.4037715Z"); return t }()),
				CreatedBy:          to.Ptr("user@example.com"),
				CreatedByType:      to.Ptr(armdigitaltwins.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T17:14:02.5281409Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@example.com"),
				LastModifiedByType: to.Ptr(armdigitaltwins.CreatedByTypeUser),
			},
			Properties: &armdigitaltwins.ServiceBus{
				AuthenticationType: to.Ptr(armdigitaltwins.AuthenticationTypeKeyBased),
				CreatedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-19T01:10:34.350Z"); return t }()),
				EndpointType:       to.Ptr(armdigitaltwins.EndpointTypeServiceBus),
				ProvisioningState:  to.Ptr(armdigitaltwins.EndpointProvisioningStateSucceeded),
				EndpointURI:        to.Ptr("sb://mysb.servicebus.windows.net/"),
				EntityPath:         to.Ptr("mysbtopic"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EndpointResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EndpointResource)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsEndpointDelete_WithIdentity_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsOperationsList_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get available operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdigitaltwins.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsOperationsList_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdigitaltwins.OperationListResult{
			Value: []*armdigitaltwins.Operation{
				{
					Name: to.Ptr("Microsoft.DigitalTwins/models/read"),
					Display: &armdigitaltwins.OperationDisplay{
						Description: to.Ptr("Read any Model"),
						Operation:   to.Ptr("Read Model"),
						Provider:    to.Ptr("Azure Digital Twins"),
						Resource:    to.Ptr("Model"),
					},
					IsDataAction: to.Ptr(true),
				},
				{
					Name: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances/write"),
					Display: &armdigitaltwins.OperationDisplay{
						Description: to.Ptr("Create or update a Digital Twins Service instance."),
						Operation:   to.Ptr("Create or update a Digital Twins Service instance."),
						Provider:    to.Ptr("Microsoft.DigitalTwins"),
						Resource:    to.Ptr("digitalTwinsInstances"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances/read"),
					Display: &armdigitaltwins.OperationDisplay{
						Description: to.Ptr("Get a Digital Twins Service instance."),
						Operation:   to.Ptr("Get a Digital Twins Service instance."),
						Provider:    to.Ptr("Microsoft.DigitalTwins"),
						Resource:    to.Ptr("digitalTwinsInstances"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances/delete"),
					Display: &armdigitaltwins.OperationDisplay{
						Description: to.Ptr("Delete a Digital Twins Service instance."),
						Operation:   to.Ptr("Delete a Digital Twins Service instance."),
						Provider:    to.Ptr("Microsoft.DigitalTwins"),
						Resource:    to.Ptr("digitalTwinsInstances"),
					},
					IsDataAction: to.Ptr(false),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/DigitalTwinsOperationsList_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_List(t *testing.T) {
	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/PrivateLinkResourcesList_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List private link resources for given Digital Twin"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdigitaltwins.NewPrivateLinkResourcesClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	res, err := client.List(ctx,
		"resRg",
		"myDigitalTwinsService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/PrivateLinkResourcesList_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.GroupIDInformationResponse{
			Value: []*armdigitaltwins.GroupIDInformation{
				{
					Name: to.Ptr("myDigitalTwinsService"),
					Type: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService/privateLinkResources/myDigitalTwinsService"),
					Properties: &armdigitaltwins.GroupIDInformationProperties{
						GroupID: to.Ptr("digitalTwinsInstance"),
						RequiredMembers: []*string{
							to.Ptr("myDigitalTwinsService")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.api.wus2.digitaltwins.azure.net")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.GroupIDInformationResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GroupIDInformationResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/PrivateLinkResourcesList_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/PrivateLinkResourcesByGroupId_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the specified private link resource for the given Digital Twin"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdigitaltwins.NewPrivateLinkResourcesClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	res, err := client.Get(ctx,
		"resRg",
		"myDigitalTwinsService",
		"subResource",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/PrivateLinkResourcesByGroupId_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.GroupIDInformation{
			Name: to.Ptr("myDigitalTwinsService"),
			Type: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances/privateLinkResources"),
			ID:   to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService/privateLinkResources/myDigitalTwinsService"),
			Properties: &armdigitaltwins.GroupIDInformationProperties{
				GroupID: to.Ptr("digitalTwinsInstance"),
				RequiredMembers: []*string{
					to.Ptr("myDigitalTwinsService")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.api.wus2.digitaltwins.azure.net")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GroupIDInformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GroupIDInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/PrivateLinkResourcesByGroupId_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/PrivateEndpointConnectionsList_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List private endpoint connection properties"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdigitaltwins.NewPrivateEndpointConnectionsClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	res, err := client.List(ctx,
		"resRg",
		"myDigitalTwinsService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/PrivateEndpointConnectionsList_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.PrivateEndpointConnectionsResponse{
			Value: []*armdigitaltwins.PrivateEndpointConnection{
				{
					ID: to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService/privateEndpointConnections/myPrivateConnection"),
					Properties: &armdigitaltwins.ConnectionProperties{
						GroupIDs: []*string{
							to.Ptr("digitalTwinsInstance")},
						PrivateEndpoint: &armdigitaltwins.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourceGroups/resRg/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armdigitaltwins.ConnectionPropertiesPrivateLinkServiceConnectionState{
							Description:     to.Ptr("Please approve my request, thanks."),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armdigitaltwins.PrivateLinkServiceConnectionStatusPending),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnectionsResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnectionsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/PrivateEndpointConnectionsList_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/PrivateEndpointConnectionByConnectionName_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get private endpoint connection properties for the given private endpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdigitaltwins.NewPrivateEndpointConnectionsClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	res, err := client.Get(ctx,
		"resRg",
		"myDigitalTwinsService",
		"myPrivateConnection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/PrivateEndpointConnectionByConnectionName_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.PrivateEndpointConnection{
			ID: to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService/privateEndpointConnections/myPrivateConnection"),
			Properties: &armdigitaltwins.ConnectionProperties{
				GroupIDs: []*string{
					to.Ptr("digitalTwinsInstance")},
				PrivateEndpoint: &armdigitaltwins.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourceGroups/resRg/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armdigitaltwins.ConnectionPropertiesPrivateLinkServiceConnectionState{
					Description:     to.Ptr("Please approve my request, thanks."),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armdigitaltwins.PrivateLinkServiceConnectionStatusPending),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/PrivateEndpointConnectionByConnectionName_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/PrivateEndpointConnectionDelete_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete private endpoint connection with the specified name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdigitaltwins.NewPrivateEndpointConnectionsClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resRg",
		"myDigitalTwinsService",
		"myPrivateConnection",
		&armdigitaltwins.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/PrivateEndpointConnectionDelete_example.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/PrivateEndpointConnectionDelete_example.json: %v", err)
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/PrivateEndpointConnectionPut_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update the status of a private endpoint connection with the given name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdigitaltwins.NewPrivateEndpointConnectionsClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resRg",
		"myDigitalTwinsService",
		"myPrivateConnection",
		armdigitaltwins.PrivateEndpointConnection{
			Properties: &armdigitaltwins.ConnectionProperties{
				PrivateLinkServiceConnectionState: &armdigitaltwins.ConnectionPropertiesPrivateLinkServiceConnectionState{
					Description: to.Ptr("Approved by johndoe@company.com."),
					Status:      to.Ptr(armdigitaltwins.PrivateLinkServiceConnectionStatusApproved),
				},
			},
		},
		&armdigitaltwins.PrivateEndpointConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/PrivateEndpointConnectionPut_example.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/PrivateEndpointConnectionPut_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.PrivateEndpointConnection{
			Name: to.Ptr("myPrivateConnection"),
			Type: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService/privateEndpointConnections/myPrivateConnection"),
			Properties: &armdigitaltwins.ConnectionProperties{
				GroupIDs: []*string{
					to.Ptr("digitalTwinsInstance")},
				PrivateEndpoint: &armdigitaltwins.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourceGroups/resRg/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armdigitaltwins.ConnectionPropertiesPrivateLinkServiceConnectionState{
					Description: to.Ptr("Approved by johndoe@company.com."),
					Status:      to.Ptr(armdigitaltwins.PrivateLinkServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armdigitaltwins.ConnectionPropertiesProvisioningState("Succeeded")),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/PrivateEndpointConnectionPut_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTimeSeriesDatabaseConnections_List(t *testing.T) {
	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/TimeSeriesDatabaseConnectionsList_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List time series database connections for a DigitalTwins instance."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdigitaltwins.NewTimeSeriesDatabaseConnectionsClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	pager := client.List("resRg",
		"myDigitalTwinsService",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/TimeSeriesDatabaseConnectionsList_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdigitaltwins.TimeSeriesDatabaseConnectionListResult{
			Value: []*armdigitaltwins.TimeSeriesDatabaseConnection{
				{
					Name: to.Ptr("myConnection"),
					Type: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances/timeSeriesDatabaseConnections"),
					ID:   to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService/timeSeriesDatabaseConnections/myConnection"),
					Properties: &armdigitaltwins.AzureDataExplorerConnectionProperties{
						ConnectionType:              to.Ptr(armdigitaltwins.ConnectionTypeAzureDataExplorer),
						ProvisioningState:           to.Ptr(armdigitaltwins.TimeSeriesDatabaseConnectionStateSucceeded),
						AdxDatabaseName:             to.Ptr("myDatabase"),
						AdxEndpointURI:              to.Ptr("https://mycluster.kusto.windows.net"),
						AdxResourceID:               to.Ptr("/subscriptions/c493073e-2460-45ba-a403-f3e0df1e9feg/resourceGroups/testrg/providers/Microsoft.Kusto/clusters/mycluster"),
						AdxTableName:                to.Ptr("myTable"),
						EventHubEndpointURI:         to.Ptr("sb://myeh.servicebus.windows.net/"),
						EventHubEntityPath:          to.Ptr("myeh"),
						EventHubNamespaceResourceID: to.Ptr("/subscriptions/c493073e-2460-45ba-a403-f3e0df1e9feg/resourceGroups/testrg/providers/Microsoft.EventHub/namespaces/myeh"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TimeSeriesDatabaseConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TimeSeriesDatabaseConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/TimeSeriesDatabaseConnectionsList_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTimeSeriesDatabaseConnections_Get(t *testing.T) {
	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/TimeSeriesDatabaseConnectionsGet_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get time series database connection for a DigitalTwins instance."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdigitaltwins.NewTimeSeriesDatabaseConnectionsClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	res, err := client.Get(ctx,
		"resRg",
		"myDigitalTwinsService",
		"myConnection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/TimeSeriesDatabaseConnectionsGet_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.TimeSeriesDatabaseConnection{
			Name: to.Ptr("myConnection"),
			Type: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances/timeSeriesDatabaseConnections"),
			ID:   to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService/timeSeriesDatabaseConnections/myConnection"),
			Properties: &armdigitaltwins.AzureDataExplorerConnectionProperties{
				ConnectionType:              to.Ptr(armdigitaltwins.ConnectionTypeAzureDataExplorer),
				ProvisioningState:           to.Ptr(armdigitaltwins.TimeSeriesDatabaseConnectionStateSucceeded),
				AdxDatabaseName:             to.Ptr("myDatabase"),
				AdxEndpointURI:              to.Ptr("https://mycluster.kusto.windows.net"),
				AdxResourceID:               to.Ptr("/subscriptions/c493073e-2460-45ba-a403-f3e0df1e9feg/resourceGroups/testrg/providers/Microsoft.Kusto/clusters/mycluster"),
				AdxTableName:                to.Ptr("myTable"),
				EventHubConsumerGroup:       to.Ptr("$Default"),
				EventHubEndpointURI:         to.Ptr("sb://myeh.servicebus.windows.net/"),
				EventHubEntityPath:          to.Ptr("myeh"),
				EventHubNamespaceResourceID: to.Ptr("/subscriptions/c493073e-2460-45ba-a403-f3e0df1e9feg/resourceGroups/testrg/providers/Microsoft.EventHub/namespaces/myeh"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TimeSeriesDatabaseConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TimeSeriesDatabaseConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/TimeSeriesDatabaseConnectionsGet_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTimeSeriesDatabaseConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/TimeSeriesDatabaseConnectionsPut_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or replace a time series database connection for a DigitalTwins instance."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdigitaltwins.NewTimeSeriesDatabaseConnectionsClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resRg",
		"myDigitalTwinsService",
		"myConnection",
		armdigitaltwins.TimeSeriesDatabaseConnection{
			Properties: &armdigitaltwins.AzureDataExplorerConnectionProperties{
				ConnectionType:              to.Ptr(armdigitaltwins.ConnectionTypeAzureDataExplorer),
				AdxDatabaseName:             to.Ptr("myDatabase"),
				AdxEndpointURI:              to.Ptr("https://mycluster.kusto.windows.net"),
				AdxResourceID:               to.Ptr("/subscriptions/c493073e-2460-45ba-a403-f3e0df1e9feg/resourceGroups/testrg/providers/Microsoft.Kusto/clusters/mycluster"),
				AdxTableName:                to.Ptr("myTable"),
				EventHubEndpointURI:         to.Ptr("sb://myeh.servicebus.windows.net/"),
				EventHubEntityPath:          to.Ptr("myeh"),
				EventHubNamespaceResourceID: to.Ptr("/subscriptions/c493073e-2460-45ba-a403-f3e0df1e9feg/resourceGroups/testrg/providers/Microsoft.EventHub/namespaces/myeh"),
			},
		},
		&armdigitaltwins.TimeSeriesDatabaseConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/TimeSeriesDatabaseConnectionsPut_example.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/TimeSeriesDatabaseConnectionsPut_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.TimeSeriesDatabaseConnection{
			Name: to.Ptr("myConnection"),
			Type: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances/timeSeriesDatabaseConnections"),
			ID:   to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService/timeSeriesDatabaseConnections/myConnection"),
			Properties: &armdigitaltwins.AzureDataExplorerConnectionProperties{
				ConnectionType:              to.Ptr(armdigitaltwins.ConnectionTypeAzureDataExplorer),
				ProvisioningState:           to.Ptr(armdigitaltwins.TimeSeriesDatabaseConnectionStateSucceeded),
				AdxDatabaseName:             to.Ptr("myDatabase"),
				AdxEndpointURI:              to.Ptr("https://mycluster.kusto.windows.net"),
				AdxResourceID:               to.Ptr("/subscriptions/c493073e-2460-45ba-a403-f3e0df1e9feg/resourceGroups/testrg/providers/Microsoft.Kusto/clusters/mycluster"),
				AdxTableName:                to.Ptr("myTable"),
				EventHubConsumerGroup:       to.Ptr("$Default"),
				EventHubEndpointURI:         to.Ptr("sb://myeh.servicebus.windows.net/"),
				EventHubEntityPath:          to.Ptr("myeh"),
				EventHubNamespaceResourceID: to.Ptr("/subscriptions/c493073e-2460-45ba-a403-f3e0df1e9feg/resourceGroups/testrg/providers/Microsoft.EventHub/namespaces/myeh"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TimeSeriesDatabaseConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TimeSeriesDatabaseConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/TimeSeriesDatabaseConnectionsPut_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTimeSeriesDatabaseConnections_Delete(t *testing.T) {
	// From example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/TimeSeriesDatabaseConnectionsDelete_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a time series database connection for a DigitalTwins instance."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdigitaltwins.NewTimeSeriesDatabaseConnectionsClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resRg",
		"myDigitalTwinsService",
		"myConnection",
		&armdigitaltwins.TimeSeriesDatabaseConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/TimeSeriesDatabaseConnectionsDelete_example.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/TimeSeriesDatabaseConnectionsDelete_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdigitaltwins.TimeSeriesDatabaseConnection{
			Name: to.Ptr("myConnection"),
			Type: to.Ptr("Microsoft.DigitalTwins/digitalTwinsInstances/timeSeriesDatabaseConnections"),
			ID:   to.Ptr("/subscriptions/50016170-c839-41ba-a724-51e9df440b9e/resourcegroups/resRg/providers/Microsoft.DigitalTwins/digitalTwinsInstances/myDigitalTwinsService/timeSeriesDatabaseConnections/myConnection"),
			Properties: &armdigitaltwins.AzureDataExplorerConnectionProperties{
				ConnectionType:              to.Ptr(armdigitaltwins.ConnectionTypeAzureDataExplorer),
				ProvisioningState:           to.Ptr(armdigitaltwins.TimeSeriesDatabaseConnectionStateSucceeded),
				AdxDatabaseName:             to.Ptr("myDatabase"),
				AdxEndpointURI:              to.Ptr("https://mycluster.kusto.windows.net"),
				AdxResourceID:               to.Ptr("/subscriptions/c493073e-2460-45ba-a403-f3e0df1e9feg/resourceGroups/testrg/providers/Microsoft.Kusto/clusters/mycluster"),
				EventHubConsumerGroup:       to.Ptr("$Default"),
				EventHubEndpointURI:         to.Ptr("sb://myeh.servicebus.windows.net/"),
				EventHubEntityPath:          to.Ptr("myeh"),
				EventHubNamespaceResourceID: to.Ptr("/subscriptions/c493073e-2460-45ba-a403-f3e0df1e9feg/resourceGroups/testrg/providers/Microsoft.EventHub/namespaces/myeh"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TimeSeriesDatabaseConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TimeSeriesDatabaseConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/preview/2021-06-30-preview/examples/TimeSeriesDatabaseConnectionsDelete_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
