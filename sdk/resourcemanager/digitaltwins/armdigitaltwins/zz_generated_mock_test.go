//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdigitaltwins

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestDigitalTwins_Get(t *testing.T) {
	// From example Get a DigitalTwinsInstance resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDigitalTwinsClient(con,
		"50016170-c839-41ba-a724-51e9df440b9e")
	res, err := client.Get(ctx,
		"resRg",
		"myDigitalTwinsService",
		&DigitalTwinsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DigitalTwinsDescription.ID == nil {
		t.Fatal("DigitalTwinsDescription.ID should not be nil!")
	}

	// From example Get a DigitalTwinsInstance resource with a private endpoint connection
	res, err = client.Get(ctx,
		"resRg",
		"myDigitalTwinsService",
		&DigitalTwinsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DigitalTwinsDescription.ID == nil {
		t.Fatal("DigitalTwinsDescription.ID should not be nil!")
	}

	// From example Get a DigitalTwinsInstance resource with identity
	res, err = client.Get(ctx,
		"resRg",
		"myDigitalTwinsService",
		&DigitalTwinsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DigitalTwinsDescription.ID == nil {
		t.Fatal("DigitalTwinsDescription.ID should not be nil!")
	}
}

func TestDigitalTwins_CreateOrUpdate(t *testing.T) {
	// From example Put a DigitalTwinsInstance resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDigitalTwinsClient(con,
		"50016170-c839-41ba-a724-51e9df440b9e")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resRg",
		"myDigitalTwinsService",
		DigitalTwinsDescription{
			DigitalTwinsResource: DigitalTwinsResource{
				Location: to.StringPtr("WestUS2"),
			},
		},
		&DigitalTwinsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DigitalTwinsDescription.ID == nil {
		t.Fatal("DigitalTwinsDescription.ID should not be nil!")
	}

	// From example Put a DigitalTwinsInstance resource with identity
	poller, err = client.BeginCreateOrUpdate(ctx,
		"resRg",
		"myDigitalTwinsService",
		DigitalTwinsDescription{
			DigitalTwinsResource: DigitalTwinsResource{
				Identity: &DigitalTwinsIdentity{
					Type: DigitalTwinsIdentityTypeSystemAssigned.ToPtr(),
				},
				Location: to.StringPtr("WestUS2"),
			},
		},
		&DigitalTwinsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DigitalTwinsDescription.ID == nil {
		t.Fatal("DigitalTwinsDescription.ID should not be nil!")
	}

	// From example Put a DigitalTwinsInstance resource with publicNetworkAccess property
	poller, err = client.BeginCreateOrUpdate(ctx,
		"resRg",
		"myDigitalTwinsService",
		DigitalTwinsDescription{
			DigitalTwinsResource: DigitalTwinsResource{
				Location: to.StringPtr("WestUS2"),
			},
			Properties: &DigitalTwinsProperties{
				PublicNetworkAccess: PublicNetworkAccessEnabled.ToPtr(),
			},
		},
		&DigitalTwinsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DigitalTwinsDescription.ID == nil {
		t.Fatal("DigitalTwinsDescription.ID should not be nil!")
	}
}

func TestDigitalTwins_Update(t *testing.T) {
	// From example Patch a DigitalTwinsInstance resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDigitalTwinsClient(con,
		"50016170-c839-41ba-a724-51e9df440b9e")
	poller, err := client.BeginUpdate(ctx,
		"resRg",
		"myDigitalTwinsService",
		DigitalTwinsPatchDescription{
			Tags: map[string]*string{
				"purpose": to.StringPtr("dev"),
			},
		},
		&DigitalTwinsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DigitalTwinsDescription.ID == nil {
		t.Fatal("DigitalTwinsDescription.ID should not be nil!")
	}

	// From example Patch a DigitalTwinsInstance resource with identity
	poller, err = client.BeginUpdate(ctx,
		"resRg",
		"myDigitalTwinsService",
		DigitalTwinsPatchDescription{
			Identity: &DigitalTwinsIdentity{
				Type: DigitalTwinsIdentityTypeNone.ToPtr(),
			},
		},
		&DigitalTwinsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DigitalTwinsDescription.ID == nil {
		t.Fatal("DigitalTwinsDescription.ID should not be nil!")
	}

	// From example Patch a DigitalTwinsInstance resource with publicNetworkAccess property
	poller, err = client.BeginUpdate(ctx,
		"resRg",
		"myDigitalTwinsService",
		DigitalTwinsPatchDescription{
			Properties: &DigitalTwinsPatchProperties{
				PublicNetworkAccess: PublicNetworkAccessDisabled.ToPtr(),
			},
		},
		&DigitalTwinsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DigitalTwinsDescription.ID == nil {
		t.Fatal("DigitalTwinsDescription.ID should not be nil!")
	}
}

func TestDigitalTwins_Delete(t *testing.T) {
	// From example Delete a DigitalTwinsInstance resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDigitalTwinsClient(con,
		"50016170-c839-41ba-a724-51e9df440b9e")
	poller, err := client.BeginDelete(ctx,
		"resRg",
		"myDigitalTwinsService",
		&DigitalTwinsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DigitalTwinsDescription.ID == nil {
		t.Fatal("DigitalTwinsDescription.ID should not be nil!")
	}

	// From example Delete a DigitalTwinsInstance resource with identity
	poller, err = client.BeginDelete(ctx,
		"resRg",
		"myDigitalTwinsService",
		&DigitalTwinsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DigitalTwinsDescription.ID == nil {
		t.Fatal("DigitalTwinsDescription.ID should not be nil!")
	}
}

func TestDigitalTwins_List(t *testing.T) {
	// From example Get DigitalTwinsInstance resources by subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDigitalTwinsClient(con,
		"50016170-c839-41ba-a724-51e9df440b9e")
	pager := client.List(&DigitalTwinsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DigitalTwinsDescription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DigitalTwinsDescription.ID should not be nil!")
			}
		}
	}
}

func TestDigitalTwins_ListByResourceGroup(t *testing.T) {
	// From example Get DigitalTwinsInstance resources by resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDigitalTwinsClient(con,
		"50016170-c839-41ba-a724-51e9df440b9e")
	pager := client.ListByResourceGroup("resRg",
		&DigitalTwinsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DigitalTwinsDescription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DigitalTwinsDescription.ID should not be nil!")
			}
		}
	}
}

func TestDigitalTwins_CheckNameAvailability(t *testing.T) {
	// From example Check name Availability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDigitalTwinsClient(con,
		"50016170-c839-41ba-a724-51e9df440b9e")
	_, err := client.CheckNameAvailability(ctx,
		"WestUS2",
		CheckNameRequest{
			Name: to.StringPtr("myadtinstance"),
			Type: to.StringPtr("Microsoft.DigitalTwins/digitalTwinsInstances"),
		},
		&DigitalTwinsCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDigitalTwinsEndpoint_List(t *testing.T) {
	// From example Get a DigitalTwinsInstance endpoints
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDigitalTwinsEndpointClient(con,
		"50016170-c839-41ba-a724-51e9df440b9e")
	pager := client.List("resRg",
		"myDigitalTwinsService",
		&DigitalTwinsEndpointListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DigitalTwinsEndpointResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DigitalTwinsEndpointResource.ID should not be nil!")
			}
		}
	}

	// From example Get a DigitalTwinsInstance endpoints with identity
	pager = client.List("resRg",
		"myDigitalTwinsService",
		&DigitalTwinsEndpointListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DigitalTwinsEndpointResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DigitalTwinsEndpointResource.ID should not be nil!")
			}
		}
	}
}

func TestDigitalTwinsEndpoint_Get(t *testing.T) {
	// From example Get a DigitalTwinsInstance endpoint
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDigitalTwinsEndpointClient(con,
		"50016170-c839-41ba-a724-51e9df440b9e")
	res, err := client.Get(ctx,
		"resRg",
		"myDigitalTwinsService",
		"myServiceBus",
		&DigitalTwinsEndpointGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DigitalTwinsEndpointResource.ID == nil {
		t.Fatal("DigitalTwinsEndpointResource.ID should not be nil!")
	}

	// From example Get a DigitalTwinsInstance endpoint with identity
	res, err = client.Get(ctx,
		"resRg",
		"myDigitalTwinsService",
		"myServiceBus",
		&DigitalTwinsEndpointGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DigitalTwinsEndpointResource.ID == nil {
		t.Fatal("DigitalTwinsEndpointResource.ID should not be nil!")
	}
}

func TestDigitalTwinsEndpoint_CreateOrUpdate(t *testing.T) {
	// From example Put a DigitalTwinsInstance resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDigitalTwinsEndpointClient(con,
		"50016170-c839-41ba-a724-51e9df440b9e")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resRg",
		"myDigitalTwinsService",
		"myServiceBus",
		DigitalTwinsEndpointResource{
			Properties: &ServiceBus{
				DigitalTwinsEndpointResourceProperties: DigitalTwinsEndpointResourceProperties{
					AuthenticationType: AuthenticationTypeKeyBased.ToPtr(),
					EndpointType:       EndpointTypeServiceBus.ToPtr(),
				},
				PrimaryConnectionString:   to.StringPtr("Endpoint=sb://mysb.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=xyzxyzoX4=;EntityPath=abcabc"),
				SecondaryConnectionString: to.StringPtr("Endpoint=sb://mysb.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=xyzxyzoX4=;EntityPath=abcabc"),
			},
		},
		&DigitalTwinsEndpointBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DigitalTwinsEndpointResource.ID == nil {
		t.Fatal("DigitalTwinsEndpointResource.ID should not be nil!")
	}

	// From example Put a DigitalTwinsInstance resource with identity
	poller, err = client.BeginCreateOrUpdate(ctx,
		"resRg",
		"myDigitalTwinsService",
		"myServiceBus",
		DigitalTwinsEndpointResource{
			Properties: &ServiceBus{
				DigitalTwinsEndpointResourceProperties: DigitalTwinsEndpointResourceProperties{
					AuthenticationType: AuthenticationTypeIdentityBased.ToPtr(),
					EndpointType:       EndpointTypeServiceBus.ToPtr(),
				},
				EndpointURI: to.StringPtr("sb://mysb.servicebus.windows.net/"),
				EntityPath:  to.StringPtr("mysbtopic"),
			},
		},
		&DigitalTwinsEndpointBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DigitalTwinsEndpointResource.ID == nil {
		t.Fatal("DigitalTwinsEndpointResource.ID should not be nil!")
	}
}

func TestDigitalTwinsEndpoint_Delete(t *testing.T) {
	// From example Delete a DigitalTwinsInstance endpoint
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDigitalTwinsEndpointClient(con,
		"50016170-c839-41ba-a724-51e9df440b9e")
	poller, err := client.BeginDelete(ctx,
		"resRg",
		"myDigitalTwinsService",
		"myendpoint",
		&DigitalTwinsEndpointBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DigitalTwinsEndpointResource.ID == nil {
		t.Fatal("DigitalTwinsEndpointResource.ID should not be nil!")
	}

	// From example Delete a DigitalTwinsInstance endpoint with identity
	poller, err = client.BeginDelete(ctx,
		"resRg",
		"myDigitalTwinsService",
		"myendpoint",
		&DigitalTwinsEndpointBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DigitalTwinsEndpointResource.ID == nil {
		t.Fatal("DigitalTwinsEndpointResource.ID should not be nil!")
	}
}

func TestOperations_List(t *testing.T) {
	// From example Get available operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestPrivateLinkResources_List(t *testing.T) {
	// From example List private link resources for given Digital Twin
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"50016170-c839-41ba-a724-51e9df440b9e")
	_, err := client.List(ctx,
		"resRg",
		"myDigitalTwinsService",
		&PrivateLinkResourcesListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example Get the specified private link resource for the given Digital Twin
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"50016170-c839-41ba-a724-51e9df440b9e")
	res, err := client.Get(ctx,
		"resRg",
		"myDigitalTwinsService",
		"subResource",
		&PrivateLinkResourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GroupIDInformation.ID == nil {
		t.Fatal("GroupIDInformation.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example List private endpoint connection properties
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"50016170-c839-41ba-a724-51e9df440b9e")
	_, err := client.List(ctx,
		"resRg",
		"myDigitalTwinsService",
		&PrivateEndpointConnectionsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example Get private endpoint connection properties for the given private endpoint
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"50016170-c839-41ba-a724-51e9df440b9e")
	res, err := client.Get(ctx,
		"resRg",
		"myDigitalTwinsService",
		"myPrivateConnection",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example Delete private endpoint connection with the specified name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"50016170-c839-41ba-a724-51e9df440b9e")
	poller, err := client.BeginDelete(ctx,
		"resRg",
		"myDigitalTwinsService",
		"myPrivateConnection",
		&PrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example Update the status of a private endpoint connection with the given name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"50016170-c839-41ba-a724-51e9df440b9e")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resRg",
		"myDigitalTwinsService",
		"myPrivateConnection",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				ConnectionProperties: ConnectionProperties{
					PrivateLinkServiceConnectionState: &ConnectionPropertiesPrivateLinkServiceConnectionState{
						ConnectionState: ConnectionState{
							Description: to.StringPtr("Approved by johndoe@company.com."),
							Status:      PrivateLinkServiceConnectionStatusApproved.ToPtr(),
						},
					},
				},
			},
		},
		&PrivateEndpointConnectionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
