//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpowerbidedicated_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/powerbidedicated/armpowerbidedicated"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestCapacities_GetDetails(t *testing.T) {
	// From example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/getCapacity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details of a capacity"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbidedicated.NewCapacitiesClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	res, err := client.GetDetails(ctx,
		"TestRG",
		"azsdktest",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/getCapacity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpowerbidedicated.DedicatedCapacity{
			Name:     to.Ptr("azsdktest"),
			ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.PowerBIDedicated/capacities/azsdktest"),
			Location: to.Ptr("West US"),
			SystemData: &armpowerbidedicated.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T00:00:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armpowerbidedicated.IdentityTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T00:00:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armpowerbidedicated.IdentityTypeUser),
			},
			Tags: map[string]*string{},
			Properties: &armpowerbidedicated.DedicatedCapacityProperties{
				Administration: &armpowerbidedicated.DedicatedCapacityAdministrators{
					Members: []*string{
						to.Ptr("azsdktest@microsoft.com")},
				},
				ProvisioningState: to.Ptr(armpowerbidedicated.CapacityProvisioningStateSucceeded),
				State:             to.Ptr(armpowerbidedicated.StateProvisioning),
			},
			SKU: &armpowerbidedicated.CapacitySKU{
				Name: to.Ptr("A1"),
				Tier: to.Ptr(armpowerbidedicated.CapacitySKUTierPBIEAzure),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DedicatedCapacity) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DedicatedCapacity)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/getCapacity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCapacities_Create(t *testing.T) {
	// From example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/createCapacity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create capacity"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbidedicated.NewCapacitiesClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"TestRG",
		"azsdktest",
		armpowerbidedicated.DedicatedCapacity{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"testKey": to.Ptr("testValue"),
			},
			Properties: &armpowerbidedicated.DedicatedCapacityProperties{
				Administration: &armpowerbidedicated.DedicatedCapacityAdministrators{
					Members: []*string{
						to.Ptr("azsdktest@microsoft.com"),
						to.Ptr("azsdktest2@microsoft.com")},
				},
			},
			SKU: &armpowerbidedicated.CapacitySKU{
				Name: to.Ptr("A1"),
				Tier: to.Ptr(armpowerbidedicated.CapacitySKUTierPBIEAzure),
			},
		},
		&armpowerbidedicated.CapacitiesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/createCapacity.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/createCapacity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpowerbidedicated.DedicatedCapacity{
			Name:     to.Ptr("azsdktest"),
			ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.PowerBIDedicated/capacities/azsdktest"),
			Location: to.Ptr("West US"),
			SystemData: &armpowerbidedicated.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T00:00:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armpowerbidedicated.IdentityTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T00:00:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armpowerbidedicated.IdentityTypeUser),
			},
			Tags: map[string]*string{
				"testKey": to.Ptr("testValue"),
			},
			Properties: &armpowerbidedicated.DedicatedCapacityProperties{
				Administration: &armpowerbidedicated.DedicatedCapacityAdministrators{
					Members: []*string{
						to.Ptr("azsdktest@microsoft.com"),
						to.Ptr("azsdktest2@microsoft.com")},
				},
				ProvisioningState: to.Ptr(armpowerbidedicated.CapacityProvisioningStateSucceeded),
				State:             to.Ptr(armpowerbidedicated.StateProvisioning),
			},
			SKU: &armpowerbidedicated.CapacitySKU{
				Name: to.Ptr("A1"),
				Tier: to.Ptr(armpowerbidedicated.CapacitySKUTierPBIEAzure),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DedicatedCapacity) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DedicatedCapacity)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/createCapacity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCapacities_Delete(t *testing.T) {
	// From example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/deleteCapacity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details of a capacity"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbidedicated.NewCapacitiesClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestRG",
		"azsdktest",
		&armpowerbidedicated.CapacitiesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/deleteCapacity.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/deleteCapacity.json: %v", err)
	}
}

func TestCapacities_Update(t *testing.T) {
	// From example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/updateCapacity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update capacity parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbidedicated.NewCapacitiesClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"TestRG",
		"azsdktest",
		armpowerbidedicated.DedicatedCapacityUpdateParameters{
			Properties: &armpowerbidedicated.DedicatedCapacityMutableProperties{
				Administration: &armpowerbidedicated.DedicatedCapacityAdministrators{
					Members: []*string{
						to.Ptr("azsdktest@microsoft.com"),
						to.Ptr("azsdktest2@microsoft.com")},
				},
			},
			SKU: &armpowerbidedicated.CapacitySKU{
				Name: to.Ptr("A1"),
				Tier: to.Ptr(armpowerbidedicated.CapacitySKUTierPBIEAzure),
			},
			Tags: map[string]*string{
				"testKey": to.Ptr("testValue"),
			},
		},
		&armpowerbidedicated.CapacitiesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/updateCapacity.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/updateCapacity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpowerbidedicated.DedicatedCapacity{
			Name:     to.Ptr("azsdktest"),
			ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.PowerBIDedicated/capacities/azsdktest"),
			Location: to.Ptr("West US"),
			SystemData: &armpowerbidedicated.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T00:00:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armpowerbidedicated.IdentityTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T00:00:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armpowerbidedicated.IdentityTypeUser),
			},
			Tags: map[string]*string{
				"testKey": to.Ptr("testValue"),
			},
			Properties: &armpowerbidedicated.DedicatedCapacityProperties{
				Administration: &armpowerbidedicated.DedicatedCapacityAdministrators{
					Members: []*string{
						to.Ptr("azsdktest@microsoft.com"),
						to.Ptr("azsdktest2@microsoft.com")},
				},
				ProvisioningState: to.Ptr(armpowerbidedicated.CapacityProvisioningStateSucceeded),
				State:             to.Ptr(armpowerbidedicated.StateProvisioning),
			},
			SKU: &armpowerbidedicated.CapacitySKU{
				Name: to.Ptr("A1"),
				Tier: to.Ptr(armpowerbidedicated.CapacitySKUTierPBIEAzure),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DedicatedCapacity) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DedicatedCapacity)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/updateCapacity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/updateToGen2.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update capacity to Generation 2"},
	})
	client = armpowerbidedicated.NewCapacitiesClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"TestRG",
		"azsdktest",
		armpowerbidedicated.DedicatedCapacityUpdateParameters{
			Properties: &armpowerbidedicated.DedicatedCapacityMutableProperties{
				Mode: to.Ptr(armpowerbidedicated.ModeGen2),
			},
			SKU: &armpowerbidedicated.CapacitySKU{
				Name: to.Ptr("A1"),
				Tier: to.Ptr(armpowerbidedicated.CapacitySKUTierPBIEAzure),
			},
			Tags: map[string]*string{
				"testKey": to.Ptr("testValue"),
			},
		},
		&armpowerbidedicated.CapacitiesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/updateToGen2.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/updateToGen2.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpowerbidedicated.DedicatedCapacity{
			Name:     to.Ptr("azsdktest"),
			ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.PowerBIDedicated/capacities/azsdktest"),
			Location: to.Ptr("West US"),
			SystemData: &armpowerbidedicated.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T00:00:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armpowerbidedicated.IdentityTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T00:00:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armpowerbidedicated.IdentityTypeUser),
			},
			Tags: map[string]*string{
				"testKey": to.Ptr("testValue"),
			},
			Properties: &armpowerbidedicated.DedicatedCapacityProperties{
				Administration: &armpowerbidedicated.DedicatedCapacityAdministrators{
					Members: []*string{
						to.Ptr("azsdktest@microsoft.com"),
						to.Ptr("azsdktest2@microsoft.com")},
				},
				Mode:              to.Ptr(armpowerbidedicated.ModeGen2),
				ProvisioningState: to.Ptr(armpowerbidedicated.CapacityProvisioningStateSucceeded),
				State:             to.Ptr(armpowerbidedicated.StateProvisioning),
			},
			SKU: &armpowerbidedicated.CapacitySKU{
				Name: to.Ptr("A1"),
				Tier: to.Ptr(armpowerbidedicated.CapacitySKUTierPBIEAzure),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DedicatedCapacity) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DedicatedCapacity)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/updateToGen2.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCapacities_Suspend(t *testing.T) {
	// From example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/suspendCapacity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Suspend capacity"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbidedicated.NewCapacitiesClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	poller, err := client.BeginSuspend(ctx,
		"TestRG",
		"azsdktest",
		&armpowerbidedicated.CapacitiesClientBeginSuspendOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/suspendCapacity.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/suspendCapacity.json: %v", err)
	}
}

func TestCapacities_Resume(t *testing.T) {
	// From example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/resumeCapacity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details of a capacity"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbidedicated.NewCapacitiesClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	poller, err := client.BeginResume(ctx,
		"TestRG",
		"azsdktest",
		&armpowerbidedicated.CapacitiesClientBeginResumeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/resumeCapacity.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/resumeCapacity.json: %v", err)
	}
}

func TestCapacities_ListByResourceGroup(t *testing.T) {
	// From example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/listCapacitiesInResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List capacities in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbidedicated.NewCapacitiesClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	pager := client.ListByResourceGroup("TestRG",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/listCapacitiesInResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpowerbidedicated.DedicatedCapacities{
			Value: []*armpowerbidedicated.DedicatedCapacity{
				{
					Name:     to.Ptr("azsdktest"),
					ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.PowerBIDedicated/capacities/azsdktest"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"testKey": to.Ptr("testValue"),
					},
					Properties: &armpowerbidedicated.DedicatedCapacityProperties{
						Administration: &armpowerbidedicated.DedicatedCapacityAdministrators{
							Members: []*string{
								to.Ptr("azsdktest@microsoft.com")},
						},
						ProvisioningState: to.Ptr(armpowerbidedicated.CapacityProvisioningStateSucceeded),
						State:             to.Ptr(armpowerbidedicated.StateProvisioning),
					},
					SKU: &armpowerbidedicated.CapacitySKU{
						Name: to.Ptr("A1"),
						Tier: to.Ptr(armpowerbidedicated.CapacitySKUTierPBIEAzure),
					},
				},
				{
					Name:     to.Ptr("azsdktest2"),
					ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.PowerBIDedicated/capacities/azsdktest"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"testKey": to.Ptr("testValue"),
					},
					Properties: &armpowerbidedicated.DedicatedCapacityProperties{
						Administration: &armpowerbidedicated.DedicatedCapacityAdministrators{
							Members: []*string{
								to.Ptr("azsdktest@microsoft.com")},
						},
						ProvisioningState: to.Ptr(armpowerbidedicated.CapacityProvisioningStateSucceeded),
						State:             to.Ptr(armpowerbidedicated.StateProvisioning),
					},
					SKU: &armpowerbidedicated.CapacitySKU{
						Name: to.Ptr("A2"),
						Tier: to.Ptr(armpowerbidedicated.CapacitySKUTierPBIEAzure),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DedicatedCapacities) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DedicatedCapacities)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/listCapacitiesInResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCapacities_List(t *testing.T) {
	// From example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/listCapacitiesInSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details of a capacity"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbidedicated.NewCapacitiesClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/listCapacitiesInSubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpowerbidedicated.DedicatedCapacities{
			Value: []*armpowerbidedicated.DedicatedCapacity{
				{
					Name:     to.Ptr("azsdktest"),
					ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/providers/Microsoft.PowerBIDedicated/capacities/azsdktest"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"testKey": to.Ptr("testValue"),
					},
					Properties: &armpowerbidedicated.DedicatedCapacityProperties{
						Administration: &armpowerbidedicated.DedicatedCapacityAdministrators{
							Members: []*string{
								to.Ptr("azsdktest@microsoft.com")},
						},
						ProvisioningState: to.Ptr(armpowerbidedicated.CapacityProvisioningStateSucceeded),
						State:             to.Ptr(armpowerbidedicated.StateProvisioning),
					},
					SKU: &armpowerbidedicated.CapacitySKU{
						Name: to.Ptr("A1"),
						Tier: to.Ptr(armpowerbidedicated.CapacitySKUTierPBIEAzure),
					},
				},
				{
					Name:     to.Ptr("azsdktest2"),
					ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/providers/Microsoft.PowerBIDedicated/capacities/azsdktest"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"testKey": to.Ptr("testValue"),
					},
					Properties: &armpowerbidedicated.DedicatedCapacityProperties{
						Administration: &armpowerbidedicated.DedicatedCapacityAdministrators{
							Members: []*string{
								to.Ptr("azsdktest@microsoft.com")},
						},
						ProvisioningState: to.Ptr(armpowerbidedicated.CapacityProvisioningStateSucceeded),
						State:             to.Ptr(armpowerbidedicated.StateProvisioning),
					},
					SKU: &armpowerbidedicated.CapacitySKU{
						Name: to.Ptr("A2"),
						Tier: to.Ptr(armpowerbidedicated.CapacitySKUTierPBIEAzure),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DedicatedCapacities) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DedicatedCapacities)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/listCapacitiesInSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCapacities_CheckNameAvailability(t *testing.T) {
	// From example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/checkNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check name availability of a capacity"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbidedicated.NewCapacitiesClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"West US",
		armpowerbidedicated.CheckCapacityNameAvailabilityParameters{
			Name: to.Ptr("azsdktest"),
			Type: to.Ptr("Microsoft.PowerBIDedicated/capacities"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/checkNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpowerbidedicated.CheckCapacityNameAvailabilityResult{
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckCapacityNameAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckCapacityNameAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/checkNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/operations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbidedicated.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/operations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpowerbidedicated.OperationListResult{
			Value: []*armpowerbidedicated.Operation{
				{
					Name: to.Ptr("Microsoft.PowerBIDedicated/checkNameAvailability/action"),
					Display: &armpowerbidedicated.OperationDisplay{
						Description: to.Ptr("Checks that given Power BI Dedicated Capacity name is valid and not in use."),
						Operation:   to.Ptr("Capacities_CheckNameAvailability"),
						Provider:    to.Ptr("Microsoft.PowerBIDedicated"),
						Resource:    to.Ptr("checkNameAvailability"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/operations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutoScaleVCores_Get(t *testing.T) {
	// From example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/getAutoScaleVCore.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details of an auto scale v-core"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbidedicated.NewAutoScaleVCoresClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	res, err := client.Get(ctx,
		"TestRG",
		"testvcore",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/getAutoScaleVCore.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpowerbidedicated.AutoScaleVCore{
			Name:     to.Ptr("testvcore"),
			Type:     to.Ptr("Microsoft.PowerBIDedicated/autoScaleVCores"),
			ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.PowerBIDedicated/autoScaleVCores/testvcore"),
			Location: to.Ptr("West US"),
			SystemData: &armpowerbidedicated.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T00:00:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("app1"),
				CreatedByType:      to.Ptr(armpowerbidedicated.IdentityTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T00:00:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("app1"),
				LastModifiedByType: to.Ptr(armpowerbidedicated.IdentityTypeApplication),
			},
			Tags: map[string]*string{},
			Properties: &armpowerbidedicated.AutoScaleVCoreProperties{
				CapacityLimit:     to.Ptr[int32](10),
				CapacityObjectID:  to.Ptr("a28f00bd-5330-4572-88f1-fa883e074785"),
				ProvisioningState: to.Ptr(armpowerbidedicated.VCoreProvisioningStateSucceeded),
			},
			SKU: &armpowerbidedicated.AutoScaleVCoreSKU{
				Name:     to.Ptr("AutoScale"),
				Capacity: to.Ptr[int32](0),
				Tier:     to.Ptr(armpowerbidedicated.VCoreSKUTierAutoScale),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AutoScaleVCore) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AutoScaleVCore)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/getAutoScaleVCore.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutoScaleVCores_Create(t *testing.T) {
	// From example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/createAutoScaleVCore.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create auto scale v-core"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbidedicated.NewAutoScaleVCoresClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	res, err := client.Create(ctx,
		"TestRG",
		"testvcore",
		armpowerbidedicated.AutoScaleVCore{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"testKey": to.Ptr("testValue"),
			},
			Properties: &armpowerbidedicated.AutoScaleVCoreProperties{
				CapacityLimit:    to.Ptr[int32](10),
				CapacityObjectID: to.Ptr("a28f00bd-5330-4572-88f1-fa883e074785"),
			},
			SKU: &armpowerbidedicated.AutoScaleVCoreSKU{
				Name:     to.Ptr("AutoScale"),
				Capacity: to.Ptr[int32](0),
				Tier:     to.Ptr(armpowerbidedicated.VCoreSKUTierAutoScale),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/createAutoScaleVCore.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpowerbidedicated.AutoScaleVCore{
			Name:     to.Ptr("testvcore"),
			Type:     to.Ptr("Microsoft.PowerBIDedicated/autoScaleVCores"),
			ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.PowerBIDedicated/autoScaleVCores/testvcore"),
			Location: to.Ptr("West US"),
			SystemData: &armpowerbidedicated.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T00:00:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("app1"),
				CreatedByType:      to.Ptr(armpowerbidedicated.IdentityTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T00:00:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("app1"),
				LastModifiedByType: to.Ptr(armpowerbidedicated.IdentityTypeApplication),
			},
			Tags: map[string]*string{
				"testKey": to.Ptr("testValue"),
			},
			Properties: &armpowerbidedicated.AutoScaleVCoreProperties{
				CapacityLimit:     to.Ptr[int32](10),
				CapacityObjectID:  to.Ptr("a28f00bd-5330-4572-88f1-fa883e074785"),
				ProvisioningState: to.Ptr(armpowerbidedicated.VCoreProvisioningStateSucceeded),
			},
			SKU: &armpowerbidedicated.AutoScaleVCoreSKU{
				Name:     to.Ptr("AutoScale"),
				Capacity: to.Ptr[int32](0),
				Tier:     to.Ptr(armpowerbidedicated.VCoreSKUTierAutoScale),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AutoScaleVCore) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AutoScaleVCore)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/createAutoScaleVCore.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutoScaleVCores_Delete(t *testing.T) {
	// From example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/deleteAutoScaleVCore.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an auto scale v-core"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbidedicated.NewAutoScaleVCoresClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	_, err := client.Delete(ctx,
		"TestRG",
		"testvcore",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/deleteAutoScaleVCore.json: %v", err)
	}
}

func TestAutoScaleVCores_Update(t *testing.T) {
	// From example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/updateAutoScaleVCore.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update auto scale v-core parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbidedicated.NewAutoScaleVCoresClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	res, err := client.Update(ctx,
		"TestRG",
		"testvcore",
		armpowerbidedicated.AutoScaleVCoreUpdateParameters{
			Properties: &armpowerbidedicated.AutoScaleVCoreMutableProperties{
				CapacityLimit: to.Ptr[int32](20),
			},
			SKU: &armpowerbidedicated.AutoScaleVCoreSKU{
				Name:     to.Ptr("AutoScale"),
				Capacity: to.Ptr[int32](0),
				Tier:     to.Ptr(armpowerbidedicated.VCoreSKUTierAutoScale),
			},
			Tags: map[string]*string{
				"testKey": to.Ptr("testValue"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/updateAutoScaleVCore.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpowerbidedicated.AutoScaleVCore{
			Name:     to.Ptr("testvcore"),
			Type:     to.Ptr("Microsoft.PowerBIDedicated/autoScaleVCores"),
			ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.PowerBIDedicated/autoScaleVCores/testvcore"),
			Location: to.Ptr("West US"),
			SystemData: &armpowerbidedicated.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T00:00:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("app1"),
				CreatedByType:      to.Ptr(armpowerbidedicated.IdentityTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T00:00:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("app1"),
				LastModifiedByType: to.Ptr(armpowerbidedicated.IdentityTypeApplication),
			},
			Tags: map[string]*string{
				"testKey": to.Ptr("testValue"),
			},
			Properties: &armpowerbidedicated.AutoScaleVCoreProperties{
				CapacityLimit:     to.Ptr[int32](20),
				CapacityObjectID:  to.Ptr("a28f00bd-5330-4572-88f1-fa883e074785"),
				ProvisioningState: to.Ptr(armpowerbidedicated.VCoreProvisioningStateSucceeded),
			},
			SKU: &armpowerbidedicated.AutoScaleVCoreSKU{
				Name:     to.Ptr("AutoScale"),
				Capacity: to.Ptr[int32](0),
				Tier:     to.Ptr(armpowerbidedicated.VCoreSKUTierAutoScale),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AutoScaleVCore) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AutoScaleVCore)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/updateAutoScaleVCore.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutoScaleVCores_ListByResourceGroup(t *testing.T) {
	// From example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/listAutoScaleVCoresInResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List auto scale v-cores in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbidedicated.NewAutoScaleVCoresClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	pager := client.ListByResourceGroup("TestRG",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/listAutoScaleVCoresInResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpowerbidedicated.AutoScaleVCoreListResult{
			Value: []*armpowerbidedicated.AutoScaleVCore{
				{
					Name:     to.Ptr("testvcore1"),
					Type:     to.Ptr("Microsoft.PowerBIDedicated/autoScaleVCores"),
					ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.PowerBIDedicated/autoScaleVCores/testvcore1"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"testKey": to.Ptr("testValue"),
					},
					Properties: &armpowerbidedicated.AutoScaleVCoreProperties{
						CapacityLimit:     to.Ptr[int32](10),
						CapacityObjectID:  to.Ptr("a28f00bd-5330-4572-88f1-fa883e074785"),
						ProvisioningState: to.Ptr(armpowerbidedicated.VCoreProvisioningStateSucceeded),
					},
					SKU: &armpowerbidedicated.AutoScaleVCoreSKU{
						Name:     to.Ptr("AutoScale"),
						Capacity: to.Ptr[int32](5),
						Tier:     to.Ptr(armpowerbidedicated.VCoreSKUTierAutoScale),
					},
				},
				{
					Name:     to.Ptr("testvcore2"),
					Type:     to.Ptr("Microsoft.PowerBIDedicated/autoScaleVCores"),
					ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.PowerBIDedicated/autoScaleVCores/testvcore2"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"testKey": to.Ptr("testValue"),
					},
					Properties: &armpowerbidedicated.AutoScaleVCoreProperties{
						CapacityLimit:     to.Ptr[int32](10),
						CapacityObjectID:  to.Ptr("f59f226b-a313-4266-8768-a45961c2edbb"),
						ProvisioningState: to.Ptr(armpowerbidedicated.VCoreProvisioningStateSucceeded),
					},
					SKU: &armpowerbidedicated.AutoScaleVCoreSKU{
						Name:     to.Ptr("AutoScale"),
						Capacity: to.Ptr[int32](0),
						Tier:     to.Ptr(armpowerbidedicated.VCoreSKUTierAutoScale),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AutoScaleVCoreListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AutoScaleVCoreListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/listAutoScaleVCoresInResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutoScaleVCores_ListBySubscription(t *testing.T) {
	// From example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/listAutoScaleVCoresInSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List auto scale v-cores in subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbidedicated.NewAutoScaleVCoresClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/listAutoScaleVCoresInSubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpowerbidedicated.AutoScaleVCoreListResult{
			Value: []*armpowerbidedicated.AutoScaleVCore{
				{
					Name:     to.Ptr("testvcore1"),
					Type:     to.Ptr("Microsoft.PowerBIDedicated/autoScaleVCores"),
					ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG1/providers/Microsoft.PowerBIDedicated/autoScaleVCores/testvcore1"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"testKey": to.Ptr("testValue"),
					},
					Properties: &armpowerbidedicated.AutoScaleVCoreProperties{
						CapacityLimit:     to.Ptr[int32](10),
						CapacityObjectID:  to.Ptr("a28f00bd-5330-4572-88f1-fa883e074785"),
						ProvisioningState: to.Ptr(armpowerbidedicated.VCoreProvisioningStateSucceeded),
					},
					SKU: &armpowerbidedicated.AutoScaleVCoreSKU{
						Name:     to.Ptr("AutoScale"),
						Capacity: to.Ptr[int32](5),
						Tier:     to.Ptr(armpowerbidedicated.VCoreSKUTierAutoScale),
					},
				},
				{
					Name:     to.Ptr("testvcore2"),
					Type:     to.Ptr("Microsoft.PowerBIDedicated/autoScaleVCores"),
					ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG2/providers/Microsoft.PowerBIDedicated/autoScaleVCores/testvcore2"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"testKey": to.Ptr("testValue"),
					},
					Properties: &armpowerbidedicated.AutoScaleVCoreProperties{
						CapacityLimit:     to.Ptr[int32](10),
						CapacityObjectID:  to.Ptr("f59f226b-a313-4266-8768-a45961c2edbb"),
						ProvisioningState: to.Ptr(armpowerbidedicated.VCoreProvisioningStateSucceeded),
					},
					SKU: &armpowerbidedicated.AutoScaleVCoreSKU{
						Name:     to.Ptr("AutoScale"),
						Capacity: to.Ptr[int32](0),
						Tier:     to.Ptr(armpowerbidedicated.VCoreSKUTierAutoScale),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AutoScaleVCoreListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AutoScaleVCoreListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbidedicated/resource-manager/Microsoft.PowerBIdedicated/stable/2021-01-01/examples/listAutoScaleVCoresInSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
