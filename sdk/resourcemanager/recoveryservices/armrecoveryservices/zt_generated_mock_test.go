//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecoveryservices_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/recoveryservices/armrecoveryservices"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestVaultCertificates_Create(t *testing.T) {
	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PUTVaultCred.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Download vault credential file"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservices.NewVaultCertificatesClient("77777777-d41f-4550-9f70-7708a3a2283b", cred, &options)
	res, err := client.Create(ctx,
		"BCDRIbzRG",
		"BCDRIbzVault",
		"BCDRIbzVault77777777-d41f-4550-9f70-7708a3a2283b-12-18-2017-vaultcredentials",
		armrecoveryservices.CertificateRequest{
			Properties: &armrecoveryservices.RawCertificateData{
				AuthType:    to.Ptr(armrecoveryservices.AuthTypeAAD),
				Certificate: []byte("MTTC3TCCAcWgAwIBAgIQEj9h+ZLlXK9KrqZX9UkAnzANBgkqhkiG9w0BAQUFADAeMRwwGgYDVQQDExNXaW5kb3dzIEF6dXJlIFRvb2xzMB4XDTE3MTIxODA5MTc1M1oXDTE3MTIyMzA5Mjc1M1owHjEcMBoGA1UEAxMTV2luZG93cyBBenVyZSBUb29sczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK773/eZZ69RbZZAT05r9MjUxu9y1L1Pn1EgPk62IPJyHlO3OZA922eSBahhP4bgmFljN4LVReqQ5eT/wqO0Zhc+yFkUy4U4RdbQLeUZt2W7yy9XLXgVvqeYDgsjg/QhHetgHArQBW+tlQq5+zPdU7zchI4rbShSJrWhLrZFWiOyFPsuAE4joUQHNlRifdCTsBGKk8HRCY3j1S3c4bfEn3zxlrvrXXssRuW5mJM95rMk0tskoRxXSCi6i9bnlki2Cs9mpVMmBFeofs41KwzlWU0TgpdD8s1QEdvfGB5NbByfetPX7MfJaTBeHZEGbv/Iq8l72u8sPBoOhcaH7qDE/mECAwEAAaMXMBUwEwYDVR0lBAwwCgYIKwYBBQUHAwIwDQYJKoZIhvcNAQEFBQADggEBAILfgHluye1Q+WelhgWhpBBdIq2C0btfV8eFsZaTlBUrM0fwpxQSlAWc2oYHVMQI4A5iUjbDOY35O4yc+TnWKDBKf+laqDP+yos4aiUPuadGUZfvDk7kuw7xeECs64JpHAIEKdRHFW9rD3gwG+nIWaDnEL/7rTyhL3kXrRW2MSUAL8g3GX8Z45c+MQY0jmASIqWdhGn1vpAGyA9mKkzsqg7FXjg8GZb24tGl5Ky85+ip4dkBfXinDD8WwaGyjhGGK97ErvNmN36qly/H0H1Qngiovg1FbHDmkcFO5QclnEJsFFmcO2CcHp5Fqh2wXn5O1cQaxCIRTpQ/uXRpDjl2wKs="),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PUTVaultCred.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservices.VaultCertificateResponse{
			Name: to.Ptr("BCDRIbzVault77777777-d41f-4550-9f70-7708a3a2283b-12-18-2017-vaultcredentials"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/certificates"),
			ID:   to.Ptr("/Subscriptions/77777777-d41f-4550-9f70-7708a3a2283b/resourceGroups/BCDRIbzRG/providers/Microsoft.RecoveryServices/vaults/BCDRIbzVault/certificates/BCDRIbzVault77777777-d41f-4550-9f70-7708a3a2283b-12-18-2017-vaultcredentials"),
			Properties: &armrecoveryservices.ResourceCertificateAndAADDetails{
				AuthType:                        to.Ptr("AzureActiveDirectory"),
				Certificate:                     []byte("MTTC3TCCAcWgAwIBAgIQEj9h+ZLlXK9KrqZX9UkAnzANBgkqhkiG9w0BAQUFADAeMRwwGgYDVQQDExNXaW5kb3dzIEF6dXJlIFRvb2xzMB4XDTE3MTIxODA5MTc1M1oXDTE3MTIyMzA5Mjc1M1owHjEcMBoGA1UEAxMTV2luZG93cyBBenVyZSBUb29sczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK773/eZZ69RbZZAT05r9MjUxu9y1L1Pn1EgPk62IPJyHlO3OZA922eSBahhP4bgmFljN4LVReqQ5eT/wqO0Zhc+yFkUy4U4RdbQLeUZt2W7yy9XLXgVvqeYDgsjg/QhHetgHArQBW+tlQq5+zPdU7zchI4rbShSJrWhLrZFWiOyFPsuAE4joUQHNlRifdCTsBGKk8HRCY3j1S3c4bfEn3zxlrvrXXssRuW5mJM95rMk0tskoRxXSCi6i9bnlki2Cs9mpVMmBFeofs41KwzlWU0TgpdD8s1QEdvfGB5NbByfetPX7Mf                JaTBeHZEGbv/Iq8l72u8sPBoOhcaH7qDE/mECAwEAAaMXMBUwEwYDVR0lBAwwCgYIKwYBBQUHAwIwDQYJKoZIhvcNAQEFBQADggEBAILfgHluye1Q+WelhgWhpBBdIq2C0btfV8eFsZaTlBUrM0fwpxQSlAWc2oYHVMQI4A5iUjbDOY35O4yc+TnWKDBKf+laqDP+yos4aiUPuadGUZfvDk7kuw7xeECs64JpHAIEKdRHFW9rD3gwG+nIWaDnEL/7rTyhL3kXrRW2MSUAL8g3GX8Z45c+MQY0jmASIqWdhGn1vpAGyA9mKkzsqg7FXjg8GZb24tGl5Ky85+ip4dkBfXinDD8WwaGyjhGGK97ErvNmN36qly/H0H1Qngiovg1FbHDmkcFO5QclnEJsFFmcO2CcHp5Fqh2wXn5O1cQaxCIRTpQ/uXRpDjl2wKs="),
				FriendlyName:                    to.Ptr(""),
				Issuer:                          to.Ptr("CN=Windows Azure Tools"),
				ResourceID:                      to.Ptr[int64](8726350008099341000),
				Subject:                         to.Ptr("CN=Windows Azure Tools"),
				Thumbprint:                      to.Ptr("019FE9BAD18A5A09A5CA53B593AF66331F3054AF"),
				ValidFrom:                       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-18T14:47:53+05:30"); return t }()),
				ValidTo:                         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-23T14:57:53+05:30"); return t }()),
				AADAuthority:                    to.Ptr("https://login.windows.net"),
				AADTenantID:                     to.Ptr("9b0c2069-2eba-489f-95f4-eca15cb602ab"),
				AzureManagementEndpointAudience: to.Ptr("https://ppe1-id1.wus.wabppe.obs-test.com/restapi/"),
				ServicePrincipalClientID:        to.Ptr("4932d0bd-b5f9-4659-94a0-7ab02d918933"),
				ServicePrincipalObjectID:        to.Ptr("2d60221e-cef5-4e13-ba66-b33701a533bb"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VaultCertificateResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VaultCertificateResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PUTVaultCred.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegisteredIdentities_Delete(t *testing.T) {
	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/DeleteRegisteredIdentities.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete registered Identity"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservices.NewRegisteredIdentitiesClient("77777777-d41f-4550-9f70-7708a3a2283b", cred, &options)
	_, err := client.Delete(ctx,
		"BCDRIbzRG",
		"BCDRIbzVault",
		"dpmcontainer01",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/DeleteRegisteredIdentities.json: %v", err)
	}
}

func TestReplicationUsages_List(t *testing.T) {
	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/ListReplicationUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets Replication usages of vault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservices.NewReplicationUsagesClient("6808dbbc-98c7-431f-a1b1-9580902423b7", cred, &options)
	pager := client.List("avrai7517RG1",
		"avrai7517Vault1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/ListReplicationUsages.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservices.ReplicationUsageList{
			Value: []*armrecoveryservices.ReplicationUsage{
				{
					JobsSummary: &armrecoveryservices.JobsSummary{
						FailedJobs:     to.Ptr[int32](0),
						InProgressJobs: to.Ptr[int32](0),
						SuspendedJobs:  to.Ptr[int32](0),
					},
					MonitoringSummary: &armrecoveryservices.MonitoringSummary{
						DeprecatedProviderCount:  to.Ptr[int32](0),
						EventsCount:              to.Ptr[int32](0),
						SupportedProviderCount:   to.Ptr[int32](0),
						UnHealthyProviderCount:   to.Ptr[int32](0),
						UnHealthyVMCount:         to.Ptr[int32](0),
						UnsupportedProviderCount: to.Ptr[int32](0),
					},
					ProtectedItemCount:     to.Ptr[int32](2),
					RecoveryPlanCount:      to.Ptr[int32](1),
					RegisteredServersCount: to.Ptr[int32](2),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReplicationUsageList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReplicationUsageList)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/ListReplicationUsages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_List(t *testing.T) {
	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/ListPrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List PrivateLinkResources"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservices.NewPrivateLinkResourcesClient("6c48fa17-39c7-45f1-90ac-47a587128ace", cred, &options)
	pager := client.List("petesting",
		"pemsi-ecy-rsv2",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/ListPrivateLinkResources.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservices.PrivateLinkResources{
			Value: []*armrecoveryservices.PrivateLinkResource{
				{
					Name: to.Ptr("backupResource"),
					Type: to.Ptr("Microsoft.RecoveryServices/Vaults/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/6c48fa17-39c7-45f1-90ac-47a587128ace/resourceGroups/petesting/providers/Microsoft.RecoveryServices/Vaults/pemsi-ecy-rsv2/privateLinkResources/backupResource"),
					Properties: &armrecoveryservices.PrivateLinkResourceProperties{
						GroupID: to.Ptr("AzureBackup"),
						RequiredMembers: []*string{
							to.Ptr("backup-fab1"),
							to.Ptr("backup-rec2"),
							to.Ptr("backup-prot1"),
							to.Ptr("backup-ecs1"),
							to.Ptr("backup-tel1"),
							to.Ptr("backup-wbcm1"),
							to.Ptr("backup-fc1"),
							to.Ptr("backup-id1")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.ecy.backup.windowsazure.com"),
							to.Ptr("privatelink.queue.core.windows.net"),
							to.Ptr("privatelink.blob.core.windows.net")},
					},
				},
				{
					Name: to.Ptr("siteRecoveryResource"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/6c48fa17-39c7-45f1-90ac-47a587128ace/resourceGroups/gaallarg/providers/Microsoft.RecoveryServices/vaults/amchandnTest2702A/privateLinkResources/siteRecoveryResource"),
					Properties: &armrecoveryservices.PrivateLinkResourceProperties{
						GroupID: to.Ptr("AzureSiteRecovery"),
						RequiredMembers: []*string{
							to.Ptr("siteRecovery-rcm1"),
							to.Ptr("siteRecovery-prot2"),
							to.Ptr("siteRecovery-tel1"),
							to.Ptr("siteRecovery-srs1"),
							to.Ptr("siteRecovery-prot2b"),
							to.Ptr("siteRecovery-id1")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.ecy.siterecovery.windowsazure.com"),
							to.Ptr("privatelink.queue.core.windows.net"),
							to.Ptr("privatelink.blob.core.windows.net")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResources) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResources)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/ListPrivateLinkResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/GetPrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get PrivateLinkResource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservices.NewPrivateLinkResourcesClient("6c48fa17-39c7-45f1-90ac-47a587128ace", cred, &options)
	res, err := client.Get(ctx,
		"petesting",
		"pemsi-ecy-rsv2",
		"backupResource",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/GetPrivateLinkResources.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservices.PrivateLinkResource{
			Name: to.Ptr("backupResource"),
			Type: to.Ptr("Microsoft.RecoveryServices/Vaults/privateLinkResources"),
			ID:   to.Ptr("/subscriptions/6c48fa17-39c7-45f1-90ac-47a587128ace/resourceGroups/petesting/providers/Microsoft.RecoveryServices/Vaults/pemsi-ecy-rsv2/privateLinkResources/backupResource"),
			Properties: &armrecoveryservices.PrivateLinkResourceProperties{
				GroupID: to.Ptr("AzureBackup"),
				RequiredMembers: []*string{
					to.Ptr("backup-fab1"),
					to.Ptr("backup-rec2"),
					to.Ptr("backup-prot1"),
					to.Ptr("backup-ecs1"),
					to.Ptr("backup-tel1"),
					to.Ptr("backup-wbcm1"),
					to.Ptr("backup-fc1"),
					to.Ptr("backup-id1")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.ecy.backup.windowsazure.com"),
					to.Ptr("privatelink.queue.core.windows.net"),
					to.Ptr("privatelink.blob.core.windows.net")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/GetPrivateLinkResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecoveryServices_CheckNameAvailability(t *testing.T) {
	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/CheckNameAvailability_Available.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Availability status of Resource Name when no resource with same name, type and subscription exists, nor has been deleted within last 24 hours"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservices.NewClient("77777777-b0c6-47a2-b37c-d8e65a629c18", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"resGroupFoo",
		"westus",
		armrecoveryservices.CheckNameAvailabilityParameters{
			Name: to.Ptr("swaggerExample"),
			Type: to.Ptr("Microsoft.RecoveryServices/Vaults"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/CheckNameAvailability_Available.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservices.CheckNameAvailabilityResult{
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/CheckNameAvailability_Available.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/CheckNameAvailability_NotAvailable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Availability status of Resource Name when resource with same name, type and subscription exists"},
	})
	client = armrecoveryservices.NewClient("77777777-b0c6-47a2-b37c-d8e65a629c18", cred, &options)
	res, err = client.CheckNameAvailability(ctx,
		"resGroupBar",
		"westus",
		armrecoveryservices.CheckNameAvailabilityParameters{
			Name: to.Ptr("swaggerExample2"),
			Type: to.Ptr("Microsoft.RecoveryServices/Vaults"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/CheckNameAvailability_NotAvailable.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservices.CheckNameAvailabilityResult{
			Message:       to.Ptr("Resource already exists with the same name."),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr("AlreadyExists"),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/CheckNameAvailability_NotAvailable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVaults_ListByResourceGroup(t *testing.T) {
	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/ListResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List of Recovery Services Resources in ResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservices.NewVaultsClient("77777777-b0c6-47a2-b37c-d8e65a629c18", cred, &options)
	pager := client.ListByResourceGroup("Default-RecoveryServices-ResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/ListResources.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservices.VaultList{
			Value: []*armrecoveryservices.Vault{
				{
					Name:     to.Ptr("patchtest"),
					Type:     to.Ptr("Microsoft.RecoveryServices/vaults"),
					Etag:     to.Ptr("W/\"datetime'2017-11-22T11%3A05%3A19.907Z'\""),
					ID:       to.Ptr("/subscriptions/77777777-b0c6-47a2-b37c-d8e65a629c18/resourceGroups/Default-RecoveryServices-ResourceGroup/providers/Microsoft.RecoveryServices/vaults/patchtest"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"Love": to.Ptr("India"),
					},
					Properties: &armrecoveryservices.VaultProperties{
						ProvisioningState: to.Ptr("Succeeded"),
					},
					SKU: &armrecoveryservices.SKU{
						Name: to.Ptr(armrecoveryservices.SKUNameStandard),
					},
				},
				{
					Name:     to.Ptr("swaggerExample"),
					Type:     to.Ptr("Microsoft.RecoveryServices/vaults"),
					Etag:     to.Ptr("W/\"datetime'2017-12-15T12%3A36%3A51.68Z'\""),
					ID:       to.Ptr("/subscriptions/77777777-b0c6-47a2-b37c-d8e65a629c18/resourceGroups/Default-RecoveryServices-ResourceGroup/providers/Microsoft.RecoveryServices/vaults/swaggerExample"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"TestUpdatedKey": to.Ptr("TestUpdatedValue"),
					},
					Properties: &armrecoveryservices.VaultProperties{
						ProvisioningState: to.Ptr("Succeeded"),
					},
					SKU: &armrecoveryservices.SKU{
						Name: to.Ptr(armrecoveryservices.SKUNameStandard),
					},
				},
				{
					Name:     to.Ptr("today1"),
					Type:     to.Ptr("Microsoft.RecoveryServices/vaults"),
					Etag:     to.Ptr("W/\"datetime'2017-11-21T10%3A52%3A19.633Z'\""),
					ID:       to.Ptr("/subscriptions/77777777-b0c6-47a2-b37c-d8e65a629c18/resourceGroups/Default-RecoveryServices-ResourceGroup/providers/Microsoft.RecoveryServices/vaults/today1"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"TestUpdatedKey": to.Ptr("TestUpdatedValue"),
					},
					Properties: &armrecoveryservices.VaultProperties{
						ProvisioningState: to.Ptr("Succeeded"),
					},
					SKU: &armrecoveryservices.SKU{
						Name: to.Ptr(armrecoveryservices.SKUNameStandard),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VaultList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VaultList)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/ListResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVaults_Get(t *testing.T) {
	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/GETVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Recovery Services Resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservices.NewVaultsClient("77777777-b0c6-47a2-b37c-d8e65a629c18", cred, &options)
	res, err := client.Get(ctx,
		"Default-RecoveryServices-ResourceGroup",
		"swaggerExample",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/GETVault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservices.Vault{
			Name:     to.Ptr("swaggerExample"),
			Type:     to.Ptr("Microsoft.RecoveryServices/vaults"),
			Etag:     to.Ptr("W/\"datetime'2017-12-15T12%3A36%3A51.68Z'\""),
			ID:       to.Ptr("/subscriptions/77777777-b0c6-47a2-b37c-d8e65a629c18/resourceGroups/Default-RecoveryServices-ResourceGroup/providers/Microsoft.RecoveryServices/vaults/swaggerExample"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"TestUpdatedKey": to.Ptr("TestUpdatedValue"),
			},
			Identity: &armrecoveryservices.IdentityData{
				Type:        to.Ptr(armrecoveryservices.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("3137d6c7-5d6c-411c-b934-7a2a729ee247"),
				TenantID:    to.Ptr("d676e86e-2206-4a7c-999c-ece52c144b5b"),
			},
			Properties: &armrecoveryservices.VaultProperties{
				PrivateEndpointConnections: []*armrecoveryservices.PrivateEndpointConnectionVaultProperties{
					{
						ID: to.Ptr("/subscriptions/6c48fa17-39c7-45f1-90ac-47a587128ace/resourceGroups/Default-RecoveryServices-ResourceGroup/providers/Microsoft.RecoveryServices/Vaults/pemsi-ecy-rsv2/privateEndpointConnections/pe114-pemsi-ecy-rsv.5944358949303501042.backup.75061caa-cba4-4849-8e09-608da4914aad"),
						Properties: &armrecoveryservices.PrivateEndpointConnection{
							PrivateEndpoint: &armrecoveryservices.PrivateEndpoint{
								ID: to.Ptr("/subscriptions/6c48fa17-39c7-45f1-90ac-47a587128ace/resourceGroups/Default-RecoveryServices-ResourceGroup/providers/Microsoft.Network/privateEndpoints/pe114-pemsi-ecy-rsv"),
							},
							PrivateLinkServiceConnectionState: &armrecoveryservices.PrivateLinkServiceConnectionState{
								Description:     to.Ptr("None"),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr(armrecoveryservices.PrivateEndpointConnectionStatusApproved),
							},
							ProvisioningState: to.Ptr(armrecoveryservices.ProvisioningStateSucceeded),
						},
					}},
				PrivateEndpointStateForBackup:       to.Ptr(armrecoveryservices.VaultPrivateEndpointStateEnabled),
				PrivateEndpointStateForSiteRecovery: to.Ptr(armrecoveryservices.VaultPrivateEndpointStateNone),
				ProvisioningState:                   to.Ptr("Succeeded"),
			},
			SKU: &armrecoveryservices.SKU{
				Name: to.Ptr(armrecoveryservices.SKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Vault) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Vault)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/GETVault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVaults_CreateOrUpdate(t *testing.T) {
	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PUTVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update Recovery Services vault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservices.NewVaultsClient("77777777-b0c6-47a2-b37c-d8e65a629c18", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default-RecoveryServices-ResourceGroup",
		"swaggerExample",
		armrecoveryservices.Vault{
			Location: to.Ptr("West US"),
			Identity: &armrecoveryservices.IdentityData{
				Type: to.Ptr(armrecoveryservices.ResourceIdentityTypeSystemAssigned),
			},
			Properties: &armrecoveryservices.VaultProperties{},
			SKU: &armrecoveryservices.SKU{
				Name: to.Ptr(armrecoveryservices.SKUNameStandard),
			},
		},
		&armrecoveryservices.VaultsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PUTVault.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PUTVault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservices.Vault{
			Name:     to.Ptr("swaggerExample"),
			Type:     to.Ptr("Microsoft.RecoveryServices/vaults"),
			Etag:     to.Ptr("W/\"datetime'2017-12-15T12%3A36%3A51.68Z'\""),
			ID:       to.Ptr("/subscriptions/77777777-b0c6-47a2-b37c-d8e65a629c18/resourceGroups/Default-RecoveryServices-ResourceGroup/providers/Microsoft.RecoveryServices/vaults/swaggerExample"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"TestUpdatedKey": to.Ptr("TestUpdatedValue"),
			},
			Identity: &armrecoveryservices.IdentityData{
				Type:        to.Ptr(armrecoveryservices.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("3137d6c7-5d6c-411c-b934-7a2a729ee247"),
				TenantID:    to.Ptr("d676e86e-2206-4a7c-999c-ece52c144b5b"),
			},
			Properties: &armrecoveryservices.VaultProperties{
				ProvisioningState: to.Ptr("Succeeded"),
			},
			SKU: &armrecoveryservices.SKU{
				Name: to.Ptr(armrecoveryservices.SKUNameRS0),
				Tier: to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Vault) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Vault)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PUTVault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PUTVault_WithCMK.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update Vault with CustomerManagedKeys"},
	})
	client = armrecoveryservices.NewVaultsClient("77777777-b0c6-47a2-b37c-d8e65a629c18", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-RecoveryServices-ResourceGroup",
		"swaggerExample",
		armrecoveryservices.Vault{
			Location: to.Ptr("West US"),
			Identity: &armrecoveryservices.IdentityData{
				Type: to.Ptr(armrecoveryservices.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armrecoveryservices.UserIdentity{
					"/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi": {},
				},
			},
			Properties: &armrecoveryservices.VaultProperties{
				Encryption: &armrecoveryservices.VaultPropertiesEncryption{
					InfrastructureEncryption: to.Ptr(armrecoveryservices.InfrastructureEncryptionStateEnabled),
					KekIdentity: &armrecoveryservices.CmkKekIdentity{
						UserAssignedIdentity: to.Ptr("/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi"),
					},
					KeyVaultProperties: &armrecoveryservices.CmkKeyVaultProperties{
						KeyURI: to.Ptr("https://cmk2xkv.vault.azure.net/keys/Key1/0767b348bb1a4c07baa6c4ec0055d2b3"),
					},
				},
			},
			SKU: &armrecoveryservices.SKU{
				Name: to.Ptr(armrecoveryservices.SKUNameStandard),
			},
		},
		&armrecoveryservices.VaultsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PUTVault_WithCMK.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PUTVault_WithCMK.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservices.Vault{
			Name:     to.Ptr("swaggerExample"),
			Type:     to.Ptr("Microsoft.RecoveryServices/vaults"),
			Etag:     to.Ptr("W/\"datetime'2017-12-15T12%3A36%3A51.68Z'\""),
			ID:       to.Ptr("/subscriptions/77777777-b0c6-47a2-b37c-d8e65a629c18/resourceGroups/Default-RecoveryServices-ResourceGroup/providers/Microsoft.RecoveryServices/vaults/swaggerExample"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"TestUpdatedKey": to.Ptr("TestUpdatedValue"),
			},
			Identity: &armrecoveryservices.IdentityData{
				Type: to.Ptr(armrecoveryservices.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armrecoveryservices.UserIdentity{
					"/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi": {
						ClientID:    to.Ptr("fbe75b66-01c5-4f87-a220-233af3270436"),
						PrincipalID: to.Ptr("075a0ca6-43f6-4434-9abf-c9b1b79f9219"),
					},
				},
			},
			Properties: &armrecoveryservices.VaultProperties{
				Encryption: &armrecoveryservices.VaultPropertiesEncryption{
					InfrastructureEncryption: to.Ptr(armrecoveryservices.InfrastructureEncryptionStateEnabled),
					KekIdentity: &armrecoveryservices.CmkKekIdentity{
						UseSystemAssignedIdentity: to.Ptr(false),
						UserAssignedIdentity:      to.Ptr("/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi"),
					},
					KeyVaultProperties: &armrecoveryservices.CmkKeyVaultProperties{
						KeyURI: to.Ptr("https://cmk2xkv.vault.azure.net/keys/Key1/0767b348bb1a4c07baa6c4ec0055d2b3"),
					},
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
			SKU: &armrecoveryservices.SKU{
				Name: to.Ptr(armrecoveryservices.SKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Vault) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Vault)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PUTVault_WithCMK.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PUTVault_WithUserAssignedIdentity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update Vault with User Assigned Identity"},
	})
	client = armrecoveryservices.NewVaultsClient("77777777-b0c6-47a2-b37c-d8e65a629c18", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-RecoveryServices-ResourceGroup",
		"swaggerExample",
		armrecoveryservices.Vault{
			Location: to.Ptr("West US"),
			Identity: &armrecoveryservices.IdentityData{
				Type: to.Ptr(armrecoveryservices.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armrecoveryservices.UserIdentity{
					"/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi": {},
				},
			},
			Properties: &armrecoveryservices.VaultProperties{},
			SKU: &armrecoveryservices.SKU{
				Name: to.Ptr(armrecoveryservices.SKUNameStandard),
			},
		},
		&armrecoveryservices.VaultsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PUTVault_WithUserAssignedIdentity.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PUTVault_WithUserAssignedIdentity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservices.Vault{
			Name:     to.Ptr("swaggerExample"),
			Type:     to.Ptr("Microsoft.RecoveryServices/vaults"),
			Etag:     to.Ptr("W/\"datetime'2017-12-15T12%3A36%3A51.68Z'\""),
			ID:       to.Ptr("/subscriptions/77777777-b0c6-47a2-b37c-d8e65a629c18/resourceGroups/Default-RecoveryServices-ResourceGroup/providers/Microsoft.RecoveryServices/vaults/swaggerExample"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"TestUpdatedKey": to.Ptr("TestUpdatedValue"),
			},
			Identity: &armrecoveryservices.IdentityData{
				Type: to.Ptr(armrecoveryservices.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armrecoveryservices.UserIdentity{
					"/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi": {
						ClientID:    to.Ptr("fbe75b66-01c5-4f87-a220-233af3270436"),
						PrincipalID: to.Ptr("075a0ca6-43f6-4434-9abf-c9b1b79f9219"),
					},
				},
			},
			Properties: &armrecoveryservices.VaultProperties{
				ProvisioningState: to.Ptr("Succeeded"),
			},
			SKU: &armrecoveryservices.SKU{
				Name: to.Ptr(armrecoveryservices.SKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Vault) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Vault)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PUTVault_WithUserAssignedIdentity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVaults_Delete(t *testing.T) {
	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/DeleteVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Recovery Services Vault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservices.NewVaultsClient("77777777-b0c6-47a2-b37c-d8e65a629c18", cred, &options)
	_, err := client.Delete(ctx,
		"Default-RecoveryServices-ResourceGroup",
		"swaggerExample",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/DeleteVault.json: %v", err)
	}
}

func TestVaults_Update(t *testing.T) {
	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PATCHVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservices.NewVaultsClient("77777777-b0c6-47a2-b37c-d8e65a629c18", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"HelloWorld",
		"swaggerExample",
		armrecoveryservices.PatchVault{
			Tags: map[string]*string{
				"PatchKey": to.Ptr("PatchKeyUpdated"),
			},
		},
		&armrecoveryservices.VaultsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PATCHVault.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PATCHVault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservices.Vault{
			Name:     to.Ptr("swaggerExample"),
			Type:     to.Ptr("Microsoft.RecoveryServices/vaults"),
			Etag:     to.Ptr("W/\"datetime'2017-12-15T12%3A36%3A51.68Z'\""),
			ID:       to.Ptr("/subscriptions/77777777-b0c6-47a2-b37c-d8e65a629c18/resourceGroups/HelloWorld/providers/Microsoft.RecoveryServices/vaults/swaggerExample"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"PatchKey": to.Ptr("PatchKeyUpdated"),
			},
			Properties: &armrecoveryservices.VaultProperties{
				ProvisioningState: to.Ptr("Succeeded"),
			},
			SKU: &armrecoveryservices.SKU{
				Name: to.Ptr(armrecoveryservices.SKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Vault) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Vault)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PATCHVault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PATCHVault_WithCMK.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Resource With CustomerManagedKeys"},
	})
	client = armrecoveryservices.NewVaultsClient("77777777-b0c6-47a2-b37c-d8e65a629c18", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"HelloWorld",
		"swaggerExample",
		armrecoveryservices.PatchVault{
			Tags: map[string]*string{
				"PatchKey": to.Ptr("PatchKeyUpdated"),
			},
			Identity: &armrecoveryservices.IdentityData{
				Type: to.Ptr(armrecoveryservices.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armrecoveryservices.UserIdentity{
					"/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi": {},
				},
			},
			Properties: &armrecoveryservices.VaultProperties{
				Encryption: &armrecoveryservices.VaultPropertiesEncryption{
					InfrastructureEncryption: to.Ptr(armrecoveryservices.InfrastructureEncryptionStateEnabled),
					KekIdentity: &armrecoveryservices.CmkKekIdentity{
						UserAssignedIdentity: to.Ptr("/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi"),
					},
					KeyVaultProperties: &armrecoveryservices.CmkKeyVaultProperties{
						KeyURI: to.Ptr("https://cmk2xkv.vault.azure.net/keys/Key1/0767b348bb1a4c07baa6c4ec0055d2b3"),
					},
				},
			},
		},
		&armrecoveryservices.VaultsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PATCHVault_WithCMK.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PATCHVault_WithCMK.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservices.Vault{
			Name:     to.Ptr("swaggerExample"),
			Type:     to.Ptr("Microsoft.RecoveryServices/vaults"),
			Etag:     to.Ptr("W/\"datetime'2017-12-15T12%3A36%3A51.68Z'\""),
			ID:       to.Ptr("/subscriptions/77777777-b0c6-47a2-b37c-d8e65a629c18/resourceGroups/HelloWorld/providers/Microsoft.RecoveryServices/vaults/swaggerExample"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"PatchKey": to.Ptr("PatchKeyUpdated"),
			},
			Identity: &armrecoveryservices.IdentityData{
				Type: to.Ptr(armrecoveryservices.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armrecoveryservices.UserIdentity{
					"/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi": {
						ClientID:    to.Ptr("fbe75b66-01c5-4f87-a220-233af3270436"),
						PrincipalID: to.Ptr("075a0ca6-43f6-4434-9abf-c9b1b79f9219"),
					},
				},
			},
			Properties: &armrecoveryservices.VaultProperties{
				Encryption: &armrecoveryservices.VaultPropertiesEncryption{
					InfrastructureEncryption: to.Ptr(armrecoveryservices.InfrastructureEncryptionStateEnabled),
					KekIdentity: &armrecoveryservices.CmkKekIdentity{
						UseSystemAssignedIdentity: to.Ptr(false),
						UserAssignedIdentity:      to.Ptr("/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi"),
					},
					KeyVaultProperties: &armrecoveryservices.CmkKeyVaultProperties{
						KeyURI: to.Ptr("https://cmk2xkv.vault.azure.net/keys/Key1/0767b348bb1a4c07baa6c4ec0055d2b3"),
					},
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
			SKU: &armrecoveryservices.SKU{
				Name: to.Ptr(armrecoveryservices.SKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Vault) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Vault)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PATCHVault_WithCMK.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PatchVault_WithCMK2.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Resource With CustomerManagedKeys2"},
	})
	client = armrecoveryservices.NewVaultsClient("77777777-b0c6-47a2-b37c-d8e65a629c18", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"HelloWorld",
		"swaggerExample",
		armrecoveryservices.PatchVault{
			Tags: map[string]*string{
				"PatchKey": to.Ptr("PatchKeyUpdated"),
			},
			Identity: &armrecoveryservices.IdentityData{
				Type: to.Ptr(armrecoveryservices.ResourceIdentityTypeSystemAssigned),
			},
			Properties: &armrecoveryservices.VaultProperties{
				Encryption: &armrecoveryservices.VaultPropertiesEncryption{
					KekIdentity: &armrecoveryservices.CmkKekIdentity{
						UseSystemAssignedIdentity: to.Ptr(true),
					},
				},
			},
		},
		&armrecoveryservices.VaultsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PatchVault_WithCMK2.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PatchVault_WithCMK2.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservices.Vault{
			Name:     to.Ptr("swaggerExample"),
			Type:     to.Ptr("Microsoft.RecoveryServices/vaults"),
			Etag:     to.Ptr("W/\"datetime'2017-12-15T12%3A36%3A51.68Z'\""),
			ID:       to.Ptr("/subscriptions/77777777-b0c6-47a2-b37c-d8e65a629c18/resourceGroups/HelloWorld/providers/Microsoft.RecoveryServices/vaults/swaggerExample"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"PatchKey": to.Ptr("PatchKeyUpdated"),
			},
			Identity: &armrecoveryservices.IdentityData{
				Type: to.Ptr(armrecoveryservices.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armrecoveryservices.UserIdentity{
					"/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi": {
						ClientID:    to.Ptr("fbe75b66-01c5-4f87-a220-233af3270436"),
						PrincipalID: to.Ptr("075a0ca6-43f6-4434-9abf-c9b1b79f9219"),
					},
				},
			},
			Properties: &armrecoveryservices.VaultProperties{
				Encryption: &armrecoveryservices.VaultPropertiesEncryption{
					InfrastructureEncryption: to.Ptr(armrecoveryservices.InfrastructureEncryptionStateEnabled),
					KekIdentity: &armrecoveryservices.CmkKekIdentity{
						UseSystemAssignedIdentity: to.Ptr(true),
					},
					KeyVaultProperties: &armrecoveryservices.CmkKeyVaultProperties{
						KeyURI: to.Ptr("https://cmk2xkv.vault.azure.net/keys/Key1/0767b348bb1a4c07baa6c4ec0055d2b3"),
					},
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
			SKU: &armrecoveryservices.SKU{
				Name: to.Ptr(armrecoveryservices.SKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Vault) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Vault)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PatchVault_WithCMK2.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PATCHVault_WithCMK3.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Resource With CustomerManagedKeys3"},
	})
	client = armrecoveryservices.NewVaultsClient("77777777-b0c6-47a2-b37c-d8e65a629c18", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"HelloWorld",
		"swaggerExample",
		armrecoveryservices.PatchVault{
			Tags: map[string]*string{
				"PatchKey": to.Ptr("PatchKeyUpdated"),
			},
			Identity: &armrecoveryservices.IdentityData{
				Type: to.Ptr(armrecoveryservices.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armrecoveryservices.UserIdentity{
					"/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi": {},
				},
			},
			Properties: &armrecoveryservices.VaultProperties{
				Encryption: &armrecoveryservices.VaultPropertiesEncryption{
					KeyVaultProperties: &armrecoveryservices.CmkKeyVaultProperties{
						KeyURI: to.Ptr("https://cmk2xkv.vault.azure.net/keys/Key1/0767b348bb1a4c07baa6c4ec0055d2b3"),
					},
				},
			},
		},
		&armrecoveryservices.VaultsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PATCHVault_WithCMK3.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PATCHVault_WithCMK3.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservices.Vault{
			Name:     to.Ptr("swaggerExample"),
			Type:     to.Ptr("Microsoft.RecoveryServices/vaults"),
			Etag:     to.Ptr("W/\"datetime'2017-12-15T12%3A36%3A51.68Z'\""),
			ID:       to.Ptr("/subscriptions/77777777-b0c6-47a2-b37c-d8e65a629c18/resourceGroups/HelloWorld/providers/Microsoft.RecoveryServices/vaults/swaggerExample"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"PatchKey": to.Ptr("PatchKeyUpdated"),
			},
			Identity: &armrecoveryservices.IdentityData{
				Type: to.Ptr(armrecoveryservices.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armrecoveryservices.UserIdentity{
					"/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi": {
						ClientID:    to.Ptr("fbe75b66-01c5-4f87-a220-233af3270436"),
						PrincipalID: to.Ptr("075a0ca6-43f6-4434-9abf-c9b1b79f9219"),
					},
				},
			},
			Properties: &armrecoveryservices.VaultProperties{
				Encryption: &armrecoveryservices.VaultPropertiesEncryption{
					InfrastructureEncryption: to.Ptr(armrecoveryservices.InfrastructureEncryptionStateEnabled),
					KekIdentity: &armrecoveryservices.CmkKekIdentity{
						UseSystemAssignedIdentity: to.Ptr(false),
						UserAssignedIdentity:      to.Ptr("/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi"),
					},
					KeyVaultProperties: &armrecoveryservices.CmkKeyVaultProperties{
						KeyURI: to.Ptr("https://cmk2xkv.vault.azure.net/keys/Key1/0767b348bb1a4c07baa6c4ec0055d2b3"),
					},
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
			SKU: &armrecoveryservices.SKU{
				Name: to.Ptr(armrecoveryservices.SKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Vault) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Vault)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PATCHVault_WithCMK3.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PATCHVault_WithUserAssignedIdentity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Resource With User Assigned Identity"},
	})
	client = armrecoveryservices.NewVaultsClient("77777777-b0c6-47a2-b37c-d8e65a629c18", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"HelloWorld",
		"swaggerExample",
		armrecoveryservices.PatchVault{
			Tags: map[string]*string{
				"PatchKey": to.Ptr("PatchKeyUpdated"),
			},
			Identity: &armrecoveryservices.IdentityData{
				Type: to.Ptr(armrecoveryservices.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armrecoveryservices.UserIdentity{
					"/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi": {},
				},
			},
		},
		&armrecoveryservices.VaultsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PATCHVault_WithUserAssignedIdentity.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PATCHVault_WithUserAssignedIdentity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservices.Vault{
			Name:     to.Ptr("swaggerExample"),
			Type:     to.Ptr("Microsoft.RecoveryServices/vaults"),
			Etag:     to.Ptr("W/\"datetime'2017-12-15T12%3A36%3A51.68Z'\""),
			ID:       to.Ptr("/subscriptions/77777777-b0c6-47a2-b37c-d8e65a629c18/resourceGroups/HelloWorld/providers/Microsoft.RecoveryServices/vaults/swaggerExample"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"PatchKey": to.Ptr("PatchKeyUpdated"),
			},
			Identity: &armrecoveryservices.IdentityData{
				Type: to.Ptr(armrecoveryservices.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armrecoveryservices.UserIdentity{
					"/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi": {
						ClientID:    to.Ptr("fbe75b66-01c5-4f87-a220-233af3270436"),
						PrincipalID: to.Ptr("075a0ca6-43f6-4434-9abf-c9b1b79f9219"),
					},
				},
			},
			Properties: &armrecoveryservices.VaultProperties{
				ProvisioningState: to.Ptr("Succeeded"),
			},
			SKU: &armrecoveryservices.SKU{
				Name: to.Ptr(armrecoveryservices.SKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Vault) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Vault)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/PATCHVault_WithUserAssignedIdentity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/ListOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListOperations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservices.NewOperationsClient("<subscription-id>", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/ListOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservices.ClientDiscoveryResponse{
			Value: []*armrecoveryservices.ClientDiscoveryValueForSingleAPI{
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/usages/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns usage details for a Recovery Services Vault."),
						Operation:   to.Ptr("Recovery Services Vault usage details."),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Vault Usage"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupUsageSummaries/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns summaries for Protected Items and Protected Servers for a Recovery Services ."),
						Operation:   to.Ptr("Recovery Services Protected Items and Protected Servers usage summaries details."),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Usages Summaries"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/storageConfig/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns Storage Configuration for Recovery Services Vault."),
						Operation:   to.Ptr("Get Resource Storage Config"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Vault Storage Config"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/storageConfig/write"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Updates Storage Configuration for Recovery Services Vault."),
						Operation:   to.Ptr("Write Resource Storage Config"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Vault Storage Config"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupconfig/vaultconfig/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns Configuration for Recovery Services Vault."),
						Operation:   to.Ptr("Get Resource Config"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Vault Config"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupconfig/vaultconfig/write"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Updates Configuration for Recovery Services Vault."),
						Operation:   to.Ptr("Update Resource Config"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Vault Config"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/tokenInfo/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns token information for Recovery Services Vault."),
						Operation:   to.Ptr("Get Vault Token Info"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Token Info"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupSecurityPIN/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns Security PIN Information for Recovery Services Vault."),
						Operation:   to.Ptr("Get Security PIN Info"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("SecurityPINInfo"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupManagementMetaData/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns Backup Management Metadata for Recovery Services Vault."),
						Operation:   to.Ptr("Get Backup Management Metadata"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Management Metadata"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupOperationResults/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns Backup Operation Result for Recovery Services Vault."),
						Operation:   to.Ptr("Get Backup Operation Result"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Operation Results"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupOperations/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns Backup Operation Status for Recovery Services Vault."),
						Operation:   to.Ptr("Get Backup Operation Status"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Operation Status"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupJobs/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns all Job Objects"),
						Operation:   to.Ptr("Get Jobs"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Jobs"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupJobs/cancel/action"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Cancel the Job"),
						Operation:   to.Ptr("Cancel Jobs"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Jobs"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupJobsExport/action"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Export Jobs"),
						Operation:   to.Ptr("Export Jobs"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Export Backup Jobs"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupJobs/operationResults/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns the Result of Job Operation."),
						Operation:   to.Ptr("Get Job Operation Result"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Jobs Operation Results"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupJobsExport/operationResults/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns the Result of Export Job Operation."),
						Operation:   to.Ptr("Get Export Job Operation Result"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Export Backup Jobs Operation Results"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Get Recovery Points for Protected Items."),
						Operation:   to.Ptr("Get Recovery Points"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Recovery Points"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints/restore/action"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Restore Recovery Points for Protected Items."),
						Operation:   to.Ptr("Restore Recovery Points"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Recovery Points"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints/provisionInstantItemRecovery/action"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Provision Instant Item Recovery for Protected Item"),
						Operation:   to.Ptr("Provision Instant Item Recovery for Protected Item"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Recovery Points"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints/revokeInstantItemRecovery/action"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Revoke Instant Item Recovery for Protected Item"),
						Operation:   to.Ptr("Revoke Instant Item Recovery for Protected Item"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Recovery Points"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupPolicies/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns all Protection Policies"),
						Operation:   to.Ptr("Get Protection Policy"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Policies"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupPolicies/write"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Creates Protection Policy"),
						Operation:   to.Ptr("Create Protection Policy"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Policies"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupPolicies/delete"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Delete a Protection Policy"),
						Operation:   to.Ptr("Delete Protection Policy"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Policies"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupPolicies/operationResults/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Get Results of Policy Operation."),
						Operation:   to.Ptr("Get Policy Operation Results"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Policy Operation Results"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupPolicies/operationsStatus/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Get Status of Policy Operation."),
						Operation:   to.Ptr("Get Policy Operation Status"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Policy Operation Status"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/protectedItems/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns object details of the Protected Item"),
						Operation:   to.Ptr("Get Protected Item Details"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupProtectedItems/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns the list of all Protected Items."),
						Operation:   to.Ptr("Get All Protected Items"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/protectedItems/write"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Create a backup Protected Item"),
						Operation:   to.Ptr("Create Backup Protected Item"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/protectedItems/delete"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Deletes Protected Item"),
						Operation:   to.Ptr("Delete Protected Items"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/protectedItems/operationResults/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Gets Result of Operation Performed on Protected Items."),
						Operation:   to.Ptr("Get Protected Items Operation Results"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Protected Item Operation Results"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/protectedItems/operationsStatus/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns the status of Operation performed on Protected Items."),
						Operation:   to.Ptr("Get Protected Items operation status"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Protected Item Operation Status"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/protectedItems/backup/action"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Performs Backup for Protected Item."),
						Operation:   to.Ptr("Backup Protected Item"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupProtectableItems/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns list of all Protectable Items."),
						Operation:   to.Ptr("Get Protectable Items"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Protectable Items"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/refreshContainers/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Refreshes the container list"),
						Operation:   to.Ptr("Refresh container"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Refresh Containers"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/operationResults/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns status of the operation"),
						Operation:   to.Ptr("Get Operation Results"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Refresh Containers Operation Results"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupProtectionContainers/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns all containers belonging to the subscription"),
						Operation:   to.Ptr("Get Containers In Subscription"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Protection Containers"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns all registered containers"),
						Operation:   to.Ptr("Get Registered Container"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Protection Containers"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/operationResults/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Gets result of Operation performed on Protection Container."),
						Operation:   to.Ptr("Get Container Operation Results"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Protection Containers Operation Results"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupEngines"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns all the backup management servers registered with vault."),
						Operation:   to.Ptr("List of backup management servers."),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Engines"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupStatus"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Check Backup Status for Recovery Services Vaults"),
						Operation:   to.Ptr("Check Backup Status for Vault"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Status"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupPreValidateProtection"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr(""),
						Operation:   to.Ptr("Pre Validate Enable Protection"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("PreValidate Protection"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupValidateFeatures"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Validate Features"),
						Operation:   to.Ptr("Validate Features"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Validate Features"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/backupProtectionIntent/write"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Create a backup Protection Intent"),
						Operation:   to.Ptr("Create backup Protection Intent"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Protection Intent"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/{fabricName}/protectionContainers/{containerName}/items/read"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Get all items in a container"),
						Operation:   to.Ptr("Get all items in a container"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Workload Items"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/inquire/action"),
					Display: &armrecoveryservices.ClientDiscoveryDisplay{
						Description: to.Ptr("Get all items in a container"),
						Operation:   to.Ptr("Get all items in a container"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Protection Containers Inquire"),
					},
					Origin: to.Ptr("user"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ClientDiscoveryResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ClientDiscoveryResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/ListOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_OperationStatusGet(t *testing.T) {
	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/GetOperationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Operation Status"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservices.NewOperationsClient("77777777-b0c6-47a2-b37c-d8e65a629c18", cred, &options)
	res, err := client.OperationStatusGet(ctx,
		"HelloWorld",
		"swaggerExample",
		"YWUzNDFkMzQtZmM5OS00MmUyLWEzNDMtZGJkMDIxZjlmZjgzOzdmYzBiMzhmLTc2NmItNDM5NS05OWQ1LTVmOGEzNzg4MWQzNA==",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/GetOperationStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservices.OperationResource{
			Name:      to.Ptr("YWUzNDFkMzQtZmM5OS00MmUyLWEzNDMtZGJkMDIxZjlmZjgzOzdmYzBiMzhmLTc2NmItNDM5NS05OWQ1LTVmOGEzNzg4MWQzNA=="),
			EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-20T09:49:46Z"); return t }()),
			ID:        to.Ptr("/subscriptions/77777777-b0c6-47a2-b37c-d8e65a629c18/resourceGroups/HelloWorld/providers/Microsoft.RecoveryServices/vaults/swaggerExample/operationStatus/YWUzNDFkMzQtZmM5OS00MmUyLWEzNDMtZGJkMDIxZjlmZjgzOzdmYzBiMzhmLTc2NmItNDM5NS05OWQ1LTVmOGEzNzg4MWQzNA=="),
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-20T09:49:44.0478496Z"); return t }()),
			Status:    to.Ptr("Succeeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/GetOperationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_GetOperationResult(t *testing.T) {
	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/GetOperationResult.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Operation Result"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservices.NewOperationsClient("77777777-b0c6-47a2-b37c-d8e65a629c18", cred, &options)
	res, err := client.GetOperationResult(ctx,
		"HelloWorld",
		"swaggerExample",
		"YWUzNDFkMzQtZmM5OS00MmUyLWEzNDMtZGJkMDIxZjlmZjgzOzdmYzBiMzhmLTc2NmItNDM5NS05OWQ1LTVmOGEzNzg4MWQzNA==",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/GetOperationResult.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservices.Vault{
			Name:     to.Ptr("swaggerExample"),
			Type:     to.Ptr("Microsoft.RecoveryServices/vaults"),
			Etag:     to.Ptr("W/\"datetime'2017-12-15T12%3A36%3A51.68Z'\""),
			ID:       to.Ptr("/subscriptions/77777777-b0c6-47a2-b37c-d8e65a629c18/resourceGroups/HelloWorld/providers/Microsoft.RecoveryServices/vaults/swaggerExample"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"PatchKey": to.Ptr("PatchKeyUpdated"),
			},
			Identity: &armrecoveryservices.IdentityData{
				Type: to.Ptr(armrecoveryservices.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armrecoveryservices.UserIdentity{
					"/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi": {
						ClientID:    to.Ptr("fbe75b66-01c5-4f87-a220-233af3270436"),
						PrincipalID: to.Ptr("075a0ca6-43f6-4434-9abf-c9b1b79f9219"),
					},
				},
			},
			Properties: &armrecoveryservices.VaultProperties{
				ProvisioningState: to.Ptr("Succeeded"),
			},
			SKU: &armrecoveryservices.SKU{
				Name: to.Ptr(armrecoveryservices.SKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Vault) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Vault)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/GetOperationResult.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVaultExtendedInfo_Get(t *testing.T) {
	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/GETVaultExtendedInfo.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get ExtendedInfo of Resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservices.NewVaultExtendedInfoClient("77777777-b0c6-47a2-b37c-d8e65a629c18", cred, &options)
	res, err := client.Get(ctx,
		"Default-RecoveryServices-ResourceGroup",
		"swaggerExample",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/GETVaultExtendedInfo.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservices.VaultExtendedInfoResource{
			Name: to.Ptr("vaultExtendedInfo"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/extendedInformation"),
			Etag: to.Ptr("f0d0260b-b92d-4458-ba0a-32c6cdabacb7"),
			ID:   to.Ptr("/subscriptions/77777777-b0c6-47a2-b37c-d8e65a629c18/resourceGroups/Default-RecoveryServices-ResourceGroup/providers/Microsoft.RecoveryServices/vaults/swaggerExample/extendedInformation/vaultExtendedInfo"),
			Properties: &armrecoveryservices.VaultExtendedInfo{
				Algorithm:    to.Ptr("None"),
				IntegrityKey: to.Ptr("J09wzS27fnJ+Wjot7xO5wA=="),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VaultExtendedInfoResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VaultExtendedInfoResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/GETVaultExtendedInfo.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVaultExtendedInfo_CreateOrUpdate(t *testing.T) {
	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/UpdateVaultExtendedInfo.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put ExtendedInfo of Resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservices.NewVaultExtendedInfoClient("77777777-b0c6-47a2-b37c-d8e65a629c18", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"Default-RecoveryServices-ResourceGroup",
		"swaggerExample",
		armrecoveryservices.VaultExtendedInfoResource{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/UpdateVaultExtendedInfo.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservices.VaultExtendedInfoResource{
			Name: to.Ptr("vaultExtendedInfo"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/extendedInformation"),
			Etag: to.Ptr("f0d0260b-b92d-4458-ba0a-32c6cdabacb7"),
			ID:   to.Ptr("/subscriptions/77777777-b0c6-47a2-b37c-d8e65a629c18/resourceGroups/Default-RecoveryServices-ResourceGroup/providers/Microsoft.RecoveryServices/vaults/swaggerExample/extendedInformation/vaultExtendedInfo"),
			Properties: &armrecoveryservices.VaultExtendedInfo{
				Algorithm:    to.Ptr("None"),
				IntegrityKey: to.Ptr("J99wzS27fmJ+Wjot7xO5wA=="),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VaultExtendedInfoResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VaultExtendedInfoResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/UpdateVaultExtendedInfo.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVaultExtendedInfo_Update(t *testing.T) {
	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/UpdateVaultExtendedInfo.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PATCH ExtendedInfo of Resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservices.NewVaultExtendedInfoClient("77777777-b0c6-47a2-b37c-d8e65a629c18", cred, &options)
	res, err := client.Update(ctx,
		"Default-RecoveryServices-ResourceGroup",
		"swaggerExample",
		armrecoveryservices.VaultExtendedInfoResource{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/UpdateVaultExtendedInfo.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservices.VaultExtendedInfoResource{
			Name: to.Ptr("vaultExtendedInfo"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/extendedInformation"),
			Etag: to.Ptr("f0d0260b-b92d-4458-ba0a-32c6cdabacb7"),
			ID:   to.Ptr("/subscriptions/77777777-b0c6-47a2-b37c-d8e65a629c18/resourceGroups/Default-RecoveryServices-ResourceGroup/providers/Microsoft.RecoveryServices/vaults/swaggerExample/extendedInformation/vaultExtendedInfo"),
			Properties: &armrecoveryservices.VaultExtendedInfo{
				Algorithm:    to.Ptr("None"),
				IntegrityKey: to.Ptr("J99wzS27fmJ+Wjot7xO5wA=="),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VaultExtendedInfoResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VaultExtendedInfoResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/UpdateVaultExtendedInfo.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUsages_ListByVaults(t *testing.T) {
	// From example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/ListUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets vault usages"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservices.NewUsagesClient("77777777-b0c6-47a2-b37c-d8e65a629c18", cred, &options)
	pager := client.ListByVaults("Default-RecoveryServices-ResourceGroup",
		"swaggerExample",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/ListUsages.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservices.VaultUsageList{
			Value: []*armrecoveryservices.VaultUsage{
				{
					Name: &armrecoveryservices.NameInfo{
						LocalizedValue: to.Ptr("Backup management servers"),
						Value:          to.Ptr("MABContainersCount"),
					},
					CurrentValue: to.Ptr[int64](6),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservices.UsagesUnitCount),
				},
				{
					Name: &armrecoveryservices.NameInfo{
						LocalizedValue: to.Ptr("Backup items/Azure virtual machine backup"),
						Value:          to.Ptr("ProtectedItemCount"),
					},
					CurrentValue: to.Ptr[int64](3),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservices.UsagesUnitCount),
				},
				{
					Name: &armrecoveryservices.NameInfo{
						LocalizedValue: to.Ptr("Critical"),
						Value:          to.Ptr("ProtectedItemCriticalCount"),
					},
					CurrentValue: to.Ptr[int64](0),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservices.UsagesUnitCount),
				},
				{
					Name: &armrecoveryservices.NameInfo{
						LocalizedValue: to.Ptr("Warning"),
						Value:          to.Ptr("ProtectedItemWarningCount"),
					},
					CurrentValue: to.Ptr[int64](0),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservices.UsagesUnitCount),
				},
				{
					Name: &armrecoveryservices.NameInfo{
						LocalizedValue: to.Ptr("Azure Virtual Machines"),
						Value:          to.Ptr("IaaSVMProtectedItemCount"),
					},
					CurrentValue: to.Ptr[int64](0),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservices.UsagesUnitCount),
				},
				{
					Name: &armrecoveryservices.NameInfo{
						LocalizedValue: to.Ptr("Critical"),
						Value:          to.Ptr("IaaSVMProtectedItemCriticalCount"),
					},
					CurrentValue: to.Ptr[int64](0),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservices.UsagesUnitCount),
				},
				{
					Name: &armrecoveryservices.NameInfo{
						LocalizedValue: to.Ptr("Warning"),
						Value:          to.Ptr("IaaSVMProtectedItemWarningCount"),
					},
					CurrentValue: to.Ptr[int64](0),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservices.UsagesUnitCount),
				},
				{
					Name: &armrecoveryservices.NameInfo{
						LocalizedValue: to.Ptr("File-Folders"),
						Value:          to.Ptr("MABProtectedItemCount"),
					},
					CurrentValue: to.Ptr[int64](0),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservices.UsagesUnitCount),
				},
				{
					Name: &armrecoveryservices.NameInfo{
						LocalizedValue: to.Ptr("DPM Protected Items Count"),
						Value:          to.Ptr("DPMProtectedItemCount"),
					},
					CurrentValue: to.Ptr[int64](1),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservices.UsagesUnitCount),
				},
				{
					Name: &armrecoveryservices.NameInfo{
						LocalizedValue: to.Ptr("Azure Backup Server Protected Items Count"),
						Value:          to.Ptr("AzureBackupServerProtectedItemCount"),
					},
					CurrentValue: to.Ptr[int64](2),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservices.UsagesUnitCount),
				},
				{
					Name: &armrecoveryservices.NameInfo{
						LocalizedValue: to.Ptr("In progress"),
						Value:          to.Ptr("InProgressJobsCount"),
					},
					CurrentValue: to.Ptr[int64](0),
					Limit:        to.Ptr[int64](-1),
					QuotaPeriod:  to.Ptr("P1D"),
					Unit:         to.Ptr(armrecoveryservices.UsagesUnitCount),
				},
				{
					Name: &armrecoveryservices.NameInfo{
						LocalizedValue: to.Ptr("Failed"),
						Value:          to.Ptr("FailedJobsCount"),
					},
					CurrentValue: to.Ptr[int64](0),
					Limit:        to.Ptr[int64](-1),
					QuotaPeriod:  to.Ptr("P1D"),
					Unit:         to.Ptr(armrecoveryservices.UsagesUnitCount),
				},
				{
					Name: &armrecoveryservices.NameInfo{
						LocalizedValue: to.Ptr("Cloud - GRS"),
						Value:          to.Ptr("GRSStorageUsage"),
					},
					CurrentValue: to.Ptr[int64](117007930),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservices.UsagesUnitBytes),
				},
				{
					Name: &armrecoveryservices.NameInfo{
						LocalizedValue: to.Ptr("Cloud - LRS"),
						Value:          to.Ptr("LRSStorageUsage"),
					},
					CurrentValue: to.Ptr[int64](0),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservices.UsagesUnitBytes),
				},
				{
					Name: &armrecoveryservices.NameInfo{
						LocalizedValue: to.Ptr("Protected Instances"),
						Value:          to.Ptr("ManagedInstances"),
					},
					CurrentValue: to.Ptr[int64](5),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservices.UsagesUnitCount),
				},
				{
					Name: &armrecoveryservices.NameInfo{
						LocalizedValue: to.Ptr("Dedup - GRS"),
						Value:          to.Ptr("GRSDedupStorageUsage"),
					},
					CurrentValue: to.Ptr[int64](0),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservices.UsagesUnitBytes),
				},
				{
					Name: &armrecoveryservices.NameInfo{
						LocalizedValue: to.Ptr("Dedup - LRS"),
						Value:          to.Ptr("LRSDedupStorageUsage"),
					},
					CurrentValue: to.Ptr[int64](0),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservices.UsagesUnitBytes),
				},
				{
					Name: &armrecoveryservices.NameInfo{
						LocalizedValue: to.Ptr("Backup Engines' Disk Used"),
						Value:          to.Ptr("UsedDiskSize"),
					},
					CurrentValue: to.Ptr[int64](117851553792),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservices.UsagesUnitBytes),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VaultUsageList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VaultUsageList)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/preview/2021-11-01-preview/examples/ListUsages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
