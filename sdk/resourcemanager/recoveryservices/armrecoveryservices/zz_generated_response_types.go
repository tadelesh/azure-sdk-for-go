//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecoveryservices

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"time"
)

// ClientCheckNameAvailabilityResponse contains the response from method Client.CheckNameAvailability.
type ClientCheckNameAvailabilityResponse struct {
	CheckNameAvailabilityResult
}

// OperationsClientGetOperationResultResponse contains the response from method OperationsClient.GetOperationResult.
type OperationsClientGetOperationResultResponse struct {
	Vault
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	ClientDiscoveryResponse
}

// OperationsClientOperationStatusGetResponse contains the response from method OperationsClient.OperationStatusGet.
type OperationsClientOperationStatusGetResponse struct {
	OperationResource
}

// PrivateLinkResourcesClientGetResponse contains the response from method PrivateLinkResourcesClient.Get.
type PrivateLinkResourcesClientGetResponse struct {
	PrivateLinkResource
}

// PrivateLinkResourcesClientListResponse contains the response from method PrivateLinkResourcesClient.List.
type PrivateLinkResourcesClientListResponse struct {
	PrivateLinkResources
}

// RegisteredIdentitiesClientDeleteResponse contains the response from method RegisteredIdentitiesClient.Delete.
type RegisteredIdentitiesClientDeleteResponse struct {
	// placeholder for future response values
}

// ReplicationUsagesClientListResponse contains the response from method ReplicationUsagesClient.List.
type ReplicationUsagesClientListResponse struct {
	ReplicationUsageList
}

// UsagesClientListByVaultsResponse contains the response from method UsagesClient.ListByVaults.
type UsagesClientListByVaultsResponse struct {
	VaultUsageList
}

// VaultCertificatesClientCreateResponse contains the response from method VaultCertificatesClient.Create.
type VaultCertificatesClientCreateResponse struct {
	VaultCertificateResponse
}

// VaultExtendedInfoClientCreateOrUpdateResponse contains the response from method VaultExtendedInfoClient.CreateOrUpdate.
type VaultExtendedInfoClientCreateOrUpdateResponse struct {
	VaultExtendedInfoResource
}

// VaultExtendedInfoClientGetResponse contains the response from method VaultExtendedInfoClient.Get.
type VaultExtendedInfoClientGetResponse struct {
	VaultExtendedInfoResource
}

// VaultExtendedInfoClientUpdateResponse contains the response from method VaultExtendedInfoClient.Update.
type VaultExtendedInfoClientUpdateResponse struct {
	VaultExtendedInfoResource
}

// VaultsClientCreateOrUpdatePollerResponse contains the response from method VaultsClient.CreateOrUpdate.
type VaultsClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VaultsClientCreateOrUpdatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l VaultsClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VaultsClientCreateOrUpdateResponse, error) {
	respType := VaultsClientCreateOrUpdateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Vault)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a VaultsClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *VaultsClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *VaultsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("VaultsClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &VaultsClientCreateOrUpdatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// VaultsClientCreateOrUpdateResponse contains the response from method VaultsClient.CreateOrUpdate.
type VaultsClientCreateOrUpdateResponse struct {
	Vault
}

// VaultsClientDeleteResponse contains the response from method VaultsClient.Delete.
type VaultsClientDeleteResponse struct {
	// placeholder for future response values
}

// VaultsClientGetResponse contains the response from method VaultsClient.Get.
type VaultsClientGetResponse struct {
	Vault
}

// VaultsClientListByResourceGroupResponse contains the response from method VaultsClient.ListByResourceGroup.
type VaultsClientListByResourceGroupResponse struct {
	VaultList
}

// VaultsClientListBySubscriptionIDResponse contains the response from method VaultsClient.ListBySubscriptionID.
type VaultsClientListBySubscriptionIDResponse struct {
	VaultList
}

// VaultsClientUpdatePollerResponse contains the response from method VaultsClient.Update.
type VaultsClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VaultsClientUpdatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l VaultsClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VaultsClientUpdateResponse, error) {
	respType := VaultsClientUpdateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Vault)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a VaultsClientUpdatePollerResponse from the provided client and resume token.
func (l *VaultsClientUpdatePollerResponse) Resume(ctx context.Context, client *VaultsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("VaultsClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &VaultsClientUpdatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// VaultsClientUpdateResponse contains the response from method VaultsClient.Update.
type VaultsClientUpdateResponse struct {
	Vault
}
