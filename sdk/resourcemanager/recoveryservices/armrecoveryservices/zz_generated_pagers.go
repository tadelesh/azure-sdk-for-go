//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecoveryservices

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ClientDiscoveryResponse.NextLink == nil || len(*p.current.ClientDiscoveryResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateLinkResourcesClientListPager provides operations for iterating over paged responses.
type PrivateLinkResourcesClientListPager struct {
	client    *PrivateLinkResourcesClient
	current   PrivateLinkResourcesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkResourcesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateLinkResourcesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkResources.NextLink == nil || len(*p.current.PrivateLinkResources.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateLinkResourcesClientListPager) NextPage(ctx context.Context) (PrivateLinkResourcesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateLinkResourcesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateLinkResourcesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateLinkResourcesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateLinkResourcesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return PrivateLinkResourcesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ReplicationUsagesClientListPager provides operations for iterating over paged responses.
type ReplicationUsagesClientListPager struct {
	client    *ReplicationUsagesClient
	current   ReplicationUsagesClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ReplicationUsagesClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ReplicationUsagesClientListPager) NextPage(ctx context.Context) (ReplicationUsagesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ReplicationUsagesClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ReplicationUsagesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ReplicationUsagesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ReplicationUsagesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ReplicationUsagesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// UsagesClientListByVaultsPager provides operations for iterating over paged responses.
type UsagesClientListByVaultsPager struct {
	client    *UsagesClient
	current   UsagesClientListByVaultsResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *UsagesClientListByVaultsPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *UsagesClientListByVaultsPager) NextPage(ctx context.Context) (UsagesClientListByVaultsResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return UsagesClientListByVaultsResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return UsagesClientListByVaultsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return UsagesClientListByVaultsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return UsagesClientListByVaultsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByVaultsHandleResponse(resp)
	if err != nil {
		return UsagesClientListByVaultsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// VaultsClientListByResourceGroupPager provides operations for iterating over paged responses.
type VaultsClientListByResourceGroupPager struct {
	client    *VaultsClient
	current   VaultsClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, VaultsClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *VaultsClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VaultList.NextLink == nil || len(*p.current.VaultList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *VaultsClientListByResourceGroupPager) NextPage(ctx context.Context) (VaultsClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return VaultsClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return VaultsClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return VaultsClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return VaultsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return VaultsClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// VaultsClientListBySubscriptionIDPager provides operations for iterating over paged responses.
type VaultsClientListBySubscriptionIDPager struct {
	client    *VaultsClient
	current   VaultsClientListBySubscriptionIDResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, VaultsClientListBySubscriptionIDResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *VaultsClientListBySubscriptionIDPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VaultList.NextLink == nil || len(*p.current.VaultList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *VaultsClientListBySubscriptionIDPager) NextPage(ctx context.Context) (VaultsClientListBySubscriptionIDResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return VaultsClientListBySubscriptionIDResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return VaultsClientListBySubscriptionIDResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return VaultsClientListBySubscriptionIDResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return VaultsClientListBySubscriptionIDResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionIDHandleResponse(resp)
	if err != nil {
		return VaultsClientListBySubscriptionIDResponse{}, err
	}
	p.current = result
	return p.current, nil
}
