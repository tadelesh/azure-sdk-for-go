//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecoveryservices

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestVaultCertificates_Create(t *testing.T) {
	// From example Download vault credential file
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultCertificatesClient(con,
		"77777777-d41f-4550-9f70-7708a3a2283b")
	res, err := client.Create(ctx,
		"BCDRIbzRG",
		"BCDRIbzVault",
		"BCDRIbzVault77777777-d41f-4550-9f70-7708a3a2283b-12-18-2017-vaultcredentials",
		CertificateRequest{
			Properties: &RawCertificateData{
				AuthType:    AuthTypeAAD.ToPtr(),
				Certificate: "MTTC3TCCAcWgAwIBAgIQEj9h+ZLlXK9KrqZX9UkAnzANBgkqhkiG9w0BAQUFADAeMRwwGgYDVQQDExNXaW5kb3dzIEF6dXJlIFRvb2xzMB4XDTE3MTIxODA5MTc1M1oXDTE3MTIyMzA5Mjc1M1owHjEcMBoGA1UEAxMTV2luZG93cyBBenVyZSBUb29sczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK773/eZZ69RbZZAT05r9MjUxu9y1L1Pn1EgPk62IPJyHlO3OZA922eSBahhP4bgmFljN4LVReqQ5eT/wqO0Zhc+yFkUy4U4RdbQLeUZt2W7yy9XLXgVvqeYDgsjg/QhHetgHArQBW+tlQq5+zPdU7zchI4rbShSJrWhLrZFWiOyFPsuAE4joUQHNlRifdCTsBGKk8HRCY3j1S3c4bfEn3zxlrvrXXssRuW5mJM95rMk0tskoRxXSCi6i9bnlki2Cs9mpVMmBFeofs41KwzlWU0TgpdD8s1QEdvfGB5NbByfetPX7MfJaTBeHZEGbv/Iq8l72u8sPBoOhcaH7qDE/mECAwEAAaMXMBUwEwYDVR0lBAwwCgYIKwYBBQUHAwIwDQYJKoZIhvcNAQEFBQADggEBAILfgHluye1Q+WelhgWhpBBdIq2C0btfV8eFsZaTlBUrM0fwpxQSlAWc2oYHVMQI4A5iUjbDOY35O4yc+TnWKDBKf+laqDP+yos4aiUPuadGUZfvDk7kuw7xeECs64JpHAIEKdRHFW9rD3gwG+nIWaDnEL/7rTyhL3kXrRW2MSUAL8g3GX8Z45c+MQY0jmASIqWdhGn1vpAGyA9mKkzsqg7FXjg8GZb24tGl5Ky85+ip4dkBfXinDD8WwaGyjhGGK97ErvNmN36qly/H0H1Qngiovg1FbHDmkcFO5QclnEJsFFmcO2CcHp5Fqh2wXn5O1cQaxCIRTpQ/uXRpDjl2wKs=",
			},
		},
		&VaultCertificatesCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VaultCertificateResponse.ID == nil {
		t.Fatal("VaultCertificateResponse.ID should not be nil!")
	}
}

func TestRegisteredIdentities_Delete(t *testing.T) {
	// From example Delete registered Identity
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegisteredIdentitiesClient(con,
		"77777777-d41f-4550-9f70-7708a3a2283b")
	_, err := client.Delete(ctx,
		"BCDRIbzRG",
		"BCDRIbzVault",
		"dpmcontainer01",
		&RegisteredIdentitiesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestReplicationUsages_List(t *testing.T) {
	// From example Gets Replication usages of vault
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReplicationUsagesClient(con,
		"6808dbbc-98c7-431f-a1b1-9580902423b7")
	_, err := client.List(ctx,
		"avrai7517RG1",
		"avrai7517Vault1",
		&ReplicationUsagesListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkResources_List(t *testing.T) {
	// From example List PrivateLinkResources
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"6c48fa17-39c7-45f1-90ac-47a587128ace")
	pager := client.List("petesting",
		"pemsi-ecy-rsv2",
		&PrivateLinkResourcesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateLinkResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateLinkResource.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example Get PrivateLinkResource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"6c48fa17-39c7-45f1-90ac-47a587128ace")
	res, err := client.Get(ctx,
		"petesting",
		"pemsi-ecy-rsv2",
		"backupResource",
		&PrivateLinkResourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkResource.ID == nil {
		t.Fatal("PrivateLinkResource.ID should not be nil!")
	}
}

func TestRecoveryServices_CheckNameAvailability(t *testing.T) {
	// From example Availability status of Resource Name when no resource with same name, type and subscription exists, nor has been deleted within last 24 hours
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecoveryServicesClient(con,
		"77777777-b0c6-47a2-b37c-d8e65a629c18")
	_, err := client.CheckNameAvailability(ctx,
		"resGroupFoo",
		"westus",
		CheckNameAvailabilityParameters{
			Name: to.StringPtr("swaggerExample"),
			Type: to.StringPtr("Microsoft.RecoveryServices/Vaults"),
		},
		&RecoveryServicesCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Availability status of Resource Name when resource with same name, type and subscription exists
	_, err = client.CheckNameAvailability(ctx,
		"resGroupBar",
		"westus",
		CheckNameAvailabilityParameters{
			Name: to.StringPtr("swaggerExample2"),
			Type: to.StringPtr("Microsoft.RecoveryServices/Vaults"),
		},
		&RecoveryServicesCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVaults_ListBySubscriptionId(t *testing.T) {
	// From example List of Recovery Services Resources in SubscriptionId
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultsClient(con,
		"77777777-b0c6-47a2-b37c-d8e65a629c18")
	pager := client.ListBySubscriptionID(&VaultsListBySubscriptionIDOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Vault.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Vault.ID should not be nil!")
			}
		}
	}
}

func TestVaults_ListByResourceGroup(t *testing.T) {
	// From example List of Recovery Services Resources in ResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultsClient(con,
		"77777777-b0c6-47a2-b37c-d8e65a629c18")
	pager := client.ListByResourceGroup("Default-RecoveryServices-ResourceGroup",
		&VaultsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Vault.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Vault.ID should not be nil!")
			}
		}
	}
}

func TestVaults_Get(t *testing.T) {
	// From example Get Recovery Services Resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultsClient(con,
		"77777777-b0c6-47a2-b37c-d8e65a629c18")
	res, err := client.Get(ctx,
		"Default-RecoveryServices-ResourceGroup",
		"swaggerExample",
		&VaultsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Vault.ID == nil {
		t.Fatal("Vault.ID should not be nil!")
	}
}

func TestVaults_CreateOrUpdate(t *testing.T) {
	// From example Create or Update Recovery Services vault
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultsClient(con,
		"77777777-b0c6-47a2-b37c-d8e65a629c18")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default-RecoveryServices-ResourceGroup",
		"swaggerExample",
		Vault{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("West US"),
			},
			Identity: &IdentityData{
				Type: ResourceIdentityTypeSystemAssigned.ToPtr(),
			},
			Properties: &VaultProperties{},
			SKU: &SKU{
				Name: SKUNameStandard.ToPtr(),
			},
		},
		&VaultsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Vault.ID == nil {
		t.Fatal("Vault.ID should not be nil!")
	}

	// From example Create or Update Vault with CustomerManagedKeys
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-RecoveryServices-ResourceGroup",
		"swaggerExample",
		Vault{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("West US"),
			},
			Identity: &IdentityData{
				Type: ResourceIdentityTypeUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*UserIdentity{
					"/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi": &UserIdentity{},
				},
			},
			Properties: &VaultProperties{
				Encryption: &VaultPropertiesEncryption{
					InfrastructureEncryption: InfrastructureEncryptionStateEnabled.ToPtr(),
					KekIdentity: &CmkKekIdentity{
						UserAssignedIdentity: to.StringPtr("/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi"),
					},
					KeyVaultProperties: &CmkKeyVaultProperties{
						KeyURI: to.StringPtr("https://cmk2xkv.vault.azure.net/keys/Key1/0767b348bb1a4c07baa6c4ec0055d2b3"),
					},
				},
			},
			SKU: &SKU{
				Name: SKUNameStandard.ToPtr(),
			},
		},
		&VaultsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Vault.ID == nil {
		t.Fatal("Vault.ID should not be nil!")
	}

	// From example Create or Update Vault with User Assigned Identity
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-RecoveryServices-ResourceGroup",
		"swaggerExample",
		Vault{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("West US"),
			},
			Identity: &IdentityData{
				Type: ResourceIdentityTypeUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*UserIdentity{
					"/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi": &UserIdentity{},
				},
			},
			Properties: &VaultProperties{},
			SKU: &SKU{
				Name: SKUNameStandard.ToPtr(),
			},
		},
		&VaultsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Vault.ID == nil {
		t.Fatal("Vault.ID should not be nil!")
	}
}

func TestVaults_Delete(t *testing.T) {
	// From example Delete Recovery Services Vault
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultsClient(con,
		"77777777-b0c6-47a2-b37c-d8e65a629c18")
	_, err := client.Delete(ctx,
		"Default-RecoveryServices-ResourceGroup",
		"swaggerExample",
		&VaultsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVaults_Update(t *testing.T) {
	// From example Update Resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultsClient(con,
		"77777777-b0c6-47a2-b37c-d8e65a629c18")
	poller, err := client.BeginUpdate(ctx,
		"HelloWorld",
		"swaggerExample",
		PatchVault{
			PatchTrackedResource: PatchTrackedResource{
				Tags: map[string]*string{
					"PatchKey": to.StringPtr("PatchKeyUpdated"),
				},
			},
		},
		&VaultsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Vault.ID == nil {
		t.Fatal("Vault.ID should not be nil!")
	}

	// From example Update Resource With CustomerManagedKeys
	poller, err = client.BeginUpdate(ctx,
		"HelloWorld",
		"swaggerExample",
		PatchVault{
			PatchTrackedResource: PatchTrackedResource{
				Tags: map[string]*string{
					"PatchKey": to.StringPtr("PatchKeyUpdated"),
				},
			},
			Identity: &IdentityData{
				Type: ResourceIdentityTypeUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*UserIdentity{
					"/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi": &UserIdentity{},
				},
			},
			Properties: &VaultProperties{
				Encryption: &VaultPropertiesEncryption{
					InfrastructureEncryption: InfrastructureEncryptionStateEnabled.ToPtr(),
					KekIdentity: &CmkKekIdentity{
						UserAssignedIdentity: to.StringPtr("/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi"),
					},
					KeyVaultProperties: &CmkKeyVaultProperties{
						KeyURI: to.StringPtr("https://cmk2xkv.vault.azure.net/keys/Key1/0767b348bb1a4c07baa6c4ec0055d2b3"),
					},
				},
			},
		},
		&VaultsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Vault.ID == nil {
		t.Fatal("Vault.ID should not be nil!")
	}

	// From example Update Resource With CustomerManagedKeys2
	poller, err = client.BeginUpdate(ctx,
		"HelloWorld",
		"swaggerExample",
		PatchVault{
			PatchTrackedResource: PatchTrackedResource{
				Tags: map[string]*string{
					"PatchKey": to.StringPtr("PatchKeyUpdated"),
				},
			},
			Identity: &IdentityData{
				Type: ResourceIdentityTypeSystemAssigned.ToPtr(),
			},
			Properties: &VaultProperties{
				Encryption: &VaultPropertiesEncryption{
					KekIdentity: &CmkKekIdentity{
						UseSystemAssignedIdentity: to.BoolPtr(true),
					},
				},
			},
		},
		&VaultsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Vault.ID == nil {
		t.Fatal("Vault.ID should not be nil!")
	}

	// From example Update Resource With CustomerManagedKeys3
	poller, err = client.BeginUpdate(ctx,
		"HelloWorld",
		"swaggerExample",
		PatchVault{
			PatchTrackedResource: PatchTrackedResource{
				Tags: map[string]*string{
					"PatchKey": to.StringPtr("PatchKeyUpdated"),
				},
			},
			Identity: &IdentityData{
				Type: ResourceIdentityTypeUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*UserIdentity{
					"/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi": &UserIdentity{},
				},
			},
			Properties: &VaultProperties{
				Encryption: &VaultPropertiesEncryption{
					KeyVaultProperties: &CmkKeyVaultProperties{
						KeyURI: to.StringPtr("https://cmk2xkv.vault.azure.net/keys/Key1/0767b348bb1a4c07baa6c4ec0055d2b3"),
					},
				},
			},
		},
		&VaultsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Vault.ID == nil {
		t.Fatal("Vault.ID should not be nil!")
	}

	// From example Update Resource With User Assigned Identity
	poller, err = client.BeginUpdate(ctx,
		"HelloWorld",
		"swaggerExample",
		PatchVault{
			PatchTrackedResource: PatchTrackedResource{
				Tags: map[string]*string{
					"PatchKey": to.StringPtr("PatchKeyUpdated"),
				},
			},
			Identity: &IdentityData{
				Type: ResourceIdentityTypeUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*UserIdentity{
					"/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi": &UserIdentity{},
				},
			},
		},
		&VaultsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Vault.ID == nil {
		t.Fatal("Vault.ID should not be nil!")
	}
}

func TestOperations_List(t *testing.T) {
	// From example ListOperations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestVaultExtendedInfo_Get(t *testing.T) {
	// From example Get ExtendedInfo of Resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultExtendedInfoClient(con,
		"77777777-b0c6-47a2-b37c-d8e65a629c18")
	res, err := client.Get(ctx,
		"Default-RecoveryServices-ResourceGroup",
		"swaggerExample",
		&VaultExtendedInfoGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VaultExtendedInfoResource.ID == nil {
		t.Fatal("VaultExtendedInfoResource.ID should not be nil!")
	}
}

func TestVaultExtendedInfo_CreateOrUpdate(t *testing.T) {
	// From example Put ExtendedInfo of Resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultExtendedInfoClient(con,
		"77777777-b0c6-47a2-b37c-d8e65a629c18")
	res, err := client.CreateOrUpdate(ctx,
		"Default-RecoveryServices-ResourceGroup",
		"swaggerExample",
		nil,
		&VaultExtendedInfoCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VaultExtendedInfoResource.ID == nil {
		t.Fatal("VaultExtendedInfoResource.ID should not be nil!")
	}
}

func TestVaultExtendedInfo_Update(t *testing.T) {
	// From example PATCH ExtendedInfo of Resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultExtendedInfoClient(con,
		"77777777-b0c6-47a2-b37c-d8e65a629c18")
	res, err := client.Update(ctx,
		"Default-RecoveryServices-ResourceGroup",
		"swaggerExample",
		nil,
		&VaultExtendedInfoUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VaultExtendedInfoResource.ID == nil {
		t.Fatal("VaultExtendedInfoResource.ID should not be nil!")
	}
}

func Test_GetOperationStatus(t *testing.T) {
	// From example Get Operation Status
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecoveryServicesClientClient(con,
		"77777777-b0c6-47a2-b37c-d8e65a629c18")
	res, err := client.GetOperationStatus(ctx,
		"HelloWorld",
		"swaggerExample",
		"YWUzNDFkMzQtZmM5OS00MmUyLWEzNDMtZGJkMDIxZjlmZjgzOzdmYzBiMzhmLTc2NmItNDM5NS05OWQ1LTVmOGEzNzg4MWQzNA==",
		&RecoveryServicesClientGetOperationStatusOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationResource.ID == nil {
		t.Fatal("OperationResource.ID should not be nil!")
	}
}

func Test_GetOperationResult(t *testing.T) {
	// From example Get Operation Result
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecoveryServicesClientClient(con,
		"77777777-b0c6-47a2-b37c-d8e65a629c18")
	res, err := client.GetOperationResult(ctx,
		"HelloWorld",
		"swaggerExample",
		"YWUzNDFkMzQtZmM5OS00MmUyLWEzNDMtZGJkMDIxZjlmZjgzOzdmYzBiMzhmLTc2NmItNDM5NS05OWQ1LTVmOGEzNzg4MWQzNA==",
		&RecoveryServicesClientGetOperationResultOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Vault.ID == nil {
		t.Fatal("Vault.ID should not be nil!")
	}
}

func TestUsages_ListByVaults(t *testing.T) {
	// From example Gets vault usages
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsagesClient(con,
		"77777777-b0c6-47a2-b37c-d8e65a629c18")
	_, err := client.ListByVaults(ctx,
		"Default-RecoveryServices-ResourceGroup",
		"swaggerExample",
		&UsagesListByVaultsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
