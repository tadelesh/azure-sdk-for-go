//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecoveryservicesbackup_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/recoveryservices/armrecoveryservicesbackup"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestBackupResourceStorageConfigsNonCRR_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupStorageConfig_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Vault Storage Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBackupResourceStorageConfigsNonCRRClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"PySDKBackupTestRsVault",
		"PythonSDKBackupTestRg",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupStorageConfig_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.BackupResourceConfigResource{
			Name: to.Ptr("vaultstorageconfig"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupstorageconfig"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/PythonSDKBackupTestRg/providers/Microsoft.RecoveryServices/vaults/PySDKBackupTestRsVault/backupstorageconfig/vaultstorageconfig"),
			Properties: &armrecoveryservicesbackup.BackupResourceConfig{
				StorageModelType: to.Ptr(armrecoveryservicesbackup.StorageTypeGeoRedundant),
				StorageType:      to.Ptr(armrecoveryservicesbackup.StorageTypeGeoRedundant),
				StorageTypeState: to.Ptr(armrecoveryservicesbackup.StorageTypeStateLocked),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupResourceConfigResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupResourceConfigResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupStorageConfig_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupResourceStorageConfigsNonCRR_Update(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupStorageConfig_Put.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Vault Storage Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBackupResourceStorageConfigsNonCRRClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"PySDKBackupTestRsVault",
		"PythonSDKBackupTestRg",
		armrecoveryservicesbackup.BackupResourceConfigResource{
			Properties: &armrecoveryservicesbackup.BackupResourceConfig{
				StorageType:      to.Ptr(armrecoveryservicesbackup.StorageTypeLocallyRedundant),
				StorageTypeState: to.Ptr(armrecoveryservicesbackup.StorageTypeStateUnlocked),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupStorageConfig_Put.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.BackupResourceConfigResource{
			Name: to.Ptr("vaultstorageconfig"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupstorageconfig"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/PythonSDKBackupTestRg/providers/Microsoft.RecoveryServices/vaults/PySDKBackupTestRsVault/backupstorageconfig/vaultstorageconfig"),
			Properties: &armrecoveryservicesbackup.BackupResourceConfig{
				StorageModelType: to.Ptr(armrecoveryservicesbackup.StorageTypeLocallyRedundant),
				StorageType:      to.Ptr(armrecoveryservicesbackup.StorageTypeLocallyRedundant),
				StorageTypeState: to.Ptr(armrecoveryservicesbackup.StorageTypeStateUnlocked),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupResourceConfigResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupResourceConfigResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupStorageConfig_Put.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupResourceStorageConfigsNonCRR_Patch(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupStorageConfig_Patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Vault Storage Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBackupResourceStorageConfigsNonCRRClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Patch(ctx,
		"PySDKBackupTestRsVault",
		"PythonSDKBackupTestRg",
		armrecoveryservicesbackup.BackupResourceConfigResource{
			Properties: &armrecoveryservicesbackup.BackupResourceConfig{
				StorageType:      to.Ptr(armrecoveryservicesbackup.StorageTypeLocallyRedundant),
				StorageTypeState: to.Ptr(armrecoveryservicesbackup.StorageTypeStateUnlocked),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupStorageConfig_Patch.json: %v", err)
	}
}

func TestProtectionIntent_Validate(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionIntent_Validate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Validate Enable Protection on Azure Vm"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewProtectionIntentClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Validate(ctx,
		"southeastasia",
		armrecoveryservicesbackup.PreValidateEnableBackupRequest{
			Properties:   to.Ptr(""),
			ResourceID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/arunaupgrade/providers/Microsoft.Compute/VirtualMachines/upgrade1"),
			ResourceType: to.Ptr(armrecoveryservicesbackup.DataSourceTypeVM),
			VaultID:      to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG/providers/Microsoft.RecoveryServices/Vaults/myVault"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionIntent_Validate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.PreValidateEnableBackupResponse{
			ContainerName:     to.Ptr("iaasvmcontainer;iaasvmcontainerv2;arunaupgrade;upgrade1"),
			ErrorCode:         to.Ptr("VirtualMachineAlreadyProtected"),
			ErrorMessage:      to.Ptr("Virtual machine with same name and same resource group is already protected. Please select `Disable' choice above for backup and go to backup item corresponding to this VM in the vault"),
			ProtectedItemName: to.Ptr("vm;iaasvmcontainerv2;arunaupgrade;upgrade1"),
			Recommendation:    to.Ptr("Please do not enable protection again."),
			Status:            to.Ptr(armrecoveryservicesbackup.ValidationStatusFailed),
		}
		if !reflect.DeepEqual(exampleRes, res.PreValidateEnableBackupResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PreValidateEnableBackupResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionIntent_Validate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProtectionIntent_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureWorkload/BackupProtectionIntent_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get ProtectionIntent for an item"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewProtectionIntentClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myVault",
		"myRG",
		"Azure",
		"249D9B07-D2EF-4202-AA64-65F35418564E",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureWorkload/BackupProtectionIntent_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ProtectionIntentResource{
			Name: to.Ptr("249D9B07-D2EF-4202-AA64-65F35418564E"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupProtectionIntent"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG/providers/Microsoft.RecoveryServices/vaults/myVault/backupFabrics/Azure/backupProtectionIntent/249D9B07-D2EF-4202-AA64-65F35418564E"),
			Properties: &armrecoveryservicesbackup.AzureWorkloadContainerAutoProtectionIntent{
				BackupManagementType:     to.Ptr(armrecoveryservicesbackup.BackupManagementTypeAzureWorkload),
				ItemID:                   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG/providers/Microsoft.RecoveryServices/vaults/myVault/backupProtectionContainer/VMAppContainer;Compute;testVmName/backupProtectableItems/SQLInstance;MSSQLSERVER"),
				PolicyID:                 to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG/providers/Microsoft.RecoveryServices/vaults/myVault/backupPolicies/myPolicy"),
				ProtectionIntentItemType: to.Ptr(armrecoveryservicesbackup.ProtectionIntentItemTypeAzureWorkloadContainerAutoProtectionIntent),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectionIntentResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectionIntentResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureWorkload/BackupProtectionIntent_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProtectionIntent_CreateOrUpdate(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionIntent_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update Azure Vm Protection Intent"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewProtectionIntentClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myVault",
		"myRG",
		"Azure",
		"vm;iaasvmcontainerv2;chamsrgtest;chamscandel",
		armrecoveryservicesbackup.ProtectionIntentResource{
			Properties: &armrecoveryservicesbackup.AzureResourceProtectionIntent{
				PolicyID:                 to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG/providers/Microsoft.RecoveryServices/vaults/myVault/backupPolicies/myPolicy"),
				ProtectionIntentItemType: to.Ptr(armrecoveryservicesbackup.ProtectionIntentItemTypeAzureResourceItem),
				SourceResourceID:         to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/chamsrgtest/providers/Microsoft.Compute/virtualMachines/chamscandel"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionIntent_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ProtectionIntentResource{
			Name: to.Ptr("vm;iaasvmcontainerv2;chamsrgtest;chamscandel"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupProtectionIntent"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG/providers/Microsoft.RecoveryServices/vaults/myVault/backupFabrics/Azure/backupProtectionIntent/vm;iaasvmcontainerv2;chamsrgtest;chamscandel"),
			Properties: &armrecoveryservicesbackup.AzureResourceProtectionIntent{
				BackupManagementType:     to.Ptr(armrecoveryservicesbackup.BackupManagementTypeAzureIaasVM),
				PolicyID:                 to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG/providers/Microsoft.RecoveryServices/vaults/myVault/backupPolicies/myPolicy"),
				ProtectionIntentItemType: to.Ptr(armrecoveryservicesbackup.ProtectionIntentItemTypeAzureResourceItem),
				ProtectionState:          to.Ptr(armrecoveryservicesbackup.ProtectionStatusProtected),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectionIntentResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectionIntentResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionIntent_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProtectionIntent_Delete(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureWorkload/BackupProtectionIntent_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Protection intent from item"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewProtectionIntentClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"myVault",
		"myRG",
		"Azure",
		"249D9B07-D2EF-4202-AA64-65F35418564E",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureWorkload/BackupProtectionIntent_Delete.json: %v", err)
	}
}

func TestBackupStatus_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/GetBackupStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Azure Virtual Machine Backup Status"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBackupStatusClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"southeastasia",
		armrecoveryservicesbackup.BackupStatusRequest{
			ResourceID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRg/providers/Microsoft.Compute/VirtualMachines/testVm"),
			ResourceType: to.Ptr(armrecoveryservicesbackup.DataSourceTypeVM),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/GetBackupStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.BackupStatusResponse{
			ContainerName:     to.Ptr("iaasvmcontainer;iaasvmcontainerv2;testRg;testVm"),
			ErrorCode:         to.Ptr("Success"),
			ErrorMessage:      to.Ptr("ErrorMessage"),
			FabricName:        to.Ptr(armrecoveryservicesbackup.FabricNameAzure),
			PolicyName:        to.Ptr("myPolicy"),
			ProtectedItemName: to.Ptr("vm;iaasvmcontainerv2;testRg;testVm"),
			ProtectionStatus:  to.Ptr(armrecoveryservicesbackup.ProtectionStatusProtected),
			VaultID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRg/providers/Microsoft.RecoveryServices/Vaults/testVault"),
		}
		if !reflect.DeepEqual(exampleRes, res.BackupStatusResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupStatusResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/GetBackupStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFeatureSupport_Validate(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/BackupFeature_Validate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check Azure Vm Backup Feature Support"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewFeatureSupportClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Validate(ctx,
		"southeastasia",
		&armrecoveryservicesbackup.AzureVMResourceFeatureSupportRequest{
			FeatureType: to.Ptr("AzureVMResourceBackup"),
			VMSize:      to.Ptr("Basic_A0"),
			VMSKU:       to.Ptr("Premium"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/BackupFeature_Validate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.AzureVMResourceFeatureSupportResponse{
			SupportStatus: to.Ptr(armrecoveryservicesbackup.SupportStatusDefaultOFF),
		}
		if !reflect.DeepEqual(exampleRes, res.AzureVMResourceFeatureSupportResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureVMResourceFeatureSupportResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/BackupFeature_Validate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupProtectionIntent_List(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureWorkload/BackupProtectionIntent_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List protection intent with backupManagementType filter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBackupProtectionIntentClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myVault",
		"myRG",
		&armrecoveryservicesbackup.BackupProtectionIntentClientListOptions{Filter: nil,
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureWorkload/BackupProtectionIntent_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicesbackup.ProtectionIntentResourceList{
			Value: []*armrecoveryservicesbackup.ProtectionIntentResource{
				{
					Name: to.Ptr("249D9B07-D2EF-4202-AA64-65F35418564E"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupProtectionIntent"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG/providers/Microsoft.RecoveryServices/vaults/myVault/backupFabrics/Azure/backupProtectionIntent/249D9B07-D2EF-4202-AA64-65F35418564E"),
					Properties: &armrecoveryservicesbackup.AzureWorkloadContainerAutoProtectionIntent{
						BackupManagementType:     to.Ptr(armrecoveryservicesbackup.BackupManagementTypeAzureWorkload),
						ItemID:                   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG/providers/Microsoft.RecoveryServices/vaults/myVault/backupProtectionContainer/VMAppContainer;Compute;testVmName/backupProtectableItems/SQLInstance;MSSQLSERVER"),
						PolicyID:                 to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG/providers/Microsoft.RecoveryServices/vaults/myVault/backupPolicies/myPolicy"),
						ProtectionIntentItemType: to.Ptr(armrecoveryservicesbackup.ProtectionIntentItemTypeAzureWorkloadContainerAutoProtectionIntent),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProtectionIntentResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProtectionIntentResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureWorkload/BackupProtectionIntent_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupUsageSummaries_List(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupProtectionContainers_UsageSummary_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Protected Containers Usages Summary"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBackupUsageSummariesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("testVault",
		"testRG",
		&armrecoveryservicesbackup.BackupUsageSummariesClientListOptions{Filter: to.Ptr("type eq 'BackupProtectionContainerCountSummary'"),
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupProtectionContainers_UsageSummary_Get.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicesbackup.BackupManagementUsageList{
			Value: []*armrecoveryservicesbackup.BackupManagementUsage{
				{
					Name: &armrecoveryservicesbackup.NameInfo{
						LocalizedValue: to.Ptr("Azure Backup Server"),
						Value:          to.Ptr("AzureBackupServer"),
					},
					CurrentValue: to.Ptr[int64](2),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservicesbackup.UsagesUnitCount),
				},
				{
					Name: &armrecoveryservicesbackup.NameInfo{
						LocalizedValue: to.Ptr("Azure Backup Agent"),
						Value:          to.Ptr("MAB"),
					},
					CurrentValue: to.Ptr[int64](3),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservicesbackup.UsagesUnitCount),
				},
				{
					Name: &armrecoveryservicesbackup.NameInfo{
						LocalizedValue: to.Ptr("SQL in Azure VM"),
						Value:          to.Ptr("AzureWorkload"),
					},
					CurrentValue: to.Ptr[int64](1),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservicesbackup.UsagesUnitCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BackupManagementUsageList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BackupManagementUsageList)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupProtectionContainers_UsageSummary_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupProtectedItem_UsageSummary_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Protected Items Usages Summary"},
	})
	client = armrecoveryservicesbackup.NewBackupUsageSummariesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager = client.List("testVault",
		"testRG",
		&armrecoveryservicesbackup.BackupUsageSummariesClientListOptions{Filter: to.Ptr("type eq 'BackupProtectedItemCountSummary'"),
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupProtectedItem_UsageSummary_Get.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicesbackup.BackupManagementUsageList{
			Value: []*armrecoveryservicesbackup.BackupManagementUsage{
				{
					Name: &armrecoveryservicesbackup.NameInfo{
						LocalizedValue: to.Ptr("Azure Virtual Machine"),
						Value:          to.Ptr("AzureIaasVM"),
					},
					CurrentValue: to.Ptr[int64](7),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservicesbackup.UsagesUnitCount),
				},
				{
					Name: &armrecoveryservicesbackup.NameInfo{
						LocalizedValue: to.Ptr("Azure Backup Agent"),
						Value:          to.Ptr("MAB"),
					},
					CurrentValue: to.Ptr[int64](3),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservicesbackup.UsagesUnitCount),
				},
				{
					Name: &armrecoveryservicesbackup.NameInfo{
						LocalizedValue: to.Ptr("Azure Backup Server"),
						Value:          to.Ptr("AzureBackupServer"),
					},
					CurrentValue: to.Ptr[int64](1),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservicesbackup.UsagesUnitCount),
				},
				{
					Name: &armrecoveryservicesbackup.NameInfo{
						LocalizedValue: to.Ptr("Azure Storage (Azure Files)"),
						Value:          to.Ptr("AzureStorage"),
					},
					CurrentValue: to.Ptr[int64](2),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservicesbackup.UsagesUnitCount),
				},
				{
					Name: &armrecoveryservicesbackup.NameInfo{
						LocalizedValue: to.Ptr("SQL in Azure VM"),
						Value:          to.Ptr("AzureWorkload"),
					},
					CurrentValue: to.Ptr[int64](2),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armrecoveryservicesbackup.UsagesUnitCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BackupManagementUsageList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BackupManagementUsageList)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupProtectedItem_UsageSummary_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ListOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListOperations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ListOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicesbackup.ClientDiscoveryResponse{
			Value: []*armrecoveryservicesbackup.ClientDiscoveryValueForSingleAPI{
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/usages/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns usage details for a Recovery Services Vault."),
						Operation:   to.Ptr("Recovery Services Vault usage details."),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Vault Usage"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupUsageSummaries/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns summaries for Protected Items and Protected Servers for a Recovery Services ."),
						Operation:   to.Ptr("Recovery Services Protected Items and Protected Servers usage summaries details."),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Usages Summaries"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/storageConfig/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns Storage Configuration for Recovery Services Vault."),
						Operation:   to.Ptr("Get Resource Storage Config"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Vault Storage Config"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/storageConfig/write"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Updates Storage Configuration for Recovery Services Vault."),
						Operation:   to.Ptr("Write Resource Storage Config"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Vault Storage Config"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupconfig/vaultconfig/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns Configuration for Recovery Services Vault."),
						Operation:   to.Ptr("Get Resource Config"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Vault Config"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupconfig/vaultconfig/write"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Updates Configuration for Recovery Services Vault."),
						Operation:   to.Ptr("Update Resource Config"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Vault Config"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/tokenInfo/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns token information for Recovery Services Vault."),
						Operation:   to.Ptr("Get Vault Token Info"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Token Info"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupSecurityPIN/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns Security PIN Information for Recovery Services Vault."),
						Operation:   to.Ptr("Get Security PIN Info"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("SecurityPINInfo"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupManagementMetaData/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns Backup Management Metadata for Recovery Services Vault."),
						Operation:   to.Ptr("Get Backup Management Metadata"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Management Metadata"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupOperationResults/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns Backup Operation Result for Recovery Services Vault."),
						Operation:   to.Ptr("Get Backup Operation Result"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Operation Results"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupOperations/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns Backup Operation Status for Recovery Services Vault."),
						Operation:   to.Ptr("Get Backup Operation Status"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Operation Status"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupJobs/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns all Job Objects"),
						Operation:   to.Ptr("Get Jobs"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Jobs"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupJobs/cancel/action"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Cancel the Job"),
						Operation:   to.Ptr("Cancel Jobs"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Jobs"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupJobsExport/action"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Export Jobs"),
						Operation:   to.Ptr("Export Jobs"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Export Backup Jobs"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupJobs/operationResults/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns the Result of Job Operation."),
						Operation:   to.Ptr("Get Job Operation Result"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Jobs Operation Results"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupJobsExport/operationResults/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns the Result of Export Job Operation."),
						Operation:   to.Ptr("Get Export Job Operation Result"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Export Backup Jobs Operation Results"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Get Recovery Points for Protected Items."),
						Operation:   to.Ptr("Get Recovery Points"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Recovery Points"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints/restore/action"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Restore Recovery Points for Protected Items."),
						Operation:   to.Ptr("Restore Recovery Points"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Recovery Points"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints/provisionInstantItemRecovery/action"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Provision Instant Item Recovery for Protected Item"),
						Operation:   to.Ptr("Provision Instant Item Recovery for Protected Item"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Recovery Points"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints/revokeInstantItemRecovery/action"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Revoke Instant Item Recovery for Protected Item"),
						Operation:   to.Ptr("Revoke Instant Item Recovery for Protected Item"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Recovery Points"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupPolicies/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns all Protection Policies"),
						Operation:   to.Ptr("Get Protection Policy"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Policies"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupPolicies/write"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Creates Protection Policy"),
						Operation:   to.Ptr("Create Protection Policy"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Policies"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupPolicies/delete"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Delete a Protection Policy"),
						Operation:   to.Ptr("Delete Protection Policy"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Policies"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupPolicies/operationResults/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Get Results of Policy Operation."),
						Operation:   to.Ptr("Get Policy Operation Results"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Policy Operation Results"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupPolicies/operationsStatus/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Get Status of Policy Operation."),
						Operation:   to.Ptr("Get Policy Operation Status"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Policy Operation Status"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/protectedItems/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns object details of the Protected Item"),
						Operation:   to.Ptr("Get Protected Item Details"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupProtectedItems/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns the list of all Protected Items."),
						Operation:   to.Ptr("Get All Protected Items"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/protectedItems/write"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Create a backup Protected Item"),
						Operation:   to.Ptr("Create Backup Protected Item"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/protectedItems/delete"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Deletes Protected Item"),
						Operation:   to.Ptr("Delete Protected Items"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/protectedItems/operationResults/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Gets Result of Operation Performed on Protected Items."),
						Operation:   to.Ptr("Get Protected Items Operation Results"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Protected Item Operation Results"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/protectedItems/operationsStatus/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns the status of Operation performed on Protected Items."),
						Operation:   to.Ptr("Get Protected Items operation status"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Protected Item Operation Status"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/protectedItems/backup/action"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Performs Backup for Protected Item."),
						Operation:   to.Ptr("Backup Protected Item"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupProtectableItems/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns list of all Protectable Items."),
						Operation:   to.Ptr("Get Protectable Items"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Protectable Items"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/refreshContainers/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Refreshes the container list"),
						Operation:   to.Ptr("Refresh container"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Refresh Containers"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/operationResults/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns status of the operation"),
						Operation:   to.Ptr("Get Operation Results"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Refresh Containers Operation Results"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupProtectionContainers/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns all containers belonging to the subscription"),
						Operation:   to.Ptr("Get Containers In Subscription"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Protection Containers"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns all registered containers"),
						Operation:   to.Ptr("Get Registered Container"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Protection Containers"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/operationResults/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Gets result of Operation performed on Protection Container."),
						Operation:   to.Ptr("Get Container Operation Results"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Protection Containers Operation Results"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupEngines"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns all the backup management servers registered with vault."),
						Operation:   to.Ptr("List of backup management servers."),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Engines"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupStatus"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Check Backup Status for Recovery Services Vaults"),
						Operation:   to.Ptr("Check Backup Status for Vault"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Backup Status"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupPreValidateProtection"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr(""),
						Operation:   to.Ptr("Pre Validate Enable Protection"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("PreValidate Protection"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupValidateFeatures"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Validate Features"),
						Operation:   to.Ptr("Validate Features"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Validate Features"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/backupProtectionIntent/write"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Create a backup Protection Intent"),
						Operation:   to.Ptr("Create backup Protection Intent"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Protection Intent"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/{fabricName}/protectionContainers/{containerName}/items/read"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Get all items in a container"),
						Operation:   to.Ptr("Get all items in a container"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Workload Items"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("microsoft.recoveryservices/vaults/backupFabrics/protectionContainers/inquire/action"),
					Display: &armrecoveryservicesbackup.ClientDiscoveryDisplay{
						Description: to.Ptr("Get all items in a container"),
						Operation:   to.Ptr("Get all items in a container"),
						Provider:    to.Ptr("microsoft.recoveryservices"),
						Resource:    to.Ptr("Protection Containers Inquire"),
					},
					Origin: to.Ptr("user"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ClientDiscoveryResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ClientDiscoveryResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ListOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupResourceVaultConfigs_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupResourceVaultConfigs_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Vault Security Config"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBackupResourceVaultConfigsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"SwaggerTest",
		"SwaggerTestRg",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupResourceVaultConfigs_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.BackupResourceVaultConfigResource{
			Name: to.Ptr("vaultconfig"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupconfig"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/SwaggerTest/backupconfig/vaultconfig"),
			Properties: &armrecoveryservicesbackup.BackupResourceVaultConfig{
				EnhancedSecurityState: to.Ptr(armrecoveryservicesbackup.EnhancedSecurityStateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupResourceVaultConfigResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupResourceVaultConfigResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupResourceVaultConfigs_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupResourceVaultConfigs_Update(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupResourceVaultConfigs_Patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Vault Security Config"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBackupResourceVaultConfigsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"SwaggerTest",
		"SwaggerTestRg",
		armrecoveryservicesbackup.BackupResourceVaultConfigResource{
			Properties: &armrecoveryservicesbackup.BackupResourceVaultConfig{
				EnhancedSecurityState: to.Ptr(armrecoveryservicesbackup.EnhancedSecurityStateEnabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupResourceVaultConfigs_Patch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.BackupResourceVaultConfigResource{
			Name: to.Ptr("vaultconfig"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupconfig"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/SwaggerTest/backupconfig/vaultconfig"),
			Properties: &armrecoveryservicesbackup.BackupResourceVaultConfig{
				EnhancedSecurityState: to.Ptr(armrecoveryservicesbackup.EnhancedSecurityStateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupResourceVaultConfigResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupResourceVaultConfigResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupResourceVaultConfigs_Patch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupResourceVaultConfigs_Put(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupResourceVaultConfigs_Put.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Vault Security Config"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBackupResourceVaultConfigsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Put(ctx,
		"SwaggerTest",
		"SwaggerTestRg",
		armrecoveryservicesbackup.BackupResourceVaultConfigResource{
			Properties: &armrecoveryservicesbackup.BackupResourceVaultConfig{
				EnhancedSecurityState:  to.Ptr(armrecoveryservicesbackup.EnhancedSecurityStateEnabled),
				SoftDeleteFeatureState: to.Ptr(armrecoveryservicesbackup.SoftDeleteFeatureStateEnabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupResourceVaultConfigs_Put.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.BackupResourceVaultConfigResource{
			Name: to.Ptr("vaultconfig"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupconfig"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/SwaggerTest/backupconfig/vaultconfig"),
			Properties: &armrecoveryservicesbackup.BackupResourceVaultConfig{
				EnhancedSecurityState:  to.Ptr(armrecoveryservicesbackup.EnhancedSecurityStateEnabled),
				SoftDeleteFeatureState: to.Ptr(armrecoveryservicesbackup.SoftDeleteFeatureStateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupResourceVaultConfigResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupResourceVaultConfigResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupResourceVaultConfigs_Put.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupResourceEncryptionConfigs_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/BackupResourceEncryptionConfig_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Vault Encryption Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBackupResourceEncryptionConfigsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"rishTestVault",
		"rishgrp",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/BackupResourceEncryptionConfig_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.BackupResourceEncryptionConfigExtendedResource{
			Name: to.Ptr("backupResourceEncryptionConfig"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupEncryptionConfigs"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rishgrp/providers/Microsoft.RecoveryServicesBVTD2/vaults/rishTestVault/backupEncryptionConfigs/backupResourceEncryptionConfig"),
			Properties: &armrecoveryservicesbackup.BackupResourceEncryptionConfigExtended{
				EncryptionAtRestType:          to.Ptr(armrecoveryservicesbackup.EncryptionAtRestTypeCustomerManaged),
				InfrastructureEncryptionState: to.Ptr(armrecoveryservicesbackup.InfrastructureEncryptionStateDisabled),
				KeyURI:                        to.Ptr("https://gktestkv1.vault.azure.net/keys/Test1/ed2e8cdc7f86477ebf0c6462b504a9ed"),
				LastUpdateStatus:              to.Ptr(armrecoveryservicesbackup.LastUpdateStatusSucceeded),
				SubscriptionID:                to.Ptr("1a2311d9-66f5-47d3-a9fb-7a37da63934b"),
				UseSystemAssignedIdentity:     to.Ptr(false),
				UserAssignedIdentity:          to.Ptr("/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupResourceEncryptionConfigExtendedResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupResourceEncryptionConfigExtendedResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/BackupResourceEncryptionConfig_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupResourceEncryptionConfigs_Update(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/BackupResourceEncryptionConfig_Put.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Vault Encryption Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBackupResourceEncryptionConfigsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Update(ctx,
		"source-rsv",
		"test-rg",
		armrecoveryservicesbackup.BackupResourceEncryptionConfigResource{
			Properties: &armrecoveryservicesbackup.BackupResourceEncryptionConfig{
				EncryptionAtRestType:          to.Ptr(armrecoveryservicesbackup.EncryptionAtRestTypeCustomerManaged),
				InfrastructureEncryptionState: to.Ptr(armrecoveryservicesbackup.InfrastructureEncryptionState("true")),
				KeyURI:                        to.Ptr("https://gktestkv1.vault.azure.net/keys/Test1/ed2e8cdc7f86477ebf0c6462b504a9ed"),
				SubscriptionID:                to.Ptr("1a2311d9-66f5-47d3-a9fb-7a37da63934b"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/BackupResourceEncryptionConfig_Put.json: %v", err)
	}
}

func TestPrivateEndpointConnection_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/PrivateEndpointConnection/GetPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get PrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewPrivateEndpointConnectionClient("04cf684a-d41f-4550-9f70-7708a3a2283b", cred, &options)
	res, err := client.Get(ctx,
		"gaallavaultbvtd2msi",
		"gaallaRG",
		"gaallatestpe2.5704c932-249a-490b-a142-1396838cd3b",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/PrivateEndpointConnection/GetPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.PrivateEndpointConnectionResource{
			Name: to.Ptr("gaallatestpe1.3592346090307038890.backup.5704c932-249a-490b-a142-1396838cd3b"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/gaallaRG/providers/Microsoft.RecoveryServicesBVTD2/vaults/gaallavaultbvtd2msi/privateEndpointConnections/gaallatestpe3.3592346090307038890.backup.5704c932-249a-490b-a142-1396838cd3b"),
			Properties: &armrecoveryservicesbackup.PrivateEndpointConnection{
				PrivateEndpoint: &armrecoveryservicesbackup.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/gaallaRG/providers/Microsoft.Network/privateEndpoints/gaallatestpe3"),
				},
				PrivateLinkServiceConnectionState: &armrecoveryservicesbackup.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Approved by johndoe@company.com"),
					Status:      to.Ptr(armrecoveryservicesbackup.PrivateEndpointConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armrecoveryservicesbackup.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnectionResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnectionResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/PrivateEndpointConnection/GetPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnection_Put(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/PrivateEndpointConnection/PutPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update PrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewPrivateEndpointConnectionClient("04cf684a-d41f-4550-9f70-7708a3a2283b", cred, &options)
	poller, err := client.BeginPut(ctx,
		"gaallavaultbvtd2msi",
		"gaallaRG",
		"gaallatestpe2.5704c932-249a-490b-a142-1396838cd3b",
		armrecoveryservicesbackup.PrivateEndpointConnectionResource{
			Properties: &armrecoveryservicesbackup.PrivateEndpointConnection{
				PrivateEndpoint: &armrecoveryservicesbackup.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/gaallaRG/providers/Microsoft.Network/privateEndpoints/gaallatestpe3"),
				},
				PrivateLinkServiceConnectionState: &armrecoveryservicesbackup.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Approved by johndoe@company.com"),
					Status:      to.Ptr(armrecoveryservicesbackup.PrivateEndpointConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armrecoveryservicesbackup.ProvisioningStateSucceeded),
			},
		},
		&armrecoveryservicesbackup.PrivateEndpointConnectionClientBeginPutOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/PrivateEndpointConnection/PutPrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/PrivateEndpointConnection/PutPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.PrivateEndpointConnectionResource{
			Name: to.Ptr("gaallatestpe1.3592346090307038890.backup.5704c932-249a-490b-a142-1396838cd3b"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/gaallaRG/providers/Microsoft.RecoveryServicesBVTD2/vaults/gaallavaultbvtd2msi/privateEndpointConnections/gaallatestpe3.3592346090307038890.backup.5704c932-249a-490b-a142-1396838cd3b"),
			Properties: &armrecoveryservicesbackup.PrivateEndpointConnection{
				PrivateEndpoint: &armrecoveryservicesbackup.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/gaallaRG/providers/Microsoft.Network/privateEndpoints/gaallatestpe3"),
				},
				PrivateLinkServiceConnectionState: &armrecoveryservicesbackup.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Approved by johndoe@company.com"),
					Status:      to.Ptr(armrecoveryservicesbackup.PrivateEndpointConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armrecoveryservicesbackup.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnectionResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnectionResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/PrivateEndpointConnection/PutPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnection_Delete(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/PrivateEndpointConnection/DeletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete PrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewPrivateEndpointConnectionClient("04cf684a-d41f-4550-9f70-7708a3a2283b", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"gaallavaultbvtd2msi",
		"gaallaRG",
		"gaallatestpe2.5704c932-249a-490b-a142-1396838cd3b",
		&armrecoveryservicesbackup.PrivateEndpointConnectionClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/PrivateEndpointConnection/DeletePrivateEndpointConnection.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/PrivateEndpointConnection/DeletePrivateEndpointConnection.json: %v", err)
	}
}

func TestPrivateEndpoint_GetOperationStatus(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/PrivateEndpointConnection/GetPrivateEndpointConnectionOperationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get OperationStatus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewPrivateEndpointClient("04cf684a-d41f-4550-9f70-7708a3a2283b", cred, &options)
	res, err := client.GetOperationStatus(ctx,
		"gaallavaultbvtd2msi",
		"gaallaRG",
		"gaallatestpe2.5704c932-249a-490b-a142-1396838cd3b",
		"0f48183b-0a44-4dca-aec1-bba5daab888a",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/PrivateEndpointConnection/GetPrivateEndpointConnectionOperationStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.OperationStatus{
			Name:      to.Ptr("0f48183b-0a44-4dca-aec1-bba5daab888a"),
			EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-27T11:59:47.5901592Z"); return t }()),
			ID:        to.Ptr("0f48183b-0a44-4dca-aec1-bba5daab888a"),
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-27T11:59:47.5901592Z"); return t }()),
			Status:    to.Ptr(armrecoveryservicesbackup.OperationStatusValuesSucceeded),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/PrivateEndpointConnection/GetPrivateEndpointConnectionOperationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecoveryServicesBackupClient_GetOperationStatus(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/BackupDataMove/BackupDataMoveOperationStatus_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get OperationStatus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.GetOperationStatus(ctx,
		"source-rsv",
		"sourceRG",
		"00000000-0000-0000-0000-000000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/BackupDataMove/BackupDataMoveOperationStatus_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.OperationStatus{
			Name:      to.Ptr("0f48183b-0a44-4dca-aec1-bba5daab888a"),
			EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-27T11:59:47.5901592Z"); return t }()),
			ID:        to.Ptr("0f48183b-0a44-4dca-aec1-bba5daab888a"),
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-27T11:59:47.5901592Z"); return t }()),
			Status:    to.Ptr(armrecoveryservicesbackup.OperationStatusValuesSucceeded),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/BackupDataMove/BackupDataMoveOperationStatus_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecoveryServicesBackupClient_BMSPrepareDataMove(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/BackupDataMove/PrepareDataMove_Post.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Prepare Data Move"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginBMSPrepareDataMove(ctx,
		"source-rsv",
		"sourceRG",
		armrecoveryservicesbackup.PrepareDataMoveRequest{
			DataMoveLevel:    to.Ptr(armrecoveryservicesbackup.DataMoveLevelVault),
			TargetRegion:     to.Ptr("USGov Virginia"),
			TargetResourceID: to.Ptr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/targetRG/providers/Microsoft.RecoveryServices/vaults/target-rsv"),
		},
		&armrecoveryservicesbackup.ClientBeginBMSPrepareDataMoveOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/BackupDataMove/PrepareDataMove_Post.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/BackupDataMove/PrepareDataMove_Post.json: %v", err)
	}
}

func TestRecoveryServicesBackupClient_BMSTriggerDataMove(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/BackupDataMove/TriggerDataMove_Post.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Trigger Data Move"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginBMSTriggerDataMove(ctx,
		"target-rsv",
		"targetRG",
		armrecoveryservicesbackup.TriggerDataMoveRequest{
			CorrelationID:    to.Ptr("MTg2OTcyMzM4NzYyMjc1NDY3Nzs1YmUzYmVmNi04YjJiLTRhOTItOTllYi01NTM0MDllYjk2NjE="),
			DataMoveLevel:    to.Ptr(armrecoveryservicesbackup.DataMoveLevelVault),
			SourceRegion:     to.Ptr("USGov Iowa"),
			SourceResourceID: to.Ptr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/sourceRG/providers/Microsoft.RecoveryServices/vaults/source-rsv"),
		},
		&armrecoveryservicesbackup.ClientBeginBMSTriggerDataMoveOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/BackupDataMove/TriggerDataMove_Post.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/BackupDataMove/TriggerDataMove_Post.json: %v", err)
	}
}

func TestRecoveryServicesBackupClient_MoveRecoveryPoint(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/TriggerRecoveryPointMove_Post.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Trigger RP Move Operation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginMoveRecoveryPoint(ctx,
		"testVault",
		"netsdktestrg",
		"Azure",
		"IaasVMContainer;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1",
		"VM;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1",
		"348916168024334",
		armrecoveryservicesbackup.MoveRPAcrossTiersRequest{
			ObjectType:     to.Ptr("MoveRPAcrossTiersRequest"),
			SourceTierType: to.Ptr(armrecoveryservicesbackup.RecoveryPointTierTypeHardenedRP),
			TargetTierType: to.Ptr(armrecoveryservicesbackup.RecoveryPointTierTypeArchivedRP),
		},
		&armrecoveryservicesbackup.ClientBeginMoveRecoveryPointOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/TriggerRecoveryPointMove_Post.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/TriggerRecoveryPointMove_Post.json: %v", err)
	}
}

func TestBMSPrepareDataMoveOperationResult_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/BackupDataMove/PrepareDataMoveOperationResult_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get operation result for PrepareDataMove"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBMSPrepareDataMoveOperationResultClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"source-rsv",
		"sourceRG",
		"00000000-0000-0000-0000-000000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/BackupDataMove/PrepareDataMoveOperationResult_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.BMSPrepareDataMoveOperationResultClientGetResponse{
			&armrecoveryservicesbackup.PrepareDataMoveResponse{
				ObjectType: to.Ptr("PrepareDataMoveResponse"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/BackupDataMove/PrepareDataMoveOperationResult_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProtectedItems_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ClassicCompute_ProtectedItem_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Protected Classic Virtual Machine Details"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewProtectedItemsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"PySDKBackupTestRsVault",
		"PythonSDKBackupTestRg",
		"Azure",
		"iaasvmcontainer;iaasvmcontainer;iaasvm-rg;iaasvm-1",
		"vm;iaasvmcontainer;iaasvm-rg;iaasvm-1",
		&armrecoveryservicesbackup.ProtectedItemsClientGetOptions{Filter: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ClassicCompute_ProtectedItem_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ProtectedItemResource{
			Name: to.Ptr("VM;iaasvmcontainer;iaasvm-rg;iaasvm-1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/PythonSDKBackupTestRg/providers/Microsoft.RecoveryServices/vaults/PySDKBackupTestRsVault/backupFabrics/Azure/protectionContainers/IaasVMContainer;iaasvmcontainer;iaasvm-rg;iaasvm-1/protectedItems/VM;iaasvmcontainer;iaasvm-rg;iaasvm-1"),
			Properties: &armrecoveryservicesbackup.AzureIaaSClassicComputeVMProtectedItem{
				BackupManagementType: to.Ptr(armrecoveryservicesbackup.BackupManagementTypeAzureIaasVM),
				ContainerName:        to.Ptr("iaasvmcontainer;iaasvm-rg;iaasvm-1"),
				LastRecoveryPoint:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-22T12:25:32.048723Z"); return t }()),
				PolicyID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/PythonSDKBackupTestRg/providers/Microsoft.RecoveryServices/vaults/PySDKBackupTestRsVault/backupPolicies/testPolicy1"),
				ProtectedItemType:    to.Ptr("Microsoft.ClassicCompute/virtualMachines"),
				SourceResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/providers/Microsoft.ClassicCompute/virtualMachines/iaasvm-1"),
				WorkloadType:         to.Ptr(armrecoveryservicesbackup.DataSourceTypeVM),
				FriendlyName:         to.Ptr("iaasvm-1"),
				HealthStatus:         to.Ptr(armrecoveryservicesbackup.HealthStatusPassed),
				LastBackupStatus:     to.Ptr("Completed"),
				LastBackupTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-22T12:25:32.048723Z"); return t }()),
				ProtectedItemDataID:  to.Ptr("636482643132986882"),
				ProtectionState:      to.Ptr(armrecoveryservicesbackup.ProtectionStateProtected),
				ProtectionStatus:     to.Ptr("Healthy"),
				VirtualMachineID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/providers/Microsoft.ClassicCompute/virtualMachines/iaasvm-1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectedItemResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectedItemResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ClassicCompute_ProtectedItem_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/Compute_ProtectedItem_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Protected Virtual Machine Details"},
	})
	client = armrecoveryservicesbackup.NewProtectedItemsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.Get(ctx,
		"PySDKBackupTestRsVault",
		"PythonSDKBackupTestRg",
		"Azure",
		"iaasvmcontainer;iaasvmcontainerv2;iaasvm-rg;iaasvm-1",
		"vm;iaasvmcontainerv2;iaasvm-rg;iaasvm-1",
		&armrecoveryservicesbackup.ProtectedItemsClientGetOptions{Filter: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/Compute_ProtectedItem_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ProtectedItemResource{
			Name: to.Ptr("VM;iaasvmcontainerv2;iaasvm-rg;iaasvm-1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/PythonSDKBackupTestRg/providers/Microsoft.RecoveryServices/vaults/PySDKBackupTestRsVault/backupFabrics/Azure/protectionContainers/IaasVMContainer;iaasvmcontainerv2;iaasvm-rg;iaasvm-1/protectedItems/VM;iaasvmcontainerv2;iaasvm-rg;iaasvm-1"),
			Properties: &armrecoveryservicesbackup.AzureIaaSComputeVMProtectedItem{
				BackupManagementType: to.Ptr(armrecoveryservicesbackup.BackupManagementTypeAzureIaasVM),
				ContainerName:        to.Ptr("iaasvmcontainerv2;iaasvm-rg;iaasvm-1"),
				LastRecoveryPoint:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-22T12:25:32.048723Z"); return t }()),
				PolicyID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/PythonSDKBackupTestRg/providers/Microsoft.RecoveryServices/vaults/PySDKBackupTestRsVault/backupPolicies/testPolicy1"),
				ProtectedItemType:    to.Ptr("Microsoft.Compute/virtualMachines"),
				SourceResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/providers/Microsoft.Compute/virtualMachines/iaasvm-1"),
				WorkloadType:         to.Ptr(armrecoveryservicesbackup.DataSourceTypeVM),
				FriendlyName:         to.Ptr("iaasvm-1"),
				HealthStatus:         to.Ptr(armrecoveryservicesbackup.HealthStatusPassed),
				LastBackupStatus:     to.Ptr("Completed"),
				LastBackupTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-22T12:25:32.048723Z"); return t }()),
				ProtectedItemDataID:  to.Ptr("636482643132986882"),
				ProtectionState:      to.Ptr(armrecoveryservicesbackup.ProtectionStateProtected),
				ProtectionStatus:     to.Ptr("Healthy"),
				VirtualMachineID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/providers/Microsoft.Compute/virtualMachines/iaasvm-1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectedItemResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectedItemResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/Compute_ProtectedItem_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProtectedItems_CreateOrUpdate(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ConfigureProtection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enable Protection on Azure IaasVm"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewProtectedItemsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		"Azure",
		"IaasVMContainer;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1",
		"VM;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1",
		armrecoveryservicesbackup.ProtectedItemResource{
			Properties: &armrecoveryservicesbackup.AzureIaaSComputeVMProtectedItem{
				PolicyID:          to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupPolicies/DefaultPolicy"),
				ProtectedItemType: to.Ptr("Microsoft.Compute/virtualMachines"),
				SourceResourceID:  to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg/providers/Microsoft.Compute/virtualMachines/netvmtestv2vm1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ConfigureProtection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ProtectedItemResource{
			Name: to.Ptr("VM;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/PythonSDKBackupTestRg/providers/Microsoft.RecoveryServices/vaults/PySDKBackupTestRsVault/backupFabrics/Azure/protectionContainers/IaasVMContainer;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1/protectedItems/VM;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1"),
			Properties: &armrecoveryservicesbackup.AzureIaaSComputeVMProtectedItem{
				BackupManagementType: to.Ptr(armrecoveryservicesbackup.BackupManagementTypeAzureIaasVM),
				ContainerName:        to.Ptr("iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1"),
				PolicyID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/PythonSDKBackupTestRg/providers/Microsoft.RecoveryServices/vaults/PySDKBackupTestRsVault/backupPolicies/testPolicy1"),
				ProtectedItemType:    to.Ptr("Microsoft.Compute/virtualMachines"),
				SourceResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg/providers/Microsoft.Compute/virtualMachines/netvmtestv2vm1"),
				WorkloadType:         to.Ptr(armrecoveryservicesbackup.DataSourceTypeVM),
				FriendlyName:         to.Ptr("netvmtestv2vm1"),
				HealthStatus:         to.Ptr(armrecoveryservicesbackup.HealthStatusPassed),
				LastBackupStatus:     to.Ptr("Completed"),
				LastBackupTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-22T12:25:32.048723Z"); return t }()),
				ProtectedItemDataID:  to.Ptr("636482643132986882"),
				ProtectionState:      to.Ptr(armrecoveryservicesbackup.ProtectionStateProtected),
				ProtectionStatus:     to.Ptr("Healthy"),
				VirtualMachineID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg/providers/Microsoft.Compute/virtualMachines/netvmtestv2vm1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectedItemResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectedItemResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ConfigureProtection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/StopProtection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop Protection with retain data on Azure IaasVm"},
	})
	client = armrecoveryservicesbackup.NewProtectedItemsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		"Azure",
		"IaasVMContainer;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1",
		"VM;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1",
		armrecoveryservicesbackup.ProtectedItemResource{
			Properties: &armrecoveryservicesbackup.AzureIaaSComputeVMProtectedItem{
				ProtectedItemType: to.Ptr("Microsoft.Compute/virtualMachines"),
				SourceResourceID:  to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg/providers/Microsoft.Compute/virtualMachines/netvmtestv2vm1"),
				ProtectionState:   to.Ptr(armrecoveryservicesbackup.ProtectionStateProtectionStopped),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/StopProtection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ProtectedItemResource{
			Name: to.Ptr("VM;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/PythonSDKBackupTestRg/providers/Microsoft.RecoveryServices/vaults/PySDKBackupTestRsVault/backupFabrics/Azure/protectionContainers/IaasVMContainer;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1/protectedItems/VM;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1"),
			Properties: &armrecoveryservicesbackup.AzureIaaSComputeVMProtectedItem{
				BackupManagementType: to.Ptr(armrecoveryservicesbackup.BackupManagementTypeAzureIaasVM),
				ContainerName:        to.Ptr("iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1"),
				PolicyID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/PythonSDKBackupTestRg/providers/Microsoft.RecoveryServices/vaults/PySDKBackupTestRsVault/backupPolicies/testPolicy1"),
				ProtectedItemType:    to.Ptr("Microsoft.Compute/virtualMachines"),
				SourceResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg/providers/Microsoft.Compute/virtualMachines/netvmtestv2vm1"),
				WorkloadType:         to.Ptr(armrecoveryservicesbackup.DataSourceTypeVM),
				FriendlyName:         to.Ptr("netvmtestv2vm1"),
				HealthStatus:         to.Ptr(armrecoveryservicesbackup.HealthStatusPassed),
				LastBackupStatus:     to.Ptr("Completed"),
				LastBackupTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-22T12:25:32.048723Z"); return t }()),
				ProtectedItemDataID:  to.Ptr("636482643132986882"),
				ProtectionState:      to.Ptr(armrecoveryservicesbackup.ProtectionStateProtectionStopped),
				ProtectionStatus:     to.Ptr("Healthy"),
				VirtualMachineID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg/providers/Microsoft.Compute/virtualMachines/netvmtestv2vm1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectedItemResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectedItemResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/StopProtection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProtectedItems_Delete(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/ProtectedItem_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Protection from Azure Virtual Machine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewProtectedItemsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"PySDKBackupTestRsVault",
		"PythonSDKBackupTestRg",
		"Azure",
		"iaasvmcontainer;iaasvmcontainerv2;pysdktestrg;pysdktestv2vm1",
		"vm;iaasvmcontainerv2;pysdktestrg;pysdktestv2vm1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/ProtectedItem_Delete.json: %v", err)
	}
}

func TestProtectedItemOperationResults_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectedItemOperationResults.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Operation Results of Protected Vm"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewProtectedItemOperationResultsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		"Azure",
		"IaasVMContainer;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1",
		"VM;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1",
		"00000000-0000-0000-0000-000000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectedItemOperationResults.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ProtectedItemResource{
			Name: to.Ptr("VM;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/PythonSDKBackupTestRg/providers/Microsoft.RecoveryServices/vaults/PySDKBackupTestRsVault/backupFabrics/Azure/protectionContainers/IaasVMContainer;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1/protectedItems/VM;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1"),
			Properties: &armrecoveryservicesbackup.AzureIaaSComputeVMProtectedItem{
				BackupManagementType: to.Ptr(armrecoveryservicesbackup.BackupManagementTypeAzureIaasVM),
				ContainerName:        to.Ptr("iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1"),
				PolicyID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/PythonSDKBackupTestRg/providers/Microsoft.RecoveryServices/vaults/PySDKBackupTestRsVault/backupPolicies/testPolicy1"),
				ProtectedItemType:    to.Ptr("Microsoft.Compute/virtualMachines"),
				SourceResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg/providers/Microsoft.Compute/virtualMachines/netvmtestv2vm1"),
				WorkloadType:         to.Ptr(armrecoveryservicesbackup.DataSourceTypeVM),
				FriendlyName:         to.Ptr("netvmtestv2vm1"),
				HealthStatus:         to.Ptr(armrecoveryservicesbackup.HealthStatusPassed),
				LastBackupStatus:     to.Ptr("Completed"),
				LastBackupTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-22T12:25:32.048723Z"); return t }()),
				ProtectedItemDataID:  to.Ptr("636482643132986882"),
				ProtectionState:      to.Ptr(armrecoveryservicesbackup.ProtectionStateProtected),
				ProtectionStatus:     to.Ptr("Healthy"),
				VirtualMachineID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg/providers/Microsoft.Compute/virtualMachines/netvmtestv2vm1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectedItemResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectedItemResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectedItemOperationResults.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecoveryPoints_List(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/RecoveryPoints_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Protected Azure Vm Recovery Points"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewRecoveryPointsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("rshvault",
		"rshhtestmdvmrg",
		"Azure",
		"IaasVMContainer;iaasvmcontainerv2;rshhtestmdvmrg;rshmdvmsmall",
		"VM;iaasvmcontainerv2;rshhtestmdvmrg;rshmdvmsmall",
		&armrecoveryservicesbackup.RecoveryPointsClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/RecoveryPoints_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicesbackup.RecoveryPointResourceList{
			Value: []*armrecoveryservicesbackup.RecoveryPointResource{
				{
					Name: to.Ptr("22244821112382"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rshhtestmdvmrg/providers/Microsoft.RecoveryServices/vaults/rshvault/backupFabrics/Azure/protectionContainers/IaasVMContainer;iaasvmcontainerv2;rshhtestmdvmrg;rshmdvmsmall/protectedItems/VM;iaasvmcontainerv2;rshhtestmdvmrg;rshmdvmsmall/recoveryPoints/22244821112382"),
					Properties: &armrecoveryservicesbackup.IaasVMRecoveryPoint{
						ObjectType:                   to.Ptr("IaasVMRecoveryPoint"),
						IsInstantIlrSessionActive:    to.Ptr(false),
						IsManagedVirtualMachine:      to.Ptr(true),
						IsSourceVMEncrypted:          to.Ptr(false),
						OriginalStorageAccountOption: to.Ptr(false),
						RecoveryPointAdditionalInfo:  to.Ptr(""),
						RecoveryPointMoveReadinessInfo: map[string]*armrecoveryservicesbackup.RecoveryPointMoveReadinessInfo{
							"Archive": {
								IsReadyForMove: to.Ptr(true),
							},
						},
						RecoveryPointTierDetails: []*armrecoveryservicesbackup.RecoveryPointTierInformationV2{
							{
								Type:   to.Ptr(armrecoveryservicesbackup.RecoveryPointTierTypeInstantRP),
								Status: to.Ptr(armrecoveryservicesbackup.RecoveryPointTierStatusDeleted),
							},
							{
								Type:   to.Ptr(armrecoveryservicesbackup.RecoveryPointTierTypeHardenedRP),
								Status: to.Ptr(armrecoveryservicesbackup.RecoveryPointTierStatusValid),
							}},
						RecoveryPointTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-21T22:48:25.4353958Z"); return t }()),
						RecoveryPointType:   to.Ptr("CrashConsistent"),
						SourceVMStorageType: to.Ptr("NormalStorage"),
						VirtualMachineSize:  to.Ptr("Standard_D1"),
					},
				},
				{
					Name: to.Ptr("24977149827250"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rshhtestmdvmrg/providers/Microsoft.RecoveryServices/vaults/rshvault/backupFabrics/Azure/protectionContainers/IaasVMContainer;iaasvmcontainerv2;rshhtestmdvmrg;rshmdvmsmall/protectedItems/VM;iaasvmcontainerv2;rshhtestmdvmrg;rshmdvmsmall/recoveryPoints/24977149827250"),
					Properties: &armrecoveryservicesbackup.IaasVMRecoveryPoint{
						ObjectType:                   to.Ptr("IaasVMRecoveryPoint"),
						IsInstantIlrSessionActive:    to.Ptr(false),
						IsManagedVirtualMachine:      to.Ptr(true),
						IsSourceVMEncrypted:          to.Ptr(false),
						OriginalStorageAccountOption: to.Ptr(false),
						RecoveryPointAdditionalInfo:  to.Ptr(""),
						RecoveryPointMoveReadinessInfo: map[string]*armrecoveryservicesbackup.RecoveryPointMoveReadinessInfo{
							"ArchivedRP": {
								AdditionalInfo: to.Ptr("Recovery point cannot be moved to archive tier since it has already been moved."),
								IsReadyForMove: to.Ptr(false),
							},
						},
						RecoveryPointTierDetails: []*armrecoveryservicesbackup.RecoveryPointTierInformationV2{
							{
								Type:   to.Ptr(armrecoveryservicesbackup.RecoveryPointTierTypeInstantRP),
								Status: to.Ptr(armrecoveryservicesbackup.RecoveryPointTierStatusDeleted),
							},
							{
								Type:   to.Ptr(armrecoveryservicesbackup.RecoveryPointTierTypeHardenedRP),
								Status: to.Ptr(armrecoveryservicesbackup.RecoveryPointTierStatusDeleted),
							},
							{
								Type: to.Ptr(armrecoveryservicesbackup.RecoveryPointTierTypeArchivedRP),
								ExtendedInfo: map[string]*string{
									"RehydratedRPExpiryTime": to.Ptr("2020-12-21T22:48:25.4353958Z"),
								},
								Status: to.Ptr(armrecoveryservicesbackup.RecoveryPointTierStatusRehydrated),
							}},
						RecoveryPointTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-20T22:49:44.3317945Z"); return t }()),
						RecoveryPointType:   to.Ptr("CrashConsistent"),
						SourceVMStorageType: to.Ptr("NormalStorage"),
						VirtualMachineSize:  to.Ptr("Standard_D1"),
						Zones: []*string{
							to.Ptr("1")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecoveryPointResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecoveryPointResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/RecoveryPoints_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecoveryPoints_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/RecoveryPoints_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Azure Vm Recovery Point Details"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewRecoveryPointsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"rshvault",
		"rshhtestmdvmrg",
		"Azure",
		"IaasVMContainer;iaasvmcontainerv2;rshhtestmdvmrg;rshmdvmsmall",
		"VM;iaasvmcontainerv2;rshhtestmdvmrg;rshmdvmsmall",
		"26083826328862",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/RecoveryPoints_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.RecoveryPointResource{
			Name: to.Ptr("26083826328862"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rshhtestmdvmrg/providers/Microsoft.RecoveryServices/vaults/rshvault/backupFabrics/Azure/protectionContainers/IaasVMContainer;iaasvmcontainerv2;rshhtestmdvmrg;rshmdvmsmall/protectedItems/VM;iaasvmcontainerv2;rshhtestmdvmrg;rshmdvmsmall/recoveryPoints/26083826328862"),
			Properties: &armrecoveryservicesbackup.IaasVMRecoveryPoint{
				ObjectType:                   to.Ptr("IaasVMRecoveryPoint"),
				IsInstantIlrSessionActive:    to.Ptr(false),
				IsManagedVirtualMachine:      to.Ptr(true),
				IsSourceVMEncrypted:          to.Ptr(false),
				OriginalStorageAccountOption: to.Ptr(false),
				RecoveryPointAdditionalInfo:  to.Ptr(""),
				RecoveryPointMoveReadinessInfo: map[string]*armrecoveryservicesbackup.RecoveryPointMoveReadinessInfo{
					"ArchivedRP": {
						IsReadyForMove: to.Ptr(true),
					},
				},
				RecoveryPointTierDetails: []*armrecoveryservicesbackup.RecoveryPointTierInformationV2{
					{
						Type:   to.Ptr(armrecoveryservicesbackup.RecoveryPointTierTypeHardenedRP),
						Status: to.Ptr(armrecoveryservicesbackup.RecoveryPointTierStatusValid),
					}},
				RecoveryPointTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-22T22:32:46.6088472Z"); return t }()),
				RecoveryPointType:   to.Ptr("CrashConsistent"),
				SourceVMStorageType: to.Ptr("NormalStorage"),
				VirtualMachineSize:  to.Ptr("Standard_D1"),
				Zones: []*string{
					to.Ptr("1")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecoveryPointResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecoveryPointResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/RecoveryPoints_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestores_Trigger(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/TriggerRestore_RestoreDisks_IaasVMRestoreRequest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restore Disks with IaasVMRestoreRequest"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewRestoresClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginTrigger(ctx,
		"testVault",
		"netsdktestrg",
		"Azure",
		"IaasVMContainer;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1",
		"VM;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1",
		"348916168024334",
		armrecoveryservicesbackup.RestoreRequestResource{
			Properties: &armrecoveryservicesbackup.IaasVMRestoreRequest{
				ObjectType:            to.Ptr("IaasVMRestoreRequest"),
				CreateNewCloudService: to.Ptr(true),
				EncryptionDetails: &armrecoveryservicesbackup.EncryptionDetails{
					EncryptionEnabled: to.Ptr(false),
				},
				IdentityInfo: &armrecoveryservicesbackup.IdentityInfo{
					IsSystemAssignedIdentity:  to.Ptr(false),
					ManagedIdentityResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/asmaskarRG1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/asmaskartestmsi"),
				},
				OriginalStorageAccountOption: to.Ptr(false),
				RecoveryPointID:              to.Ptr("348916168024334"),
				RecoveryType:                 to.Ptr(armrecoveryservicesbackup.RecoveryTypeRestoreDisks),
				Region:                       to.Ptr("southeastasia"),
				SourceResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg/providers/Microsoft.Compute/virtualMachines/netvmtestv2vm1"),
				StorageAccountID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testingRg/providers/Microsoft.Storage/storageAccounts/testAccount"),
			},
		},
		&armrecoveryservicesbackup.RestoresClientBeginTriggerOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/TriggerRestore_RestoreDisks_IaasVMRestoreRequest.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/TriggerRestore_RestoreDisks_IaasVMRestoreRequest.json: %v", err)
	}

	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/TriggerRestore_RestoreDisks_IaasVMRestoreRequest_IdentityBasedRestoreDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restore Disks with IaasVMRestoreRequest with IdentityBasedRestoreDetails"},
	})
	client = armrecoveryservicesbackup.NewRestoresClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err = client.BeginTrigger(ctx,
		"testVault",
		"netsdktestrg",
		"Azure",
		"IaasVMContainer;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1",
		"VM;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1",
		"348916168024334",
		armrecoveryservicesbackup.RestoreRequestResource{
			Properties: &armrecoveryservicesbackup.IaasVMRestoreRequest{
				ObjectType:            to.Ptr("IaasVMRestoreRequest"),
				CreateNewCloudService: to.Ptr(true),
				EncryptionDetails: &armrecoveryservicesbackup.EncryptionDetails{
					EncryptionEnabled: to.Ptr(false),
				},
				IdentityBasedRestoreDetails: &armrecoveryservicesbackup.IdentityBasedRestoreDetails{
					TargetStorageAccountID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testingRg/providers/Microsoft.Storage/storageAccounts/testAccount"),
				},
				IdentityInfo: &armrecoveryservicesbackup.IdentityInfo{
					IsSystemAssignedIdentity:  to.Ptr(false),
					ManagedIdentityResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/asmaskarRG1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/asmaskartestmsi"),
				},
				OriginalStorageAccountOption: to.Ptr(false),
				RecoveryPointID:              to.Ptr("348916168024334"),
				RecoveryType:                 to.Ptr(armrecoveryservicesbackup.RecoveryTypeRestoreDisks),
				Region:                       to.Ptr("southeastasia"),
				SourceResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg/providers/Microsoft.Compute/virtualMachines/netvmtestv2vm1"),
			},
		},
		&armrecoveryservicesbackup.RestoresClientBeginTriggerOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/TriggerRestore_RestoreDisks_IaasVMRestoreRequest_IdentityBasedRestoreDetails.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/TriggerRestore_RestoreDisks_IaasVMRestoreRequest_IdentityBasedRestoreDetails.json: %v", err)
	}

	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/TriggerRestore_RestoreDisks_IaasVMRestoreWithRehydrationRequest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restore Disks with IaasVMRestoreWithRehydrationRequest"},
	})
	client = armrecoveryservicesbackup.NewRestoresClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err = client.BeginTrigger(ctx,
		"testVault",
		"netsdktestrg",
		"Azure",
		"IaasVMContainer;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1",
		"VM;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1",
		"348916168024334",
		armrecoveryservicesbackup.RestoreRequestResource{
			Properties: &armrecoveryservicesbackup.IaasVMRestoreWithRehydrationRequest{
				ObjectType:            to.Ptr("IaasVMRestoreWithRehydrationRequest"),
				CreateNewCloudService: to.Ptr(true),
				EncryptionDetails: &armrecoveryservicesbackup.EncryptionDetails{
					EncryptionEnabled: to.Ptr(false),
				},
				OriginalStorageAccountOption: to.Ptr(false),
				RecoveryPointID:              to.Ptr("348916168024334"),
				RecoveryType:                 to.Ptr(armrecoveryservicesbackup.RecoveryTypeRestoreDisks),
				Region:                       to.Ptr("southeastasia"),
				SourceResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg/providers/Microsoft.Compute/virtualMachines/netvmtestv2vm1"),
				StorageAccountID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testingRg/providers/Microsoft.Storage/storageAccounts/testAccount"),
				RecoveryPointRehydrationInfo: &armrecoveryservicesbackup.RecoveryPointRehydrationInfo{
					RehydrationPriority:          to.Ptr(armrecoveryservicesbackup.RehydrationPriorityStandard),
					RehydrationRetentionDuration: to.Ptr("P7D"),
				},
			},
		},
		&armrecoveryservicesbackup.RestoresClientBeginTriggerOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/TriggerRestore_RestoreDisks_IaasVMRestoreWithRehydrationRequest.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/TriggerRestore_RestoreDisks_IaasVMRestoreWithRehydrationRequest.json: %v", err)
	}

	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/TriggerRestore_ALR_IaasVMRestoreRequest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restore to New Azure IaasVm with IaasVMRestoreRequest"},
	})
	client = armrecoveryservicesbackup.NewRestoresClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err = client.BeginTrigger(ctx,
		"testVault",
		"netsdktestrg",
		"Azure",
		"IaasVMContainer;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1",
		"VM;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1",
		"348916168024334",
		armrecoveryservicesbackup.RestoreRequestResource{
			Properties: &armrecoveryservicesbackup.IaasVMRestoreRequest{
				ObjectType:            to.Ptr("IaasVMRestoreRequest"),
				CreateNewCloudService: to.Ptr(false),
				EncryptionDetails: &armrecoveryservicesbackup.EncryptionDetails{
					EncryptionEnabled: to.Ptr(false),
				},
				IdentityInfo: &armrecoveryservicesbackup.IdentityInfo{
					IsSystemAssignedIdentity: to.Ptr(true),
				},
				OriginalStorageAccountOption: to.Ptr(false),
				RecoveryPointID:              to.Ptr("348916168024334"),
				RecoveryType:                 to.Ptr(armrecoveryservicesbackup.RecoveryTypeAlternateLocation),
				Region:                       to.Ptr("southeastasia"),
				SourceResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg/providers/Microsoft.Compute/virtualMachines/netvmtestv2vm1"),
				StorageAccountID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRg/providers/Microsoft.Storage/storageAccounts/testingAccount"),
				SubnetID:                     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRg/providers/Microsoft.Network/virtualNetworks/testNet/subnets/default"),
				TargetResourceGroupID:        to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg2"),
				TargetVirtualMachineID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg2/providers/Microsoft.Compute/virtualmachines/RSMDALRVM981435"),
				VirtualNetworkID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRg/providers/Microsoft.Network/virtualNetworks/testNet"),
			},
		},
		&armrecoveryservicesbackup.RestoresClientBeginTriggerOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/TriggerRestore_ALR_IaasVMRestoreRequest.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/TriggerRestore_ALR_IaasVMRestoreRequest.json: %v", err)
	}

	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/TriggerRestore_ALR_IaasVMRestoreRequest_IdentityBasedRestoreDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restore to New Azure IaasVm with IaasVMRestoreRequest with identityBasedRestoreDetails"},
	})
	client = armrecoveryservicesbackup.NewRestoresClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err = client.BeginTrigger(ctx,
		"testVault",
		"netsdktestrg",
		"Azure",
		"IaasVMContainer;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1",
		"VM;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1",
		"348916168024334",
		armrecoveryservicesbackup.RestoreRequestResource{
			Properties: &armrecoveryservicesbackup.IaasVMRestoreRequest{
				ObjectType:            to.Ptr("IaasVMRestoreRequest"),
				CreateNewCloudService: to.Ptr(false),
				EncryptionDetails: &armrecoveryservicesbackup.EncryptionDetails{
					EncryptionEnabled: to.Ptr(false),
				},
				IdentityBasedRestoreDetails: &armrecoveryservicesbackup.IdentityBasedRestoreDetails{
					TargetStorageAccountID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRg/providers/Microsoft.Storage/storageAccounts/testingAccount"),
				},
				IdentityInfo: &armrecoveryservicesbackup.IdentityInfo{
					IsSystemAssignedIdentity: to.Ptr(true),
				},
				OriginalStorageAccountOption: to.Ptr(false),
				RecoveryPointID:              to.Ptr("348916168024334"),
				RecoveryType:                 to.Ptr(armrecoveryservicesbackup.RecoveryTypeAlternateLocation),
				Region:                       to.Ptr("southeastasia"),
				SourceResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg/providers/Microsoft.Compute/virtualMachines/netvmtestv2vm1"),
				SubnetID:                     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRg/providers/Microsoft.Network/virtualNetworks/testNet/subnets/default"),
				TargetResourceGroupID:        to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg2"),
				TargetVirtualMachineID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg2/providers/Microsoft.Compute/virtualmachines/RSMDALRVM981435"),
				VirtualNetworkID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRg/providers/Microsoft.Network/virtualNetworks/testNet"),
			},
		},
		&armrecoveryservicesbackup.RestoresClientBeginTriggerOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/TriggerRestore_ALR_IaasVMRestoreRequest_IdentityBasedRestoreDetails.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/TriggerRestore_ALR_IaasVMRestoreRequest_IdentityBasedRestoreDetails.json: %v", err)
	}

	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/TriggerRestore_ALR_IaasVMRestoreWithRehydrationRequest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restore to New Azure IaasVm with IaasVMRestoreWithRehydrationRequest"},
	})
	client = armrecoveryservicesbackup.NewRestoresClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err = client.BeginTrigger(ctx,
		"testVault",
		"netsdktestrg",
		"Azure",
		"IaasVMContainer;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1",
		"VM;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1",
		"348916168024334",
		armrecoveryservicesbackup.RestoreRequestResource{
			Properties: &armrecoveryservicesbackup.IaasVMRestoreWithRehydrationRequest{
				ObjectType:            to.Ptr("IaasVMRestoreWithRehydrationRequest"),
				CreateNewCloudService: to.Ptr(false),
				EncryptionDetails: &armrecoveryservicesbackup.EncryptionDetails{
					EncryptionEnabled: to.Ptr(false),
				},
				OriginalStorageAccountOption: to.Ptr(false),
				RecoveryPointID:              to.Ptr("348916168024334"),
				RecoveryType:                 to.Ptr(armrecoveryservicesbackup.RecoveryTypeAlternateLocation),
				Region:                       to.Ptr("southeastasia"),
				SourceResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg/providers/Microsoft.Compute/virtualMachines/netvmtestv2vm1"),
				StorageAccountID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRg/providers/Microsoft.Storage/storageAccounts/testingAccount"),
				SubnetID:                     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRg/providers/Microsoft.Network/virtualNetworks/testNet/subnets/default"),
				TargetResourceGroupID:        to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg2"),
				TargetVirtualMachineID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg2/providers/Microsoft.Compute/virtualmachines/RSMDALRVM981435"),
				VirtualNetworkID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRg/providers/Microsoft.Network/virtualNetworks/testNet"),
				RecoveryPointRehydrationInfo: &armrecoveryservicesbackup.RecoveryPointRehydrationInfo{
					RehydrationPriority:          to.Ptr(armrecoveryservicesbackup.RehydrationPriorityHigh),
					RehydrationRetentionDuration: to.Ptr("P7D"),
				},
			},
		},
		&armrecoveryservicesbackup.RestoresClientBeginTriggerOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/TriggerRestore_ALR_IaasVMRestoreWithRehydrationRequest.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/TriggerRestore_ALR_IaasVMRestoreWithRehydrationRequest.json: %v", err)
	}
}

func TestBackupPolicies_List(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/BackupPolicies_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List protection policies with backupManagementType filter as AzureIaasVm"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBackupPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("NetSDKTestRsVault",
		"SwaggerTestRg",
		&armrecoveryservicesbackup.BackupPoliciesClientListOptions{Filter: to.Ptr("backupManagementType eq 'AzureIaasVM'")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/BackupPolicies_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicesbackup.ProtectionPolicyResourceList{
			Value: []*armrecoveryservicesbackup.ProtectionPolicyResource{
				{
					Name: to.Ptr("DefaultPolicy"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupPolicies"),
					ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupPolicies/DefaultPolicy"),
					Properties: &armrecoveryservicesbackup.AzureIaaSVMProtectionPolicy{
						BackupManagementType: to.Ptr("AzureIaasVM"),
						ProtectedItemsCount:  to.Ptr[int32](0),
						RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
							RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
							DailySchedule: &armrecoveryservicesbackup.DailyRetentionSchedule{
								RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
									Count:        to.Ptr[int32](30),
									DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
								},
								RetentionTimes: []*time.Time{
									to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-05T19:00:00Z"); return t }())},
							},
						},
						SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicy{
							SchedulePolicyType:   to.Ptr("SimpleSchedulePolicy"),
							ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeDaily),
							ScheduleRunTimes: []*time.Time{
								to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-05T19:00:00Z"); return t }())},
							ScheduleWeeklyFrequency: to.Ptr[int32](0),
						},
					},
				},
				{
					Name: to.Ptr("testPolicy1"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupPolicies"),
					ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupPolicies/testPolicy1"),
					Properties: &armrecoveryservicesbackup.AzureIaaSVMProtectionPolicy{
						BackupManagementType: to.Ptr("AzureIaasVM"),
						ProtectedItemsCount:  to.Ptr[int32](0),
						RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
							RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
							DailySchedule: &armrecoveryservicesbackup.DailyRetentionSchedule{
								RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
									Count:        to.Ptr[int32](1),
									DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
								},
								RetentionTimes: []*time.Time{
									to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T02:00:00Z"); return t }())},
							},
						},
						SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicy{
							SchedulePolicyType:   to.Ptr("SimpleSchedulePolicy"),
							ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeDaily),
							ScheduleRunTimes: []*time.Time{
								to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T02:00:00Z"); return t }())},
							ScheduleWeeklyFrequency: to.Ptr[int32](0),
						},
						TimeZone: to.Ptr("Pacific Standard Time"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProtectionPolicyResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProtectionPolicyResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/BackupPolicies_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/V2Policy/v2-List-Policies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List protection policies with backupManagementType filter as AzureIaasVm with both V1 and V2 policies"},
	})
	client = armrecoveryservicesbackup.NewBackupPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager = client.List("NetSDKTestRsVault",
		"SwaggerTestRg",
		&armrecoveryservicesbackup.BackupPoliciesClientListOptions{Filter: to.Ptr("backupManagementType eq 'AzureIaasVM'")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/V2Policy/v2-List-Policies.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicesbackup.ProtectionPolicyResourceList{
			Value: []*armrecoveryservicesbackup.ProtectionPolicyResource{
				{
					Name: to.Ptr("DefaultPolicy"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupPolicies"),
					ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupPolicies/DefaultPolicy"),
					Properties: &armrecoveryservicesbackup.AzureIaaSVMProtectionPolicy{
						BackupManagementType: to.Ptr("AzureIaasVM"),
						ProtectedItemsCount:  to.Ptr[int32](0),
						RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
							RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
							DailySchedule: &armrecoveryservicesbackup.DailyRetentionSchedule{
								RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
									Count:        to.Ptr[int32](30),
									DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
								},
								RetentionTimes: []*time.Time{
									to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-05T19:00:00Z"); return t }())},
							},
						},
						SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicy{
							SchedulePolicyType:   to.Ptr("SimpleSchedulePolicy"),
							ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeDaily),
							ScheduleRunTimes: []*time.Time{
								to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-05T19:00:00Z"); return t }())},
							ScheduleWeeklyFrequency: to.Ptr[int32](0),
						},
					},
				},
				{
					Name: to.Ptr("testPolicy1"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupPolicies"),
					ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupPolicies/testPolicy1"),
					Properties: &armrecoveryservicesbackup.AzureIaaSVMProtectionPolicy{
						BackupManagementType: to.Ptr("AzureIaasVM"),
						ProtectedItemsCount:  to.Ptr[int32](0),
						RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
							RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
							DailySchedule: &armrecoveryservicesbackup.DailyRetentionSchedule{
								RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
									Count:        to.Ptr[int32](1),
									DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
								},
								RetentionTimes: []*time.Time{
									to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T02:00:00Z"); return t }())},
							},
						},
						SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicy{
							SchedulePolicyType:   to.Ptr("SimpleSchedulePolicy"),
							ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeDaily),
							ScheduleRunTimes: []*time.Time{
								to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T02:00:00Z"); return t }())},
							ScheduleWeeklyFrequency: to.Ptr[int32](0),
						},
						TimeZone: to.Ptr("Pacific Standard Time"),
					},
				},
				{
					Name: to.Ptr("v2-daily-policy"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupPolicies"),
					ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupPolicies/v2-daily-policy"),
					Properties: &armrecoveryservicesbackup.AzureIaaSVMProtectionPolicy{
						BackupManagementType: to.Ptr("AzureIaasVM"),
						ProtectedItemsCount:  to.Ptr[int32](0),
						RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
							RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
							DailySchedule: &armrecoveryservicesbackup.DailyRetentionSchedule{
								RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
									Count:        to.Ptr[int32](1),
									DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
								},
								RetentionTimes: []*time.Time{
									to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T02:00:00Z"); return t }())},
							},
						},
						SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicyV2{
							SchedulePolicyType: to.Ptr("SimpleSchedulePolicyV2"),
							DailySchedule: &armrecoveryservicesbackup.DailySchedule{
								ScheduleRunTimes: []*time.Time{
									to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T10:00:00Z"); return t }())},
							},
							ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeDaily),
						},
						TimeZone: to.Ptr("Pacific Standard Time"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProtectionPolicyResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProtectionPolicyResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/V2Policy/v2-List-Policies.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureWorkload/BackupPolicies_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List protection policies with backupManagementType filter as AzureWorkload"},
	})
	client = armrecoveryservicesbackup.NewBackupPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager = client.List("NetSDKTestRsVault",
		"SwaggerTestRg",
		&armrecoveryservicesbackup.BackupPoliciesClientListOptions{Filter: to.Ptr("backupManagementType eq 'AzureWorkload'")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureWorkload/BackupPolicies_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicesbackup.ProtectionPolicyResourceList{
			Value: []*armrecoveryservicesbackup.ProtectionPolicyResource{
				{
					Name: to.Ptr("HourlyLogBackup"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupPolicies"),
					ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupPolicies/HourlyLogBackup"),
					Properties: &armrecoveryservicesbackup.AzureVMWorkloadProtectionPolicy{
						BackupManagementType: to.Ptr("AzureWorkload"),
						ProtectedItemsCount:  to.Ptr[int32](0),
						Settings: &armrecoveryservicesbackup.Settings{
							Issqlcompression: to.Ptr(false),
							TimeZone:         to.Ptr("UTC"),
						},
						SubProtectionPolicy: []*armrecoveryservicesbackup.SubProtectionPolicy{
							{
								PolicyType: to.Ptr(armrecoveryservicesbackup.PolicyTypeFull),
								RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
									RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
									DailySchedule: &armrecoveryservicesbackup.DailyRetentionSchedule{
										RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
											Count:        to.Ptr[int32](30),
											DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
										},
										RetentionTimes: []*time.Time{
											to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-05T19:00:00Z"); return t }())},
									},
								},
								SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicy{
									SchedulePolicyType:   to.Ptr("SimpleSchedulePolicy"),
									ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeDaily),
									ScheduleRunTimes: []*time.Time{
										to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-05T19:00:00Z"); return t }())},
									ScheduleWeeklyFrequency: to.Ptr[int32](0),
								},
							},
							{
								PolicyType: to.Ptr(armrecoveryservicesbackup.PolicyTypeLog),
								RetentionPolicy: &armrecoveryservicesbackup.SimpleRetentionPolicy{
									RetentionPolicyType: to.Ptr("SimpleRetentionPolicy"),
									RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
										Count:        to.Ptr[int32](30),
										DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
									},
								},
								SchedulePolicy: &armrecoveryservicesbackup.LogSchedulePolicy{
									SchedulePolicyType:      to.Ptr("LogSchedulePolicy"),
									ScheduleFrequencyInMins: to.Ptr[int32](60),
								},
							}},
						WorkLoadType: to.Ptr(armrecoveryservicesbackup.WorkloadTypeSQLDataBase),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProtectionPolicyResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProtectionPolicyResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureWorkload/BackupPolicies_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProtectionPolicies_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/V2Policy/v2-Get-Policy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Azure IaasVm Enhanced Protection Policy Details"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewProtectionPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		"v2-daily-sample",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/V2Policy/v2-Get-Policy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ProtectionPolicyResource{
			Name: to.Ptr("v2-daily-sample"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupPolicies/v2-daily-sample"),
			Properties: &armrecoveryservicesbackup.AzureIaaSVMProtectionPolicy{
				BackupManagementType:          to.Ptr("AzureIaasVM"),
				ProtectedItemsCount:           to.Ptr[int32](0),
				InstantRpRetentionRangeInDays: to.Ptr[int32](30),
				PolicyType:                    to.Ptr(armrecoveryservicesbackup.IAASVMPolicyTypeV2),
				RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
					RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
					DailySchedule: &armrecoveryservicesbackup.DailyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](1),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T02:00:00Z"); return t }())},
					},
				},
				SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicyV2{
					SchedulePolicyType: to.Ptr("SimpleSchedulePolicyV2"),
					DailySchedule: &armrecoveryservicesbackup.DailySchedule{
						ScheduleRunTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T10:00:00Z"); return t }())},
					},
					ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeDaily),
				},
				TimeZone: to.Ptr("Pacific Standard Time"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectionPolicyResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectionPolicyResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/V2Policy/v2-Get-Policy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionPolicies_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Azure IaasVm Protection Policy Details"},
	})
	client = armrecoveryservicesbackup.NewProtectionPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.Get(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		"testPolicy1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionPolicies_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ProtectionPolicyResource{
			Name: to.Ptr("testPolicy1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupPolicies"),
			ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupPolicies/testPolicy1"),
			Properties: &armrecoveryservicesbackup.AzureIaaSVMProtectionPolicy{
				BackupManagementType: to.Ptr("AzureIaasVM"),
				ProtectedItemsCount:  to.Ptr[int32](0),
				RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
					RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
					DailySchedule: &armrecoveryservicesbackup.DailyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](1),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T02:00:00Z"); return t }())},
					},
				},
				SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicy{
					SchedulePolicyType:   to.Ptr("SimpleSchedulePolicy"),
					ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeDaily),
					ScheduleRunTimes: []*time.Time{
						to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T02:00:00Z"); return t }())},
					ScheduleWeeklyFrequency: to.Ptr[int32](0),
				},
				TimeZone: to.Ptr("Pacific Standard Time"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectionPolicyResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectionPolicyResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionPolicies_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProtectionPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureStorage/ProtectionPolicies_CreateOrUpdate_Daily.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update Daily Azure Storage Protection Policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewProtectionPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"swaggertestvault",
		"SwaggerTestRg",
		"dailyPolicy2",
		armrecoveryservicesbackup.ProtectionPolicyResource{
			Properties: &armrecoveryservicesbackup.AzureFileShareProtectionPolicy{
				BackupManagementType: to.Ptr("AzureStorage"),
				RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
					RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
					DailySchedule: &armrecoveryservicesbackup.DailyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](5),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-29T08:00:00.000Z"); return t }())},
					},
					MonthlySchedule: &armrecoveryservicesbackup.MonthlyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](60),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeMonths),
						},
						RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
						RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
							DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
							WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
								to.Ptr(armrecoveryservicesbackup.WeekOfMonthFirst)},
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-29T08:00:00.000Z"); return t }())},
					},
					WeeklySchedule: &armrecoveryservicesbackup.WeeklyRetentionSchedule{
						DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
							to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](12),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeWeeks),
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-29T08:00:00.000Z"); return t }())},
					},
					YearlySchedule: &armrecoveryservicesbackup.YearlyRetentionSchedule{
						MonthsOfYear: []*armrecoveryservicesbackup.MonthOfYear{
							to.Ptr(armrecoveryservicesbackup.MonthOfYearJanuary)},
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](10),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeYears),
						},
						RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
						RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
							DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
							WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
								to.Ptr(armrecoveryservicesbackup.WeekOfMonthFirst)},
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-29T08:00:00.000Z"); return t }())},
					},
				},
				SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicy{
					SchedulePolicyType:   to.Ptr("SimpleSchedulePolicy"),
					ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeDaily),
					ScheduleRunTimes: []*time.Time{
						to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-29T08:00:00.000Z"); return t }())},
				},
				TimeZone:     to.Ptr("UTC"),
				WorkLoadType: to.Ptr(armrecoveryservicesbackup.WorkloadTypeAzureFileShare),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureStorage/ProtectionPolicies_CreateOrUpdate_Daily.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ProtectionPolicyResource{
			Name: to.Ptr("dailyPolicy2"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/swaggertestvault/backupPolicies/dailyPolicy2"),
			Properties: &armrecoveryservicesbackup.AzureFileShareProtectionPolicy{
				BackupManagementType: to.Ptr("AzureStorage"),
				ProtectedItemsCount:  to.Ptr[int32](0),
				RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
					RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
					DailySchedule: &armrecoveryservicesbackup.DailyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](5),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-29T08:00:00Z"); return t }())},
					},
					MonthlySchedule: &armrecoveryservicesbackup.MonthlyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](60),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeMonths),
						},
						RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
						RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
							DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
							WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
								to.Ptr(armrecoveryservicesbackup.WeekOfMonthFirst)},
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-29T08:00:00Z"); return t }())},
					},
					WeeklySchedule: &armrecoveryservicesbackup.WeeklyRetentionSchedule{
						DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
							to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](12),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeWeeks),
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-29T08:00:00Z"); return t }())},
					},
					YearlySchedule: &armrecoveryservicesbackup.YearlyRetentionSchedule{
						MonthsOfYear: []*armrecoveryservicesbackup.MonthOfYear{
							to.Ptr(armrecoveryservicesbackup.MonthOfYearJanuary)},
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](10),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeYears),
						},
						RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
						RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
							DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
							WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
								to.Ptr(armrecoveryservicesbackup.WeekOfMonthFirst)},
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-29T08:00:00Z"); return t }())},
					},
				},
				SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicy{
					SchedulePolicyType:   to.Ptr("SimpleSchedulePolicy"),
					ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeDaily),
					ScheduleRunTimes: []*time.Time{
						to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-29T08:00:00Z"); return t }())},
					ScheduleWeeklyFrequency: to.Ptr[int32](0),
				},
				TimeZone: to.Ptr("UTC"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectionPolicyResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectionPolicyResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureStorage/ProtectionPolicies_CreateOrUpdate_Daily.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/V2Policy/IaaS_v2_hourly.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update Enhanced Azure Vm Protection Policy with Hourly backup"},
	})
	client = armrecoveryservicesbackup.NewProtectionPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		"v2-daily-sample",
		armrecoveryservicesbackup.ProtectionPolicyResource{
			Properties: &armrecoveryservicesbackup.AzureIaaSVMProtectionPolicy{
				BackupManagementType:          to.Ptr("AzureIaasVM"),
				InstantRpRetentionRangeInDays: to.Ptr[int32](30),
				PolicyType:                    to.Ptr(armrecoveryservicesbackup.IAASVMPolicyTypeV2),
				RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
					RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
					DailySchedule: &armrecoveryservicesbackup.DailyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](180),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-17T08:00:00+00:00"); return t }())},
					},
					MonthlySchedule: &armrecoveryservicesbackup.MonthlyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](60),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeMonths),
						},
						RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
						RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
							DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
							WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
								to.Ptr(armrecoveryservicesbackup.WeekOfMonthFirst)},
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-17T08:00:00+00:00"); return t }())},
					},
					WeeklySchedule: &armrecoveryservicesbackup.WeeklyRetentionSchedule{
						DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
							to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](12),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeWeeks),
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-17T08:00:00+00:00"); return t }())},
					},
					YearlySchedule: &armrecoveryservicesbackup.YearlyRetentionSchedule{
						MonthsOfYear: []*armrecoveryservicesbackup.MonthOfYear{
							to.Ptr(armrecoveryservicesbackup.MonthOfYearJanuary)},
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](10),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeYears),
						},
						RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
						RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
							DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
							WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
								to.Ptr(armrecoveryservicesbackup.WeekOfMonthFirst)},
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-17T08:00:00+00:00"); return t }())},
					},
				},
				SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicyV2{
					SchedulePolicyType: to.Ptr("SimpleSchedulePolicyV2"),
					HourlySchedule: &armrecoveryservicesbackup.HourlySchedule{
						Interval:                to.Ptr[int32](4),
						ScheduleWindowDuration:  to.Ptr[int32](16),
						ScheduleWindowStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-17T08:00:00Z"); return t }()),
					},
					ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeHourly),
				},
				TimeZone: to.Ptr("India Standard Time"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/V2Policy/IaaS_v2_hourly.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ProtectionPolicyResource{
			Name: to.Ptr("v2-daily-sample"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupPolicies/v2-daily-sample"),
			Properties: &armrecoveryservicesbackup.AzureIaaSVMProtectionPolicy{
				BackupManagementType:          to.Ptr("AzureIaasVM"),
				ProtectedItemsCount:           to.Ptr[int32](0),
				InstantRpRetentionRangeInDays: to.Ptr[int32](30),
				PolicyType:                    to.Ptr(armrecoveryservicesbackup.IAASVMPolicyTypeV2),
				RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
					RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
					DailySchedule: &armrecoveryservicesbackup.DailyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](180),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-17T08:00:00+00:00"); return t }())},
					},
					MonthlySchedule: &armrecoveryservicesbackup.MonthlyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](60),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeMonths),
						},
						RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
						RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
							DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
							WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
								to.Ptr(armrecoveryservicesbackup.WeekOfMonthFirst)},
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-17T08:00:00+00:00"); return t }())},
					},
					WeeklySchedule: &armrecoveryservicesbackup.WeeklyRetentionSchedule{
						DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
							to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](12),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeWeeks),
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-17T08:00:00+00:00"); return t }())},
					},
					YearlySchedule: &armrecoveryservicesbackup.YearlyRetentionSchedule{
						MonthsOfYear: []*armrecoveryservicesbackup.MonthOfYear{
							to.Ptr(armrecoveryservicesbackup.MonthOfYearJanuary)},
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](10),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeYears),
						},
						RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
						RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
							DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
							WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
								to.Ptr(armrecoveryservicesbackup.WeekOfMonthFirst)},
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-17T08:00:00+00:00"); return t }())},
					},
				},
				SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicyV2{
					SchedulePolicyType: to.Ptr("SimpleSchedulePolicyV2"),
					HourlySchedule: &armrecoveryservicesbackup.HourlySchedule{
						Interval:                to.Ptr[int32](4),
						ScheduleWindowDuration:  to.Ptr[int32](16),
						ScheduleWindowStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-17T08:00:00Z"); return t }()),
					},
					ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeHourly),
				},
				TimeZone: to.Ptr("India Standard Time"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectionPolicyResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectionPolicyResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/V2Policy/IaaS_v2_hourly.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/V2Policy/IaaS_v2_daily.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update Enhanced Azure Vm Protection Policy with daily backup"},
	})
	client = armrecoveryservicesbackup.NewProtectionPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		"v2-daily-sample",
		armrecoveryservicesbackup.ProtectionPolicyResource{
			Properties: &armrecoveryservicesbackup.AzureIaaSVMProtectionPolicy{
				BackupManagementType:          to.Ptr("AzureIaasVM"),
				InstantRpRetentionRangeInDays: to.Ptr[int32](30),
				PolicyType:                    to.Ptr(armrecoveryservicesbackup.IAASVMPolicyTypeV2),
				RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
					RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
					DailySchedule: &armrecoveryservicesbackup.DailyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](180),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-17T08:00:00+00:00"); return t }())},
					},
					MonthlySchedule: &armrecoveryservicesbackup.MonthlyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](60),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeMonths),
						},
						RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
						RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
							DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
							WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
								to.Ptr(armrecoveryservicesbackup.WeekOfMonthFirst)},
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-17T08:00:00+00:00"); return t }())},
					},
					WeeklySchedule: &armrecoveryservicesbackup.WeeklyRetentionSchedule{
						DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
							to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](12),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeWeeks),
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-17T08:00:00+00:00"); return t }())},
					},
					YearlySchedule: &armrecoveryservicesbackup.YearlyRetentionSchedule{
						MonthsOfYear: []*armrecoveryservicesbackup.MonthOfYear{
							to.Ptr(armrecoveryservicesbackup.MonthOfYearJanuary)},
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](10),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeYears),
						},
						RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
						RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
							DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
							WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
								to.Ptr(armrecoveryservicesbackup.WeekOfMonthFirst)},
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-17T08:00:00+00:00"); return t }())},
					},
				},
				SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicyV2{
					SchedulePolicyType: to.Ptr("SimpleSchedulePolicyV2"),
					DailySchedule: &armrecoveryservicesbackup.DailySchedule{
						ScheduleRunTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T10:00:00Z"); return t }())},
					},
					ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeDaily),
				},
				TimeZone: to.Ptr("India Standard Time"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/V2Policy/IaaS_v2_daily.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ProtectionPolicyResource{
			Name: to.Ptr("v2-daily-sample"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupPolicies/v2-daily-sample"),
			Properties: &armrecoveryservicesbackup.AzureIaaSVMProtectionPolicy{
				BackupManagementType:          to.Ptr("AzureIaasVM"),
				ProtectedItemsCount:           to.Ptr[int32](0),
				InstantRpRetentionRangeInDays: to.Ptr[int32](30),
				PolicyType:                    to.Ptr(armrecoveryservicesbackup.IAASVMPolicyTypeV2),
				RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
					RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
					DailySchedule: &armrecoveryservicesbackup.DailyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](180),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-17T08:00:00+00:00"); return t }())},
					},
					MonthlySchedule: &armrecoveryservicesbackup.MonthlyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](60),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeMonths),
						},
						RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
						RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
							DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
							WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
								to.Ptr(armrecoveryservicesbackup.WeekOfMonthFirst)},
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-17T08:00:00+00:00"); return t }())},
					},
					WeeklySchedule: &armrecoveryservicesbackup.WeeklyRetentionSchedule{
						DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
							to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](12),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeWeeks),
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-17T08:00:00+00:00"); return t }())},
					},
					YearlySchedule: &armrecoveryservicesbackup.YearlyRetentionSchedule{
						MonthsOfYear: []*armrecoveryservicesbackup.MonthOfYear{
							to.Ptr(armrecoveryservicesbackup.MonthOfYearJanuary)},
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](10),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeYears),
						},
						RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
						RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
							DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
							WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
								to.Ptr(armrecoveryservicesbackup.WeekOfMonthFirst)},
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-12-17T08:00:00+00:00"); return t }())},
					},
				},
				SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicyV2{
					SchedulePolicyType: to.Ptr("SimpleSchedulePolicyV2"),
					DailySchedule: &armrecoveryservicesbackup.DailySchedule{
						ScheduleRunTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T10:00:00Z"); return t }())},
					},
					ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeDaily),
				},
				TimeZone: to.Ptr("India Standard Time"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectionPolicyResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectionPolicyResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/V2Policy/IaaS_v2_daily.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionPolicies_CreateOrUpdate_Complex.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update Full Azure Vm Protection Policy"},
	})
	client = armrecoveryservicesbackup.NewProtectionPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		"testPolicy1",
		armrecoveryservicesbackup.ProtectionPolicyResource{
			Properties: &armrecoveryservicesbackup.AzureIaaSVMProtectionPolicy{
				BackupManagementType: to.Ptr("AzureIaasVM"),
				RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
					RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
					MonthlySchedule: &armrecoveryservicesbackup.MonthlyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](2),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeMonths),
						},
						RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
						RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
							DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekWednesday),
								to.Ptr(armrecoveryservicesbackup.DayOfWeekThursday)},
							WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
								to.Ptr(armrecoveryservicesbackup.WeekOfMonthFirst),
								to.Ptr(armrecoveryservicesbackup.WeekOfMonthThird)},
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T10:00:00Z"); return t }())},
					},
					WeeklySchedule: &armrecoveryservicesbackup.WeeklyRetentionSchedule{
						DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
							to.Ptr(armrecoveryservicesbackup.DayOfWeekMonday),
							to.Ptr(armrecoveryservicesbackup.DayOfWeekWednesday),
							to.Ptr(armrecoveryservicesbackup.DayOfWeekThursday)},
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](1),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeWeeks),
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T10:00:00Z"); return t }())},
					},
					YearlySchedule: &armrecoveryservicesbackup.YearlyRetentionSchedule{
						MonthsOfYear: []*armrecoveryservicesbackup.MonthOfYear{
							to.Ptr(armrecoveryservicesbackup.MonthOfYearFebruary),
							to.Ptr(armrecoveryservicesbackup.MonthOfYearNovember)},
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](4),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeYears),
						},
						RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
						RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
							DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekMonday),
								to.Ptr(armrecoveryservicesbackup.DayOfWeekThursday)},
							WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
								to.Ptr(armrecoveryservicesbackup.WeekOfMonthFourth)},
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T10:00:00Z"); return t }())},
					},
				},
				SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicy{
					SchedulePolicyType: to.Ptr("SimpleSchedulePolicy"),
					ScheduleRunDays: []*armrecoveryservicesbackup.DayOfWeek{
						to.Ptr(armrecoveryservicesbackup.DayOfWeekMonday),
						to.Ptr(armrecoveryservicesbackup.DayOfWeekWednesday),
						to.Ptr(armrecoveryservicesbackup.DayOfWeekThursday)},
					ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeWeekly),
					ScheduleRunTimes: []*time.Time{
						to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T10:00:00Z"); return t }())},
				},
				TimeZone: to.Ptr("Pacific Standard Time"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionPolicies_CreateOrUpdate_Complex.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ProtectionPolicyResource{
			Name: to.Ptr("testPolicy1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupPolicies"),
			ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupPolicies/testPolicy1"),
			Properties: &armrecoveryservicesbackup.AzureIaaSVMProtectionPolicy{
				BackupManagementType: to.Ptr("AzureIaasVM"),
				ProtectedItemsCount:  to.Ptr[int32](0),
				RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
					RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
					MonthlySchedule: &armrecoveryservicesbackup.MonthlyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](2),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeMonths),
						},
						RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
						RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
							DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekWednesday),
								to.Ptr(armrecoveryservicesbackup.DayOfWeekThursday)},
							WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
								to.Ptr(armrecoveryservicesbackup.WeekOfMonthFirst),
								to.Ptr(armrecoveryservicesbackup.WeekOfMonthThird)},
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T10:00:00Z"); return t }())},
					},
					WeeklySchedule: &armrecoveryservicesbackup.WeeklyRetentionSchedule{
						DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
							to.Ptr(armrecoveryservicesbackup.DayOfWeekMonday),
							to.Ptr(armrecoveryservicesbackup.DayOfWeekWednesday),
							to.Ptr(armrecoveryservicesbackup.DayOfWeekThursday)},
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](1),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeWeeks),
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T10:00:00Z"); return t }())},
					},
					YearlySchedule: &armrecoveryservicesbackup.YearlyRetentionSchedule{
						MonthsOfYear: []*armrecoveryservicesbackup.MonthOfYear{
							to.Ptr(armrecoveryservicesbackup.MonthOfYearFebruary),
							to.Ptr(armrecoveryservicesbackup.MonthOfYearNovember)},
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](4),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeYears),
						},
						RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
						RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
							DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekMonday),
								to.Ptr(armrecoveryservicesbackup.DayOfWeekThursday)},
							WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
								to.Ptr(armrecoveryservicesbackup.WeekOfMonthFourth)},
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T10:00:00Z"); return t }())},
					},
				},
				SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicy{
					SchedulePolicyType: to.Ptr("SimpleSchedulePolicy"),
					ScheduleRunDays: []*armrecoveryservicesbackup.DayOfWeek{
						to.Ptr(armrecoveryservicesbackup.DayOfWeekMonday),
						to.Ptr(armrecoveryservicesbackup.DayOfWeekWednesday),
						to.Ptr(armrecoveryservicesbackup.DayOfWeekThursday)},
					ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeWeekly),
					ScheduleRunTimes: []*time.Time{
						to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T10:00:00Z"); return t }())},
					ScheduleWeeklyFrequency: to.Ptr[int32](0),
				},
				TimeZone: to.Ptr("Pacific Standard Time"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectionPolicyResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectionPolicyResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionPolicies_CreateOrUpdate_Complex.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureWorkload/ProtectionPolicies_CreateOrUpdate_Complex.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update Full Azure Workload Protection Policy"},
	})
	client = armrecoveryservicesbackup.NewProtectionPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		"testPolicy1",
		armrecoveryservicesbackup.ProtectionPolicyResource{
			Properties: &armrecoveryservicesbackup.AzureVMWorkloadProtectionPolicy{
				BackupManagementType: to.Ptr("AzureWorkload"),
				Settings: &armrecoveryservicesbackup.Settings{
					Issqlcompression: to.Ptr(false),
					TimeZone:         to.Ptr("Pacific Standard Time"),
				},
				SubProtectionPolicy: []*armrecoveryservicesbackup.SubProtectionPolicy{
					{
						PolicyType: to.Ptr(armrecoveryservicesbackup.PolicyTypeFull),
						RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
							RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
							MonthlySchedule: &armrecoveryservicesbackup.MonthlyRetentionSchedule{
								RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
									Count:        to.Ptr[int32](1),
									DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeMonths),
								},
								RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
								RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
									DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
										to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
									WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
										to.Ptr(armrecoveryservicesbackup.WeekOfMonthSecond)},
								},
								RetentionTimes: []*time.Time{
									to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T10:00:00Z"); return t }())},
							},
							WeeklySchedule: &armrecoveryservicesbackup.WeeklyRetentionSchedule{
								DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
									to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday),
									to.Ptr(armrecoveryservicesbackup.DayOfWeekTuesday)},
								RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
									Count:        to.Ptr[int32](2),
									DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeWeeks),
								},
								RetentionTimes: []*time.Time{
									to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T10:00:00Z"); return t }())},
							},
							YearlySchedule: &armrecoveryservicesbackup.YearlyRetentionSchedule{
								MonthsOfYear: []*armrecoveryservicesbackup.MonthOfYear{
									to.Ptr(armrecoveryservicesbackup.MonthOfYearJanuary),
									to.Ptr(armrecoveryservicesbackup.MonthOfYearJune),
									to.Ptr(armrecoveryservicesbackup.MonthOfYearDecember)},
								RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
									Count:        to.Ptr[int32](1),
									DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeYears),
								},
								RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
								RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
									DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
										to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
									WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
										to.Ptr(armrecoveryservicesbackup.WeekOfMonthLast)},
								},
								RetentionTimes: []*time.Time{
									to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T10:00:00Z"); return t }())},
							},
						},
						SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicy{
							SchedulePolicyType: to.Ptr("SimpleSchedulePolicy"),
							ScheduleRunDays: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday),
								to.Ptr(armrecoveryservicesbackup.DayOfWeekTuesday)},
							ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeWeekly),
							ScheduleRunTimes: []*time.Time{
								to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T10:00:00Z"); return t }())},
						},
					},
					{
						PolicyType: to.Ptr(armrecoveryservicesbackup.PolicyTypeDifferential),
						RetentionPolicy: &armrecoveryservicesbackup.SimpleRetentionPolicy{
							RetentionPolicyType: to.Ptr("SimpleRetentionPolicy"),
							RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
								Count:        to.Ptr[int32](8),
								DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
							},
						},
						SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicy{
							SchedulePolicyType: to.Ptr("SimpleSchedulePolicy"),
							ScheduleRunDays: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekFriday)},
							ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeWeekly),
							ScheduleRunTimes: []*time.Time{
								to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T10:00:00Z"); return t }())},
						},
					},
					{
						PolicyType: to.Ptr(armrecoveryservicesbackup.PolicyTypeLog),
						RetentionPolicy: &armrecoveryservicesbackup.SimpleRetentionPolicy{
							RetentionPolicyType: to.Ptr("SimpleRetentionPolicy"),
							RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
								Count:        to.Ptr[int32](7),
								DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
							},
						},
						SchedulePolicy: &armrecoveryservicesbackup.LogSchedulePolicy{
							SchedulePolicyType:      to.Ptr("LogSchedulePolicy"),
							ScheduleFrequencyInMins: to.Ptr[int32](60),
						},
					}},
				WorkLoadType: to.Ptr(armrecoveryservicesbackup.WorkloadTypeSQLDataBase),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureWorkload/ProtectionPolicies_CreateOrUpdate_Complex.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ProtectionPolicyResource{
			Name: to.Ptr("testPolicy1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupPolicies"),
			ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupPolicies/testPolicy1"),
			Properties: &armrecoveryservicesbackup.AzureVMWorkloadProtectionPolicy{
				BackupManagementType: to.Ptr("AzureWorkload"),
				ProtectedItemsCount:  to.Ptr[int32](0),
				Settings: &armrecoveryservicesbackup.Settings{
					Issqlcompression: to.Ptr(false),
					TimeZone:         to.Ptr("Pacific Standard Time"),
				},
				SubProtectionPolicy: []*armrecoveryservicesbackup.SubProtectionPolicy{
					{
						PolicyType: to.Ptr(armrecoveryservicesbackup.PolicyTypeFull),
						RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
							RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
							MonthlySchedule: &armrecoveryservicesbackup.MonthlyRetentionSchedule{
								RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
									Count:        to.Ptr[int32](1),
									DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeMonths),
								},
								RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
								RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
									DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
										to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
									WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
										to.Ptr(armrecoveryservicesbackup.WeekOfMonthSecond)},
								},
								RetentionTimes: []*time.Time{
									to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T10:00:00Z"); return t }())},
							},
							WeeklySchedule: &armrecoveryservicesbackup.WeeklyRetentionSchedule{
								DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
									to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday),
									to.Ptr(armrecoveryservicesbackup.DayOfWeekTuesday)},
								RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
									Count:        to.Ptr[int32](2),
									DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeWeeks),
								},
								RetentionTimes: []*time.Time{
									to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T10:00:00Z"); return t }())},
							},
							YearlySchedule: &armrecoveryservicesbackup.YearlyRetentionSchedule{
								MonthsOfYear: []*armrecoveryservicesbackup.MonthOfYear{
									to.Ptr(armrecoveryservicesbackup.MonthOfYearJanuary),
									to.Ptr(armrecoveryservicesbackup.MonthOfYearJune),
									to.Ptr(armrecoveryservicesbackup.MonthOfYearDecember)},
								RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
									Count:        to.Ptr[int32](1),
									DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeYears),
								},
								RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
								RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
									DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
										to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
									WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
										to.Ptr(armrecoveryservicesbackup.WeekOfMonthLast)},
								},
								RetentionTimes: []*time.Time{
									to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T10:00:00Z"); return t }())},
							},
						},
						SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicy{
							SchedulePolicyType: to.Ptr("SimpleSchedulePolicy"),
							ScheduleRunDays: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday),
								to.Ptr(armrecoveryservicesbackup.DayOfWeekTuesday)},
							ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeWeekly),
							ScheduleRunTimes: []*time.Time{
								to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T10:00:00Z"); return t }())},
							ScheduleWeeklyFrequency: to.Ptr[int32](0),
						},
					},
					{
						PolicyType: to.Ptr(armrecoveryservicesbackup.PolicyTypeDifferential),
						RetentionPolicy: &armrecoveryservicesbackup.SimpleRetentionPolicy{
							RetentionPolicyType: to.Ptr("SimpleRetentionPolicy"),
							RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
								Count:        to.Ptr[int32](8),
								DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
							},
						},
						SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicy{
							SchedulePolicyType: to.Ptr("SimpleSchedulePolicy"),
							ScheduleRunDays: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekFriday)},
							ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeWeekly),
							ScheduleRunTimes: []*time.Time{
								to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T10:00:00Z"); return t }())},
							ScheduleWeeklyFrequency: to.Ptr[int32](0),
						},
					},
					{
						PolicyType: to.Ptr(armrecoveryservicesbackup.PolicyTypeLog),
						RetentionPolicy: &armrecoveryservicesbackup.SimpleRetentionPolicy{
							RetentionPolicyType: to.Ptr("SimpleRetentionPolicy"),
							RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
								Count:        to.Ptr[int32](7),
								DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
							},
						},
						SchedulePolicy: &armrecoveryservicesbackup.LogSchedulePolicy{
							SchedulePolicyType:      to.Ptr("LogSchedulePolicy"),
							ScheduleFrequencyInMins: to.Ptr[int32](60),
						},
					}},
				WorkLoadType: to.Ptr(armrecoveryservicesbackup.WorkloadTypeSQLDataBase),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectionPolicyResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectionPolicyResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureWorkload/ProtectionPolicies_CreateOrUpdate_Complex.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureStorage/ProtectionPolicies_CreateOrUpdate_Hourly.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update Hourly Azure Storage Protection Policy"},
	})
	client = armrecoveryservicesbackup.NewProtectionPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"swaggertestvault",
		"SwaggerTestRg",
		"newPolicy2",
		armrecoveryservicesbackup.ProtectionPolicyResource{
			Properties: &armrecoveryservicesbackup.AzureFileShareProtectionPolicy{
				BackupManagementType: to.Ptr("AzureStorage"),
				RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
					RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
					DailySchedule: &armrecoveryservicesbackup.DailyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](5),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
						},
					},
					MonthlySchedule: &armrecoveryservicesbackup.MonthlyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](60),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeMonths),
						},
						RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
						RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
							DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
							WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
								to.Ptr(armrecoveryservicesbackup.WeekOfMonthFirst)},
						},
					},
					WeeklySchedule: &armrecoveryservicesbackup.WeeklyRetentionSchedule{
						DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
							to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](12),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeWeeks),
						},
					},
					YearlySchedule: &armrecoveryservicesbackup.YearlyRetentionSchedule{
						MonthsOfYear: []*armrecoveryservicesbackup.MonthOfYear{
							to.Ptr(armrecoveryservicesbackup.MonthOfYearJanuary)},
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](10),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeYears),
						},
						RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
						RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
							DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
							WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
								to.Ptr(armrecoveryservicesbackup.WeekOfMonthFirst)},
						},
					},
				},
				SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicy{
					SchedulePolicyType: to.Ptr("SimpleSchedulePolicy"),
					HourlySchedule: &armrecoveryservicesbackup.HourlySchedule{
						Interval:                to.Ptr[int32](4),
						ScheduleWindowDuration:  to.Ptr[int32](12),
						ScheduleWindowStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-29T08:00:00.000Z"); return t }()),
					},
					ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeHourly),
				},
				TimeZone:     to.Ptr("UTC"),
				WorkLoadType: to.Ptr(armrecoveryservicesbackup.WorkloadTypeAzureFileShare),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureStorage/ProtectionPolicies_CreateOrUpdate_Hourly.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ProtectionPolicyResource{
			Name: to.Ptr("newPolicy2"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/swaggertestvault/backupPolicies/newPolicy2"),
			Properties: &armrecoveryservicesbackup.AzureFileShareProtectionPolicy{
				BackupManagementType: to.Ptr("AzureStorage"),
				ProtectedItemsCount:  to.Ptr[int32](0),
				RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
					RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
					DailySchedule: &armrecoveryservicesbackup.DailyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](5),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-29T20:00:00Z"); return t }())},
					},
					MonthlySchedule: &armrecoveryservicesbackup.MonthlyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](60),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeMonths),
						},
						RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
						RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
							DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
							WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
								to.Ptr(armrecoveryservicesbackup.WeekOfMonthFirst)},
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-29T20:00:00Z"); return t }())},
					},
					WeeklySchedule: &armrecoveryservicesbackup.WeeklyRetentionSchedule{
						DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
							to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](12),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeWeeks),
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-29T20:00:00Z"); return t }())},
					},
					YearlySchedule: &armrecoveryservicesbackup.YearlyRetentionSchedule{
						MonthsOfYear: []*armrecoveryservicesbackup.MonthOfYear{
							to.Ptr(armrecoveryservicesbackup.MonthOfYearJanuary)},
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](10),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeYears),
						},
						RetentionScheduleFormatType: to.Ptr(armrecoveryservicesbackup.RetentionScheduleFormatWeekly),
						RetentionScheduleWeekly: &armrecoveryservicesbackup.WeeklyRetentionFormat{
							DaysOfTheWeek: []*armrecoveryservicesbackup.DayOfWeek{
								to.Ptr(armrecoveryservicesbackup.DayOfWeekSunday)},
							WeeksOfTheMonth: []*armrecoveryservicesbackup.WeekOfMonth{
								to.Ptr(armrecoveryservicesbackup.WeekOfMonthFirst)},
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-29T20:00:00Z"); return t }())},
					},
				},
				SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicy{
					SchedulePolicyType: to.Ptr("SimpleSchedulePolicy"),
					HourlySchedule: &armrecoveryservicesbackup.HourlySchedule{
						Interval:                to.Ptr[int32](4),
						ScheduleWindowDuration:  to.Ptr[int32](12),
						ScheduleWindowStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-29T08:00:00Z"); return t }()),
					},
					ScheduleRunFrequency:    to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeHourly),
					ScheduleWeeklyFrequency: to.Ptr[int32](0),
				},
				TimeZone: to.Ptr("UTC"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectionPolicyResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectionPolicyResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureStorage/ProtectionPolicies_CreateOrUpdate_Hourly.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionPolicies_CreateOrUpdate_Simple.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update Simple Azure Vm Protection Policy"},
	})
	client = armrecoveryservicesbackup.NewProtectionPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		"testPolicy1",
		armrecoveryservicesbackup.ProtectionPolicyResource{
			Properties: &armrecoveryservicesbackup.AzureIaaSVMProtectionPolicy{
				BackupManagementType: to.Ptr("AzureIaasVM"),
				RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
					RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
					DailySchedule: &armrecoveryservicesbackup.DailyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](1),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T02:00:00Z"); return t }())},
					},
				},
				SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicy{
					SchedulePolicyType:   to.Ptr("SimpleSchedulePolicy"),
					ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeDaily),
					ScheduleRunTimes: []*time.Time{
						to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T02:00:00Z"); return t }())},
				},
				TimeZone: to.Ptr("Pacific Standard Time"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionPolicies_CreateOrUpdate_Simple.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ProtectionPolicyResource{
			Name: to.Ptr("testPolicy1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupPolicies"),
			ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupPolicies/testPolicy1"),
			Properties: &armrecoveryservicesbackup.AzureIaaSVMProtectionPolicy{
				BackupManagementType: to.Ptr("AzureIaasVM"),
				ProtectedItemsCount:  to.Ptr[int32](0),
				RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
					RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
					DailySchedule: &armrecoveryservicesbackup.DailyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](1),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T02:00:00Z"); return t }())},
					},
				},
				SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicy{
					SchedulePolicyType:   to.Ptr("SimpleSchedulePolicy"),
					ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeDaily),
					ScheduleRunTimes: []*time.Time{
						to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T02:00:00Z"); return t }())},
					ScheduleWeeklyFrequency: to.Ptr[int32](0),
				},
				TimeZone: to.Ptr("Pacific Standard Time"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectionPolicyResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectionPolicyResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionPolicies_CreateOrUpdate_Simple.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProtectionPolicies_Delete(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionPolicies_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Azure Vm Protection Policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewProtectionPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		"testPolicy1",
		&armrecoveryservicesbackup.ProtectionPoliciesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionPolicies_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionPolicies_Delete.json: %v", err)
	}
}

func TestProtectionPolicyOperationResults_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionPolicyOperationResults_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Protection Policy Operation Results"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewProtectionPolicyOperationResultsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		"testPolicy1",
		"00000000-0000-0000-0000-000000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionPolicyOperationResults_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ProtectionPolicyResource{
			Name: to.Ptr("testPolicy1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupPolicies"),
			ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupPolicies/testPolicy1"),
			Properties: &armrecoveryservicesbackup.AzureIaaSVMProtectionPolicy{
				BackupManagementType: to.Ptr("AzureIaasVM"),
				ProtectedItemsCount:  to.Ptr[int32](1),
				RetentionPolicy: &armrecoveryservicesbackup.LongTermRetentionPolicy{
					RetentionPolicyType: to.Ptr("LongTermRetentionPolicy"),
					DailySchedule: &armrecoveryservicesbackup.DailyRetentionSchedule{
						RetentionDuration: &armrecoveryservicesbackup.RetentionDuration{
							Count:        to.Ptr[int32](1),
							DurationType: to.Ptr(armrecoveryservicesbackup.RetentionDurationTypeDays),
						},
						RetentionTimes: []*time.Time{
							to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T02:00:00Z"); return t }())},
					},
				},
				SchedulePolicy: &armrecoveryservicesbackup.SimpleSchedulePolicy{
					SchedulePolicyType:   to.Ptr("SimpleSchedulePolicy"),
					ScheduleRunFrequency: to.Ptr(armrecoveryservicesbackup.ScheduleRunTypeDaily),
					ScheduleRunTimes: []*time.Time{
						to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T02:00:00Z"); return t }())},
					ScheduleWeeklyFrequency: to.Ptr[int32](0),
				},
				TimeZone: to.Ptr("Pacific Standard Time"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectionPolicyResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectionPolicyResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionPolicyOperationResults_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupJobs_List(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/ListJobs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List All Jobs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBackupJobsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("NetSDKTestRsVault",
		"SwaggerTestRg",
		&armrecoveryservicesbackup.BackupJobsClientListOptions{Filter: nil,
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/ListJobs.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicesbackup.JobResourceList{
			Value: []*armrecoveryservicesbackup.JobResource{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupJobs"),
					ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupJobs/00000000-0000-0000-0000-000000000000"),
					Properties: &armrecoveryservicesbackup.AzureIaaSVMJob{
						ActivityID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
						BackupManagementType:  to.Ptr(armrecoveryservicesbackup.BackupManagementTypeAzureIaasVM),
						EntityFriendlyName:    to.Ptr("testvm"),
						JobType:               to.Ptr("AzureIaaSVMJob"),
						Operation:             to.Ptr("Backup"),
						StartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-03T05:31:07.014604Z"); return t }()),
						Status:                to.Ptr("InProgress"),
						Duration:              to.Ptr("PT12.4272909S"),
						VirtualMachineVersion: to.Ptr("Compute"),
					},
				},
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupJobs"),
					ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupJobs/00000000-0000-0000-0000-000000000000"),
					Properties: &armrecoveryservicesbackup.AzureIaaSVMJob{
						ActivityID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
						BackupManagementType:  to.Ptr(armrecoveryservicesbackup.BackupManagementTypeAzureIaasVM),
						EndTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-03T05:31:03.7553376Z"); return t }()),
						EntityFriendlyName:    to.Ptr("testvm"),
						JobType:               to.Ptr("AzureIaaSVMJob"),
						Operation:             to.Ptr("ConfigureBackup"),
						StartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-03T05:30:32.4487085Z"); return t }()),
						Status:                to.Ptr("Completed"),
						Duration:              to.Ptr("PT31.3066291S"),
						VirtualMachineVersion: to.Ptr("Compute"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/ListJobs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/ListJobsWithAllSupportedFilters.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Jobs With Filters"},
	})
	client = armrecoveryservicesbackup.NewBackupJobsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager = client.List("NetSDKTestRsVault",
		"SwaggerTestRg",
		&armrecoveryservicesbackup.BackupJobsClientListOptions{Filter: to.Ptr("startTime eq '2016-01-01 00:00:00 AM' and endTime eq '2017-11-29 00:00:00 AM' and operation eq 'Backup' and backupManagementType eq 'AzureIaasVM' and status eq 'InProgress'"),
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/ListJobsWithAllSupportedFilters.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicesbackup.JobResourceList{
			Value: []*armrecoveryservicesbackup.JobResource{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupJobs"),
					ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupJobs/00000000-0000-0000-0000-000000000000"),
					Properties: &armrecoveryservicesbackup.AzureIaaSVMJob{
						ActivityID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
						BackupManagementType:  to.Ptr(armrecoveryservicesbackup.BackupManagementTypeAzureIaasVM),
						EntityFriendlyName:    to.Ptr("testvm"),
						JobType:               to.Ptr("AzureIaaSVMJob"),
						Operation:             to.Ptr("Backup"),
						StartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-03T05:31:07.014604Z"); return t }()),
						Status:                to.Ptr("InProgress"),
						Duration:              to.Ptr("PT12.4272909S"),
						VirtualMachineVersion: to.Ptr("Compute"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/ListJobsWithAllSupportedFilters.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/ListJobsWithStartTimeAndEndTimeFilters.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Jobs With Time Filter"},
	})
	client = armrecoveryservicesbackup.NewBackupJobsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager = client.List("NetSDKTestRsVault",
		"SwaggerTestRg",
		&armrecoveryservicesbackup.BackupJobsClientListOptions{Filter: to.Ptr("startTime eq '2016-01-01 00:00:00 AM' and endTime eq '2017-11-29 00:00:00 AM'"),
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/ListJobsWithStartTimeAndEndTimeFilters.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicesbackup.JobResourceList{
			Value: []*armrecoveryservicesbackup.JobResource{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupJobs"),
					ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupJobs/00000000-0000-0000-0000-000000000000"),
					Properties: &armrecoveryservicesbackup.AzureIaaSVMJob{
						ActivityID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
						BackupManagementType:  to.Ptr(armrecoveryservicesbackup.BackupManagementTypeAzureIaasVM),
						EntityFriendlyName:    to.Ptr("testvm"),
						JobType:               to.Ptr("AzureIaaSVMJob"),
						Operation:             to.Ptr("Backup"),
						StartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-03T05:31:07.014604Z"); return t }()),
						Status:                to.Ptr("InProgress"),
						Duration:              to.Ptr("PT12.4272909S"),
						VirtualMachineVersion: to.Ptr("Compute"),
					},
				},
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupJobs"),
					ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupJobs/00000000-0000-0000-0000-000000000000"),
					Properties: &armrecoveryservicesbackup.AzureIaaSVMJob{
						ActivityID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
						BackupManagementType:  to.Ptr(armrecoveryservicesbackup.BackupManagementTypeAzureIaasVM),
						EndTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-03T05:31:03.7553376Z"); return t }()),
						EntityFriendlyName:    to.Ptr("testvm"),
						JobType:               to.Ptr("AzureIaaSVMJob"),
						Operation:             to.Ptr("ConfigureBackup"),
						StartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-03T05:30:32.4487085Z"); return t }()),
						Status:                to.Ptr("Completed"),
						Duration:              to.Ptr("PT31.3066291S"),
						VirtualMachineVersion: to.Ptr("Compute"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/ListJobsWithStartTimeAndEndTimeFilters.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobDetails_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/GetJobDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Job Details"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewJobDetailsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		"00000000-0000-0000-0000-000000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/GetJobDetails.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.JobResource{
			Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupJobs"),
			ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupJobs/00000000-0000-0000-0000-000000000000"),
			Properties: &armrecoveryservicesbackup.AzureIaaSVMJob{
				ActivityID:           to.Ptr("00000000-0000-0000-0000-000000000000"),
				BackupManagementType: to.Ptr(armrecoveryservicesbackup.BackupManagementTypeAzureIaasVM),
				EntityFriendlyName:   to.Ptr("testvm"),
				JobType:              to.Ptr("AzureIaaSVMJob"),
				Operation:            to.Ptr("Backup"),
				StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-03T05:31:07.014604Z"); return t }()),
				Status:               to.Ptr("InProgress"),
				Duration:             to.Ptr("PT9.8782791S"),
				ExtendedInfo: &armrecoveryservicesbackup.AzureIaaSVMJobExtendedInfo{
					PropertyBag: map[string]*string{
						"VM Name": to.Ptr("testvm"),
					},
					TasksList: []*armrecoveryservicesbackup.AzureIaaSVMJobTaskDetails{
						{
							Duration: to.Ptr("PT0S"),
							Status:   to.Ptr("InProgress"),
							TaskID:   to.Ptr("Take Snapshot"),
						},
						{
							Duration: to.Ptr("PT0S"),
							Status:   to.Ptr("NotStarted"),
							TaskID:   to.Ptr("Transfer data to vault"),
						}},
				},
				VirtualMachineVersion: to.Ptr("Compute"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/GetJobDetails.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobCancellations_Trigger(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/TriggerCancelJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Cancel Job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewJobCancellationsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Trigger(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		"00000000-0000-0000-0000-000000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/TriggerCancelJob.json: %v", err)
	}
}

func TestJobOperationResults_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/CancelJobOperationResult.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Cancel Job Operation Result"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewJobOperationResultsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Get(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		"00000000-0000-0000-0000-000000000000",
		"00000000-0000-0000-0000-000000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/CancelJobOperationResult.json: %v", err)
	}
}

func TestExportJobsOperationResults_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/ExportJobsOperationResult.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Export Jobs Operation Results"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewExportJobsOperationResultsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		"00000000-0000-0000-0000-000000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/ExportJobsOperationResult.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.OperationResultInfoBaseResource{
			Headers: map[string][]*string{},
			Operation: &armrecoveryservicesbackup.ExportJobsOperationResultInfo{
				ObjectType: to.Ptr("ExportJobsOperationResultInfo"),
				BlobSasKey: to.Ptr("?sv=2014-02-14&sr=b&sig=<sas_signature>&st=2017-11-29T07%3A53%3A34Z&se=2017-11-29T08%3A03%3A34Z&sp=r"),
				BlobURL:    to.Ptr("https://azureblob.blob.core.windows.net/reportcontainer/exportjobsreportc00000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationResultInfoBaseResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationResultInfoBaseResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/ExportJobsOperationResult.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobs_Export(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/TriggerExportJobs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Export Jobs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewJobsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Export(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		&armrecoveryservicesbackup.JobsClientExportOptions{Filter: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/TriggerExportJobs.json: %v", err)
	}
}

func TestBackupProtectedItems_List(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/BackupProtectedItems_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List protected items with backupManagementType filter as AzureIaasVm"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBackupProtectedItemsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("NetSDKTestRsVault",
		"SwaggerTestRg",
		&armrecoveryservicesbackup.BackupProtectedItemsClientListOptions{Filter: to.Ptr("backupManagementType eq 'AzureIaasVM' and itemType eq 'VM'"),
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/BackupProtectedItems_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicesbackup.ProtectedItemResourceList{
			Value: []*armrecoveryservicesbackup.ProtectedItemResource{
				{
					Name: to.Ptr("VM;iaasvmcontainer;iaasvm-rg;iaasvm-1"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems"),
					ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/protectionContainers/IaasVMContainer;iaasvmcontainer;iaasvm-rg;iaasvm-1/protectedItems/VM;iaasvmcontainer;iaasvm-rg;iaasvm-1"),
					Properties: &armrecoveryservicesbackup.AzureIaaSClassicComputeVMProtectedItem{
						BackupManagementType: to.Ptr(armrecoveryservicesbackup.BackupManagementTypeAzureIaasVM),
						ContainerName:        to.Ptr("iaasvmcontainer;iaasvm-rg;iaasvm-1"),
						LastRecoveryPoint:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-22T12:25:32.048723Z"); return t }()),
						PolicyID:             to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupPolicies/testPolicy1"),
						ProtectedItemType:    to.Ptr("Microsoft.ClassicCompute/virtualMachines"),
						SourceResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/providers/Microsoft.ClassicCompute/virtualMachines/iaasvm-1"),
						WorkloadType:         to.Ptr(armrecoveryservicesbackup.DataSourceTypeVM),
						FriendlyName:         to.Ptr("iaasvm-1"),
						HealthStatus:         to.Ptr(armrecoveryservicesbackup.HealthStatusPassed),
						LastBackupStatus:     to.Ptr("Completed"),
						LastBackupTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-22T12:25:32.048723Z"); return t }()),
						ProtectedItemDataID:  to.Ptr("636482643132986882"),
						ProtectionState:      to.Ptr(armrecoveryservicesbackup.ProtectionStateProtected),
						ProtectionStatus:     to.Ptr("Healthy"),
						VirtualMachineID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/providers/Microsoft.ClassicCompute/virtualMachines/iaasvm-1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProtectedItemResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProtectedItemResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/BackupProtectedItems_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperation_Validate(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ValidateOperation_RestoreDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Validate Operation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewOperationClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Validate(ctx,
		"testVault",
		"testRG",
		&armrecoveryservicesbackup.ValidateIaasVMRestoreOperationRequest{
			ObjectType: to.Ptr("ValidateIaasVMRestoreOperationRequest"),
			RestoreRequest: &armrecoveryservicesbackup.IaasVMRestoreRequest{
				ObjectType:            to.Ptr("IaasVMRestoreRequest"),
				CreateNewCloudService: to.Ptr(true),
				EncryptionDetails: &armrecoveryservicesbackup.EncryptionDetails{
					EncryptionEnabled: to.Ptr(false),
				},
				IdentityInfo: &armrecoveryservicesbackup.IdentityInfo{
					IsSystemAssignedIdentity:  to.Ptr(false),
					ManagedIdentityResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/asmaskarRG1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/asmaskartestmsi"),
				},
				OriginalStorageAccountOption: to.Ptr(false),
				RecoveryPointID:              to.Ptr("348916168024334"),
				RecoveryType:                 to.Ptr(armrecoveryservicesbackup.RecoveryTypeRestoreDisks),
				Region:                       to.Ptr("southeastasia"),
				SourceResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg/providers/Microsoft.Compute/virtualMachines/netvmtestv2vm1"),
				StorageAccountID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testingRg/providers/Microsoft.Storage/storageAccounts/testAccount"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ValidateOperation_RestoreDisk.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ValidateOperationsResponse{
			ValidateOperationResponse: &armrecoveryservicesbackup.ValidateOperationResponse{
				ValidationResults: []*armrecoveryservicesbackup.ErrorDetail{
					{
						Code:    to.Ptr("UserErrorCoreCountSubscriptionQuotaReached"),
						Message: to.Ptr("Core Count subscription quota has been reached."),
						Recommendations: []*string{
							to.Ptr("Contact Azure support to increase the limits.")},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ValidateOperationsResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ValidateOperationsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ValidateOperation_RestoreDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ValidateOperation_RestoreDisk_IdentityBasedRestoreDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Validate Operation with identityBasedRestoreDetails"},
	})
	client = armrecoveryservicesbackup.NewOperationClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.Validate(ctx,
		"testVault",
		"testRG",
		&armrecoveryservicesbackup.ValidateIaasVMRestoreOperationRequest{
			ObjectType: to.Ptr("ValidateIaasVMRestoreOperationRequest"),
			RestoreRequest: &armrecoveryservicesbackup.IaasVMRestoreRequest{
				ObjectType:            to.Ptr("IaasVMRestoreRequest"),
				CreateNewCloudService: to.Ptr(true),
				EncryptionDetails: &armrecoveryservicesbackup.EncryptionDetails{
					EncryptionEnabled: to.Ptr(false),
				},
				IdentityBasedRestoreDetails: &armrecoveryservicesbackup.IdentityBasedRestoreDetails{
					TargetStorageAccountID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testingRg/providers/Microsoft.Storage/storageAccounts/testAccount"),
				},
				IdentityInfo: &armrecoveryservicesbackup.IdentityInfo{
					IsSystemAssignedIdentity:  to.Ptr(false),
					ManagedIdentityResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/asmaskarRG1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/asmaskartestmsi"),
				},
				OriginalStorageAccountOption: to.Ptr(false),
				RecoveryPointID:              to.Ptr("348916168024334"),
				RecoveryType:                 to.Ptr(armrecoveryservicesbackup.RecoveryTypeRestoreDisks),
				Region:                       to.Ptr("southeastasia"),
				SourceResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg/providers/Microsoft.Compute/virtualMachines/netvmtestv2vm1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ValidateOperation_RestoreDisk_IdentityBasedRestoreDetails.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ValidateOperationsResponse{
			ValidateOperationResponse: &armrecoveryservicesbackup.ValidateOperationResponse{
				ValidationResults: []*armrecoveryservicesbackup.ErrorDetail{
					{
						Code:    to.Ptr("UserErrorCoreCountSubscriptionQuotaReached"),
						Message: to.Ptr("Core Count subscription quota has been reached."),
						Recommendations: []*string{
							to.Ptr("Contact Azure support to increase the limits.")},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ValidateOperationsResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ValidateOperationsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ValidateOperation_RestoreDisk_IdentityBasedRestoreDetails.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestValidateOperation_Trigger(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/TriggerValidateOperation_RestoreDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Trigger Validate Operation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewValidateOperationClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginTrigger(ctx,
		"testVault",
		"testRG",
		&armrecoveryservicesbackup.ValidateIaasVMRestoreOperationRequest{
			ObjectType: to.Ptr("ValidateIaasVMRestoreOperationRequest"),
			RestoreRequest: &armrecoveryservicesbackup.IaasVMRestoreRequest{
				ObjectType:            to.Ptr("IaasVMRestoreRequest"),
				CreateNewCloudService: to.Ptr(true),
				EncryptionDetails: &armrecoveryservicesbackup.EncryptionDetails{
					EncryptionEnabled: to.Ptr(false),
				},
				IdentityInfo: &armrecoveryservicesbackup.IdentityInfo{
					IsSystemAssignedIdentity:  to.Ptr(false),
					ManagedIdentityResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/asmaskarRG1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/asmaskartestmsi"),
				},
				OriginalStorageAccountOption: to.Ptr(false),
				RecoveryPointID:              to.Ptr("348916168024334"),
				RecoveryType:                 to.Ptr(armrecoveryservicesbackup.RecoveryTypeRestoreDisks),
				Region:                       to.Ptr("southeastasia"),
				SourceResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/netsdktestrg/providers/Microsoft.Compute/virtualMachines/netvmtestv2vm1"),
				StorageAccountID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testingRg/providers/Microsoft.Storage/storageAccounts/testAccount"),
			},
		},
		&armrecoveryservicesbackup.ValidateOperationClientBeginTriggerOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/TriggerValidateOperation_RestoreDisk.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/TriggerValidateOperation_RestoreDisk.json: %v", err)
	}
}

func TestValidateOperationResults_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ValidateOperationResults.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Operation Results of Validate Operation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewValidateOperationResultsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		"00000000-0000-0000-0000-000000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ValidateOperationResults.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ValidateOperationsResponse{
			ValidateOperationResponse: &armrecoveryservicesbackup.ValidateOperationResponse{
				ValidationResults: []*armrecoveryservicesbackup.ErrorDetail{
					{
						Code:    to.Ptr("UserErrorCoreCountSubscriptionQuotaReached"),
						Message: to.Ptr("Core Count subscription quota has been reached."),
						Recommendations: []*string{
							to.Ptr("Contact Azure support to increase the limits.")},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ValidateOperationsResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ValidateOperationsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ValidateOperationResults.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestValidateOperationStatuses_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ValidateOperationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Operation Status of Validate Operation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewValidateOperationStatusesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		"00000000-0000-0000-0000-000000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ValidateOperationStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.OperationStatus{
			Name:    to.Ptr("00000000-0000-0000-0000-000000000000"),
			EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-29T06:04:18.207325Z"); return t }()),
			ID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armrecoveryservicesbackup.OperationStatusValidateOperationExtendedInfo{
				ObjectType: to.Ptr("OperationStatusValidateOperationExtendedInfo"),
				ValidateOperationResponse: &armrecoveryservicesbackup.ValidateOperationResponse{
					ValidationResults: []*armrecoveryservicesbackup.ErrorDetail{
						{
							Code:    to.Ptr("UserErrorCoreCountSubscriptionQuotaReached"),
							Message: to.Ptr("Core Count subscription quota has been reached."),
							Recommendations: []*string{
								to.Ptr("Contact Azure support to increase the limits.")},
						}},
				},
			},
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-29T06:04:18.207325Z"); return t }()),
			Status:    to.Ptr(armrecoveryservicesbackup.OperationStatusValuesSucceeded),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ValidateOperationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupEngines_List(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Dpm/BackupEngines_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Dpm/AzureBackupServer/Lajolla Backup Engines"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBackupEnginesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("testVault",
		"testRG",
		&armrecoveryservicesbackup.BackupEnginesClientListOptions{Filter: nil,
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Dpm/BackupEngines_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicesbackup.BackupEngineBaseResourceList{
			Value: []*armrecoveryservicesbackup.BackupEngineBaseResource{
				{
					Name: to.Ptr("testServer1"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupEngines"),
					ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG/providers/Microsoft.RecoveryServices/vaults/testVault/backupEngines/testServer1"),
					Properties: &armrecoveryservicesbackup.DpmBackupEngine{
						AzureBackupAgentVersion: to.Ptr("2.0.9532.0"),
						BackupEngineState:       to.Ptr("Active"),
						BackupEngineType:        to.Ptr(armrecoveryservicesbackup.BackupEngineTypeDpmBackupEngine),
						DpmVersion:              to.Ptr("5.1.348.0"),
						ExtendedInfo: &armrecoveryservicesbackup.BackupEngineExtendedInfo{
							AvailableDiskSpace:    to.Ptr[float64](50),
							DiskCount:             to.Ptr[int32](5),
							ProtectedItemsCount:   to.Ptr[int32](35),
							ProtectedServersCount: to.Ptr[int32](21),
							UsedDiskSpace:         to.Ptr[float64](20),
						},
						FriendlyName:                       to.Ptr("testServer1"),
						IsAzureBackupAgentUpgradeAvailable: to.Ptr(false),
						IsDpmUpgradeAvailable:              to.Ptr(false),
						RegistrationStatus:                 to.Ptr("Registered"),
					},
				},
				{
					Name: to.Ptr("testServer5"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupEngines"),
					ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG/providers/Microsoft.RecoveryServices/vaults/testVault/backupEngines/testServer5"),
					Properties: &armrecoveryservicesbackup.DpmBackupEngine{
						AzureBackupAgentVersion: to.Ptr("2.0.9530.0"),
						BackupEngineState:       to.Ptr("Active"),
						BackupEngineType:        to.Ptr(armrecoveryservicesbackup.BackupEngineTypeDpmBackupEngine),
						DpmVersion:              to.Ptr("5.1.348.0"),
						ExtendedInfo: &armrecoveryservicesbackup.BackupEngineExtendedInfo{
							AvailableDiskSpace:    to.Ptr[float64](50),
							DiskCount:             to.Ptr[int32](5),
							ProtectedItemsCount:   to.Ptr[int32](35),
							ProtectedServersCount: to.Ptr[int32](21),
							UsedDiskSpace:         to.Ptr[float64](20),
						},
						FriendlyName:                       to.Ptr("testServer5"),
						IsAzureBackupAgentUpgradeAvailable: to.Ptr(false),
						IsDpmUpgradeAvailable:              to.Ptr(false),
						RegistrationStatus:                 to.Ptr("Registered"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BackupEngineBaseResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BackupEngineBaseResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Dpm/BackupEngines_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupEngines_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Dpm/BackupEngines_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Dpm/AzureBackupServer/Lajolla Backup Engine Details"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBackupEnginesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"testVault",
		"testRG",
		"testServer",
		&armrecoveryservicesbackup.BackupEnginesClientGetOptions{Filter: nil,
			SkipToken: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Dpm/BackupEngines_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.BackupEngineBaseResource{
			Name: to.Ptr("testServer"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupEngines"),
			ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG/providers/Microsoft.RecoveryServices/vaults/testVault/backupEngines/testServer"),
			Properties: &armrecoveryservicesbackup.DpmBackupEngine{
				AzureBackupAgentVersion: to.Ptr("2.0.9532.0"),
				BackupEngineState:       to.Ptr("Active"),
				BackupEngineType:        to.Ptr(armrecoveryservicesbackup.BackupEngineTypeDpmBackupEngine),
				DpmVersion:              to.Ptr("5.1.348.0"),
				ExtendedInfo: &armrecoveryservicesbackup.BackupEngineExtendedInfo{
					AvailableDiskSpace:    to.Ptr[float64](50),
					DiskCount:             to.Ptr[int32](5),
					ProtectedItemsCount:   to.Ptr[int32](35),
					ProtectedServersCount: to.Ptr[int32](21),
					UsedDiskSpace:         to.Ptr[float64](20),
				},
				FriendlyName:                       to.Ptr("testServer"),
				IsAzureBackupAgentUpgradeAvailable: to.Ptr(false),
				IsDpmUpgradeAvailable:              to.Ptr(false),
				RegistrationStatus:                 to.Ptr("Registered"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupEngineBaseResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupEngineBaseResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Dpm/BackupEngines_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProtectionContainerRefreshOperationResults_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/RefreshContainers_OperationResults.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Azure Vm Discovery Operation Result"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewProtectionContainerRefreshOperationResultsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Get(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		"Azure",
		"00000000-0000-0000-0000-000000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/RefreshContainers_OperationResults.json: %v", err)
	}
}

func TestProtectableContainers_List(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureStorage/ProtectableContainers_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List protectable items with backupManagementType filter as AzureStorage"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewProtectableContainersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("testvault",
		"testRg",
		"Azure",
		&armrecoveryservicesbackup.ProtectableContainersClientListOptions{Filter: to.Ptr("backupManagementType eq 'AzureStorage' and workloadType eq 'AzureFileShare'")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureStorage/ProtectableContainers_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicesbackup.ProtectableContainerResourceList{
			Value: []*armrecoveryservicesbackup.ProtectableContainerResource{
				{
					Name: to.Ptr("StorageContainer;storage;test-rg;testst"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupFabrics/protectableContainers"),
					ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.RecoveryServices/vaults/testvault/backupFabrics/Azure/protectableContainers/StorageContainer;storage;test-rg;teststorage"),
					Properties: &armrecoveryservicesbackup.AzureStorageProtectableContainer{
						BackupManagementType:     to.Ptr(armrecoveryservicesbackup.BackupManagementTypeAzureStorage),
						ContainerID:              to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Storage/storageAccounts/teststorage"),
						FriendlyName:             to.Ptr("teststorage"),
						HealthStatus:             to.Ptr("Healthy"),
						ProtectableContainerType: to.Ptr(armrecoveryservicesbackup.ContainerTypeStorageContainer),
					},
				},
				{
					Name: to.Ptr("StorageContainer;ClassicStorage;test-rg;teststorage"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupFabrics/protectableContainers"),
					ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.RecoveryServices/vaults/testvault/backupFabrics/Azure/protectableContainers/StorageContainer;ClassicStorage;test-rg;teststorage"),
					Properties: &armrecoveryservicesbackup.AzureStorageProtectableContainer{
						BackupManagementType:     to.Ptr(armrecoveryservicesbackup.BackupManagementTypeAzureStorage),
						ContainerID:              to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.ClassicStorage/storageAccounts/teststorage"),
						FriendlyName:             to.Ptr("teststorage"),
						HealthStatus:             to.Ptr("Healthy"),
						ProtectableContainerType: to.Ptr(armrecoveryservicesbackup.ContainerTypeStorageContainer),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProtectableContainerResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProtectableContainerResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureStorage/ProtectableContainers_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProtectionContainers_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureWorkload/ProtectionContainers_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Protection Container Details"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewProtectionContainersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"testVault",
		"testRg",
		"Azure",
		"VMAppContainer;Compute;testRG;testSQL",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureWorkload/ProtectionContainers_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ProtectionContainerResource{
			Name: to.Ptr("VMAppContainer;Compute;testRG;testSQL"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers"),
			ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRg/providers/Microsoft.RecoveryServices/vaults/testVault/backupFabrics/Azure/protectionContainers/VMAppContainer;Compute;testRG;testSQL"),
			Properties: &armrecoveryservicesbackup.AzureVMAppContainerProtectionContainer{
				BackupManagementType: to.Ptr(armrecoveryservicesbackup.BackupManagementTypeAzureWorkload),
				ContainerType:        to.Ptr(armrecoveryservicesbackup.ContainerTypeVMAppContainer),
				FriendlyName:         to.Ptr("testSQL"),
				ExtendedInfo: &armrecoveryservicesbackup.AzureWorkloadContainerExtendedInfo{
					HostServerName: to.Ptr("testsql"),
					InquiryInfo: &armrecoveryservicesbackup.InquiryInfo{
						ErrorDetail: &armrecoveryservicesbackup.ErrorDetail{
							Code:    to.Ptr("Success"),
							Message: to.Ptr("Not Available"),
							Recommendations: []*string{
								to.Ptr("Not Available")},
						},
						InquiryDetails: []*armrecoveryservicesbackup.WorkloadInquiryDetails{
							{
								Type: to.Ptr("sql"),
								InquiryValidation: &armrecoveryservicesbackup.InquiryValidation{
									ErrorDetail: &armrecoveryservicesbackup.ErrorDetail{
										Code:    to.Ptr("Success"),
										Message: to.Ptr("Not Available"),
										Recommendations: []*string{
											to.Ptr("Not Available")},
									},
									Status: to.Ptr("Success"),
								},
								ItemCount: to.Ptr[int64](14),
							}},
						Status: to.Ptr("Success"),
					},
					NodesList: []*armrecoveryservicesbackup.DistributedNodesInfo{},
				},
				SourceResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG/providers/Microsoft.Compute/virtualMachines/testSQL"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectionContainerResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectionContainerResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureWorkload/ProtectionContainers_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProtectionContainers_Register(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureStorage/ProtectionContainers_Register.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegisterAzure Storage ProtectionContainers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewProtectionContainersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Register(ctx,
		"swaggertestvault",
		"SwaggerTestRg",
		"Azure",
		"StorageContainer;Storage;SwaggerTestRg;swaggertestsa",
		armrecoveryservicesbackup.ProtectionContainerResource{
			Properties: &armrecoveryservicesbackup.AzureStorageContainer{
				BackupManagementType:      to.Ptr(armrecoveryservicesbackup.BackupManagementTypeAzureStorage),
				ContainerType:             to.Ptr(armrecoveryservicesbackup.ContainerTypeStorageContainer),
				FriendlyName:              to.Ptr("swaggertestsa"),
				AcquireStorageAccountLock: to.Ptr(armrecoveryservicesbackup.AcquireStorageAccountLockAcquire),
				SourceResourceID:          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/SwaggerTestRg/providers/Microsoft.Storage/storageAccounts/swaggertestsa"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureStorage/ProtectionContainers_Register.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ProtectionContainerResource{
			Name: to.Ptr("StorageContainer;Storage;SwaggerTestRg;swaggertestsa"),
			ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/swaggertestvault/backupFabrics/Azure/protectionContainers/StorageContainer;Storage;SwaggerTestRg;swaggertestsa"),
			Properties: &armrecoveryservicesbackup.AzureStorageContainer{
				BackupManagementType:      to.Ptr(armrecoveryservicesbackup.BackupManagementTypeAzureStorage),
				ContainerType:             to.Ptr(armrecoveryservicesbackup.ContainerTypeStorageContainer),
				FriendlyName:              to.Ptr("swaggertestsa"),
				HealthStatus:              to.Ptr("Healthy"),
				RegistrationStatus:        to.Ptr("Registered"),
				AcquireStorageAccountLock: to.Ptr(armrecoveryservicesbackup.AcquireStorageAccountLockAcquire),
				ProtectedItemCount:        to.Ptr[int64](0),
				SourceResourceID:          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/SwaggerTestRg/providers/Microsoft.Storage/storageAccounts/swaggertestsa"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectionContainerResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectionContainerResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureStorage/ProtectionContainers_Register.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProtectionContainers_Unregister(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureWorkload/ProtectionContainers_Unregister.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Unregister Protection Container"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewProtectionContainersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Unregister(ctx,
		"testVault",
		"testRg",
		"Azure",
		"storagecontainer;Storage;test-rg;teststorage",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureWorkload/ProtectionContainers_Unregister.json: %v", err)
	}
}

func TestProtectionContainers_Inquire(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureStorage/ProtectionContainers_Inquire.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Inquire Azure Storage Protection Containers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewProtectionContainersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Inquire(ctx,
		"testvault",
		"test-rg",
		"Azure",
		"storagecontainer;Storage;test-rg;teststorage",
		&armrecoveryservicesbackup.ProtectionContainersClientInquireOptions{Filter: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureStorage/ProtectionContainers_Inquire.json: %v", err)
	}
}

func TestProtectionContainers_Refresh(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/RefreshContainers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Trigger Azure Vm Discovery"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewProtectionContainersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Refresh(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		"Azure",
		&armrecoveryservicesbackup.ProtectionContainersClientRefreshOptions{Filter: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/RefreshContainers.json: %v", err)
	}
}

func TestBackupWorkloadItems_List(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureWorkload/BackupWorkloadItems_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Workload Items in Container"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBackupWorkloadItemsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("suchandr-seacan-rsv",
		"testRg",
		"Azure",
		"VMAppContainer;Compute;bvtdtestag;sqlserver-1",
		&armrecoveryservicesbackup.BackupWorkloadItemsClientListOptions{Filter: to.Ptr("backupManagementType eq 'AzureWorkload'"),
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureWorkload/BackupWorkloadItems_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicesbackup.WorkloadItemResourceList{
			Value: []*armrecoveryservicesbackup.WorkloadItemResource{
				{
					Name: to.Ptr("SQLInstance;MSSQLSERVER"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/items"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/testRg/providers/Microsoft.RecoveryServices/vaults/suchandr-seacan-rsv/backupFabrics/Azure/protectionContainers/VMAppContainer;Compute;bvtdtestag;sqlserver-1/protectableItems/SQLInstance;MSSQLSERVER"),
					Properties: &armrecoveryservicesbackup.AzureVMWorkloadSQLInstanceWorkloadItem{
						BackupManagementType: to.Ptr("AzureWorkload"),
						FriendlyName:         to.Ptr("MSSQLSERVER"),
						ProtectionState:      to.Ptr(armrecoveryservicesbackup.ProtectionStatusNotProtected),
						WorkloadItemType:     to.Ptr("SQLInstance"),
						WorkloadType:         to.Ptr("SQL"),
						IsAutoProtectable:    to.Ptr(true),
						ParentName:           to.Ptr("MSSQLSERVER"),
						ServerName:           to.Ptr("sqlserver-1.contoso.com"),
						SubWorkloadItemCount: to.Ptr[int32](3),
						Subinquireditemcount: to.Ptr[int32](0),
						DataDirectoryPaths: []*armrecoveryservicesbackup.SQLDataDirectory{
							{
								Type: to.Ptr(armrecoveryservicesbackup.SQLDataDirectoryTypeData),
								Path: to.Ptr("F:\\DATA\\"),
							},
							{
								Type: to.Ptr(armrecoveryservicesbackup.SQLDataDirectoryTypeLog),
								Path: to.Ptr("F:\\LOG\\"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkloadItemResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkloadItemResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureWorkload/BackupWorkloadItems_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProtectionContainerOperationResults_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureStorage/ProtectionContainers_Inquire_Result.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Azure Storage Protection Container Operation Result"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewProtectionContainerOperationResultsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"testvault",
		"test-rg",
		"Azure",
		"VMAppContainer;Compute;testRG;testSQL",
		"00000000-0000-0000-0000-000000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureStorage/ProtectionContainers_Inquire_Result.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ProtectionContainerResource{
			Name: to.Ptr("VMAppContainer;Compute;testRG;testSQL"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers"),
			ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRg/providers/Microsoft.RecoveryServices/vaults/testVault/backupFabrics/Azure/protectionContainers/VMAppContainer;Compute;testRG;testSQL"),
			Properties: &armrecoveryservicesbackup.AzureVMAppContainerProtectionContainer{
				BackupManagementType: to.Ptr(armrecoveryservicesbackup.BackupManagementTypeAzureWorkload),
				ContainerType:        to.Ptr(armrecoveryservicesbackup.ContainerTypeVMAppContainer),
				FriendlyName:         to.Ptr("testSQL"),
				ExtendedInfo: &armrecoveryservicesbackup.AzureWorkloadContainerExtendedInfo{
					HostServerName: to.Ptr("testsql"),
					InquiryInfo: &armrecoveryservicesbackup.InquiryInfo{
						ErrorDetail: &armrecoveryservicesbackup.ErrorDetail{
							Code:    to.Ptr("Success"),
							Message: to.Ptr("Not Available"),
							Recommendations: []*string{
								to.Ptr("Not Available")},
						},
						InquiryDetails: []*armrecoveryservicesbackup.WorkloadInquiryDetails{
							{
								Type: to.Ptr("sql"),
								InquiryValidation: &armrecoveryservicesbackup.InquiryValidation{
									ErrorDetail: &armrecoveryservicesbackup.ErrorDetail{
										Code:    to.Ptr("Success"),
										Message: to.Ptr("Not Available"),
										Recommendations: []*string{
											to.Ptr("Not Available")},
									},
									Status: to.Ptr("Success"),
								},
								ItemCount: to.Ptr[int64](14),
							}},
						Status: to.Ptr("Success"),
					},
					NodesList: []*armrecoveryservicesbackup.DistributedNodesInfo{},
				},
				SourceResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG/providers/Microsoft.Compute/virtualMachines/testSQL"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectionContainerResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectionContainerResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureStorage/ProtectionContainers_Inquire_Result.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackups_Trigger(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/TriggerBackup_Post.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Trigger Backup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBackupsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Trigger(ctx,
		"linuxRsVault",
		"linuxRsVaultRG",
		"Azure",
		"IaasVMContainer;iaasvmcontainerv2;testrg;v1win2012r",
		"VM;iaasvmcontainerv2;testrg;v1win2012r",
		armrecoveryservicesbackup.BackupRequestResource{
			Properties: &armrecoveryservicesbackup.IaasVMBackupRequest{
				ObjectType: to.Ptr("IaasVMBackupRequest"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/TriggerBackup_Post.json: %v", err)
	}
}

func TestProtectedItemOperationStatuses_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectedItemOperationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Operation Status of Protected Vm"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewProtectedItemOperationStatusesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		"Azure",
		"IaasVMContainer;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1",
		"VM;iaasvmcontainerv2;netsdktestrg;netvmtestv2vm1",
		"00000000-0000-0000-0000-000000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectedItemOperationStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.OperationStatus{
			Name:    to.Ptr("00000000-0000-0000-0000-000000000000"),
			EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-29T06:04:18.207325Z"); return t }()),
			ID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armrecoveryservicesbackup.OperationStatusJobExtendedInfo{
				ObjectType: to.Ptr("OperationStatusJobExtendedInfo"),
				JobID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-29T06:04:18.207325Z"); return t }()),
			Status:    to.Ptr(armrecoveryservicesbackup.OperationStatusValuesSucceeded),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectedItemOperationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestItemLevelRecoveryConnections_Provision(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/Provision_Ilr.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Provision Instant Item Level Recovery for Azure Vm"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewItemLevelRecoveryConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Provision(ctx,
		"PySDKBackupTestRsVault",
		"PythonSDKBackupTestRg",
		"Azure",
		"iaasvmcontainer;iaasvmcontainerv2;pysdktestrg;pysdktestv2vm1",
		"vm;iaasvmcontainerv2;pysdktestrg;pysdktestv2vm1",
		"1",
		armrecoveryservicesbackup.ILRRequestResource{
			Properties: &armrecoveryservicesbackup.IaasVMILRRegistrationRequest{
				ObjectType:                to.Ptr("IaasVMILRRegistrationRequest"),
				InitiatorName:             to.Ptr("Hello World"),
				RecoveryPointID:           to.Ptr("38823086363464"),
				RenewExistingRegistration: to.Ptr(true),
				VirtualMachineID:          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/pysdktestrg/providers/Microsoft.Compute/virtualMachines/pysdktestv2vm1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/Provision_Ilr.json: %v", err)
	}
}

func TestItemLevelRecoveryConnections_Revoke(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/Revoke_Ilr.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Revoke Instant Item Level Recovery for Azure Vm"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewItemLevelRecoveryConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Revoke(ctx,
		"PySDKBackupTestRsVault",
		"PythonSDKBackupTestRg",
		"Azure",
		"iaasvmcontainer;iaasvmcontainerv2;pysdktestrg;pysdktestv2vm1",
		"vm;iaasvmcontainerv2;pysdktestrg;pysdktestv2vm1",
		"1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/Revoke_Ilr.json: %v", err)
	}
}

func TestBackupOperationResults_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/ProtectedItem_Delete_OperationResult.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Result for Protected Item Delete Operation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBackupOperationResultsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Get(ctx,
		"PySDKBackupTestRsVault",
		"PythonSDKBackupTestRg",
		"00000000-0000-0000-0000-000000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/ProtectedItem_Delete_OperationResult.json: %v", err)
	}
}

func TestBackupOperationStatuses_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/ProtectedItem_Delete_OperationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Protected Item Delete Operation Status"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBackupOperationStatusesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"PySDKBackupTestRsVault",
		"PythonSDKBackupTestRg",
		"00000000-0000-0000-0000-000000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/ProtectedItem_Delete_OperationStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.OperationStatus{
			Name:      to.Ptr("00000000-0000-0000-0000-000000000000"),
			EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00.00000Z"); return t }()),
			ID:        to.Ptr("00000000-0000-0000-0000-000000000000"),
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-03T06:52:53.886027Z"); return t }()),
			Status:    to.Ptr(armrecoveryservicesbackup.OperationStatusValuesInProgress),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/ProtectedItem_Delete_OperationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProtectionPolicyOperationStatuses_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionPolicyOperationStatuses_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Protection Policy Operation Status"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewProtectionPolicyOperationStatusesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"NetSDKTestRsVault",
		"SwaggerTestRg",
		"testPolicy1",
		"00000000-0000-0000-0000-000000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionPolicyOperationStatuses_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.OperationStatus{
			Name:    to.Ptr("GetProtectionPolicyOperationStatus"),
			EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T12:57:32.1142968Z"); return t }()),
			ID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
			Properties: &armrecoveryservicesbackup.OperationStatusJobsExtendedInfo{
				ObjectType:      to.Ptr("OperationStatusJobsExtendedInfo"),
				FailedJobsError: map[string]*string{},
				JobIDs: []*string{
					to.Ptr("00000000-0000-0000-0000-000000000000")},
			},
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-24T12:57:32.1142968Z"); return t }()),
			Status:    to.Ptr(armrecoveryservicesbackup.OperationStatusValuesSucceeded),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/ProtectionPolicyOperationStatuses_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupProtectableItems_List(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/BackupProtectableItems_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List protectable items with backupManagementType filter as AzureIaasVm"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBackupProtectableItemsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("NetSDKTestRsVault",
		"SwaggerTestRg",
		&armrecoveryservicesbackup.BackupProtectableItemsClientListOptions{Filter: to.Ptr("backupManagementType eq 'AzureIaasVM'"),
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/BackupProtectableItems_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicesbackup.WorkloadProtectableItemResourceList{
			Value: []*armrecoveryservicesbackup.WorkloadProtectableItemResource{
				{
					Name: to.Ptr("VM;iaasvmcontainer;iaasvm-rg;iaasvm-1"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectableItems"),
					ID:   to.Ptr("/Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/protectionContainers/IaasVMContainer;iaasvmcontainer;iaasvm-rg;iaasvm-1/protectableItems/VM;iaasvmcontainer;iaasvm-rg;iaasvm-1"),
					Properties: &armrecoveryservicesbackup.AzureIaaSClassicComputeVMProtectableItem{
						BackupManagementType: to.Ptr("AzureIaasVM"),
						FriendlyName:         to.Ptr("iaasvm-1"),
						ProtectableItemType:  to.Ptr("Microsoft.ClassicCompute/virtualMachines"),
						ProtectionState:      to.Ptr(armrecoveryservicesbackup.ProtectionStatusNotProtected),
						WorkloadType:         to.Ptr("VM"),
						VirtualMachineID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/providers/Microsoft.ClassicCompute/virtualMachines/iaasvm-1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkloadProtectableItemResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkloadProtectableItemResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/BackupProtectableItems_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupProtectionContainers_List(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureStorage/ProtectionContainers_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Backup Protection Containers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewBackupProtectionContainersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("testVault",
		"testRg",
		&armrecoveryservicesbackup.BackupProtectionContainersClientListOptions{Filter: to.Ptr("backupManagementType eq 'AzureWorkload'")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureStorage/ProtectionContainers_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicesbackup.ProtectionContainerResourceList{
			Value: []*armrecoveryservicesbackup.ProtectionContainerResource{
				{
					Name: to.Ptr("StorageContainer;Storage;testrg;suchandrtestsa125"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers"),
					ID:   to.Ptr("/subscriptions/172424a4-d65f-421e-a8de-197d98aabeba/resourcegroups/testrg/providers/microsoft.recoveryservices/vaults/suchandr-test-vault-wcus/backupFabrics/Azure/protectionContainers/StorageContainer;Storage;testrg;suchandrtestsa125"),
					Properties: &armrecoveryservicesbackup.AzureStorageContainer{
						BackupManagementType: to.Ptr(armrecoveryservicesbackup.BackupManagementTypeAzureStorage),
						ContainerType:        to.Ptr(armrecoveryservicesbackup.ContainerTypeStorageContainer),
						FriendlyName:         to.Ptr("suchandrtestsa125"),
						HealthStatus:         to.Ptr("Healthy"),
						RegistrationStatus:   to.Ptr("Registered"),
						ProtectedItemCount:   to.Ptr[int64](2),
						SourceResourceID:     to.Ptr("/subscriptions/172424a4-d65f-421e-a8de-197d98aabeba/resourceGroups/testrg/providers/Microsoft.Storage/storageAccounts/suchandrtestsa125"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProtectionContainerResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProtectionContainerResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureStorage/ProtectionContainers_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityPINs_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupSecurityPin_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Vault Security Pin"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewSecurityPINsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"SwaggerTest",
		"SwaggerTestRg",
		&armrecoveryservicesbackup.SecurityPINsClientGetOptions{Parameters: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupSecurityPin_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.TokenInformation{
			ExpiryTimeInUTCTicks: to.Ptr[int64](636495150137443100),
			SecurityPIN:          to.Ptr("200432"),
			Token:                to.Ptr("200432"),
		}
		if !reflect.DeepEqual(exampleRes, res.TokenInformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TokenInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Common/BackupSecurityPin_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecoveryPointsRecommendedForMove_List(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/RecoveryPointsRecommendedForMove_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Protected Azure Vm Recovery Points Recommended for Move"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewRecoveryPointsRecommendedForMoveClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("rshvault",
		"rshhtestmdvmrg",
		"Azure",
		"IaasVMContainer;iaasvmcontainerv2;rshhtestmdvmrg;rshmdvmsmall",
		"VM;iaasvmcontainerv2;rshhtestmdvmrg;rshmdvmsmall",
		armrecoveryservicesbackup.ListRecoveryPointsRecommendedForMoveRequest{
			ExcludedRPList: []*string{
				to.Ptr("348916168024334"),
				to.Ptr("348916168024335")},
			ObjectType: to.Ptr("ListRecoveryPointsRecommendedForMoveRequest"),
		},
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/RecoveryPointsRecommendedForMove_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicesbackup.RecoveryPointResourceList{
			Value: []*armrecoveryservicesbackup.RecoveryPointResource{
				{
					Name: to.Ptr("22244821112382"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rshhtestmdvmrg/providers/Microsoft.RecoveryServices/vaults/rshvault/backupFabrics/Azure/protectionContainers/IaasVMContainer;iaasvmcontainerv2;rshhtestmdvmrg;rshmdvmsmall/protectedItems/VM;iaasvmcontainerv2;rshhtestmdvmrg;rshmdvmsmall/recoveryPoints/22244821112382"),
					Properties: &armrecoveryservicesbackup.IaasVMRecoveryPoint{
						ObjectType:                   to.Ptr("IaasVMRecoveryPoint"),
						IsInstantIlrSessionActive:    to.Ptr(false),
						IsManagedVirtualMachine:      to.Ptr(true),
						IsSourceVMEncrypted:          to.Ptr(false),
						OriginalStorageAccountOption: to.Ptr(false),
						RecoveryPointAdditionalInfo:  to.Ptr(""),
						RecoveryPointMoveReadinessInfo: map[string]*armrecoveryservicesbackup.RecoveryPointMoveReadinessInfo{
							"ArchivedRP": {
								IsReadyForMove: to.Ptr(true),
							},
						},
						RecoveryPointTierDetails: []*armrecoveryservicesbackup.RecoveryPointTierInformationV2{
							{
								Type:   to.Ptr(armrecoveryservicesbackup.RecoveryPointTierTypeInstantRP),
								Status: to.Ptr(armrecoveryservicesbackup.RecoveryPointTierStatusDeleted),
							},
							{
								Type:   to.Ptr(armrecoveryservicesbackup.RecoveryPointTierTypeHardenedRP),
								Status: to.Ptr(armrecoveryservicesbackup.RecoveryPointTierStatusValid),
							}},
						RecoveryPointTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-21T22:48:25.4353958Z"); return t }()),
						RecoveryPointType:   to.Ptr("CrashConsistent"),
						SourceVMStorageType: to.Ptr("NormalStorage"),
						VirtualMachineSize:  to.Ptr("Standard_D1"),
					},
				},
				{
					Name: to.Ptr("24977149827250"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rshhtestmdvmrg/providers/Microsoft.RecoveryServices/vaults/rshvault/backupFabrics/Azure/protectionContainers/IaasVMContainer;iaasvmcontainerv2;rshhtestmdvmrg;rshmdvmsmall/protectedItems/VM;iaasvmcontainerv2;rshhtestmdvmrg;rshmdvmsmall/recoveryPoints/24977149827250"),
					Properties: &armrecoveryservicesbackup.IaasVMRecoveryPoint{
						ObjectType:                   to.Ptr("IaasVMRecoveryPoint"),
						IsInstantIlrSessionActive:    to.Ptr(false),
						IsManagedVirtualMachine:      to.Ptr(true),
						IsSourceVMEncrypted:          to.Ptr(false),
						OriginalStorageAccountOption: to.Ptr(false),
						RecoveryPointAdditionalInfo:  to.Ptr(""),
						RecoveryPointMoveReadinessInfo: map[string]*armrecoveryservicesbackup.RecoveryPointMoveReadinessInfo{
							"ArchivedRP": {
								IsReadyForMove: to.Ptr(true),
							},
						},
						RecoveryPointTierDetails: []*armrecoveryservicesbackup.RecoveryPointTierInformationV2{
							{
								Type:   to.Ptr(armrecoveryservicesbackup.RecoveryPointTierTypeInstantRP),
								Status: to.Ptr(armrecoveryservicesbackup.RecoveryPointTierStatusDeleted),
							},
							{
								Type:   to.Ptr(armrecoveryservicesbackup.RecoveryPointTierTypeHardenedRP),
								Status: to.Ptr(armrecoveryservicesbackup.RecoveryPointTierStatusDeleted),
							},
							{
								Type: to.Ptr(armrecoveryservicesbackup.RecoveryPointTierTypeArchivedRP),
								ExtendedInfo: map[string]*string{
									"RehydratedRPExpiryTime": to.Ptr("2020-12-21T22:48:25.4353958Z"),
								},
								Status: to.Ptr(armrecoveryservicesbackup.RecoveryPointTierStatusRehydrated),
							}},
						RecoveryPointTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-20T22:49:44.3317945Z"); return t }()),
						RecoveryPointType:   to.Ptr("CrashConsistent"),
						SourceVMStorageType: to.Ptr("NormalStorage"),
						VirtualMachineSize:  to.Ptr("Standard_D1"),
						Zones: []*string{
							to.Ptr("1")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecoveryPointResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecoveryPointResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/AzureIaasVm/RecoveryPointsRecommendedForMove_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGuardProxies_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ResourceGuardProxyCRUD/ListResourceGuardProxy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get VaultGuardProxies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewResourceGuardProxiesClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	pager := client.Get("sampleVault",
		"SampleResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ResourceGuardProxyCRUD/ListResourceGuardProxy.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicesbackup.ResourceGuardProxyBaseResourceList{
			Value: []*armrecoveryservicesbackup.ResourceGuardProxyBaseResource{
				{
					Name: to.Ptr("swaggerExample"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupResourceGuardProxies"),
					ID:   to.Ptr("/backupmanagement/resources/sampleVault/backupResourceGuardProxies/swaggerExample"),
					Properties: &armrecoveryservicesbackup.ResourceGuardProxyBase{
						Description:     to.Ptr("Please take JIT access before performing any of the critical operation"),
						LastUpdatedTime: to.Ptr("2021-02-11T12:20:47.8210031Z"),
						ResourceGuardOperationDetails: []*armrecoveryservicesbackup.ResourceGuardOperationDetail{
							{
								DefaultResourceRequest: to.Ptr("/subscriptions/c999d45b-944f-418c-a0d8-c3fcfd1802c8/resourceGroups/vaultguardRGNew/providers/Microsoft.DataProtection/resourceGuards/VaultGuardTestNew/deleteResourceGuardProxyRequests/default"),
								VaultCriticalOperation: to.Ptr("Microsoft.DataProtection/resourceGuards/deleteResourceGuardProxyRequests"),
							},
							{
								DefaultResourceRequest: to.Ptr("/subscriptions/c999d45b-944f-418c-a0d8-c3fcfd1802c8/resourceGroups/vaultguardRGNew/providers/Microsoft.DataProtection/resourceGuards/VaultGuardTestNew/disableSoftDeleteRequests/default"),
								VaultCriticalOperation: to.Ptr("Microsoft.DataProtection/resourceGuards/disableSoftDeleteRequests"),
							}},
						ResourceGuardResourceID: to.Ptr("/subscriptions/c999d45b-944f-418c-a0d8-c3fcfd1802c8/resourceGroups/vaultguardRGNew/providers/Microsoft.DataProtection/resourceGuards/VaultGuardTestNew"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceGuardProxyBaseResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceGuardProxyBaseResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ResourceGuardProxyCRUD/ListResourceGuardProxy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGuardProxy_Get(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ResourceGuardProxyCRUD/GetResourceGuardProxy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get ResourceGuardProxy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewResourceGuardProxyClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	res, err := client.Get(ctx,
		"sampleVault",
		"SampleResourceGroup",
		"swaggerExample",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ResourceGuardProxyCRUD/GetResourceGuardProxy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ResourceGuardProxyBaseResource{
			Name: to.Ptr("swaggerExample"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupResourceGuardProxies"),
			ID:   to.Ptr("/backupmanagement/resources/sampleVault/backupResourceGuardProxies/swaggerExample"),
			Properties: &armrecoveryservicesbackup.ResourceGuardProxyBase{
				Description:     to.Ptr("Please take JIT access before performing any of the critical operation"),
				LastUpdatedTime: to.Ptr("2021-02-11T12:20:47.8210031Z"),
				ResourceGuardOperationDetails: []*armrecoveryservicesbackup.ResourceGuardOperationDetail{
					{
						DefaultResourceRequest: to.Ptr("/subscriptions/c999d45b-944f-418c-a0d8-c3fcfd1802c8/resourceGroups/vaultguardRGNew/providers/Microsoft.DataProtection/resourceGuards/VaultGuardTestNew/deleteResourceGuardProxyRequests/default"),
						VaultCriticalOperation: to.Ptr("Microsoft.DataProtection/resourceGuards/deleteResourceGuardProxyRequests"),
					},
					{
						DefaultResourceRequest: to.Ptr("/subscriptions/c999d45b-944f-418c-a0d8-c3fcfd1802c8/resourceGroups/resourceguardRGNew/providers/Microsoft.DataProtection/resourceGuards/VaultGuardTestNew/disableSoftDeleteRequests/default"),
						VaultCriticalOperation: to.Ptr("Microsoft.DataProtection/resourceGuards/disableSoftDeleteRequests"),
					}},
				ResourceGuardResourceID: to.Ptr("/subscriptions/c999d45b-944f-418c-a0d8-c3fcfd1802c8/resourceGroups/vaultguardRGNew/providers/Microsoft.DataProtection/resourceGuards/VaultGuardTestNew"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceGuardProxyBaseResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceGuardProxyBaseResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ResourceGuardProxyCRUD/GetResourceGuardProxy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGuardProxy_Put(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ResourceGuardProxyCRUD/PutResourceGuardProxy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create ResourceGuardProxy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewResourceGuardProxyClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	res, err := client.Put(ctx,
		"sampleVault",
		"SampleResourceGroup",
		"swaggerExample",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ResourceGuardProxyCRUD/PutResourceGuardProxy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.ResourceGuardProxyBaseResource{
			Name: to.Ptr("swaggerExample"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/backupResourceGuardProxies"),
			ID:   to.Ptr("/backupmanagement/resources/sampleVault/backupResourceGuardProxies/swaggerExample"),
			Properties: &armrecoveryservicesbackup.ResourceGuardProxyBase{
				Description:     to.Ptr("Please take JIT access before performing any of the critical operation"),
				LastUpdatedTime: to.Ptr("2021-02-11T12:20:47.8210031Z"),
				ResourceGuardOperationDetails: []*armrecoveryservicesbackup.ResourceGuardOperationDetail{
					{
						DefaultResourceRequest: to.Ptr("/subscriptions/c999d45b-944f-418c-a0d8-c3fcfd1802c8/resourceGroups/vaultguardRGNew/providers/Microsoft.DataProtection/resourceGuards/VaultGuardTestNew/deleteResourceGuardProxyRequests/default"),
						VaultCriticalOperation: to.Ptr("Microsoft.DataProtection/resourceGuards/deleteResourceGuardProxyRequests"),
					},
					{
						DefaultResourceRequest: to.Ptr("/subscriptions/c999d45b-944f-418c-a0d8-c3fcfd1802c8/resourceGroups/vaultguardRGNew/providers/Microsoft.DataProtection/resourceGuards/VaultGuardTestNew/disableSoftDeleteRequests/default"),
						VaultCriticalOperation: to.Ptr("Microsoft.DataProtection/resourceGuards/disableSoftDeleteRequests"),
					}},
				ResourceGuardResourceID: to.Ptr("/subscriptions/c999d45b-944f-418c-a0d8-c3fcfd1802c8/resourceGroups/vaultguardRGNew/providers/Microsoft.DataProtection/resourceGuards/VaultGuardTestNew"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceGuardProxyBaseResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceGuardProxyBaseResource)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ResourceGuardProxyCRUD/PutResourceGuardProxy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGuardProxy_Delete(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ResourceGuardProxyCRUD/DeleteResourceGuardProxy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete ResourceGuardProxy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewResourceGuardProxyClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	_, err := client.Delete(ctx,
		"sampleVault",
		"SampleResourceGroup",
		"swaggerExample",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ResourceGuardProxyCRUD/DeleteResourceGuardProxy.json: %v", err)
	}
}

func TestResourceGuardProxy_UnlockDelete(t *testing.T) {
	// From example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ResourceGuardProxyCRUD/UnlockDeleteResourceGuardProxy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UnlockDelete ResourceGuardProxy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicesbackup.NewResourceGuardProxyClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	res, err := client.UnlockDelete(ctx,
		"sampleVault",
		"SampleResourceGroup",
		"swaggerExample",
		armrecoveryservicesbackup.UnlockDeleteRequest{
			ResourceGuardOperationRequests: []*string{
				to.Ptr("/subscriptions/c999d45b-944f-418c-a0d8-c3fcfd1802c8/resourceGroups/vaultguardRGNew/providers/Microsoft.DataProtection/resourceGuards/VaultGuardTestNew/deleteProtectedItemRequests/default")},
			ResourceToBeDeleted: to.Ptr("/subscriptions/62b829ee-7936-40c9-a1c9-47a93f9f3965/resourceGroups/gaallarg/providers/Microsoft.RecoveryServices/vaults/MercuryCrrVault/backupFabrics/Azure/protectionContainers/VMAppContainer;compute;crrtestrg;crrtestvm/protectedItems/SQLDataBase;mssqlserver;testdb"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ResourceGuardProxyCRUD/UnlockDeleteResourceGuardProxy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicesbackup.UnlockDeleteResponse{
			UnlockDeleteExpiryTime: to.Ptr("2021-02-11T13:12:27.7870742Z"),
		}
		if !reflect.DeepEqual(exampleRes, res.UnlockDeleteResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.UnlockDeleteResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ResourceGuardProxyCRUD/UnlockDeleteResourceGuardProxy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
