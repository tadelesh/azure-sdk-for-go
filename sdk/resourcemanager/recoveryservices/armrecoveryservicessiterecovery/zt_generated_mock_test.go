//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecoveryservicessiterecovery_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/recoveryservices/armrecoveryservicessiterecovery"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns the list of available operations."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewOperationsClient("resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.OperationsDiscoveryCollection{
			Value: []*armrecoveryservicessiterecovery.OperationsDiscovery{
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/vaultTokens/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("The Vault Token operation can be used to get   Vault Token for vault level backend operations."),
						Operation:   to.Ptr("Vault Token"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Vaults"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/registeredIdentities/write"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("The Register Service Container   operation can be used to register a container with Recovery Service."),
						Operation:   to.Ptr("Register Service Container"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Vaults"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/registeredIdentities/operationResults/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("The Get Operation Results operation can   be used get the operation status and result for the asynchronously submitted operation"),
						Operation:   to.Ptr("Get Operation Results"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Vaults"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/registeredIdentities/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("The Get Containers operation can be used get   the containers registered for a resource."),
						Operation:   to.Ptr("Get Containers"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Vaults"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/registeredIdentities/delete"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("The UnRegister Container   operation can be used to unregister a container."),
						Operation:   to.Ptr("Unregister Service Container"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Vaults"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/certificates/write"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("The Update Resource Certificate   operation updates the resource/vault credential certificate."),
						Operation:   to.Ptr("Update Resource Certificate"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Vaults"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationAlertSettings/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Read Any Alerts Settings"),
						Operation:   to.Ptr("Read Alerts Settings"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Alerts   Settings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationAlertSettings/write"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Create or Update Any Alerts Settings"),
						Operation:   to.Ptr("Create or Update Alerts Settings"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Alerts   Settings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationEvents/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Read Any Events"),
						Operation:   to.Ptr("Read Events"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Events"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Read Any Networks"),
						Operation:   to.Ptr("Read Networks"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Networks"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks/replicationNetworkMappings/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Read Any Network   Mappings"),
						Operation:   to.Ptr("Read Network Mappings"),
						Provider:    to.Ptr("Microsoft   Recovery Services"),
						Resource:    to.Ptr("Network Mappings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks/replicationNetworkMappings/write"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Create or Update Any Network   Mappings"),
						Operation:   to.Ptr("Create or Update Network Mappings"),
						Provider:    to.Ptr("Microsoft   Recovery Services"),
						Resource:    to.Ptr("Network Mappings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks/replicationNetworkMappings/delete"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Delete Any Network   Mappings"),
						Operation:   to.Ptr("Delete Network Mappings"),
						Provider:    to.Ptr("Microsoft   Recovery Services"),
						Resource:    to.Ptr("Network Mappings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectableItems/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Read Any Protectable   Items"),
						Operation:   to.Ptr("Read Protectable Items"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Protectable Items"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectionContainerMappings/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Read Any Protection Container Mappings"),
						Operation:   to.Ptr("Read Protection Container   Mappings"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Protection Container Mappings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectionContainerMappings/write"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Create or Update Any Protection Container Mappings"),
						Operation:   to.Ptr("Create or Update Protection Container   Mappings"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Protection Container Mappings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectionContainerMappings/remove/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Remove Protection Container Mapping"),
						Operation:   to.Ptr("Remove Protection Container   Mapping"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Protection Container Mappings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectionContainerMappings/delete"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Delete Any Protection Container Mappings"),
						Operation:   to.Ptr("Delete Protection Container   Mappings"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Protection Container Mappings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/recoveryPoints/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Read   Any Replication Recovery Points"),
						Operation:   to.Ptr("Read Replication Recovery Points"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Replication Recovery Points"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Read Any Protected   Items"),
						Operation:   to.Ptr("Read Protected Items"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/write"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Create or Update   Any Protected Items"),
						Operation:   to.Ptr("Create or Update Protected Items"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/delete"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Delete Any Protected   Items"),
						Operation:   to.Ptr("Delete Protected Items"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/remove/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Remove Protected   Item"),
						Operation:   to.Ptr("Remove Protected Item"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/plannedFailover/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Planned   Failover"),
						Operation:   to.Ptr("Planned Failover"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/unplannedFailover/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Failover"),
						Operation:   to.Ptr("Failover"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/testFailover/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Test   Failover"),
						Operation:   to.Ptr("Test Failover"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/testFailoverCleanup/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Test Failover   Cleanup"),
						Operation:   to.Ptr("Test Failover Cleanup"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/failoverCommit/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Failover   Commit"),
						Operation:   to.Ptr("Failover Commit"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/reProtect/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("ReProtect Protected   Item"),
						Operation:   to.Ptr("ReProtect Protected Item"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/updateMobilityService/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Update Mobility   Service"),
						Operation:   to.Ptr("Update Mobility Service"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/repairReplication/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Repair   replication"),
						Operation:   to.Ptr("Repair replication"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/applyRecoveryPoint/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Apply Recovery   Point"),
						Operation:   to.Ptr("Apply Recovery Point"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationJobs/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Read Any Jobs"),
						Operation:   to.Ptr("Read Jobs"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Jobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationJobs/cancel/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Cancel Job"),
						Operation:   to.Ptr("Cancel Job"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Jobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationJobs/restart/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Restart job"),
						Operation:   to.Ptr("Restart job"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Jobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationJobs/resume/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Resume Job"),
						Operation:   to.Ptr("Resume Job"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Jobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Read Any Protection   Containers"),
						Operation:   to.Ptr("Read Protection Containers"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Protection Containers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/discoverProtectableItem/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Discover   Protectable Item"),
						Operation:   to.Ptr("Discover Protectable Item"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Protection Containers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/write"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Create or Update Any Protection   Containers"),
						Operation:   to.Ptr("Create or Update Protection Containers"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Protection Containers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/remove/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Remove Protection   Container"),
						Operation:   to.Ptr("Remove Protection Container"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Protection Containers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/switchprotection/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Switch Protection   Container"),
						Operation:   to.Ptr("Switch Protection Container"),
						Provider:    to.Ptr("Microsoft   Recovery Services"),
						Resource:    to.Ptr("Protection Containers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationPolicies/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Read Any Policies"),
						Operation:   to.Ptr("Read Policies"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Policies"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationPolicies/write"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Create or Update Any Policies"),
						Operation:   to.Ptr("Create or Update Policies"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Policies"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationPolicies/delete"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Delete Any Policies"),
						Operation:   to.Ptr("Delete Policies"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Policies"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationRecoveryPlans/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Read Any Recovery Plans"),
						Operation:   to.Ptr("Read Recovery Plans"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Recovery   Plans"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationRecoveryPlans/write"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Create or Update Any Recovery Plans"),
						Operation:   to.Ptr("Create or Update Recovery Plans"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Recovery   Plans"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationRecoveryPlans/delete"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Delete Any Recovery Plans"),
						Operation:   to.Ptr("Delete Recovery Plans"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Recovery   Plans"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationRecoveryPlans/plannedFailover/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Planned Failover Recovery   Plan"),
						Operation:   to.Ptr("Planned Failover Recovery Plan"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Recovery Plans"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationRecoveryPlans/unplannedFailover/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Failover Recovery   Plan"),
						Operation:   to.Ptr("Failover Recovery Plan"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Recovery Plans"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationRecoveryPlans/testFailover/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Test Failover Recovery   Plan"),
						Operation:   to.Ptr("Test Failover Recovery Plan"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Recovery Plans"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationRecoveryPlans/testFailoverCleanup/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Test Failover   Cleanup Recovery Plan"),
						Operation:   to.Ptr("Test Failover Cleanup Recovery Plan"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Recovery Plans"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationRecoveryPlans/failoverCommit/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Failover Commit   Recovery Plan"),
						Operation:   to.Ptr("Failover Commit Recovery Plan"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Recovery Plans"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationRecoveryPlans/reProtect/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("ReProtect Recovery   Plan"),
						Operation:   to.Ptr("ReProtect Recovery Plan"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Recovery Plans"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationRecoveryServicesProviders/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Read   Any Recovery Services Providers"),
						Operation:   to.Ptr("Read Recovery Services Providers"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Recovery Services Providers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationRecoveryServicesProviders/remove/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Remove Recovery Services   Provider"),
						Operation:   to.Ptr("Remove Recovery Services Provider"),
						Provider:    to.Ptr("Microsoft   Recovery Services"),
						Resource:    to.Ptr("Recovery Services Providers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationRecoveryServicesProviders/delete"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Delete Any Recovery Services   Providers"),
						Operation:   to.Ptr("Delete Recovery Services Providers"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Recovery Services Providers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationRecoveryServicesProviders/refreshProvider/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Refresh   Provider"),
						Operation:   to.Ptr("Refresh Provider"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Recovery Services Providers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Read Any Fabrics"),
						Operation:   to.Ptr("Read Fabrics"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Fabrics"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/write"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Create or Update Any Fabrics"),
						Operation:   to.Ptr("Create or Update Fabrics"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Fabrics"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/remove/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Remove Fabric"),
						Operation:   to.Ptr("Remove Fabric"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Fabrics"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/checkConsistency/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Checks Consistency of the   Fabric"),
						Operation:   to.Ptr("Checks Consistency of the Fabric"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Fabrics"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/delete"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Delete Any Fabrics"),
						Operation:   to.Ptr("Delete Fabrics"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Fabrics"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/renewcertificate/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Renew Certificate for Fabric"),
						Operation:   to.Ptr("Renew Certificate for Fabric"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Fabrics"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/deployProcessServerImage/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Deploy Process Server Image"),
						Operation:   to.Ptr("Deploy Process Server Image"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Fabrics"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/reassociateGateway/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Reassociate Gateway"),
						Operation:   to.Ptr("Reassociate Gateway"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Fabrics"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationStorageClassifications/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Read Any Storage   Classifications"),
						Operation:   to.Ptr("Read Storage Classifications"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Storage Classifications"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationStorageClassifications/replicationStorageClassificationMappings/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Read Any Storage Classification Mappings"),
						Operation:   to.Ptr("Read Storage Classification   Mappings"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Storage Classification Mappings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationStorageClassifications/replicationStorageClassificationMappings/write"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Create or Update Any Storage Classification Mappings"),
						Operation:   to.Ptr("Create or Update Storage Classification   Mappings"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Storage Classification Mappings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationStorageClassifications/replicationStorageClassificationMappings/delete"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Delete Any Storage Classification Mappings"),
						Operation:   to.Ptr("Delete Storage Classification   Mappings"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Storage Classification Mappings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/usages/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Read Any Vault Usages"),
						Operation:   to.Ptr("Read   Vault Usages"),
						Provider:    to.Ptr("Microsoft Recovery Services"),
						Resource:    to.Ptr("Vault Usages"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationvCenters/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Read Any Jobs"),
						Operation:   to.Ptr("Read Jobs"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Jobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationvCenters/write"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Create or Update Any Jobs"),
						Operation:   to.Ptr("Create or Update Jobs"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Jobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationvCenters/delete"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Delete Any Jobs"),
						Operation:   to.Ptr("Delete Jobs"),
						Provider:    to.Ptr("Microsoft Recovery   Services"),
						Resource:    to.Ptr("Jobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/usages/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Returns usage details for a Recovery Services Vault."),
						Operation:   to.Ptr("Recovery Services Vault usage details."),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Vault   Usage"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupUsageSummaries/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Returns summaries for   Protected Items and Protected Servers for a Recovery Services ."),
						Operation:   to.Ptr("Recovery Services Protected Items and Protected Servers usage summaries details."),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Backup Usages   Summaries"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/storageConfig/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Returns Storage Configuration for Recovery Services Vault."),
						Operation:   to.Ptr("Get Resource Storage Config"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Vault Storage   Config"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/storageConfig/write"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Updates Storage Configuration for Recovery Services Vault."),
						Operation:   to.Ptr("Write Resource Storage Config"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Vault Storage   Config"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupconfig/vaultconfig/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Returns Configuration for Recovery Services Vault."),
						Operation:   to.Ptr("Get Resource Config"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Vault   Config"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupconfig/vaultconfig/write"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Updates Configuration for Recovery Services Vault."),
						Operation:   to.Ptr("Update Resource Config"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Vault   Config"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/tokenInfo/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Returns token information for Recovery Services Vault."),
						Operation:   to.Ptr("Get   Vault Token Info"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Token Info"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupSecurityPIN/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Returns Security PIN   Information for Recovery Services Vault."),
						Operation:   to.Ptr("Get Security PIN Info"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("SecurityPINInfo"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupManagementMetaData/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Returns   Backup Management Metadata for Recovery Services Vault."),
						Operation:   to.Ptr("Get Backup Management Metadata"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Backup Management Metadata"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupOperationResults/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Returns Backup Operation Result for Recovery Services Vault."),
						Operation:   to.Ptr("Get Backup Operation Result"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Backup Operation   Results"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupOperations/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Returns Backup Operation Status for Recovery Services Vault."),
						Operation:   to.Ptr("Get Backup Operation Status"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Backup Operation   Status"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupJobs/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Returns all Job Objects"),
						Operation:   to.Ptr("Get Jobs"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Backup   Jobs"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupJobs/cancel/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Cancel the Job"),
						Operation:   to.Ptr("Cancel Jobs"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Backup   Jobs"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupJobsExport/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Export Jobs"),
						Operation:   to.Ptr("Export Jobs"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Export Backup   Jobs"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupJobs/operationResults/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Returns the Result of Job Operation."),
						Operation:   to.Ptr("Get Job Operation Result"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Backup Jobs   Operation Results"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupJobsExport/operationResults/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Returns the Result of Export Job Operation."),
						Operation:   to.Ptr("Get Export Job Operation   Result"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Export Backup Jobs Operation Results"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Get Recovery Points for   Protected Items."),
						Operation:   to.Ptr("Get Recovery Points"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Recovery Points"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints/restore/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Restore Recovery Points for   Protected Items."),
						Operation:   to.Ptr("Restore Recovery Points"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Recovery Points"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints/provisionInstantItemRecovery/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Provision Instant Item Recovery for Protected Item"),
						Operation:   to.Ptr("Provision Instant Item Recovery for Protected   Item"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Recovery Points"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints/revokeInstantItemRecovery/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Revoke Instant Item Recovery for Protected Item"),
						Operation:   to.Ptr("Revoke Instant Item Recovery for Protected   Item"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Recovery Points"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupPolicies/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Returns all Protection Policies"),
						Operation:   to.Ptr("Get Protection Policy"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Backup   Policies"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupPolicies/write"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Creates Protection Policy"),
						Operation:   to.Ptr("Create Protection Policy"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Backup   Policies"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupPolicies/delete"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Delete a Protection Policy"),
						Operation:   to.Ptr("Delete Protection Policy"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Backup   Policies"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupPolicies/operationResults/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Get Results of Policy Operation."),
						Operation:   to.Ptr("Get Policy Operation Results"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Backup   Policy Operation Results"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupPolicies/operationStatus/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Get Status of Policy Operation."),
						Operation:   to.Ptr("Get Policy Operation Status"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Backup   Policy Operation Status"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Returns object details of   the Protected Item"),
						Operation:   to.Ptr("Get Protected Item Details"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupProtectedItems/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Returns the list of all   Protected Items."),
						Operation:   to.Ptr("Get All Protected Items"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/write"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Create a backup   Protected Item"),
						Operation:   to.Ptr("Create Backup Protected Item"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/delete"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Deletes Protected   Item"),
						Operation:   to.Ptr("Delete Protected Items"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/operationResults/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Gets Result of Operation Performed on Protected Items."),
						Operation:   to.Ptr("Get Protected Items Operation   Results"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Protected Item Operation Results"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/operationStatus/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Returns the status of Operation performed on Protected Items."),
						Operation:   to.Ptr("Get Protected Items operation   status"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Protected Item Operation Status"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/backup/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Performs Backup for Protected   Item."),
						Operation:   to.Ptr("Backup Protected Item"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Protected Items"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupProtectableItems/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Returns list of all   Protectable Items."),
						Operation:   to.Ptr("Get Protectable Items"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Backup Protectable Items"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/refreshContainers/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Refreshes the container   list"),
						Operation:   to.Ptr("Refresh container"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Refresh Containers"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupFabrics/operationResults/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Returns   status of the operation"),
						Operation:   to.Ptr("Get Operation Results"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Refresh Containers Operation Results"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupProtectionContainers/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Returns   all containers belonging to the subscription"),
						Operation:   to.Ptr("Get Containers In Subscription"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Backup Protection Containers"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Returns all   registered containers"),
						Operation:   to.Ptr("Get Registered Container"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Protection Containers"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/operationResults/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Gets result of Operation performed on Protection Container."),
						Operation:   to.Ptr("Get Container Operation   Results"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Protection Containers Operation Results"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupEngines"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Returns all the backup management servers registered with   vault."),
						Operation:   to.Ptr("List of backup management servers."),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Backup   Engines"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/backupStatus"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Check Backup Status for   Recovery Services Vaults"),
						Operation:   to.Ptr("Check Backup Status for Vault"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Backup Status"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/write"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("Create Vault operation creates an Azure resource   of type 'vault'"),
						Operation:   to.Ptr("Create Vault"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Vaults"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("The Get Vault operation gets an object representing   the Azure resource of type 'vault'"),
						Operation:   to.Ptr("Get Vault"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Vaults"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/delete"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("The Delete Vault operation deletes the specified   Azure resource of type 'vault'"),
						Operation:   to.Ptr("Delete Vault"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Vaults"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/extendedInformation/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("The Get Extended Info operation gets an   object's Extended Info representing the Azure resource of type ?vault?"),
						Operation:   to.Ptr("Get Extended Info"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Vaults"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/extendedInformation/write"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("The Get Extended Info operation gets an   object's Extended Info representing the Azure resource of type ?vault?"),
						Operation:   to.Ptr("Get Extended Info"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Vaults"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/Vaults/extendedInformation/delete"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("The Get Extended Info operation gets an   object's Extended Info representing the Azure resource of type ?vault?"),
						Operation:   to.Ptr("Get Extended Info"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("Vaults"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/locations/allocatedStamp/read"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("GetAllocatedStamp is   internal operation used by service"),
						Operation:   to.Ptr("Get Allocated Stamp"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("locations/allocatedStamp"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.RecoveryServices/locations/allocateStamp/action"),
					Display: &armrecoveryservicessiterecovery.Display{
						Description: to.Ptr("AllocateStamp is   internal operation used by service"),
						Operation:   to.Ptr("Allocated Stamp Action"),
						Provider:    to.Ptr("Microsoft.RecoveryServices"),
						Resource:    to.Ptr("locations/allocateStamp"),
					},
					Origin: to.Ptr("user"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationsDiscoveryCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationsDiscoveryCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationAlertSettings_List(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationAlertSettings_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of configured email notification(alert) configurations."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationAlertSettingsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationAlertSettings_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.AlertCollection{
			Value: []*armrecoveryservicessiterecovery.Alert{
				{
					Name: to.Ptr("defaultAlertSetting"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationAlertSettings"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationAlertSettings/defaultAlertSetting"),
					Properties: &armrecoveryservicessiterecovery.AlertProperties{
						CustomEmailAddresses: []*string{
							to.Ptr("ronehr@microsoft.com")},
						Locale:       to.Ptr("en-US"),
						SendToOwners: to.Ptr("false"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AlertCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AlertCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationAlertSettings_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationAlertSettings_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationAlertSettings_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets an email notification(alert) configuration."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationAlertSettingsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	res, err := client.Get(ctx,
		"defaultAlertSetting",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationAlertSettings_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.Alert{
			Name: to.Ptr("defaultAlertSetting"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationAlertSettings"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationAlertSettings/defaultAlertSetting"),
			Properties: &armrecoveryservicessiterecovery.AlertProperties{
				CustomEmailAddresses: []*string{
					to.Ptr("ronehr@microsoft.com")},
				Locale:       to.Ptr("en-US"),
				SendToOwners: to.Ptr("false"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Alert) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Alert)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationAlertSettings_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationAlertSettings_Create(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationAlertSettings_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Configures email notifications for this vault."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationAlertSettingsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	res, err := client.Create(ctx,
		"defaultAlertSetting",
		armrecoveryservicessiterecovery.ConfigureAlertRequest{
			Properties: &armrecoveryservicessiterecovery.ConfigureAlertRequestProperties{
				CustomEmailAddresses: []*string{
					to.Ptr("ronehr@microsoft.com")},
				Locale:       to.Ptr(""),
				SendToOwners: to.Ptr("false"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationAlertSettings_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.Alert{
			Name: to.Ptr("defaultAlertSetting"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationAlertSettings"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationAlertSettings/defaultAlertSetting"),
			Properties: &armrecoveryservicessiterecovery.AlertProperties{
				CustomEmailAddresses: []*string{
					to.Ptr("ronehr@microsoft.com")},
				Locale:       to.Ptr("en-US"),
				SendToOwners: to.Ptr("false"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Alert) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Alert)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationAlertSettings_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationAppliances_List(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationAppliances_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of appliances."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationAppliancesClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	pager := client.List(&armrecoveryservicessiterecovery.ReplicationAppliancesClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationAppliances_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.ApplianceCollection{
			Value: []*armrecoveryservicessiterecovery.ReplicationAppliance{
				{
					Properties: &armrecoveryservicessiterecovery.ReplicationApplianceProperties{
						ProviderSpecificDetails: &armrecoveryservicessiterecovery.InMageRcmApplianceSpecificDetails{
							InstanceType: to.Ptr("InMageRcm"),
							Appliances:   []*armrecoveryservicessiterecovery.InMageRcmApplianceDetails{},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ApplianceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ApplianceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationAppliances_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationEligibilityResults_List(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationEligibilityResults_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the validation errors in case the VM is unsuitable for protection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationEligibilityResultsClient("testRg1",
		"d90d145a-4cdd-45a3-b2c4-971d69775278", cred, &options)
	res, err := client.List(ctx,
		"testVm2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationEligibilityResults_List.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ReplicationEligibilityResultsCollection{
			Value: []*armrecoveryservicessiterecovery.ReplicationEligibilityResults{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.RecoveryServices/replicationEligibilityResults"),
					ID:   to.Ptr("/subscriptions/d90d145a-4cdd-45a3-b2c4-971d69775278/resourceGroups/testRg1/providers/Microsoft.Compute/virtualMachines/testVm2/providers/Microsoft.RecoveryServices/replicationEligibilityResults/default"),
					Properties: &armrecoveryservicessiterecovery.ReplicationEligibilityResultsProperties{
						ClientRequestID: to.Ptr("a62c81df-e26e-47ea-ab4b-f1fcc1e5b135"),
						Errors: []*armrecoveryservicessiterecovery.ReplicationEligibilityResultsErrorInfo{
							{
								Code:              to.Ptr("AzureVmIsNotInDesiredProvisioningState"),
								Message:           to.Ptr("Azure virtual machine with Id (/subscriptions/d90d145a-4cdd-45a3-b2c4-971d69775278/resourceGroups/testRg1/providers/Microsoft.Compute/virtualMachines/testVm2) is with provisioning state 'failed'. To enable replication, VM's provisioning state should be 'succeeded'."),
								PossibleCauses:    to.Ptr("Virtual machine is not in desired state."),
								RecommendedAction: to.Ptr("\n      Ensure that the VM's provisioning state is 'succeeded'.\n      Refer to https://aka.ms/a2a-vm-state-issues to troubleshoot VM provisioning state issues.\n    "),
								Status:            to.Ptr("Error"),
							},
							{
								Code:              to.Ptr("AzureVmIsNotInDesiredPowerState"),
								Message:           to.Ptr("Azure virtual machine with Id (/subscriptions/d90d145a-4cdd-45a3-b2c4-971d69775278/resourceGroups/testRg1/providers/Microsoft.Compute/virtualMachines/testVm2) is with power status 'deallocated'. To enable replication, VM's power status should be 'running'."),
								PossibleCauses:    to.Ptr("Virtual machine is not in desired state."),
								RecommendedAction: to.Ptr("\n      Ensure that the VM's power status is 'running'.\n      You can check the power status in 'VM > Settings > Properties > Status' in Azure portal.\n    "),
								Status:            to.Ptr("Error"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationEligibilityResultsCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationEligibilityResultsCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationEligibilityResults_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationEligibilityResults_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationEligibilityResults_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the validation errors in case the VM is unsuitable for protection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationEligibilityResultsClient("testRg1",
		"d90d145a-4cdd-45a3-b2c4-971d69775278", cred, &options)
	res, err := client.Get(ctx,
		"testVm1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationEligibilityResults_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ReplicationEligibilityResults{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.RecoveryServices/replicationEligibilityResults"),
			ID:   to.Ptr("/subscriptions/d90d145a-4cdd-45a3-b2c4-971d69775278/resourceGroups/testRg1/providers/Microsoft.Compute/virtualMachines/testVm1/providers/Microsoft.RecoveryServices/replicationEligibilityResults/default"),
			Properties: &armrecoveryservicessiterecovery.ReplicationEligibilityResultsProperties{
				ClientRequestID: to.Ptr("7d72ade7-b9f7-4d9b-8a19-15d9728c6190"),
				Errors: []*armrecoveryservicessiterecovery.ReplicationEligibilityResultsErrorInfo{
					{
						Code:              to.Ptr("A2AOperatingSystemNotSupported"),
						Message:           to.Ptr("The A2A operation could not be completed as the virtual machine is running OS 'ubuntu' with version '18.04' which is not supported for replication."),
						PossibleCauses:    to.Ptr("OS version not supported."),
						RecommendedAction: to.Ptr("The virtual machine is running unsupported Operating system. Refer to the documentation for supported OS versions - https://aka.ms/a2a-os-support-matrix."),
						Status:            to.Ptr("Error"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationEligibilityResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationEligibilityResults)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationEligibilityResults_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationEvents_List(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationEvents_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of Azure Site Recovery events."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationEventsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	pager := client.List(&armrecoveryservicessiterecovery.ReplicationEventsClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationEvents_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.EventCollection{
			Value: []*armrecoveryservicessiterecovery.Event{
				{
					Name: to.Ptr("JobStatusMonitoringEvent;9091989892524070155_4ed6f1a6-9b6d-4048-9079-1307dd24b814"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationEvents"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationEvents/JobStatusMonitoringEvent;9091989892524070155_4ed6f1a6-9b6d-4048-9079-1307dd24b814"),
					Properties: &armrecoveryservicessiterecovery.EventProperties{
						Description:                to.Ptr("TestFailover - Failed"),
						AffectedObjectFriendlyName: to.Ptr("vm1"),
						EventCode:                  to.Ptr("d32574f6-f59e-4545-b5ac-bc88d545f089"),
						EventSpecificDetails: &armrecoveryservicessiterecovery.JobStatusEventDetails{
							InstanceType: to.Ptr("JobStatus"),
						},
						EventType: to.Ptr("JobStatus"),
						FabricID:  to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1"),
						HealthErrors: []*armrecoveryservicessiterecovery.HealthError{
							{
								ErrorCode:         to.Ptr("499"),
								ErrorMessage:      to.Ptr("An internal error occurred."),
								PossibleCauses:    to.Ptr("The operation failed due to an internal error."),
								RecommendedAction: to.Ptr("Retry the last action. If the issue persists, contact Support."),
							}},
						ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureEventDetails{
							InstanceType: to.Ptr("HyperVReplicaAzure"),
						},
						Severity:         to.Ptr("Critical"),
						TimeOfOccurrence: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-02T16:00:33.0705652Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("VmMonitoringEvent;9091989947769704276_516de684-0079-48f7-b44b-882923268654"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationEvents"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationEvents/VmMonitoringEvent;9091989947769704276_516de684-0079-48f7-b44b-882923268654"),
					Properties: &armrecoveryservicessiterecovery.EventProperties{
						Description:                to.Ptr("Virtual machine health is OK"),
						AffectedObjectFriendlyName: to.Ptr("vm1"),
						EventCode:                  to.Ptr("d9a07b07-c7b5-49ca-ab6c-6926596dfe47"),
						EventSpecificDetails: &armrecoveryservicessiterecovery.JobStatusEventDetails{
							InstanceType: to.Ptr("JobStatus"),
						},
						EventType:    to.Ptr("VmHealth"),
						FabricID:     to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1"),
						HealthErrors: []*armrecoveryservicessiterecovery.HealthError{},
						ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureEventDetails{
							InstanceType: to.Ptr("HyperVReplicaAzure"),
						},
						Severity:         to.Ptr("OK"),
						TimeOfOccurrence: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-02T14:28:28.5071531Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationEvents_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationEvents_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationEvents_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the details of an Azure Site recovery event."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationEventsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	res, err := client.Get(ctx,
		"654b71d0-b2ce-4e6e-a861-98528d4bd375",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationEvents_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.Event{
			Name: to.Ptr("VmMonitoringEvent;9091989947769704276_516de684-0079-48f7-b44b-882923268654"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationEvents"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationEvents/VmMonitoringEvent;9091989947769704276_516de684-0079-48f7-b44b-882923268654"),
			Properties: &armrecoveryservicessiterecovery.EventProperties{
				Description:                to.Ptr("Virtual machine health is OK"),
				AffectedObjectFriendlyName: to.Ptr("vm1"),
				EventCode:                  to.Ptr("d9a07b07-c7b5-49ca-ab6c-6926596dfe47"),
				EventSpecificDetails: &armrecoveryservicessiterecovery.JobStatusEventDetails{
					InstanceType: to.Ptr("JobStatus"),
				},
				EventType:    to.Ptr("VmHealth"),
				FabricID:     to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1"),
				HealthErrors: []*armrecoveryservicessiterecovery.HealthError{},
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureEventDetails{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
				Severity:         to.Ptr("OK"),
				TimeOfOccurrence: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-02T14:28:28.5071531Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Event) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Event)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationEvents_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationFabrics_List(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of ASR fabrics."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationFabricsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.FabricCollection{
			Value: []*armrecoveryservicessiterecovery.Fabric{
				{
					Name: to.Ptr("cloud1"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1"),
					Properties: &armrecoveryservicessiterecovery.FabricProperties{
						BcdrState: to.Ptr("Valid"),
						CustomDetails: &armrecoveryservicessiterecovery.HyperVSiteDetails{
							InstanceType: to.Ptr("HyperVSite"),
						},
						EncryptionDetails: &armrecoveryservicessiterecovery.EncryptionDetails{
							KekState: to.Ptr("None"),
						},
						FriendlyName:       to.Ptr("cloud1"),
						Health:             to.Ptr("Normal"),
						HealthErrorDetails: []*armrecoveryservicessiterecovery.HealthError{},
						InternalIdentifier: to.Ptr("6d224fc6-f326-5d35-96de-fbf51efb3179"),
						RolloverEncryptionDetails: &armrecoveryservicessiterecovery.EncryptionDetails{
							KekState: to.Ptr("None"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FabricCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FabricCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationFabrics_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the details of an ASR fabric."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationFabricsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	res, err := client.Get(ctx,
		"cloud1",
		&armrecoveryservicessiterecovery.ReplicationFabricsClientGetOptions{Filter: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.Fabric{
			Name: to.Ptr("cloud1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1"),
			Properties: &armrecoveryservicessiterecovery.FabricProperties{
				BcdrState: to.Ptr("Valid"),
				CustomDetails: &armrecoveryservicessiterecovery.HyperVSiteDetails{
					InstanceType: to.Ptr("HyperVSite"),
				},
				EncryptionDetails: &armrecoveryservicessiterecovery.EncryptionDetails{
					KekState: to.Ptr("None"),
				},
				FriendlyName:       to.Ptr("cloud1"),
				Health:             to.Ptr("Normal"),
				HealthErrorDetails: []*armrecoveryservicessiterecovery.HealthError{},
				InternalIdentifier: to.Ptr("6d224fc6-f326-5d35-96de-fbf51efb3179"),
				RolloverEncryptionDetails: &armrecoveryservicessiterecovery.EncryptionDetails{
					KekState: to.Ptr("None"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Fabric) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Fabric)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationFabrics_Create(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates an Azure Site Recovery fabric."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationFabricsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"cloud1",
		armrecoveryservicessiterecovery.FabricCreationInput{
			Properties: &armrecoveryservicessiterecovery.FabricCreationInputProperties{
				CustomDetails: &armrecoveryservicessiterecovery.FabricSpecificCreationInput{
					InstanceType: to.Ptr("FabricSpecificCreationInput"),
				},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationFabricsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.Fabric{
			Name: to.Ptr("cloud1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1"),
			Properties: &armrecoveryservicessiterecovery.FabricProperties{
				BcdrState: to.Ptr("Valid"),
				CustomDetails: &armrecoveryservicessiterecovery.HyperVSiteDetails{
					InstanceType: to.Ptr("HyperVSite"),
				},
				EncryptionDetails: &armrecoveryservicessiterecovery.EncryptionDetails{
					KekState: to.Ptr("None"),
				},
				FriendlyName:       to.Ptr("cloud1"),
				Health:             to.Ptr("Normal"),
				HealthErrorDetails: []*armrecoveryservicessiterecovery.HealthError{},
				InternalIdentifier: to.Ptr("6d224fc6-f326-5d35-96de-fbf51efb3179"),
				RolloverEncryptionDetails: &armrecoveryservicessiterecovery.EncryptionDetails{
					KekState: to.Ptr("None"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Fabric) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Fabric)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationFabrics_Purge(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_Purge.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Purges the site."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationFabricsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginPurge(ctx,
		"cloud1",
		&armrecoveryservicessiterecovery.ReplicationFabricsClientBeginPurgeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_Purge.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_Purge.json: %v", err)
	}
}

func TestReplicationFabrics_CheckConsistency(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_CheckConsistency.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Checks the consistency of the ASR fabric."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationFabricsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginCheckConsistency(ctx,
		"cloud1",
		&armrecoveryservicessiterecovery.ReplicationFabricsClientBeginCheckConsistencyOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_CheckConsistency.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_CheckConsistency.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.Fabric{
			Name: to.Ptr("cloud1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1"),
			Properties: &armrecoveryservicessiterecovery.FabricProperties{
				BcdrState: to.Ptr("Valid"),
				CustomDetails: &armrecoveryservicessiterecovery.HyperVSiteDetails{
					InstanceType: to.Ptr("HyperVSite"),
				},
				EncryptionDetails: &armrecoveryservicessiterecovery.EncryptionDetails{
					KekState: to.Ptr("None"),
				},
				FriendlyName:       to.Ptr("cloud1"),
				Health:             to.Ptr("Normal"),
				HealthErrorDetails: []*armrecoveryservicessiterecovery.HealthError{},
				InternalIdentifier: to.Ptr("6d224fc6-f326-5d35-96de-fbf51efb3179"),
				RolloverEncryptionDetails: &armrecoveryservicessiterecovery.EncryptionDetails{
					KekState: to.Ptr("None"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Fabric) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Fabric)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_CheckConsistency.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationFabrics_ReassociateGateway(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_ReassociateGateway.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Perform failover of the process server."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationFabricsClient("MadhaviVault",
		"MadhaviVRG",
		"7c943c1b-5122-4097-90c8-861411bdd574", cred, &options)
	poller, err := client.BeginReassociateGateway(ctx,
		"GRACE-V2A-1",
		armrecoveryservicessiterecovery.FailoverProcessServerRequest{
			Properties: &armrecoveryservicessiterecovery.FailoverProcessServerRequestProperties{
				ContainerName:         to.Ptr("cloud_1f3c15af-2256-4568-9e06-e1ef4f728f75"),
				SourceProcessServerID: to.Ptr("AFA0EC54-1894-4E44-9CAB02DB8854B117"),
				TargetProcessServerID: to.Ptr("5D3ED340-85AE-C646-B338641E015DA405"),
				UpdateType:            to.Ptr("ServerLevel"),
				VMsToMigrate: []*string{
					to.Ptr("Vm1"),
					to.Ptr("Vm2")},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationFabricsClientBeginReassociateGatewayOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_ReassociateGateway.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_ReassociateGateway.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.Fabric{
			Name: to.Ptr("bc15edf300344660d9c2965f5d9225593d99734f6580613c997033abc3512a56"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics"),
			ID:   to.Ptr("/Subscriptions/7c943c1b-5122-4097-90c8-861411bdd574/resourceGroups/MadhaviVRG/providers/Microsoft.RecoveryServices/vaults/MadhaviVault/replicationFabrics/bc15edf300344660d9c2965f5d9225593d99734f6580613c997033abc3512a56"),
			Properties: &armrecoveryservicessiterecovery.FabricProperties{
				BcdrState: to.Ptr("Valid"),
				CustomDetails: &armrecoveryservicessiterecovery.VMwareDetails{
					InstanceType: to.Ptr("VMware"),
				},
				EncryptionDetails: &armrecoveryservicessiterecovery.EncryptionDetails{
					KekState: to.Ptr("None"),
				},
				FriendlyName:       to.Ptr("GRACE-V2A-1"),
				Health:             to.Ptr("Normal"),
				HealthErrorDetails: []*armrecoveryservicessiterecovery.HealthError{},
				InternalIdentifier: to.Ptr("1f3c15af-2256-4568-9e06-e1ef4f728f75"),
				RolloverEncryptionDetails: &armrecoveryservicessiterecovery.EncryptionDetails{
					KekState: to.Ptr("None"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Fabric) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Fabric)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_ReassociateGateway.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationFabrics_Delete(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes the site."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationFabricsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"cloud1",
		&armrecoveryservicessiterecovery.ReplicationFabricsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_Delete.json: %v", err)
	}
}

func TestReplicationFabrics_RenewCertificate(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_RenewCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Renews certificate for the fabric."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationFabricsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginRenewCertificate(ctx,
		"cloud1",
		armrecoveryservicessiterecovery.RenewCertificateInput{
			Properties: &armrecoveryservicessiterecovery.RenewCertificateInputProperties{
				RenewCertificateType: to.Ptr("Cloud"),
			},
		},
		&armrecoveryservicessiterecovery.ReplicationFabricsClientBeginRenewCertificateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_RenewCertificate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_RenewCertificate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.Fabric{
			Name: to.Ptr("cloud1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1"),
			Properties: &armrecoveryservicessiterecovery.FabricProperties{
				BcdrState: to.Ptr("Valid"),
				CustomDetails: &armrecoveryservicessiterecovery.HyperVSiteDetails{
					InstanceType: to.Ptr("HyperVSite"),
				},
				EncryptionDetails: &armrecoveryservicessiterecovery.EncryptionDetails{
					KekState: to.Ptr("None"),
				},
				FriendlyName:       to.Ptr("cloud1"),
				Health:             to.Ptr("Normal"),
				HealthErrorDetails: []*armrecoveryservicessiterecovery.HealthError{},
				InternalIdentifier: to.Ptr("6d224fc6-f326-5d35-96de-fbf51efb3179"),
				RolloverEncryptionDetails: &armrecoveryservicessiterecovery.EncryptionDetails{
					KekState: to.Ptr("None"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Fabric) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Fabric)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationFabrics_RenewCertificate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationLogicalNetworks_ListByReplicationFabrics(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationLogicalNetworks_ListByReplicationFabrics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of logical networks under a fabric."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationLogicalNetworksClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	pager := client.ListByReplicationFabrics("cloud1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationLogicalNetworks_ListByReplicationFabrics.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.LogicalNetworkCollection{
			Value: []*armrecoveryservicessiterecovery.LogicalNetwork{
				{
					Name: to.Ptr("87ab394f-165f-4aa9-bd84-b018500b4509"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationLogicalNetworks"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationLogicalNetworks/53f5a278-ae85-4001-bd5f-f6a02e1f579d"),
					Properties: &armrecoveryservicessiterecovery.LogicalNetworkProperties{
						FriendlyName:                    to.Ptr("corp"),
						LogicalNetworkDefinitionsStatus: to.Ptr("LogicalNetworkDefinitionsNotIsolated"),
						LogicalNetworkUsage:             to.Ptr("NotUsedAsPrivateNetworkForTestFailover"),
						NetworkVirtualizationStatus:     to.Ptr("NetworkVirtualizationNotEnabled"),
					},
				},
				{
					Name: to.Ptr("53f5a278-ae85-4001-bd5f-f6a02e1f579d"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationLogicalNetworks"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationLogicalNetworks/87ab394f-165f-4aa9-bd84-b018500b4509"),
					Properties: &armrecoveryservicessiterecovery.LogicalNetworkProperties{
						FriendlyName:                    to.Ptr("LN-VLANNetwork-4"),
						LogicalNetworkDefinitionsStatus: to.Ptr("LogicalNetworkDefinitionsIsolated"),
						LogicalNetworkUsage:             to.Ptr("NotUsedAsPrivateNetworkForTestFailover"),
						NetworkVirtualizationStatus:     to.Ptr("NetworkVirtualizationNotEnabled"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LogicalNetworkCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LogicalNetworkCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationLogicalNetworks_ListByReplicationFabrics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationLogicalNetworks_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationLogicalNetworks_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a logical network with specified server id and logical network name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationLogicalNetworksClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	res, err := client.Get(ctx,
		"cloud1",
		"87ab394f-165f-4aa9-bd84-b018500b4509",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationLogicalNetworks_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.LogicalNetwork{
			Name: to.Ptr("87ab394f-165f-4aa9-bd84-b018500b4509"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationLogicalNetworks"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationLogicalNetworks/53f5a278-ae85-4001-bd5f-f6a02e1f579d"),
			Properties: &armrecoveryservicessiterecovery.LogicalNetworkProperties{
				FriendlyName:                    to.Ptr("corp"),
				LogicalNetworkDefinitionsStatus: to.Ptr("LogicalNetworkDefinitionsNotIsolated"),
				LogicalNetworkUsage:             to.Ptr("NotUsedAsPrivateNetworkForTestFailover"),
				NetworkVirtualizationStatus:     to.Ptr("NetworkVirtualizationNotEnabled"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LogicalNetwork) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LogicalNetwork)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationLogicalNetworks_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationNetworks_ListByReplicationFabrics(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworks_ListByReplicationFabrics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of networks under a fabric."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationNetworksClient("srce2avaultbvtaC27",
		"srcBvte2a14C27",
		"9112a37f-0f3e-46ec-9c00-060c6edca071", cred, &options)
	pager := client.ListByReplicationFabrics("b0cef6e9a4437b81803d0b55ada4f700ab66caae59c35d62723a1589c0cd13ac",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworks_ListByReplicationFabrics.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.NetworkCollection{
			Value: []*armrecoveryservicessiterecovery.Network{
				{
					Name: to.Ptr("93ce99d7-1219-4914-aa61-73fe5023988e"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks"),
					ID:   to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/srcBvte2a14C27/providers/Microsoft.RecoveryServices/vaults/srce2avaultbvtaC27/replicationFabrics/b0cef6e9a4437b81803d0b55ada4f700ab66caae59c35d62723a1589c0cd13ac/replicationNetworks/93ce99d7-1219-4914-aa61-73fe5023988e"),
					Properties: &armrecoveryservicessiterecovery.NetworkProperties{
						FabricType:   to.Ptr("VMM"),
						FriendlyName: to.Ptr("VSwitch_VLan"),
						NetworkType:  to.Ptr("NoIsolation"),
						Subnets:      []*armrecoveryservicessiterecovery.Subnet{},
					},
				},
				{
					Name: to.Ptr("b83bf8fd-f304-48d7-82c9-5d74e6215c1b"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks"),
					ID:   to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/srcBvte2a14C27/providers/Microsoft.RecoveryServices/vaults/srce2avaultbvtaC27/replicationFabrics/b0cef6e9a4437b81803d0b55ada4f700ab66caae59c35d62723a1589c0cd13ac/replicationNetworks/b83bf8fd-f304-48d7-82c9-5d74e6215c1b"),
					Properties: &armrecoveryservicessiterecovery.NetworkProperties{
						FabricType:   to.Ptr("VMM"),
						FriendlyName: to.Ptr("VSwitch_NoIso"),
						NetworkType:  to.Ptr("NoIsolation"),
						Subnets:      []*armrecoveryservicessiterecovery.Subnet{},
					},
				},
				{
					Name: to.Ptr("e2267b5c-2650-49bd-ab3f-d66aae694c06"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks"),
					ID:   to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/srcBvte2a14C27/providers/Microsoft.RecoveryServices/vaults/srce2avaultbvtaC27/replicationFabrics/b0cef6e9a4437b81803d0b55ada4f700ab66caae59c35d62723a1589c0cd13ac/replicationNetworks/e2267b5c-2650-49bd-ab3f-d66aae694c06"),
					Properties: &armrecoveryservicessiterecovery.NetworkProperties{
						FabricType:   to.Ptr("VMM"),
						FriendlyName: to.Ptr("corp"),
						NetworkType:  to.Ptr("NoIsolation"),
						Subnets:      []*armrecoveryservicessiterecovery.Subnet{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NetworkCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NetworkCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworks_ListByReplicationFabrics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationNetworks_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworks_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a network with specified server id and network name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationNetworksClient("srce2avaultbvtaC27",
		"srcBvte2a14C27",
		"9112a37f-0f3e-46ec-9c00-060c6edca071", cred, &options)
	res, err := client.Get(ctx,
		"b0cef6e9a4437b81803d0b55ada4f700ab66caae59c35d62723a1589c0cd13ac",
		"93ce99d7-1219-4914-aa61-73fe5023988e",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworks_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.Network{
			Name: to.Ptr("93ce99d7-1219-4914-aa61-73fe5023988e"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks"),
			ID:   to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/srcBvte2a14C27/providers/Microsoft.RecoveryServices/vaults/srce2avaultbvtaC27/replicationFabrics/b0cef6e9a4437b81803d0b55ada4f700ab66caae59c35d62723a1589c0cd13ac/replicationNetworks/93ce99d7-1219-4914-aa61-73fe5023988e"),
			Properties: &armrecoveryservicessiterecovery.NetworkProperties{
				FabricType:   to.Ptr("VMM"),
				FriendlyName: to.Ptr("VSwitch_VLan"),
				NetworkType:  to.Ptr("NoIsolation"),
				Subnets:      []*armrecoveryservicessiterecovery.Subnet{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Network) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Network)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworks_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationNetworks_List(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworks_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of networks. View-only API."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationNetworksClient("srce2avaultbvtaC27",
		"srcBvte2a14C27",
		"9112a37f-0f3e-46ec-9c00-060c6edca071", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworks_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.NetworkCollection{
			Value: []*armrecoveryservicessiterecovery.Network{
				{
					Name: to.Ptr("93ce99d7-1219-4914-aa61-73fe5023988e"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks"),
					ID:   to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/srcBvte2a14C27/providers/Microsoft.RecoveryServices/vaults/srce2avaultbvtaC27/replicationFabrics/b0cef6e9a4437b81803d0b55ada4f700ab66caae59c35d62723a1589c0cd13ac/replicationNetworks/93ce99d7-1219-4914-aa61-73fe5023988e"),
					Properties: &armrecoveryservicessiterecovery.NetworkProperties{
						FabricType:   to.Ptr("VMM"),
						FriendlyName: to.Ptr("VSwitch_VLan"),
						NetworkType:  to.Ptr("NoIsolation"),
						Subnets:      []*armrecoveryservicessiterecovery.Subnet{},
					},
				},
				{
					Name: to.Ptr("b83bf8fd-f304-48d7-82c9-5d74e6215c1b"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks"),
					ID:   to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/srcBvte2a14C27/providers/Microsoft.RecoveryServices/vaults/srce2avaultbvtaC27/replicationFabrics/b0cef6e9a4437b81803d0b55ada4f700ab66caae59c35d62723a1589c0cd13ac/replicationNetworks/b83bf8fd-f304-48d7-82c9-5d74e6215c1b"),
					Properties: &armrecoveryservicessiterecovery.NetworkProperties{
						FabricType:   to.Ptr("VMM"),
						FriendlyName: to.Ptr("VSwitch_NoIso"),
						NetworkType:  to.Ptr("NoIsolation"),
						Subnets:      []*armrecoveryservicessiterecovery.Subnet{},
					},
				},
				{
					Name: to.Ptr("e2267b5c-2650-49bd-ab3f-d66aae694c06"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks"),
					ID:   to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/srcBvte2a14C27/providers/Microsoft.RecoveryServices/vaults/srce2avaultbvtaC27/replicationFabrics/b0cef6e9a4437b81803d0b55ada4f700ab66caae59c35d62723a1589c0cd13ac/replicationNetworks/e2267b5c-2650-49bd-ab3f-d66aae694c06"),
					Properties: &armrecoveryservicessiterecovery.NetworkProperties{
						FabricType:   to.Ptr("VMM"),
						FriendlyName: to.Ptr("corp"),
						NetworkType:  to.Ptr("NoIsolation"),
						Subnets:      []*armrecoveryservicessiterecovery.Subnet{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NetworkCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NetworkCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworks_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationNetworkMappings_ListByReplicationNetworks(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworkMappings_ListByReplicationNetworks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets all the network mappings under a network."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationNetworkMappingsClient("srce2avaultbvtaC27",
		"srcBvte2a14C27",
		"9112a37f-0f3e-46ec-9c00-060c6edca071", cred, &options)
	pager := client.ListByReplicationNetworks("b0cef6e9a4437b81803d0b55ada4f700ab66caae59c35d62723a1589c0cd13ac",
		"e2267b5c-2650-49bd-ab3f-d66aae694c06",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworkMappings_ListByReplicationNetworks.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.NetworkMappingCollection{
			Value: []*armrecoveryservicessiterecovery.NetworkMapping{
				{
					Name: to.Ptr("corpe2amap"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks/replicationNetworkMappings"),
					ID:   to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/srcBvte2a14C27/providers/Microsoft.RecoveryServices/vaults/srce2avaultbvtaC27/replicationFabrics/b0cef6e9a4437b81803d0b55ada4f700ab66caae59c35d62723a1589c0cd13ac/replicationNetworks/e2267b5c-2650-49bd-ab3f-d66aae694c06/replicationNetworkMappings/corpe2amap"),
					Properties: &armrecoveryservicessiterecovery.NetworkMappingProperties{
						FabricSpecificSettings: &armrecoveryservicessiterecovery.VmmToAzureNetworkMappingSettings{
							InstanceType: to.Ptr("VmmToAzure"),
						},
						PrimaryFabricFriendlyName:   to.Ptr("CP-B3L30108-01.ntdev.corp.microsoft.com"),
						PrimaryNetworkFriendlyName:  to.Ptr("corp"),
						PrimaryNetworkID:            to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/srcBvte2a14C27/providers/Microsoft.RecoveryServices/vaults/srce2avaultbvtaC27/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5/replicationNetworks/e2267b5c-2650-49bd-ab3f-d66aae694c06"),
						RecoveryFabricArmID:         to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/srcBvte2a14C27/providers/Microsoft.RecoveryServices/vaults/srce2avaultbvtaC27/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5"),
						RecoveryFabricFriendlyName:  to.Ptr("Microsoft Azure"),
						RecoveryNetworkFriendlyName: to.Ptr("vnetavrai"),
						RecoveryNetworkID:           to.Ptr("/subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/siterecoveryProd1/providers/Microsoft.Network/virtualNetworks/vnetavrai"),
						State:                       to.Ptr("Paired"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NetworkMappingCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NetworkMappingCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworkMappings_ListByReplicationNetworks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationNetworkMappings_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworkMappings_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets network mapping by name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationNetworkMappingsClient("srce2avaultbvtaC27",
		"srcBvte2a14C27",
		"9112a37f-0f3e-46ec-9c00-060c6edca071", cred, &options)
	res, err := client.Get(ctx,
		"b0cef6e9a4437b81803d0b55ada4f700ab66caae59c35d62723a1589c0cd13ac",
		"e2267b5c-2650-49bd-ab3f-d66aae694c06",
		"corpe2amap",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworkMappings_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.NetworkMapping{
			Name: to.Ptr("corpe2amap"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks/replicationNetworkMappings"),
			ID:   to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/srcBvte2a14C27/providers/Microsoft.RecoveryServices/vaults/srce2avaultbvtaC27/replicationFabrics/b0cef6e9a4437b81803d0b55ada4f700ab66caae59c35d62723a1589c0cd13ac/replicationNetworks/e2267b5c-2650-49bd-ab3f-d66aae694c06/replicationNetworkMappings/corpe2amap"),
			Properties: &armrecoveryservicessiterecovery.NetworkMappingProperties{
				FabricSpecificSettings: &armrecoveryservicessiterecovery.VmmToAzureNetworkMappingSettings{
					InstanceType: to.Ptr("VmmToAzure"),
				},
				PrimaryFabricFriendlyName:   to.Ptr("CP-B3L30108-01.ntdev.corp.microsoft.com"),
				PrimaryNetworkFriendlyName:  to.Ptr("corp"),
				PrimaryNetworkID:            to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/srcBvte2a14C27/providers/Microsoft.RecoveryServices/vaults/srce2avaultbvtaC27/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5/replicationNetworks/e2267b5c-2650-49bd-ab3f-d66aae694c06"),
				RecoveryFabricArmID:         to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/srcBvte2a14C27/providers/Microsoft.RecoveryServices/vaults/srce2avaultbvtaC27/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5"),
				RecoveryFabricFriendlyName:  to.Ptr("Microsoft Azure"),
				RecoveryNetworkFriendlyName: to.Ptr("vnetavrai"),
				RecoveryNetworkID:           to.Ptr("/subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/siterecoveryProd1/providers/Microsoft.Network/virtualNetworks/vnetavrai"),
				State:                       to.Ptr("Paired"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NetworkMapping) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkMapping)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworkMappings_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationNetworkMappings_Create(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworkMappings_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates network mapping."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationNetworkMappingsClient("srce2avaultbvtaC27",
		"srcBvte2a14C27",
		"9112a37f-0f3e-46ec-9c00-060c6edca071", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"b0cef6e9a4437b81803d0b55ada4f700ab66caae59c35d62723a1589c0cd13ac",
		"e2267b5c-2650-49bd-ab3f-d66aae694c06",
		"corpe2amap",
		armrecoveryservicessiterecovery.CreateNetworkMappingInput{
			Properties: &armrecoveryservicessiterecovery.CreateNetworkMappingInputProperties{
				FabricSpecificDetails: &armrecoveryservicessiterecovery.VmmToAzureCreateNetworkMappingInput{
					InstanceType: to.Ptr("VmmToAzure"),
				},
				RecoveryFabricName: to.Ptr("Microsoft Azure"),
				RecoveryNetworkID:  to.Ptr("/subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/siterecoveryProd1/providers/Microsoft.Network/virtualNetworks/vnetavrai"),
			},
		},
		&armrecoveryservicessiterecovery.ReplicationNetworkMappingsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworkMappings_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworkMappings_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.NetworkMapping{
			Name: to.Ptr("corpe2amap"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks/replicationNetworkMappings"),
			ID:   to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/srcBvte2a14C27/providers/Microsoft.RecoveryServices/vaults/srce2avaultbvtaC27/replicationFabrics/b0cef6e9a4437b81803d0b55ada4f700ab66caae59c35d62723a1589c0cd13ac/replicationNetworks/e2267b5c-2650-49bd-ab3f-d66aae694c06/replicationNetworkMappings/corpe2amap"),
			Properties: &armrecoveryservicessiterecovery.NetworkMappingProperties{
				FabricSpecificSettings: &armrecoveryservicessiterecovery.VmmToAzureNetworkMappingSettings{
					InstanceType: to.Ptr("VmmToAzure"),
				},
				PrimaryFabricFriendlyName:   to.Ptr("CP-B3L30108-01.ntdev.corp.microsoft.com"),
				PrimaryNetworkFriendlyName:  to.Ptr("corp"),
				PrimaryNetworkID:            to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/srcBvte2a14C27/providers/Microsoft.RecoveryServices/vaults/srce2avaultbvtaC27/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5/replicationNetworks/e2267b5c-2650-49bd-ab3f-d66aae694c06"),
				RecoveryFabricArmID:         to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/srcBvte2a14C27/providers/Microsoft.RecoveryServices/vaults/srce2avaultbvtaC27/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5"),
				RecoveryFabricFriendlyName:  to.Ptr("Microsoft Azure"),
				RecoveryNetworkFriendlyName: to.Ptr("vnetavrai"),
				RecoveryNetworkID:           to.Ptr("/subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/siterecoveryProd1/providers/Microsoft.Network/virtualNetworks/vnetavrai"),
				State:                       to.Ptr("Paired"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NetworkMapping) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkMapping)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworkMappings_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationNetworkMappings_Delete(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworkMappings_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete network mapping."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationNetworkMappingsClient("srce2avaultbvtaC27",
		"srcBvte2a14C27",
		"9112a37f-0f3e-46ec-9c00-060c6edca071", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"b0cef6e9a4437b81803d0b55ada4f700ab66caae59c35d62723a1589c0cd13ac",
		"e2267b5c-2650-49bd-ab3f-d66aae694c06",
		"corpe2amap",
		&armrecoveryservicessiterecovery.ReplicationNetworkMappingsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworkMappings_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworkMappings_Delete.json: %v", err)
	}
}

func TestReplicationNetworkMappings_Update(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworkMappings_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates network mapping."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationNetworkMappingsClient("srce2avaultbvtaC27",
		"srcBvte2a14C27",
		"9112a37f-0f3e-46ec-9c00-060c6edca071", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"b0cef6e9a4437b81803d0b55ada4f700ab66caae59c35d62723a1589c0cd13ac",
		"e2267b5c-2650-49bd-ab3f-d66aae694c06",
		"corpe2amap",
		armrecoveryservicessiterecovery.UpdateNetworkMappingInput{
			Properties: &armrecoveryservicessiterecovery.UpdateNetworkMappingInputProperties{
				FabricSpecificDetails: &armrecoveryservicessiterecovery.VmmToAzureUpdateNetworkMappingInput{
					InstanceType: to.Ptr("VmmToAzure"),
				},
				RecoveryFabricName: to.Ptr("Microsoft Azure"),
				RecoveryNetworkID:  to.Ptr("/subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/siterecoveryProd1/providers/Microsoft.Network/virtualNetworks/vnetavrai2"),
			},
		},
		&armrecoveryservicessiterecovery.ReplicationNetworkMappingsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworkMappings_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworkMappings_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.NetworkMapping{
			Name: to.Ptr("corpe2amap"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks/replicationNetworkMappings"),
			ID:   to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/srcBvte2a14C27/providers/Microsoft.RecoveryServices/vaults/srce2avaultbvtaC27/replicationFabrics/b0cef6e9a4437b81803d0b55ada4f700ab66caae59c35d62723a1589c0cd13ac/replicationNetworks/e2267b5c-2650-49bd-ab3f-d66aae694c06/replicationNetworkMappings/corpe2amap"),
			Properties: &armrecoveryservicessiterecovery.NetworkMappingProperties{
				FabricSpecificSettings: &armrecoveryservicessiterecovery.VmmToAzureNetworkMappingSettings{
					InstanceType: to.Ptr("VmmToAzure"),
				},
				PrimaryFabricFriendlyName:   to.Ptr("CP-B3L30108-01.ntdev.corp.microsoft.com"),
				PrimaryNetworkFriendlyName:  to.Ptr("corp"),
				PrimaryNetworkID:            to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/srcBvte2a14C27/providers/Microsoft.RecoveryServices/vaults/srce2avaultbvtaC27/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5/replicationNetworks/e2267b5c-2650-49bd-ab3f-d66aae694c06"),
				RecoveryFabricArmID:         to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/srcBvte2a14C27/providers/Microsoft.RecoveryServices/vaults/srce2avaultbvtaC27/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5"),
				RecoveryFabricFriendlyName:  to.Ptr("Microsoft Azure"),
				RecoveryNetworkFriendlyName: to.Ptr("vnetavrai2"),
				RecoveryNetworkID:           to.Ptr("/subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/siterecoveryProd1/providers/Microsoft.Network/virtualNetworks/vnetavrai2"),
				State:                       to.Ptr("Paired"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NetworkMapping) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkMapping)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworkMappings_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationNetworkMappings_List(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworkMappings_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets all the network mappings under a vault."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationNetworkMappingsClient("srce2avaultbvtaC27",
		"srcBvte2a14C27",
		"9112a37f-0f3e-46ec-9c00-060c6edca071", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworkMappings_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.NetworkMappingCollection{
			Value: []*armrecoveryservicessiterecovery.NetworkMapping{
				{
					Name: to.Ptr("corpe2amap"),
					Type: to.Ptr("Microsoft.RecoveryServicesBVTD2/vaults/replicationFabrics/replicationNetworks/replicationNetworkMappings"),
					ID:   to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/srcBvte2a14C27/providers/Microsoft.RecoveryServicesBVTD2/vaults/srce2avaultbvtaC27/replicationFabrics/b0cef6e9a4437b81803d0b55ada4f700ab66caae59c35d62723a1589c0cd13ac/replicationNetworks/e2267b5c-2650-49bd-ab3f-d66aae694c06/replicationNetworkMappings/corpe2amap"),
					Properties: &armrecoveryservicessiterecovery.NetworkMappingProperties{
						FabricSpecificSettings: &armrecoveryservicessiterecovery.VmmToAzureNetworkMappingSettings{
							InstanceType: to.Ptr("VmmToAzure"),
						},
						PrimaryFabricFriendlyName:   to.Ptr("CP-B3L30108-01.ntdev.corp.microsoft.com"),
						PrimaryNetworkFriendlyName:  to.Ptr("corp"),
						PrimaryNetworkID:            to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/srcBvte2a14C27/providers/Microsoft.RecoveryServicesBVTD2/vaults/srce2avaultbvtaC27/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5/replicationNetworks/e2267b5c-2650-49bd-ab3f-d66aae694c06"),
						RecoveryFabricArmID:         to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/srcBvte2a14C27/providers/Microsoft.RecoveryServicesBVTD2/vaults/srce2avaultbvtaC27/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5"),
						RecoveryFabricFriendlyName:  to.Ptr("Microsoft Azure"),
						RecoveryNetworkFriendlyName: to.Ptr("vnetavrai"),
						RecoveryNetworkID:           to.Ptr("/subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/siterecoveryProd1/providers/Microsoft.Network/virtualNetworks/vnetavrai"),
						State:                       to.Ptr("Paired"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NetworkMappingCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NetworkMappingCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationNetworkMappings_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectionContainers_ListByReplicationFabrics(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_ListByReplicationFabrics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of protection container for a fabric."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectionContainersClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	pager := client.ListByReplicationFabrics("cloud1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_ListByReplicationFabrics.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.ProtectionContainerCollection{
			Value: []*armrecoveryservicessiterecovery.ProtectionContainer{
				{
					Name: to.Ptr("cloud_6d224fc6-f326-5d35-96de-fbf51efb3179"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179"),
					Properties: &armrecoveryservicessiterecovery.ProtectionContainerProperties{
						FabricFriendlyName: to.Ptr("cloud1"),
						FabricType:         to.Ptr("HyperVSite"),
						FriendlyName:       to.Ptr("cloud1"),
						PairingStatus:      to.Ptr("NotPaired"),
						ProtectedItemCount: to.Ptr[int32](0),
						Role:               to.Ptr(""),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProtectionContainerCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProtectionContainerCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_ListByReplicationFabrics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectionContainers_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the protection container details."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectionContainersClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	res, err := client.Get(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ProtectionContainer{
			Name: to.Ptr("cloud_6d224fc6-f326-5d35-96de-fbf51efb3179"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179"),
			Properties: &armrecoveryservicessiterecovery.ProtectionContainerProperties{
				FabricFriendlyName: to.Ptr("cloud1"),
				FabricType:         to.Ptr("HyperVSite"),
				FriendlyName:       to.Ptr("cloud1"),
				PairingStatus:      to.Ptr("NotPaired"),
				ProtectedItemCount: to.Ptr[int32](0),
				Role:               to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectionContainer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectionContainer)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectionContainers_Create(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a protection container."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectionContainersClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		armrecoveryservicessiterecovery.CreateProtectionContainerInput{
			Properties: &armrecoveryservicessiterecovery.CreateProtectionContainerInputProperties{
				ProviderSpecificInput: []armrecoveryservicessiterecovery.ReplicationProviderSpecificContainerCreationInputClassification{
					&armrecoveryservicessiterecovery.ReplicationProviderSpecificContainerCreationInput{
						InstanceType: to.Ptr("ReplicationProviderSpecificContainerCreationInput"),
					}},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationProtectionContainersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ProtectionContainer{
			Name: to.Ptr("cloud_6d224fc6-f326-5d35-96de-fbf51efb3179"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179"),
			Properties: &armrecoveryservicessiterecovery.ProtectionContainerProperties{
				FabricFriendlyName: to.Ptr("cloud1"),
				FabricType:         to.Ptr("HyperVSite"),
				FriendlyName:       to.Ptr("cloud1"),
				PairingStatus:      to.Ptr("NotPaired"),
				ProtectedItemCount: to.Ptr[int32](0),
				Role:               to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectionContainer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectionContainer)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectionContainers_DiscoverProtectableItem(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_DiscoverProtectableItem.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Adds a protectable item to the replication protection container."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectionContainersClient("MadhaviVault",
		"MadhaviVRG",
		"7c943c1b-5122-4097-90c8-861411bdd574", cred, &options)
	poller, err := client.BeginDiscoverProtectableItem(ctx,
		"V2A-W2K12-660",
		"cloud_7328549c-5c37-4459-a3c2-e35f9ef6893c",
		armrecoveryservicessiterecovery.DiscoverProtectableItemRequest{
			Properties: &armrecoveryservicessiterecovery.DiscoverProtectableItemRequestProperties{
				FriendlyName: to.Ptr("Test"),
				IPAddress:    to.Ptr("10.150.2.3"),
				OSType:       to.Ptr("Windows"),
			},
		},
		&armrecoveryservicessiterecovery.ReplicationProtectionContainersClientBeginDiscoverProtectableItemOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_DiscoverProtectableItem.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_DiscoverProtectableItem.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ProtectionContainer{
			Name: to.Ptr("cloud_7328549c-5c37-4459-a3c2-e35f9ef6893c"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers"),
			ID:   to.Ptr("/Subscriptions/7c943c1b-5122-4097-90c8-861411bdd574/resourceGroups/MadhaviVRG/providers/Microsoft.RecoveryServices/vaults/MadhaviVault/replicationFabrics/239f778f368e34f78216d81f030725cdf2033174b47879b9f2eeede06fdd9c4d/replicationProtectionContainers/cloud_7328549c-5c37-4459-a3c2-e35f9ef6893c"),
			Properties: &armrecoveryservicessiterecovery.ProtectionContainerProperties{
				FabricFriendlyName: to.Ptr("V2A-W2K12-660"),
				FabricType:         to.Ptr("VMware"),
				FriendlyName:       to.Ptr("V2A-W2K12-660"),
				PairingStatus:      to.Ptr("Paired"),
				ProtectedItemCount: to.Ptr[int32](2),
				Role:               to.Ptr("Primary"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectionContainer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectionContainer)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_DiscoverProtectableItem.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectionContainers_Delete(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Removes a protection container."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectionContainersClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		&armrecoveryservicessiterecovery.ReplicationProtectionContainersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_Delete.json: %v", err)
	}
}

func TestReplicationProtectionContainers_SwitchProtection(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_SwitchProtection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Switches protection from one container to another or one replication provider to another."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectionContainersClient("priyanponeboxvault",
		"priyanprg",
		"42195872-7e70-4f8a-837f-84b28ecbb78b", cred, &options)
	poller, err := client.BeginSwitchProtection(ctx,
		"CentralUSCanSite",
		"CentralUSCancloud",
		armrecoveryservicessiterecovery.SwitchProtectionInput{
			Properties: &armrecoveryservicessiterecovery.SwitchProtectionInputProperties{
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.A2ASwitchProtectionInput{
					InstanceType: to.Ptr("A2A"),
				},
				ReplicationProtectedItemName: to.Ptr("a2aSwapOsVm"),
			},
		},
		&armrecoveryservicessiterecovery.ReplicationProtectionContainersClientBeginSwitchProtectionOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_SwitchProtection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_SwitchProtection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ProtectionContainer{
			Name: to.Ptr("euscancloud"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers"),
			ID:   to.Ptr("/Subscriptions/42195872-7e70-4f8a-837f-84b28ecbb78b/resourceGroups/priyanprg/providers/Microsoft.RecoveryServices/vaults/priyanponeboxvault/replicationFabrics/EUSCanSite/replicationProtectionContainers/euscancloud"),
			Properties: &armrecoveryservicessiterecovery.ProtectionContainerProperties{
				FabricFriendlyName: to.Ptr("East US 2 EUAP"),
				FabricType:         to.Ptr("Azure"),
				FriendlyName:       to.Ptr("euscancloud"),
				PairingStatus:      to.Ptr("Paired"),
				ProtectedItemCount: to.Ptr[int32](0),
				Role:               to.Ptr("Primary"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectionContainer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectionContainer)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_SwitchProtection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectionContainers_List(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of all protection containers in a vault."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectionContainersClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.ProtectionContainerCollection{
			Value: []*armrecoveryservicessiterecovery.ProtectionContainer{
				{
					Name: to.Ptr("cloud_6d224fc6-f326-5d35-96de-fbf51efb3179"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationProtectionContainers"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179"),
					Properties: &armrecoveryservicessiterecovery.ProtectionContainerProperties{
						FabricFriendlyName: to.Ptr("cloud1"),
						FabricType:         to.Ptr("HyperVSite"),
						FriendlyName:       to.Ptr("cloud1"),
						PairingStatus:      to.Ptr("NotPaired"),
						ProtectedItemCount: to.Ptr[int32](0),
						Role:               to.Ptr(""),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProtectionContainerCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProtectionContainerCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainers_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationMigrationItems_ListByReplicationProtectionContainers(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_ListByReplicationProtectionContainers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of migration items in the protection container."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationMigrationItemsClient("migrationvault",
		"resourcegroup1",
		"cb53d0c3-bd59-4721-89bc-06916a9147ef", cred, &options)
	pager := client.ListByReplicationProtectionContainers("vmwarefabric1",
		"vmwareContainer1",
		&armrecoveryservicessiterecovery.ReplicationMigrationItemsClientListByReplicationProtectionContainersOptions{SkipToken: nil,
			TakeToken: nil,
			Filter:    nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_ListByReplicationProtectionContainers.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.MigrationItemCollection{
			Value: []*armrecoveryservicessiterecovery.MigrationItem{
				{
					Name: to.Ptr("virtualmachine1"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationMigrationItems"),
					ID:   to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationFabrics/vmwarefabric1/replicationProtectionContainers/vmwareContainer1/replicationMigrationItems/virtualmachine1"),
					Properties: &armrecoveryservicessiterecovery.MigrationItemProperties{
						AllowedOperations: []*armrecoveryservicessiterecovery.MigrationItemOperation{
							to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationMigrate),
							to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationDisableMigration),
							to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationTestMigrate),
							to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationTestMigrateCleanup)},
						CurrentJob: &armrecoveryservicessiterecovery.CurrentJobDetails{
							JobID:     to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationJobs/None"),
							JobName:   to.Ptr("None"),
							StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-26T06:37:50.8082715Z"); return t }()),
						},
						MachineName:               to.Ptr("vm-0520-2"),
						MigrationState:            to.Ptr(armrecoveryservicessiterecovery.MigrationStateReplicating),
						MigrationStateDescription: to.Ptr("Ready to migrate"),
						PolicyFriendlyName:        to.Ptr("vmwarepolicy1"),
						PolicyID:                  to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationPolicies/vmwarepolicy1"),
						ProviderSpecificDetails: &armrecoveryservicessiterecovery.VMwareCbtMigrationDetails{
							InstanceType: to.Ptr("VMwareCbt"),
						},
						TestMigrateState:            to.Ptr(armrecoveryservicessiterecovery.TestMigrationStateNone),
						TestMigrateStateDescription: to.Ptr("None"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MigrationItemCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MigrationItemCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_ListByReplicationProtectionContainers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationMigrationItems_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the details of a migration item."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationMigrationItemsClient("migrationvault",
		"resourcegroup1",
		"cb53d0c3-bd59-4721-89bc-06916a9147ef", cred, &options)
	res, err := client.Get(ctx,
		"vmwarefabric1",
		"vmwareContainer1",
		"virtualmachine1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.MigrationItem{
			Name: to.Ptr("virtualmachine1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationMigrationItems"),
			ID:   to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationFabrics/vmwarefabric1/replicationProtectionContainers/vmwareContainer1/replicationMigrationItems/virtualmachine1"),
			Properties: &armrecoveryservicessiterecovery.MigrationItemProperties{
				AllowedOperations: []*armrecoveryservicessiterecovery.MigrationItemOperation{
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationMigrate),
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationDisableMigration),
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationTestMigrate),
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationTestMigrateCleanup)},
				CurrentJob: &armrecoveryservicessiterecovery.CurrentJobDetails{
					JobID:     to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationJobs/None"),
					JobName:   to.Ptr("None"),
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-26T06:37:50.8082715Z"); return t }()),
				},
				MachineName:               to.Ptr("vm-0520-2"),
				MigrationState:            to.Ptr(armrecoveryservicessiterecovery.MigrationStateReplicating),
				MigrationStateDescription: to.Ptr("Ready to migrate"),
				PolicyFriendlyName:        to.Ptr("vmwarepolicy1"),
				PolicyID:                  to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationPolicies/vmwarepolicy1"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.VMwareCbtMigrationDetails{
					InstanceType: to.Ptr("VMwareCbt"),
				},
				TestMigrateState:            to.Ptr(armrecoveryservicessiterecovery.TestMigrationStateNone),
				TestMigrateStateDescription: to.Ptr("None"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MigrationItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MigrationItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationMigrationItems_Create(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enables migration."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationMigrationItemsClient("migrationvault",
		"resourcegroup1",
		"cb53d0c3-bd59-4721-89bc-06916a9147ef", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"vmwarefabric1",
		"vmwareContainer1",
		"virtualmachine1",
		armrecoveryservicessiterecovery.EnableMigrationInput{
			Properties: &armrecoveryservicessiterecovery.EnableMigrationInputProperties{
				PolicyID: to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationPolicies/vmwarepolicy1"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.VMwareCbtEnableMigrationInput{
					InstanceType:            to.Ptr("VMwareCbt"),
					DataMoverRunAsAccountID: to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.OffAzure/VMwareSites/vmwaresite1/runasaccounts/dataMoverRunAsAccount1"),
					DisksToInclude: []*armrecoveryservicessiterecovery.VMwareCbtDiskInput{
						{
							DiskID:                         to.Ptr("disk1"),
							IsOSDisk:                       to.Ptr("true"),
							LogStorageAccountID:            to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.Storage/storageAccounts/logStorageAccount1"),
							LogStorageAccountSasSecretName: to.Ptr("logStorageSas"),
						}},
					SnapshotRunAsAccountID: to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.OffAzure/VMwareSites/vmwaresite1/runasaccounts/snapshotRunAsAccount1"),
					TargetNetworkID:        to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.Network/virtualNetworks/virtualNetwork1"),
					TargetResourceGroupID:  to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1"),
					VmwareMachineID:        to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.OffAzure/VMwareSites/vmwaresite1/machines/virtualmachine1"),
				},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationMigrationItemsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.MigrationItem{
			Name: to.Ptr("virtualmachine1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationMigrationItems"),
			ID:   to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationFabrics/vmwarefabric1/replicationProtectionContainers/vmwareContainer1/replicationMigrationItems/virtualmachine1"),
			Properties: &armrecoveryservicessiterecovery.MigrationItemProperties{
				AllowedOperations: []*armrecoveryservicessiterecovery.MigrationItemOperation{
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationMigrate),
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationDisableMigration),
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationTestMigrate),
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationTestMigrateCleanup)},
				CurrentJob: &armrecoveryservicessiterecovery.CurrentJobDetails{
					JobID:     to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationJobs/None"),
					JobName:   to.Ptr("None"),
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-26T06:37:50.8082715Z"); return t }()),
				},
				MachineName:               to.Ptr("vm-0520-2"),
				MigrationState:            to.Ptr(armrecoveryservicessiterecovery.MigrationStateReplicating),
				MigrationStateDescription: to.Ptr("Ready to migrate"),
				PolicyFriendlyName:        to.Ptr("vmwarepolicy1"),
				PolicyID:                  to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationPolicies/vmwarepolicy1"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.VMwareCbtMigrationDetails{
					InstanceType: to.Ptr("VMwareCbt"),
				},
				TestMigrateState:            to.Ptr(armrecoveryservicessiterecovery.TestMigrationStateNone),
				TestMigrateStateDescription: to.Ptr("None"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MigrationItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MigrationItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationMigrationItems_Delete(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete the migration item."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationMigrationItemsClient("migrationvault",
		"resourcegroup1",
		"cb53d0c3-bd59-4721-89bc-06916a9147ef", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"vmwarefabric1",
		"vmwareContainer1",
		"virtualmachine1",
		&armrecoveryservicessiterecovery.ReplicationMigrationItemsClientBeginDeleteOptions{DeleteOption: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_Delete.json: %v", err)
	}
}

func TestReplicationMigrationItems_Update(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates migration item."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationMigrationItemsClient("migrationvault",
		"resourcegroup1",
		"cb53d0c3-bd59-4721-89bc-06916a9147ef", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"vmwarefabric1",
		"vmwareContainer1",
		"virtualmachine1",
		armrecoveryservicessiterecovery.UpdateMigrationItemInput{
			Properties: &armrecoveryservicessiterecovery.UpdateMigrationItemInputProperties{
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.VMwareCbtUpdateMigrationItemInput{
					InstanceType: to.Ptr("VMwareCbt"),
				},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationMigrationItemsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.MigrationItem{
			Name: to.Ptr("virtualmachine1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationMigrationItems"),
			ID:   to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationFabrics/vmwarefabric1/replicationProtectionContainers/vmwareContainer1/replicationMigrationItems/virtualmachine1"),
			Properties: &armrecoveryservicessiterecovery.MigrationItemProperties{
				AllowedOperations: []*armrecoveryservicessiterecovery.MigrationItemOperation{
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationMigrate),
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationDisableMigration),
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationTestMigrate),
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationTestMigrateCleanup)},
				CurrentJob: &armrecoveryservicessiterecovery.CurrentJobDetails{
					JobID:     to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationJobs/None"),
					JobName:   to.Ptr("None"),
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-26T06:37:50.8082715Z"); return t }()),
				},
				MachineName:               to.Ptr("vm-0520-2"),
				MigrationState:            to.Ptr(armrecoveryservicessiterecovery.MigrationStateReplicating),
				MigrationStateDescription: to.Ptr("Ready to migrate"),
				PolicyFriendlyName:        to.Ptr("vmwarepolicy1"),
				PolicyID:                  to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationPolicies/vmwarepolicy1"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.VMwareCbtMigrationDetails{
					InstanceType: to.Ptr("VMwareCbt"),
				},
				TestMigrateState:            to.Ptr(armrecoveryservicessiterecovery.TestMigrationStateNone),
				TestMigrateStateDescription: to.Ptr("None"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MigrationItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MigrationItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationMigrationItems_Migrate(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_Migrate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Migrate item."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationMigrationItemsClient("migrationvault",
		"resourcegroup1",
		"cb53d0c3-bd59-4721-89bc-06916a9147ef", cred, &options)
	poller, err := client.BeginMigrate(ctx,
		"vmwarefabric1",
		"vmwareContainer1",
		"virtualmachine1",
		armrecoveryservicessiterecovery.MigrateInput{
			Properties: &armrecoveryservicessiterecovery.MigrateInputProperties{
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.VMwareCbtMigrateInput{
					InstanceType:    to.Ptr("VMwareCbt"),
					PerformShutdown: to.Ptr("true"),
				},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationMigrationItemsClientBeginMigrateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_Migrate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_Migrate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.MigrationItem{
			Name: to.Ptr("virtualmachine1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationMigrationItems"),
			ID:   to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationFabrics/vmwarefabric1/replicationProtectionContainers/vmwareContainer1/replicationMigrationItems/virtualmachine1"),
			Properties: &armrecoveryservicessiterecovery.MigrationItemProperties{
				AllowedOperations: []*armrecoveryservicessiterecovery.MigrationItemOperation{
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationMigrate),
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationDisableMigration),
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationTestMigrate),
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationTestMigrateCleanup)},
				CurrentJob: &armrecoveryservicessiterecovery.CurrentJobDetails{
					JobID:     to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationJobs/None"),
					JobName:   to.Ptr("None"),
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-26T06:37:50.8082715Z"); return t }()),
				},
				MachineName:               to.Ptr("vm-0520-2"),
				MigrationState:            to.Ptr(armrecoveryservicessiterecovery.MigrationStateReplicating),
				MigrationStateDescription: to.Ptr("Ready to migrate"),
				PolicyFriendlyName:        to.Ptr("vmwarepolicy1"),
				PolicyID:                  to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationPolicies/vmwarepolicy1"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.VMwareCbtMigrationDetails{
					InstanceType: to.Ptr("VMwareCbt"),
				},
				TestMigrateState:            to.Ptr(armrecoveryservicessiterecovery.TestMigrationStateNone),
				TestMigrateStateDescription: to.Ptr("None"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MigrationItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MigrationItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_Migrate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationMigrationItems_Resync(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_Resync.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Resynchronizes replication."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationMigrationItemsClient("migrationvault",
		"resourcegroup1",
		"cb53d0c3-bd59-4721-89bc-06916a9147ef", cred, &options)
	poller, err := client.BeginResync(ctx,
		"vmwarefabric1",
		"vmwareContainer1",
		"virtualmachine1",
		armrecoveryservicessiterecovery.ResyncInput{
			Properties: &armrecoveryservicessiterecovery.ResyncInputProperties{
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.VMwareCbtResyncInput{
					InstanceType: to.Ptr("VMwareCbt"),
					SkipCbtReset: to.Ptr("true"),
				},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationMigrationItemsClientBeginResyncOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_Resync.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_Resync.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.MigrationItem{
			Name: to.Ptr("virtualmachine1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationMigrationItems"),
			ID:   to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationFabrics/vmwarefabric1/replicationProtectionContainers/vmwareContainer1/replicationMigrationItems/virtualmachine1"),
			Properties: &armrecoveryservicessiterecovery.MigrationItemProperties{
				AllowedOperations: []*armrecoveryservicessiterecovery.MigrationItemOperation{
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationMigrate),
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationDisableMigration),
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationTestMigrate),
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationTestMigrateCleanup)},
				CurrentJob: &armrecoveryservicessiterecovery.CurrentJobDetails{
					JobID:     to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationJobs/None"),
					JobName:   to.Ptr("None"),
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-26T06:37:50.8082715Z"); return t }()),
				},
				MachineName:               to.Ptr("vm-0520-2"),
				MigrationState:            to.Ptr(armrecoveryservicessiterecovery.MigrationStateReplicating),
				MigrationStateDescription: to.Ptr("Ready to migrate"),
				PolicyFriendlyName:        to.Ptr("vmwarepolicy1"),
				PolicyID:                  to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationPolicies/vmwarepolicy1"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.VMwareCbtMigrationDetails{
					InstanceType: to.Ptr("VMwareCbt"),
				},
				TestMigrateState:            to.Ptr(armrecoveryservicessiterecovery.TestMigrationStateNone),
				TestMigrateStateDescription: to.Ptr("None"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MigrationItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MigrationItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_Resync.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationMigrationItems_TestMigrate(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_TestMigrate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Test migrate item."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationMigrationItemsClient("migrationvault",
		"resourcegroup1",
		"cb53d0c3-bd59-4721-89bc-06916a9147ef", cred, &options)
	poller, err := client.BeginTestMigrate(ctx,
		"vmwarefabric1",
		"vmwareContainer1",
		"virtualmachine1",
		armrecoveryservicessiterecovery.TestMigrateInput{
			Properties: &armrecoveryservicessiterecovery.TestMigrateInputProperties{
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.VMwareCbtTestMigrateInput{
					InstanceType:    to.Ptr("VMwareCbt"),
					NetworkID:       to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.Network/virtualNetworks/virtualNetwork1"),
					RecoveryPointID: to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationFabrics/vmwarefabric1/replicationProtectionContainers/vmwareContainer1/replicationMigrationItems/virtualmachine1/migrationRecoveryPoints/9e737191-317e-43d0-8c83-e32ac3b34686"),
				},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationMigrationItemsClientBeginTestMigrateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_TestMigrate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_TestMigrate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.MigrationItem{
			Name: to.Ptr("virtualmachine1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationMigrationItems"),
			ID:   to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationFabrics/vmwarefabric1/replicationProtectionContainers/vmwareContainer1/replicationMigrationItems/virtualmachine1"),
			Properties: &armrecoveryservicessiterecovery.MigrationItemProperties{
				AllowedOperations: []*armrecoveryservicessiterecovery.MigrationItemOperation{
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationMigrate),
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationDisableMigration),
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationTestMigrate),
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationTestMigrateCleanup)},
				CurrentJob: &armrecoveryservicessiterecovery.CurrentJobDetails{
					JobID:     to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationJobs/None"),
					JobName:   to.Ptr("None"),
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-26T06:37:50.8082715Z"); return t }()),
				},
				MachineName:               to.Ptr("vm-0520-2"),
				MigrationState:            to.Ptr(armrecoveryservicessiterecovery.MigrationStateReplicating),
				MigrationStateDescription: to.Ptr("Ready to migrate"),
				PolicyFriendlyName:        to.Ptr("vmwarepolicy1"),
				PolicyID:                  to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationPolicies/vmwarepolicy1"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.VMwareCbtMigrationDetails{
					InstanceType: to.Ptr("VMwareCbt"),
				},
				TestMigrateState:            to.Ptr(armrecoveryservicessiterecovery.TestMigrationStateNone),
				TestMigrateStateDescription: to.Ptr("None"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MigrationItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MigrationItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_TestMigrate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationMigrationItems_TestMigrateCleanup(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_TestMigrateCleanup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Test migrate cleanup."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationMigrationItemsClient("migrationvault",
		"resourcegroup1",
		"cb53d0c3-bd59-4721-89bc-06916a9147ef", cred, &options)
	poller, err := client.BeginTestMigrateCleanup(ctx,
		"vmwarefabric1",
		"vmwareContainer1",
		"virtualmachine1",
		armrecoveryservicessiterecovery.TestMigrateCleanupInput{
			Properties: &armrecoveryservicessiterecovery.TestMigrateCleanupInputProperties{
				Comments: to.Ptr("Test Failover Cleanup"),
			},
		},
		&armrecoveryservicessiterecovery.ReplicationMigrationItemsClientBeginTestMigrateCleanupOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_TestMigrateCleanup.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_TestMigrateCleanup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.MigrationItem{
			Name: to.Ptr("virtualmachine1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationMigrationItems"),
			ID:   to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationFabrics/vmwarefabric1/replicationProtectionContainers/vmwareContainer1/replicationMigrationItems/virtualmachine1"),
			Properties: &armrecoveryservicessiterecovery.MigrationItemProperties{
				AllowedOperations: []*armrecoveryservicessiterecovery.MigrationItemOperation{
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationMigrate),
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationDisableMigration),
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationTestMigrate),
					to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationTestMigrateCleanup)},
				CurrentJob: &armrecoveryservicessiterecovery.CurrentJobDetails{
					JobID:     to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationJobs/None"),
					JobName:   to.Ptr("None"),
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-26T06:37:50.8082715Z"); return t }()),
				},
				MachineName:               to.Ptr("vm-0520-2"),
				MigrationState:            to.Ptr(armrecoveryservicessiterecovery.MigrationStateReplicating),
				MigrationStateDescription: to.Ptr("Ready to migrate"),
				PolicyFriendlyName:        to.Ptr("vmwarepolicy1"),
				PolicyID:                  to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationPolicies/vmwarepolicy1"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.VMwareCbtMigrationDetails{
					InstanceType: to.Ptr("VMwareCbt"),
				},
				TestMigrateState:            to.Ptr(armrecoveryservicessiterecovery.TestMigrationStateNone),
				TestMigrateStateDescription: to.Ptr("None"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MigrationItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MigrationItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_TestMigrateCleanup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationMigrationItems_List(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of migration items in the vault."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationMigrationItemsClient("migrationvault",
		"resourcegroup1",
		"cb53d0c3-bd59-4721-89bc-06916a9147ef", cred, &options)
	pager := client.List(&armrecoveryservicessiterecovery.ReplicationMigrationItemsClientListOptions{SkipToken: nil,
		TakeToken: nil,
		Filter:    nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.MigrationItemCollection{
			Value: []*armrecoveryservicessiterecovery.MigrationItem{
				{
					Name: to.Ptr("virtualmachine1"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationMigrationItems"),
					ID:   to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationFabrics/vmwarefabric1/replicationProtectionContainers/vmwareContainer1/replicationMigrationItems/virtualmachine1"),
					Properties: &armrecoveryservicessiterecovery.MigrationItemProperties{
						AllowedOperations: []*armrecoveryservicessiterecovery.MigrationItemOperation{
							to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationMigrate),
							to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationDisableMigration),
							to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationTestMigrate),
							to.Ptr(armrecoveryservicessiterecovery.MigrationItemOperationTestMigrateCleanup)},
						CurrentJob: &armrecoveryservicessiterecovery.CurrentJobDetails{
							JobID:     to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationJobs/None"),
							JobName:   to.Ptr("None"),
							StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-26T06:37:50.8082715Z"); return t }()),
						},
						MachineName:               to.Ptr("vm-0520-2"),
						MigrationState:            to.Ptr(armrecoveryservicessiterecovery.MigrationStateReplicating),
						MigrationStateDescription: to.Ptr("Ready to migrate"),
						PolicyFriendlyName:        to.Ptr("vmwarepolicy1"),
						PolicyID:                  to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationPolicies/vmwarepolicy1"),
						ProviderSpecificDetails: &armrecoveryservicessiterecovery.VMwareCbtMigrationDetails{
							InstanceType: to.Ptr("VMwareCbt"),
						},
						TestMigrateState:            to.Ptr(armrecoveryservicessiterecovery.TestMigrationStateNone),
						TestMigrateStateDescription: to.Ptr("None"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MigrationItemCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MigrationItemCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationMigrationItems_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMigrationRecoveryPoints_ListByReplicationMigrationItems(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/MigrationRecoveryPoints_ListByReplicationMigrationItems.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the recovery points for a migration item."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewMigrationRecoveryPointsClient("migrationvault",
		"resourcegroup1",
		"cb53d0c3-bd59-4721-89bc-06916a9147ef", cred, &options)
	pager := client.ListByReplicationMigrationItems("vmwarefabric1",
		"vmwareContainer1",
		"virtualmachine1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/MigrationRecoveryPoints_ListByReplicationMigrationItems.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.MigrationRecoveryPointCollection{
			Value: []*armrecoveryservicessiterecovery.MigrationRecoveryPoint{
				{
					Name: to.Ptr("648336ef-2d70-4d98-b100-8c299f97cd41"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationMigrationItems/migrationRecoveryPoints"),
					ID:   to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationFabrics/vmwarefabric1/replicationProtectionContainers/vmwareContainer1/replicationMigrationItems/virtualmachine1/migrationRecoveryPoints/648336ef-2d70-4d98-b100-8c299f97cd41"),
					Properties: &armrecoveryservicessiterecovery.MigrationRecoveryPointProperties{
						RecoveryPointTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-26T06:37:50.8082715Z"); return t }()),
						RecoveryPointType: to.Ptr(armrecoveryservicessiterecovery.MigrationRecoveryPointTypeCrashConsistent),
					},
				},
				{
					Name: to.Ptr("34cb2d05-e730-4d3f-b96b-a60a5e92acb2"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationMigrationItems/migrationRecoveryPoints"),
					ID:   to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationFabrics/vmwarefabric1/replicationProtectionContainers/vmwareContainer1/replicationMigrationItems/virtualmachine1/migrationRecoveryPoints/34cb2d05-e730-4d3f-b96b-a60a5e92acb2"),
					Properties: &armrecoveryservicessiterecovery.MigrationRecoveryPointProperties{
						RecoveryPointTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-26T07:37:30.9722019Z"); return t }()),
						RecoveryPointType: to.Ptr(armrecoveryservicessiterecovery.MigrationRecoveryPointTypeCrashConsistent),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MigrationRecoveryPointCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MigrationRecoveryPointCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/MigrationRecoveryPoints_ListByReplicationMigrationItems.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMigrationRecoveryPoints_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/MigrationRecoveryPoints_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a recovery point for a migration item."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewMigrationRecoveryPointsClient("migrationvault",
		"resourcegroup1",
		"cb53d0c3-bd59-4721-89bc-06916a9147ef", cred, &options)
	res, err := client.Get(ctx,
		"vmwarefabric1",
		"vmwareContainer1",
		"virtualmachine1",
		"b22134ea-620c-474b-9fa5-3c1cb47708e3",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/MigrationRecoveryPoints_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.MigrationRecoveryPoint{
			Name: to.Ptr("b22134ea-620c-474b-9fa5-3c1cb47708e3"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationMigrationItems/migrationRecoveryPoints"),
			ID:   to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationFabrics/vmwarefabric1/replicationProtectionContainers/vmwareContainer1/replicationMigrationItems/virtualmachine1/migrationRecoveryPoints/b22134ea-620c-474b-9fa5-3c1cb47708e3"),
			Properties: &armrecoveryservicessiterecovery.MigrationRecoveryPointProperties{
				RecoveryPointTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-26T06:37:50.8082715Z"); return t }()),
				RecoveryPointType: to.Ptr(armrecoveryservicessiterecovery.MigrationRecoveryPointTypeCrashConsistent),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MigrationRecoveryPoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MigrationRecoveryPoint)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/MigrationRecoveryPoints_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectableItems_ListByReplicationProtectionContainers(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectableItems_ListByReplicationProtectionContainers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of protectable items."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectableItemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	pager := client.ListByReplicationProtectionContainers("cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		&armrecoveryservicessiterecovery.ReplicationProtectableItemsClientListByReplicationProtectionContainersOptions{Filter: nil,
			Take:      nil,
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectableItems_ListByReplicationProtectionContainers.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.ProtectableItemCollection{
			Value: []*armrecoveryservicessiterecovery.ProtectableItem{
				{
					Name: to.Ptr("c0c14913-3d7a-48ea-9531-cc99e0e686e6"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectableItems"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectableItems/c0c14913-3d7a-48ea-9531-cc99e0e686e6"),
					Properties: &armrecoveryservicessiterecovery.ProtectableItemProperties{
						CustomDetails: &armrecoveryservicessiterecovery.ReplicationGroupDetails{
							InstanceType: to.Ptr("ReplicationGroupDetails"),
						},
						FriendlyName:               to.Ptr("vm2"),
						ProtectionReadinessErrors:  []*string{},
						ProtectionStatus:           to.Ptr("Unprotected"),
						RecoveryServicesProviderID: to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/241641e6-ee7b-4ee4-8141-821fadda43fa"),
						SupportedReplicationProviders: []*string{
							to.Ptr("HyperVReplicaAzure")},
					},
				},
				{
					Name: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectableItems"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectableItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
					Properties: &armrecoveryservicessiterecovery.ProtectableItemProperties{
						CustomDetails: &armrecoveryservicessiterecovery.ReplicationGroupDetails{
							InstanceType: to.Ptr("ReplicationGroupDetails"),
						},
						FriendlyName:               to.Ptr("vm1"),
						ProtectionReadinessErrors:  []*string{},
						ProtectionStatus:           to.Ptr("Unprotected"),
						RecoveryServicesProviderID: to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/241641e6-ee7b-4ee4-8141-821fadda43fa"),
						SupportedReplicationProviders: []*string{
							to.Ptr("HyperVReplicaAzure")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProtectableItemCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProtectableItemCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectableItems_ListByReplicationProtectionContainers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectableItems_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectableItems_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the details of a protectable item."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectableItemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	res, err := client.Get(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"c0c14913-3d7a-48ea-9531-cc99e0e686e6",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectableItems_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ProtectableItem{
			Name: to.Ptr("c0c14913-3d7a-48ea-9531-cc99e0e686e6"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectableItems"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectableItems/c0c14913-3d7a-48ea-9531-cc99e0e686e6"),
			Properties: &armrecoveryservicessiterecovery.ProtectableItemProperties{
				CustomDetails: &armrecoveryservicessiterecovery.ReplicationGroupDetails{
					InstanceType: to.Ptr("ReplicationGroupDetails"),
				},
				FriendlyName:               to.Ptr("vm2"),
				ProtectionReadinessErrors:  []*string{},
				ProtectionStatus:           to.Ptr("Unprotected"),
				RecoveryServicesProviderID: to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/241641e6-ee7b-4ee4-8141-821fadda43fa"),
				SupportedReplicationProviders: []*string{
					to.Ptr("HyperVReplicaAzure")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectableItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectableItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectableItems_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectedItems_ListByReplicationProtectionContainers(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_ListByReplicationProtectionContainers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of Replication protected items."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectedItemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	pager := client.ListByReplicationProtectionContainers("cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_ListByReplicationProtectionContainers.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.ReplicationProtectedItemCollection{
			Value: []*armrecoveryservicessiterecovery.ReplicationProtectedItem{
				{
					Name: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
					Properties: &armrecoveryservicessiterecovery.ReplicationProtectedItemProperties{
						ActiveLocation: to.Ptr("Primary"),
						AllowedOperations: []*string{
							to.Ptr("PlannedFailover"),
							to.Ptr("UnplannedFailover"),
							to.Ptr("DisableProtection"),
							to.Ptr("TestFailover")},
						CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
							JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/None"),
							ScenarioName: to.Ptr("None"),
							StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1753-01-01T01:01:01Z"); return t }()),
						},
						FriendlyName:                           to.Ptr("vm1"),
						PolicyFriendlyName:                     to.Ptr("protectionprofile1"),
						PolicyID:                               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
						PrimaryFabricFriendlyName:              to.Ptr("cloud1"),
						PrimaryProtectionContainerFriendlyName: to.Ptr("cloud1"),
						ProtectableItemID:                      to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectableItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
						ProtectedItemType:                      to.Ptr("HyperVVirtualMachine"),
						ProtectionState:                        to.Ptr("Protected"),
						ProtectionStateDescription:             to.Ptr("Protected"),
						ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureReplicationDetails{
							InstanceType: to.Ptr("HyperVReplicaAzure"),
						},
						RecoveryContainerID:                     to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5/replicationProtectionContainers/d38048d4-b460-4791-8ece-108395ee8478"),
						RecoveryFabricFriendlyName:              to.Ptr("Microsoft Azure"),
						RecoveryFabricID:                        to.Ptr("Microsoft Azure"),
						RecoveryProtectionContainerFriendlyName: to.Ptr("Microsoft Azure"),
						RecoveryServicesProviderID:              to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/241641e6-ee7b-4ee4-8141-821fadda43fa"),
						ReplicationHealth:                       to.Ptr("Normal"),
						TestFailoverState:                       to.Ptr("None"),
						TestFailoverStateDescription:            to.Ptr("None"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReplicationProtectedItemCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReplicationProtectedItemCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_ListByReplicationProtectionContainers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectedItems_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the details of a Replication protected item."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectedItemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	res, err := client.Get(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"f8491e4f-817a-40dd-a90c-af773978c75b",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ReplicationProtectedItem{
			Name: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
			Properties: &armrecoveryservicessiterecovery.ReplicationProtectedItemProperties{
				ActiveLocation: to.Ptr("Primary"),
				AllowedOperations: []*string{
					to.Ptr("PlannedFailover"),
					to.Ptr("UnplannedFailover"),
					to.Ptr("DisableProtection"),
					to.Ptr("TestFailover")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/None"),
					ScenarioName: to.Ptr("None"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1753-01-01T01:01:01Z"); return t }()),
				},
				FriendlyName:                           to.Ptr("vm1"),
				PolicyFriendlyName:                     to.Ptr("protectionprofile1"),
				PolicyID:                               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
				PrimaryFabricFriendlyName:              to.Ptr("cloud1"),
				PrimaryProtectionContainerFriendlyName: to.Ptr("cloud1"),
				ProtectableItemID:                      to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectableItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
				ProtectedItemType:                      to.Ptr("HyperVVirtualMachine"),
				ProtectionState:                        to.Ptr("Protected"),
				ProtectionStateDescription:             to.Ptr("Protected"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureReplicationDetails{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
				RecoveryContainerID:                     to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5/replicationProtectionContainers/d38048d4-b460-4791-8ece-108395ee8478"),
				RecoveryFabricFriendlyName:              to.Ptr("Microsoft Azure"),
				RecoveryFabricID:                        to.Ptr("Microsoft Azure"),
				RecoveryProtectionContainerFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryServicesProviderID:              to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/241641e6-ee7b-4ee4-8141-821fadda43fa"),
				ReplicationHealth:                       to.Ptr("Normal"),
				TestFailoverState:                       to.Ptr("None"),
				TestFailoverStateDescription:            to.Ptr("None"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationProtectedItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationProtectedItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectedItems_Create(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enables protection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectedItemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"f8491e4f-817a-40dd-a90c-af773978c75b",
		armrecoveryservicessiterecovery.EnableProtectionInput{
			Properties: &armrecoveryservicessiterecovery.EnableProtectionInputProperties{
				PolicyID:          to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
				ProtectableItemID: to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectableItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureEnableProtectionInput{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationProtectedItemsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ReplicationProtectedItem{
			Name: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
			Properties: &armrecoveryservicessiterecovery.ReplicationProtectedItemProperties{
				ActiveLocation: to.Ptr("Primary"),
				AllowedOperations: []*string{
					to.Ptr("PlannedFailover"),
					to.Ptr("UnplannedFailover"),
					to.Ptr("DisableProtection"),
					to.Ptr("TestFailover")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/None"),
					ScenarioName: to.Ptr("None"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1753-01-01T01:01:01Z"); return t }()),
				},
				FriendlyName:                           to.Ptr("vm1"),
				PolicyFriendlyName:                     to.Ptr("protectionprofile1"),
				PolicyID:                               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
				PrimaryFabricFriendlyName:              to.Ptr("cloud1"),
				PrimaryProtectionContainerFriendlyName: to.Ptr("cloud1"),
				ProtectableItemID:                      to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectableItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
				ProtectedItemType:                      to.Ptr("HyperVVirtualMachine"),
				ProtectionState:                        to.Ptr("Protected"),
				ProtectionStateDescription:             to.Ptr("Protected"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureReplicationDetails{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
				RecoveryContainerID:                     to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5/replicationProtectionContainers/d38048d4-b460-4791-8ece-108395ee8478"),
				RecoveryFabricFriendlyName:              to.Ptr("Microsoft Azure"),
				RecoveryFabricID:                        to.Ptr("Microsoft Azure"),
				RecoveryProtectionContainerFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryServicesProviderID:              to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/241641e6-ee7b-4ee4-8141-821fadda43fa"),
				ReplicationHealth:                       to.Ptr("Normal"),
				TestFailoverState:                       to.Ptr("None"),
				TestFailoverStateDescription:            to.Ptr("None"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationProtectedItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationProtectedItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectedItems_Purge(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_Purge.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Purges protection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectedItemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginPurge(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"c0c14913-3d7a-48ea-9531-cc99e0e686e6",
		&armrecoveryservicessiterecovery.ReplicationProtectedItemsClientBeginPurgeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_Purge.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_Purge.json: %v", err)
	}
}

func TestReplicationProtectedItems_Update(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates the replication protected Item settings."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectedItemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"f8491e4f-817a-40dd-a90c-af773978c75b",
		armrecoveryservicessiterecovery.UpdateReplicationProtectedItemInput{
			Properties: &armrecoveryservicessiterecovery.UpdateReplicationProtectedItemInputProperties{
				LicenseType: to.Ptr(armrecoveryservicessiterecovery.LicenseTypeWindowsServer),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureUpdateReplicationProtectedItemInput{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
				RecoveryAzureVMName:            to.Ptr("vm1"),
				RecoveryAzureVMSize:            to.Ptr("Basic_A0"),
				SelectedRecoveryAzureNetworkID: to.Ptr("/subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/siterecoveryProd1/providers/Microsoft.Network/virtualNetworks/vnetavrai"),
				VMNics: []*armrecoveryservicessiterecovery.VMNicInputDetails{
					{
						IPConfigs: []*armrecoveryservicessiterecovery.IPConfigInputDetails{
							{
								IPConfigName:            to.Ptr("ipconfig1"),
								IsPrimary:               to.Ptr(true),
								RecoveryStaticIPAddress: to.Ptr("10.0.2.46"),
								RecoverySubnetName:      to.Ptr("subnet1"),
							}},
						NicID:         to.Ptr("TWljcm9zb2Z0OkY4NDkxRTRGLTgxN0EtNDBERC1BOTBDLUFGNzczOTc4Qzc1Qlw3NjAwMzMxRS03NDk4LTQ0QTQtQjdDNy0xQjY1NkJDREQ1MkQ="),
						SelectionType: to.Ptr("SelectedByUser"),
					}},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationProtectedItemsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ReplicationProtectedItem{
			Name: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
			Properties: &armrecoveryservicessiterecovery.ReplicationProtectedItemProperties{
				ActiveLocation: to.Ptr("Primary"),
				AllowedOperations: []*string{
					to.Ptr("PlannedFailover"),
					to.Ptr("UnplannedFailover"),
					to.Ptr("DisableProtection"),
					to.Ptr("TestFailover")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/None"),
					ScenarioName: to.Ptr("None"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1753-01-01T01:01:01Z"); return t }()),
				},
				FriendlyName:                           to.Ptr("vm1"),
				PolicyFriendlyName:                     to.Ptr("protectionprofile1"),
				PolicyID:                               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
				PrimaryFabricFriendlyName:              to.Ptr("cloud1"),
				PrimaryProtectionContainerFriendlyName: to.Ptr("cloud1"),
				ProtectableItemID:                      to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectableItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
				ProtectedItemType:                      to.Ptr("HyperVVirtualMachine"),
				ProtectionState:                        to.Ptr("Protected"),
				ProtectionStateDescription:             to.Ptr("Protected"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureReplicationDetails{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
				RecoveryContainerID:                     to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5/replicationProtectionContainers/d38048d4-b460-4791-8ece-108395ee8478"),
				RecoveryFabricFriendlyName:              to.Ptr("Microsoft Azure"),
				RecoveryFabricID:                        to.Ptr("Microsoft Azure"),
				RecoveryProtectionContainerFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryServicesProviderID:              to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/241641e6-ee7b-4ee4-8141-821fadda43fa"),
				ReplicationHealth:                       to.Ptr("Normal"),
				TestFailoverState:                       to.Ptr("None"),
				TestFailoverStateDescription:            to.Ptr("None"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationProtectedItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationProtectedItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectedItems_AddDisks(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_AddDisks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Add disk(s) for protection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectedItemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginAddDisks(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"f8491e4f-817a-40dd-a90c-af773978c75b",
		armrecoveryservicessiterecovery.AddDisksInput{
			Properties: &armrecoveryservicessiterecovery.AddDisksInputProperties{
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.A2AAddDisksInput{
					InstanceType: to.Ptr("A2A"),
					VMDisks: []*armrecoveryservicessiterecovery.A2AVMDiskInputDetails{
						{
							DiskURI:                             to.Ptr("https://vmstorage.blob.core.windows.net/vhds/datadisk1.vhd"),
							PrimaryStagingAzureStorageAccountID: to.Ptr("/subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourcegroups/primaryResource/providers/Microsoft.Storage/storageAccounts/vmcachestorage"),
							RecoveryAzureStorageAccountID:       to.Ptr("/subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourcegroups/recoveryResource/providers/Microsoft.Storage/storageAccounts/recoverystorage"),
						}},
				},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationProtectedItemsClientBeginAddDisksOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_AddDisks.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_AddDisks.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ReplicationProtectedItem{
			Name: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
			Properties: &armrecoveryservicessiterecovery.ReplicationProtectedItemProperties{
				ActiveLocation: to.Ptr("Primary"),
				AllowedOperations: []*string{
					to.Ptr("RepairReplication"),
					to.Ptr("UnplannedFailover"),
					to.Ptr("DisableProtection"),
					to.Ptr("TestFailover")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/None"),
					ScenarioName: to.Ptr("None"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1752-12-31T19:31:01Z"); return t }()),
				},
				FailoverHealth:                         to.Ptr("Normal"),
				FriendlyName:                           to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
				HealthErrors:                           []*armrecoveryservicessiterecovery.HealthError{},
				PolicyFriendlyName:                     to.Ptr("A2APolicy"),
				PolicyID:                               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/A2APolicy"),
				PrimaryFabricFriendlyName:              to.Ptr("cloud1"),
				PrimaryFabricProvider:                  to.Ptr("AzureFabric"),
				PrimaryProtectionContainerFriendlyName: to.Ptr("cloud_6d224fc6-f326-5d35-96de-fbf51efb3179"),
				ProtectedItemType:                      to.Ptr(""),
				ProtectionState:                        to.Ptr("Protected"),
				ProtectionStateDescription:             to.Ptr("Protected"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.A2AReplicationDetails{
					InstanceType: to.Ptr("A2A"),
				},
				RecoveryContainerID:                     to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud2/replicationProtectionContainers/cloud_81224fc6-f326-5d35-96de-fbf51efb3188"),
				RecoveryFabricFriendlyName:              to.Ptr("cloud2"),
				RecoveryFabricID:                        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud2"),
				RecoveryProtectionContainerFriendlyName: to.Ptr("cloud_81224fc6-f326-5d35-96de-fbf51efb3188"),
				RecoveryServicesProviderID:              to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/6d2940f9-4c34-5989-9f56-1243a6e76ecf"),
				ReplicationHealth:                       to.Ptr("Normal"),
				TestFailoverState:                       to.Ptr("None"),
				TestFailoverStateDescription:            to.Ptr("None"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationProtectedItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationProtectedItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_AddDisks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectedItems_ApplyRecoveryPoint(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_ApplyRecoveryPoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Change or apply recovery point."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectedItemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginApplyRecoveryPoint(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"f8491e4f-817a-40dd-a90c-af773978c75b",
		armrecoveryservicessiterecovery.ApplyRecoveryPointInput{
			Properties: &armrecoveryservicessiterecovery.ApplyRecoveryPointInputProperties{
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureApplyRecoveryPointInput{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
				RecoveryPointID: to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b/recoveryPoints/e4d05fe9-5dfd-47be-b50b-aad306b2802d"),
			},
		},
		&armrecoveryservicessiterecovery.ReplicationProtectedItemsClientBeginApplyRecoveryPointOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_ApplyRecoveryPoint.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_ApplyRecoveryPoint.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ReplicationProtectedItem{
			Name: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
			Properties: &armrecoveryservicessiterecovery.ReplicationProtectedItemProperties{
				ActiveLocation: to.Ptr("Recovery"),
				AllowedOperations: []*string{
					to.Ptr("CompleteMigration"),
					to.Ptr("Commit"),
					to.Ptr("DisableProtection"),
					to.Ptr("ChangePit")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/None"),
					ScenarioName: to.Ptr("None"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1753-01-01T01:01:01Z"); return t }()),
				},
				FailoverRecoveryPointID:                to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b/recoveryPoints/e4d05fe9-5dfd-47be-b50b-aad306b2802d"),
				FriendlyName:                           to.Ptr("vm1"),
				LastSuccessfulFailoverTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-26T08:42:33.0996129Z"); return t }()),
				LastSuccessfulTestFailoverTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-25T09:57:57.0357829Z"); return t }()),
				PolicyFriendlyName:                     to.Ptr("protectionprofile1"),
				PolicyID:                               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
				PrimaryFabricFriendlyName:              to.Ptr("cloud1"),
				PrimaryProtectionContainerFriendlyName: to.Ptr("cloud1"),
				ProtectableItemID:                      to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectableItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
				ProtectedItemType:                      to.Ptr("HyperVVirtualMachine"),
				ProtectionState:                        to.Ptr("UnplannedFailoverCommitPendingStatesBegin"),
				ProtectionStateDescription:             to.Ptr("Failover completed"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureReplicationDetails{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
				RecoveryContainerID:                     to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5/replicationProtectionContainers/d38048d4-b460-4791-8ece-108395ee8478"),
				RecoveryFabricFriendlyName:              to.Ptr("Microsoft Azure"),
				RecoveryFabricID:                        to.Ptr("Microsoft Azure"),
				RecoveryProtectionContainerFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryServicesProviderID:              to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/241641e6-ee7b-4ee4-8141-821fadda43fa"),
				ReplicationHealth:                       to.Ptr("Critical"),
				TestFailoverState:                       to.Ptr("MarkedForDeletion"),
				TestFailoverStateDescription:            to.Ptr("Cleaning up test environment"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationProtectedItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationProtectedItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_ApplyRecoveryPoint.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectedItems_FailoverCancel(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_FailoverCancel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute cancel failover."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectedItemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginFailoverCancel(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"f8491e4f-817a-40dd-a90c-af773978c75b",
		&armrecoveryservicessiterecovery.ReplicationProtectedItemsClientBeginFailoverCancelOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_FailoverCancel.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_FailoverCancel.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ReplicationProtectedItem{
			Name: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
			Properties: &armrecoveryservicessiterecovery.ReplicationProtectedItemProperties{
				ActiveLocation: to.Ptr("Primary"),
				AllowedOperations: []*string{
					to.Ptr("PlannedFailover"),
					to.Ptr("DisableProtection")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/None"),
					ScenarioName: to.Ptr("None"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-24T07:17:23.1358752Z"); return t }()),
				},
				FailoverRecoveryPointID:                to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b/recoveryPoints/b22134ea-620c-474b-9fa5-3c1cb47708e3"),
				FriendlyName:                           to.Ptr("vm1"),
				LastSuccessfulFailoverTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-24T06:37:23.1578655Z"); return t }()),
				LastSuccessfulTestFailoverTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1601-01-01T00:00:00.0000000Z"); return t }()),
				PolicyFriendlyName:                     to.Ptr("protectionprofile1"),
				PolicyID:                               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
				PrimaryFabricFriendlyName:              to.Ptr("cloud1"),
				PrimaryProtectionContainerFriendlyName: to.Ptr("cloud1"),
				ProtectableItemID:                      to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectableItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
				ProtectedItemType:                      to.Ptr(""),
				ProtectionState:                        to.Ptr("Protected"),
				ProtectionStateDescription:             to.Ptr("Protected"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.InMageRcmFailbackReplicationDetails{
					InstanceType: to.Ptr("InMageRcmFailback"),
				},
				RecoveryContainerID:                     to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179"),
				RecoveryFabricFriendlyName:              to.Ptr("cloud1"),
				RecoveryFabricID:                        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1"),
				RecoveryProtectionContainerFriendlyName: to.Ptr("cloud1"),
				RecoveryServicesProviderID:              to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/241641e6-ee7b-4ee4-8141-821fadda43fa"),
				ReplicationHealth:                       to.Ptr("Normal"),
				TestFailoverState:                       to.Ptr("None"),
				TestFailoverStateDescription:            to.Ptr("None"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationProtectedItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationProtectedItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_FailoverCancel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectedItems_FailoverCommit(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_FailoverCommit.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute commit failover."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectedItemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginFailoverCommit(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"f8491e4f-817a-40dd-a90c-af773978c75b",
		&armrecoveryservicessiterecovery.ReplicationProtectedItemsClientBeginFailoverCommitOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_FailoverCommit.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_FailoverCommit.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ReplicationProtectedItem{
			Name: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
			Properties: &armrecoveryservicessiterecovery.ReplicationProtectedItemProperties{
				ActiveLocation: to.Ptr("Recovery"),
				AllowedOperations: []*string{
					to.Ptr("CompleteMigration"),
					to.Ptr("DisableProtection"),
					to.Ptr("Failback")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/None"),
					ScenarioName: to.Ptr("None"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1753-01-01T01:01:01Z"); return t }()),
				},
				FailoverRecoveryPointID:                to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b/recoveryPoints/b22134ea-620c-474b-9fa5-3c1cb47708e3"),
				FriendlyName:                           to.Ptr("vm1"),
				LastSuccessfulFailoverTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-26T06:37:23.1578655Z"); return t }()),
				LastSuccessfulTestFailoverTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-25T09:57:57.0357829Z"); return t }()),
				PolicyFriendlyName:                     to.Ptr("protectionprofile1"),
				PolicyID:                               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
				PrimaryFabricFriendlyName:              to.Ptr("cloud1"),
				PrimaryProtectionContainerFriendlyName: to.Ptr("cloud1"),
				ProtectableItemID:                      to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectableItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
				ProtectedItemType:                      to.Ptr("HyperVVirtualMachine"),
				ProtectionState:                        to.Ptr("PlannedFailoverStatesBegin"),
				ProtectionStateDescription:             to.Ptr("Planned failover committed"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureReplicationDetails{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
				RecoveryContainerID:                     to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5/replicationProtectionContainers/d38048d4-b460-4791-8ece-108395ee8478"),
				RecoveryFabricFriendlyName:              to.Ptr("Microsoft Azure"),
				RecoveryFabricID:                        to.Ptr("Microsoft Azure"),
				RecoveryProtectionContainerFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryServicesProviderID:              to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/241641e6-ee7b-4ee4-8141-821fadda43fa"),
				ReplicationHealth:                       to.Ptr("Normal"),
				TestFailoverState:                       to.Ptr("MarkedForDeletion"),
				TestFailoverStateDescription:            to.Ptr("Cleaning up test environment"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationProtectedItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationProtectedItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_FailoverCommit.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectedItems_PlannedFailover(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_PlannedFailover.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute planned failover."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectedItemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginPlannedFailover(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"f8491e4f-817a-40dd-a90c-af773978c75b",
		armrecoveryservicessiterecovery.PlannedFailoverInput{
			Properties: &armrecoveryservicessiterecovery.PlannedFailoverInputProperties{
				FailoverDirection: to.Ptr("PrimaryToRecovery"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzurePlannedFailoverProviderInput{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationProtectedItemsClientBeginPlannedFailoverOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_PlannedFailover.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_PlannedFailover.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ReplicationProtectedItem{
			Name: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
			Properties: &armrecoveryservicessiterecovery.ReplicationProtectedItemProperties{
				ActiveLocation: to.Ptr("Recovery"),
				AllowedOperations: []*string{
					to.Ptr("CompleteMigration"),
					to.Ptr("Commit"),
					to.Ptr("DisableProtection"),
					to.Ptr("ChangePit")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/None"),
					ScenarioName: to.Ptr("None"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1753-01-01T01:01:01Z"); return t }()),
				},
				FailoverRecoveryPointID:                to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b/recoveryPoints/b22134ea-620c-474b-9fa5-3c1cb47708e3"),
				FriendlyName:                           to.Ptr("vm1"),
				LastSuccessfulFailoverTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-26T06:37:23.1578655Z"); return t }()),
				LastSuccessfulTestFailoverTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-25T09:57:57.0357829Z"); return t }()),
				PolicyFriendlyName:                     to.Ptr("protectionprofile1"),
				PolicyID:                               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
				PrimaryFabricFriendlyName:              to.Ptr("cloud1"),
				PrimaryProtectionContainerFriendlyName: to.Ptr("cloud1"),
				ProtectableItemID:                      to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectableItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
				ProtectedItemType:                      to.Ptr("HyperVVirtualMachine"),
				ProtectionState:                        to.Ptr("PlannedFailoverCommitRequired"),
				ProtectionStateDescription:             to.Ptr("Planned failover finished"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureReplicationDetails{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
				RecoveryContainerID:                     to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5/replicationProtectionContainers/d38048d4-b460-4791-8ece-108395ee8478"),
				RecoveryFabricFriendlyName:              to.Ptr("Microsoft Azure"),
				RecoveryFabricID:                        to.Ptr("Microsoft Azure"),
				RecoveryProtectionContainerFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryServicesProviderID:              to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/241641e6-ee7b-4ee4-8141-821fadda43fa"),
				ReplicationHealth:                       to.Ptr("Normal"),
				TestFailoverState:                       to.Ptr("MarkedForDeletion"),
				TestFailoverStateDescription:            to.Ptr("Cleaning up test environment"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationProtectedItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationProtectedItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_PlannedFailover.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectedItems_Delete(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Disables protection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectedItemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"c0c14913-3d7a-48ea-9531-cc99e0e686e6",
		armrecoveryservicessiterecovery.DisableProtectionInput{
			Properties: &armrecoveryservicessiterecovery.DisableProtectionInputProperties{
				ReplicationProviderInput: &armrecoveryservicessiterecovery.DisableProtectionProviderSpecificInput{
					InstanceType: to.Ptr("DisableProtectionProviderSpecificInput"),
				},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationProtectedItemsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_Delete.json: %v", err)
	}
}

func TestReplicationProtectedItems_RemoveDisks(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_RemoveDisks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Removes disk(s)."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectedItemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginRemoveDisks(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"f8491e4f-817a-40dd-a90c-af773978c75b",
		armrecoveryservicessiterecovery.RemoveDisksInput{
			Properties: &armrecoveryservicessiterecovery.RemoveDisksInputProperties{
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.A2ARemoveDisksInput{
					InstanceType: to.Ptr("A2A"),
					VMDisksUris: []*string{
						to.Ptr("https://vmstorage.blob.core.windows.net/vhds/datadisk1.vhd")},
				},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationProtectedItemsClientBeginRemoveDisksOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_RemoveDisks.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_RemoveDisks.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ReplicationProtectedItem{
			Name: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
			Properties: &armrecoveryservicessiterecovery.ReplicationProtectedItemProperties{
				ActiveLocation: to.Ptr("Primary"),
				AllowedOperations: []*string{
					to.Ptr("RepairReplication"),
					to.Ptr("UnplannedFailover"),
					to.Ptr("DisableProtection"),
					to.Ptr("TestFailover")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/None"),
					ScenarioName: to.Ptr("None"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1752-12-31T19:31:01Z"); return t }()),
				},
				FailoverHealth:                         to.Ptr("Normal"),
				FriendlyName:                           to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
				HealthErrors:                           []*armrecoveryservicessiterecovery.HealthError{},
				PolicyFriendlyName:                     to.Ptr("A2APolicy"),
				PolicyID:                               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/A2APolicy"),
				PrimaryFabricFriendlyName:              to.Ptr("cloud1"),
				PrimaryFabricProvider:                  to.Ptr("AzureFabric"),
				PrimaryProtectionContainerFriendlyName: to.Ptr("cloud_6d224fc6-f326-5d35-96de-fbf51efb3179"),
				ProtectedItemType:                      to.Ptr(""),
				ProtectionState:                        to.Ptr("Protected"),
				ProtectionStateDescription:             to.Ptr("Protected"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.A2AReplicationDetails{
					InstanceType: to.Ptr("A2A"),
				},
				RecoveryContainerID:                     to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud2/replicationProtectionContainers/cloud_81224fc6-f326-5d35-96de-fbf51efb3188"),
				RecoveryFabricFriendlyName:              to.Ptr("cloud2"),
				RecoveryFabricID:                        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud2"),
				RecoveryProtectionContainerFriendlyName: to.Ptr("cloud_81224fc6-f326-5d35-96de-fbf51efb3188"),
				RecoveryServicesProviderID:              to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/6d2940f9-4c34-5989-9f56-1243a6e76ecf"),
				ReplicationHealth:                       to.Ptr("Normal"),
				TestFailoverState:                       to.Ptr("None"),
				TestFailoverStateDescription:            to.Ptr("None"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationProtectedItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationProtectedItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_RemoveDisks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectedItems_RepairReplication(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_RepairReplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Resynchronize or repair replication."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectedItemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginRepairReplication(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"f8491e4f-817a-40dd-a90c-af773978c75b",
		&armrecoveryservicessiterecovery.ReplicationProtectedItemsClientBeginRepairReplicationOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_RepairReplication.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_RepairReplication.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ReplicationProtectedItem{
			Name: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
			Properties: &armrecoveryservicessiterecovery.ReplicationProtectedItemProperties{
				ActiveLocation: to.Ptr("Primary"),
				AllowedOperations: []*string{
					to.Ptr("PlannedFailover"),
					to.Ptr("UnplannedFailover"),
					to.Ptr("DisableProtection"),
					to.Ptr("TestFailover")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/None"),
					ScenarioName: to.Ptr("None"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1753-01-01T01:01:01Z"); return t }()),
				},
				FriendlyName:                           to.Ptr("vm1"),
				PolicyFriendlyName:                     to.Ptr("protectionprofile1"),
				PolicyID:                               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
				PrimaryFabricFriendlyName:              to.Ptr("cloud1"),
				PrimaryProtectionContainerFriendlyName: to.Ptr("cloud1"),
				ProtectableItemID:                      to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectableItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
				ProtectedItemType:                      to.Ptr("HyperVVirtualMachine"),
				ProtectionState:                        to.Ptr("Protected"),
				ProtectionStateDescription:             to.Ptr("Protected"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureReplicationDetails{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
				RecoveryContainerID:                     to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5/replicationProtectionContainers/d38048d4-b460-4791-8ece-108395ee8478"),
				RecoveryFabricFriendlyName:              to.Ptr("Microsoft Azure"),
				RecoveryFabricID:                        to.Ptr("Microsoft Azure"),
				RecoveryProtectionContainerFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryServicesProviderID:              to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/241641e6-ee7b-4ee4-8141-821fadda43fa"),
				ReplicationHealth:                       to.Ptr("Normal"),
				TestFailoverState:                       to.Ptr("None"),
				TestFailoverStateDescription:            to.Ptr("None"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationProtectedItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationProtectedItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_RepairReplication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectedItems_Reprotect(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_Reprotect.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute Reverse Replication\\Reprotect."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectedItemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginReprotect(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"f8491e4f-817a-40dd-a90c-af773978c75b",
		armrecoveryservicessiterecovery.ReverseReplicationInput{
			Properties: &armrecoveryservicessiterecovery.ReverseReplicationInputProperties{
				FailoverDirection: to.Ptr("PrimaryToRecovery"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureReprotectInput{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationProtectedItemsClientBeginReprotectOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_Reprotect.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_Reprotect.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ReplicationProtectedItem{
			Name: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
			Properties: &armrecoveryservicessiterecovery.ReplicationProtectedItemProperties{
				ActiveLocation: to.Ptr("Primary"),
				AllowedOperations: []*string{
					to.Ptr("PlannedFailover"),
					to.Ptr("UnplannedFailover"),
					to.Ptr("DisableProtection"),
					to.Ptr("TestFailover")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/None"),
					ScenarioName: to.Ptr("None"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1753-01-01T01:01:01Z"); return t }()),
				},
				FailoverRecoveryPointID:                to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b/recoveryPoints/b22134ea-620c-474b-9fa5-3c1cb47708e3"),
				FriendlyName:                           to.Ptr("vm1"),
				LastSuccessfulFailoverTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-26T06:37:23.1578655Z"); return t }()),
				LastSuccessfulTestFailoverTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-25T09:57:57.0357829Z"); return t }()),
				PolicyFriendlyName:                     to.Ptr("protectionprofile1"),
				PolicyID:                               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
				PrimaryFabricFriendlyName:              to.Ptr("cloud1"),
				PrimaryProtectionContainerFriendlyName: to.Ptr("cloud1"),
				ProtectableItemID:                      to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectableItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
				ProtectedItemType:                      to.Ptr("HyperVVirtualMachine"),
				ProtectionState:                        to.Ptr("Protected"),
				ProtectionStateDescription:             to.Ptr("Protected"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureReplicationDetails{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
				RecoveryContainerID:                     to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5/replicationProtectionContainers/d38048d4-b460-4791-8ece-108395ee8478"),
				RecoveryFabricFriendlyName:              to.Ptr("Microsoft Azure"),
				RecoveryFabricID:                        to.Ptr("Microsoft Azure"),
				RecoveryProtectionContainerFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryServicesProviderID:              to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/241641e6-ee7b-4ee4-8141-821fadda43fa"),
				ReplicationHealth:                       to.Ptr("Normal"),
				TestFailoverState:                       to.Ptr("MarkedForDeletion"),
				TestFailoverStateDescription:            to.Ptr("Cleaning up test environment"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationProtectedItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationProtectedItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_Reprotect.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectedItems_ResolveHealthErrors(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_ResolveHealthErrors.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Resolve health errors."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectedItemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginResolveHealthErrors(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"f8491e4f-817a-40dd-a90c-af773978c75b",
		armrecoveryservicessiterecovery.ResolveHealthInput{
			Properties: &armrecoveryservicessiterecovery.ResolveHealthInputProperties{
				HealthErrors: []*armrecoveryservicessiterecovery.ResolveHealthError{
					{
						HealthErrorID: to.Ptr("3:8020"),
					}},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationProtectedItemsClientBeginResolveHealthErrorsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_ResolveHealthErrors.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_ResolveHealthErrors.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ReplicationProtectedItem{
			Name: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
			Properties: &armrecoveryservicessiterecovery.ReplicationProtectedItemProperties{
				ActiveLocation: to.Ptr("Primary"),
				AllowedOperations: []*string{
					to.Ptr("RepairReplication"),
					to.Ptr("UnplannedFailover"),
					to.Ptr("DisableProtection"),
					to.Ptr("TestFailover")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/None"),
					ScenarioName: to.Ptr("None"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1752-12-31T19:31:01Z"); return t }()),
				},
				FailoverHealth:                         to.Ptr("Normal"),
				FriendlyName:                           to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
				HealthErrors:                           []*armrecoveryservicessiterecovery.HealthError{},
				PolicyFriendlyName:                     to.Ptr("A2APolicy"),
				PolicyID:                               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/A2APolicy"),
				PrimaryFabricFriendlyName:              to.Ptr("cloud1"),
				PrimaryFabricProvider:                  to.Ptr("AzureFabric"),
				PrimaryProtectionContainerFriendlyName: to.Ptr("cloud_6d224fc6-f326-5d35-96de-fbf51efb3179"),
				ProtectedItemType:                      to.Ptr(""),
				ProtectionState:                        to.Ptr("Protected"),
				ProtectionStateDescription:             to.Ptr("Protected"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.A2AReplicationDetails{
					InstanceType: to.Ptr("A2A"),
				},
				RecoveryContainerID:                     to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud2/replicationProtectionContainers/cloud_81224fc6-f326-5d35-96de-fbf51efb3188"),
				RecoveryFabricFriendlyName:              to.Ptr("cloud2"),
				RecoveryFabricID:                        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud2"),
				RecoveryProtectionContainerFriendlyName: to.Ptr("cloud_81224fc6-f326-5d35-96de-fbf51efb3188"),
				RecoveryServicesProviderID:              to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/6d2940f9-4c34-5989-9f56-1243a6e76ecf"),
				ReplicationHealth:                       to.Ptr("Normal"),
				TestFailoverState:                       to.Ptr("None"),
				TestFailoverStateDescription:            to.Ptr("None"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationProtectedItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationProtectedItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_ResolveHealthErrors.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectedItems_SwitchProvider(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_SwitchProvider.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute switch provider."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectedItemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginSwitchProvider(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"f8491e4f-817a-40dd-a90c-af773978c75b",
		armrecoveryservicessiterecovery.SwitchProviderInput{
			Properties: &armrecoveryservicessiterecovery.SwitchProviderInputProperties{
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.InMageAzureV2SwitchProviderInput{
					InstanceType:      to.Ptr("InMageAzureV2"),
					TargetApplianceID: to.Ptr("5efaa202-e958-435e-8171-706bf735fcc4"),
					TargetFabricID:    to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud2"),
					TargetVaultID:     to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault2"),
				},
				TargetInstanceType: to.Ptr("InMageRcm"),
			},
		},
		&armrecoveryservicessiterecovery.ReplicationProtectedItemsClientBeginSwitchProviderOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_SwitchProvider.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_SwitchProvider.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ReplicationProtectedItem{
			Name: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
			Properties: &armrecoveryservicessiterecovery.ReplicationProtectedItemProperties{
				ActiveLocation: to.Ptr("Recovery"),
				AllowedOperations: []*string{
					to.Ptr("CompleteMigration"),
					to.Ptr("Commit"),
					to.Ptr("DisableProtection"),
					to.Ptr("ChangePit")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/None"),
					ScenarioName: to.Ptr("None"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1753-01-01T01:01:01Z"); return t }()),
				},
				FailoverRecoveryPointID:                to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b/recoveryPoints/b22134ea-620c-474b-9fa5-3c1cb47708e3"),
				FriendlyName:                           to.Ptr("vm1"),
				LastSuccessfulFailoverTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-26T06:37:23.1578655Z"); return t }()),
				LastSuccessfulTestFailoverTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-25T09:57:57.0357829Z"); return t }()),
				PolicyFriendlyName:                     to.Ptr("protectionprofile1"),
				PolicyID:                               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
				PrimaryFabricFriendlyName:              to.Ptr("cloud1"),
				PrimaryProtectionContainerFriendlyName: to.Ptr("cloud1"),
				ProtectableItemID:                      to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectableItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
				ProtectedItemType:                      to.Ptr("HyperVVirtualMachine"),
				ProtectionState:                        to.Ptr("PlannedFailoverCommitRequired"),
				ProtectionStateDescription:             to.Ptr("Planned failover finished"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureReplicationDetails{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
				RecoveryContainerID:                     to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5/replicationProtectionContainers/d38048d4-b460-4791-8ece-108395ee8478"),
				RecoveryFabricFriendlyName:              to.Ptr("Microsoft Azure"),
				RecoveryFabricID:                        to.Ptr("Microsoft Azure"),
				RecoveryProtectionContainerFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryServicesProviderID:              to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/241641e6-ee7b-4ee4-8141-821fadda43fa"),
				ReplicationHealth:                       to.Ptr("Normal"),
				TestFailoverState:                       to.Ptr("MarkedForDeletion"),
				TestFailoverStateDescription:            to.Ptr("Cleaning up test environment"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationProtectedItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationProtectedItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_SwitchProvider.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectedItems_TestFailover(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_TestFailover.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute test failover."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectedItemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginTestFailover(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"f8491e4f-817a-40dd-a90c-af773978c75b",
		armrecoveryservicessiterecovery.TestFailoverInput{
			Properties: &armrecoveryservicessiterecovery.TestFailoverInputProperties{
				FailoverDirection: to.Ptr("PrimaryToRecovery"),
				NetworkID:         to.Ptr("/subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/siterecoveryProd1/providers/Microsoft.Network/virtualNetworks/vnetavrai"),
				NetworkType:       to.Ptr("VmNetworkAsInput"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureTestFailoverInput{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationProtectedItemsClientBeginTestFailoverOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_TestFailover.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_TestFailover.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ReplicationProtectedItem{
			Name: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
			Properties: &armrecoveryservicessiterecovery.ReplicationProtectedItemProperties{
				ActiveLocation: to.Ptr("Primary"),
				AllowedOperations: []*string{
					to.Ptr("TestFailoverCleanup")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/2838f9b4-2609-4f76-a7e9-07e6387c5e98"),
					ScenarioName: to.Ptr("TestFailover"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-25T09:57:57.0357829Z"); return t }()),
				},
				FailoverRecoveryPointID:                to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b/recoveryPoints/0689d0d0-3518-4793-8c98-c26bf94526f6"),
				FriendlyName:                           to.Ptr("vm1"),
				PolicyFriendlyName:                     to.Ptr("protectionprofile1"),
				PolicyID:                               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
				PrimaryFabricFriendlyName:              to.Ptr("cloud1"),
				PrimaryProtectionContainerFriendlyName: to.Ptr("cloud1"),
				ProtectableItemID:                      to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectableItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
				ProtectedItemType:                      to.Ptr("HyperVVirtualMachine"),
				ProtectionState:                        to.Ptr("Protected"),
				ProtectionStateDescription:             to.Ptr("Cleanup test failover pending"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureReplicationDetails{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
				RecoveryContainerID:                     to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5/replicationProtectionContainers/d38048d4-b460-4791-8ece-108395ee8478"),
				RecoveryFabricFriendlyName:              to.Ptr("Microsoft Azure"),
				RecoveryFabricID:                        to.Ptr("Microsoft Azure"),
				RecoveryProtectionContainerFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryServicesProviderID:              to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/241641e6-ee7b-4ee4-8141-821fadda43fa"),
				ReplicationHealth:                       to.Ptr("Normal"),
				TestFailoverState:                       to.Ptr("WaitingForCompletion"),
				TestFailoverStateDescription:            to.Ptr("Waiting for user input"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationProtectedItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationProtectedItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_TestFailover.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectedItems_TestFailoverCleanup(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_TestFailoverCleanup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute test failover cleanup."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectedItemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginTestFailoverCleanup(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"f8491e4f-817a-40dd-a90c-af773978c75b",
		armrecoveryservicessiterecovery.TestFailoverCleanupInput{
			Properties: &armrecoveryservicessiterecovery.TestFailoverCleanupInputProperties{
				Comments: to.Ptr("Test Failover Cleanup"),
			},
		},
		&armrecoveryservicessiterecovery.ReplicationProtectedItemsClientBeginTestFailoverCleanupOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_TestFailoverCleanup.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_TestFailoverCleanup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ReplicationProtectedItem{
			Name: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
			Properties: &armrecoveryservicessiterecovery.ReplicationProtectedItemProperties{
				ActiveLocation: to.Ptr("Primary"),
				AllowedOperations: []*string{
					to.Ptr("PlannedFailover"),
					to.Ptr("UnplannedFailover"),
					to.Ptr("DisableProtection"),
					to.Ptr("TestFailover")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/None"),
					ScenarioName: to.Ptr("None"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1753-01-01T01:01:01Z"); return t }()),
				},
				FailoverRecoveryPointID:                to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b/recoveryPoints/b22134ea-620c-474b-9fa5-3c1cb47708e3"),
				FriendlyName:                           to.Ptr("vm1"),
				LastSuccessfulFailoverTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-26T06:37:23.1578655Z"); return t }()),
				LastSuccessfulTestFailoverTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-25T09:57:57.0357829Z"); return t }()),
				PolicyFriendlyName:                     to.Ptr("protectionprofile1"),
				PolicyID:                               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
				PrimaryFabricFriendlyName:              to.Ptr("cloud1"),
				PrimaryProtectionContainerFriendlyName: to.Ptr("cloud1"),
				ProtectableItemID:                      to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectableItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
				ProtectedItemType:                      to.Ptr("HyperVVirtualMachine"),
				ProtectionState:                        to.Ptr("Protected"),
				ProtectionStateDescription:             to.Ptr("Protected"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureReplicationDetails{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
				RecoveryContainerID:                     to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5/replicationProtectionContainers/d38048d4-b460-4791-8ece-108395ee8478"),
				RecoveryFabricFriendlyName:              to.Ptr("Microsoft Azure"),
				RecoveryFabricID:                        to.Ptr("Microsoft Azure"),
				RecoveryProtectionContainerFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryServicesProviderID:              to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/241641e6-ee7b-4ee4-8141-821fadda43fa"),
				ReplicationHealth:                       to.Ptr("Normal"),
				TestFailoverState:                       to.Ptr("MarkedForDeletion"),
				TestFailoverStateDescription:            to.Ptr("Cleaning up test environment"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationProtectedItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationProtectedItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_TestFailoverCleanup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectedItems_UnplannedFailover(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_UnplannedFailover.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute unplanned failover."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectedItemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginUnplannedFailover(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"f8491e4f-817a-40dd-a90c-af773978c75b",
		armrecoveryservicessiterecovery.UnplannedFailoverInput{
			Properties: &armrecoveryservicessiterecovery.UnplannedFailoverInputProperties{
				FailoverDirection: to.Ptr("PrimaryToRecovery"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureUnplannedFailoverInput{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
				SourceSiteOperations: to.Ptr("NotRequired"),
			},
		},
		&armrecoveryservicessiterecovery.ReplicationProtectedItemsClientBeginUnplannedFailoverOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_UnplannedFailover.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_UnplannedFailover.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ReplicationProtectedItem{
			Name: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
			Properties: &armrecoveryservicessiterecovery.ReplicationProtectedItemProperties{
				ActiveLocation: to.Ptr("Recovery"),
				AllowedOperations: []*string{
					to.Ptr("CompleteMigration"),
					to.Ptr("Commit"),
					to.Ptr("DisableProtection"),
					to.Ptr("ChangePit")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/None"),
					ScenarioName: to.Ptr("None"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1753-01-01T01:01:01Z"); return t }()),
				},
				FailoverRecoveryPointID:                to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b/recoveryPoints/b2c7b208-0999-40a4-804f-8ee1019c8f76"),
				FriendlyName:                           to.Ptr("vm1"),
				LastSuccessfulFailoverTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-26T08:42:33.0996129Z"); return t }()),
				LastSuccessfulTestFailoverTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-25T09:57:57.0357829Z"); return t }()),
				PolicyFriendlyName:                     to.Ptr("protectionprofile1"),
				PolicyID:                               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
				PrimaryFabricFriendlyName:              to.Ptr("cloud1"),
				PrimaryProtectionContainerFriendlyName: to.Ptr("cloud1"),
				ProtectableItemID:                      to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectableItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
				ProtectedItemType:                      to.Ptr("HyperVVirtualMachine"),
				ProtectionState:                        to.Ptr("UnplannedFailoverCommitPendingStatesBegin"),
				ProtectionStateDescription:             to.Ptr("Failover completed"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureReplicationDetails{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
				RecoveryContainerID:                     to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5/replicationProtectionContainers/d38048d4-b460-4791-8ece-108395ee8478"),
				RecoveryFabricFriendlyName:              to.Ptr("Microsoft Azure"),
				RecoveryFabricID:                        to.Ptr("Microsoft Azure"),
				RecoveryProtectionContainerFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryServicesProviderID:              to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/241641e6-ee7b-4ee4-8141-821fadda43fa"),
				ReplicationHealth:                       to.Ptr("Normal"),
				TestFailoverState:                       to.Ptr("MarkedForDeletion"),
				TestFailoverStateDescription:            to.Ptr("Cleaning up test environment"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationProtectedItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationProtectedItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_UnplannedFailover.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectedItems_UpdateAppliance(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_UpdateAppliance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates appliance for replication protected Item."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectedItemsClient("Ayan-0106-SA-Vault",
		"Ayan-0106-SA-RG",
		"7c943c1b-5122-4097-90c8-861411bdd574", cred, &options)
	poller, err := client.BeginUpdateAppliance(ctx,
		"Ayan-0106-SA-Vaultreplicationfabric",
		"Ayan-0106-SA-Vaultreplicationcontainer",
		"idclab-vcen67_50158124-8857-3e08-0893-2ddf8ebb8c1f",
		armrecoveryservicessiterecovery.UpdateApplianceForReplicationProtectedItemInput{
			Properties: &armrecoveryservicessiterecovery.UpdateApplianceForReplicationProtectedItemInputProperties{
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.InMageRcmUpdateApplianceForReplicationProtectedItemInput{
					InstanceType:   to.Ptr("InMageRcm"),
					RunAsAccountID: to.Ptr(""),
				},
				TargetApplianceID: to.Ptr(""),
			},
		},
		&armrecoveryservicessiterecovery.ReplicationProtectedItemsClientBeginUpdateApplianceOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_UpdateAppliance.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_UpdateAppliance.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ReplicationProtectedItem{
			Name: to.Ptr("idclab-vcen67_50158124-8857-3e08-0893-2ddf8ebb8c1f"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems"),
			ID:   to.Ptr("/Subscriptions/7c943c1b-5122-4097-90c8-861411bdd574/resourceGroups/Ayan-0106-SA-RG/providers/Microsoft.RecoveryServices/vaults/Ayan-0106-SA-Vault/replicationFabrics/Ayan-0106-SA-Vaultreplicationfabric/replicationProtectionContainers/Ayan-0106-SA-Vaultreplicationcontainer/replicationProtectedItems/idclab-vcen67_50158124-8857-3e08-0893-2ddf8ebb8c1f"),
			Properties: &armrecoveryservicessiterecovery.ReplicationProtectedItemProperties{
				ActiveLocation: to.Ptr("Primary"),
				AllowedOperations: []*string{
					to.Ptr("UnplannedFailover"),
					to.Ptr("DisableProtection"),
					to.Ptr("TestFailover")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/7c943c1b-5122-4097-90c8-861411bdd574/resourceGroups/Ayan-0106-SA-RG/providers/Microsoft.RecoveryServices/vaults/Ayan-0106-SA-Vault/replicationJobs/None"),
					ScenarioName: to.Ptr("None"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1753-01-01T01:01:01Z"); return t }()),
				},
				EventCorrelationID:                     to.Ptr("fb40d161-cffd-44d9-a252-0b7978e1f73c"),
				FailoverHealth:                         to.Ptr("Normal"),
				FriendlyName:                           to.Ptr("Ayan-RHEL7-Test2"),
				HealthErrors:                           []*armrecoveryservicessiterecovery.HealthError{},
				PolicyFriendlyName:                     to.Ptr("24-hour-replication-policy"),
				PolicyID:                               to.Ptr("/Subscriptions/7c943c1b-5122-4097-90c8-861411bdd574/resourceGroups/Ayan-0106-SA-RG/providers/Microsoft.RecoveryServices/vaults/Ayan-0106-SA-Vault/replicationPolicies/24-hour-replication-policy"),
				PrimaryFabricFriendlyName:              to.Ptr("Ayan-0106-SA-Vaultreplicationfabric"),
				PrimaryFabricProvider:                  to.Ptr("InMageRcmFabric"),
				PrimaryProtectionContainerFriendlyName: to.Ptr("Ayan-0106-SA-Vaultreplicationcontainer"),
				ProtectedItemType:                      to.Ptr(""),
				ProtectionState:                        to.Ptr("Protected"),
				ProtectionStateDescription:             to.Ptr("Protected"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.InMageRcmReplicationDetails{
					InstanceType: to.Ptr("InMageRcm"),
				},
				RecoveryContainerID:                     to.Ptr("/Subscriptions/7c943c1b-5122-4097-90c8-861411bdd574/resourceGroups/Ayan-0106-SA-RG/providers/Microsoft.RecoveryServices/vaults/Ayan-0106-SA-Vault/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5/replicationProtectionContainers/d38048d4-b460-4791-8ece-108395ee8478"),
				RecoveryFabricFriendlyName:              to.Ptr("Microsoft Azure"),
				RecoveryFabricID:                        to.Ptr("Microsoft Azure"),
				RecoveryProtectionContainerFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryServicesProviderID:              to.Ptr("/Subscriptions/7c943c1b-5122-4097-90c8-861411bdd574/resourceGroups/Ayan-0106-SA-RG/providers/Microsoft.RecoveryServices/vaults/Ayan-0106-SA-Vault/replicationFabrics/Ayan-0106-SA-Vaultreplicationfabric/replicationRecoveryServicesProviders/a552cf2d-bbb3-4d78-8145-e1992ecb31d1"),
				ReplicationHealth:                       to.Ptr("Normal"),
				TestFailoverState:                       to.Ptr("None"),
				TestFailoverStateDescription:            to.Ptr("None"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationProtectedItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationProtectedItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_UpdateAppliance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectedItems_UpdateMobilityService(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_UpdateMobilityService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update the mobility service on a protected item."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectedItemsClient("WCUSVault",
		"wcusValidations",
		"b364ed8d-4279-4bf8-8fd1-56f8fa0ae05c", cred, &options)
	poller, err := client.BeginUpdateMobilityService(ctx,
		"WIN-JKKJ31QI8U2",
		"cloud_c6780228-83bd-4f3e-a70e-cb46b7da33a0",
		"79dd20ab-2b40-11e7-9791-0050568f387e",
		armrecoveryservicessiterecovery.UpdateMobilityServiceRequest{
			Properties: &armrecoveryservicessiterecovery.UpdateMobilityServiceRequestProperties{
				RunAsAccountID: to.Ptr("2"),
			},
		},
		&armrecoveryservicessiterecovery.ReplicationProtectedItemsClientBeginUpdateMobilityServiceOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_UpdateMobilityService.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_UpdateMobilityService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ReplicationProtectedItem{
			Name: to.Ptr("79dd20ab-2b40-11e7-9791-0050568f387e"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems"),
			ID:   to.Ptr("/Subscriptions/b364ed8d-4279-4bf8-8fd1-56f8fa0ae05c/resourceGroups/wcusValidations/providers/Microsoft.RecoveryServices/vaults/WCUSVault/replicationFabrics/d70b0326a201008a953505ef271dc908e5e23468bc7356862ea178696f5f15c7/replicationProtectionContainers/cloud_c6780228-83bd-4f3e-a70e-cb46b7da33a0/replicationProtectedItems/79dd20ab-2b40-11e7-9791-0050568f387e"),
			Properties: &armrecoveryservicessiterecovery.ReplicationProtectedItemProperties{
				ActiveLocation: to.Ptr("Primary"),
				AllowedOperations: []*string{
					to.Ptr("UnplannedFailover"),
					to.Ptr("DisableProtection"),
					to.Ptr("TestFailover")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/b364ed8d-4279-4bf8-8fd1-56f8fa0ae05c/resourceGroups/wcusValidations/providers/Microsoft.RecoveryServices/vaults/WCUSVault/replicationJobs/None"),
					ScenarioName: to.Ptr("None"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1753-01-01T01:01:01Z"); return t }()),
				},
				FriendlyName:                           to.Ptr("MMR-LIN-V2A-3"),
				PolicyFriendlyName:                     to.Ptr("MadhaviPolicyNew"),
				PolicyID:                               to.Ptr("/Subscriptions/b364ed8d-4279-4bf8-8fd1-56f8fa0ae05c/resourceGroups/wcusValidations/providers/Microsoft.RecoveryServices/vaults/WCUSVault/replicationPolicies/MadhaviPolicyNew"),
				PrimaryFabricFriendlyName:              to.Ptr("WIN-JKKJ31QI8U2"),
				PrimaryProtectionContainerFriendlyName: to.Ptr("WIN-JKKJ31QI8U2"),
				ProtectableItemID:                      to.Ptr("/Subscriptions/b364ed8d-4279-4bf8-8fd1-56f8fa0ae05c/resourceGroups/wcusValidations/providers/Microsoft.RecoveryServices/vaults/WCUSVault/replicationFabrics/d70b0326a201008a953505ef271dc908e5e23468bc7356862ea178696f5f15c7/replicationProtectionContainers/cloud_c6780228-83bd-4f3e-a70e-cb46b7da33a0/replicationProtectableItems/79dd20ab-2b40-11e7-9791-0050568f387e"),
				ProtectedItemType:                      to.Ptr(""),
				ProtectionState:                        to.Ptr("Protected"),
				ProtectionStateDescription:             to.Ptr("Protected"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.InMageAzureV2ReplicationDetails{
					InstanceType: to.Ptr("InMageAzureV2"),
				},
				RecoveryContainerID:                     to.Ptr("/Subscriptions/b364ed8d-4279-4bf8-8fd1-56f8fa0ae05c/resourceGroups/wcusValidations/providers/Microsoft.RecoveryServices/vaults/WCUSVault/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5/replicationProtectionContainers/d38048d4-b460-4791-8ece-108395ee8478"),
				RecoveryFabricFriendlyName:              to.Ptr("Microsoft Azure"),
				RecoveryFabricID:                        to.Ptr("Microsoft Azure"),
				RecoveryProtectionContainerFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryServicesProviderID:              to.Ptr("/Subscriptions/b364ed8d-4279-4bf8-8fd1-56f8fa0ae05c/resourceGroups/wcusValidations/providers/Microsoft.RecoveryServices/vaults/WCUSVault/replicationFabrics/d70b0326a201008a953505ef271dc908e5e23468bc7356862ea178696f5f15c7/replicationRecoveryServicesProviders/c6780228-83bd-4f3e-a70e-cb46b7da33a0"),
				ReplicationHealth:                       to.Ptr("Normal"),
				TestFailoverState:                       to.Ptr("None"),
				TestFailoverStateDescription:            to.Ptr("None"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationProtectedItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationProtectedItem)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_UpdateMobilityService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectedItems_List(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of replication protected items."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectedItemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	pager := client.List(&armrecoveryservicessiterecovery.ReplicationProtectedItemsClientListOptions{SkipToken: nil,
		Filter: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.ReplicationProtectedItemCollection{
			Value: []*armrecoveryservicessiterecovery.ReplicationProtectedItem{
				{
					Name: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
					Properties: &armrecoveryservicessiterecovery.ReplicationProtectedItemProperties{
						ActiveLocation: to.Ptr("Primary"),
						AllowedOperations: []*string{
							to.Ptr("PlannedFailover"),
							to.Ptr("UnplannedFailover"),
							to.Ptr("DisableProtection"),
							to.Ptr("TestFailover")},
						CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
							JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/None"),
							ScenarioName: to.Ptr("None"),
							StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1753-01-01T01:01:01Z"); return t }()),
						},
						FriendlyName:                           to.Ptr("vm1"),
						PolicyFriendlyName:                     to.Ptr("protectionprofile1"),
						PolicyID:                               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
						PrimaryFabricFriendlyName:              to.Ptr("cloud1"),
						PrimaryProtectionContainerFriendlyName: to.Ptr("cloud1"),
						ProtectableItemID:                      to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectableItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
						ProtectedItemType:                      to.Ptr("HyperVVirtualMachine"),
						ProtectionState:                        to.Ptr("Protected"),
						ProtectionStateDescription:             to.Ptr("Protected"),
						ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzureReplicationDetails{
							InstanceType: to.Ptr("HyperVReplicaAzure"),
						},
						RecoveryContainerID:                     to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/d49858f157601230a6ac5862fbbc6e63bf38d23ecd96cf953767945d457fe9d5/replicationProtectionContainers/d38048d4-b460-4791-8ece-108395ee8478"),
						RecoveryFabricFriendlyName:              to.Ptr("Microsoft Azure"),
						RecoveryFabricID:                        to.Ptr("Microsoft Azure"),
						RecoveryProtectionContainerFriendlyName: to.Ptr("Microsoft Azure"),
						RecoveryServicesProviderID:              to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/241641e6-ee7b-4ee4-8141-821fadda43fa"),
						ReplicationHealth:                       to.Ptr("Normal"),
						TestFailoverState:                       to.Ptr("None"),
						TestFailoverStateDescription:            to.Ptr("None"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReplicationProtectedItemCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReplicationProtectedItemCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectedItems_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecoveryPoints_ListByReplicationProtectedItems(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/RecoveryPoints_ListByReplicationProtectedItems.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of recovery points for a replication protected item."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewRecoveryPointsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	pager := client.ListByReplicationProtectedItems("cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"f8491e4f-817a-40dd-a90c-af773978c75b",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/RecoveryPoints_ListByReplicationProtectedItems.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.RecoveryPointCollection{
			Value: []*armrecoveryservicessiterecovery.RecoveryPoint{
				{
					Name: to.Ptr("b22134ea-620c-474b-9fa5-3c1cb47708e3"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/recoveryPoints"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b/recoveryPoints/b22134ea-620c-474b-9fa5-3c1cb47708e3"),
					Properties: &armrecoveryservicessiterecovery.RecoveryPointProperties{
						RecoveryPointTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-26T06:37:50.8082715Z"); return t }()),
						RecoveryPointType: to.Ptr("CrashConsistent"),
					},
				},
				{
					Name: to.Ptr("34cb2d05-e730-4d3f-b96b-a60a5e92acb2"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/recoveryPoints"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b/recoveryPoints/34cb2d05-e730-4d3f-b96b-a60a5e92acb2"),
					Properties: &armrecoveryservicessiterecovery.RecoveryPointProperties{
						RecoveryPointTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-26T07:37:30.9722019Z"); return t }()),
						RecoveryPointType: to.Ptr("CrashConsistent"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecoveryPointCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecoveryPointCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/RecoveryPoints_ListByReplicationProtectedItems.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecoveryPoints_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/RecoveryPoints_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a recovery point."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewRecoveryPointsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	res, err := client.Get(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"f8491e4f-817a-40dd-a90c-af773978c75b",
		"b22134ea-620c-474b-9fa5-3c1cb47708e3",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/RecoveryPoints_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.RecoveryPoint{
			Name: to.Ptr("b22134ea-620c-474b-9fa5-3c1cb47708e3"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/recoveryPoints"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b/recoveryPoints/b22134ea-620c-474b-9fa5-3c1cb47708e3"),
			Properties: &armrecoveryservicessiterecovery.RecoveryPointProperties{
				RecoveryPointTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-26T06:37:50.8082715Z"); return t }()),
				RecoveryPointType: to.Ptr("CrashConsistent"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecoveryPoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecoveryPoint)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/RecoveryPoints_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTargetComputeSizes_ListByReplicationProtectedItems(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/TargetComputeSizes_ListByReplicationProtectedItems.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of target compute sizes for the replication protected item."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewTargetComputeSizesClient("avraiMgDiskVault",
		"avraiMgDiskVaultRG",
		"6808dbbc-98c7-431f-a1b1-9580902423b7", cred, &options)
	pager := client.ListByReplicationProtectedItems("asr-a2a-default-centraluseuap",
		"asr-a2a-default-centraluseuap-container",
		"468c912d-b1ab-4ea2-97eb-4b5095155db2",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/TargetComputeSizes_ListByReplicationProtectedItems.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.TargetComputeSizeCollection{
			Value: []*armrecoveryservicessiterecovery.TargetComputeSize{
				{
					Name: to.Ptr("Basic_A0"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/targetComputeSizes"),
					ID:   to.Ptr("/Subscriptions/6808dbbc-98c7-431f-a1b1-9580902423b7/resourceGroups/avraiMgDiskVaultRG/providers/Microsoft.RecoveryServices/vaults/avraiMgDiskVault/replicationFabrics/asr-a2a-default-centraluseuap/replicationProtectionContainers/asr-a2a-default-centraluseuap-container/replicationProtectedItems/468c912d-b1ab-4ea2-97eb-4b5095155db2/targetComputeSizes/Basic_A0"),
					Properties: &armrecoveryservicessiterecovery.TargetComputeSizeProperties{
						Name:              to.Ptr("Basic_A0"),
						CPUCoresCount:     to.Ptr[int32](1),
						FriendlyName:      to.Ptr("Basic_A0"),
						HighIopsSupported: to.Ptr("NotSupported"),
						MaxDataDiskCount:  to.Ptr[int32](1),
						MaxNicsCount:      to.Ptr[int32](2),
						MemoryInGB:        to.Ptr[float64](0.75),
					},
				},
				{
					Name: to.Ptr("Standard_A0"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/targetComputeSizes"),
					ID:   to.Ptr("/Subscriptions/6808dbbc-98c7-431f-a1b1-9580902423b7/resourceGroups/avraiMgDiskVaultRG/providers/Microsoft.RecoveryServices/vaults/avraiMgDiskVault/replicationFabrics/asr-a2a-default-centraluseuap/replicationProtectionContainers/asr-a2a-default-centraluseuap-container/replicationProtectedItems/468c912d-b1ab-4ea2-97eb-4b5095155db2/targetComputeSizes/Standard_A0"),
					Properties: &armrecoveryservicessiterecovery.TargetComputeSizeProperties{
						Name:              to.Ptr("Standard_A0"),
						CPUCoresCount:     to.Ptr[int32](1),
						FriendlyName:      to.Ptr("Standard_A0"),
						HighIopsSupported: to.Ptr("NotSupported"),
						HyperVGenerations: []*string{
							to.Ptr("V1")},
						MaxDataDiskCount: to.Ptr[int32](1),
						MaxNicsCount:     to.Ptr[int32](2),
						MemoryInGB:       to.Ptr[float64](0.75),
						VCPUsAvailable:   to.Ptr[int32](1),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TargetComputeSizeCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TargetComputeSizeCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/TargetComputeSizes_ListByReplicationProtectedItems.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectionContainerMappings_ListByReplicationProtectionContainers(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_ListByReplicationProtectionContainers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of protection container mappings for a protection container."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectionContainerMappingsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	pager := client.ListByReplicationProtectionContainers("cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_ListByReplicationProtectionContainers.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.ProtectionContainerMappingCollection{
			Value: []*armrecoveryservicessiterecovery.ProtectionContainerMapping{
				{
					Name: to.Ptr("cloud1protectionprofile1"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectionContainerMappings"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectionContainerMappings/cloud1protectionprofile1"),
					Properties: &armrecoveryservicessiterecovery.ProtectionContainerMappingProperties{
						Health:                                to.Ptr("Normal"),
						HealthErrorDetails:                    []*armrecoveryservicessiterecovery.HealthError{},
						PolicyFriendlyName:                    to.Ptr("protectionprofile1"),
						PolicyID:                              to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
						SourceFabricFriendlyName:              to.Ptr("cloud1"),
						SourceProtectionContainerFriendlyName: to.Ptr("cloud1"),
						State:                                 to.Ptr("Paired"),
						TargetFabricFriendlyName:              to.Ptr("Microsoft Azure"),
						TargetProtectionContainerFriendlyName: to.Ptr("Microsoft Azure"),
						TargetProtectionContainerID:           to.Ptr("Microsoft Azure"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProtectionContainerMappingCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProtectionContainerMappingCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_ListByReplicationProtectionContainers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectionContainerMappings_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a protection container mapping."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectionContainerMappingsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	res, err := client.Get(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"cloud1protectionprofile1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ProtectionContainerMapping{
			Name: to.Ptr("cloud1protectionprofile1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectionContainerMappings"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectionContainerMappings/cloud1protectionprofile1"),
			Properties: &armrecoveryservicessiterecovery.ProtectionContainerMappingProperties{
				Health:                                to.Ptr("Normal"),
				HealthErrorDetails:                    []*armrecoveryservicessiterecovery.HealthError{},
				PolicyFriendlyName:                    to.Ptr("protectionprofile1"),
				PolicyID:                              to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
				SourceFabricFriendlyName:              to.Ptr("cloud1"),
				SourceProtectionContainerFriendlyName: to.Ptr("cloud1"),
				State:                                 to.Ptr("Paired"),
				TargetFabricFriendlyName:              to.Ptr("Microsoft Azure"),
				TargetProtectionContainerFriendlyName: to.Ptr("Microsoft Azure"),
				TargetProtectionContainerID:           to.Ptr("Microsoft Azure"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectionContainerMapping) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectionContainerMapping)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectionContainerMappings_Create(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create protection container mapping."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectionContainerMappingsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"cloud1protectionprofile1",
		armrecoveryservicessiterecovery.CreateProtectionContainerMappingInput{
			Properties: &armrecoveryservicessiterecovery.CreateProtectionContainerMappingInputProperties{
				PolicyID: to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
				ProviderSpecificInput: &armrecoveryservicessiterecovery.ReplicationProviderSpecificContainerMappingInput{
					InstanceType: to.Ptr("ReplicationProviderSpecificContainerMappingInput"),
				},
				TargetProtectionContainerID: to.Ptr("Microsoft Azure"),
			},
		},
		&armrecoveryservicessiterecovery.ReplicationProtectionContainerMappingsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ProtectionContainerMapping{
			Name: to.Ptr("cloud1protectionprofile1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectionContainerMappings"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectionContainerMappings/cloud1protectionprofile1"),
			Properties: &armrecoveryservicessiterecovery.ProtectionContainerMappingProperties{
				Health:                                to.Ptr("Normal"),
				HealthErrorDetails:                    []*armrecoveryservicessiterecovery.HealthError{},
				PolicyFriendlyName:                    to.Ptr("protectionprofile1"),
				PolicyID:                              to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
				SourceFabricFriendlyName:              to.Ptr("cloud1"),
				SourceProtectionContainerFriendlyName: to.Ptr("cloud1"),
				State:                                 to.Ptr("Paired"),
				TargetFabricFriendlyName:              to.Ptr("Microsoft Azure"),
				TargetProtectionContainerFriendlyName: to.Ptr("Microsoft Azure"),
				TargetProtectionContainerID:           to.Ptr("Microsoft Azure"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectionContainerMapping) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectionContainerMapping)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectionContainerMappings_Purge(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_Purge.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Purge protection container mapping."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectionContainerMappingsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginPurge(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"cloud1protectionprofile1",
		&armrecoveryservicessiterecovery.ReplicationProtectionContainerMappingsClientBeginPurgeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_Purge.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_Purge.json: %v", err)
	}
}

func TestReplicationProtectionContainerMappings_Update(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update protection container mapping."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectionContainerMappingsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"cloud1protectionprofile1",
		armrecoveryservicessiterecovery.UpdateProtectionContainerMappingInput{
			Properties: &armrecoveryservicessiterecovery.UpdateProtectionContainerMappingInputProperties{
				ProviderSpecificInput: &armrecoveryservicessiterecovery.A2AUpdateContainerMappingInput{
					InstanceType:           to.Ptr("A2A"),
					AgentAutoUpdateStatus:  to.Ptr(armrecoveryservicessiterecovery.AgentAutoUpdateStatusEnabled),
					AutomationAccountArmID: to.Ptr("/subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/automationrg1/providers/Microsoft.Automation/automationAccounts/automationaccount1"),
				},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationProtectionContainerMappingsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ProtectionContainerMapping{
			Name: to.Ptr("cloud1protectionprofile1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectionContainerMappings"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectionContainerMappings/cloud1protectionprofile1"),
			Properties: &armrecoveryservicessiterecovery.ProtectionContainerMappingProperties{
				Health:             to.Ptr("Normal"),
				HealthErrorDetails: []*armrecoveryservicessiterecovery.HealthError{},
				PolicyFriendlyName: to.Ptr("protectionprofile1"),
				PolicyID:           to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.A2AProtectionContainerMappingDetails{
					InstanceType:           to.Ptr("A2A"),
					AgentAutoUpdateStatus:  to.Ptr(armrecoveryservicessiterecovery.AgentAutoUpdateStatusEnabled),
					AutomationAccountArmID: to.Ptr("/subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/automationrg1/providers/Microsoft.Automation/automationAccounts/automationaccount1"),
					JobScheduleName:        to.Ptr("ffd503ec-5f88-4b58-97c8-841466e7aa47"),
					ScheduleName:           to.Ptr("cloud1protectionprofile1_a85ea38f-62a8-471b-93cc-69b74fd9578c"),
				},
				SourceFabricFriendlyName:              to.Ptr("cloud1"),
				SourceProtectionContainerFriendlyName: to.Ptr("cloud1"),
				State:                                 to.Ptr("Paired"),
				TargetFabricFriendlyName:              to.Ptr("Microsoft Azure"),
				TargetProtectionContainerFriendlyName: to.Ptr("Microsoft Azure"),
				TargetProtectionContainerID:           to.Ptr("Microsoft Azure"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProtectionContainerMapping) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProtectionContainerMapping)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectionContainerMappings_Delete(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Remove protection container mapping."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectionContainerMappingsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"cloud1",
		"cloud_6d224fc6-f326-5d35-96de-fbf51efb3179",
		"cloud1protectionprofile1",
		armrecoveryservicessiterecovery.RemoveProtectionContainerMappingInput{
			Properties: &armrecoveryservicessiterecovery.RemoveProtectionContainerMappingInputProperties{
				ProviderSpecificInput: &armrecoveryservicessiterecovery.ReplicationProviderContainerUnmappingInput{},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationProtectionContainerMappingsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_Delete.json: %v", err)
	}
}

func TestReplicationProtectionContainerMappings_List(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of all protection container mappings in a vault."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectionContainerMappingsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.ProtectionContainerMappingCollection{
			Value: []*armrecoveryservicessiterecovery.ProtectionContainerMapping{
				{
					Name: to.Ptr("cloud1protectionprofile1"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationProtectionContainerMappings"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectionContainerMappings/cloud1protectionprofile1"),
					Properties: &armrecoveryservicessiterecovery.ProtectionContainerMappingProperties{
						Health:                                to.Ptr("Normal"),
						HealthErrorDetails:                    []*armrecoveryservicessiterecovery.HealthError{},
						PolicyFriendlyName:                    to.Ptr("protectionprofile1"),
						PolicyID:                              to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
						SourceFabricFriendlyName:              to.Ptr("cloud1"),
						SourceProtectionContainerFriendlyName: to.Ptr("cloud1"),
						State:                                 to.Ptr("Paired"),
						TargetFabricFriendlyName:              to.Ptr("Microsoft Azure"),
						TargetProtectionContainerFriendlyName: to.Ptr("Microsoft Azure"),
						TargetProtectionContainerID:           to.Ptr("Microsoft Azure"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProtectionContainerMappingCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProtectionContainerMappingCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionContainerMappings_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationRecoveryServicesProviders_ListByReplicationFabrics(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_ListByReplicationFabrics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of registered recovery services providers for the fabric."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationRecoveryServicesProvidersClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	pager := client.ListByReplicationFabrics("cloud1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_ListByReplicationFabrics.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.RecoveryServicesProviderCollection{
			Value: []*armrecoveryservicessiterecovery.RecoveryServicesProvider{
				{
					Name: to.Ptr("241641e6-ee7b-4ee4-8141-821fadda43fa"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationRecoveryServicesProviders"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/241641e6-ee7b-4ee4-8141-821fadda43fa"),
					Properties: &armrecoveryservicessiterecovery.RecoveryServicesProviderProperties{
						AllowedScenarios: []*string{
							to.Ptr("Refresh")},
						ConnectionStatus:     to.Ptr("Connected"),
						FabricFriendlyName:   to.Ptr("cloud1"),
						FabricType:           to.Ptr("HyperVSite"),
						FriendlyName:         to.Ptr("CP-B3L40406-12.ntdev.corp.microsoft.com"),
						LastHeartBeat:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T09:06:38.2728455Z"); return t }()),
						ProtectedItemCount:   to.Ptr[int32](2),
						ProviderVersion:      to.Ptr("5.1.2250.0"),
						ProviderVersionState: to.Ptr("Latest"),
						ServerVersion:        to.Ptr("3.2.7510.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecoveryServicesProviderCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecoveryServicesProviderCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_ListByReplicationFabrics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationRecoveryServicesProviders_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the details of a recovery services provider."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationRecoveryServicesProvidersClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	res, err := client.Get(ctx,
		"cloud1",
		"241641e6-ee7b-4ee4-8141-821fadda43fa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.RecoveryServicesProvider{
			Name: to.Ptr("241641e6-ee7b-4ee4-8141-821fadda43fa"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationRecoveryServicesProviders"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/241641e6-ee7b-4ee4-8141-821fadda43fa"),
			Properties: &armrecoveryservicessiterecovery.RecoveryServicesProviderProperties{
				AllowedScenarios: []*string{
					to.Ptr("Refresh")},
				ConnectionStatus:     to.Ptr("Connected"),
				FabricFriendlyName:   to.Ptr("cloud1"),
				FabricType:           to.Ptr("HyperVSite"),
				FriendlyName:         to.Ptr("CP-B3L40406-12.ntdev.corp.microsoft.com"),
				LastHeartBeat:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T09:16:04.9405768Z"); return t }()),
				ProtectedItemCount:   to.Ptr[int32](2),
				ProviderVersion:      to.Ptr("5.1.2250.0"),
				ProviderVersionState: to.Ptr("Latest"),
				ServerVersion:        to.Ptr("3.2.7510.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecoveryServicesProvider) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecoveryServicesProvider)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationRecoveryServicesProviders_Create(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Adds a recovery services provider."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationRecoveryServicesProvidersClient("migrationvault",
		"resourcegroup1",
		"cb53d0c3-bd59-4721-89bc-06916a9147ef", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"vmwarefabric1",
		"vmwareprovider1",
		armrecoveryservicessiterecovery.AddRecoveryServicesProviderInput{
			Properties: &armrecoveryservicessiterecovery.AddRecoveryServicesProviderInputProperties{
				AuthenticationIdentityInput: &armrecoveryservicessiterecovery.IdentityProviderInput{
					AADAuthority:  to.Ptr("https://login.microsoftonline.com"),
					ApplicationID: to.Ptr("f66fce08-c0c6-47a1-beeb-0ede5ea94f90"),
					Audience:      to.Ptr("https://microsoft.onmicrosoft.com/cf19e349-644c-4c6a-bcae-9c8f35357874"),
					ObjectID:      to.Ptr("141360b8-5686-4240-a027-5e24e6affeba"),
					TenantID:      to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
				},
				MachineName: to.Ptr("vmwareprovider1"),
				ResourceAccessIdentityInput: &armrecoveryservicessiterecovery.IdentityProviderInput{
					AADAuthority:  to.Ptr("https://login.microsoftonline.com"),
					ApplicationID: to.Ptr("f66fce08-c0c6-47a1-beeb-0ede5ea94f90"),
					Audience:      to.Ptr("https://microsoft.onmicrosoft.com/cf19e349-644c-4c6a-bcae-9c8f35357874"),
					ObjectID:      to.Ptr("141360b8-5686-4240-a027-5e24e6affeba"),
					TenantID:      to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
				},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationRecoveryServicesProvidersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.RecoveryServicesProvider{
			Name: to.Ptr("vmwareprovider1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationRecoveryServicesProviders"),
			ID:   to.Ptr("/Subscriptions/cb53d0c3-bd59-4721-89bc-06916a9147ef/resourceGroups/resourcegroup1/providers/Microsoft.RecoveryServices/vaults/migrationvault/replicationFabrics/vmwarefabric1/replicationRecoveryServicesProviders/vmwareprovider1"),
			Properties: &armrecoveryservicessiterecovery.RecoveryServicesProviderProperties{
				AllowedScenarios: []*string{
					to.Ptr("Refresh")},
				ConnectionStatus:     to.Ptr("Connected"),
				FabricFriendlyName:   to.Ptr("vmwarefabric1"),
				FabricType:           to.Ptr("VMwareV2"),
				FriendlyName:         to.Ptr("vmwareprovider1"),
				LastHeartBeat:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T09:16:04.9405768Z"); return t }()),
				ProtectedItemCount:   to.Ptr[int32](2),
				ProviderVersion:      to.Ptr("5.1.3688.0"),
				ProviderVersionState: to.Ptr("Latest"),
				ServerVersion:        to.Ptr("3.2.7510.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecoveryServicesProvider) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecoveryServicesProvider)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationRecoveryServicesProviders_Purge(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_Purge.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Purges recovery service provider from fabric."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationRecoveryServicesProvidersClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginPurge(ctx,
		"cloud1",
		"241641e6-ee7b-4ee4-8141-821fadda43fa",
		&armrecoveryservicessiterecovery.ReplicationRecoveryServicesProvidersClientBeginPurgeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_Purge.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_Purge.json: %v", err)
	}
}

func TestReplicationRecoveryServicesProviders_RefreshProvider(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_RefreshProvider.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Refresh details from the recovery services provider."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationRecoveryServicesProvidersClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginRefreshProvider(ctx,
		"cloud1",
		"241641e6-ee7b-4ee4-8141-821fadda43fa",
		&armrecoveryservicessiterecovery.ReplicationRecoveryServicesProvidersClientBeginRefreshProviderOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_RefreshProvider.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_RefreshProvider.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.RecoveryServicesProvider{
			Name: to.Ptr("241641e6-ee7b-4ee4-8141-821fadda43fa"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationRecoveryServicesProviders"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/241641e6-ee7b-4ee4-8141-821fadda43fa"),
			Properties: &armrecoveryservicessiterecovery.RecoveryServicesProviderProperties{
				AllowedScenarios: []*string{
					to.Ptr("Refresh")},
				ConnectionStatus:     to.Ptr("Connected"),
				FabricFriendlyName:   to.Ptr("cloud1"),
				FabricType:           to.Ptr("HyperVSite"),
				FriendlyName:         to.Ptr("CP-B3L40406-12.ntdev.corp.microsoft.com"),
				LastHeartBeat:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T09:48:36.6528303Z"); return t }()),
				ProtectedItemCount:   to.Ptr[int32](2),
				ProviderVersion:      to.Ptr("5.1.2250.0"),
				ProviderVersionState: to.Ptr("Latest"),
				ServerVersion:        to.Ptr("3.2.7510.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecoveryServicesProvider) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecoveryServicesProvider)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_RefreshProvider.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationRecoveryServicesProviders_Delete(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes provider from fabric. Note: Deleting provider for any fabric other than SingleHost is unsupported. To maintain backward compatibility for released clients the object \"deleteRspInput\" is used (if the object is empty we assume that it is old client and continue the old behavior)."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationRecoveryServicesProvidersClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"cloud1",
		"241641e6-ee7b-4ee4-8141-821fadda43fa",
		&armrecoveryservicessiterecovery.ReplicationRecoveryServicesProvidersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_Delete.json: %v", err)
	}
}

func TestReplicationRecoveryServicesProviders_List(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of registered recovery services providers in the vault. This is a view only api."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationRecoveryServicesProvidersClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.RecoveryServicesProviderCollection{
			Value: []*armrecoveryservicessiterecovery.RecoveryServicesProvider{
				{
					Name: to.Ptr("241641e6-ee7b-4ee4-8141-821fadda43fa"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationRecoveryServicesProviders"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationRecoveryServicesProviders/241641e6-ee7b-4ee4-8141-821fadda43fa"),
					Properties: &armrecoveryservicessiterecovery.RecoveryServicesProviderProperties{
						AllowedScenarios: []*string{
							to.Ptr("Refresh")},
						ConnectionStatus:     to.Ptr("Connected"),
						FabricFriendlyName:   to.Ptr("cloud1"),
						FabricType:           to.Ptr("HyperVSite"),
						FriendlyName:         to.Ptr("CP-B3L40406-12.ntdev.corp.microsoft.com"),
						LastHeartBeat:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T09:06:38.2728455Z"); return t }()),
						ProtectedItemCount:   to.Ptr[int32](2),
						ProviderVersion:      to.Ptr("5.1.2250.0"),
						ProviderVersionState: to.Ptr("Latest"),
						ServerVersion:        to.Ptr("3.2.7510.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecoveryServicesProviderCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecoveryServicesProviderCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryServicesProviders_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationStorageClassifications_ListByReplicationFabrics(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassifications_ListByReplicationFabrics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of storage classification objects under a fabric."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationStorageClassificationsClient("vault1",
		"resourceGroupPS1",
		"9112a37f-0f3e-46ec-9c00-060c6edca071", cred, &options)
	pager := client.ListByReplicationFabrics("2a48e3770ac08aa2be8bfbd94fcfb1cbf2dcc487b78fb9d3bd778304441b06a0",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassifications_ListByReplicationFabrics.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.StorageClassificationCollection{
			Value: []*armrecoveryservicessiterecovery.StorageClassification{
				{
					Name: to.Ptr("8891569e-aaef-4a46-a4a0-78c14f2d7b09"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationStorageClassifications"),
					ID:   to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/2a48e3770ac08aa2be8bfbd94fcfb1cbf2dcc487b78fb9d3bd778304441b06a0/replicationStorageClassifications/8891569e-aaef-4a46-a4a0-78c14f2d7b09"),
					Properties: &armrecoveryservicessiterecovery.StorageClassificationProperties{
						FriendlyName: to.Ptr("testStorageClassification"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StorageClassificationCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StorageClassificationCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassifications_ListByReplicationFabrics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationStorageClassifications_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassifications_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the details of a storage classification."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationStorageClassificationsClient("vault1",
		"resourceGroupPS1",
		"9112a37f-0f3e-46ec-9c00-060c6edca071", cred, &options)
	res, err := client.Get(ctx,
		"2a48e3770ac08aa2be8bfbd94fcfb1cbf2dcc487b78fb9d3bd778304441b06a0",
		"8891569e-aaef-4a46-a4a0-78c14f2d7b09",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassifications_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.StorageClassification{
			Name: to.Ptr("8891569e-aaef-4a46-a4a0-78c14f2d7b09"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationStorageClassifications"),
			ID:   to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/2a48e3770ac08aa2be8bfbd94fcfb1cbf2dcc487b78fb9d3bd778304441b06a0/replicationStorageClassifications/8891569e-aaef-4a46-a4a0-78c14f2d7b09"),
			Properties: &armrecoveryservicessiterecovery.StorageClassificationProperties{
				FriendlyName: to.Ptr("testStorageClassification"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StorageClassification) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StorageClassification)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassifications_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationStorageClassifications_List(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassifications_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of storage classification objects under a vault."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationStorageClassificationsClient("vault1",
		"resourceGroupPS1",
		"9112a37f-0f3e-46ec-9c00-060c6edca071", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassifications_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.StorageClassificationCollection{
			Value: []*armrecoveryservicessiterecovery.StorageClassification{
				{
					Name: to.Ptr("8891569e-aaef-4a46-a4a0-78c14f2d7b09"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationStorageClassifications"),
					ID:   to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/2a48e3770ac08aa2be8bfbd94fcfb1cbf2dcc487b78fb9d3bd778304441b06a0/replicationStorageClassifications/8891569e-aaef-4a46-a4a0-78c14f2d7b09"),
					Properties: &armrecoveryservicessiterecovery.StorageClassificationProperties{
						FriendlyName: to.Ptr("testStorageClassification"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StorageClassificationCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StorageClassificationCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassifications_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationStorageClassificationMappings_ListByReplicationStorageClassifications(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassificationMappings_ListByReplicationStorageClassifications.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of storage classification mappings objects under a storage."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationStorageClassificationMappingsClient("vault1",
		"resourceGroupPS1",
		"9112a37f-0f3e-46ec-9c00-060c6edca071", cred, &options)
	pager := client.ListByReplicationStorageClassifications("2a48e3770ac08aa2be8bfbd94fcfb1cbf2dcc487b78fb9d3bd778304441b06a0",
		"8891569e-aaef-4a46-a4a0-78c14f2d7b09",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassificationMappings_ListByReplicationStorageClassifications.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.StorageClassificationMappingCollection{
			Value: []*armrecoveryservicessiterecovery.StorageClassificationMapping{
				{
					Name: to.Ptr("testStorageMapping"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationStorageClassifications/replicationStorageClassificationMappings"),
					ID:   to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/2a48e3770ac08aa2be8bfbd94fcfb1cbf2dcc487b78fb9d3bd778304441b06a0/replicationStorageClassifications/8891569e-aaef-4a46-a4a0-78c14f2d7b09/replicationStorageClassificationMappings/testStorageMapping"),
					Properties: &armrecoveryservicessiterecovery.StorageClassificationMappingProperties{
						TargetStorageClassificationID: to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/2a48e3770ac08aa2be8bfbd94fcfb1cbf2dcc487b78fb9d3bd778304441b06a0/replicationStorageClassifications/8891569e-aaef-4a46-a4a0-78c14f2d7b09"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StorageClassificationMappingCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StorageClassificationMappingCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassificationMappings_ListByReplicationStorageClassifications.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationStorageClassificationMappings_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassificationMappings_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the details of a storage classification mapping."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationStorageClassificationMappingsClient("vault1",
		"resourceGroupPS1",
		"9112a37f-0f3e-46ec-9c00-060c6edca071", cred, &options)
	res, err := client.Get(ctx,
		"2a48e3770ac08aa2be8bfbd94fcfb1cbf2dcc487b78fb9d3bd778304441b06a0",
		"8891569e-aaef-4a46-a4a0-78c14f2d7b09",
		"testStorageMapping",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassificationMappings_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.StorageClassificationMapping{
			Name: to.Ptr("testStorageMapping"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationStorageClassifications/replicationStorageClassificationMappings"),
			ID:   to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/2a48e3770ac08aa2be8bfbd94fcfb1cbf2dcc487b78fb9d3bd778304441b06a0/replicationStorageClassifications/8891569e-aaef-4a46-a4a0-78c14f2d7b09/replicationStorageClassificationMappings/testStorageMapping"),
			Properties: &armrecoveryservicessiterecovery.StorageClassificationMappingProperties{
				TargetStorageClassificationID: to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/2a48e3770ac08aa2be8bfbd94fcfb1cbf2dcc487b78fb9d3bd778304441b06a0/replicationStorageClassifications/8891569e-aaef-4a46-a4a0-78c14f2d7b09"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StorageClassificationMapping) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StorageClassificationMapping)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassificationMappings_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationStorageClassificationMappings_Create(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassificationMappings_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create storage classification mapping."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationStorageClassificationMappingsClient("vault1",
		"resourceGroupPS1",
		"9112a37f-0f3e-46ec-9c00-060c6edca071", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"2a48e3770ac08aa2be8bfbd94fcfb1cbf2dcc487b78fb9d3bd778304441b06a0",
		"8891569e-aaef-4a46-a4a0-78c14f2d7b09",
		"testStorageMapping",
		armrecoveryservicessiterecovery.StorageClassificationMappingInput{
			Properties: &armrecoveryservicessiterecovery.StorageMappingInputProperties{
				TargetStorageClassificationID: to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/2a48e3770ac08aa2be8bfbd94fcfb1cbf2dcc487b78fb9d3bd778304441b06a0/replicationStorageClassifications/8891569e-aaef-4a46-a4a0-78c14f2d7b09"),
			},
		},
		&armrecoveryservicessiterecovery.ReplicationStorageClassificationMappingsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassificationMappings_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassificationMappings_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.StorageClassificationMapping{
			Name: to.Ptr("testStorageMapping"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationStorageClassifications/replicationStorageClassificationMappings"),
			ID:   to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/2a48e3770ac08aa2be8bfbd94fcfb1cbf2dcc487b78fb9d3bd778304441b06a0/replicationStorageClassifications/8891569e-aaef-4a46-a4a0-78c14f2d7b09/replicationStorageClassificationMappings/testStorageMapping"),
			Properties: &armrecoveryservicessiterecovery.StorageClassificationMappingProperties{
				TargetStorageClassificationID: to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/2a48e3770ac08aa2be8bfbd94fcfb1cbf2dcc487b78fb9d3bd778304441b06a0/replicationStorageClassifications/8891569e-aaef-4a46-a4a0-78c14f2d7b09"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StorageClassificationMapping) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StorageClassificationMapping)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassificationMappings_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationStorageClassificationMappings_Delete(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassificationMappings_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a storage classification mapping."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationStorageClassificationMappingsClient("vault1",
		"resourceGroupPS1",
		"9112a37f-0f3e-46ec-9c00-060c6edca071", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"2a48e3770ac08aa2be8bfbd94fcfb1cbf2dcc487b78fb9d3bd778304441b06a0",
		"8891569e-aaef-4a46-a4a0-78c14f2d7b09",
		"testStorageMapping",
		&armrecoveryservicessiterecovery.ReplicationStorageClassificationMappingsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassificationMappings_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassificationMappings_Delete.json: %v", err)
	}
}

func TestReplicationStorageClassificationMappings_List(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassificationMappings_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of storage classification mappings objects under a vault."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationStorageClassificationMappingsClient("vault1",
		"resourceGroupPS1",
		"9112a37f-0f3e-46ec-9c00-060c6edca071", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassificationMappings_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.StorageClassificationMappingCollection{
			Value: []*armrecoveryservicessiterecovery.StorageClassificationMapping{
				{
					Name: to.Ptr("testStorageMapping"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationStorageClassifications/replicationStorageClassificationMappings"),
					ID:   to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/2a48e3770ac08aa2be8bfbd94fcfb1cbf2dcc487b78fb9d3bd778304441b06a0/replicationStorageClassifications/8891569e-aaef-4a46-a4a0-78c14f2d7b09/replicationStorageClassificationMappings/testStorageMapping"),
					Properties: &armrecoveryservicessiterecovery.StorageClassificationMappingProperties{
						TargetStorageClassificationID: to.Ptr("/Subscriptions/9112a37f-0f3e-46ec-9c00-060c6edca071/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/2a48e3770ac08aa2be8bfbd94fcfb1cbf2dcc487b78fb9d3bd778304441b06a0/replicationStorageClassifications/8891569e-aaef-4a46-a4a0-78c14f2d7b09"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StorageClassificationMappingCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StorageClassificationMappingCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationStorageClassificationMappings_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationvCenters_ListByReplicationFabrics(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationvCenters_ListByReplicationFabrics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of vCenter registered under a fabric."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationvCentersClient("MadhaviVault",
		"MadhaviVRG",
		"7c943c1b-5122-4097-90c8-861411bdd574", cred, &options)
	pager := client.ListByReplicationFabrics("MadhaviFabric",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationvCenters_ListByReplicationFabrics.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.VCenterCollection{
			Value: []*armrecoveryservicessiterecovery.VCenter{
				{
					Name: to.Ptr("esx-78"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationvCenters"),
					ID:   to.Ptr("/Subscriptions/7c943c1b-5122-4097-90c8-861411bdd574/resourceGroups/MadhaviVRG/providers/Microsoft.RecoveryServices/vaults/MadhaviVault/replicationFabrics/239f778f368e34f78216d81f030725cdf2033174b47879b9f2eeede06fdd9c4d/replicationvCenters/esx-78"),
					Properties: &armrecoveryservicessiterecovery.VCenterProperties{
						DiscoveryStatus:       to.Ptr("Pending"),
						FabricArmResourceName: to.Ptr("239f778f368e34f78216d81f030725cdf2033174b47879b9f2eeede06fdd9c4d"),
						FriendlyName:          to.Ptr("esx-78"),
						InternalID:            to.Ptr("inmtest78"),
						IPAddress:             to.Ptr("inmtest78"),
						Port:                  to.Ptr("443"),
						ProcessServerID:       to.Ptr("5A720CAB-39CB-F445-BD1662B0B33164B5"),
						RunAsAccountID:        to.Ptr("2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VCenterCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VCenterCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationvCenters_ListByReplicationFabrics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationvCenters_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationvCenters_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the details of a vCenter."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationvCentersClient("MadhaviVault",
		"MadhaviVRG",
		"7c943c1b-5122-4097-90c8-861411bdd574", cred, &options)
	res, err := client.Get(ctx,
		"MadhaviFabric",
		"esx-78",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationvCenters_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.VCenter{
			Name: to.Ptr("esx-78"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationvCenters"),
			ID:   to.Ptr("/Subscriptions/7c943c1b-5122-4097-90c8-861411bdd574/resourceGroups/MadhaviVRG/providers/Microsoft.RecoveryServices/vaults/MadhaviVault/replicationFabrics/239f778f368e34f78216d81f030725cdf2033174b47879b9f2eeede06fdd9c4d/replicationvCenters/esx-78"),
			Properties: &armrecoveryservicessiterecovery.VCenterProperties{
				DiscoveryStatus:       to.Ptr("Pending"),
				FabricArmResourceName: to.Ptr("239f778f368e34f78216d81f030725cdf2033174b47879b9f2eeede06fdd9c4d"),
				FriendlyName:          to.Ptr("esx-78"),
				InternalID:            to.Ptr("inmtest78"),
				IPAddress:             to.Ptr("inmtest78"),
				Port:                  to.Ptr("443"),
				ProcessServerID:       to.Ptr("5A720CAB-39CB-F445-BD1662B0B33164B5"),
				RunAsAccountID:        to.Ptr("2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VCenter) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VCenter)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationvCenters_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationvCenters_Create(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationvCenters_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Add vCenter."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationvCentersClient("MadhaviVault",
		"MadhaviVRG",
		"7c943c1b-5122-4097-90c8-861411bdd574", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"MadhaviFabric",
		"esx-78",
		armrecoveryservicessiterecovery.AddVCenterRequest{
			Properties: &armrecoveryservicessiterecovery.AddVCenterRequestProperties{
				FriendlyName:    to.Ptr("esx-78"),
				IPAddress:       to.Ptr("inmtest78"),
				Port:            to.Ptr("443"),
				ProcessServerID: to.Ptr("5A720CAB-39CB-F445-BD1662B0B33164B5"),
				RunAsAccountID:  to.Ptr("2"),
			},
		},
		&armrecoveryservicessiterecovery.ReplicationvCentersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationvCenters_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationvCenters_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.VCenter{
			Name: to.Ptr("esx-78"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationvCenters"),
			ID:   to.Ptr("/Subscriptions/7c943c1b-5122-4097-90c8-861411bdd574/resourceGroups/MadhaviVRG/providers/Microsoft.RecoveryServices/vaults/MadhaviVault/replicationFabrics/239f778f368e34f78216d81f030725cdf2033174b47879b9f2eeede06fdd9c4d/replicationvCenters/esx-78"),
			Properties: &armrecoveryservicessiterecovery.VCenterProperties{
				DiscoveryStatus:       to.Ptr("Pending"),
				FabricArmResourceName: to.Ptr("239f778f368e34f78216d81f030725cdf2033174b47879b9f2eeede06fdd9c4d"),
				FriendlyName:          to.Ptr("esx-78"),
				InternalID:            to.Ptr("inmtest78"),
				IPAddress:             to.Ptr("inmtest78"),
				Port:                  to.Ptr("443"),
				ProcessServerID:       to.Ptr("5A720CAB-39CB-F445-BD1662B0B33164B5"),
				RunAsAccountID:        to.Ptr("2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VCenter) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VCenter)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationvCenters_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationvCenters_Delete(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationvCenters_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Remove vCenter operation."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationvCentersClient("MadhaviVault",
		"MadhaviVRG",
		"7c943c1b-5122-4097-90c8-861411bdd574", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"MadhaviFabric",
		"esx-78",
		&armrecoveryservicessiterecovery.ReplicationvCentersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationvCenters_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationvCenters_Delete.json: %v", err)
	}
}

func TestReplicationvCenters_Update(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationvCenters_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update vCenter operation."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationvCentersClient("MadhaviVault",
		"MadhaviVRG",
		"7c943c1b-5122-4097-90c8-861411bdd574", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"MadhaviFabric",
		"esx-78",
		armrecoveryservicessiterecovery.UpdateVCenterRequest{
			Properties: &armrecoveryservicessiterecovery.UpdateVCenterRequestProperties{
				IPAddress: to.Ptr("10.150.109.25"),
			},
		},
		&armrecoveryservicessiterecovery.ReplicationvCentersClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationvCenters_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationvCenters_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.VCenter{
			Name: to.Ptr("esx-78"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationvCenters"),
			ID:   to.Ptr("/Subscriptions/7c943c1b-5122-4097-90c8-861411bdd574/resourceGroups/MadhaviVRG/providers/Microsoft.RecoveryServices/vaults/MadhaviVault/replicationFabrics/239f778f368e34f78216d81f030725cdf2033174b47879b9f2eeede06fdd9c4d/replicationvCenters/esx-78"),
			Properties: &armrecoveryservicessiterecovery.VCenterProperties{
				DiscoveryStatus:       to.Ptr("Pending"),
				FabricArmResourceName: to.Ptr("239f778f368e34f78216d81f030725cdf2033174b47879b9f2eeede06fdd9c4d"),
				FriendlyName:          to.Ptr("esx-78"),
				InternalID:            to.Ptr("inmtest78"),
				IPAddress:             to.Ptr("10.150.109.25"),
				Port:                  to.Ptr("443"),
				ProcessServerID:       to.Ptr("5A720CAB-39CB-F445-BD1662B0B33164B5"),
				RunAsAccountID:        to.Ptr("2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VCenter) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VCenter)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationvCenters_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationvCenters_List(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationvCenters_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of vCenter registered under the vault."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationvCentersClient("MadhaviVault",
		"MadhaviVRG",
		"7c943c1b-5122-4097-90c8-861411bdd574", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationvCenters_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.VCenterCollection{
			Value: []*armrecoveryservicessiterecovery.VCenter{
				{
					Name: to.Ptr("esx-78"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationFabrics/replicationvCenters"),
					ID:   to.Ptr("/Subscriptions/7c943c1b-5122-4097-90c8-861411bdd574/resourceGroups/MadhaviVRG/providers/Microsoft.RecoveryServices/vaults/MadhaviVault/replicationFabrics/239f778f368e34f78216d81f030725cdf2033174b47879b9f2eeede06fdd9c4d/replicationvCenters/esx-78"),
					Properties: &armrecoveryservicessiterecovery.VCenterProperties{
						DiscoveryStatus:       to.Ptr("Pending"),
						FabricArmResourceName: to.Ptr("239f778f368e34f78216d81f030725cdf2033174b47879b9f2eeede06fdd9c4d"),
						FriendlyName:          to.Ptr("esx-78"),
						InternalID:            to.Ptr("inmtest78"),
						IPAddress:             to.Ptr("inmtest78"),
						Port:                  to.Ptr("443"),
						ProcessServerID:       to.Ptr("5A720CAB-39CB-F445-BD1662B0B33164B5"),
						RunAsAccountID:        to.Ptr("2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VCenterCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VCenterCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationvCenters_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationJobs_List(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationJobs_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of jobs."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationJobsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	pager := client.List(&armrecoveryservicessiterecovery.ReplicationJobsClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationJobs_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.JobCollection{
			Value: []*armrecoveryservicessiterecovery.Job{
				{
					Name: to.Ptr("1557d73f-6244-491e-8f0b-d300f752240b"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/1557d73f-6244-491e-8f0b-d300f752240b"),
					Properties: &armrecoveryservicessiterecovery.JobProperties{
						AllowedActions:     []*string{},
						EndTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T12:46:11Z"); return t }()),
						Errors:             []*armrecoveryservicessiterecovery.JobErrorDetails{},
						FriendlyName:       to.Ptr("Create replication policy"),
						ScenarioName:       to.Ptr("AddProtectionProfile"),
						StartTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T12:46:04.641851Z"); return t }()),
						State:              to.Ptr("Succeeded"),
						StateDescription:   to.Ptr("Completed"),
						TargetInstanceType: to.Ptr("ProtectionProfile"),
						TargetObjectID:     to.Ptr("af095a1e-1f1b-5365-87c9-99162ebcfaf0"),
						TargetObjectName:   to.Ptr("protectionprofile1"),
						Tasks:              []*armrecoveryservicessiterecovery.ASRTask{},
					},
				},
				{
					Name: to.Ptr("0236416a-7573-4913-a4a1-6a286fbb1ceb"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/0236416a-7573-4913-a4a1-6a286fbb1ceb"),
					Properties: &armrecoveryservicessiterecovery.JobProperties{
						AllowedActions:     []*string{},
						EndTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-02T14:07:21Z"); return t }()),
						Errors:             []*armrecoveryservicessiterecovery.JobErrorDetails{},
						FriendlyName:       to.Ptr("Register the Azure Site Recovery Provider"),
						ScenarioName:       to.Ptr("RegisterDra"),
						StartTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-02T14:07:19.2784338Z"); return t }()),
						State:              to.Ptr("Succeeded"),
						StateDescription:   to.Ptr("Completed"),
						TargetInstanceType: to.Ptr("Server"),
						TargetObjectID:     to.Ptr("6d224fc6-f326-5d35-96de-fbf51efb3179"),
						TargetObjectName:   to.Ptr("CP-B3L40406-12.ntdev.corp.microsoft.com"),
						Tasks:              []*armrecoveryservicessiterecovery.ASRTask{},
					},
				},
				{
					Name: to.Ptr("2438d560-80f0-420b-839e-5c8ee0af90a1"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/2438d560-80f0-420b-839e-5c8ee0af90a1"),
					Properties: &armrecoveryservicessiterecovery.JobProperties{
						AllowedActions:     []*string{},
						EndTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-02T05:56:16Z"); return t }()),
						Errors:             []*armrecoveryservicessiterecovery.JobErrorDetails{},
						FriendlyName:       to.Ptr("Create a site"),
						ScenarioName:       to.Ptr("CreateSite"),
						StartTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-02T05:56:14.569095Z"); return t }()),
						State:              to.Ptr("Succeeded"),
						StateDescription:   to.Ptr("Completed"),
						TargetInstanceType: to.Ptr("Server"),
						TargetObjectID:     to.Ptr("6d224fc6-f326-5d35-96de-fbf51efb3179"),
						TargetObjectName:   to.Ptr("cloud1"),
						Tasks:              []*armrecoveryservicessiterecovery.ASRTask{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationJobs_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationJobs_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationJobs_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the job details."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationJobsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	res, err := client.Get(ctx,
		"58776d0b-3141-48b2-a377-9ad863eb160d",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationJobs_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.Job{
			Name: to.Ptr("32ea4b9e-de62-49a1-b062-7864d5c3b897"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/32ea4b9e-de62-49a1-b062-7864d5c3b897"),
			Properties: &armrecoveryservicessiterecovery.JobProperties{
				ActivityID:     to.Ptr("fc8e9c8f-0e76-4b6b-8e7e-d37c1b31eba0 ActivityId: c506b6ba-0711-411e-8b09-1f3f4dcb824b"),
				AllowedActions: []*string{},
				CustomDetails: &armrecoveryservicessiterecovery.AsrJobDetails{
					AffectedObjectDetails: map[string]*string{
						"PrimaryFabricProviderId":  to.Ptr("HyperVSite"),
						"PrimaryVmmId":             to.Ptr("6d224fc6-f326-5d35-96de-fbf51efb3179"),
						"PrimaryVmmName":           to.Ptr("cloud1"),
						"RecoveryFabricProviderId": to.Ptr("Azure"),
						"RecoveryVmmId":            to.Ptr("21a9403c-6ec1-44f2-b744-b4e50b792387"),
					},
					InstanceType: to.Ptr("AsrJobDetails"),
				},
				EndTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T11:25:57Z"); return t }()),
				Errors:             []*armrecoveryservicessiterecovery.JobErrorDetails{},
				FriendlyName:       to.Ptr("Delete a recovery plan"),
				ScenarioName:       to.Ptr("DeleteRecoveryPlan"),
				StartTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T11:25:56.800358Z"); return t }()),
				State:              to.Ptr("Succeeded"),
				StateDescription:   to.Ptr("Completed"),
				TargetInstanceType: to.Ptr("RecoveryPlan"),
				TargetObjectID:     to.Ptr("966c33bb-66e7-4567-9786-f80b0694f5f9"),
				TargetObjectName:   to.Ptr("RPtest1"),
				Tasks: []*armrecoveryservicessiterecovery.ASRTask{
					{
						Name:           to.Ptr("DeleteRecoveryPlanTask"),
						AllowedActions: []*string{},
						CustomDetails: &armrecoveryservicessiterecovery.ManualActionTaskDetails{
							InstanceType: to.Ptr("ManualActionTaskDetails"),
						},
						EndTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T11:25:57.318574Z"); return t }()),
						Errors:           []*armrecoveryservicessiterecovery.JobErrorDetails{},
						FriendlyName:     to.Ptr("Delete a recovery plan task"),
						StartTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T11:25:57.3029434Z"); return t }()),
						State:            to.Ptr("Succeeded"),
						StateDescription: to.Ptr("Completed"),
						TaskID:           to.Ptr("763326a2-01c9-4257-b2a1-0aac56465014"),
						TaskType:         to.Ptr("TaskDetails"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Job) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Job)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationJobs_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationJobs_Cancel(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationJobs_Cancel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Cancels the specified job."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationJobsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginCancel(ctx,
		"2653c648-fc72-4316-86f3-fdf8eaa0066b",
		&armrecoveryservicessiterecovery.ReplicationJobsClientBeginCancelOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationJobs_Cancel.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationJobs_Cancel.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.Job{
			Name: to.Ptr("2653c648-fc72-4316-86f3-fdf8eaa0066b"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/2653c648-fc72-4316-86f3-fdf8eaa0066b"),
			Properties: &armrecoveryservicessiterecovery.JobProperties{
				ActivityID:     to.Ptr("bfbbf6dd-9cbb-4cbc-98a6-faecc8891579 ActivityId: 07cc35ca-b63f-4e42-83c9-81ae0191c322"),
				AllowedActions: []*string{},
				CustomDetails: &armrecoveryservicessiterecovery.AsrJobDetails{
					AffectedObjectDetails: map[string]*string{
						"PrimaryCloudId":           to.Ptr("cloud_6d224fc6-f326-5d35-96de-fbf51efb3179"),
						"PrimaryCloudName":         to.Ptr("cloud1"),
						"PrimaryFabricProviderId":  to.Ptr("HyperVSite"),
						"PrimaryVmId":              to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
						"PrimaryVmName":            to.Ptr("vm1"),
						"PrimaryVmmId":             to.Ptr("6d224fc6-f326-5d35-96de-fbf51efb3179"),
						"PrimaryVmmName":           to.Ptr("cloud1"),
						"ProtectionProfileId":      to.Ptr("af095a1e-1f1b-5365-87c9-99162ebcfaf0"),
						"RecoveryCloudId":          to.Ptr("d38048d4-b460-4791-8ece-108395ee8478"),
						"RecoveryCloudName":        to.Ptr("Microsoft Azure"),
						"RecoveryFabricProviderId": to.Ptr("Azure"),
						"RecoveryVmId":             to.Ptr(""),
						"RecoveryVmName":           to.Ptr("vm1"),
						"RecoveryVmmId":            to.Ptr("21a9403c-6ec1-44f2-b744-b4e50b792387"),
						"RecoveryVmmName":          to.Ptr("Microsoft Azure"),
					},
					InstanceType: to.Ptr("AsrJobDetails"),
				},
				Errors:             []*armrecoveryservicessiterecovery.JobErrorDetails{},
				FriendlyName:       to.Ptr("Planned failover"),
				ScenarioName:       to.Ptr("PlannedFailover"),
				StartTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-03T06:16:06.3235186Z"); return t }()),
				State:              to.Ptr("Cancelling"),
				StateDescription:   to.Ptr("Cancelling"),
				TargetInstanceType: to.Ptr("ProtectionEntity"),
				TargetObjectID:     to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
				TargetObjectName:   to.Ptr("vm1"),
				Tasks:              []*armrecoveryservicessiterecovery.ASRTask{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Job) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Job)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationJobs_Cancel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationJobs_Restart(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationJobs_Restart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restarts the specified job."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationJobsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginRestart(ctx,
		"0664564c-353e-401a-ab0c-722257c10e25",
		&armrecoveryservicessiterecovery.ReplicationJobsClientBeginRestartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationJobs_Restart.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationJobs_Restart.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.Job{
			Name: to.Ptr("42c7d13b-790c-4609-8e0b-0936f1c5e5fb"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/42c7d13b-790c-4609-8e0b-0936f1c5e5fb"),
			Properties: &armrecoveryservicessiterecovery.JobProperties{
				ActivityID:     to.Ptr("2443a5b4-e675-499f-8983-4126ea0e232c ActivityId: 2a776896-5e56-470b-af55-3c981283c4bc"),
				AllowedActions: []*string{},
				CustomDetails: &armrecoveryservicessiterecovery.AsrJobDetails{
					AffectedObjectDetails: map[string]*string{},
					InstanceType:          to.Ptr("AsrJobDetails"),
				},
				EndTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-03T10:45:14Z"); return t }()),
				Errors:             []*armrecoveryservicessiterecovery.JobErrorDetails{},
				FriendlyName:       to.Ptr("Restart job"),
				ScenarioName:       to.Ptr("RestartJob"),
				StartTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-03T10:45:12.1320757Z"); return t }()),
				State:              to.Ptr("Succeeded"),
				StateDescription:   to.Ptr("Completed"),
				TargetInstanceType: to.Ptr("ProtectionEntity"),
				TargetObjectID:     to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
				TargetObjectName:   to.Ptr("vm1"),
				Tasks: []*armrecoveryservicessiterecovery.ASRTask{
					{
						Name:           to.Ptr("RemediateTask"),
						AllowedActions: []*string{},
						CustomDetails: &armrecoveryservicessiterecovery.ManualActionTaskDetails{
							InstanceType: to.Ptr("ManualActionTaskDetails"),
						},
						EndTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-03T10:45:13.6458467Z"); return t }()),
						Errors:           []*armrecoveryservicessiterecovery.JobErrorDetails{},
						FriendlyName:     to.Ptr("Restarting job"),
						StartTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-03T10:45:13.5677237Z"); return t }()),
						State:            to.Ptr("Succeeded"),
						StateDescription: to.Ptr("Completed"),
						TaskID:           to.Ptr("RemediateWfTask"),
						TaskType:         to.Ptr("TaskDetails"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Job) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Job)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationJobs_Restart.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationJobs_Resume(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationJobs_Resume.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Resumes the specified job."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationJobsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginResume(ctx,
		"58776d0b-3141-48b2-a377-9ad863eb160d",
		armrecoveryservicessiterecovery.ResumeJobParams{
			Properties: &armrecoveryservicessiterecovery.ResumeJobParamsProperties{
				Comments: to.Ptr(" "),
			},
		},
		&armrecoveryservicessiterecovery.ReplicationJobsClientBeginResumeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationJobs_Resume.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationJobs_Resume.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.Job{
			Name: to.Ptr("58776d0b-3141-48b2-a377-9ad863eb160d"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/58776d0b-3141-48b2-a377-9ad863eb160d"),
			Properties: &armrecoveryservicessiterecovery.JobProperties{
				ActivityID: to.Ptr("1b808dfe-0451-44ac-894c-c7270711cd8c ActivityId: 9f6f849e-922a-43ec-a7a6-0be45fc85c56"),
				AllowedActions: []*string{
					to.Ptr("Cancel"),
					to.Ptr("Resume")},
				CustomDetails: &armrecoveryservicessiterecovery.TestFailoverJobDetails{
					AffectedObjectDetails: map[string]*string{
						"PrimaryCloudId":           to.Ptr("cloud_6d224fc6-f326-5d35-96de-fbf51efb3179"),
						"PrimaryCloudName":         to.Ptr("cloud1"),
						"PrimaryFabricProviderId":  to.Ptr("HyperVSite"),
						"PrimaryVmId":              to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
						"PrimaryVmName":            to.Ptr("vm1"),
						"PrimaryVmmId":             to.Ptr("6d224fc6-f326-5d35-96de-fbf51efb3179"),
						"PrimaryVmmName":           to.Ptr("cloud1"),
						"ProtectionProfileId":      to.Ptr("af095a1e-1f1b-5365-87c9-99162ebcfaf0"),
						"RecoveryCloudId":          to.Ptr("d38048d4-b460-4791-8ece-108395ee8478"),
						"RecoveryCloudName":        to.Ptr("Microsoft Azure"),
						"RecoveryFabricProviderId": to.Ptr("Azure"),
						"RecoveryVmId":             to.Ptr(""),
						"RecoveryVmName":           to.Ptr("vm1"),
						"RecoveryVmmId":            to.Ptr("21a9403c-6ec1-44f2-b744-b4e50b792387"),
						"RecoveryVmmName":          to.Ptr("Microsoft Azure"),
					},
					InstanceType:        to.Ptr("TestFailoverJobDetails"),
					Comments:            to.Ptr(" "),
					NetworkFriendlyName: to.Ptr("vnetavrai"),
					NetworkName:         to.Ptr("vnetavrai"),
					NetworkType:         to.Ptr("VmNetworkAsInput"),
					ProtectedItemDetails: []*armrecoveryservicessiterecovery.FailoverReplicationProtectedItemDetails{
						{
							Name:                    to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
							FriendlyName:            to.Ptr("vm1"),
							NetworkConnectionStatus: to.Ptr("Connected"),
							NetworkFriendlyName:     to.Ptr("vnetavrai"),
							Subnet:                  to.Ptr("Subnet1"),
							TestVMFriendlyName:      to.Ptr("vm1-test"),
							TestVMName:              to.Ptr("vm1-test"),
						}},
					TestFailoverStatus: to.Ptr("Completed"),
				},
				Errors:             []*armrecoveryservicessiterecovery.JobErrorDetails{},
				FriendlyName:       to.Ptr("Test failover"),
				ScenarioName:       to.Ptr("TestFailover"),
				StartTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-25T09:57:57.0357829Z"); return t }()),
				State:              to.Ptr("Suspended"),
				StateDescription:   to.Ptr("WaitingForStopTestFailover"),
				TargetInstanceType: to.Ptr("ProtectionEntity"),
				TargetObjectID:     to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
				TargetObjectName:   to.Ptr("vm1"),
				Tasks:              []*armrecoveryservicessiterecovery.ASRTask{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Job) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Job)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationJobs_Resume.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationJobs_Export(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationJobs_Export.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Exports the details of the Azure Site Recovery jobs of the vault."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationJobsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginExport(ctx,
		armrecoveryservicessiterecovery.JobQueryParameter{
			AffectedObjectTypes: to.Ptr(""),
			EndTime:             to.Ptr("2017-05-04T14:26:51.9161395Z"),
			JobStatus:           to.Ptr(""),
			StartTime:           to.Ptr("2017-04-27T14:26:51.9161395Z"),
		},
		&armrecoveryservicessiterecovery.ReplicationJobsClientBeginExportOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationJobs_Export.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationJobs_Export.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.Job{
			Name: to.Ptr("37e0fc2b-13f2-4817-aafa-0cd807d46842"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/37e0fc2b-13f2-4817-aafa-0cd807d46842"),
			Properties: &armrecoveryservicessiterecovery.JobProperties{
				ActivityID:     to.Ptr("36841d27-34f6-49ad-b572-e7dc263f100b-2017-05-04 14:26:47Z-Ibz ActivityId: c124df21-7661-4541-b32a-3c723ebbb045"),
				AllowedActions: []*string{},
				CustomDetails: &armrecoveryservicessiterecovery.ExportJobDetails{
					AffectedObjectDetails: map[string]*string{},
					InstanceType:          to.Ptr("ExportJobDetails"),
					BlobURI:               to.Ptr("<blobUri>"),
					SasToken:              to.Ptr("<sasToken>"),
				},
				EndTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-04T14:33:43Z"); return t }()),
				Errors:             []*armrecoveryservicessiterecovery.JobErrorDetails{},
				ScenarioName:       to.Ptr("ExportJobs"),
				StartTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-04T14:33:42.2765562Z"); return t }()),
				State:              to.Ptr("Succeeded"),
				StateDescription:   to.Ptr("Completed"),
				TargetInstanceType: to.Ptr("Other"),
				TargetObjectID:     to.Ptr(""),
				TargetObjectName:   to.Ptr(""),
				Tasks:              []*armrecoveryservicessiterecovery.ASRTask{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Job) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Job)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationJobs_Export.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationPolicies_List(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationPolicies_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of replication policies."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationPoliciesClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationPolicies_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.PolicyCollection{
			Value: []*armrecoveryservicessiterecovery.Policy{
				{
					Name: to.Ptr("protectionprofile1"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationPolicies"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
					Properties: &armrecoveryservicessiterecovery.PolicyProperties{
						FriendlyName: to.Ptr("protectionprofile1"),
						ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzurePolicyDetails{
							InstanceType: to.Ptr("HyperVReplicaAzure"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PolicyCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PolicyCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationPolicies_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationPolicies_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationPolicies_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the requested policy."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationPoliciesClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	res, err := client.Get(ctx,
		"protectionprofile1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationPolicies_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.Policy{
			Name: to.Ptr("protectionprofile1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationPolicies"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
			Properties: &armrecoveryservicessiterecovery.PolicyProperties{
				FriendlyName: to.Ptr("protectionprofile1"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzurePolicyDetails{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Policy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Policy)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationPolicies_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationPolicies_Create(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationPolicies_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates the policy."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationPoliciesClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"protectionprofile1",
		armrecoveryservicessiterecovery.CreatePolicyInput{
			Properties: &armrecoveryservicessiterecovery.CreatePolicyInputProperties{
				ProviderSpecificInput: &armrecoveryservicessiterecovery.HyperVReplicaAzurePolicyInput{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationPoliciesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationPolicies_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationPolicies_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.Policy{
			Name: to.Ptr("protectionprofile1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationPolicies"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
			Properties: &armrecoveryservicessiterecovery.PolicyProperties{
				FriendlyName: to.Ptr("protectionprofile1"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzurePolicyDetails{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Policy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Policy)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationPolicies_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationPolicies_Delete(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationPolicies_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete the policy."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationPoliciesClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"protectionprofile1",
		&armrecoveryservicessiterecovery.ReplicationPoliciesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationPolicies_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationPolicies_Delete.json: %v", err)
	}
}

func TestReplicationPolicies_Update(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationPolicies_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates the policy."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationPoliciesClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"protectionprofile1",
		armrecoveryservicessiterecovery.UpdatePolicyInput{
			Properties: &armrecoveryservicessiterecovery.UpdatePolicyInputProperties{
				ReplicationProviderSettings: &armrecoveryservicessiterecovery.HyperVReplicaAzurePolicyInput{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationPoliciesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationPolicies_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationPolicies_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.Policy{
			Name: to.Ptr("protectionprofile1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationPolicies"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/protectionprofile1"),
			Properties: &armrecoveryservicessiterecovery.PolicyProperties{
				FriendlyName: to.Ptr("protectionprofile1"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.HyperVReplicaAzurePolicyDetails{
					InstanceType: to.Ptr("HyperVReplicaAzure"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Policy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Policy)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationPolicies_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectionIntents_List(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionIntents_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of replication protection intent objects."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectionIntentsClient("2007vttp",
		"resourceGroupPS1",
		"509099b2-9d2c-4636-b43e-bd5cafb6be69", cred, &options)
	pager := client.List(&armrecoveryservicessiterecovery.ReplicationProtectionIntentsClientListOptions{SkipToken: nil,
		TakeToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionIntents_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.ReplicationProtectionIntentCollection{
			Value: []*armrecoveryservicessiterecovery.ReplicationProtectionIntent{
				{
					Name: to.Ptr("vm1"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationProtectionIntents"),
					ID:   to.Ptr("/Subscriptions/509099b2-9d2c-4636-b43e-bd5cafb6be69/resourceGroups/2007vttp/providers/Microsoft.RecoveryServices/vaults/tp2007vt/replicationProtectionIntents/vm1"),
					Properties: &armrecoveryservicessiterecovery.ReplicationProtectionIntentProperties{
						FriendlyName: to.Ptr("vm1"),
						JobID:        to.Ptr("/Subscriptions/d90d145a-4cdd-45a3-b2c4-971d69775278/resourceGroups/a2acl-rg-vault-prod-gip-ccy/providers/Microsoft.RecoveryServices/vaults/a2acl-vault-prod-gip-ccy/replicationJobs/02004ea7-d498-4bb4-bdeb-cdb611706867"),
						JobState:     to.Ptr("InProgress"),
						ProviderSpecificDetails: &armrecoveryservicessiterecovery.A2AReplicationIntentDetails{
							InstanceType:             to.Ptr("A2A"),
							FabricObjectID:           to.Ptr("/subscriptions/509099b2-9d2c-4636-b43e-bd5cafb6be69/resourceGroups/removeOne/providers/Microsoft.Compute/virtualMachines/vmPpgAv5"),
							PrimaryLocation:          to.Ptr("eastUs2"),
							RecoveryAvailabilityType: to.Ptr("Single"),
							RecoveryLocation:         to.Ptr("westus2"),
							RecoverySubscriptionID:   to.Ptr("ed5bcdf6-d61e-47bd-8ea9-f2bd379a2640"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReplicationProtectionIntentCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReplicationProtectionIntentCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionIntents_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectionIntents_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionIntents_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the details of a Replication protection intent item."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectionIntentsClient("vault1",
		"resourceGroupPS1",
		"509099b2-9d2c-4636-b43e-bd5cafb6be69", cred, &options)
	res, err := client.Get(ctx,
		"vm1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionIntents_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ReplicationProtectionIntent{
			Name: to.Ptr("vm1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationProtectionIntents"),
			ID:   to.Ptr("/Subscriptions/509099b2-9d2c-4636-b43e-bd5cafb6be69/resourceGroups/2007vttp/providers/Microsoft.RecoveryServices/vaults/tp2007vt/replicationProtectionIntents/vm1"),
			Properties: &armrecoveryservicessiterecovery.ReplicationProtectionIntentProperties{
				FriendlyName: to.Ptr("vm1"),
				JobID:        to.Ptr("/Subscriptions/d90d145a-4cdd-45a3-b2c4-971d69775278/resourceGroups/a2acl-rg-vault-prod-gip-ccy/providers/Microsoft.RecoveryServices/vaults/a2acl-vault-prod-gip-ccy/replicationJobs/02004ea7-d498-4bb4-bdeb-cdb611706867"),
				JobState:     to.Ptr("InProgress"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.A2AReplicationIntentDetails{
					InstanceType:             to.Ptr("A2A"),
					FabricObjectID:           to.Ptr("/subscriptions/509099b2-9d2c-4636-b43e-bd5cafb6be69/resourceGroups/removeOne/providers/Microsoft.Compute/virtualMachines/vmPpgAv5"),
					PrimaryLocation:          to.Ptr("eastUs2"),
					RecoveryAvailabilityType: to.Ptr("Single"),
					RecoveryLocation:         to.Ptr("westus2"),
					RecoverySubscriptionID:   to.Ptr("ed5bcdf6-d61e-47bd-8ea9-f2bd379a2640"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationProtectionIntent) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationProtectionIntent)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionIntents_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationProtectionIntents_Create(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionIntents_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create protection intent Resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationProtectionIntentsClient("vault1",
		"resourceGroupPS1",
		"509099b2-9d2c-4636-b43e-bd5cafb6be69", cred, &options)
	res, err := client.Create(ctx,
		"vm1",
		armrecoveryservicessiterecovery.CreateProtectionIntentInput{
			Properties: &armrecoveryservicessiterecovery.CreateProtectionIntentProperties{
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.A2ACreateProtectionIntentInput{
					InstanceType:             to.Ptr("A2A"),
					FabricObjectID:           to.Ptr("/subscriptions/509099b2-9d2c-4636-b43e-bd5cafb6be69/resourceGroups/removeOne/providers/Microsoft.Compute/virtualMachines/vmPpgAv5"),
					PrimaryLocation:          to.Ptr("eastUs2"),
					RecoveryAvailabilityType: to.Ptr(armrecoveryservicessiterecovery.A2ARecoveryAvailabilityTypeSingle),
					RecoveryLocation:         to.Ptr("westus2"),
					RecoveryResourceGroupID:  to.Ptr("/subscriptions/509099b2-9d2c-4636-b43e-bd5cafb6be69/resourceGroups/removeOne-asr"),
					RecoverySubscriptionID:   to.Ptr("ed5bcdf6-d61e-47bd-8ea9-f2bd379a2640"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionIntents_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.ReplicationProtectionIntent{
			Name: to.Ptr("vm1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationProtectionIntents"),
			ID:   to.Ptr("/Subscriptions/509099b2-9d2c-4636-b43e-bd5cafb6be69/resourceGroups/2007vttp/providers/Microsoft.RecoveryServices/vaults/tp2007vt/replicationProtectionIntents/vm1"),
			Properties: &armrecoveryservicessiterecovery.ReplicationProtectionIntentProperties{
				FriendlyName: to.Ptr("vm1"),
				JobID:        to.Ptr("/Subscriptions/d90d145a-4cdd-45a3-b2c4-971d69775278/resourceGroups/a2acl-rg-vault-prod-gip-ccy/providers/Microsoft.RecoveryServices/vaults/a2acl-vault-prod-gip-ccy/replicationJobs/02004ea7-d498-4bb4-bdeb-cdb611706867"),
				JobState:     to.Ptr("InProgress"),
				ProviderSpecificDetails: &armrecoveryservicessiterecovery.A2AReplicationIntentDetails{
					InstanceType:             to.Ptr("A2A"),
					RecoveryAvailabilityType: to.Ptr("Single"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationProtectionIntent) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationProtectionIntent)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationProtectionIntents_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationRecoveryPlans_List(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of recovery plans."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationRecoveryPlansClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.RecoveryPlanCollection{
			Value: []*armrecoveryservicessiterecovery.RecoveryPlan{
				{
					Name: to.Ptr("RPtest1"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationRecoveryPlans"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationRecoveryPlans/RPtest1"),
					Properties: &armrecoveryservicessiterecovery.RecoveryPlanProperties{
						AllowedOperations: []*string{
							to.Ptr("PlannedFailover"),
							to.Ptr("UnplannedFailover"),
							to.Ptr("TestFailover")},
						FailoverDeploymentModel:    to.Ptr("ResourceManager"),
						FriendlyName:               to.Ptr("RPtest1"),
						Groups:                     []*armrecoveryservicessiterecovery.RecoveryPlanGroup{},
						PrimaryFabricFriendlyName:  to.Ptr("cloud1"),
						PrimaryFabricID:            to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1"),
						RecoveryFabricFriendlyName: to.Ptr("Microsoft Azure"),
						RecoveryFabricID:           to.Ptr("Microsoft Azure"),
						ReplicationProviders: []*string{
							to.Ptr("HyperVReplicaAzure")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecoveryPlanCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecoveryPlanCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationRecoveryPlans_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the requested recovery plan."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationRecoveryPlansClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	res, err := client.Get(ctx,
		"RPtest1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.RecoveryPlan{
			Name: to.Ptr("RPtest1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationRecoveryPlans"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationRecoveryPlans/RPtest1"),
			Properties: &armrecoveryservicessiterecovery.RecoveryPlanProperties{
				AllowedOperations: []*string{
					to.Ptr("PlannedFailover"),
					to.Ptr("UnplannedFailover"),
					to.Ptr("TestFailover")},
				FailoverDeploymentModel: to.Ptr("ResourceManager"),
				FriendlyName:            to.Ptr("RPtest1"),
				Groups: []*armrecoveryservicessiterecovery.RecoveryPlanGroup{
					{
						EndGroupActions:           []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:                 to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeShutdown),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{},
						StartGroupActions:         []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions:           []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:                 to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeFailover),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{},
						StartGroupActions:         []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:       to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeBoot),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{
							{
								ID:               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
								VirtualMachineID: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
							}},
						StartGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:       to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeBoot),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{
							{
								ID:               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/c0c14913-3d7a-48ea-9531-cc99e0e686e6"),
								VirtualMachineID: to.Ptr("c0c14913-3d7a-48ea-9531-cc99e0e686e6"),
							}},
						StartGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					}},
				PrimaryFabricFriendlyName:  to.Ptr("cloud1"),
				PrimaryFabricID:            to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1"),
				RecoveryFabricFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryFabricID:           to.Ptr("Microsoft Azure"),
				ReplicationProviders: []*string{
					to.Ptr("HyperVReplicaAzure")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecoveryPlan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecoveryPlan)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationRecoveryPlans_Create(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a recovery plan with the given details."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationRecoveryPlansClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"RPtest1",
		armrecoveryservicessiterecovery.CreateRecoveryPlanInput{
			Properties: &armrecoveryservicessiterecovery.CreateRecoveryPlanInputProperties{
				FailoverDeploymentModel: to.Ptr(armrecoveryservicessiterecovery.FailoverDeploymentModelResourceManager),
				Groups: []*armrecoveryservicessiterecovery.RecoveryPlanGroup{
					{
						EndGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:       to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeBoot),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{
							{
								ID:               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
								VirtualMachineID: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
							}},
						StartGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					}},
				PrimaryFabricID:  to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1"),
				RecoveryFabricID: to.Ptr("Microsoft Azure"),
			},
		},
		&armrecoveryservicessiterecovery.ReplicationRecoveryPlansClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.RecoveryPlan{
			Name: to.Ptr("RPtest1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationRecoveryPlans"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationRecoveryPlans/RPtest1"),
			Properties: &armrecoveryservicessiterecovery.RecoveryPlanProperties{
				AllowedOperations: []*string{
					to.Ptr("PlannedFailover"),
					to.Ptr("UnplannedFailover"),
					to.Ptr("TestFailover")},
				FailoverDeploymentModel: to.Ptr("ResourceManager"),
				FriendlyName:            to.Ptr("RPtest1"),
				Groups: []*armrecoveryservicessiterecovery.RecoveryPlanGroup{
					{
						EndGroupActions:           []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:                 to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeShutdown),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{},
						StartGroupActions:         []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions:           []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:                 to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeFailover),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{},
						StartGroupActions:         []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:       to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeBoot),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{
							{
								ID:               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
								VirtualMachineID: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
							}},
						StartGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					}},
				PrimaryFabricFriendlyName:  to.Ptr("cloud1"),
				PrimaryFabricID:            to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1"),
				RecoveryFabricFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryFabricID:           to.Ptr("Microsoft Azure"),
				ReplicationProviders: []*string{
					to.Ptr("HyperVReplicaAzure")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecoveryPlan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecoveryPlan)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationRecoveryPlans_Delete(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes the specified recovery plan."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationRecoveryPlansClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"RPtest1",
		&armrecoveryservicessiterecovery.ReplicationRecoveryPlansClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_Delete.json: %v", err)
	}
}

func TestReplicationRecoveryPlans_Update(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates the given recovery plan."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationRecoveryPlansClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"RPtest1",
		armrecoveryservicessiterecovery.UpdateRecoveryPlanInput{
			Properties: &armrecoveryservicessiterecovery.UpdateRecoveryPlanInputProperties{
				Groups: []*armrecoveryservicessiterecovery.RecoveryPlanGroup{
					{
						EndGroupActions:           []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:                 to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeShutdown),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{},
						StartGroupActions:         []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions:           []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:                 to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeFailover),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{},
						StartGroupActions:         []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:       to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeBoot),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{
							{
								ID:               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
								VirtualMachineID: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
							}},
						StartGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:       to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeBoot),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{
							{
								ID:               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/c0c14913-3d7a-48ea-9531-cc99e0e686e6"),
								VirtualMachineID: to.Ptr("c0c14913-3d7a-48ea-9531-cc99e0e686e6"),
							}},
						StartGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					}},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationRecoveryPlansClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.RecoveryPlan{
			Name: to.Ptr("RPtest1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationRecoveryPlans"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationRecoveryPlans/RPtest1"),
			Properties: &armrecoveryservicessiterecovery.RecoveryPlanProperties{
				AllowedOperations: []*string{
					to.Ptr("PlannedFailover"),
					to.Ptr("UnplannedFailover"),
					to.Ptr("TestFailover")},
				FailoverDeploymentModel: to.Ptr("ResourceManager"),
				FriendlyName:            to.Ptr("RPtest1"),
				Groups: []*armrecoveryservicessiterecovery.RecoveryPlanGroup{
					{
						EndGroupActions:           []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:                 to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeShutdown),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{},
						StartGroupActions:         []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions:           []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:                 to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeFailover),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{},
						StartGroupActions:         []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:       to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeBoot),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{
							{
								ID:               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
								VirtualMachineID: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
							}},
						StartGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:       to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeBoot),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{
							{
								ID:               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/c0c14913-3d7a-48ea-9531-cc99e0e686e6"),
								VirtualMachineID: to.Ptr("c0c14913-3d7a-48ea-9531-cc99e0e686e6"),
							}},
						StartGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					}},
				PrimaryFabricFriendlyName:  to.Ptr("cloud1"),
				PrimaryFabricID:            to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1"),
				RecoveryFabricFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryFabricID:           to.Ptr("Microsoft Azure"),
				ReplicationProviders: []*string{
					to.Ptr("HyperVReplicaAzure")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecoveryPlan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecoveryPlan)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationRecoveryPlans_FailoverCancel(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_FailoverCancel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute cancel failover of the recovery plan."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationRecoveryPlansClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginFailoverCancel(ctx,
		"RPtest1",
		&armrecoveryservicessiterecovery.ReplicationRecoveryPlansClientBeginFailoverCancelOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_FailoverCancel.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_FailoverCancel.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.RecoveryPlan{
			Name: to.Ptr("RPtest1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationRecoveryPlans"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationRecoveryPlans/RPtest1"),
			Properties: &armrecoveryservicessiterecovery.RecoveryPlanProperties{
				AllowedOperations: []*string{
					to.Ptr("PlannedFailover")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/5276a7bc-12a3-43a1-bc53-9bf80e0be87b"),
					ScenarioName: to.Ptr("CancelFailover"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-24T08:52:42.1587592Z"); return t }()),
				},
				CurrentScenarioStatus:            to.Ptr("Succeeded"),
				CurrentScenarioStatusDescription: to.Ptr("Completed"),
				FailoverDeploymentModel:          to.Ptr("ResourceManager"),
				FriendlyName:                     to.Ptr("RPtest1"),
				Groups:                           []*armrecoveryservicessiterecovery.RecoveryPlanGroup{},
				LastPlannedFailoverTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-24T07:33:49.1372448Z"); return t }()),
				LastTestFailoverTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1601-01-01T00:00:00.0000000Z"); return t }()),
				PrimaryFabricFriendlyName:        to.Ptr("cloud1"),
				PrimaryFabricID:                  to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1"),
				RecoveryFabricFriendlyName:       to.Ptr("cloud1"),
				RecoveryFabricID:                 to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1"),
				ReplicationProviders: []*string{
					to.Ptr("InMageRcmFailback")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecoveryPlan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecoveryPlan)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_FailoverCancel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationRecoveryPlans_FailoverCommit(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_FailoverCommit.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute commit failover of the recovery plan."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationRecoveryPlansClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginFailoverCommit(ctx,
		"RPtest1",
		&armrecoveryservicessiterecovery.ReplicationRecoveryPlansClientBeginFailoverCommitOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_FailoverCommit.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_FailoverCommit.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.RecoveryPlan{
			Name: to.Ptr("RPtest1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationRecoveryPlans"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationRecoveryPlans/RPtest1"),
			Properties: &armrecoveryservicessiterecovery.RecoveryPlanProperties{
				AllowedOperations: []*string{
					to.Ptr("PlannedFailover"),
					to.Ptr("UnplannedFailover"),
					to.Ptr("TestFailover")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/5276a7bc-12a3-43a1-bc53-9bf80e0be87b"),
					ScenarioName: to.Ptr("CommitFailover"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T08:52:42.1587592Z"); return t }()),
				},
				CurrentScenarioStatus:            to.Ptr("Succeeded"),
				CurrentScenarioStatusDescription: to.Ptr("Completed"),
				FailoverDeploymentModel:          to.Ptr("ResourceManager"),
				FriendlyName:                     to.Ptr("RPtest1"),
				Groups: []*armrecoveryservicessiterecovery.RecoveryPlanGroup{
					{
						EndGroupActions:           []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:                 to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeShutdown),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{},
						StartGroupActions:         []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions:           []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:                 to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeFailover),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{},
						StartGroupActions:         []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:       to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeBoot),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{
							{
								ID:               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
								VirtualMachineID: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
							}},
						StartGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:       to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeBoot),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{
							{
								ID:               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/c0c14913-3d7a-48ea-9531-cc99e0e686e6"),
								VirtualMachineID: to.Ptr("c0c14913-3d7a-48ea-9531-cc99e0e686e6"),
							}},
						StartGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					}},
				LastPlannedFailoverTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T07:33:49.1372448Z"); return t }()),
				LastTestFailoverTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T07:00:27.8354747Z"); return t }()),
				PrimaryFabricFriendlyName:  to.Ptr("cloud1"),
				PrimaryFabricID:            to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1"),
				RecoveryFabricFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryFabricID:           to.Ptr("Microsoft Azure"),
				ReplicationProviders: []*string{
					to.Ptr("HyperVReplicaAzure")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecoveryPlan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecoveryPlan)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_FailoverCommit.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationRecoveryPlans_PlannedFailover(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_PlannedFailover.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute planned failover of the recovery plan."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationRecoveryPlansClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginPlannedFailover(ctx,
		"RPtest1",
		armrecoveryservicessiterecovery.RecoveryPlanPlannedFailoverInput{
			Properties: &armrecoveryservicessiterecovery.RecoveryPlanPlannedFailoverInputProperties{
				FailoverDirection: to.Ptr(armrecoveryservicessiterecovery.PossibleOperationsDirectionsPrimaryToRecovery),
				ProviderSpecificDetails: []armrecoveryservicessiterecovery.RecoveryPlanProviderSpecificFailoverInputClassification{
					&armrecoveryservicessiterecovery.RecoveryPlanHyperVReplicaAzureFailoverInput{
						InstanceType: to.Ptr("HyperVReplicaAzure"),
					}},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationRecoveryPlansClientBeginPlannedFailoverOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_PlannedFailover.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_PlannedFailover.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.RecoveryPlan{
			Name: to.Ptr("RPtest1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationRecoveryPlans"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationRecoveryPlans/RPtest1"),
			Properties: &armrecoveryservicessiterecovery.RecoveryPlanProperties{
				AllowedOperations: []*string{
					to.Ptr("PlannedFailover"),
					to.Ptr("UnplannedFailover"),
					to.Ptr("TestFailover"),
					to.Ptr("Commit")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/d4821a53-90da-4fcb-bc11-a280d13e3350"),
					ScenarioName: to.Ptr("PlannedFailover"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T07:34:02.6176524Z"); return t }()),
				},
				CurrentScenarioStatus:            to.Ptr("Succeeded"),
				CurrentScenarioStatusDescription: to.Ptr("Completed"),
				FailoverDeploymentModel:          to.Ptr("ResourceManager"),
				FriendlyName:                     to.Ptr("RPtest1"),
				Groups: []*armrecoveryservicessiterecovery.RecoveryPlanGroup{
					{
						EndGroupActions:           []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:                 to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeShutdown),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{},
						StartGroupActions:         []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions:           []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:                 to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeFailover),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{},
						StartGroupActions:         []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:       to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeBoot),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{
							{
								ID:               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
								VirtualMachineID: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
							}},
						StartGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:       to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeBoot),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{
							{
								ID:               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/c0c14913-3d7a-48ea-9531-cc99e0e686e6"),
								VirtualMachineID: to.Ptr("c0c14913-3d7a-48ea-9531-cc99e0e686e6"),
							}},
						StartGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					}},
				LastPlannedFailoverTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T07:33:49.1372448Z"); return t }()),
				LastTestFailoverTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T07:00:27.8354747Z"); return t }()),
				PrimaryFabricFriendlyName:  to.Ptr("cloud1"),
				PrimaryFabricID:            to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1"),
				RecoveryFabricFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryFabricID:           to.Ptr("Microsoft Azure"),
				ReplicationProviders: []*string{
					to.Ptr("HyperVReplicaAzure")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecoveryPlan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecoveryPlan)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_PlannedFailover.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationRecoveryPlans_Reprotect(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_Reprotect.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute reprotect of the recovery plan."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationRecoveryPlansClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginReprotect(ctx,
		"RPtest1",
		&armrecoveryservicessiterecovery.ReplicationRecoveryPlansClientBeginReprotectOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_Reprotect.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_Reprotect.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.RecoveryPlan{
			Name: to.Ptr("RPtest1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationRecoveryPlans"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationRecoveryPlans/RPtest1"),
			Properties: &armrecoveryservicessiterecovery.RecoveryPlanProperties{
				AllowedOperations: []*string{
					to.Ptr("PlannedFailover"),
					to.Ptr("UnplannedFailover"),
					to.Ptr("TestFailover")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/edf01dfb-b649-4802-91e4-3d55ce3bebf0"),
					ScenarioName: to.Ptr("ReverseReplication"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T09:52:16.9818841Z"); return t }()),
				},
				CurrentScenarioStatus:            to.Ptr("Succeeded"),
				CurrentScenarioStatusDescription: to.Ptr("Completed"),
				FailoverDeploymentModel:          to.Ptr("ResourceManager"),
				FriendlyName:                     to.Ptr("RPtest1"),
				Groups: []*armrecoveryservicessiterecovery.RecoveryPlanGroup{
					{
						EndGroupActions:           []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:                 to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeShutdown),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{},
						StartGroupActions:         []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions:           []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:                 to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeFailover),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{},
						StartGroupActions:         []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:       to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeBoot),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{
							{
								ID:               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
								VirtualMachineID: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
							}},
						StartGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:       to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeBoot),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{
							{
								ID:               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/c0c14913-3d7a-48ea-9531-cc99e0e686e6"),
								VirtualMachineID: to.Ptr("c0c14913-3d7a-48ea-9531-cc99e0e686e6"),
							}},
						StartGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					}},
				LastPlannedFailoverTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T08:58:35.9062813Z"); return t }()),
				LastTestFailoverTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T07:00:27.8354747Z"); return t }()),
				PrimaryFabricFriendlyName:  to.Ptr("cloud1"),
				PrimaryFabricID:            to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1"),
				RecoveryFabricFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryFabricID:           to.Ptr("Microsoft Azure"),
				ReplicationProviders: []*string{
					to.Ptr("HyperVReplicaAzure")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecoveryPlan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecoveryPlan)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_Reprotect.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationRecoveryPlans_TestFailover(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_TestFailover.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute test failover of the recovery plan."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationRecoveryPlansClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginTestFailover(ctx,
		"RPtest1",
		armrecoveryservicessiterecovery.RecoveryPlanTestFailoverInput{
			Properties: &armrecoveryservicessiterecovery.RecoveryPlanTestFailoverInputProperties{
				FailoverDirection: to.Ptr(armrecoveryservicessiterecovery.PossibleOperationsDirectionsPrimaryToRecovery),
				NetworkID:         to.Ptr("/subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/siterecoveryProd1/providers/Microsoft.Network/virtualNetworks/vnetavrai"),
				NetworkType:       to.Ptr("VmNetworkAsInput"),
				ProviderSpecificDetails: []armrecoveryservicessiterecovery.RecoveryPlanProviderSpecificFailoverInputClassification{
					&armrecoveryservicessiterecovery.RecoveryPlanHyperVReplicaAzureFailoverInput{
						InstanceType: to.Ptr("HyperVReplicaAzure"),
					}},
			},
		},
		&armrecoveryservicessiterecovery.ReplicationRecoveryPlansClientBeginTestFailoverOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_TestFailover.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_TestFailover.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.RecoveryPlan{
			Name: to.Ptr("RPtest1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationRecoveryPlans"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationRecoveryPlans/RPtest1"),
			Properties: &armrecoveryservicessiterecovery.RecoveryPlanProperties{
				AllowedOperations: []*string{
					to.Ptr("TestFailoverCleanup")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/d40bfb40-aaaa-4c0d-87d3-41b15439a84b"),
					ScenarioName: to.Ptr("TestFailover"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T07:00:58.8191916Z"); return t }()),
				},
				CurrentScenarioStatus:            to.Ptr("Suspended"),
				CurrentScenarioStatusDescription: to.Ptr("WaitingForStopTestFailover"),
				FailoverDeploymentModel:          to.Ptr("ResourceManager"),
				FriendlyName:                     to.Ptr("RPtest1"),
				Groups: []*armrecoveryservicessiterecovery.RecoveryPlanGroup{
					{
						EndGroupActions:           []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:                 to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeShutdown),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{},
						StartGroupActions:         []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions:           []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:                 to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeFailover),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{},
						StartGroupActions:         []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:       to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeBoot),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{
							{
								ID:               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
								VirtualMachineID: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
							}},
						StartGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:       to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeBoot),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{
							{
								ID:               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/c0c14913-3d7a-48ea-9531-cc99e0e686e6"),
								VirtualMachineID: to.Ptr("c0c14913-3d7a-48ea-9531-cc99e0e686e6"),
							}},
						StartGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					}},
				PrimaryFabricFriendlyName:  to.Ptr("cloud1"),
				PrimaryFabricID:            to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1"),
				RecoveryFabricFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryFabricID:           to.Ptr("Microsoft Azure"),
				ReplicationProviders: []*string{
					to.Ptr("HyperVReplicaAzure")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecoveryPlan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecoveryPlan)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_TestFailover.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationRecoveryPlans_TestFailoverCleanup(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_TestFailoverCleanup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute test failover cleanup of the recovery plan."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationRecoveryPlansClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginTestFailoverCleanup(ctx,
		"RPtest1",
		armrecoveryservicessiterecovery.RecoveryPlanTestFailoverCleanupInput{
			Properties: &armrecoveryservicessiterecovery.RecoveryPlanTestFailoverCleanupInputProperties{
				Comments: to.Ptr("Test Failover Cleanup"),
			},
		},
		&armrecoveryservicessiterecovery.ReplicationRecoveryPlansClientBeginTestFailoverCleanupOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_TestFailoverCleanup.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_TestFailoverCleanup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.RecoveryPlan{
			Name: to.Ptr("RPtest1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationRecoveryPlans"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationRecoveryPlans/RPtest1"),
			Properties: &armrecoveryservicessiterecovery.RecoveryPlanProperties{
				AllowedOperations: []*string{
					to.Ptr("PlannedFailover"),
					to.Ptr("UnplannedFailover"),
					to.Ptr("TestFailover")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/4ae8eaa8-a384-42cb-9768-152cb5b8a1ff"),
					ScenarioName: to.Ptr("TestFailoverCleanup"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T07:10:52.8424747Z"); return t }()),
				},
				CurrentScenarioStatus:            to.Ptr("Succeeded"),
				CurrentScenarioStatusDescription: to.Ptr("Completed"),
				FailoverDeploymentModel:          to.Ptr("ResourceManager"),
				FriendlyName:                     to.Ptr("RPtest1"),
				Groups: []*armrecoveryservicessiterecovery.RecoveryPlanGroup{
					{
						EndGroupActions:           []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:                 to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeShutdown),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{},
						StartGroupActions:         []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions:           []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:                 to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeFailover),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{},
						StartGroupActions:         []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:       to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeBoot),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{
							{
								ID:               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
								VirtualMachineID: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
							}},
						StartGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:       to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeBoot),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{
							{
								ID:               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/c0c14913-3d7a-48ea-9531-cc99e0e686e6"),
								VirtualMachineID: to.Ptr("c0c14913-3d7a-48ea-9531-cc99e0e686e6"),
							}},
						StartGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					}},
				LastPlannedFailoverTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T07:33:49.1372448Z"); return t }()),
				LastTestFailoverTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T07:00:27.8354747Z"); return t }()),
				PrimaryFabricFriendlyName:  to.Ptr("cloud1"),
				PrimaryFabricID:            to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1"),
				RecoveryFabricFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryFabricID:           to.Ptr("Microsoft Azure"),
				ReplicationProviders: []*string{
					to.Ptr("HyperVReplicaAzure")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecoveryPlan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecoveryPlan)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_TestFailoverCleanup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationRecoveryPlans_UnplannedFailover(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_UnplannedFailover.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute unplanned failover of the recovery plan."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationRecoveryPlansClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginUnplannedFailover(ctx,
		"RPtest1",
		armrecoveryservicessiterecovery.RecoveryPlanUnplannedFailoverInput{
			Properties: &armrecoveryservicessiterecovery.RecoveryPlanUnplannedFailoverInputProperties{
				FailoverDirection: to.Ptr(armrecoveryservicessiterecovery.PossibleOperationsDirectionsPrimaryToRecovery),
				ProviderSpecificDetails: []armrecoveryservicessiterecovery.RecoveryPlanProviderSpecificFailoverInputClassification{
					&armrecoveryservicessiterecovery.RecoveryPlanHyperVReplicaAzureFailoverInput{
						InstanceType: to.Ptr("HyperVReplicaAzure"),
					}},
				SourceSiteOperations: to.Ptr(armrecoveryservicessiterecovery.SourceSiteOperationsRequired),
			},
		},
		&armrecoveryservicessiterecovery.ReplicationRecoveryPlansClientBeginUnplannedFailoverOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_UnplannedFailover.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_UnplannedFailover.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.RecoveryPlan{
			Name: to.Ptr("RPtest1"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationRecoveryPlans"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationRecoveryPlans/RPtest1"),
			Properties: &armrecoveryservicessiterecovery.RecoveryPlanProperties{
				AllowedOperations: []*string{
					to.Ptr("PlannedFailover"),
					to.Ptr("UnplannedFailover"),
					to.Ptr("TestFailover"),
					to.Ptr("Commit")},
				CurrentScenario: &armrecoveryservicessiterecovery.CurrentScenarioDetails{
					JobID:        to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationJobs/60b84068-9adb-4867-a49d-88be40bff14b"),
					ScenarioName: to.Ptr("UnplannedFailover"),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T10:03:03.2206946Z"); return t }()),
				},
				CurrentScenarioStatus:            to.Ptr("Succeeded"),
				CurrentScenarioStatusDescription: to.Ptr("Completed"),
				FailoverDeploymentModel:          to.Ptr("ResourceManager"),
				FriendlyName:                     to.Ptr("RPtest1"),
				Groups: []*armrecoveryservicessiterecovery.RecoveryPlanGroup{
					{
						EndGroupActions:           []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:                 to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeShutdown),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{},
						StartGroupActions:         []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions:           []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:                 to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeFailover),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{},
						StartGroupActions:         []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:       to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeBoot),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{
							{
								ID:               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/f8491e4f-817a-40dd-a90c-af773978c75b"),
								VirtualMachineID: to.Ptr("f8491e4f-817a-40dd-a90c-af773978c75b"),
							}},
						StartGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					},
					{
						EndGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
						GroupType:       to.Ptr(armrecoveryservicessiterecovery.RecoveryPlanGroupTypeBoot),
						ReplicationProtectedItems: []*armrecoveryservicessiterecovery.RecoveryPlanProtectedItem{
							{
								ID:               to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1/replicationProtectionContainers/cloud_6d224fc6-f326-5d35-96de-fbf51efb3179/replicationProtectedItems/c0c14913-3d7a-48ea-9531-cc99e0e686e6"),
								VirtualMachineID: to.Ptr("c0c14913-3d7a-48ea-9531-cc99e0e686e6"),
							}},
						StartGroupActions: []*armrecoveryservicessiterecovery.RecoveryPlanAction{},
					}},
				LastPlannedFailoverTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T08:58:35.9062813Z"); return t }()),
				LastTestFailoverTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-27T07:00:27.8354747Z"); return t }()),
				PrimaryFabricFriendlyName:  to.Ptr("cloud1"),
				PrimaryFabricID:            to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/cloud1"),
				RecoveryFabricFriendlyName: to.Ptr("Microsoft Azure"),
				RecoveryFabricID:           to.Ptr("Microsoft Azure"),
				ReplicationProviders: []*string{
					to.Ptr("HyperVReplicaAzure")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecoveryPlan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecoveryPlan)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationRecoveryPlans_UnplannedFailover.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSupportedOperatingSystems_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/SupportedOperatingSystems_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the data of supported operating systems by SRS."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewSupportedOperatingSystemsClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	res, err := client.Get(ctx,
		&armrecoveryservicessiterecovery.SupportedOperatingSystemsClientGetOptions{InstanceType: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/SupportedOperatingSystems_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.SupportedOperatingSystems{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationSupportedOperatingSystems"),
			ID:   to.Ptr("/Subscriptions/bc403605-c2b0-43dd-abe9-0162124b1ee1/resourceGroups/oneBoxRG/providers/Microsoft.RecoveryServices/vaults/oneBoxRSVault/replicationSupportedOperatingSystems/Default"),
			Properties: &armrecoveryservicessiterecovery.SupportedOSProperties{
				SupportedOsList: []*armrecoveryservicessiterecovery.SupportedOSProperty{
					{
						InstanceType: to.Ptr("A2A"),
						SupportedOs: []*armrecoveryservicessiterecovery.SupportedOSDetails{
							{
								OSName: to.Ptr("centos"),
								OSType: to.Ptr("linux"),
								OSVersions: []*armrecoveryservicessiterecovery.OSVersionWrapper{
									{
										Version: to.Ptr("6.0"),
									}},
							},
							{
								OSName: to.Ptr("Windows Server 2008 R2 Datacenter"),
								OSType: to.Ptr("windows"),
								OSVersions: []*armrecoveryservicessiterecovery.OSVersionWrapper{
									{
										ServicePack: to.Ptr("1"),
										Version:     to.Ptr("6.1"),
									}},
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SupportedOperatingSystems) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SupportedOperatingSystems)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/SupportedOperatingSystems_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationVaultHealth_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationVaultHealth_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the health summary for the vault."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationVaultHealthClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	res, err := client.Get(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationVaultHealth_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.VaultHealthDetails{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationVaultHealth"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationVaultHealth/Default"),
			Properties: &armrecoveryservicessiterecovery.VaultHealthProperties{
				FabricsHealth: &armrecoveryservicessiterecovery.ResourceHealthSummary{
					Issues:        []*armrecoveryservicessiterecovery.HealthErrorSummary{},
					ResourceCount: to.Ptr[int32](1),
				},
				ProtectedItemsHealth: &armrecoveryservicessiterecovery.ResourceHealthSummary{
					Issues: []*armrecoveryservicessiterecovery.HealthErrorSummary{
						{
							AffectedResourceCorrelationIDs: []*string{
								to.Ptr("c183865e-6077-46f2-a3b1-deb0f4f4650a"),
								to.Ptr("c183865e-6077-46f2-a3b1-ceb0a4c3751e")},
							AffectedResourceSubtype: to.Ptr(""),
							AffectedResourceType:    to.Ptr("replicationProtectedItems"),
							Category:                to.Ptr(armrecoveryservicessiterecovery.HealthErrorCategoryReplication),
							Severity:                to.Ptr(armrecoveryservicessiterecovery.SeverityError),
							SummaryCode:             to.Ptr("10008"),
							SummaryMessage:          to.Ptr("RPO Throttled"),
						}},
					ResourceCount: to.Ptr[int32](6),
				},
				VaultErrors: []*armrecoveryservicessiterecovery.HealthError{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VaultHealthDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VaultHealthDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationVaultHealth_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationVaultHealth_Refresh(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationVaultHealth_Refresh.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Refreshes health summary of the vault."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationVaultHealthClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginRefresh(ctx,
		&armrecoveryservicessiterecovery.ReplicationVaultHealthClientBeginRefreshOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationVaultHealth_Refresh.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationVaultHealth_Refresh.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.VaultHealthDetails{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationVaultHealth"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationVaultHealth/Default"),
			Properties: &armrecoveryservicessiterecovery.VaultHealthProperties{
				FabricsHealth: &armrecoveryservicessiterecovery.ResourceHealthSummary{
					Issues:        []*armrecoveryservicessiterecovery.HealthErrorSummary{},
					ResourceCount: to.Ptr[int32](1),
				},
				ProtectedItemsHealth: &armrecoveryservicessiterecovery.ResourceHealthSummary{
					Issues:        []*armrecoveryservicessiterecovery.HealthErrorSummary{},
					ResourceCount: to.Ptr[int32](2),
				},
				VaultErrors: []*armrecoveryservicessiterecovery.HealthError{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VaultHealthDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VaultHealthDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationVaultHealth_Refresh.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationVaultSetting_List(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationVaultSetting_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of vault setting."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationVaultSettingClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationVaultSetting_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armrecoveryservicessiterecovery.VaultSettingCollection{
			Value: []*armrecoveryservicessiterecovery.VaultSetting{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationVaultSettings"),
					ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationVaultSettings/default"),
					Properties: &armrecoveryservicessiterecovery.VaultSettingProperties{
						MigrationSolutionID: to.Ptr("/subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.Migrate/MigrateProjects/resourceGroupPS1-MigrateProject/Solutions/Servers-Migration-ServerMigration"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VaultSettingCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VaultSettingCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationVaultSetting_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationVaultSetting_Get(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationVaultSetting_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the vault setting."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationVaultSettingClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	res, err := client.Get(ctx,
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationVaultSetting_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.VaultSetting{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationVaultSettings"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationVaultSettings/default"),
			Properties: &armrecoveryservicessiterecovery.VaultSettingProperties{
				MigrationSolutionID: to.Ptr("/subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.Migrate/MigrateProjects/resourceGroupPS1-MigrateProject/Solutions/Servers-Migration-ServerMigration"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VaultSetting) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VaultSetting)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationVaultSetting_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationVaultSetting_Create(t *testing.T) {
	// From example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationVaultSetting_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates vault setting. A vault setting object is a singleton per vault and it is always present by default."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armrecoveryservicessiterecovery.NewReplicationVaultSettingClient("vault1",
		"resourceGroupPS1",
		"c183865e-6077-46f2-a3b1-deb0f4f4650a", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"default",
		armrecoveryservicessiterecovery.VaultSettingCreationInput{
			Properties: &armrecoveryservicessiterecovery.VaultSettingCreationInputProperties{
				MigrationSolutionID: to.Ptr("/subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.Migrate/MigrateProjects/resourceGroupPS1-MigrateProject/Solutions/Servers-Migration-ServerMigration"),
			},
		},
		&armrecoveryservicessiterecovery.ReplicationVaultSettingClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationVaultSetting_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationVaultSetting_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armrecoveryservicessiterecovery.VaultSetting{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.RecoveryServices/vaults/replicationVaultSettings"),
			ID:   to.Ptr("/Subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationVaultSettings/default"),
			Properties: &armrecoveryservicessiterecovery.VaultSettingProperties{
				MigrationSolutionID: to.Ptr("/subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/resourceGroupPS1/providers/Microsoft.Migrate/MigrateProjects/resourceGroupPS1-MigrateProject/Solutions/Servers-Migration-ServerMigration"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VaultSetting) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VaultSetting)
			t.Fatalf("Mock response is not equal to example response for example specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/ReplicationVaultSetting_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
