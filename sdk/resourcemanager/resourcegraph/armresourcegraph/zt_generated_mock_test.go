//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresourcegraph_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resourcegraph/armresourcegraph"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestResourceGraphClient_Resources(t *testing.T) {
	// From example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesPropertiesQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Access a properties field"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresourcegraph.NewClient(cred, &options)
	res, err := client.Resources(ctx,
		armresourcegraph.QueryRequest{
			Query: to.Ptr("Resources | where type =~ 'Microsoft.Compute/virtualMachines' | summarize count() by tostring(properties.storageProfile.osDisk.osType)"),
			Subscriptions: []*string{
				to.Ptr("cfbbd179-59d2-4052-aa06-9270a38aa9d6")},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesPropertiesQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresourcegraph.QueryResponse{
			Count: to.Ptr[int64](2),
			Data: []interface{}{
				map[string]interface{}{
					"count": float64(7),
					"properties_storageProfile_osDisk_osType": "Linux",
				},
				map[string]interface{}{
					"count": float64(23),
					"properties_storageProfile_osDisk_osType": "Windows",
				},
			},
			Facets:          []armresourcegraph.FacetClassification{},
			ResultTruncated: to.Ptr(armresourcegraph.ResultTruncatedFalse),
			TotalRecords:    to.Ptr[int64](2),
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesPropertiesQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesMgBasicQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Basic management group query"},
	})
	client = armresourcegraph.NewClient(cred, &options)
	res, err = client.Resources(ctx,
		armresourcegraph.QueryRequest{
			ManagementGroups: []*string{
				to.Ptr("e927f598-c1d4-4f72-8541-95d83a6a4ac8"),
				to.Ptr("ProductionMG")},
			Query: to.Ptr("Resources | project id, name, type, location, tags | limit 3"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesMgBasicQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresourcegraph.QueryResponse{
			Count: to.Ptr[int64](3),
			Data: []interface{}{
				map[string]interface{}{
					"name":     "myNetworkInterface",
					"type":     "microsoft.network/networkinterfaces",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/RG1/providers/Microsoft.Network/networkInterfaces/myNetworkInterface",
					"location": "centralus",
					"tags": map[string]interface{}{
						"tag1": "Value1",
					},
				},
				map[string]interface{}{
					"name":     "myVnet",
					"type":     "microsoft.network/virtualnetworks",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/RG2/providers/Microsoft.Network/virtualNetworks/myVnet",
					"location": "westus",
					"tags":     map[string]interface{}{},
				},
				map[string]interface{}{
					"name":     "myPublicIp",
					"type":     "microsoft.network/publicipaddresses",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/RG2/providers/Microsoft.Network/publicIPAddresses/myPublicIp",
					"location": "westus",
					"tags":     map[string]interface{}{},
				},
			},
			Facets:          []armresourcegraph.FacetClassification{},
			ResultTruncated: to.Ptr(armresourcegraph.ResultTruncatedFalse),
			TotalRecords:    to.Ptr[int64](3),
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesMgBasicQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesBasicQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Basic query"},
	})
	client = armresourcegraph.NewClient(cred, &options)
	res, err = client.Resources(ctx,
		armresourcegraph.QueryRequest{
			Query: to.Ptr("Resources | project id, name, type, location, tags | limit 3"),
			Subscriptions: []*string{
				to.Ptr("cfbbd179-59d2-4052-aa06-9270a38aa9d6")},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesBasicQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresourcegraph.QueryResponse{
			Count: to.Ptr[int64](3),
			Data: []interface{}{
				map[string]interface{}{
					"name":     "myNetworkInterface",
					"type":     "microsoft.network/networkinterfaces",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/RG1/providers/Microsoft.Network/networkInterfaces/myNetworkInterface",
					"location": "centralus",
					"tags": map[string]interface{}{
						"tag1": "Value1",
					},
				},
				map[string]interface{}{
					"name":     "myVnet",
					"type":     "microsoft.network/virtualnetworks",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/RG2/providers/Microsoft.Network/virtualNetworks/myVnet",
					"location": "westus",
					"tags":     map[string]interface{}{},
				},
				map[string]interface{}{
					"name":     "myPublicIp",
					"type":     "microsoft.network/publicipaddresses",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/RG2/providers/Microsoft.Network/publicIPAddresses/myPublicIp",
					"location": "westus",
					"tags":     map[string]interface{}{},
				},
			},
			Facets:          []armresourcegraph.FacetClassification{},
			ResultTruncated: to.Ptr(armresourcegraph.ResultTruncatedFalse),
			TotalRecords:    to.Ptr[int64](3),
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesBasicQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesTenantBasicQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Basic tenant query"},
	})
	client = armresourcegraph.NewClient(cred, &options)
	res, err = client.Resources(ctx,
		armresourcegraph.QueryRequest{
			Query: to.Ptr("Resources | project id, name, type, location, tags | limit 3"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesTenantBasicQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresourcegraph.QueryResponse{
			Count: to.Ptr[int64](3),
			Data: []interface{}{
				map[string]interface{}{
					"name":     "myNetworkInterface",
					"type":     "microsoft.network/networkinterfaces",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/RG1/providers/Microsoft.Network/networkInterfaces/myNetworkInterface",
					"location": "centralus",
					"tags": map[string]interface{}{
						"tag1": "Value1",
					},
				},
				map[string]interface{}{
					"name":     "myVnet",
					"type":     "microsoft.network/virtualnetworks",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/RG2/providers/Microsoft.Network/virtualNetworks/myVnet",
					"location": "westus",
					"tags":     map[string]interface{}{},
				},
				map[string]interface{}{
					"name":     "myPublicIp",
					"type":     "microsoft.network/publicipaddresses",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/RG2/providers/Microsoft.Network/publicIPAddresses/myPublicIp",
					"location": "westus",
					"tags":     map[string]interface{}{},
				},
			},
			Facets:          []armresourcegraph.FacetClassification{},
			ResultTruncated: to.Ptr(armresourcegraph.ResultTruncatedFalse),
			TotalRecords:    to.Ptr[int64](3),
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesTenantBasicQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesComplexQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Complex query"},
	})
	client = armresourcegraph.NewClient(cred, &options)
	res, err = client.Resources(ctx,
		armresourcegraph.QueryRequest{
			Query: to.Ptr("Resources | project id, name, type, location | where type =~ 'Microsoft.Compute/virtualMachines' | summarize count() by location | top 3 by count_"),
			Subscriptions: []*string{
				to.Ptr("cfbbd179-59d2-4052-aa06-9270a38aa9d6")},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesComplexQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresourcegraph.QueryResponse{
			Count: to.Ptr[int64](3),
			Data: []interface{}{
				map[string]interface{}{
					"count_":   float64(11),
					"location": "centralus",
				},
				map[string]interface{}{
					"count_":   float64(11),
					"location": "eastus",
				},
				map[string]interface{}{
					"count_":   float64(3),
					"location": "southcentralus",
				},
			},
			Facets:          []armresourcegraph.FacetClassification{},
			ResultTruncated: to.Ptr(armresourcegraph.ResultTruncatedFalse),
			TotalRecords:    to.Ptr[int64](3),
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesComplexQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesFilterQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Filter resources"},
	})
	client = armresourcegraph.NewClient(cred, &options)
	res, err = client.Resources(ctx,
		armresourcegraph.QueryRequest{
			Query: to.Ptr("Resources | project id, name, type, location | where type =~ 'Microsoft.Compute/virtualMachines' | limit 3"),
			Subscriptions: []*string{
				to.Ptr("cfbbd179-59d2-4052-aa06-9270a38aa9d6")},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesFilterQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresourcegraph.QueryResponse{
			Count: to.Ptr[int64](3),
			Data: []interface{}{
				map[string]interface{}{
					"name":     "myVm1",
					"type":     "microsoft.compute/virtualmachines",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/RG1/providers/Microsoft.Compute/virtualMachines/myVm1",
					"location": "centralus",
				},
				map[string]interface{}{
					"name":     "myVirtualMachine",
					"type":     "microsoft.compute/virtualmachines",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/RG2/providers/Microsoft.Compute/virtualMachines/myVirtualMachine",
					"location": "eastus",
				},
				map[string]interface{}{
					"name":     "testVm",
					"type":     "microsoft.compute/virtualmachines",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/RG3/providers/Microsoft.Compute/virtualMachines/testVm",
					"location": "eastus",
				},
			},
			Facets:          []armresourcegraph.FacetClassification{},
			ResultTruncated: to.Ptr(armresourcegraph.ResultTruncatedFalse),
			TotalRecords:    to.Ptr[int64](3),
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesFilterQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesFirstPageQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"First page query"},
	})
	client = armresourcegraph.NewClient(cred, &options)
	res, err = client.Resources(ctx,
		armresourcegraph.QueryRequest{
			Options: &armresourcegraph.QueryRequestOptions{
				Skip: to.Ptr[int32](0),
				Top:  to.Ptr[int32](3),
			},
			Query: to.Ptr("Resources | where name contains 'test' | project id, name, type, location"),
			Subscriptions: []*string{
				to.Ptr("cfbbd179-59d2-4052-aa06-9270a38aa9d6")},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesFirstPageQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresourcegraph.QueryResponse{
			SkipToken: to.Ptr("eyAibm8iOiAibHVjayIsICJidXQiOiAibmljZSIsICJ0cnkiOiAiISIgfQ=="),
			Count:     to.Ptr[int64](3),
			Data: []interface{}{
				map[string]interface{}{
					"name":     "yetanothertest_OsDisk_1_f396cbcb625a457bb69fe2abf5975820",
					"type":     "microsoft.compute/disks",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/RG1/providers/Microsoft.Compute/disks/yetanothertest_OsDisk_1_f396cbcb625a457bb69fe2abf5975820",
					"location": "eastus",
				},
				map[string]interface{}{
					"name":     "TestAA",
					"type":     "microsoft.automation/automationaccounts",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/RG2/providers/Microsoft.Automation/automationAccounts/TestAA",
					"location": "westcentralus",
				},
				map[string]interface{}{
					"name":     "TestRB",
					"type":     "microsoft.automation/automationaccounts/runbooks",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/RG2/providers/Microsoft.Automation/automationAccounts/TestAA/runbooks/TestRB",
					"location": "westcentralus",
				},
			},
			Facets:          []armresourcegraph.FacetClassification{},
			ResultTruncated: to.Ptr(armresourcegraph.ResultTruncatedFalse),
			TotalRecords:    to.Ptr[int64](386),
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesFirstPageQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesNextPageQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Next page query"},
	})
	client = armresourcegraph.NewClient(cred, &options)
	res, err = client.Resources(ctx,
		armresourcegraph.QueryRequest{
			Options: &armresourcegraph.QueryRequestOptions{
				SkipToken: to.Ptr("eyAibm8iOiAibHVjayIsICJidXQiOiAibmljZSIsICJ0cnkiOiAiISIgfQ=="),
			},
			Query: to.Ptr("Resources | where name contains 'test' | project id, name, type, location"),
			Subscriptions: []*string{
				to.Ptr("cfbbd179-59d2-4052-aa06-9270a38aa9d6")},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesNextPageQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresourcegraph.QueryResponse{
			SkipToken: to.Ptr("eyAibm8yIjogImx1Y2syIiwgImJ1dDIiOiAibmljZTIiLCAidHJ5MiI6ICIhIiB9"),
			Count:     to.Ptr[int64](3),
			Data: []interface{}{
				map[string]interface{}{
					"name":     "second_OsDisk_dddddbcb625a457bb69fe2abf5975820",
					"type":     "microsoft.compute/disks",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/RG1/providers/Microsoft.Compute/disks/second_OsDisk_dddddbcb625a457bb69fe2abf5975820",
					"location": "eastus",
				},
				map[string]interface{}{
					"name":     "AATest",
					"type":     "microsoft.automation/automationaccounts",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/RG2/providers/Microsoft.Automation/automationAccounts/AATest",
					"location": "westcentralus",
				},
				map[string]interface{}{
					"name":     "RBTest",
					"type":     "microsoft.automation/automationaccounts/runbooks",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/RG2/providers/Microsoft.Automation/automationAccounts/TestAA/runbooks/RBTest",
					"location": "westcentralus",
				},
			},
			Facets:          []armresourcegraph.FacetClassification{},
			ResultTruncated: to.Ptr(armresourcegraph.ResultTruncatedFalse),
			TotalRecords:    to.Ptr[int64](386),
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesNextPageQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesFacetQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Query with a facet request"},
	})
	client = armresourcegraph.NewClient(cred, &options)
	res, err = client.Resources(ctx,
		armresourcegraph.QueryRequest{
			Facets: []*armresourcegraph.FacetRequest{
				{
					Expression: to.Ptr("location"),
					Options: &armresourcegraph.FacetRequestOptions{
						Top:       to.Ptr[int32](3),
						SortOrder: to.Ptr(armresourcegraph.FacetSortOrderDesc),
					},
				},
				{
					Expression: to.Ptr("properties.storageProfile.osDisk.osType"),
					Options: &armresourcegraph.FacetRequestOptions{
						Top:       to.Ptr[int32](3),
						SortOrder: to.Ptr(armresourcegraph.FacetSortOrderDesc),
					},
				},
				{
					Expression: to.Ptr("nonExistingColumn"),
					Options: &armresourcegraph.FacetRequestOptions{
						Top:       to.Ptr[int32](3),
						SortOrder: to.Ptr(armresourcegraph.FacetSortOrderDesc),
					},
				},
				{
					Expression: to.Ptr("resourceGroup"),
					Options: &armresourcegraph.FacetRequestOptions{
						Top:       to.Ptr[int32](3),
						SortBy:    to.Ptr("tolower(resourceGroup)"),
						SortOrder: to.Ptr(armresourcegraph.FacetSortOrderAsc),
					},
				},
				{
					Expression: to.Ptr("resourceGroup"),
					Options: &armresourcegraph.FacetRequestOptions{
						Top:    to.Ptr[int32](3),
						Filter: to.Ptr("resourceGroup contains 'test'"),
					},
				}},
			Query: to.Ptr("Resources | where type =~ 'Microsoft.Compute/virtualMachines' | project id, name, location, resourceGroup, properties.storageProfile.osDisk.osType | limit 5"),
			Subscriptions: []*string{
				to.Ptr("cfbbd179-59d2-4052-aa06-9270a38aa9d6")},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesFacetQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresourcegraph.QueryResponse{
			Count: to.Ptr[int64](5),
			Data: []interface{}{
				map[string]interface{}{
					"name":     "myTestVm",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/B-TEST-RG/providers/Microsoft.Compute/virtualMachines/myTestVm",
					"location": "eastus",
					"properties_storageProfile_osDisk_osType": "Windows",
					"resourceGroup": "B-TEST-RG",
				},
				map[string]interface{}{
					"name":     "myTestAccountVm",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/c-rg/providers/Microsoft.Compute/virtualMachines/myTestAccountVm",
					"location": "westcentralus",
					"properties_storageProfile_osDisk_osType": "Windows",
					"resourceGroup": "c-rg",
				},
				map[string]interface{}{
					"name":     "yetanothertest",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/I-RG/providers/Microsoft.Compute/virtualMachines/yetanothertest",
					"location": "eastus",
					"properties_storageProfile_osDisk_osType": "Linux",
					"resourceGroup": "I-RG",
				},
				map[string]interface{}{
					"name":     "drafttest1bux4cv7a7q3aw",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/x-test-rg/providers/Microsoft.Compute/virtualMachines/drafttest1bux4cv7a7q3aw",
					"location": "southcentralus",
					"properties_storageProfile_osDisk_osType": "Linux",
					"resourceGroup": "x-test-rg",
				},
				map[string]interface{}{
					"name":     "testvmntp25370",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/y-rg/providers/Microsoft.Compute/virtualMachines/testvmntp25370",
					"location": "eastus",
					"properties_storageProfile_osDisk_osType": "Windows",
					"resourceGroup": "y-rg",
				},
			},
			Facets: []armresourcegraph.FacetClassification{
				&armresourcegraph.FacetResult{
					Expression: to.Ptr("location"),
					ResultType: to.Ptr("FacetResult"),
					Count:      to.Ptr[int32](3),
					Data: []interface{}{
						map[string]interface{}{
							"count":    float64(3),
							"location": "eastus",
						},
						map[string]interface{}{
							"count":    float64(1),
							"location": "southcentralus",
						},
						map[string]interface{}{
							"count":    float64(1),
							"location": "westcentralus",
						},
					},
					TotalRecords: to.Ptr[int64](3),
				},
				&armresourcegraph.FacetResult{
					Expression: to.Ptr("properties.storageProfile.osDisk.osType"),
					ResultType: to.Ptr("FacetResult"),
					Count:      to.Ptr[int32](2),
					Data: []interface{}{
						map[string]interface{}{
							"count": float64(2),
							"properties_storageProfile_osDisk_osType": "Linux",
						},
						map[string]interface{}{
							"count": float64(3),
							"properties_storageProfile_osDisk_osType": "Windows",
						},
					},
					TotalRecords: to.Ptr[int64](2),
				},
				&armresourcegraph.FacetError{
					Expression: to.Ptr("nonExistingColumn"),
					ResultType: to.Ptr("FacetError"),
					Errors: []*armresourcegraph.ErrorDetails{
						{
							Code:    to.Ptr("NoValidColumns"),
							Message: to.Ptr("No valid columns in facet expression."),
						},
						{
							Code:    to.Ptr("InvalidColumnNames"),
							Message: to.Ptr("Invalid column names: [nonExistingColumn]."),
						}},
				},
				&armresourcegraph.FacetResult{
					Expression: to.Ptr("resourceGroup"),
					ResultType: to.Ptr("FacetResult"),
					Count:      to.Ptr[int32](3),
					Data: []interface{}{
						map[string]interface{}{
							"count":         float64(1),
							"resourceGroup": "B-TEST-RG",
						},
						map[string]interface{}{
							"count":         float64(1),
							"resourceGroup": "c-rg",
						},
						map[string]interface{}{
							"count":         float64(1),
							"resourceGroup": "I-RG",
						},
					},
					TotalRecords: to.Ptr[int64](5),
				},
				&armresourcegraph.FacetResult{
					Expression: to.Ptr("resourceGroup"),
					ResultType: to.Ptr("FacetResult"),
					Count:      to.Ptr[int32](2),
					Data: []interface{}{
						map[string]interface{}{
							"count":         float64(1),
							"resourceGroup": "B-TEST-RG",
						},
						map[string]interface{}{
							"count":         float64(1),
							"resourceGroup": "x-test-rg",
						},
					},
					TotalRecords: to.Ptr[int64](2),
				}},
			ResultTruncated: to.Ptr(armresourcegraph.ResultTruncatedFalse),
			TotalRecords:    to.Ptr[int64](5),
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesFacetQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesRandomPageQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Random page query"},
	})
	client = armresourcegraph.NewClient(cred, &options)
	res, err = client.Resources(ctx,
		armresourcegraph.QueryRequest{
			Options: &armresourcegraph.QueryRequestOptions{
				Skip: to.Ptr[int32](10),
				Top:  to.Ptr[int32](2),
			},
			Query: to.Ptr("Resources | where name contains 'test' | project id, name, type, location"),
			Subscriptions: []*string{
				to.Ptr("cfbbd179-59d2-4052-aa06-9270a38aa9d6")},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesRandomPageQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresourcegraph.QueryResponse{
			SkipToken: to.Ptr("eyAibm8iOiAibHVjayIsICJidXQiOiAibmljZSIsICJ0cnkiOiAiISIgfQ=="),
			Count:     to.Ptr[int64](2),
			Data: []interface{}{
				map[string]interface{}{
					"name":     "third_OsDisk_dddddbcb625a457bb69fe2abf5975820",
					"type":     "microsoft.compute/disks",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/RG1/providers/Microsoft.Compute/disks/third_OsDisk_dddddbcb625a457bb69fe2abf5975820",
					"location": "eastus",
				},
				map[string]interface{}{
					"name":     "CCTest",
					"type":     "microsoft.automation/automationaccounts",
					"id":       "/subscriptions/cfbbd179-59d2-4052-aa06-9270a38aa9d6/resourceGroups/RG2/providers/Microsoft.Automation/automationAccounts/CCTest",
					"location": "westcentralus",
				},
			},
			Facets:          []armresourcegraph.FacetClassification{},
			ResultTruncated: to.Ptr(armresourcegraph.ResultTruncatedFalse),
			TotalRecords:    to.Ptr[int64](386),
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesRandomPageQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesSummarizeQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Summarize resources by location"},
	})
	client = armresourcegraph.NewClient(cred, &options)
	res, err = client.Resources(ctx,
		armresourcegraph.QueryRequest{
			Query: to.Ptr("Resources | project id, name, type, location | summarize by location"),
			Subscriptions: []*string{
				to.Ptr("cfbbd179-59d2-4052-aa06-9270a38aa9d6")},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesSummarizeQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresourcegraph.QueryResponse{
			Count: to.Ptr[int64](3),
			Data: []interface{}{
				map[string]interface{}{
					"location": "centralus",
				},
				map[string]interface{}{
					"location": "eastus",
				},
				map[string]interface{}{
					"location": "westus",
				},
			},
			Facets:          []armresourcegraph.FacetClassification{},
			ResultTruncated: to.Ptr(armresourcegraph.ResultTruncatedFalse),
			TotalRecords:    to.Ptr[int64](3),
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesSummarizeQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGraphClient_ResourcesHistory(t *testing.T) {
	// From example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesHistoryMgsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Resource History Management Group scope Query"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresourcegraph.NewClient(cred, &options)
	res, err := client.ResourcesHistory(ctx,
		armresourcegraph.ResourcesHistoryRequest{
			ManagementGroups: []*string{
				to.Ptr("e927f598-c1d4-4f72-8541-95d83a6a4ac8"),
				to.Ptr("ProductionMG")},
			Options: &armresourcegraph.ResourcesHistoryRequestOptions{
				Interval: &armresourcegraph.DateTimeInterval{
					End:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-12T01:25:00.0000000Z"); return t }()),
					Start: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-12T01:00:00.0000000Z"); return t }()),
				},
			},
			Query: to.Ptr("where name =~ 'cpu-utilization' | project id, name, properties"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesHistoryMgsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := map[string]interface{}{
			"count": float64(2),
			"snapshots": map[string]interface{}{
				"columns": []interface{}{
					map[string]interface{}{
						"name": "id",
						"type": "string",
					},
					map[string]interface{}{
						"name": "name",
						"type": "string",
					},
					map[string]interface{}{
						"name": "properties",
						"type": "object",
					},
				},
				"rows": []interface{}{
					[]interface{}{
						"/subscriptions/a7f33fdb-e646-4f15-89aa-3a360210861e/resourceGroups/meya-test-rg/providers/Microsoft.Compute/virtualMachines/meya-win-eus/providers/Microsoft.WorkloadMonitor/monitors/cpu-utilization",
						"cpu-utilization",
						map[string]interface{}{
							"currentStateFirstObservedTimestamp": "",
							"monitorName":                        "",
						},
					},
					[]interface{}{
						"/subscriptions/a7f33fdb-e646-4f15-89aa-3a360210861e/resourceGroups/meya-test-rg/providers/Microsoft.Compute/virtualMachines/meya-win-eus/providers/Microsoft.WorkloadMonitor/monitors/cpu-utilization",
						"cpu-utilization",
						map[string]interface{}{
							"currentStateFirstObservedTimestamp": "",
							"monitorName":                        "test",
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Interface) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Interface)
			t.Fatalf("Mock response is not equal to example response for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesHistoryMgsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesHistoryGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Resource History Query"},
	})
	client = armresourcegraph.NewClient(cred, &options)
	res, err = client.ResourcesHistory(ctx,
		armresourcegraph.ResourcesHistoryRequest{
			Options: &armresourcegraph.ResourcesHistoryRequestOptions{
				Interval: &armresourcegraph.DateTimeInterval{
					End:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-12T01:25:00.0000000Z"); return t }()),
					Start: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-12T01:00:00.0000000Z"); return t }()),
				},
			},
			Query: to.Ptr("where name =~ 'cpu-utilization' | project id, name, properties"),
			Subscriptions: []*string{
				to.Ptr("a7f33fdb-e646-4f15-89aa-3a360210861e")},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesHistoryGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := map[string]interface{}{
			"count": float64(2),
			"snapshots": map[string]interface{}{
				"columns": []interface{}{
					map[string]interface{}{
						"name": "id",
						"type": "string",
					},
					map[string]interface{}{
						"name": "name",
						"type": "string",
					},
					map[string]interface{}{
						"name": "properties",
						"type": "object",
					},
				},
				"rows": []interface{}{
					[]interface{}{
						"/subscriptions/a7f33fdb-e646-4f15-89aa-3a360210861e/resourceGroups/meya-test-rg/providers/Microsoft.Compute/virtualMachines/meya-win-eus/providers/Microsoft.WorkloadMonitor/monitors/cpu-utilization",
						"cpu-utilization",
						map[string]interface{}{
							"currentStateFirstObservedTimestamp": "",
							"monitorName":                        "",
						},
					},
					[]interface{}{
						"/subscriptions/a7f33fdb-e646-4f15-89aa-3a360210861e/resourceGroups/meya-test-rg/providers/Microsoft.Compute/virtualMachines/meya-win-eus/providers/Microsoft.WorkloadMonitor/monitors/cpu-utilization",
						"cpu-utilization",
						map[string]interface{}{
							"currentStateFirstObservedTimestamp": "",
							"monitorName":                        "test",
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Interface) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Interface)
			t.Fatalf("Mock response is not equal to example response for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/ResourcesHistoryGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/OperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OperationsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresourcegraph.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/OperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armresourcegraph.OperationListResult{
			Value: []*armresourcegraph.Operation{
				{
					Name: to.Ptr("Microsoft.ResourceGraph/operations/read"),
					Display: &armresourcegraph.OperationDisplay{
						Description: to.Ptr("Gets the list of supported operations"),
						Operation:   to.Ptr("Get Operations"),
						Provider:    to.Ptr("Microsoft Resource Graph"),
						Resource:    to.Ptr("Operation"),
					},
				},
				{
					Name: to.Ptr("Microsoft.ResourceGraph/resources/read"),
					Display: &armresourcegraph.OperationDisplay{
						Description: to.Ptr("Submits a query on resources within specified subscriptions, the specified management groups, or against all access granted in the tenant."),
						Operation:   to.Ptr("Query resources"),
						Provider:    to.Ptr("Microsoft Resource Graph"),
						Resource:    to.Ptr("Resources"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/preview/2021-06-01-preview/examples/OperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
