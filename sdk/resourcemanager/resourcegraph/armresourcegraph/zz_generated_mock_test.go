//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresourcegraph

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func Test_Resources(t *testing.T) {
	// From example Access a properties field
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceGraphClientClient(con)
	_, err := client.Resources(ctx,
		QueryRequest{
			Query: to.StringPtr("Resources | where type =~ 'Microsoft.Compute/virtualMachines' | summarize count() by tostring(properties.storageProfile.osDisk.osType)"),
			Subscriptions: []*string{
				to.StringPtr("cfbbd179-59d2-4052-aa06-9270a38aa9d6")},
		},
		&ResourceGraphClientResourcesOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Basic management group query
	_, err = client.Resources(ctx,
		QueryRequest{
			ManagementGroups: []*string{
				to.StringPtr("e927f598-c1d4-4f72-8541-95d83a6a4ac8"),
				to.StringPtr("ProductionMG")},
			Query: to.StringPtr("Resources | project id, name, type, location, tags | limit 3"),
		},
		&ResourceGraphClientResourcesOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Basic query
	_, err = client.Resources(ctx,
		QueryRequest{
			Query: to.StringPtr("Resources | project id, name, type, location, tags | limit 3"),
			Subscriptions: []*string{
				to.StringPtr("cfbbd179-59d2-4052-aa06-9270a38aa9d6")},
		},
		&ResourceGraphClientResourcesOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Basic tenant query
	_, err = client.Resources(ctx,
		QueryRequest{
			Query: to.StringPtr("Resources | project id, name, type, location, tags | limit 3"),
		},
		&ResourceGraphClientResourcesOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Complex query
	_, err = client.Resources(ctx,
		QueryRequest{
			Query: to.StringPtr("Resources | project id, name, type, location | where type =~ 'Microsoft.Compute/virtualMachines' | summarize count() by location | top 3 by count_"),
			Subscriptions: []*string{
				to.StringPtr("cfbbd179-59d2-4052-aa06-9270a38aa9d6")},
		},
		&ResourceGraphClientResourcesOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Filter resources
	_, err = client.Resources(ctx,
		QueryRequest{
			Query: to.StringPtr("Resources | project id, name, type, location | where type =~ 'Microsoft.Compute/virtualMachines' | limit 3"),
			Subscriptions: []*string{
				to.StringPtr("cfbbd179-59d2-4052-aa06-9270a38aa9d6")},
		},
		&ResourceGraphClientResourcesOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example First page query
	_, err = client.Resources(ctx,
		QueryRequest{
			Options: &QueryRequestOptions{
				Skip: to.Int32Ptr(0),
				Top:  to.Int32Ptr(3),
			},
			Query: to.StringPtr("Resources | where name contains 'test' | project id, name, type, location"),
			Subscriptions: []*string{
				to.StringPtr("cfbbd179-59d2-4052-aa06-9270a38aa9d6")},
		},
		&ResourceGraphClientResourcesOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Next page query
	_, err = client.Resources(ctx,
		QueryRequest{
			Options: &QueryRequestOptions{
				SkipToken: to.StringPtr("eyAibm8iOiAibHVjayIsICJidXQiOiAibmljZSIsICJ0cnkiOiAiISIgfQ=="),
			},
			Query: to.StringPtr("Resources | where name contains 'test' | project id, name, type, location"),
			Subscriptions: []*string{
				to.StringPtr("cfbbd179-59d2-4052-aa06-9270a38aa9d6")},
		},
		&ResourceGraphClientResourcesOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Query with a facet request
	_, err = client.Resources(ctx,
		QueryRequest{
			Facets: []*FacetRequest{
				{
					Expression: to.StringPtr("location"),
					Options: &FacetRequestOptions{
						Top:       to.Int32Ptr(3),
						SortOrder: FacetSortOrderDesc.ToPtr(),
					},
				},
				{
					Expression: to.StringPtr("properties.storageProfile.osDisk.osType"),
					Options: &FacetRequestOptions{
						Top:       to.Int32Ptr(3),
						SortOrder: FacetSortOrderDesc.ToPtr(),
					},
				},
				{
					Expression: to.StringPtr("nonExistingColumn"),
					Options: &FacetRequestOptions{
						Top:       to.Int32Ptr(3),
						SortOrder: FacetSortOrderDesc.ToPtr(),
					},
				},
				{
					Expression: to.StringPtr("resourceGroup"),
					Options: &FacetRequestOptions{
						Top:       to.Int32Ptr(3),
						SortBy:    to.StringPtr("tolower(resourceGroup)"),
						SortOrder: FacetSortOrderAsc.ToPtr(),
					},
				},
				{
					Expression: to.StringPtr("resourceGroup"),
					Options: &FacetRequestOptions{
						Top:    to.Int32Ptr(3),
						Filter: to.StringPtr("resourceGroup contains 'test'"),
					},
				}},
			Query: to.StringPtr("Resources | where type =~ 'Microsoft.Compute/virtualMachines' | project id, name, location, resourceGroup, properties.storageProfile.osDisk.osType | limit 5"),
			Subscriptions: []*string{
				to.StringPtr("cfbbd179-59d2-4052-aa06-9270a38aa9d6")},
		},
		&ResourceGraphClientResourcesOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Random page query
	_, err = client.Resources(ctx,
		QueryRequest{
			Options: &QueryRequestOptions{
				Skip: to.Int32Ptr(10),
				Top:  to.Int32Ptr(2),
			},
			Query: to.StringPtr("Resources | where name contains 'test' | project id, name, type, location"),
			Subscriptions: []*string{
				to.StringPtr("cfbbd179-59d2-4052-aa06-9270a38aa9d6")},
		},
		&ResourceGraphClientResourcesOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Summarize resources by location
	_, err = client.Resources(ctx,
		QueryRequest{
			Query: to.StringPtr("Resources | project id, name, type, location | summarize by location"),
			Subscriptions: []*string{
				to.StringPtr("cfbbd179-59d2-4052-aa06-9270a38aa9d6")},
		},
		&ResourceGraphClientResourcesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func Test_ResourcesHistory(t *testing.T) {
	// From example Resource History Management Group scope Query
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceGraphClientClient(con)
	_, err := client.ResourcesHistory(ctx,
		ResourcesHistoryRequest{
			ManagementGroups: []*string{
				to.StringPtr("e927f598-c1d4-4f72-8541-95d83a6a4ac8"),
				to.StringPtr("ProductionMG")},
			Options: &ResourcesHistoryRequestOptions{
				Interval: &DateTimeInterval{
					End:   to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-12T01:25:00.0000000Z"); return t }()),
					Start: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-12T01:00:00.0000000Z"); return t }()),
				},
			},
			Query: to.StringPtr("where name =~ 'cpu-utilization' | project id, name, properties"),
		},
		&ResourceGraphClientResourcesHistoryOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Resource History Query
	_, err = client.ResourcesHistory(ctx,
		ResourcesHistoryRequest{
			Options: &ResourcesHistoryRequestOptions{
				Interval: &DateTimeInterval{
					End:   to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-12T01:25:00.0000000Z"); return t }()),
					Start: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-12T01:00:00.0000000Z"); return t }()),
				},
			},
			Query: to.StringPtr("where name =~ 'cpu-utilization' | project id, name, properties"),
			Subscriptions: []*string{
				to.StringPtr("a7f33fdb-e646-4f15-89aa-3a360210861e")},
		},
		&ResourceGraphClientResourcesHistoryOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example OperationsList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	_, err := client.List(ctx,
		&OperationsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
