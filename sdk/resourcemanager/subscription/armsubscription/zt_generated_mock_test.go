//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsubscription_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/subscription/armsubscription"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestSubscriptions_ListLocations(t *testing.T) {
	// From example specification/subscription/resource-manager/Microsoft.Subscription/stable/2016-06-01/examples/listLocations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"listLocations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsubscription.NewSubscriptionsClient(cred, &options)
	pager := client.ListLocations("83aa47df-e3e9-49ff-877b-94304bf3d3ad",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2016-06-01/examples/listLocations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsubscription.LocationListResult{
			Value: []*armsubscription.Location{
				{
					Name:        to.Ptr("eastasia"),
					DisplayName: to.Ptr("East Asia"),
					ID:          to.Ptr("/subscriptions/83aa47df-e3e9-49ff-877b-94304bf3d3ad/locations/eastasia"),
					Latitude:    to.Ptr("22.267"),
					Longitude:   to.Ptr("114.188"),
				},
				{
					Name:        to.Ptr("southeastasia"),
					DisplayName: to.Ptr("Southeast Asia"),
					ID:          to.Ptr("/subscriptions/83aa47df-e3e9-49ff-877b-94304bf3d3ad/locations/southeastasia"),
					Latitude:    to.Ptr("1.283"),
					Longitude:   to.Ptr("103.833"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LocationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LocationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2016-06-01/examples/listLocations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubscriptions_Get(t *testing.T) {
	// From example specification/subscription/resource-manager/Microsoft.Subscription/stable/2016-06-01/examples/getSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"getSubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsubscription.NewSubscriptionsClient(cred, &options)
	res, err := client.Get(ctx,
		"83aa47df-e3e9-49ff-877b-94304bf3d3ad",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2016-06-01/examples/getSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsubscription.Subscription{
			AuthorizationSource: to.Ptr("Legacy"),
			DisplayName:         to.Ptr("Subscription2"),
			ID:                  to.Ptr("/subscriptions/83aa47df-e3e9-49ff-877b-94304bf3d3ad"),
			State:               to.Ptr(armsubscription.SubscriptionStateEnabled),
			SubscriptionID:      to.Ptr("83aa47df-e3e9-49ff-877b-94304bf3d3ad"),
			SubscriptionPolicies: &armsubscription.Policies{
				LocationPlacementID: to.Ptr("Internal_2014-09-01"),
				QuotaID:             to.Ptr("Internal_2014-09-01"),
				SpendingLimit:       to.Ptr(armsubscription.SpendingLimitOff),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Subscription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Subscription)
			t.Fatalf("Mock response is not equal to example response for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2016-06-01/examples/getSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubscriptions_List(t *testing.T) {
	// From example specification/subscription/resource-manager/Microsoft.Subscription/stable/2016-06-01/examples/listSubscriptions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"listSubscriptions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsubscription.NewSubscriptionsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2016-06-01/examples/listSubscriptions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsubscription.ListResult{
			Value: []*armsubscription.Subscription{
				{
					AuthorizationSource: to.Ptr("Legacy"),
					DisplayName:         to.Ptr("SubscriptionName"),
					ID:                  to.Ptr("/subscriptions/83aa47df-e3e9-49ff-877b-94304bf3d3ad"),
					State:               to.Ptr(armsubscription.SubscriptionStateEnabled),
					SubscriptionID:      to.Ptr("83aa47df-e3e9-49ff-877b-94304bf3d3ad"),
					SubscriptionPolicies: &armsubscription.Policies{
						LocationPlacementID: to.Ptr("Internal_2014-09-01"),
						QuotaID:             to.Ptr("Internal_2014-09-01"),
						SpendingLimit:       to.Ptr(armsubscription.SpendingLimitOff),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2016-06-01/examples/listSubscriptions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTenants_List(t *testing.T) {
	// From example specification/subscription/resource-manager/Microsoft.Subscription/stable/2016-06-01/examples/listTenants.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"listTenants"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsubscription.NewTenantsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2016-06-01/examples/listTenants.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsubscription.TenantListResult{
			Value: []*armsubscription.TenantIDDescription{
				{
					ID:       to.Ptr("/tenants/72f988bf-86f1-41af-91ab-2d7cd011db47"),
					TenantID: to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
				},
				{
					ID:       to.Ptr("/tenants/33e01921-4d64-4f8c-a055-5bdaffd5e33d"),
					TenantID: to.Ptr("33e01921-4d64-4f8c-a055-5bdaffd5e33d"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TenantListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TenantListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2016-06-01/examples/listTenants.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubscription_Cancel(t *testing.T) {
	// From example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/cancelSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"cancelSubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsubscription.NewClient(cred, &options)
	res, err := client.Cancel(ctx,
		"83aa47df-e3e9-49ff-877b-94304bf3d3ad",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/cancelSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsubscription.CanceledSubscriptionID{
			SubscriptionID: to.Ptr("83aa47df-e3e9-49ff-877b-94304bf3d3ad"),
		}
		if !reflect.DeepEqual(exampleRes, res.CanceledSubscriptionID) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CanceledSubscriptionID)
			t.Fatalf("Mock response is not equal to example response for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/cancelSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubscription_Rename(t *testing.T) {
	// From example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/renameSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"renameSubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsubscription.NewClient(cred, &options)
	res, err := client.Rename(ctx,
		"83aa47df-e3e9-49ff-877b-94304bf3d3ad",
		armsubscription.Name{
			SubscriptionName: to.Ptr("Test Sub"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/renameSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsubscription.RenamedSubscriptionID{
			SubscriptionID: to.Ptr("83aa47df-e3e9-49ff-877b-94304bf3d3ad"),
		}
		if !reflect.DeepEqual(exampleRes, res.RenamedSubscriptionID) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RenamedSubscriptionID)
			t.Fatalf("Mock response is not equal to example response for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/renameSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubscription_Enable(t *testing.T) {
	// From example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/enableSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"enableSubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsubscription.NewClient(cred, &options)
	res, err := client.Enable(ctx,
		"7948bcee-488c-47ce-941c-38e20ede803d",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/enableSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsubscription.EnabledSubscriptionID{
			SubscriptionID: to.Ptr("7948bcee-488c-47ce-941c-38e20ede803d"),
		}
		if !reflect.DeepEqual(exampleRes, res.EnabledSubscriptionID) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EnabledSubscriptionID)
			t.Fatalf("Mock response is not equal to example response for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/enableSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubscription_AcceptOwnership(t *testing.T) {
	// From example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/acceptSubscriptionOwnership.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AcceptOwnership"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsubscription.NewClient(cred, &options)
	poller, err := client.BeginAcceptOwnership(ctx,
		"291bba3f-e0a5-47bc-a099-3bdcb2a50a05",
		armsubscription.AcceptOwnershipRequest{
			Properties: &armsubscription.AcceptOwnershipRequestProperties{
				DisplayName: to.Ptr("Test Subscription"),
				Tags: map[string]*string{
					"tag1": to.Ptr("Messi"),
					"tag2": to.Ptr("Ronaldo"),
					"tag3": to.Ptr("Lebron"),
				},
			},
		},
		&armsubscription.ClientBeginAcceptOwnershipOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/acceptSubscriptionOwnership.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/acceptSubscriptionOwnership.json: %v", err)
	}
}

func TestSubscription_AcceptOwnershipStatus(t *testing.T) {
	// From example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/acceptOwnershipStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AcceptOwnershipStatus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsubscription.NewClient(cred, &options)
	res, err := client.AcceptOwnershipStatus(ctx,
		"291bba3f-e0a5-47bc-a099-3bdcb2a50a05",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/acceptOwnershipStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsubscription.AcceptOwnershipStatusResponse{
			AcceptOwnershipState: to.Ptr(armsubscription.AcceptOwnershipPending),
			BillingOwner:         to.Ptr("abc@test.com"),
			DisplayName:          to.Ptr("Test Subscription"),
			SubscriptionID:       to.Ptr("291bba3f-e0a5-47bc-a099-3bdcb2a50a05"),
			SubscriptionTenantID: to.Ptr("6c541ca7-1cab-4ea0-adde-6305e1d534e2"),
			Tags: map[string]*string{
				"tag1": to.Ptr("TagValue1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AcceptOwnershipStatusResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AcceptOwnershipStatusResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/acceptOwnershipStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/getOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"getOperations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsubscription.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/getOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsubscription.OperationListResult{
			Value: []*armsubscription.Operation{
				{
					Name: to.Ptr("Microsoft.Subscription/createOperation/action"),
					Display: &armsubscription.OperationDisplay{
						Operation: to.Ptr("Create a subscription"),
						Provider:  to.Ptr("Microsoft Subscription"),
						Resource:  to.Ptr("Resources"),
					},
					IsDataAction: to.Ptr(false),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/getOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlias_Create(t *testing.T) {
	// From example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/createAlias.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateAlias"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsubscription.NewAliasClient(cred, &options)
	poller, err := client.BeginCreate(ctx,
		"aliasForNewSub",
		armsubscription.PutAliasRequest{
			Properties: &armsubscription.PutAliasRequestProperties{
				AdditionalProperties: &armsubscription.PutAliasRequestAdditionalProperties{
					SubscriptionOwnerID:  to.Ptr("f09b39eb-c496-482c-9ab9-afd799572f4c"),
					SubscriptionTenantID: to.Ptr("66f6e4d6-07dc-4aea-94ea-e12d3026a3c8"),
					Tags: map[string]*string{
						"tag1": to.Ptr("Messi"),
						"tag2": to.Ptr("Ronaldo"),
						"tag3": to.Ptr("Lebron"),
					},
				},
				BillingScope: to.Ptr("/billingAccounts/af6231a7-7f8d-4fcc-a993-dd8466108d07:c663dac6-a9a5-405a-8938-cd903e12ab5b_2019_05_31/billingProfiles/QWDQ-QWHI-AUW-SJDO-DJH/invoiceSections/FEUF-EUHE-ISJ-SKDW-DJH"),
				DisplayName:  to.Ptr("Test Subscription"),
				Workload:     to.Ptr(armsubscription.WorkloadProduction),
			},
		},
		&armsubscription.AliasClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/createAlias.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/createAlias.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsubscription.AliasResponse{
			Name: to.Ptr("string"),
			Type: to.Ptr("string"),
			ID:   to.Ptr("string"),
			Properties: &armsubscription.AliasResponseProperties{
				AcceptOwnershipState: to.Ptr(armsubscription.AcceptOwnershipPending),
				AcceptOwnershipURL:   to.Ptr("/providers/Microsoft.Subscription/e2283d0f-acad-4904-b803-627dd74cc072/acceptOwnership"),
				BillingScope:         to.Ptr("/billingAccounts/af6231a7-7f8d-4fcc-a993-dd8466108d07:c663dac6-a9a5-405a-8938-cd903e12ab5b_2019_05_31/billingProfiles/QWDQ-QWHI-AUW-SJDO-DJH/invoiceSections/FEUF-EUHE-ISJ-SKDW-DJH"),
				DisplayName:          to.Ptr("Test Subscription"),
				ProvisioningState:    to.Ptr(armsubscription.ProvisioningStateSucceeded),
				SubscriptionID:       to.Ptr("e2283d0f-acad-4904-b803-627dd74cc072"),
				SubscriptionOwnerID:  to.Ptr("f09b39eb-c496-482c-9ab9-afd799572f4c"),
				Tags: map[string]*string{
					"tag1": to.Ptr("Messi"),
					"tag2": to.Ptr("Ronaldo"),
					"tag3": to.Ptr("Lebron"),
				},
				Workload: to.Ptr(armsubscription.WorkloadProduction),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AliasResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AliasResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/createAlias.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlias_Get(t *testing.T) {
	// From example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/getAlias.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetAlias"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsubscription.NewAliasClient(cred, &options)
	res, err := client.Get(ctx,
		"aliasForNewSub",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/getAlias.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsubscription.AliasResponse{
			Name: to.Ptr("string"),
			Type: to.Ptr("string"),
			ID:   to.Ptr("string"),
			Properties: &armsubscription.AliasResponseProperties{
				AcceptOwnershipState: to.Ptr(armsubscription.AcceptOwnershipPending),
				AcceptOwnershipURL:   to.Ptr("/providers/Microsoft.Subscription/e2283d0f-acad-4904-b803-627dd74cc072/acceptOwnership"),
				BillingScope:         to.Ptr("/billingAccounts/af6231a7-7f8d-4fcc-a993-dd8466108d07:c663dac6-a9a5-405a-8938-cd903e12ab5b_2019_05_31/billingProfiles/QWDQ-QWHI-AUW-SJDO-DJH/invoiceSections/FEUF-EUHE-ISJ-SKDW-DJH"),
				DisplayName:          to.Ptr("Test Subscription"),
				ProvisioningState:    to.Ptr(armsubscription.ProvisioningStateSucceeded),
				SubscriptionID:       to.Ptr("e2283d0f-acad-4904-b803-627dd74cc072"),
				SubscriptionOwnerID:  to.Ptr("f09b39eb-c496-482c-9ab9-afd799572f4c"),
				Tags: map[string]*string{
					"tag1": to.Ptr("Messi"),
					"tag2": to.Ptr("Ronaldo"),
					"tag3": to.Ptr("Lebron"),
				},
				Workload: to.Ptr(armsubscription.WorkloadProduction),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AliasResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AliasResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/getAlias.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlias_Delete(t *testing.T) {
	// From example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/deleteAlias.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteAlias"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsubscription.NewAliasClient(cred, &options)
	_, err := client.Delete(ctx,
		"aliasForNewSub",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/deleteAlias.json: %v", err)
	}
}

func TestAlias_List(t *testing.T) {
	// From example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/listAlias.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListAlias"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsubscription.NewAliasClient(cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/listAlias.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsubscription.AliasListResult{
			Value: []*armsubscription.AliasResponse{
				{
					Name: to.Ptr("string"),
					Type: to.Ptr("string"),
					ID:   to.Ptr("string"),
					Properties: &armsubscription.AliasResponseProperties{
						AcceptOwnershipState: to.Ptr(armsubscription.AcceptOwnershipPending),
						AcceptOwnershipURL:   to.Ptr("/providers/Microsoft.Subscription/e2283d0f-acad-4904-b803-627dd74cc072/acceptOwnership"),
						BillingScope:         to.Ptr("/billingAccounts/af6231a7-7f8d-4fcc-a993-dd8466108d07:c663dac6-a9a5-405a-8938-cd903e12ab5b_2019_05_31/billingProfiles/QWDQ-QWHI-AUW-SJDO-DJH/invoiceSections/FEUF-EUHE-ISJ-SKDW-DJH"),
						DisplayName:          to.Ptr("Test Subscription"),
						ProvisioningState:    to.Ptr(armsubscription.ProvisioningStateSucceeded),
						SubscriptionID:       to.Ptr("e2283d0f-acad-4904-b803-627dd74cc072"),
						SubscriptionOwnerID:  to.Ptr("f09b39eb-c496-482c-9ab9-afd799572f4c"),
						Tags: map[string]*string{
							"tag1": to.Ptr("Messi"),
							"tag2": to.Ptr("Ronaldo"),
							"tag3": to.Ptr("Lebron"),
						},
						Workload: to.Ptr(armsubscription.WorkloadProduction),
					},
				},
				{
					Name: to.Ptr("string"),
					Type: to.Ptr("string"),
					ID:   to.Ptr("string"),
					Properties: &armsubscription.AliasResponseProperties{
						AcceptOwnershipState: to.Ptr(armsubscription.AcceptOwnershipPending),
						AcceptOwnershipURL:   to.Ptr("/providers/Microsoft.Subscription/091c6e56-a835-4422-a082-0427308ca9ee/acceptOwnership"),
						BillingScope:         to.Ptr("/billingAccounts/af6231a7-7f8d-4fcc-a993-dd8466108d07:c663dac6-a9a5-405a-8938-cd903e12ab5b_2019_05_31/billingProfiles/QWDQ-QWHI-AUW-SJDO-DJH/invoiceSections/FEUF-EUHE-ISJ-SKDW-DJH"),
						DisplayName:          to.Ptr("Test Subscription 2"),
						ProvisioningState:    to.Ptr(armsubscription.ProvisioningStateSucceeded),
						SubscriptionID:       to.Ptr("091c6e56-a835-4422-a082-0427308ca9ee"),
						SubscriptionOwnerID:  to.Ptr("f09b39eb-c496-482c-9ab9-afd799572f4c"),
						Tags: map[string]*string{
							"tag1": to.Ptr("Messi2"),
							"tag2": to.Ptr("Ronaldo2"),
							"tag3": to.Ptr("Lebron2"),
						},
						Workload: to.Ptr(armsubscription.WorkloadProduction),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AliasListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AliasListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/listAlias.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubscriptionPolicy_AddUpdatePolicyForTenant(t *testing.T) {
	// From example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/changeTenantPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TenantPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsubscription.NewPolicyClient(cred, &options)
	res, err := client.AddUpdatePolicyForTenant(ctx,
		armsubscription.PutTenantPolicyRequestProperties{
			BlockSubscriptionsIntoTenant:    to.Ptr(true),
			BlockSubscriptionsLeavingTenant: to.Ptr(true),
			ExemptedPrincipals: []*string{
				to.Ptr("e879cf0f-2b4d-5431-109a-f72fc9868693"),
				to.Ptr("9792da87-c97b-410d-a97d-27021ba09ce6")},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/changeTenantPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsubscription.GetTenantPolicyResponse{
			Name: to.Ptr("default"),
			Type: to.Ptr("providers/Microsoft.Subscription/policies"),
			ID:   to.Ptr("providers/Microsoft.Subscription/policies/default"),
			Properties: &armsubscription.TenantPolicy{
				BlockSubscriptionsIntoTenant:    to.Ptr(true),
				BlockSubscriptionsLeavingTenant: to.Ptr(true),
				ExemptedPrincipals: []*string{
					to.Ptr("e879cf0f-2b4d-5431-109a-f72fc9868693"),
					to.Ptr("9792da87-c97b-410d-a97d-27021ba09ce6")},
				PolicyID: to.Ptr("291bba3f-e0a5-47bc-a099-3bdcb2a50a05"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GetTenantPolicyResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GetTenantPolicyResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/changeTenantPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubscriptionPolicy_GetPolicyForTenant(t *testing.T) {
	// From example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/getTenantPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"getTenantPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsubscription.NewPolicyClient(cred, &options)
	res, err := client.GetPolicyForTenant(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/getTenantPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsubscription.GetTenantPolicyResponse{
			Name: to.Ptr("default"),
			Type: to.Ptr("providers/Microsoft.Subscription/policies"),
			ID:   to.Ptr("providers/Microsoft.Subscription/policies/default"),
			Properties: &armsubscription.TenantPolicy{
				BlockSubscriptionsIntoTenant:    to.Ptr(true),
				BlockSubscriptionsLeavingTenant: to.Ptr(true),
				ExemptedPrincipals: []*string{
					to.Ptr("e879cf0f-2b4d-5431-109a-f72fc9868693"),
					to.Ptr("9792da87-c97b-410d-a97d-27021ba09ce6")},
				PolicyID: to.Ptr("291bba3f-e0a5-47bc-a099-3bdcb2a50a05"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GetTenantPolicyResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GetTenantPolicyResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/getTenantPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubscriptionPolicy_ListPolicyForTenant(t *testing.T) {
	// From example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/getTenantPolicyList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"getTenantPolicyList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsubscription.NewPolicyClient(cred, &options)
	pager := client.ListPolicyForTenant(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/getTenantPolicyList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsubscription.GetTenantPolicyListResponse{
			Value: []*armsubscription.GetTenantPolicyResponse{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("providers/Microsoft.Subscription/policies"),
					ID:   to.Ptr("providers/Microsoft.Subscription/policies/default"),
					Properties: &armsubscription.TenantPolicy{
						BlockSubscriptionsIntoTenant:    to.Ptr(true),
						BlockSubscriptionsLeavingTenant: to.Ptr(true),
						ExemptedPrincipals: []*string{
							to.Ptr("e879cf0f-2b4d-5431-109a-f72fc9868693"),
							to.Ptr("9792da87-c97b-410d-a97d-27021ba09ce6")},
						PolicyID: to.Ptr("291bba3f-e0a5-47bc-a099-3bdcb2a50a05"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GetTenantPolicyListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GetTenantPolicyListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/getTenantPolicyList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBillingAccount_GetPolicy(t *testing.T) {
	// From example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/getBillingAccountPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetBillingAccountPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsubscription.NewBillingAccountClient(cred, &options)
	res, err := client.GetPolicy(ctx,
		"testBillingAccountId",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/getBillingAccountPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsubscription.BillingAccountPoliciesResponse{
			Name: to.Ptr("testBillingAccountId"),
			Type: to.Ptr("Microsoft.Subscription/policies"),
			ID:   to.Ptr("/providers/Microsoft.Subscription/Policies/policyForBillingAccount"),
			Properties: &armsubscription.BillingAccountPoliciesResponseProperties{
				AllowTransfers: to.Ptr(true),
				ServiceTenants: []*armsubscription.ServiceTenantResponse{
					{
						TenantID:   to.Ptr("b8ed2088-c458-4e77-bd61-9e048d96a1c0"),
						TenantName: to.Ptr("testServiceTenant"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BillingAccountPoliciesResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BillingAccountPoliciesResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/subscription/resource-manager/Microsoft.Subscription/stable/2021-10-01/examples/getBillingAccountPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
