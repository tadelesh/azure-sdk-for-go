//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsubscription

import (
	"context"
	"errors"
	"net/http"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// TenantsClient contains the methods for the Tenants group.
// Don't use this type directly, use NewTenantsClient() instead.
type TenantsClient struct {
	ep string
	pl runtime.Pipeline
}

// NewTenantsClient creates a new instance of TenantsClient with the specified values.
func NewTenantsClient(con *arm.Connection) *TenantsClient {
	return &TenantsClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version)}
}

// List - Gets the tenants for your account.
// If the operation fails it returns a generic error.
func (client *TenantsClient) List(options *TenantsListOptions) *TenantsListPager {
	return &TenantsListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp TenantsListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.TenantListResult.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *TenantsClient) listCreateRequest(ctx context.Context, options *TenantsListOptions) (*policy.Request, error) {
	urlPath := "/tenants"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2016-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *TenantsClient) listHandleResponse(resp *http.Response) (TenantsListResponse, error) {
	result := TenantsListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.TenantListResult); err != nil {
		return TenantsListResponse{}, err
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *TenantsClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}
