//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsubscription

import (
	"encoding/json"
	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// AliasBeginCreateOptions contains the optional parameters for the Alias.BeginCreate method.
type AliasBeginCreateOptions struct {
	// placeholder for future optional parameters
}

// AliasDeleteOptions contains the optional parameters for the Alias.Delete method.
type AliasDeleteOptions struct {
	// placeholder for future optional parameters
}

// AliasGetOptions contains the optional parameters for the Alias.Get method.
type AliasGetOptions struct {
	// placeholder for future optional parameters
}

// AliasListOptions contains the optional parameters for the Alias.List method.
type AliasListOptions struct {
	// placeholder for future optional parameters
}

// CanceledSubscriptionID - The ID of the canceled subscription
type CanceledSubscriptionID struct {
	// READ-ONLY; The ID of the canceled subscription
	Value *string `json:"value,omitempty" azure:"ro"`
}

// EnabledSubscriptionID - The ID of the subscriptions that is being enabled
type EnabledSubscriptionID struct {
	// READ-ONLY; The ID of the subscriptions that is being enabled
	Value *string `json:"value,omitempty" azure:"ro"`
}

// ErrorResponse - Describes the format of Error response.
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// Error code
	Code *string `json:"code,omitempty"`

	// Error message indicating why the operation failed.
	Message *string `json:"message,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// ErrorResponseBody - Error response indicates that the service is not able to process the incoming request. The reason is provided in the error message.
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponseBody struct {
	raw string
	// The details of the error.
	InnerError *ErrorResponse `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponseBody.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponseBody) Error() string {
	return e.raw
}

// Location information.
type Location struct {
	// READ-ONLY; The display name of the location.
	DisplayName *string `json:"displayName,omitempty" azure:"ro"`

	// READ-ONLY; The fully qualified ID of the location. For example, /subscriptions/00000000-0000-0000-0000-000000000000/locations/westus.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The latitude of the location.
	Latitude *string `json:"latitude,omitempty" azure:"ro"`

	// READ-ONLY; The longitude of the location.
	Longitude *string `json:"longitude,omitempty" azure:"ro"`

	// READ-ONLY; The location name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The subscription ID.
	SubscriptionID *string `json:"subscriptionId,omitempty" azure:"ro"`
}

// LocationListResult - Location list operation response.
type LocationListResult struct {
	// An array of locations.
	Value []*Location `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type LocationListResult.
func (l LocationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", l.Value)
	return json.Marshal(objectMap)
}

// Operation - REST API operation
type Operation struct {
	// The object that represents the operation.
	Display *OperationDisplay `json:"display,omitempty"`

	// Operation name: {provider}/{resource}/{operation}
	Name *string `json:"name,omitempty"`
}

// OperationDisplay - The object that represents the operation.
type OperationDisplay struct {
	// Operation type: Read, write, delete, etc.
	Operation *string `json:"operation,omitempty"`

	// Service provider: Microsoft.Subscription
	Provider *string `json:"provider,omitempty"`

	// Resource on which the operation is performed: Profile, endpoint, etc.
	Resource *string `json:"resource,omitempty"`
}

// OperationListResult - Result of the request to list operations. It contains a list of operations and a URL link to get the next set of results.
type OperationListResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty"`

	// List of operations.
	Value []*Operation `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// PutAliasListResult - The list of aliases.
type PutAliasListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The list of alias.
	Value []*PutAliasResponse `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PutAliasListResult.
func (p PutAliasListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PutAliasRequest - The parameters required to create a new subscription.
type PutAliasRequest struct {
	// REQUIRED; Put alias request properties.
	Properties *PutAliasRequestProperties `json:"properties,omitempty"`
}

// PutAliasRequestProperties - Put subscription properties.
type PutAliasRequestProperties struct {
	// Determines whether subscription is fieldLed, partnerLed or LegacyEA
	BillingScope *string `json:"billingScope,omitempty"`

	// The friendly name of the subscription.
	DisplayName *string `json:"displayName,omitempty"`

	// Reseller ID, basically MPN Id
	ResellerID *string `json:"resellerId,omitempty"`

	// This parameter can be used to create alias for existing subscription Id
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// The workload type of the subscription. It can be either Production or DevTest.
	Workload *Workload `json:"workload,omitempty"`
}

// PutAliasResponse - Subscription Information with the alias.
type PutAliasResponse struct {
	// Put Alias response properties.
	Properties *PutAliasResponseProperties `json:"properties,omitempty"`

	// READ-ONLY; Fully qualified ID for the alias resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Alias ID.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type, Microsoft.Subscription/aliases.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// PutAliasResponseProperties - Put subscription creation result properties.
type PutAliasResponseProperties struct {
	// The provisioning state of the resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty"`

	// READ-ONLY; Newly created subscription Id.
	SubscriptionID *string `json:"subscriptionId,omitempty" azure:"ro"`
}

// RenamedSubscriptionID - The ID of the subscriptions that is being renamed
type RenamedSubscriptionID struct {
	// READ-ONLY; The ID of the subscriptions that is being renamed
	Value *string `json:"value,omitempty" azure:"ro"`
}

// Subscription information.
type Subscription struct {
	// The authorization source of the request. Valid values are one or more combinations of Legacy, RoleBased, Bypassed, Direct and Management. For example,
	// 'Legacy, RoleBased'.
	AuthorizationSource *string `json:"authorizationSource,omitempty"`

	// The subscription policies.
	SubscriptionPolicies *SubscriptionPolicies `json:"subscriptionPolicies,omitempty"`

	// READ-ONLY; The subscription display name.
	DisplayName *string `json:"displayName,omitempty" azure:"ro"`

	// READ-ONLY; The fully qualified ID for the subscription. For example, /subscriptions/00000000-0000-0000-0000-000000000000.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted.
	State *SubscriptionState `json:"state,omitempty" azure:"ro"`

	// READ-ONLY; The subscription ID.
	SubscriptionID *string `json:"subscriptionId,omitempty" azure:"ro"`
}

// SubscriptionCancelOptions contains the optional parameters for the Subscription.Cancel method.
type SubscriptionCancelOptions struct {
	// placeholder for future optional parameters
}

// SubscriptionEnableOptions contains the optional parameters for the Subscription.Enable method.
type SubscriptionEnableOptions struct {
	// placeholder for future optional parameters
}

// SubscriptionListResult - Subscription list operation response.
type SubscriptionListResult struct {
	// REQUIRED; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// An array of subscriptions.
	Value []*Subscription `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SubscriptionListResult.
func (s SubscriptionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SubscriptionName - The new name of the subscription.
type SubscriptionName struct {
	// New subscription name
	SubscriptionName *string `json:"subscriptionName,omitempty"`
}

// SubscriptionPolicies - Subscription policies.
type SubscriptionPolicies struct {
	// READ-ONLY; The subscription location placement ID. The ID indicates which regions are visible for a subscription. For example, a subscription with a
	// location placement Id of Public_2014-09-01 has access to Azure
	// public regions.
	LocationPlacementID *string `json:"locationPlacementId,omitempty" azure:"ro"`

	// READ-ONLY; The subscription quota ID.
	QuotaID *string `json:"quotaId,omitempty" azure:"ro"`

	// READ-ONLY; The subscription spending limit.
	SpendingLimit *SpendingLimit `json:"spendingLimit,omitempty" azure:"ro"`
}

// SubscriptionRenameOptions contains the optional parameters for the Subscription.Rename method.
type SubscriptionRenameOptions struct {
	// placeholder for future optional parameters
}

// SubscriptionsGetOptions contains the optional parameters for the Subscriptions.Get method.
type SubscriptionsGetOptions struct {
	// placeholder for future optional parameters
}

// SubscriptionsListLocationsOptions contains the optional parameters for the Subscriptions.ListLocations method.
type SubscriptionsListLocationsOptions struct {
	// placeholder for future optional parameters
}

// SubscriptionsListOptions contains the optional parameters for the Subscriptions.List method.
type SubscriptionsListOptions struct {
	// placeholder for future optional parameters
}

// TenantIDDescription - Tenant Id information.
type TenantIDDescription struct {
	// READ-ONLY; The fully qualified ID of the tenant. For example, /tenants/00000000-0000-0000-0000-000000000000.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The tenant ID. For example, 00000000-0000-0000-0000-000000000000.
	TenantID *string `json:"tenantId,omitempty" azure:"ro"`
}

// TenantListResult - Tenant Ids information.
type TenantListResult struct {
	// REQUIRED; The URL to use for getting the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// An array of tenants.
	Value []*TenantIDDescription `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TenantListResult.
func (t TenantListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", t.NextLink)
	populate(objectMap, "value", t.Value)
	return json.Marshal(objectMap)
}

// TenantsListOptions contains the optional parameters for the Tenants.List method.
type TenantsListOptions struct {
	// placeholder for future optional parameters
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}
