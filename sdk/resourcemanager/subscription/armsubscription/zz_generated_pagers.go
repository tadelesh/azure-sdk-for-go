//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsubscription

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PolicyClientListPolicyForTenantPager provides operations for iterating over paged responses.
type PolicyClientListPolicyForTenantPager struct {
	client    *PolicyClient
	current   PolicyClientListPolicyForTenantResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PolicyClientListPolicyForTenantResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PolicyClientListPolicyForTenantPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.GetTenantPolicyListResponse.NextLink == nil || len(*p.current.GetTenantPolicyListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PolicyClientListPolicyForTenantPager) NextPage(ctx context.Context) (PolicyClientListPolicyForTenantResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PolicyClientListPolicyForTenantResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PolicyClientListPolicyForTenantResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PolicyClientListPolicyForTenantResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PolicyClientListPolicyForTenantResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listPolicyForTenantHandleResponse(resp)
	if err != nil {
		return PolicyClientListPolicyForTenantResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SubscriptionsClientListLocationsPager provides operations for iterating over paged responses.
type SubscriptionsClientListLocationsPager struct {
	client    *SubscriptionsClient
	current   SubscriptionsClientListLocationsResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SubscriptionsClientListLocationsPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *SubscriptionsClientListLocationsPager) NextPage(ctx context.Context) (SubscriptionsClientListLocationsResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return SubscriptionsClientListLocationsResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SubscriptionsClientListLocationsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SubscriptionsClientListLocationsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SubscriptionsClientListLocationsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listLocationsHandleResponse(resp)
	if err != nil {
		return SubscriptionsClientListLocationsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SubscriptionsClientListPager provides operations for iterating over paged responses.
type SubscriptionsClientListPager struct {
	client    *SubscriptionsClient
	current   SubscriptionsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SubscriptionsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SubscriptionsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListResult.NextLink == nil || len(*p.current.ListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SubscriptionsClientListPager) NextPage(ctx context.Context) (SubscriptionsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SubscriptionsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SubscriptionsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SubscriptionsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SubscriptionsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return SubscriptionsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// TenantsClientListPager provides operations for iterating over paged responses.
type TenantsClientListPager struct {
	client    *TenantsClient
	current   TenantsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TenantsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *TenantsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TenantListResult.NextLink == nil || len(*p.current.TenantListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *TenantsClientListPager) NextPage(ctx context.Context) (TenantsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return TenantsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return TenantsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return TenantsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return TenantsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return TenantsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
