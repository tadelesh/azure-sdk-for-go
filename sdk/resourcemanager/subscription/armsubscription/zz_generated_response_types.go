//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsubscription

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"time"
)

// AliasClientCreatePollerResponse contains the response from method AliasClient.Create.
type AliasClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AliasClientCreatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AliasClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AliasClientCreateResponse, error) {
	respType := AliasClientCreateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.AliasResponse)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a AliasClientCreatePollerResponse from the provided client and resume token.
func (l *AliasClientCreatePollerResponse) Resume(ctx context.Context, client *AliasClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AliasClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &AliasClientCreatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// AliasClientCreateResponse contains the response from method AliasClient.Create.
type AliasClientCreateResponse struct {
	AliasResponse
}

// AliasClientDeleteResponse contains the response from method AliasClient.Delete.
type AliasClientDeleteResponse struct {
	// placeholder for future response values
}

// AliasClientGetResponse contains the response from method AliasClient.Get.
type AliasClientGetResponse struct {
	AliasResponse
}

// AliasClientListResponse contains the response from method AliasClient.List.
type AliasClientListResponse struct {
	AliasListResult
}

// BillingAccountClientGetPolicyResponse contains the response from method BillingAccountClient.GetPolicy.
type BillingAccountClientGetPolicyResponse struct {
	BillingAccountPoliciesResponse
}

// ClientAcceptOwnershipPollerResponse contains the response from method Client.AcceptOwnership.
type ClientAcceptOwnershipPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ClientAcceptOwnershipPoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ClientAcceptOwnershipPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ClientAcceptOwnershipResponse, error) {
	respType := ClientAcceptOwnershipResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a ClientAcceptOwnershipPollerResponse from the provided client and resume token.
func (l *ClientAcceptOwnershipPollerResponse) Resume(ctx context.Context, client *Client, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("Client.AcceptOwnership", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ClientAcceptOwnershipPoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// ClientAcceptOwnershipResponse contains the response from method Client.AcceptOwnership.
type ClientAcceptOwnershipResponse struct {
	// placeholder for future response values
}

// ClientAcceptOwnershipStatusResponse contains the response from method Client.AcceptOwnershipStatus.
type ClientAcceptOwnershipStatusResponse struct {
	AcceptOwnershipStatusResponse
}

// ClientCancelResponse contains the response from method Client.Cancel.
type ClientCancelResponse struct {
	CanceledSubscriptionID
}

// ClientEnableResponse contains the response from method Client.Enable.
type ClientEnableResponse struct {
	EnabledSubscriptionID
}

// ClientRenameResponse contains the response from method Client.Rename.
type ClientRenameResponse struct {
	RenamedSubscriptionID
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationListResult
}

// PolicyClientAddUpdatePolicyForTenantResponse contains the response from method PolicyClient.AddUpdatePolicyForTenant.
type PolicyClientAddUpdatePolicyForTenantResponse struct {
	GetTenantPolicyResponse
}

// PolicyClientGetPolicyForTenantResponse contains the response from method PolicyClient.GetPolicyForTenant.
type PolicyClientGetPolicyForTenantResponse struct {
	GetTenantPolicyResponse
}

// PolicyClientListPolicyForTenantResponse contains the response from method PolicyClient.ListPolicyForTenant.
type PolicyClientListPolicyForTenantResponse struct {
	GetTenantPolicyListResponse
}

// SubscriptionsClientGetResponse contains the response from method SubscriptionsClient.Get.
type SubscriptionsClientGetResponse struct {
	Subscription
}

// SubscriptionsClientListLocationsResponse contains the response from method SubscriptionsClient.ListLocations.
type SubscriptionsClientListLocationsResponse struct {
	LocationListResult
}

// SubscriptionsClientListResponse contains the response from method SubscriptionsClient.List.
type SubscriptionsClientListResponse struct {
	ListResult
}

// TenantsClientListResponse contains the response from method TenantsClient.List.
type TenantsClientListResponse struct {
	TenantListResult
}
