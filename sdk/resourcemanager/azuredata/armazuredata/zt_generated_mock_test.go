//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazuredata_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"
	"time"

	"encoding/json"
	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azuredata/armazuredata"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/ListOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all of the available SQL Server Registration API operations."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazuredata.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/ListOperation.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armazuredata.OperationListResult{
			Value: []*armazuredata.Operation{
				{
					Name: to.Ptr("Microsoft.AzureData/sqlServerRegistrations/read"),
					Display: &armazuredata.OperationDisplay{
						Description: to.Ptr("Retrives details of SQL Server Registration"),
						Operation:   to.Ptr("Get SQL Server Registration details"),
						Resource:    to.Ptr("SQL Server Registration"),
					},
				},
				{
					Name: to.Ptr("Microsoft.AzureData/sqlServerRegistrations/write"),
					Display: &armazuredata.OperationDisplay{
						Description: to.Ptr("Create a new or change properties of existing SQL Server Registration"),
						Operation:   to.Ptr("Create a new or update existing SQL Server Registration"),
						Resource:    to.Ptr("SQL Server Registration"),
					},
				},
				{
					Name: to.Ptr("Microsoft.AzureData/sqlServerRegistrations/delete"),
					Display: &armazuredata.OperationDisplay{
						Description: to.Ptr("Delete existing SQL Server Registration"),
						Operation:   to.Ptr("Delete existing SQL Server Registration"),
						Resource:    to.Ptr("SQL Server Registration"),
					},
				},
				{
					Name: to.Ptr("Microsoft.AzureData/operations/read"),
					Display: &armazuredata.OperationDisplay{
						Resource: to.Ptr("Available REST operations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.AzureData/sqlServers/read"),
					Display: &armazuredata.OperationDisplay{
						Description: to.Ptr("Retrieves details of SQL Server"),
						Operation:   to.Ptr("Get SQL Server Instance details"),
					},
				},
				{
					Name: to.Ptr("Microsoft.AzureData/sqlServers/write"),
					Display: &armazuredata.OperationDisplay{
						Description: to.Ptr("Create a new or change properties of existing SQL Server"),
						Operation:   to.Ptr("Create new or update existing SQL Server"),
					},
				},
				{
					Name: to.Ptr("Microsoft.AzureData/sqlServers/delete"),
					Display: &armazuredata.OperationDisplay{
						Description: to.Ptr("Delete exisiting SQL Server"),
						Operation:   to.Ptr("Delete exisiting SQL Server"),
					},
				},
				{
					Name: to.Ptr("Microsoft.AzureData/sqlInstance/read"),
					Display: &armazuredata.OperationDisplay{
						Description: to.Ptr("Retrieves details of SQL Instance"),
						Operation:   to.Ptr("Get SQL Instance details"),
					},
				},
				{
					Name: to.Ptr("Microsoft.AzureData/sqlInstance/write"),
					Display: &armazuredata.OperationDisplay{
						Description: to.Ptr("Create a new or change properties of existing SQL Instance"),
						Operation:   to.Ptr("Create new or update existing SQL Instance"),
					},
				},
				{
					Name: to.Ptr("Microsoft.AzureData/sqlInstance/delete"),
					Display: &armazuredata.OperationDisplay{
						Description: to.Ptr("Delete exisiting SQL Instance"),
						Operation:   to.Ptr("Delete exisiting SQL Instance"),
					},
				},
				{
					Name: to.Ptr("Microsoft.AzureData/postgresInstances/read"),
					Display: &armazuredata.OperationDisplay{
						Description: to.Ptr("Retrieves details of Postgres Instances"),
						Operation:   to.Ptr("Get Postgres Instance details"),
					},
				},
				{
					Name: to.Ptr("Microsoft.AzureData/postgresInstances/write"),
					Display: &armazuredata.OperationDisplay{
						Description: to.Ptr("Create a new or change properties of existing Postgres Instances"),
						Operation:   to.Ptr("Create new or update existing Postgres Instances"),
					},
				},
				{
					Name: to.Ptr("Microsoft.AzureData/postgresInstances/delete"),
					Display: &armazuredata.OperationDisplay{
						Description: to.Ptr("Delete exisiting Postgres Instances"),
						Operation:   to.Ptr("Delete exisiting Postgres Instances"),
					},
				},
				{
					Name: to.Ptr("Microsoft.AzureData/hybridDataManagers/read"),
					Display: &armazuredata.OperationDisplay{
						Description: to.Ptr("Retrieves details of HybridDataManagers"),
						Operation:   to.Ptr("Get HybridDataManagers details"),
					},
				},
				{
					Name: to.Ptr("Microsoft.AzureData/hybridDataManagers/write"),
					Display: &armazuredata.OperationDisplay{
						Description: to.Ptr("Create a new or change properties of existing HybridDataManagers"),
						Operation:   to.Ptr("Create new or update existing HybridDataManagers"),
					},
				},
				{
					Name: to.Ptr("Microsoft.AzureData/hybridDataManagers/delete"),
					Display: &armazuredata.OperationDisplay{
						Description: to.Ptr("Delete exisiting HybridDataManagers"),
						Operation:   to.Ptr("Delete exisiting HybridDataManagers"),
					},
				},
				{
					Name: to.Ptr("Microsoft.AzureData/SqlBigDataClusters/read"),
					Display: &armazuredata.OperationDisplay{
						Description: to.Ptr("Retrieves details of SqlBigDataClusters"),
						Operation:   to.Ptr("Get SqlBigDataClusters details"),
					},
				},
				{
					Name: to.Ptr("Microsoft.AzureData/SqlBigDataClusters/write"),
					Display: &armazuredata.OperationDisplay{
						Description: to.Ptr("Create a new or change properties of existing SqlBigDataClusters"),
						Operation:   to.Ptr("Create new or update existing SqlBigDataClusters"),
					},
				},
				{
					Name: to.Ptr("Microsoft.AzureData/SqlBigDataClusters/delete"),
					Display: &armazuredata.OperationDisplay{
						Description: to.Ptr("Delete exisiting SqlBigDataClusters"),
						Operation:   to.Ptr("Delete exisiting SqlBigDataClusters"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/ListOperation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLServerRegistrations_Get(t *testing.T) {
	// From example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/GetSqlServerRegistration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a SQL Server registration."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazuredata.NewSQLServerRegistrationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"testsqlregistration",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/GetSqlServerRegistration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazuredata.SQLServerRegistration{
			Name:     to.Ptr("testsqlregistration"),
			Type:     to.Ptr("Microsoft.AzureData/SqlServerRegistrations"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureData/SqlServerRegistrations/testsqlregistration"),
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
			Properties: &armazuredata.SQLServerRegistrationProperties{},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLServerRegistration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLServerRegistration)
			t.Fatalf("Mock response is not equal to example response for example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/GetSqlServerRegistration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLServerRegistrations_CreateOrUpdate(t *testing.T) {
	// From example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/CreateOrUpdateSqlServerRegistration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a SQL Server registration."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazuredata.NewSQLServerRegistrationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"testrg",
		"testsqlregistration",
		armazuredata.SQLServerRegistration{
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
			Properties: &armazuredata.SQLServerRegistrationProperties{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/CreateOrUpdateSqlServerRegistration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazuredata.SQLServerRegistration{
			Name:     to.Ptr("testsqlregistration"),
			Type:     to.Ptr("Microsoft.AzureData/SqlServerRegistrations"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureData/SqlServerRegistrations/testsqlregistration"),
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
			Properties: &armazuredata.SQLServerRegistrationProperties{},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLServerRegistration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLServerRegistration)
			t.Fatalf("Mock response is not equal to example response for example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/CreateOrUpdateSqlServerRegistration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLServerRegistrations_Delete(t *testing.T) {
	// From example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/DeleteSqlServerRegistration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a SQL Server registration."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazuredata.NewSQLServerRegistrationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"testrg",
		"testsqlregistration",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/DeleteSqlServerRegistration.json: %v", err)
	}
}

func TestSQLServerRegistrations_Update(t *testing.T) {
	// From example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/UpdateSqlServerRegistration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates a SQL Server Registration tags."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazuredata.NewSQLServerRegistrationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Update(ctx,
		"testrg",
		"testsqlregistration",
		armazuredata.SQLServerRegistrationUpdate{
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/UpdateSqlServerRegistration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazuredata.SQLServerRegistration{
			Name:     to.Ptr("testsqlregistration"),
			Type:     to.Ptr("Microsoft.AzureData/SqlServerRegistrations"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureData/SqlServerRegistrations/testsqlregistration"),
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
			Properties: &armazuredata.SQLServerRegistrationProperties{},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLServerRegistration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLServerRegistration)
			t.Fatalf("Mock response is not equal to example response for example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/UpdateSqlServerRegistration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLServerRegistrations_ListByResourceGroup(t *testing.T) {
	// From example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/ListByResourceGroupSqlServerRegistration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets all SQL Server registrations in a resource group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazuredata.NewSQLServerRegistrationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByResourceGroup("testrg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/ListByResourceGroupSqlServerRegistration.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armazuredata.SQLServerRegistrationListResult{
			Value: []*armazuredata.SQLServerRegistration{
				{
					Name:     to.Ptr("testsqlregistration1"),
					Type:     to.Ptr("Microsoft.AzureData/SqlServerRegistrations"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureData/SqlServerRegistrations/testsqlregistration1"),
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					Properties: &armazuredata.SQLServerRegistrationProperties{},
				},
				{
					Name:     to.Ptr("testsqlregistration2"),
					Type:     to.Ptr("Microsoft.AzureData/SqlServerRegistrations"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureData/SqlServerRegistrations/testsqlregistration2"),
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					Properties: &armazuredata.SQLServerRegistrationProperties{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SQLServerRegistrationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SQLServerRegistrationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/ListByResourceGroupSqlServerRegistration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLServerRegistrations_List(t *testing.T) {
	// From example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/ListSubscriptionSqlServerRegistration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets all SQL Server registrations in a subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazuredata.NewSQLServerRegistrationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/ListSubscriptionSqlServerRegistration.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armazuredata.SQLServerRegistrationListResult{
			Value: []*armazuredata.SQLServerRegistration{
				{
					Name:     to.Ptr("testsqlregistration1"),
					Type:     to.Ptr("Microsoft.AzureData/SqlServerRegistrations"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureData/SqlServerRegistrations/testsqlregistration1"),
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					Properties: &armazuredata.SQLServerRegistrationProperties{},
				},
				{
					Name:     to.Ptr("testsqlregistration2"),
					Type:     to.Ptr("Microsoft.AzureData/SqlServerRegistrations"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureData/SqlServerRegistrations/testsqlregistration2"),
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					Properties: &armazuredata.SQLServerRegistrationProperties{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SQLServerRegistrationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SQLServerRegistrationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/ListSubscriptionSqlServerRegistration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLServers_Get(t *testing.T) {
	// From example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/GetSqlServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a SQL Server."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazuredata.NewSQLServersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"testsqlregistration",
		"testsqlserver",
		&armazuredata.SQLServersClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/GetSqlServer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazuredata.SQLServer{
			Name: to.Ptr("testsqlserver"),
			Type: to.Ptr("Microsoft.AzureData/SqlServerRegistrations/SqlServers"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureData/SqlServerRegistrations/testsqlregistration/sqlServers/testsqlserver"),
			Properties: &armazuredata.SQLServerProperties{
				Cores:          to.Ptr[int32](8),
				Edition:        to.Ptr("Latin"),
				PropertyBag:    to.Ptr(""),
				RegistrationID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureData/SqlServerRegistrations/testsqlregistration"),
				Version:        to.Ptr("2008"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLServer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLServer)
			t.Fatalf("Mock response is not equal to example response for example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/GetSqlServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLServers_CreateOrUpdate(t *testing.T) {
	// From example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/CreateOrUpdateSqlServerWithRegistrationGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a SQL Server in a Registration group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazuredata.NewSQLServersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"testrg",
		"testsqlregistration",
		"testsqlserver",
		armazuredata.SQLServer{
			Properties: &armazuredata.SQLServerProperties{
				Cores:          to.Ptr[int32](8),
				Edition:        to.Ptr("Latin"),
				PropertyBag:    to.Ptr(""),
				RegistrationID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureData/SqlServerRegistrations/testsqlregistration"),
				Version:        to.Ptr("2008"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/CreateOrUpdateSqlServerWithRegistrationGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazuredata.SQLServer{
			Name: to.Ptr("testsqlserver"),
			Type: to.Ptr("Microsoft.AzureData/SqlServerRegistrations/SqlServers"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureData/SqlServerRegistrations/testsqlregistration/sqlServers/testsqlserver"),
			Properties: &armazuredata.SQLServerProperties{
				Cores:          to.Ptr[int32](8),
				Edition:        to.Ptr("Latin"),
				PropertyBag:    to.Ptr(""),
				RegistrationID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureData/SqlServerRegistrations/testsqlregistration"),
				Version:        to.Ptr("2008"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLServer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLServer)
			t.Fatalf("Mock response is not equal to example response for example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/CreateOrUpdateSqlServerWithRegistrationGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLServers_Delete(t *testing.T) {
	// From example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/DeleteSqlServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a SQL Server."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazuredata.NewSQLServersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"testrg",
		"testsqlregistration",
		"testsqlserver",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/DeleteSqlServer.json: %v", err)
	}
}

func TestSQLServers_ListByResourceGroup(t *testing.T) {
	// From example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/ListByResourceGroupSqlServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets all SQL Servers in a SQL Server Registration."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazuredata.NewSQLServersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByResourceGroup("testrg",
		"testsqlregistration",
		&armazuredata.SQLServersClientListByResourceGroupOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/ListByResourceGroupSqlServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armazuredata.SQLServerListResult{
			Value: []*armazuredata.SQLServer{
				{
					Name: to.Ptr("testsqlserver1"),
					Type: to.Ptr("Microsoft.AzureData/SqlServerRegistrations/SqlServers"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureData/SqlServerRegistrations/testsqlregistration/sqlServers/testsqlserver1"),
					Properties: &armazuredata.SQLServerProperties{
						Cores:          to.Ptr[int32](8),
						Edition:        to.Ptr("Latin"),
						PropertyBag:    to.Ptr(""),
						RegistrationID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureData/SqlServerRegistrations/testsqlregistration"),
						Version:        to.Ptr("2008"),
					},
				},
				{
					Name: to.Ptr("testsqlserver2"),
					Type: to.Ptr("Microsoft.AzureData/SqlServerRegistrations/SqlServers"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureData/SqlServerRegistrations/testsqlregistration/sqlServers/testsqlserver2"),
					Properties: &armazuredata.SQLServerProperties{
						Cores:          to.Ptr[int32](16),
						Edition:        to.Ptr("Latin"),
						PropertyBag:    to.Ptr(""),
						RegistrationID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureData/SqlServerRegistrations/testsqlregistration"),
						Version:        to.Ptr("2008"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SQLServerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SQLServerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azuredata/resource-manager/Microsoft.AzureData/preview/2019-07-24-preview/examples/ListByResourceGroupSqlServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
