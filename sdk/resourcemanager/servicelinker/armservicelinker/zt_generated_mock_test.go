//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armservicelinker_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/servicelinker/armservicelinker"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestLinker_List(t *testing.T) {
	// From example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/LinkList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LinkList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicelinker.NewLinkerClient(cred, &options)
	pager := client.List("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Web/sites/test-app",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/LinkList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armservicelinker.LinkerList{
			Value: []*armservicelinker.LinkerResource{
				{
					Name: to.Ptr("linkName"),
					Type: to.Ptr("Microsoft.ServiceLinker/links"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.ServiceLinker/links/linkName"),
					Properties: &armservicelinker.LinkerProperties{
						AuthInfo: &armservicelinker.SecretAuthInfo{
							AuthType: to.Ptr(armservicelinker.AuthTypeSecret),
							Name:     to.Ptr("username"),
						},
						TargetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DocumentDb/databaseAccounts/test-acc/mongodbDatabases/test-db"),
					},
					SystemData: &armservicelinker.SystemData{
						CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-12T22:05:09Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LinkerList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LinkerList)
			t.Fatalf("Mock response is not equal to example response for example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/LinkList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinker_Get(t *testing.T) {
	// From example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/Link.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Link"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicelinker.NewLinkerClient(cred, &options)
	res, err := client.Get(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Web/sites/test-app",
		"linkName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/Link.json: %v", err)
	}
	// Response check
	{
		exampleRes := armservicelinker.LinkerResource{
			Name: to.Ptr("linkName"),
			Type: to.Ptr("Microsoft.ServiceLinker/links"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Web/sites/test-app/providers/Microsoft.ServiceLinker/links/linkName"),
			Properties: &armservicelinker.LinkerProperties{
				AuthInfo: &armservicelinker.SecretAuthInfo{
					AuthType: to.Ptr(armservicelinker.AuthTypeSecret),
					Name:     to.Ptr("name"),
				},
				TargetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DocumentDb/databaseAccounts/test-acc/mongodbDatabases/test-db"),
			},
			SystemData: &armservicelinker.SystemData{
				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-12T22:05:09Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LinkerResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LinkerResource)
			t.Fatalf("Mock response is not equal to example response for example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/Link.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinker_CreateOrUpdate(t *testing.T) {
	// From example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/PutLink.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutLink"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicelinker.NewLinkerClient(cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Web/sites/test-app",
		"linkName",
		armservicelinker.LinkerResource{
			Properties: &armservicelinker.LinkerProperties{
				AuthInfo: &armservicelinker.SecretAuthInfo{
					AuthType: to.Ptr(armservicelinker.AuthTypeSecret),
					Name:     to.Ptr("name"),
					Secret:   to.Ptr("secret"),
				},
				TargetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DocumentDb/databaseAccounts/test-acc/mongodbDatabases/test-db"),
			},
		},
		&armservicelinker.LinkerClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/PutLink.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/PutLink.json: %v", err)
	}
	// Response check
	{
		exampleRes := armservicelinker.LinkerResource{
			Name: to.Ptr("linkName"),
			Type: to.Ptr("Microsoft.ServiceLinker/links"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Web/sites/test-app/providers/Microsoft.ServiceLinker/links/linkName"),
			Properties: &armservicelinker.LinkerProperties{
				AuthInfo: &armservicelinker.SecretAuthInfo{
					AuthType: to.Ptr(armservicelinker.AuthTypeSecret),
					Name:     to.Ptr("name"),
				},
				TargetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DocumentDb/databaseAccounts/test-acc/mongodbDatabases/test-db"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LinkerResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LinkerResource)
			t.Fatalf("Mock response is not equal to example response for example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/PutLink.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinker_Delete(t *testing.T) {
	// From example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/DeleteLink.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteLink"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicelinker.NewLinkerClient(cred, &options)
	poller, err := client.BeginDelete(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Web/sites/test-app",
		"linkName",
		&armservicelinker.LinkerClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/DeleteLink.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/DeleteLink.json: %v", err)
	}
}

func TestLinker_Update(t *testing.T) {
	// From example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/PatchLink.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PatchLink"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicelinker.NewLinkerClient(cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Web/sites/test-app",
		"linkName",
		armservicelinker.LinkerPatch{
			Properties: &armservicelinker.LinkerProperties{
				AuthInfo: &armservicelinker.ServicePrincipalSecretAuthInfo{
					AuthType:    to.Ptr(armservicelinker.AuthTypeServicePrincipalSecret),
					ClientID:    to.Ptr("name"),
					PrincipalID: to.Ptr("id"),
					Secret:      to.Ptr("secret"),
				},
				TargetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DocumentDb/databaseAccounts/test-acc/mongodbDatabases/test-db"),
			},
		},
		&armservicelinker.LinkerClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/PatchLink.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/PatchLink.json: %v", err)
	}
	// Response check
	{
		exampleRes := armservicelinker.LinkerResource{
			Name: to.Ptr("linkName"),
			Type: to.Ptr("Microsoft.ServiceLinker/links"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Web/sites/test-app/providers/Microsoft.ServiceLinker/links/linkName"),
			Properties: &armservicelinker.LinkerProperties{
				AuthInfo: &armservicelinker.ServicePrincipalSecretAuthInfo{
					AuthType:    to.Ptr(armservicelinker.AuthTypeServicePrincipalSecret),
					ClientID:    to.Ptr("name"),
					PrincipalID: to.Ptr("id"),
				},
				TargetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DocumentDb/databaseAccounts/test-acc/mongodbDatabases/test-db"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LinkerResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LinkerResource)
			t.Fatalf("Mock response is not equal to example response for example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/PatchLink.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinker_Validate(t *testing.T) {
	// From example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/ValidateLinkFailure.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ValidateLinkFailure"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicelinker.NewLinkerClient(cred, &options)
	poller, err := client.BeginValidate(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Web/sites/test-app",
		"linkName",
		&armservicelinker.LinkerClientBeginValidateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/ValidateLinkFailure.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/ValidateLinkFailure.json: %v", err)
	}
	// Response check
	{
		exampleRes := armservicelinker.ValidateResult{
			Name:               to.Ptr("linkName"),
			AuthType:           to.Ptr(armservicelinker.AuthTypeSecret),
			LinkerStatus:       to.Ptr(armservicelinker.LinkerStatusNotHealthy),
			Reason:             to.Ptr("Error reason and trouble shooting message."),
			ReportEndTimeUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-12T22:06:09Z"); return t }()),
			ReportStartTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-12T22:05:09Z"); return t }()),
			TargetID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DocumentDb/databaseAccounts/test-acc/mongodbDatabases/test-db"),
		}
		if !reflect.DeepEqual(exampleRes, res.ValidateResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ValidateResult)
			t.Fatalf("Mock response is not equal to example response for example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/ValidateLinkFailure.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/ValidateLinkSuccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ValidateLinkSuccess"},
	})
	client = armservicelinker.NewLinkerClient(cred, &options)
	poller, err = client.BeginValidate(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Web/sites/test-app",
		"linkName",
		&armservicelinker.LinkerClientBeginValidateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/ValidateLinkSuccess.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/ValidateLinkSuccess.json: %v", err)
	}
	// Response check
	{
		exampleRes := armservicelinker.ValidateResult{
			Name:               to.Ptr("linkName"),
			AuthType:           to.Ptr(armservicelinker.AuthTypeSecret),
			LinkerStatus:       to.Ptr(armservicelinker.LinkerStatusHealthy),
			ReportEndTimeUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-12T22:06:09Z"); return t }()),
			ReportStartTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-12T22:05:09Z"); return t }()),
			TargetID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DocumentDb/databaseAccounts/test-acc/mongodbDatabases/test-db"),
		}
		if !reflect.DeepEqual(exampleRes, res.ValidateResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ValidateResult)
			t.Fatalf("Mock response is not equal to example response for example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/ValidateLinkSuccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinker_ListConfigurations(t *testing.T) {
	// From example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/GetConfigurations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetConfiguration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armservicelinker.NewLinkerClient(cred, &options)
	res, err := client.ListConfigurations(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Web/sites/test-app",
		"linkName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/GetConfigurations.json: %v", err)
	}
	// Response check
	{
		exampleRes := armservicelinker.SourceConfigurationResult{
			Configurations: []*armservicelinker.SourceConfiguration{
				{
					Name:  to.Ptr("ASL_DocumentDb_ConnectionString"),
					Value: to.Ptr("ConnectionString"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SourceConfigurationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SourceConfigurationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/servicelinker/resource-manager/Microsoft.ServiceLinker/preview/2021-11-01-preview/examples/GetConfigurations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
