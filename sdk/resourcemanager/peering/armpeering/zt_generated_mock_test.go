//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpeering_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"
	"time"

	"encoding/json"
	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/peering/armpeering"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestCdnPeeringPrefixes_List(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListCdnPeeringPrefixes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all the cdn peering prefixes advertised at a particular peering location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewCdnPeeringPrefixesClient("subId", cred, &options)
	pager := client.List("peeringLocation0",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListCdnPeeringPrefixes.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpeering.CdnPeeringPrefixListResult{
			Value: []*armpeering.CdnPeeringPrefix{
				{
					Name: to.Ptr("CdnPrefix_192_168_1_0_24"),
					Type: to.Ptr("Microsoft.Peering/cdnPeeringPrefixes"),
					ID:   to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/cdnPeeringPrefixes/CdnPrefix_192_168_1_0_24"),
					Properties: &armpeering.CdnPeeringPrefixProperties{
						AzureRegion:     to.Ptr("West Central US"),
						AzureService:    to.Ptr("AzureCompute"),
						BgpCommunity:    to.Ptr("0000:0000"),
						IsPrimaryRegion: to.Ptr(false),
						Prefix:          to.Ptr("192.168.1.0/24"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CdnPeeringPrefixListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CdnPeeringPrefixListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListCdnPeeringPrefixes.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPeeringManagementClient_CheckServiceProviderAvailability(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CheckServiceProviderAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check if peering service provider is available in customer location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewManagementClient("subId", cred, &options)
	res, err := client.CheckServiceProviderAvailability(ctx,
		armpeering.CheckServiceProviderAvailabilityInput{
			PeeringServiceLocation: to.Ptr("peeringServiceLocation1"),
			PeeringServiceProvider: to.Ptr("peeringServiceProvider1"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CheckServiceProviderAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpeering.Enum0Available
		if !reflect.DeepEqual(exampleRes, *res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(*res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CheckServiceProviderAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLegacyPeerings_List(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListLegacyPeerings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List legacy peerings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewLegacyPeeringsClient("subId", cred, &options)
	pager := client.List("peeringLocation0",
		armpeering.LegacyPeeringsKindExchange,
		&armpeering.LegacyPeeringsClientListOptions{Asn: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListLegacyPeerings.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpeering.ListResult{
			Value: []*armpeering.Peering{
				{
					Name:     to.Ptr("peeringName"),
					Type:     to.Ptr("Microsoft.Peering/peerings"),
					ID:       to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peerings/peeringName"),
					Kind:     to.Ptr(armpeering.KindExchange),
					Location: to.Ptr("centralus"),
					Properties: &armpeering.Properties{
						Exchange: &armpeering.PropertiesExchange{
							Connections: []*armpeering.ExchangeConnection{
								{
									BgpSession: &armpeering.BgpSession{
										MaxPrefixesAdvertisedV4:     to.Ptr[int32](1000),
										MaxPrefixesAdvertisedV6:     to.Ptr[int32](100),
										MD5AuthenticationKey:        to.Ptr("test-md5-auth-key"),
										MicrosoftSessionIPv4Address: to.Ptr("192.168.3.1"),
										MicrosoftSessionIPv6Address: to.Ptr("fd00::1:1"),
										PeerSessionIPv4Address:      to.Ptr("192.168.2.1"),
										PeerSessionIPv6Address:      to.Ptr("fd00::1"),
										SessionStateV4:              to.Ptr(armpeering.SessionStateV4Established),
										SessionStateV6:              to.Ptr(armpeering.SessionStateV6Established),
									},
									ConnectionIdentifier: to.Ptr("CE495334-0E94-4E51-8164-8116D6CD284D"),
									ConnectionState:      to.Ptr(armpeering.ConnectionStateActive),
									PeeringDBFacilityID:  to.Ptr[int32](99999),
								},
								{
									BgpSession: &armpeering.BgpSession{
										MaxPrefixesAdvertisedV4:     to.Ptr[int32](1000),
										MaxPrefixesAdvertisedV6:     to.Ptr[int32](100),
										MD5AuthenticationKey:        to.Ptr("test-md5-auth-key"),
										MicrosoftSessionIPv4Address: to.Ptr("192.168.3.2"),
										MicrosoftSessionIPv6Address: to.Ptr("fd00::1:2"),
										PeerSessionIPv4Address:      to.Ptr("192.168.2.2"),
										PeerSessionIPv6Address:      to.Ptr("fd00::2"),
										SessionStateV4:              to.Ptr(armpeering.SessionStateV4Established),
										SessionStateV6:              to.Ptr(armpeering.SessionStateV6Established),
									},
									ConnectionIdentifier: to.Ptr("CDD8E673-CB07-47E6-84DE-3739F778762B"),
									ConnectionState:      to.Ptr(armpeering.ConnectionStateActive),
									PeeringDBFacilityID:  to.Ptr[int32](99999),
								}},
							PeerAsn: &armpeering.SubResource{
								ID: to.Ptr("65000"),
							},
						},
						PeeringLocation:   to.Ptr("peeringLocation0"),
						ProvisioningState: to.Ptr(armpeering.ProvisioningStateSucceeded),
					},
					SKU: &armpeering.SKU{
						Name:   to.Ptr("Basic_Exchange_Free"),
						Family: to.Ptr(armpeering.FamilyExchange),
						Size:   to.Ptr(armpeering.SizeFree),
						Tier:   to.Ptr(armpeering.TierBasic),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListLegacyPeerings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLookingGlass_Invoke(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/LookingGlassInvokeCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Call looking glass to execute a command"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewLookingGlassClient("subId", cred, &options)
	res, err := client.Invoke(ctx,
		armpeering.LookingGlassCommandTraceroute,
		armpeering.LookingGlassSourceTypeAzureRegion,
		"West US",
		"0.0.0.0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/LookingGlassInvokeCommand.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpeering.LookingGlassOutput{
			Command: to.Ptr(armpeering.CommandTraceroute),
			Output:  to.Ptr("traceroute to 0.0.0.0, 64 hops max, 52 bytes packets\n 1 West US (1.1.1.1) 0.111ms 0.222ms 0.333ms"),
		}
		if !reflect.DeepEqual(exampleRes, res.LookingGlassOutput) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LookingGlassOutput)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/LookingGlassInvokeCommand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List peering operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpeering.OperationListResult{
			Value: []*armpeering.Operation{
				{
					Name: to.Ptr("Microsoft.Peering/register/action"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Registers the subscription for the Peering Resource Provider and enables the creation of peerings"),
						Operation:   to.Ptr("Registers the Peering Resource Provider"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("Peering Resource Provider"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peerAsns/write"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Write any peerAsns"),
						Operation:   to.Ptr("Write PeerAsn"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("peerAsns"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peerAsns/read"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Read any peerAsns"),
						Operation:   to.Ptr("Read PeerAsn"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("peerAsns"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peerAsns/delete"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Delete any peerAsns"),
						Operation:   to.Ptr("Delete PeerAsn"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("peerAsns"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peeringLocations/read"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Read any peeringLocations"),
						Operation:   to.Ptr("Read PeeringLocation"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("peeringLocations"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/legacyPeerings/read"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Read any legacyPeerings"),
						Operation:   to.Ptr("Read LegacyPeering"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("legacyPeerings"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peerings/write"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Write any peerings"),
						Operation:   to.Ptr("Write Peering"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("peerings"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peerings/read"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Read any peerings"),
						Operation:   to.Ptr("Read Peering"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("peerings"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peerings/delete"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Delete any peerings"),
						Operation:   to.Ptr("Delete Peering"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("peerings"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peeringServiceLocations/read"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Read any peeringServiceLocations"),
						Operation:   to.Ptr("Read PeeringServiceLocations"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("peeringServiceLocations"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peeringServiceProviders/read"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Read any peeringServiceProviders"),
						Operation:   to.Ptr("Read PeeringServiceProviders"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("peeringServiceProviders"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peeringServices/read"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Read any peeringServices"),
						Operation:   to.Ptr("Read PeeringServices"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("peeringServices"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peeringServices/write"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Write any peeringServices"),
						Operation:   to.Ptr("Write PeeringService"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("peeringServices"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peeringServices/delete"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Delete any peeringServices"),
						Operation:   to.Ptr("Delete PeeringServices"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("peeringServices"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peeringServices/prefixes/read"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Read any prefixes"),
						Operation:   to.Ptr("Read PeeringServicePrefixes"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("prefixes"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peeringServices/prefixes/write"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Write any prefixes"),
						Operation:   to.Ptr("Write PeeringServicePrefixes"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("prefixes"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peeringServices/prefixes/delete"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Delete any prefixes"),
						Operation:   to.Ptr("Delete PeeringServicePrefixes"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("prefixes"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peerings/registeredPrefixes/read"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Read any registeredPrefixes"),
						Operation:   to.Ptr("Read RegisteredPrefixes"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("registeredPrefixes"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peerings/registeredPrefixes/write"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Write any registeredPrefixes"),
						Operation:   to.Ptr("Write RegisteredPrefixes"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("registeredPrefixes"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peerings/registeredPrefixes/delete"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Delete any registeredPrefixes"),
						Operation:   to.Ptr("Delete RegisteredPrefixes"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("registeredPrefixes"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peerings/registeredAsns/read"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Read any registeredAsns"),
						Operation:   to.Ptr("Read RegisteredAsns"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("registeredAsns"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peerings/registeredAsns/write"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Write any registeredAsns"),
						Operation:   to.Ptr("Write RegisteredAsns"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("registeredAsns"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peerings/registeredAsns/delete"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Delete any registeredAsns"),
						Operation:   to.Ptr("Delete RegisteredAsns"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("registeredAsns"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peerings/receivedRoutes/read"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Read any receivedRoutes"),
						Operation:   to.Ptr("Read PeeringReceivedRoutes"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("receivedRoutes"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peeringServices/connectionMonitorTests/read"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Read any Peering Service Connection Monitor Tests"),
						Operation:   to.Ptr("Read Peering Service Connection Monitor Tests"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("connectionMonitorTests"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peeringServices/connectionMonitorTests/write"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Write any connectionMonitorTests"),
						Operation:   to.Ptr("Write Peering Service Connection Monitor Tests"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("connectionMonitorTests"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Peering/peeringServices/connectionMonitorTests/delete"),
					Display: &armpeering.OperationDisplayInfo{
						Description: to.Ptr("Delete any Peering Service Connection Monitor Tests"),
						Operation:   to.Ptr("Delete Peering Service Connection Monitor Tests"),
						Provider:    to.Ptr("Microsoft.Peering"),
						Resource:    to.Ptr("connectionMonitorTests"),
					},
					IsDataAction: to.Ptr(false),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPeerAsns_Get(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetPeerAsn.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a peer ASN"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewPeerAsnsClient("subId", cred, &options)
	res, err := client.Get(ctx,
		"peerAsnName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetPeerAsn.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpeering.PeerAsn{
			Name: to.Ptr("peerAsnName"),
			Type: to.Ptr("Microsoft.Peering/peerAsns"),
			ID:   to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peerAsns/peerAsnName"),
			Properties: &armpeering.PeerAsnProperties{
				PeerAsn: to.Ptr[int32](65000),
				PeerContactDetail: []*armpeering.ContactDetail{
					{
						Email: to.Ptr("noc@contoso.com"),
						Phone: to.Ptr("+1 (234) 567-8999"),
						Role:  to.Ptr(armpeering.RoleNoc),
					},
					{
						Email: to.Ptr("abc@contoso.com"),
						Phone: to.Ptr("+1 (234) 567-8900"),
						Role:  to.Ptr(armpeering.RolePolicy),
					},
					{
						Email: to.Ptr("xyz@contoso.com"),
						Phone: to.Ptr("+1 (234) 567-8900"),
						Role:  to.Ptr(armpeering.RoleTechnical),
					}},
				PeerName:        to.Ptr("Contoso"),
				ValidationState: to.Ptr(armpeering.ValidationStateApproved),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PeerAsn) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PeerAsn)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetPeerAsn.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPeerAsns_CreateOrUpdate(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreatePeerAsn.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a peer ASN"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewPeerAsnsClient("subId", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"peerAsnName",
		armpeering.PeerAsn{
			Properties: &armpeering.PeerAsnProperties{
				PeerAsn: to.Ptr[int32](65000),
				PeerContactDetail: []*armpeering.ContactDetail{
					{
						Email: to.Ptr("noc@contoso.com"),
						Phone: to.Ptr("+1 (234) 567-8999"),
						Role:  to.Ptr(armpeering.RoleNoc),
					},
					{
						Email: to.Ptr("abc@contoso.com"),
						Phone: to.Ptr("+1 (234) 567-8900"),
						Role:  to.Ptr(armpeering.RolePolicy),
					},
					{
						Email: to.Ptr("xyz@contoso.com"),
						Phone: to.Ptr("+1 (234) 567-8900"),
						Role:  to.Ptr(armpeering.RoleTechnical),
					}},
				PeerName: to.Ptr("Contoso"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreatePeerAsn.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpeering.PeerAsn{
			Name: to.Ptr("peerAsnName"),
			Type: to.Ptr("Microsoft.Peering/peerAsns"),
			ID:   to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peerAsns/peerAsnName"),
			Properties: &armpeering.PeerAsnProperties{
				PeerAsn: to.Ptr[int32](65000),
				PeerContactDetail: []*armpeering.ContactDetail{
					{
						Email: to.Ptr("noc@contoso.com"),
						Phone: to.Ptr("+1 (234) 567-8999"),
						Role:  to.Ptr(armpeering.RoleNoc),
					},
					{
						Email: to.Ptr("abc@contoso.com"),
						Phone: to.Ptr("+1 (234) 567-8900"),
						Role:  to.Ptr(armpeering.RolePolicy),
					},
					{
						Email: to.Ptr("xyz@contoso.com"),
						Phone: to.Ptr("+1 (234) 567-8900"),
						Role:  to.Ptr(armpeering.RoleTechnical),
					}},
				PeerName:        to.Ptr("Contoso"),
				ValidationState: to.Ptr(armpeering.ValidationStatePending),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PeerAsn) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PeerAsn)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreatePeerAsn.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPeerAsns_Delete(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/DeletePeerAsn.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a peer ASN"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewPeerAsnsClient("subId", cred, &options)
	_, err := client.Delete(ctx,
		"peerAsnName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/DeletePeerAsn.json: %v", err)
	}
}

func TestPeerAsns_ListBySubscription(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeerAsnsBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List peer ASNs in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewPeerAsnsClient("subId", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeerAsnsBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpeering.PeerAsnListResult{
			Value: []*armpeering.PeerAsn{
				{
					Name: to.Ptr("peerAsnName"),
					Type: to.Ptr("Microsoft.Peering/peerAsns"),
					ID:   to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peerAsns/peerAsnName"),
					Properties: &armpeering.PeerAsnProperties{
						PeerAsn: to.Ptr[int32](65000),
						PeerContactDetail: []*armpeering.ContactDetail{
							{
								Email: to.Ptr("noc@contoso.com"),
								Phone: to.Ptr("+1 (234) 567-8999"),
								Role:  to.Ptr(armpeering.RoleNoc),
							},
							{
								Email: to.Ptr("abc@contoso.com"),
								Phone: to.Ptr("+1 (234) 567-8900"),
								Role:  to.Ptr(armpeering.RolePolicy),
							},
							{
								Email: to.Ptr("xyz@contoso.com"),
								Phone: to.Ptr("+1 (234) 567-8900"),
								Role:  to.Ptr(armpeering.RoleTechnical),
							}},
						PeerName:        to.Ptr("Contoso"),
						ValidationState: to.Ptr(armpeering.ValidationStateApproved),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PeerAsnListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PeerAsnListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeerAsnsBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPeeringLocations_List(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListDirectPeeringLocations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List direct peering locations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewLocationsClient("subId", cred, &options)
	pager := client.List(armpeering.PeeringLocationsKindDirect,
		&armpeering.LocationsClientListOptions{DirectPeeringType: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListDirectPeeringLocations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpeering.LocationListResult{
			Value: []*armpeering.Location{
				{
					Name: to.Ptr("peeringLocation1"),
					Type: to.Ptr("Microsoft.Peering/peeringLocations"),
					ID:   to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peeringLocations/peeringLocation1"),
					Kind: to.Ptr(armpeering.KindDirect),
					Properties: &armpeering.LocationProperties{
						Country: to.Ptr("country1"),
						Direct: &armpeering.LocationPropertiesDirect{
							BandwidthOffers: []*armpeering.BandwidthOffer{
								{
									OfferName:   to.Ptr("10Gbps"),
									ValueInMbps: to.Ptr[int32](10000),
								},
								{
									OfferName:   to.Ptr("100Gbps"),
									ValueInMbps: to.Ptr[int32](100000),
								}},
							PeeringFacilities: []*armpeering.DirectPeeringFacility{
								{
									Address:               to.Ptr("address1"),
									DirectPeeringType:     to.Ptr(armpeering.DirectPeeringTypeEdge),
									PeeringDBFacilityID:   to.Ptr[int32](99999),
									PeeringDBFacilityLink: to.Ptr("https://www.peeringdb.com/fac/99999"),
								},
								{
									Address:               to.Ptr("address3"),
									DirectPeeringType:     to.Ptr(armpeering.DirectPeeringTypeCdn),
									PeeringDBFacilityID:   to.Ptr[int32](99999),
									PeeringDBFacilityLink: to.Ptr("https://www.peeringdb.com/fac/99999"),
								}},
						},
						PeeringLocation: to.Ptr("peeringLocation1"),
					},
				},
				{
					Name: to.Ptr("peeringLocation2"),
					Type: to.Ptr("Microsoft.Peering/peeringLocations"),
					ID:   to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peeringLocations/peeringLocation2"),
					Kind: to.Ptr(armpeering.KindDirect),
					Properties: &armpeering.LocationProperties{
						Country: to.Ptr("country2"),
						Direct: &armpeering.LocationPropertiesDirect{
							BandwidthOffers: []*armpeering.BandwidthOffer{
								{
									OfferName:   to.Ptr("10Gbps"),
									ValueInMbps: to.Ptr[int32](10000),
								},
								{
									OfferName:   to.Ptr("100Gbps"),
									ValueInMbps: to.Ptr[int32](100000),
								}},
							PeeringFacilities: []*armpeering.DirectPeeringFacility{
								{
									Address:               to.Ptr("address2"),
									DirectPeeringType:     to.Ptr(armpeering.DirectPeeringTypeEdge),
									PeeringDBFacilityID:   to.Ptr[int32](99999),
									PeeringDBFacilityLink: to.Ptr("https://www.peeringdb.com/fac/99999"),
								}},
						},
						PeeringLocation: to.Ptr("peeringLocation2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LocationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LocationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListDirectPeeringLocations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListExchangePeeringLocations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List exchange peering locations"},
	})
	client = armpeering.NewLocationsClient("subId", cred, &options)
	pager = client.List(armpeering.PeeringLocationsKindExchange,
		&armpeering.LocationsClientListOptions{DirectPeeringType: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListExchangePeeringLocations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpeering.LocationListResult{
			Value: []*armpeering.Location{
				{
					Name: to.Ptr("peeringLocation1"),
					Type: to.Ptr("Microsoft.Peering/peeringLocations"),
					ID:   to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peeringLocations/peeringLocation1"),
					Kind: to.Ptr(armpeering.KindExchange),
					Properties: &armpeering.LocationProperties{
						Country: to.Ptr("country1"),
						Exchange: &armpeering.LocationPropertiesExchange{
							PeeringFacilities: []*armpeering.ExchangePeeringFacility{
								{
									BandwidthInMbps:       to.Ptr[int32](10000),
									ExchangeName:          to.Ptr("name1"),
									FacilityIPv4Prefix:    to.Ptr("192.168.128.0/17"),
									FacilityIPv6Prefix:    to.Ptr("fd00::1000:0/98"),
									MicrosoftIPv4Address:  to.Ptr("192.168.131.1"),
									MicrosoftIPv6Address:  to.Ptr("fd00::1:1"),
									PeeringDBFacilityID:   to.Ptr[int32](99999),
									PeeringDBFacilityLink: to.Ptr("https://www.peeringdb.com/ix/99999"),
								},
								{
									BandwidthInMbps:       to.Ptr[int32](10000),
									ExchangeName:          to.Ptr("name3"),
									FacilityIPv4Prefix:    to.Ptr("192.168.0.0/17"),
									FacilityIPv6Prefix:    to.Ptr("fd00::0/98"),
									MicrosoftIPv4Address:  to.Ptr("192.168.2.2"),
									MicrosoftIPv6Address:  to.Ptr("fd00::2"),
									PeeringDBFacilityID:   to.Ptr[int32](99999),
									PeeringDBFacilityLink: to.Ptr("https://www.peeringdb.com/ix/99999"),
								}},
						},
						PeeringLocation: to.Ptr("peeringLocation1"),
					},
				},
				{
					Name: to.Ptr("peeringLocation2"),
					Type: to.Ptr("Microsoft.Peering/peeringLocations"),
					ID:   to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peeringLocations/peeringLocation2"),
					Kind: to.Ptr(armpeering.KindExchange),
					Properties: &armpeering.LocationProperties{
						Country: to.Ptr("country2"),
						Exchange: &armpeering.LocationPropertiesExchange{
							PeeringFacilities: []*armpeering.ExchangePeeringFacility{
								{
									BandwidthInMbps:       to.Ptr[int32](10000),
									ExchangeName:          to.Ptr("name2"),
									FacilityIPv4Prefix:    to.Ptr("192.168.0.0/16"),
									FacilityIPv6Prefix:    to.Ptr("fd00::0/98"),
									MicrosoftIPv4Address:  to.Ptr("192.168.2.1"),
									MicrosoftIPv6Address:  to.Ptr("fd00::2"),
									PeeringDBFacilityID:   to.Ptr[int32](99999),
									PeeringDBFacilityLink: to.Ptr("https://www.peeringdb.com/ix/99999"),
								}},
						},
						PeeringLocation: to.Ptr("peeringLocation2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LocationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LocationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListExchangePeeringLocations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegisteredAsns_Get(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetRegisteredAsn.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a registered ASN associated with the peering"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewRegisteredAsnsClient("subId", cred, &options)
	res, err := client.Get(ctx,
		"rgName",
		"peeringName",
		"registeredAsnName0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetRegisteredAsn.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpeering.RegisteredAsn{
			Name: to.Ptr("registeredAsnName0"),
			Type: to.Ptr("Microsoft.Peering/registeredAsns"),
			ID:   to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peerings/peeringName/registeredAsns/registeredAsnName0"),
			Properties: &armpeering.RegisteredAsnProperties{
				Asn:                     to.Ptr[int32](65000),
				PeeringServicePrefixKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
				ProvisioningState:       to.Ptr(armpeering.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RegisteredAsn) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RegisteredAsn)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetRegisteredAsn.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegisteredAsns_CreateOrUpdate(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreateRegisteredAsn.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a registered ASN for the peering"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewRegisteredAsnsClient("subId", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rgName",
		"peeringName",
		"registeredAsnName",
		armpeering.RegisteredAsn{
			Properties: &armpeering.RegisteredAsnProperties{
				Asn: to.Ptr[int32](65000),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreateRegisteredAsn.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpeering.RegisteredAsn{
			Name: to.Ptr("registeredAsnName"),
			Type: to.Ptr("Microsoft.Peering/registeredAsns"),
			ID:   to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peerings/peeringName/registeredAsns/registeredAsnName"),
			Properties: &armpeering.RegisteredAsnProperties{
				Asn:                     to.Ptr[int32](65000),
				PeeringServicePrefixKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
				ProvisioningState:       to.Ptr(armpeering.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RegisteredAsn) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RegisteredAsn)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreateRegisteredAsn.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegisteredAsns_Delete(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/DeleteRegisteredAsn.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a registered ASN associated with the peering"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewRegisteredAsnsClient("subId", cred, &options)
	_, err := client.Delete(ctx,
		"rgName",
		"peeringName",
		"registeredAsnName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/DeleteRegisteredAsn.json: %v", err)
	}
}

func TestRegisteredAsns_ListByPeering(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListRegisteredAsnsByPeering.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all the registered ASNs associated with the peering"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewRegisteredAsnsClient("subId", cred, &options)
	pager := client.ListByPeering("rgName",
		"peeringName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListRegisteredAsnsByPeering.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpeering.RegisteredAsnListResult{
			Value: []*armpeering.RegisteredAsn{
				{
					Name: to.Ptr("registeredAsnName0"),
					Type: to.Ptr("Microsoft.Peering/registeredAsns"),
					ID:   to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peerings/peeringName/registeredAsns/registeredAsnName0"),
					Properties: &armpeering.RegisteredAsnProperties{
						Asn:                     to.Ptr[int32](65000),
						PeeringServicePrefixKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
						ProvisioningState:       to.Ptr(armpeering.ProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("registeredAsnName1"),
					Type: to.Ptr("Microsoft.Peering/registeredAsns"),
					ID:   to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peerings/peeringName/registeredAsns/registeredAsnName1"),
					Properties: &armpeering.RegisteredAsnProperties{
						Asn:               to.Ptr[int32](65001),
						ProvisioningState: to.Ptr(armpeering.ProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("registeredAsnName2"),
					Type: to.Ptr("Microsoft.Peering/registeredAsns"),
					ID:   to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peerings/peeringName/registeredAsns/registeredAsnName2"),
					Properties: &armpeering.RegisteredAsnProperties{
						Asn:                     to.Ptr[int32](65002),
						PeeringServicePrefixKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
						ProvisioningState:       to.Ptr(armpeering.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RegisteredAsnListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RegisteredAsnListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListRegisteredAsnsByPeering.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegisteredPrefixes_Get(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetRegisteredPrefix.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a registered prefix associated with the peering"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewRegisteredPrefixesClient("subId", cred, &options)
	res, err := client.Get(ctx,
		"rgName",
		"peeringName",
		"registeredPrefixName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetRegisteredPrefix.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpeering.RegisteredPrefix{
			Name: to.Ptr("registeredPrefixName"),
			Type: to.Ptr("Microsoft.Peering/registeredPrefixes"),
			ID:   to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peerings/peeringName/registeredPrefixes/registeredPrefixName"),
			Properties: &armpeering.RegisteredPrefixProperties{
				PeeringServicePrefixKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
				Prefix:                  to.Ptr("10.22.20.0/24"),
				PrefixValidationState:   to.Ptr(armpeering.PrefixValidationStateVerified),
				ProvisioningState:       to.Ptr(armpeering.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RegisteredPrefix) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RegisteredPrefix)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetRegisteredPrefix.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegisteredPrefixes_CreateOrUpdate(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreateRegisteredPrefix.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a registered prefix for the peering"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewRegisteredPrefixesClient("subId", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rgName",
		"peeringName",
		"registeredPrefixName",
		armpeering.RegisteredPrefix{
			Properties: &armpeering.RegisteredPrefixProperties{
				Prefix: to.Ptr("10.22.20.0/24"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreateRegisteredPrefix.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpeering.RegisteredPrefix{
			Name: to.Ptr("registeredPrefixName"),
			Type: to.Ptr("Microsoft.Peering/registeredPrefixes"),
			ID:   to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peerings/peeringName/registeredPrefixes/registeredPrefixName"),
			Properties: &armpeering.RegisteredPrefixProperties{
				PeeringServicePrefixKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
				Prefix:                  to.Ptr("10.22.20.0/24"),
				PrefixValidationState:   to.Ptr(armpeering.PrefixValidationStateVerified),
				ProvisioningState:       to.Ptr(armpeering.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RegisteredPrefix) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RegisteredPrefix)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreateRegisteredPrefix.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegisteredPrefixes_Delete(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/DeleteRegisteredPrefix.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a registered prefix associated with the peering"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewRegisteredPrefixesClient("subId", cred, &options)
	_, err := client.Delete(ctx,
		"rgName",
		"peeringName",
		"registeredPrefixName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/DeleteRegisteredPrefix.json: %v", err)
	}
}

func TestRegisteredPrefixes_ListByPeering(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListRegisteredPrefixesByPeering.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all the registered prefixes associated with the peering"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewRegisteredPrefixesClient("subId", cred, &options)
	pager := client.ListByPeering("rgName",
		"peeringName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListRegisteredPrefixesByPeering.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpeering.RegisteredPrefixListResult{
			Value: []*armpeering.RegisteredPrefix{
				{
					Name: to.Ptr("registeredPrefixName0"),
					Type: to.Ptr("Microsoft.Peering/registeredPrefixes"),
					ID:   to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peerings/peeringName/registeredPrefixes/registeredPrefixName0"),
					Properties: &armpeering.RegisteredPrefixProperties{
						PeeringServicePrefixKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
						Prefix:                  to.Ptr("10.22.20.0/24"),
						PrefixValidationState:   to.Ptr(armpeering.PrefixValidationStateVerified),
						ProvisioningState:       to.Ptr(armpeering.ProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("registeredPrefixName1"),
					Type: to.Ptr("Microsoft.Peering/registeredPrefixes"),
					ID:   to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peerings/peeringName/registeredPrefixes/registeredPrefixName1"),
					Properties: &armpeering.RegisteredPrefixProperties{
						PeeringServicePrefixKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
						Prefix:                  to.Ptr("10.22.21.0/24"),
						PrefixValidationState:   to.Ptr(armpeering.PrefixValidationStateVerified),
						ProvisioningState:       to.Ptr(armpeering.ProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("registeredPrefixName2"),
					Type: to.Ptr("Microsoft.Peering/registeredPrefixes"),
					ID:   to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peerings/peeringName/registeredPrefixes/registeredPrefixName2"),
					Properties: &armpeering.RegisteredPrefixProperties{
						Prefix:                to.Ptr("10.22.22.0/24"),
						PrefixValidationState: to.Ptr(armpeering.PrefixValidationStatePending),
						ProvisioningState:     to.Ptr(armpeering.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RegisteredPrefixListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RegisteredPrefixListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListRegisteredPrefixesByPeering.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPeerings_Get(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetPeering.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a peering"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewPeeringsClient("subId", cred, &options)
	res, err := client.Get(ctx,
		"rgName",
		"peeringName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetPeering.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpeering.Peering{
			Name:     to.Ptr("peeringName"),
			Type:     to.Ptr("Microsoft.Peering/peerings"),
			ID:       to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peerings/peeringName"),
			Kind:     to.Ptr(armpeering.KindExchange),
			Location: to.Ptr("eastus"),
			Properties: &armpeering.Properties{
				Exchange: &armpeering.PropertiesExchange{
					Connections: []*armpeering.ExchangeConnection{
						{
							BgpSession: &armpeering.BgpSession{
								MaxPrefixesAdvertisedV4:     to.Ptr[int32](1000),
								MaxPrefixesAdvertisedV6:     to.Ptr[int32](100),
								MD5AuthenticationKey:        to.Ptr("test-md5-auth-key"),
								MicrosoftSessionIPv4Address: to.Ptr("192.168.3.1"),
								MicrosoftSessionIPv6Address: to.Ptr("fd00::1:1"),
								PeerSessionIPv4Address:      to.Ptr("192.168.2.1"),
								PeerSessionIPv6Address:      to.Ptr("fd00::1"),
								SessionStateV4:              to.Ptr(armpeering.SessionStateV4Established),
								SessionStateV6:              to.Ptr(armpeering.SessionStateV6Established),
							},
							ConnectionIdentifier: to.Ptr("CE495334-0E94-4E51-8164-8116D6CD284D"),
							ConnectionState:      to.Ptr(armpeering.ConnectionStateActive),
							PeeringDBFacilityID:  to.Ptr[int32](99999),
						},
						{
							BgpSession: &armpeering.BgpSession{
								MaxPrefixesAdvertisedV4:     to.Ptr[int32](1000),
								MaxPrefixesAdvertisedV6:     to.Ptr[int32](100),
								MD5AuthenticationKey:        to.Ptr("test-md5-auth-key"),
								MicrosoftSessionIPv4Address: to.Ptr("192.168.3.2"),
								MicrosoftSessionIPv6Address: to.Ptr("fd00::1:2"),
								PeerSessionIPv4Address:      to.Ptr("192.168.2.2"),
								PeerSessionIPv6Address:      to.Ptr("fd00::2"),
								SessionStateV4:              to.Ptr(armpeering.SessionStateV4Established),
								SessionStateV6:              to.Ptr(armpeering.SessionStateV6Established),
							},
							ConnectionIdentifier: to.Ptr("CDD8E673-CB07-47E6-84DE-3739F778762B"),
							ConnectionState:      to.Ptr(armpeering.ConnectionStateActive),
							PeeringDBFacilityID:  to.Ptr[int32](99999),
						}},
					PeerAsn: &armpeering.SubResource{
						ID: to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1"),
					},
				},
				PeeringLocation:   to.Ptr("peeringLocation0"),
				ProvisioningState: to.Ptr(armpeering.ProvisioningStateSucceeded),
			},
			SKU: &armpeering.SKU{
				Name:   to.Ptr("Basic_Exchange_Free"),
				Family: to.Ptr(armpeering.FamilyExchange),
				Size:   to.Ptr(armpeering.SizeFree),
				Tier:   to.Ptr(armpeering.TierBasic),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Peering) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Peering)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetPeering.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPeerings_CreateOrUpdate(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreateDirectPeering.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a direct peering"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewPeeringsClient("subId", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rgName",
		"peeringName",
		armpeering.Peering{
			Kind:     to.Ptr(armpeering.KindDirect),
			Location: to.Ptr("eastus"),
			Properties: &armpeering.Properties{
				Direct: &armpeering.PropertiesDirect{
					Connections: []*armpeering.DirectConnection{
						{
							BandwidthInMbps: to.Ptr[int32](10000),
							BgpSession: &armpeering.BgpSession{
								MaxPrefixesAdvertisedV4: to.Ptr[int32](1000),
								MaxPrefixesAdvertisedV6: to.Ptr[int32](100),
								MD5AuthenticationKey:    to.Ptr("test-md5-auth-key"),
								SessionPrefixV4:         to.Ptr("192.168.0.0/31"),
								SessionPrefixV6:         to.Ptr("fd00::0/127"),
							},
							ConnectionIdentifier:   to.Ptr("5F4CB5C7-6B43-4444-9338-9ABC72606C16"),
							PeeringDBFacilityID:    to.Ptr[int32](99999),
							SessionAddressProvider: to.Ptr(armpeering.SessionAddressProviderPeer),
							UseForPeeringService:   to.Ptr(false),
						},
						{
							BandwidthInMbps:        to.Ptr[int32](10000),
							ConnectionIdentifier:   to.Ptr("8AB00818-D533-4504-A25A-03A17F61201C"),
							PeeringDBFacilityID:    to.Ptr[int32](99999),
							SessionAddressProvider: to.Ptr(armpeering.SessionAddressProviderMicrosoft),
							UseForPeeringService:   to.Ptr(true),
						}},
					DirectPeeringType: to.Ptr(armpeering.DirectPeeringTypeEdge),
					PeerAsn: &armpeering.SubResource{
						ID: to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1"),
					},
				},
				PeeringLocation: to.Ptr("peeringLocation0"),
			},
			SKU: &armpeering.SKU{
				Name: to.Ptr("Basic_Direct_Free"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreateDirectPeering.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpeering.Peering{
			Name:     to.Ptr("peeringName"),
			Type:     to.Ptr("Microsoft.Peering/peerings"),
			ID:       to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peerings/peeringName"),
			Kind:     to.Ptr(armpeering.KindDirect),
			Location: to.Ptr("eastus"),
			Properties: &armpeering.Properties{
				Direct: &armpeering.PropertiesDirect{
					Connections: []*armpeering.DirectConnection{
						{
							BandwidthInMbps: to.Ptr[int32](10000),
							BgpSession: &armpeering.BgpSession{
								MaxPrefixesAdvertisedV4: to.Ptr[int32](1000),
								MaxPrefixesAdvertisedV6: to.Ptr[int32](100),
								MD5AuthenticationKey:    to.Ptr("test-md5-auth-key"),
								SessionPrefixV4:         to.Ptr("192.168.0.0/31"),
								SessionPrefixV6:         to.Ptr("fd00::0/127"),
								SessionStateV4:          to.Ptr(armpeering.SessionStateV4Established),
								SessionStateV6:          to.Ptr(armpeering.SessionStateV6Established),
							},
							ConnectionIdentifier:       to.Ptr("5F4CB5C7-6B43-4444-9338-9ABC72606C16"),
							ConnectionState:            to.Ptr(armpeering.ConnectionStateProvisioningFailed),
							ErrorMessage:               to.Ptr("IPv4 address is already configured with a different ASN"),
							MicrosoftTrackingID:        to.Ptr("test-microsoft-reference-id-1"),
							PeeringDBFacilityID:        to.Ptr[int32](99999),
							ProvisionedBandwidthInMbps: to.Ptr[int32](10000),
							SessionAddressProvider:     to.Ptr(armpeering.SessionAddressProviderPeer),
							UseForPeeringService:       to.Ptr(false),
						},
						{
							BandwidthInMbps: to.Ptr[int32](10000),
							BgpSession: &armpeering.BgpSession{
								MaxPrefixesAdvertisedV4: to.Ptr[int32](1000),
								MaxPrefixesAdvertisedV6: to.Ptr[int32](100),
								MD5AuthenticationKey:    to.Ptr("test-md5-auth-key"),
								SessionPrefixV4:         to.Ptr("192.168.1.0/31"),
								SessionPrefixV6:         to.Ptr("fd00::2/127"),
								SessionStateV4:          to.Ptr(armpeering.SessionStateV4Established),
								SessionStateV6:          to.Ptr(armpeering.SessionStateV6Established),
							},
							ConnectionIdentifier:       to.Ptr("8AB00818-D533-4504-A25A-03A17F61201C"),
							ConnectionState:            to.Ptr(armpeering.ConnectionStateActive),
							MicrosoftTrackingID:        to.Ptr("test-microsoft-reference-id-2"),
							PeeringDBFacilityID:        to.Ptr[int32](99999),
							ProvisionedBandwidthInMbps: to.Ptr[int32](10000),
							SessionAddressProvider:     to.Ptr(armpeering.SessionAddressProviderMicrosoft),
							UseForPeeringService:       to.Ptr(true),
						}},
					DirectPeeringType: to.Ptr(armpeering.DirectPeeringTypeEdge),
					PeerAsn: &armpeering.SubResource{
						ID: to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1"),
					},
					UseForPeeringService: to.Ptr(true),
				},
				PeeringLocation:   to.Ptr("peeringLocation0"),
				ProvisioningState: to.Ptr(armpeering.ProvisioningStateSucceeded),
			},
			SKU: &armpeering.SKU{
				Name:   to.Ptr("Basic_Direct_Free"),
				Family: to.Ptr(armpeering.FamilyDirect),
				Size:   to.Ptr(armpeering.SizeFree),
				Tier:   to.Ptr(armpeering.TierBasic),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Peering) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Peering)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreateDirectPeering.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreatePeeringWithExchangeRouteServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a peering with exchange route server"},
	})
	client = armpeering.NewPeeringsClient("subId", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"rgName",
		"peeringName",
		armpeering.Peering{
			Kind:     to.Ptr(armpeering.KindDirect),
			Location: to.Ptr("eastus"),
			Properties: &armpeering.Properties{
				Direct: &armpeering.PropertiesDirect{
					Connections: []*armpeering.DirectConnection{
						{
							BandwidthInMbps: to.Ptr[int32](10000),
							BgpSession: &armpeering.BgpSession{
								MaxPrefixesAdvertisedV4:     to.Ptr[int32](1000),
								MaxPrefixesAdvertisedV6:     to.Ptr[int32](100),
								MicrosoftSessionIPv4Address: to.Ptr("192.168.0.123"),
								PeerSessionIPv4Address:      to.Ptr("192.168.0.234"),
								SessionPrefixV4:             to.Ptr("192.168.0.0/24"),
							},
							ConnectionIdentifier:   to.Ptr("5F4CB5C7-6B43-4444-9338-9ABC72606C16"),
							PeeringDBFacilityID:    to.Ptr[int32](99999),
							SessionAddressProvider: to.Ptr(armpeering.SessionAddressProviderPeer),
							UseForPeeringService:   to.Ptr(true),
						}},
					DirectPeeringType: to.Ptr(armpeering.DirectPeeringTypeIxRs),
					PeerAsn: &armpeering.SubResource{
						ID: to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1"),
					},
				},
				PeeringLocation: to.Ptr("peeringLocation0"),
			},
			SKU: &armpeering.SKU{
				Name: to.Ptr("Premium_Direct_Free"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreatePeeringWithExchangeRouteServer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpeering.Peering{
			Name:     to.Ptr("peeringName"),
			Type:     to.Ptr("Microsoft.Peering/peerings"),
			ID:       to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peerings/peeringName"),
			Kind:     to.Ptr(armpeering.KindDirect),
			Location: to.Ptr("eastus"),
			Properties: &armpeering.Properties{
				Direct: &armpeering.PropertiesDirect{
					Connections: []*armpeering.DirectConnection{
						{
							BandwidthInMbps: to.Ptr[int32](10000),
							BgpSession: &armpeering.BgpSession{
								MaxPrefixesAdvertisedV4:     to.Ptr[int32](1000),
								MaxPrefixesAdvertisedV6:     to.Ptr[int32](100),
								MicrosoftSessionIPv4Address: to.Ptr("192.168.0.123"),
								PeerSessionIPv4Address:      to.Ptr("192.168.0.234"),
								SessionPrefixV4:             to.Ptr("192.168.0.0/24"),
								SessionStateV4:              to.Ptr(armpeering.SessionStateV4Established),
								SessionStateV6:              to.Ptr(armpeering.SessionStateV6Established),
							},
							ConnectionIdentifier:       to.Ptr("5F4CB5C7-6B43-4444-9338-9ABC72606C16"),
							ConnectionState:            to.Ptr(armpeering.ConnectionStateActive),
							PeeringDBFacilityID:        to.Ptr[int32](99999),
							ProvisionedBandwidthInMbps: to.Ptr[int32](10000),
							SessionAddressProvider:     to.Ptr(armpeering.SessionAddressProviderPeer),
							UseForPeeringService:       to.Ptr(true),
						}},
					DirectPeeringType: to.Ptr(armpeering.DirectPeeringTypeIxRs),
					PeerAsn: &armpeering.SubResource{
						ID: to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1"),
					},
					UseForPeeringService: to.Ptr(true),
				},
				PeeringLocation:   to.Ptr("peeringLocation0"),
				ProvisioningState: to.Ptr(armpeering.ProvisioningStateSucceeded),
			},
			SKU: &armpeering.SKU{
				Name:   to.Ptr("Premium_Direct_Free"),
				Family: to.Ptr(armpeering.FamilyDirect),
				Size:   to.Ptr(armpeering.SizeFree),
				Tier:   to.Ptr(armpeering.TierPremium),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Peering) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Peering)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreatePeeringWithExchangeRouteServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreateExchangePeering.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an exchange peering"},
	})
	client = armpeering.NewPeeringsClient("subId", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"rgName",
		"peeringName",
		armpeering.Peering{
			Kind:     to.Ptr(armpeering.KindExchange),
			Location: to.Ptr("eastus"),
			Properties: &armpeering.Properties{
				Exchange: &armpeering.PropertiesExchange{
					Connections: []*armpeering.ExchangeConnection{
						{
							BgpSession: &armpeering.BgpSession{
								MaxPrefixesAdvertisedV4: to.Ptr[int32](1000),
								MaxPrefixesAdvertisedV6: to.Ptr[int32](100),
								MD5AuthenticationKey:    to.Ptr("test-md5-auth-key"),
								PeerSessionIPv4Address:  to.Ptr("192.168.2.1"),
								PeerSessionIPv6Address:  to.Ptr("fd00::1"),
							},
							ConnectionIdentifier: to.Ptr("CE495334-0E94-4E51-8164-8116D6CD284D"),
							PeeringDBFacilityID:  to.Ptr[int32](99999),
						},
						{
							BgpSession: &armpeering.BgpSession{
								MaxPrefixesAdvertisedV4: to.Ptr[int32](1000),
								MaxPrefixesAdvertisedV6: to.Ptr[int32](100),
								MD5AuthenticationKey:    to.Ptr("test-md5-auth-key"),
								PeerSessionIPv4Address:  to.Ptr("192.168.2.2"),
								PeerSessionIPv6Address:  to.Ptr("fd00::2"),
							},
							ConnectionIdentifier: to.Ptr("CDD8E673-CB07-47E6-84DE-3739F778762B"),
							PeeringDBFacilityID:  to.Ptr[int32](99999),
						}},
					PeerAsn: &armpeering.SubResource{
						ID: to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1"),
					},
				},
				PeeringLocation: to.Ptr("peeringLocation0"),
			},
			SKU: &armpeering.SKU{
				Name: to.Ptr("Basic_Exchange_Free"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreateExchangePeering.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpeering.Peering{
			Name:     to.Ptr("peeringName"),
			Type:     to.Ptr("Microsoft.Peering/peerings"),
			ID:       to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peerings/peeringName"),
			Kind:     to.Ptr(armpeering.KindExchange),
			Location: to.Ptr("eastus"),
			Properties: &armpeering.Properties{
				Exchange: &armpeering.PropertiesExchange{
					Connections: []*armpeering.ExchangeConnection{
						{
							BgpSession: &armpeering.BgpSession{
								MaxPrefixesAdvertisedV4:     to.Ptr[int32](1000),
								MaxPrefixesAdvertisedV6:     to.Ptr[int32](100),
								MD5AuthenticationKey:        to.Ptr("test-md5-auth-key"),
								MicrosoftSessionIPv4Address: to.Ptr("192.168.3.1"),
								MicrosoftSessionIPv6Address: to.Ptr("fd00::1:1"),
								PeerSessionIPv4Address:      to.Ptr("192.168.2.1"),
								PeerSessionIPv6Address:      to.Ptr("fd00::1"),
								SessionStateV4:              to.Ptr(armpeering.SessionStateV4Established),
								SessionStateV6:              to.Ptr(armpeering.SessionStateV6Established),
							},
							ConnectionIdentifier: to.Ptr("CE495334-0E94-4E51-8164-8116D6CD284D"),
							ConnectionState:      to.Ptr(armpeering.ConnectionStateProvisioningFailed),
							ErrorMessage:         to.Ptr("IPv4 address is already configured with a different ASN"),
							PeeringDBFacilityID:  to.Ptr[int32](99999),
						},
						{
							BgpSession: &armpeering.BgpSession{
								MaxPrefixesAdvertisedV4:     to.Ptr[int32](1000),
								MaxPrefixesAdvertisedV6:     to.Ptr[int32](100),
								MD5AuthenticationKey:        to.Ptr("test-md5-auth-key"),
								MicrosoftSessionIPv4Address: to.Ptr("192.168.3.2"),
								MicrosoftSessionIPv6Address: to.Ptr("fd00::1:2"),
								PeerSessionIPv4Address:      to.Ptr("192.168.2.2"),
								PeerSessionIPv6Address:      to.Ptr("fd00::2"),
								SessionStateV4:              to.Ptr(armpeering.SessionStateV4Established),
								SessionStateV6:              to.Ptr(armpeering.SessionStateV6Established),
							},
							ConnectionIdentifier: to.Ptr("CDD8E673-CB07-47E6-84DE-3739F778762B"),
							ConnectionState:      to.Ptr(armpeering.ConnectionStateActive),
							PeeringDBFacilityID:  to.Ptr[int32](99999),
						}},
					PeerAsn: &armpeering.SubResource{
						ID: to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1"),
					},
				},
				PeeringLocation:   to.Ptr("peeringLocation0"),
				ProvisioningState: to.Ptr(armpeering.ProvisioningStateSucceeded),
			},
			SKU: &armpeering.SKU{
				Name:   to.Ptr("Basic_Exchange_Free"),
				Family: to.Ptr(armpeering.FamilyExchange),
				Size:   to.Ptr(armpeering.SizeFree),
				Tier:   to.Ptr(armpeering.TierBasic),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Peering) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Peering)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreateExchangePeering.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPeerings_Delete(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/DeletePeering.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a peering"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewPeeringsClient("subId", cred, &options)
	_, err := client.Delete(ctx,
		"rgName",
		"peeringName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/DeletePeering.json: %v", err)
	}
}

func TestPeerings_Update(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/UpdatePeeringTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update peering tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewPeeringsClient("subId", cred, &options)
	res, err := client.Update(ctx,
		"rgName",
		"peeringName",
		armpeering.ResourceTags{
			Tags: map[string]*string{
				"tag0": to.Ptr("value0"),
				"tag1": to.Ptr("value1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/UpdatePeeringTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpeering.Peering{
			Name:     to.Ptr("peeringName"),
			Type:     to.Ptr("Microsoft.Peering/peerings"),
			ID:       to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peerings/peeringName"),
			Kind:     to.Ptr(armpeering.KindExchange),
			Location: to.Ptr("eastus"),
			Properties: &armpeering.Properties{
				Exchange: &armpeering.PropertiesExchange{
					Connections: []*armpeering.ExchangeConnection{
						{
							BgpSession: &armpeering.BgpSession{
								MaxPrefixesAdvertisedV4:     to.Ptr[int32](1000),
								MaxPrefixesAdvertisedV6:     to.Ptr[int32](100),
								MD5AuthenticationKey:        to.Ptr("test-md5-auth-key"),
								MicrosoftSessionIPv4Address: to.Ptr("192.168.3.1"),
								MicrosoftSessionIPv6Address: to.Ptr("fd00::1:1"),
								PeerSessionIPv4Address:      to.Ptr("192.168.2.1"),
								PeerSessionIPv6Address:      to.Ptr("fd00::1"),
								SessionStateV4:              to.Ptr(armpeering.SessionStateV4Established),
								SessionStateV6:              to.Ptr(armpeering.SessionStateV6Established),
							},
							ConnectionIdentifier: to.Ptr("CE495334-0E94-4E51-8164-8116D6CD284D"),
							ConnectionState:      to.Ptr(armpeering.ConnectionStateActive),
							PeeringDBFacilityID:  to.Ptr[int32](99999),
						},
						{
							BgpSession: &armpeering.BgpSession{
								MaxPrefixesAdvertisedV4:     to.Ptr[int32](1000),
								MaxPrefixesAdvertisedV6:     to.Ptr[int32](100),
								MD5AuthenticationKey:        to.Ptr("test-md5-auth-key"),
								MicrosoftSessionIPv4Address: to.Ptr("192.168.3.2"),
								MicrosoftSessionIPv6Address: to.Ptr("fd00::1:2"),
								PeerSessionIPv4Address:      to.Ptr("192.168.2.2"),
								PeerSessionIPv6Address:      to.Ptr("fd00::2"),
								SessionStateV4:              to.Ptr(armpeering.SessionStateV4Established),
								SessionStateV6:              to.Ptr(armpeering.SessionStateV6Established),
							},
							ConnectionIdentifier: to.Ptr("CDD8E673-CB07-47E6-84DE-3739F778762B"),
							ConnectionState:      to.Ptr(armpeering.ConnectionStateActive),
							PeeringDBFacilityID:  to.Ptr[int32](99999),
						}},
					PeerAsn: &armpeering.SubResource{
						ID: to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1"),
					},
				},
				PeeringLocation:   to.Ptr("peeringLocation0"),
				ProvisioningState: to.Ptr(armpeering.ProvisioningStateSucceeded),
			},
			SKU: &armpeering.SKU{
				Name:   to.Ptr("Basic_Exchange_Free"),
				Family: to.Ptr(armpeering.FamilyExchange),
				Size:   to.Ptr(armpeering.SizeFree),
				Tier:   to.Ptr(armpeering.TierBasic),
			},
			Tags: map[string]*string{
				"tag0": to.Ptr("value0"),
				"tag1": to.Ptr("value1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Peering) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Peering)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/UpdatePeeringTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPeerings_ListByResourceGroup(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringsByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List peerings in a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewPeeringsClient("subId", cred, &options)
	pager := client.ListByResourceGroup("rgName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringsByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpeering.ListResult{
			Value: []*armpeering.Peering{
				{
					Name:     to.Ptr("peeringName"),
					Type:     to.Ptr("Microsoft.Peering/peerings"),
					ID:       to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peerings/peeringName"),
					Kind:     to.Ptr(armpeering.KindExchange),
					Location: to.Ptr("eastus"),
					Properties: &armpeering.Properties{
						Exchange: &armpeering.PropertiesExchange{
							Connections: []*armpeering.ExchangeConnection{
								{
									BgpSession: &armpeering.BgpSession{
										MaxPrefixesAdvertisedV4:     to.Ptr[int32](1000),
										MaxPrefixesAdvertisedV6:     to.Ptr[int32](100),
										MD5AuthenticationKey:        to.Ptr("test-md5-auth-key"),
										MicrosoftSessionIPv4Address: to.Ptr("192.168.3.1"),
										MicrosoftSessionIPv6Address: to.Ptr("fd00::1:1"),
										PeerSessionIPv4Address:      to.Ptr("192.168.2.1"),
										PeerSessionIPv6Address:      to.Ptr("fd00::1"),
										SessionStateV4:              to.Ptr(armpeering.SessionStateV4Established),
										SessionStateV6:              to.Ptr(armpeering.SessionStateV6Established),
									},
									ConnectionIdentifier: to.Ptr("CE495334-0E94-4E51-8164-8116D6CD284D"),
									ConnectionState:      to.Ptr(armpeering.ConnectionStateActive),
									PeeringDBFacilityID:  to.Ptr[int32](99999),
								},
								{
									BgpSession: &armpeering.BgpSession{
										MaxPrefixesAdvertisedV4:     to.Ptr[int32](1000),
										MaxPrefixesAdvertisedV6:     to.Ptr[int32](100),
										MD5AuthenticationKey:        to.Ptr("test-md5-auth-key"),
										MicrosoftSessionIPv4Address: to.Ptr("192.168.3.2"),
										MicrosoftSessionIPv6Address: to.Ptr("fd00::1:2"),
										PeerSessionIPv4Address:      to.Ptr("192.168.2.2"),
										PeerSessionIPv6Address:      to.Ptr("fd00::2"),
										SessionStateV4:              to.Ptr(armpeering.SessionStateV4Established),
										SessionStateV6:              to.Ptr(armpeering.SessionStateV6Established),
									},
									ConnectionIdentifier: to.Ptr("CDD8E673-CB07-47E6-84DE-3739F778762B"),
									ConnectionState:      to.Ptr(armpeering.ConnectionStateActive),
									PeeringDBFacilityID:  to.Ptr[int32](99999),
								}},
							PeerAsn: &armpeering.SubResource{
								ID: to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1"),
							},
						},
						PeeringLocation:   to.Ptr("peeringLocation0"),
						ProvisioningState: to.Ptr(armpeering.ProvisioningStateSucceeded),
					},
					SKU: &armpeering.SKU{
						Name:   to.Ptr("Basic_Exchange_Free"),
						Family: to.Ptr(armpeering.FamilyExchange),
						Size:   to.Ptr(armpeering.SizeFree),
						Tier:   to.Ptr(armpeering.TierBasic),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringsByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPeerings_ListBySubscription(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringsBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List peerings in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewPeeringsClient("subId", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringsBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpeering.ListResult{
			Value: []*armpeering.Peering{
				{
					Name:     to.Ptr("peeringName"),
					Type:     to.Ptr("Microsoft.Peering/peerings"),
					ID:       to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peerings/peeringName"),
					Kind:     to.Ptr(armpeering.KindExchange),
					Location: to.Ptr("eastus"),
					Properties: &armpeering.Properties{
						Exchange: &armpeering.PropertiesExchange{
							Connections: []*armpeering.ExchangeConnection{
								{
									BgpSession: &armpeering.BgpSession{
										MaxPrefixesAdvertisedV4:     to.Ptr[int32](1000),
										MaxPrefixesAdvertisedV6:     to.Ptr[int32](100),
										MD5AuthenticationKey:        to.Ptr("test-md5-auth-key"),
										MicrosoftSessionIPv4Address: to.Ptr("192.168.3.1"),
										MicrosoftSessionIPv6Address: to.Ptr("fd00::1:1"),
										PeerSessionIPv4Address:      to.Ptr("192.168.2.1"),
										PeerSessionIPv6Address:      to.Ptr("fd00::1"),
										SessionStateV4:              to.Ptr(armpeering.SessionStateV4Established),
										SessionStateV6:              to.Ptr(armpeering.SessionStateV6Established),
									},
									ConnectionIdentifier: to.Ptr("CE495334-0E94-4E51-8164-8116D6CD284D"),
									ConnectionState:      to.Ptr(armpeering.ConnectionStateActive),
									PeeringDBFacilityID:  to.Ptr[int32](99999),
								},
								{
									BgpSession: &armpeering.BgpSession{
										MaxPrefixesAdvertisedV4:     to.Ptr[int32](1000),
										MaxPrefixesAdvertisedV6:     to.Ptr[int32](100),
										MD5AuthenticationKey:        to.Ptr("test-md5-auth-key"),
										MicrosoftSessionIPv4Address: to.Ptr("192.168.3.2"),
										MicrosoftSessionIPv6Address: to.Ptr("fd00::1:2"),
										PeerSessionIPv4Address:      to.Ptr("192.168.2.2"),
										PeerSessionIPv6Address:      to.Ptr("fd00::2"),
										SessionStateV4:              to.Ptr(armpeering.SessionStateV4Established),
										SessionStateV6:              to.Ptr(armpeering.SessionStateV6Established),
									},
									ConnectionIdentifier: to.Ptr("CDD8E673-CB07-47E6-84DE-3739F778762B"),
									ConnectionState:      to.Ptr(armpeering.ConnectionStateActive),
									PeeringDBFacilityID:  to.Ptr[int32](99999),
								}},
							PeerAsn: &armpeering.SubResource{
								ID: to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1"),
							},
						},
						PeeringLocation:   to.Ptr("peeringLocation0"),
						ProvisioningState: to.Ptr(armpeering.ProvisioningStateSucceeded),
					},
					SKU: &armpeering.SKU{
						Name:   to.Ptr("Basic_Exchange_Free"),
						Family: to.Ptr(armpeering.FamilyExchange),
						Size:   to.Ptr(armpeering.SizeFree),
						Tier:   to.Ptr(armpeering.TierBasic),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringsBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReceivedRoutes_ListByPeering(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetPeeringReceivedRoutes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists the prefixes received over the specified peering under the given subscription and resource group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewReceivedRoutesClient("subId", cred, &options)
	pager := client.ListByPeering("rgName",
		"peeringName",
		&armpeering.ReceivedRoutesClientListByPeeringOptions{Prefix: to.Ptr("1.1.1.0/24"),
			AsPath:                  to.Ptr("123 456"),
			OriginAsValidationState: to.Ptr("Valid"),
			RpkiValidationState:     to.Ptr("Valid"),
			SkipToken:               nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetPeeringReceivedRoutes.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpeering.ReceivedRouteListResult{
			Value: []*armpeering.ReceivedRoute{
				{
					AsPath:                  to.Ptr("123 456"),
					NextHop:                 to.Ptr("127.0.0.1"),
					OriginAsValidationState: to.Ptr("Valid"),
					Prefix:                  to.Ptr("1.1.1.0/24"),
					ReceivedTimestamp:       to.Ptr("2020-04-05 03:39:20"),
					RpkiValidationState:     to.Ptr("Valid"),
					TrustAnchor:             to.Ptr("Arin"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReceivedRouteListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReceivedRouteListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetPeeringReceivedRoutes.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnectionMonitorTests_Get(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetConnectionMonitorTest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Connection Monitor Test"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewConnectionMonitorTestsClient("subId", cred, &options)
	res, err := client.Get(ctx,
		"rgName",
		"peeringServiceName",
		"connectionMonitorTestName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetConnectionMonitorTest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpeering.ConnectionMonitorTest{
			Name: to.Ptr("connectionMonitorTestName"),
			ID:   to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peeringServices/peeringServiceName/connectionMonitorTests/connectionMonitorTestName"),
			Properties: &armpeering.ConnectionMonitorTestProperties{
				Path: []*string{
					to.Ptr("source"),
					to.Ptr("hop1"),
					to.Ptr("hop2"),
					to.Ptr("destination")},
				Destination:        to.Ptr("Example Destination"),
				DestinationPort:    to.Ptr[int32](443),
				IsTestSuccessful:   to.Ptr(true),
				ProvisioningState:  to.Ptr(armpeering.ProvisioningStateSucceeded),
				SourceAgent:        to.Ptr("Example Source Agent"),
				TestFrequencyInSec: to.Ptr[int32](30),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectionMonitorTest) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectionMonitorTest)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetConnectionMonitorTest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnectionMonitorTests_CreateOrUpdate(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreateOrUpdateConnectionMonitorTest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update Connection Monitor Test"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewConnectionMonitorTestsClient("subId", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rgName",
		"peeringServiceName",
		"connectionMonitorTestName",
		armpeering.ConnectionMonitorTest{
			Properties: &armpeering.ConnectionMonitorTestProperties{
				Destination:        to.Ptr("Example Destination"),
				DestinationPort:    to.Ptr[int32](443),
				SourceAgent:        to.Ptr("Example Source Agent"),
				TestFrequencyInSec: to.Ptr[int32](30),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreateOrUpdateConnectionMonitorTest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpeering.ConnectionMonitorTest{
			Name: to.Ptr("connectionMonitorTestName"),
			ID:   to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peeringServices/peeringServiceName/connectionMonitorTests/connectionMonitorTestName"),
			Properties: &armpeering.ConnectionMonitorTestProperties{
				Path:               []*string{},
				Destination:        to.Ptr("Example Destination"),
				DestinationPort:    to.Ptr[int32](443),
				IsTestSuccessful:   to.Ptr(false),
				ProvisioningState:  to.Ptr(armpeering.ProvisioningStateSucceeded),
				SourceAgent:        to.Ptr("Example Source Agent"),
				TestFrequencyInSec: to.Ptr[int32](30),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectionMonitorTest) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectionMonitorTest)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreateOrUpdateConnectionMonitorTest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnectionMonitorTests_Delete(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/DeleteConnectionMonitorTest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Connection Monitor Test"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewConnectionMonitorTestsClient("subId", cred, &options)
	_, err := client.Delete(ctx,
		"rgName",
		"peeringServiceName",
		"connectionMonitorTestName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/DeleteConnectionMonitorTest.json: %v", err)
	}
}

func TestConnectionMonitorTests_ListByPeeringService(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListConnectionMonitorTestsByPeeringService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Connection Monitor Tests associated with the peering service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewConnectionMonitorTestsClient("subId", cred, &options)
	pager := client.ListByPeeringService("rgName",
		"peeringServiceName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListConnectionMonitorTestsByPeeringService.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpeering.ConnectionMonitorTestListResult{
			Value: []*armpeering.ConnectionMonitorTest{
				{
					Name: to.Ptr("connectionMonitorTestName1"),
					ID:   to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peeringServices/peeringServiceName/connectionMonitorTests/connectionMonitorTestName1"),
					Properties: &armpeering.ConnectionMonitorTestProperties{
						Path: []*string{
							to.Ptr("source"),
							to.Ptr("hop1"),
							to.Ptr("hop2"),
							to.Ptr("destination")},
						Destination:        to.Ptr("Example Destination"),
						DestinationPort:    to.Ptr[int32](443),
						IsTestSuccessful:   to.Ptr(true),
						ProvisioningState:  to.Ptr(armpeering.ProvisioningStateSucceeded),
						SourceAgent:        to.Ptr("Example Source Agent"),
						TestFrequencyInSec: to.Ptr[int32](30),
					},
				},
				{
					Name: to.Ptr("connectionMonitorTestName2"),
					ID:   to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peeringServices/peeringServiceName/connectionMonitorTests/connectionMonitorTestName2"),
					Properties: &armpeering.ConnectionMonitorTestProperties{
						Path: []*string{
							to.Ptr("source"),
							to.Ptr("hop1"),
							to.Ptr("hop2"),
							to.Ptr("destination")},
						Destination:        to.Ptr("Example Destination 2"),
						DestinationPort:    to.Ptr[int32](443),
						IsTestSuccessful:   to.Ptr(false),
						ProvisioningState:  to.Ptr(armpeering.ProvisioningStateSucceeded),
						SourceAgent:        to.Ptr("Example Source Agent"),
						TestFrequencyInSec: to.Ptr[int32](30),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConnectionMonitorTestListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConnectionMonitorTestListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListConnectionMonitorTestsByPeeringService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPeeringServiceCountries_List(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringServiceCountriesBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List peering service countries"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewServiceCountriesClient("subId", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringServiceCountriesBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpeering.ServiceCountryListResult{
			Value: []*armpeering.ServiceCountry{
				{
					Name: to.Ptr("country1"),
					Type: to.Ptr("Microsoft.Peering/peeringServiceCountries"),
					ID:   to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peeringServiceCountries/country1"),
				},
				{
					Name: to.Ptr("country2"),
					Type: to.Ptr("Microsoft.Peering/peeringServiceCountries"),
					ID:   to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peeringServiceCountries/country2"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceCountryListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceCountryListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringServiceCountriesBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPeeringServiceLocations_List(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringServiceLocationsBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List peering service locations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewServiceLocationsClient("subId", cred, &options)
	pager := client.List(&armpeering.ServiceLocationsClientListOptions{Country: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringServiceLocationsBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpeering.ServiceLocationListResult{
			Value: []*armpeering.ServiceLocation{
				{
					Name: to.Ptr("peeringServiceLocation1"),
					Type: to.Ptr("Microsoft.Peering/peeringServiceLocations"),
					ID:   to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peeringServiceLocations/peeringServiceLocation1"),
					Properties: &armpeering.ServiceLocationProperties{
						Country: to.Ptr("country1"),
						State:   to.Ptr("state1"),
					},
				},
				{
					Name: to.Ptr("peeringServiceLocation2"),
					Type: to.Ptr("Microsoft.Peering/peeringServiceLocations"),
					ID:   to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peeringServiceLocations/peeringServiceLocation2"),
					Properties: &armpeering.ServiceLocationProperties{
						Country: to.Ptr("country2"),
						State:   to.Ptr("state2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceLocationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceLocationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringServiceLocationsBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrefixes_Get(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetPeeringServicePrefix.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a prefix associated with the peering service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewPrefixesClient("subId", cred, &options)
	res, err := client.Get(ctx,
		"rgName",
		"peeringServiceName",
		"peeringServicePrefixName",
		&armpeering.PrefixesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetPeeringServicePrefix.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpeering.ServicePrefix{
			Name: to.Ptr("peeringServicePrefixName"),
			ID:   to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peeringServices/peeringServiceName/prefixes/peeringServicePrefixName"),
			Properties: &armpeering.ServicePrefixProperties{
				LearnedType:             to.Ptr(armpeering.LearnedTypeViaServiceProvider),
				PeeringServicePrefixKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
				Prefix:                  to.Ptr("192.168.1.0/24"),
				PrefixValidationState:   to.Ptr(armpeering.PrefixValidationStateVerified),
				ProvisioningState:       to.Ptr(armpeering.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServicePrefix) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServicePrefix)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetPeeringServicePrefix.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrefixes_CreateOrUpdate(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreatePeeringServicePrefix.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a prefix for the peering service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewPrefixesClient("subId", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rgName",
		"peeringServiceName",
		"peeringServicePrefixName",
		armpeering.ServicePrefix{
			Properties: &armpeering.ServicePrefixProperties{
				PeeringServicePrefixKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
				Prefix:                  to.Ptr("192.168.1.0/24"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreatePeeringServicePrefix.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpeering.ServicePrefix{
			Name: to.Ptr("peeringServicePrefixName"),
			ID:   to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peeringServices/peeringServiceName/prefixes/peeringServicePrefixName"),
			Properties: &armpeering.ServicePrefixProperties{
				ErrorMessage:            to.Ptr("Prefix is not announced by the service provider to Microsoft."),
				LearnedType:             to.Ptr(armpeering.LearnedTypeNone),
				PeeringServicePrefixKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
				Prefix:                  to.Ptr("192.168.1.0/24"),
				PrefixValidationState:   to.Ptr(armpeering.PrefixValidationStateFailed),
				ProvisioningState:       to.Ptr(armpeering.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServicePrefix) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServicePrefix)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreatePeeringServicePrefix.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrefixes_Delete(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/DeletePeeringServicePrefix.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a prefix associated with the peering service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewPrefixesClient("subId", cred, &options)
	_, err := client.Delete(ctx,
		"rgName",
		"peeringServiceName",
		"peeringServicePrefixName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/DeletePeeringServicePrefix.json: %v", err)
	}
}

func TestPrefixes_ListByPeeringService(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPrefixesByPeeringService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all the prefixes associated with the peering service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewPrefixesClient("subId", cred, &options)
	pager := client.ListByPeeringService("rgName",
		"peeringServiceName",
		&armpeering.PrefixesClientListByPeeringServiceOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPrefixesByPeeringService.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpeering.ServicePrefixListResult{
			Value: []*armpeering.ServicePrefix{
				{
					Name: to.Ptr("peeringServicePrefixName1"),
					ID:   to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peeringServices/peeringServiceName/prefixes/peeringServicePrefixName1"),
					Properties: &armpeering.ServicePrefixProperties{
						LearnedType:             to.Ptr(armpeering.LearnedTypeViaServiceProvider),
						PeeringServicePrefixKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
						Prefix:                  to.Ptr("192.168.1.0/24"),
						PrefixValidationState:   to.Ptr(armpeering.PrefixValidationStateVerified),
						ProvisioningState:       to.Ptr(armpeering.ProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("peeringServicePrefixName2"),
					ID:   to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peeringServices/peeringServiceName/prefixes/peeringServicePrefixName2"),
					Properties: &armpeering.ServicePrefixProperties{
						LearnedType:             to.Ptr(armpeering.LearnedTypeViaServiceProvider),
						PeeringServicePrefixKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
						Prefix:                  to.Ptr("192.168.2.0/24"),
						PrefixValidationState:   to.Ptr(armpeering.PrefixValidationStateVerified),
						ProvisioningState:       to.Ptr(armpeering.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServicePrefixListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServicePrefixListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPrefixesByPeeringService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPeeringServiceProviders_List(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringServiceProviders.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List peering service providers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewServiceProvidersClient("subId", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringServiceProviders.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpeering.ServiceProviderListResult{
			Value: []*armpeering.ServiceProvider{
				{
					Name: to.Ptr("peeringServiceProvider1"),
					Type: to.Ptr("Microsoft.Peering/peeringServiceProviders"),
					ID:   to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peeringServiceProviders/peeringServiceProvider1"),
					Properties: &armpeering.ServiceProviderProperties{
						PeeringLocations: []*string{
							to.Ptr("peeringLocation1"),
							to.Ptr("peeringLocation2")},
						ServiceProviderName: to.Ptr("peeringServiceProvider1"),
					},
				},
				{
					Name: to.Ptr("peeringServiceProvider2"),
					Type: to.Ptr("Microsoft.Peering/peeringServiceProviders"),
					ID:   to.Ptr("/subscriptions/subId/providers/Microsoft.Peering/peeringServiceProviders/peeringServiceProvider2"),
					Properties: &armpeering.ServiceProviderProperties{
						PeeringLocations: []*string{
							to.Ptr("peeringLocation1"),
							to.Ptr("peeringLocation2")},
						ServiceProviderName: to.Ptr("peeringServiceProvider2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceProviderListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceProviderListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringServiceProviders.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPeeringServices_Get(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetPeeringService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a peering service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewServicesClient("subId", cred, &options)
	res, err := client.Get(ctx,
		"rgName",
		"peeringServiceName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetPeeringService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpeering.Service{
			Name:     to.Ptr("peeringServiceName"),
			Type:     to.Ptr("Microsoft.Peering/peeringServices"),
			ID:       to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peeringServices/peeringServiceName"),
			Location: to.Ptr("eastus"),
			Properties: &armpeering.ServiceProperties{
				LogAnalyticsWorkspaceProperties: &armpeering.LogAnalyticsWorkspaceProperties{
					ConnectedAgents: []*string{
						to.Ptr("Agent1"),
						to.Ptr("Agent2")},
					Key:         to.Ptr("key"),
					WorkspaceID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				},
				PeeringServiceLocation:         to.Ptr("state1"),
				PeeringServiceProvider:         to.Ptr("serviceProvider1"),
				ProviderBackupPeeringLocation:  to.Ptr("peeringLocation2"),
				ProviderPrimaryPeeringLocation: to.Ptr("peeringLocation1"),
				ProvisioningState:              to.Ptr(armpeering.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Service) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Service)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/GetPeeringService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPeeringServices_CreateOrUpdate(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreatePeeringService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a  peering service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewServicesClient("subId", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rgName",
		"peeringServiceName",
		armpeering.Service{
			Location: to.Ptr("eastus"),
			Properties: &armpeering.ServiceProperties{
				PeeringServiceLocation:         to.Ptr("state1"),
				PeeringServiceProvider:         to.Ptr("serviceProvider1"),
				ProviderBackupPeeringLocation:  to.Ptr("peeringLocation2"),
				ProviderPrimaryPeeringLocation: to.Ptr("peeringLocation1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreatePeeringService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpeering.Service{
			Name:     to.Ptr("peeringServiceName"),
			Type:     to.Ptr("Microsoft.Peering/peeringServices"),
			ID:       to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peeringServices/peeringServiceName"),
			Location: to.Ptr("eastus"),
			Properties: &armpeering.ServiceProperties{
				PeeringServiceLocation:         to.Ptr("state1"),
				PeeringServiceProvider:         to.Ptr("serviceProvider1"),
				ProviderBackupPeeringLocation:  to.Ptr("peeringLocation2"),
				ProviderPrimaryPeeringLocation: to.Ptr("peeringLocation1"),
				ProvisioningState:              to.Ptr(armpeering.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Service) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Service)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/CreatePeeringService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPeeringServices_Delete(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/DeletePeeringService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a peering service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewServicesClient("subId", cred, &options)
	_, err := client.Delete(ctx,
		"rgName",
		"peeringServiceName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/DeletePeeringService.json: %v", err)
	}
}

func TestPeeringServices_Update(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/UpdatePeeringServiceTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update peering service tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewServicesClient("subId", cred, &options)
	res, err := client.Update(ctx,
		"rgName",
		"peeringServiceName",
		armpeering.ResourceTags{
			Tags: map[string]*string{
				"tag0": to.Ptr("value0"),
				"tag1": to.Ptr("value1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/UpdatePeeringServiceTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpeering.Service{
			Name:     to.Ptr("peeringServiceName"),
			Type:     to.Ptr("Microsoft.Peering/peeringServices"),
			ID:       to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peeringServices/peeringServiceName"),
			Location: to.Ptr("eastus"),
			Properties: &armpeering.ServiceProperties{
				LogAnalyticsWorkspaceProperties: &armpeering.LogAnalyticsWorkspaceProperties{
					ConnectedAgents: []*string{
						to.Ptr("Agent1"),
						to.Ptr("Agent2")},
					Key:         to.Ptr("key"),
					WorkspaceID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				},
				PeeringServiceLocation:         to.Ptr("state1"),
				PeeringServiceProvider:         to.Ptr("serviceProvider1"),
				ProviderBackupPeeringLocation:  to.Ptr("peeringLocation2"),
				ProviderPrimaryPeeringLocation: to.Ptr("peeringLocation1"),
				ProvisioningState:              to.Ptr(armpeering.ProvisioningStateSucceeded),
			},
			Tags: map[string]*string{
				"tag0": to.Ptr("value0"),
				"tag1": to.Ptr("value1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Service) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Service)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/UpdatePeeringServiceTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPeeringServices_ListByResourceGroup(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringServicesByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List peering services in a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewServicesClient("subId", cred, &options)
	pager := client.ListByResourceGroup("rgName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringServicesByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpeering.ServiceListResult{
			Value: []*armpeering.Service{
				{
					Name:     to.Ptr("peeringServiceName"),
					Type:     to.Ptr("Microsoft.Peering/peeringServices"),
					ID:       to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peeringServices/peeringServiceName"),
					Location: to.Ptr("eastus"),
					Properties: &armpeering.ServiceProperties{
						LogAnalyticsWorkspaceProperties: &armpeering.LogAnalyticsWorkspaceProperties{
							ConnectedAgents: []*string{
								to.Ptr("Agent1"),
								to.Ptr("Agent2")},
							Key:         to.Ptr("key"),
							WorkspaceID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						},
						PeeringServiceLocation:         to.Ptr("state1"),
						PeeringServiceProvider:         to.Ptr("serviceProvider1"),
						ProviderBackupPeeringLocation:  to.Ptr("peeringLocation2"),
						ProviderPrimaryPeeringLocation: to.Ptr("peeringLocation1"),
						ProvisioningState:              to.Ptr(armpeering.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringServicesByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPeeringServices_ListBySubscription(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringServicesBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List peering services in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewServicesClient("subId", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringServicesBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpeering.ServiceListResult{
			Value: []*armpeering.Service{
				{
					Name:     to.Ptr("peeringServiceName"),
					Type:     to.Ptr("Microsoft.Peering/peeringServices"),
					ID:       to.Ptr("/subscriptions/subId/resourceGroups/rgName/providers/Microsoft.Peering/peeringServices/peeringServiceName"),
					Location: to.Ptr("eastus"),
					Properties: &armpeering.ServiceProperties{
						LogAnalyticsWorkspaceProperties: &armpeering.LogAnalyticsWorkspaceProperties{
							ConnectedAgents: []*string{
								to.Ptr("Agent1"),
								to.Ptr("Agent2")},
							Key:         to.Ptr("key"),
							WorkspaceID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						},
						PeeringServiceLocation:         to.Ptr("state1"),
						PeeringServiceProvider:         to.Ptr("serviceProvider1"),
						ProviderBackupPeeringLocation:  to.Ptr("peeringLocation2"),
						ProviderPrimaryPeeringLocation: to.Ptr("peeringLocation1"),
						ProvisioningState:              to.Ptr(armpeering.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/ListPeeringServicesBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPeeringServices_InitializeConnectionMonitor(t *testing.T) {
	// From example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/InitializeConnectionMonitor.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Initialize Peering Service for Connection Monitor functionality"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpeering.NewServicesClient("subId", cred, &options)
	_, err := client.InitializeConnectionMonitor(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/peering/resource-manager/Microsoft.Peering/stable/2021-06-01/examples/InitializeConnectionMonitor.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
