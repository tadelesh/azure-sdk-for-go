//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpeering

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func Test_CheckServiceProviderAvailability(t *testing.T) {
	// From example Check if peering service provider is available in customer location
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeeringManagementClientClient(con,
		"subId")
	_, err := client.CheckServiceProviderAvailability(ctx,
		CheckServiceProviderAvailabilityInput{
			PeeringServiceLocation: to.StringPtr("peeringServiceLocation1"),
			PeeringServiceProvider: to.StringPtr("peeringServiceProvider1"),
		},
		&PeeringManagementClientCheckServiceProviderAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestLegacyPeerings_List(t *testing.T) {
	// From example List legacy peerings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLegacyPeeringsClient(con,
		"subId")
	pager := client.List("peeringLocation0",
		Enum1Exchange,
		&LegacyPeeringsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Peering.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Peering.ID should not be nil!")
			}
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example List peering operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestPeerAsns_Get(t *testing.T) {
	// From example Get a peer ASN
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeerAsnsClient(con,
		"subId")
	res, err := client.Get(ctx,
		"MyPeerAsn",
		&PeerAsnsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PeerAsn.ID == nil {
		t.Fatal("PeerAsn.ID should not be nil!")
	}
}

func TestPeerAsns_CreateOrUpdate(t *testing.T) {
	// From example Create a peer ASN
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeerAsnsClient(con,
		"subId")
	res, err := client.CreateOrUpdate(ctx,
		"MyPeerAsn",
		PeerAsn{
			Properties: &PeerAsnProperties{
				PeerAsn: to.Int32Ptr(65000),
				PeerContactInfo: &ContactInfo{
					Emails: []*string{
						to.StringPtr("abc@contoso.com"),
						to.StringPtr("xyz@contoso.com")},
					Phone: []*string{
						to.StringPtr("+1 (234) 567-8900")},
				},
				PeerName: to.StringPtr("Contoso"),
			},
		},
		&PeerAsnsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PeerAsn.ID == nil {
		t.Fatal("PeerAsn.ID should not be nil!")
	}
}

func TestPeerAsns_Delete(t *testing.T) {
	// From example Delete a peer ASN
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeerAsnsClient(con,
		"subId")
	_, err := client.Delete(ctx,
		"MyPeerAsn",
		&PeerAsnsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPeerAsns_ListBySubscription(t *testing.T) {
	// From example List peer ASNs in a subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeerAsnsClient(con,
		"subId")
	pager := client.ListBySubscription(&PeerAsnsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PeerAsn.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PeerAsn.ID should not be nil!")
			}
		}
	}
}

func TestPeeringLocations_List(t *testing.T) {
	// From example List direct peering locations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeeringLocationsClient(con,
		"subId")
	pager := client.List(Enum14Direct,
		&PeeringLocationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PeeringLocation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PeeringLocation.ID should not be nil!")
			}
		}
	}

	// From example List exchange peering locations
	pager = client.List(Enum14Exchange,
		&PeeringLocationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PeeringLocation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PeeringLocation.ID should not be nil!")
			}
		}
	}
}

func TestPeerings_Get(t *testing.T) {
	// From example Get a peering
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeeringsClient(con,
		"subId")
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"MyPeering",
		&PeeringsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Peering.ID == nil {
		t.Fatal("Peering.ID should not be nil!")
	}
}

func TestPeerings_CreateOrUpdate(t *testing.T) {
	// From example Create a direct peering
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeeringsClient(con,
		"subId")
	res, err := client.CreateOrUpdate(ctx,
		"MyResourceGroup",
		"MyPeering",
		Peering{
			Kind:     KindDirect.ToPtr(),
			Location: to.StringPtr("eastus"),
			Properties: &PeeringProperties{
				Direct: &PeeringPropertiesDirect{
					Connections: []*DirectConnection{
						{
							BandwidthInMbps: to.Int32Ptr(10000),
							BgpSession: &BgpSession{
								MaxPrefixesAdvertisedV4: to.Int32Ptr(1000),
								MaxPrefixesAdvertisedV6: to.Int32Ptr(100),
								MD5AuthenticationKey:    to.StringPtr("test-md5-auth-key"),
								SessionPrefixV4:         to.StringPtr("192.168.0.0/31"),
								SessionPrefixV6:         to.StringPtr("fd00::0/127"),
							},
							ConnectionIdentifier:   to.StringPtr("5F4CB5C7-6B43-4444-9338-9ABC72606C16"),
							PeeringDBFacilityID:    to.Int32Ptr(99999),
							SessionAddressProvider: SessionAddressProviderPeer.ToPtr(),
							UseForPeeringService:   to.BoolPtr(false),
						},
						{
							BandwidthInMbps: to.Int32Ptr(10000),
							BgpSession: &BgpSession{
								MaxPrefixesAdvertisedV4: to.Int32Ptr(1000),
								MaxPrefixesAdvertisedV6: to.Int32Ptr(100),
								MD5AuthenticationKey:    to.StringPtr("test-md5-auth-key"),
								SessionPrefixV4:         to.StringPtr("192.168.1.0/31"),
								SessionPrefixV6:         to.StringPtr("fd00::2/127"),
							},
							ConnectionIdentifier:   to.StringPtr("8AB00818-D533-4504-A25A-03A17F61201C"),
							PeeringDBFacilityID:    to.Int32Ptr(99999),
							SessionAddressProvider: SessionAddressProviderMicrosoft.ToPtr(),
							UseForPeeringService:   to.BoolPtr(true),
						}},
					DirectPeeringType: DirectPeeringTypeEdge.ToPtr(),
					PeerAsn: &SubResource{
						ID: to.StringPtr("/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1"),
					},
					UseForPeeringService: to.BoolPtr(false),
				},
				PeeringLocation: to.StringPtr("peeringLocation0"),
			},
			SKU: &PeeringSKU{
				Name: NameBasicDirectFree.ToPtr(),
			},
		},
		&PeeringsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Peering.ID == nil {
		t.Fatal("Peering.ID should not be nil!")
	}

	// From example Create an exchange peering
	res, err = client.CreateOrUpdate(ctx,
		"MyResourceGroup",
		"MyPeering",
		Peering{
			Kind:     KindExchange.ToPtr(),
			Location: to.StringPtr("eastus"),
			Properties: &PeeringProperties{
				Exchange: &PeeringPropertiesExchange{
					Connections: []*ExchangeConnection{
						{
							BgpSession: &BgpSession{
								MaxPrefixesAdvertisedV4: to.Int32Ptr(1000),
								MaxPrefixesAdvertisedV6: to.Int32Ptr(100),
								MD5AuthenticationKey:    to.StringPtr("test-md5-auth-key"),
								PeerSessionIPv4Address:  to.StringPtr("192.168.2.1"),
								PeerSessionIPv6Address:  to.StringPtr("fd00::1"),
							},
							ConnectionIdentifier: to.StringPtr("CE495334-0E94-4E51-8164-8116D6CD284D"),
							PeeringDBFacilityID:  to.Int32Ptr(99999),
						},
						{
							BgpSession: &BgpSession{
								MaxPrefixesAdvertisedV4: to.Int32Ptr(1000),
								MaxPrefixesAdvertisedV6: to.Int32Ptr(100),
								MD5AuthenticationKey:    to.StringPtr("test-md5-auth-key"),
								PeerSessionIPv4Address:  to.StringPtr("192.168.2.2"),
								PeerSessionIPv6Address:  to.StringPtr("fd00::2"),
							},
							ConnectionIdentifier: to.StringPtr("CDD8E673-CB07-47E6-84DE-3739F778762B"),
							PeeringDBFacilityID:  to.Int32Ptr(99999),
						}},
					PeerAsn: &SubResource{
						ID: to.StringPtr("/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1"),
					},
				},
				PeeringLocation: to.StringPtr("peeringLocation0"),
			},
			SKU: &PeeringSKU{
				Name: NameBasicExchangeFree.ToPtr(),
			},
		},
		&PeeringsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Peering.ID == nil {
		t.Fatal("Peering.ID should not be nil!")
	}
}

func TestPeerings_Delete(t *testing.T) {
	// From example Delete a peering
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeeringsClient(con,
		"subId")
	_, err := client.Delete(ctx,
		"MyResourceGroup",
		"MyPeering",
		&PeeringsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPeerings_Update(t *testing.T) {
	// From example Update peering tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeeringsClient(con,
		"subId")
	res, err := client.Update(ctx,
		"MyResourceGroup",
		"MyPeering",
		ResourceTags{
			Tags: map[string]*string{
				"tag0": to.StringPtr("value0"),
				"tag1": to.StringPtr("value1"),
			},
		},
		&PeeringsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Peering.ID == nil {
		t.Fatal("Peering.ID should not be nil!")
	}
}

func TestPeerings_ListByResourceGroup(t *testing.T) {
	// From example List peerings in a resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeeringsClient(con,
		"subId")
	pager := client.ListByResourceGroup("MyResourceGroup",
		&PeeringsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Peering.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Peering.ID should not be nil!")
			}
		}
	}
}

func TestPeerings_ListBySubscription(t *testing.T) {
	// From example List peerings in a subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeeringsClient(con,
		"subId")
	pager := client.ListBySubscription(&PeeringsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Peering.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Peering.ID should not be nil!")
			}
		}
	}
}

func TestPeeringServiceLocations_List(t *testing.T) {
	// From example List peering service locations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeeringServiceLocationsClient(con,
		"subId")
	pager := client.List(&PeeringServiceLocationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PeeringServiceLocation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PeeringServiceLocation.ID should not be nil!")
			}
		}
	}
}

func TestPeeringServicePrefixes_Get(t *testing.T) {
	// From example Get a prefix associated with the peering service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeeringServicePrefixesClient(con,
		"subId")
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"MyPeeringService",
		"MyPeeringServicePrefix",
		&PeeringServicePrefixesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PeeringServicePrefix.ID == nil {
		t.Fatal("PeeringServicePrefix.ID should not be nil!")
	}
}

func TestPeeringServicePrefixes_CreateOrUpdate(t *testing.T) {
	// From example Create or update a prefix for the peering service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeeringServicePrefixesClient(con,
		"subId")
	res, err := client.CreateOrUpdate(ctx,
		"MyResourceGroup",
		"MyPeeringService",
		"MyPeeringServicePrefix",
		PeeringServicePrefix{
			Properties: &PeeringServicePrefixProperties{
				Prefix: to.StringPtr("192.168.1.0/24"),
			},
		},
		&PeeringServicePrefixesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PeeringServicePrefix.ID == nil {
		t.Fatal("PeeringServicePrefix.ID should not be nil!")
	}
}

func TestPeeringServicePrefixes_Delete(t *testing.T) {
	// From example Delete a prefix associated with the peering service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeeringServicePrefixesClient(con,
		"subId")
	_, err := client.Delete(ctx,
		"MyResourceGroup",
		"MyPeeringService",
		"MyPeeringServicePrefix",
		&PeeringServicePrefixesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrefixes_ListByPeeringService(t *testing.T) {
	// From example List all the prefixes associated with the peering service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrefixesClient(con,
		"subId")
	pager := client.ListByPeeringService("MyResourceGroup",
		"MyPeeringService",
		&PrefixesListByPeeringServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PeeringServicePrefix.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PeeringServicePrefix.ID should not be nil!")
			}
		}
	}
}

func TestPeeringServiceProviders_List(t *testing.T) {
	// From example List peering service providers
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeeringServiceProvidersClient(con,
		"subId")
	pager := client.List(&PeeringServiceProvidersListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PeeringServiceProvider.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PeeringServiceProvider.ID should not be nil!")
			}
		}
	}
}

func TestPeeringServices_Get(t *testing.T) {
	// From example Get a peering service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeeringServicesClient(con,
		"subId")
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"MyPeeringService",
		&PeeringServicesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PeeringService.ID == nil {
		t.Fatal("PeeringService.ID should not be nil!")
	}
}

func TestPeeringServices_CreateOrUpdate(t *testing.T) {
	// From example Create a  peering service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeeringServicesClient(con,
		"subId")
	res, err := client.CreateOrUpdate(ctx,
		"MyResourceGroup",
		"MyPeeringService",
		PeeringService{
			Location: to.StringPtr("eastus"),
			Properties: &PeeringServiceProperties{
				PeeringServiceLocation: to.StringPtr("state1"),
				PeeringServiceProvider: to.StringPtr("serviceProvider1"),
			},
		},
		&PeeringServicesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PeeringService.ID == nil {
		t.Fatal("PeeringService.ID should not be nil!")
	}
}

func TestPeeringServices_Delete(t *testing.T) {
	// From example Delete a peering service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeeringServicesClient(con,
		"subId")
	_, err := client.Delete(ctx,
		"MyResourceGroup",
		"MyPeeringService",
		&PeeringServicesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPeeringServices_Update(t *testing.T) {
	// From example Update peering service tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeeringServicesClient(con,
		"subId")
	res, err := client.Update(ctx,
		"MyResourceGroup",
		"MyPeeringService",
		ResourceTags{
			Tags: map[string]*string{
				"tag0": to.StringPtr("value0"),
				"tag1": to.StringPtr("value1"),
			},
		},
		&PeeringServicesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PeeringService.ID == nil {
		t.Fatal("PeeringService.ID should not be nil!")
	}
}

func TestPeeringServices_ListByResourceGroup(t *testing.T) {
	// From example List peering services in a resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeeringServicesClient(con,
		"subId")
	pager := client.ListByResourceGroup("MyResourceGroup",
		&PeeringServicesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PeeringService.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PeeringService.ID should not be nil!")
			}
		}
	}
}

func TestPeeringServices_ListBySubscription(t *testing.T) {
	// From example List peering services in a subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPeeringServicesClient(con,
		"subId")
	pager := client.ListBySubscription(&PeeringServicesListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PeeringService.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PeeringService.ID should not be nil!")
			}
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
