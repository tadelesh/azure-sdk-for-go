//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdevtestlabs_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/devtestlabs/armdevtestlabs"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestProviderOperations_List(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ProviderOperations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ProviderOperations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewProviderOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ProviderOperations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.ProviderOperationResult{
			Value: []*armdevtestlabs.OperationMetadata{
				{
					Name: to.Ptr("Microsoft.DevTestLab/register/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Registers the subscription"),
						Operation:   to.Ptr("Register Subscription"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("register"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/policySets/EvaluatePolicies/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Evaluates lab policy."),
						Operation:   to.Ptr("Evaluate policy"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("policy sets"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/delete"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Delete labs."),
						Operation:   to.Ptr("Delete labs."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Labs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read labs."),
						Operation:   to.Ptr("Read labs."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Labs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/write"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Add or modify labs."),
						Operation:   to.Ptr("Add or modify labs."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Labs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/ListVhds/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("List disk images available for custom image creation."),
						Operation:   to.Ptr("List VHDs"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Labs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/GenerateUploadUri/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Generate a URI for uploading custom disk images to a Lab."),
						Operation:   to.Ptr("Generate image upload URI"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Labs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/CreateEnvironment/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Create virtual machines in a lab."),
						Operation:   to.Ptr("Create a virtual machine"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Labs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/ClaimAnyVm/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Claim a random claimable virtual machine in the lab."),
						Operation:   to.Ptr("Claim Any Virtual Machine"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Labs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/ExportResourceUsage/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Exports the lab resource usage into a storage account"),
						Operation:   to.Ptr("Exports the lab resource usage into a storage account"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Labs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/ImportVirtualMachine/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Import a virtual machine into a different lab."),
						Operation:   to.Ptr("Import a virtual machine"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Labs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/policySets/policies/delete"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Delete policies."),
						Operation:   to.Ptr("Delete policies."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("policies"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/policySets/policies/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read policies."),
						Operation:   to.Ptr("Read policies."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("policies"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/policySets/policies/write"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Add or modify policies."),
						Operation:   to.Ptr("Add or modify policies."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("policies"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/schedules/delete"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Delete schedules."),
						Operation:   to.Ptr("Delete schedules."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("schedules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/schedules/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read schedules."),
						Operation:   to.Ptr("Read schedules."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("schedules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/schedules/write"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Add or modify schedules."),
						Operation:   to.Ptr("Add or modify schedules."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("schedules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/schedules/Execute/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Execute a schedule."),
						Operation:   to.Ptr("Execute schedule"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("schedules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/schedules/ListApplicable/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Lists all applicable schedules"),
						Operation:   to.Ptr("List all applicable schedules"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("schedules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/schedules/delete"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Delete schedules."),
						Operation:   to.Ptr("Delete schedules."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("schedules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/schedules/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read schedules."),
						Operation:   to.Ptr("Read schedules."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("schedules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/schedules/write"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Add or modify schedules."),
						Operation:   to.Ptr("Add or modify schedules."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("schedules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/schedules/Execute/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Execute a schedule."),
						Operation:   to.Ptr("Execute schedule"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("schedules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/schedules/Retarget/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Updates a schedule's target resource Id."),
						Operation:   to.Ptr("Retarget schedule."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("schedules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/schedules/delete"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Delete schedules."),
						Operation:   to.Ptr("Delete schedules."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("schedules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/schedules/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read schedules."),
						Operation:   to.Ptr("Read schedules."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("schedules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/schedules/write"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Add or modify schedules."),
						Operation:   to.Ptr("Add or modify schedules."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("schedules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/schedules/Execute/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Execute a schedule."),
						Operation:   to.Ptr("Execute schedule"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("schedules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/serviceFabrics/schedules/delete"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Delete schedules."),
						Operation:   to.Ptr("Delete schedules."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("schedules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/serviceFabrics/schedules/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read schedules."),
						Operation:   to.Ptr("Read schedules."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("schedules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/serviceFabrics/schedules/write"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Add or modify schedules."),
						Operation:   to.Ptr("Add or modify schedules."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("schedules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/serviceFabrics/schedules/Execute/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Execute a schedule."),
						Operation:   to.Ptr("Execute schedule"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("schedules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/artifactSources/delete"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Delete artifact sources."),
						Operation:   to.Ptr("Delete artifact sources."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Artifact sources"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/artifactSources/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read artifact sources."),
						Operation:   to.Ptr("Read artifact sources."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Artifact sources"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/artifactSources/write"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Add or modify artifact sources."),
						Operation:   to.Ptr("Add or modify artifact sources."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Artifact sources"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/artifactSources/artifacts/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read artifacts."),
						Operation:   to.Ptr("Read artifacts."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Artifacts"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/artifactSources/artifacts/GenerateArmTemplate/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Generates an ARM template for the given artifact, uploads the required files to a storage account, and validates the generated artifact."),
						Operation:   to.Ptr("Generates an ARM template for the given artifact"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Artifacts"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/galleryImages/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read gallery images."),
						Operation:   to.Ptr("Read gallery images."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("gallery images"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/customImages/delete"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Delete custom images."),
						Operation:   to.Ptr("Delete custom images."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("custom images"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/customImages/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read custom images."),
						Operation:   to.Ptr("Read custom images."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("custom images"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/customImages/write"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Add or modify custom images."),
						Operation:   to.Ptr("Add or modify custom images."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("custom images"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualNetworks/delete"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Delete virtual networks."),
						Operation:   to.Ptr("Delete virtual networks."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("virtual networks"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualNetworks/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read virtual networks."),
						Operation:   to.Ptr("Read virtual networks."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("virtual networks"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualNetworks/write"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Add or modify virtual networks."),
						Operation:   to.Ptr("Add or modify virtual networks."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("virtual networks"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/delete"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Delete virtual machines."),
						Operation:   to.Ptr("Delete virtual machines."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Virtual machines"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read virtual machines."),
						Operation:   to.Ptr("Read virtual machines."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Virtual machines"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/write"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Add or modify virtual machines."),
						Operation:   to.Ptr("Add or modify virtual machines."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Virtual machines"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/Start/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Start a virtual machine."),
						Operation:   to.Ptr("Start virtual machine"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Virtual machines"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/Stop/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Stop a virtual machine"),
						Operation:   to.Ptr("Stop virtual machine"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Virtual machines"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/Restart/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Restart a virtual machine."),
						Operation:   to.Ptr("Restart virtual machine"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Virtual machines"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/Redeploy/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Redeploy a virtual machine"),
						Operation:   to.Ptr("Redeploy a virtual machine"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Virtual machines"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/Resize/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Resize Virtual Machine."),
						Operation:   to.Ptr("Resize Virtual Machine."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Virtual machines"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/ApplyArtifacts/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Apply artifacts to virtual machine."),
						Operation:   to.Ptr("Apply artifacts to virtual machine"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Virtual machines"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/AddDataDisk/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Attach a new or existing data disk to virtual machine."),
						Operation:   to.Ptr("Add or attach a data disk"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Virtual machines"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/DetachDataDisk/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Detach the specified disk from the virtual machine."),
						Operation:   to.Ptr("Detach the specified disk from the virtual machine"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Virtual machines"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/Claim/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Take ownership of an existing virtual machine"),
						Operation:   to.Ptr("Claim a virtual machine"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Virtual machines"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/UnClaim/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Release ownership of an existing virtual machine"),
						Operation:   to.Ptr("Unclaim a virtual machine"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Virtual machines"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/TransferDisks/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Transfer ownership of virtual machine data disks to yourself"),
						Operation:   to.Ptr("Transfer data disks to yourself"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Virtual machines"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/ListApplicableSchedules/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Lists all applicable schedules"),
						Operation:   to.Ptr("List all applicable schedules"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Virtual machines"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/GetRdpFileContents/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Gets a string that represents the contents of the RDP file for the virtual machine"),
						Operation:   to.Ptr("Get RDP file contents"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Virtual machines"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/formulas/delete"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Delete formulas."),
						Operation:   to.Ptr("Delete formulas."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Formulas"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/formulas/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read formulas."),
						Operation:   to.Ptr("Read formulas."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Formulas"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/formulas/write"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Add or modify formulas."),
						Operation:   to.Ptr("Add or modify formulas."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Formulas"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/costs/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read costs."),
						Operation:   to.Ptr("Read costs."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("costs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/costs/write"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Add or modify costs."),
						Operation:   to.Ptr("Add or modify costs."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("costs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/disks/delete"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Delete disks."),
						Operation:   to.Ptr("Delete disks."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("disks"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/disks/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read disks."),
						Operation:   to.Ptr("Read disks."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("disks"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/disks/write"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Add or modify disks."),
						Operation:   to.Ptr("Add or modify disks."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("disks"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/disks/Attach/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Attach and create the lease of the disk to the virtual machine."),
						Operation:   to.Ptr("Attach disk"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("disks"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/disks/Detach/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Detach and break the lease of the disk attached to the virtual machine."),
						Operation:   to.Ptr("Detach and break the lease of the disk attached to the virtual machine"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("disks"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/delete"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Delete user profiles."),
						Operation:   to.Ptr("Delete user profiles."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("user profiles"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read user profiles."),
						Operation:   to.Ptr("Read user profiles."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("user profiles"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/write"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Add or modify user profiles."),
						Operation:   to.Ptr("Add or modify user profiles."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("user profiles"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/notificationChannels/delete"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Delete notification channels."),
						Operation:   to.Ptr("Delete notification channels."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("notificationChannels"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/notificationChannels/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read notification channels."),
						Operation:   to.Ptr("Read notification channels."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("notificationChannels"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/notificationChannels/write"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Add or modify notification channels."),
						Operation:   to.Ptr("Add or modify notification channels."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("notificationChannels"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/notificationChannels/Notify/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Send notification to provided channel."),
						Operation:   to.Ptr("Notify"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("notificationChannels"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/secrets/delete"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Delete secrets."),
						Operation:   to.Ptr("Delete secrets."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("secrets"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/secrets/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read secrets."),
						Operation:   to.Ptr("Read secrets."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("secrets"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/secrets/write"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Add or modify secrets."),
						Operation:   to.Ptr("Add or modify secrets."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("secrets"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/locations/operations/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read operations."),
						Operation:   to.Ptr("Read operations."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("operations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/artifactSources/armTemplates/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read azure resource manager templates."),
						Operation:   to.Ptr("Read azure resource manager templates."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Azure Resource Manager templates"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/environments/delete"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Delete environments."),
						Operation:   to.Ptr("Delete environments."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("environments"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/environments/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read environments."),
						Operation:   to.Ptr("Read environments."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("environments"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/environments/write"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Add or modify environments."),
						Operation:   to.Ptr("Add or modify environments."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("environments"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/serviceRunners/delete"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Delete service runners."),
						Operation:   to.Ptr("Delete service runners."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Service runners"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/serviceRunners/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read service runners."),
						Operation:   to.Ptr("Read service runners."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Service runners"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/serviceRunners/write"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Add or modify service runners."),
						Operation:   to.Ptr("Add or modify service runners."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Service runners"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/serviceFabrics/delete"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Delete service fabrics."),
						Operation:   to.Ptr("Delete service fabrics."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Service Fabrics"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/serviceFabrics/read"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Read service fabrics."),
						Operation:   to.Ptr("Read service fabrics."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Service Fabrics"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/serviceFabrics/write"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Add or modify service fabrics."),
						Operation:   to.Ptr("Add or modify service fabrics."),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Service Fabrics"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/serviceFabrics/Start/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Start a service fabric."),
						Operation:   to.Ptr("Start service fabric"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Service Fabrics"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/serviceFabrics/Stop/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Stop a service fabric"),
						Operation:   to.Ptr("Stop service fabric"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Service Fabrics"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DevTestLab/labs/users/serviceFabrics/ListApplicableSchedules/action"),
					Display: &armdevtestlabs.OperationMetadataDisplay{
						Description: to.Ptr("Lists all applicable schedules"),
						Operation:   to.Ptr("List all applicable schedules"),
						Provider:    to.Ptr("Microsoft DevTest Labs"),
						Resource:    to.Ptr("Service Fabrics"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProviderOperationResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProviderOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ProviderOperations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLabs_ListBySubscription(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Labs_ListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewLabsClient("{subscriptionId}", cred, &options)
	pager := client.ListBySubscription(&armdevtestlabs.LabsClientListBySubscriptionOptions{Expand: nil,
		Filter:  nil,
		Top:     nil,
		Orderby: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.LabList{
			Value: []*armdevtestlabs.Lab{
				{
					Name:     to.Ptr("{labName1}"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName1}"),
					Location: to.Ptr("westcentralus"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.LabProperties{
						Announcement: &armdevtestlabs.LabAnnouncementProperties{
							Enabled:  to.Ptr(armdevtestlabs.EnableStatusDisabled),
							Expired:  to.Ptr(false),
							Markdown: to.Ptr(""),
							Title:    to.Ptr(""),
						},
						ArtifactsStorageAccount:              to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.Storage/storageAccounts/{storageAccountName}"),
						CreatedDate:                          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-30T08:38:13.1973609-07:00"); return t }()),
						DefaultPremiumStorageAccount:         to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.Storage/storageAccounts/{storageAccountName}"),
						DefaultStorageAccount:                to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.Storage/storageAccounts/{storageAccountName}"),
						EnvironmentPermission:                to.Ptr(armdevtestlabs.EnvironmentPermissionReader),
						LabStorageType:                       to.Ptr(armdevtestlabs.StorageTypePremium),
						MandatoryArtifactsResourceIDsLinux:   []*string{},
						MandatoryArtifactsResourceIDsWindows: []*string{},
						PremiumDataDiskStorageAccount:        to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.Storage/storageAccounts/{storageAccountName}"),
						PremiumDataDisks:                     to.Ptr(armdevtestlabs.PremiumDataDiskDisabled),
						ProvisioningState:                    to.Ptr("Succeeded"),
						Support: &armdevtestlabs.LabSupportProperties{
							Enabled:  to.Ptr(armdevtestlabs.EnableStatusDisabled),
							Markdown: to.Ptr(""),
						},
						UniqueIdentifier: to.Ptr("{uniqueIdentifier}"),
						VaultName:        to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.KeyVault/vaults/{keyVaultName}"),
					},
				},
				{
					Name:     to.Ptr("{labName2}"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName2}/providers/microsoft.devtestlab/labs/{labName2}"),
					Location: to.Ptr("japaneast"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.LabProperties{
						Announcement: &armdevtestlabs.LabAnnouncementProperties{
							Enabled:  to.Ptr(armdevtestlabs.EnableStatusDisabled),
							Expired:  to.Ptr(false),
							Markdown: to.Ptr(""),
							Title:    to.Ptr(""),
						},
						ArtifactsStorageAccount:              to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName2}/providers/Microsoft.Storage/storageAccounts/{storageAccountName2}"),
						CreatedDate:                          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-30T09:37:52.9675083-07:00"); return t }()),
						DefaultPremiumStorageAccount:         to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName2}/providers/Microsoft.Storage/storageAccounts/{storageAccountName2}"),
						DefaultStorageAccount:                to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName2}/providers/Microsoft.Storage/storageAccounts/{storageAccountName2}"),
						EnvironmentPermission:                to.Ptr(armdevtestlabs.EnvironmentPermissionReader),
						LabStorageType:                       to.Ptr(armdevtestlabs.StorageTypePremium),
						MandatoryArtifactsResourceIDsLinux:   []*string{},
						MandatoryArtifactsResourceIDsWindows: []*string{},
						PremiumDataDiskStorageAccount:        to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName2}/providers/Microsoft.Storage/storageAccounts/{storageAccountName2}"),
						PremiumDataDisks:                     to.Ptr(armdevtestlabs.PremiumDataDiskDisabled),
						ProvisioningState:                    to.Ptr("Succeeded"),
						Support: &armdevtestlabs.LabSupportProperties{
							Enabled:  to.Ptr(armdevtestlabs.EnableStatusDisabled),
							Markdown: to.Ptr(""),
						},
						UniqueIdentifier: to.Ptr("{uniqueIdentifier}"),
						VaultName:        to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName2}/providers/Microsoft.KeyVault/vaults/{keyVaultName2}"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LabList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LabList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLabs_ListByResourceGroup(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Labs_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewLabsClient("{subscriptionId}", cred, &options)
	pager := client.ListByResourceGroup("resourceGroupName",
		&armdevtestlabs.LabsClientListByResourceGroupOptions{Expand: nil,
			Filter:  nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.LabList{
			Value: []*armdevtestlabs.Lab{
				{
					Name:     to.Ptr("{labName}"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}"),
					Location: to.Ptr("{location}"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.LabProperties{
						Announcement: &armdevtestlabs.LabAnnouncementProperties{
							Enabled:  to.Ptr(armdevtestlabs.EnableStatusDisabled),
							Expired:  to.Ptr(false),
							Markdown: to.Ptr(""),
							Title:    to.Ptr(""),
						},
						CreatedDate:                          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-02T10:23:20.9573599-07:00"); return t }()),
						EnvironmentPermission:                to.Ptr(armdevtestlabs.EnvironmentPermissionReader),
						LabStorageType:                       to.Ptr(armdevtestlabs.StorageTypeStandard),
						MandatoryArtifactsResourceIDsLinux:   []*string{},
						MandatoryArtifactsResourceIDsWindows: []*string{},
						PremiumDataDisks:                     to.Ptr(armdevtestlabs.PremiumDataDiskDisabled),
						ProvisioningState:                    to.Ptr("Succeeded"),
						Support: &armdevtestlabs.LabSupportProperties{
							Enabled:  to.Ptr(armdevtestlabs.EnableStatusDisabled),
							Markdown: to.Ptr(""),
						},
						UniqueIdentifier: to.Ptr("{uniqueIdentifier}"),
						VaultName:        to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.KeyVault/vaults/{keyVaultName}"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LabList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LabList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLabs_Get(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Labs_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewLabsClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		&armdevtestlabs.LabsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Lab{
			Name:     to.Ptr("{labName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.LabProperties{
				Announcement: &armdevtestlabs.LabAnnouncementProperties{
					Enabled:  to.Ptr(armdevtestlabs.EnableStatusDisabled),
					Expired:  to.Ptr(false),
					Markdown: to.Ptr(""),
					Title:    to.Ptr(""),
				},
				ArtifactsStorageAccount:              to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.Storage/storageAccounts/{storageAccountName}"),
				CreatedDate:                          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
				DefaultPremiumStorageAccount:         to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.Storage/storageAccounts/{storageAccountName}"),
				DefaultStorageAccount:                to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.Storage/storageAccounts/{storageAccountName}"),
				EnvironmentPermission:                to.Ptr(armdevtestlabs.EnvironmentPermissionReader),
				LabStorageType:                       to.Ptr(armdevtestlabs.StorageTypeStandard),
				MandatoryArtifactsResourceIDsLinux:   []*string{},
				MandatoryArtifactsResourceIDsWindows: []*string{},
				PremiumDataDiskStorageAccount:        to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.Storage/storageAccounts/{storageAccountName}"),
				PremiumDataDisks:                     to.Ptr(armdevtestlabs.PremiumDataDiskDisabled),
				ProvisioningState:                    to.Ptr("Succeeded"),
				Support: &armdevtestlabs.LabSupportProperties{
					Enabled:  to.Ptr(armdevtestlabs.EnableStatusDisabled),
					Markdown: to.Ptr(""),
				},
				UniqueIdentifier: to.Ptr("{uniqueIdentifier}"),
				VaultName:        to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.KeyVault/vaults/{keyVaultName}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Lab) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Lab)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLabs_CreateOrUpdate(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Labs_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewLabsClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		armdevtestlabs.Lab{
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.LabProperties{
				LabStorageType: to.Ptr(armdevtestlabs.StorageType("{Standard|Premium}")),
			},
		},
		&armdevtestlabs.LabsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Lab{
			Name:     to.Ptr("{labName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.LabProperties{
				Announcement: &armdevtestlabs.LabAnnouncementProperties{
					Enabled:  to.Ptr(armdevtestlabs.EnableStatusDisabled),
					Expired:  to.Ptr(false),
					Markdown: to.Ptr(""),
					Title:    to.Ptr(""),
				},
				CreatedDate:                          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
				EnvironmentPermission:                to.Ptr(armdevtestlabs.EnvironmentPermissionReader),
				LabStorageType:                       to.Ptr(armdevtestlabs.StorageTypeStandard),
				MandatoryArtifactsResourceIDsLinux:   []*string{},
				MandatoryArtifactsResourceIDsWindows: []*string{},
				PremiumDataDisks:                     to.Ptr(armdevtestlabs.PremiumDataDiskDisabled),
				ProvisioningState:                    to.Ptr("Succeeded"),
				Support: &armdevtestlabs.LabSupportProperties{
					Enabled:  to.Ptr(armdevtestlabs.EnableStatusDisabled),
					Markdown: to.Ptr(""),
				},
				UniqueIdentifier: to.Ptr("{uniqueIdentifier}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Lab) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Lab)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLabs_Delete(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Labs_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewLabsClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroupName",
		"{labName}",
		&armdevtestlabs.LabsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_Delete.json: %v", err)
	}
}

func TestLabs_Update(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Labs_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewLabsClient("{subscriptionId}", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		armdevtestlabs.LabFragment{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Lab{
			Name:     to.Ptr("{labName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.LabProperties{
				Announcement: &armdevtestlabs.LabAnnouncementProperties{
					Enabled:  to.Ptr(armdevtestlabs.EnableStatusDisabled),
					Expired:  to.Ptr(false),
					Markdown: to.Ptr(""),
					Title:    to.Ptr(""),
				},
				CreatedDate:                          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
				EnvironmentPermission:                to.Ptr(armdevtestlabs.EnvironmentPermissionReader),
				LabStorageType:                       to.Ptr(armdevtestlabs.StorageTypeStandard),
				MandatoryArtifactsResourceIDsLinux:   []*string{},
				MandatoryArtifactsResourceIDsWindows: []*string{},
				PremiumDataDisks:                     to.Ptr(armdevtestlabs.PremiumDataDiskDisabled),
				ProvisioningState:                    to.Ptr("Succeeded"),
				Support: &armdevtestlabs.LabSupportProperties{
					Enabled:  to.Ptr(armdevtestlabs.EnableStatusDisabled),
					Markdown: to.Ptr(""),
				},
				UniqueIdentifier: to.Ptr("{uniqueIdentifier}"),
				VaultName:        to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.KeyVault/vaults/{keyVaultName}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Lab) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Lab)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLabs_CreateEnvironment(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_CreateEnvironment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Labs_CreateEnvironment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewLabsClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginCreateEnvironment(ctx,
		"resourceGroupName",
		"{labName}",
		armdevtestlabs.LabVirtualMachineCreationParameter{
			Name:     to.Ptr("{vmName}"),
			Location: to.Ptr("{location}"),
			Properties: &armdevtestlabs.LabVirtualMachineCreationParameterProperties{
				AllowClaim:              to.Ptr(true),
				DisallowPublicIPAddress: to.Ptr(true),
				GalleryImageReference: &armdevtestlabs.GalleryImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					OSType:    to.Ptr("Linux"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("Latest"),
				},
				LabSubnetName:       to.Ptr("{virtualnetwork-subnet-name}"),
				LabVirtualNetworkID: to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualnetworks/{virtualNetworkName}"),
				Password:            to.Ptr("{userPassword}"),
				Size:                to.Ptr("Standard_A2_v2"),
				StorageType:         to.Ptr("Standard"),
				UserName:            to.Ptr("{userName}"),
			},
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
		},
		&armdevtestlabs.LabsClientBeginCreateEnvironmentOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_CreateEnvironment.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_CreateEnvironment.json: %v", err)
	}
}

func TestLabs_ExportResourceUsage(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_ExportResourceUsage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Labs_ExportResourceUsage"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewLabsClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginExportResourceUsage(ctx,
		"resourceGroupName",
		"{labName}",
		armdevtestlabs.ExportResourceUsageParameters{
			BlobStorageAbsoluteSasURI: to.Ptr("https://invalid.blob.core.windows.net/export.blob?sv=2015-07-08&sig={sas}&sp=rcw"),
			UsageStartDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T00:00:00Z"); return t }()),
		},
		&armdevtestlabs.LabsClientBeginExportResourceUsageOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_ExportResourceUsage.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_ExportResourceUsage.json: %v", err)
	}
}

func TestLabs_ImportVirtualMachine(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_ImportVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Labs_ImportVirtualMachine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewLabsClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginImportVirtualMachine(ctx,
		"resourceGroupName",
		"{labName}",
		armdevtestlabs.ImportLabVirtualMachineRequest{
			DestinationVirtualMachineName:  to.Ptr("{vmName}"),
			SourceVirtualMachineResourceID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{otherResourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
		},
		&armdevtestlabs.LabsClientBeginImportVirtualMachineOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_ImportVirtualMachine.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_ImportVirtualMachine.json: %v", err)
	}
}

func TestLabs_ListVhds(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_ListVhds.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Labs_ListVhds"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewLabsClient("{subscriptionId}", cred, &options)
	pager := client.ListVhds("resourceGroupName",
		"{labName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_ListVhds.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.LabVhdList{
			Value: []*armdevtestlabs.LabVhd{
				{
					ID: to.Ptr("https://{labStorageAccountName}.blob.core.windows.net/vhds/vhd1"),
				},
				{
					ID: to.Ptr("https://{labStorageAccountName}.blob.core.windows.net/vhds/vhd2"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LabVhdList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LabVhdList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Labs_ListVhds.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_Get(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Operations_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewOperationsClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"{locationName}",
		"{operationName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Operations_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.OperationResult{
			Status:     to.Ptr("Running"),
			StatusCode: to.Ptr(armdevtestlabs.HTTPStatusCodeOK),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Operations_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGlobalSchedules_ListBySubscription(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GlobalSchedules_ListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewGlobalSchedulesClient("{subscriptionId}", cred, &options)
	pager := client.ListBySubscription(&armdevtestlabs.GlobalSchedulesClientListBySubscriptionOptions{Expand: nil,
		Filter:  nil,
		Top:     nil,
		Orderby: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.ScheduleList{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ScheduleList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ScheduleList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGlobalSchedules_ListByResourceGroup(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GlobalSchedules_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewGlobalSchedulesClient("{subscriptionId}", cred, &options)
	pager := client.ListByResourceGroup("resourceGroupName",
		&armdevtestlabs.GlobalSchedulesClientListByResourceGroupOptions{Expand: nil,
			Filter:  nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.ScheduleList{
			Value: []*armdevtestlabs.Schedule{
				{
					Name:     to.Ptr("LabVmAutoStart"),
					Type:     to.Ptr("microsoft.devtestlab/labs/schedules"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/schedules/labvmautostart"),
					Location: to.Ptr("{location}"),
					Properties: &armdevtestlabs.ScheduleProperties{
						CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-29T22:54:54.9335182+00:00"); return t }()),
						NotificationSettings: &armdevtestlabs.NotificationSettings{
							Status:        to.Ptr(armdevtestlabs.EnableStatusDisabled),
							TimeInMinutes: to.Ptr[int32](0),
						},
						ProvisioningState: to.Ptr("Succeeded"),
						Status:            to.Ptr(armdevtestlabs.EnableStatusEnabled),
						TaskType:          to.Ptr("LabVmsStartupTask"),
						TimeZoneID:        to.Ptr("Hawaiian Standard Time"),
						UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
						WeeklyRecurrence: &armdevtestlabs.WeekDetails{
							Time: to.Ptr("0700"),
							Weekdays: []*string{
								to.Ptr("Monday"),
								to.Ptr("Tuesday"),
								to.Ptr("Wednesday"),
								to.Ptr("Thursday"),
								to.Ptr("Friday")},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ScheduleList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ScheduleList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGlobalSchedules_Get(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GlobalSchedules_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewGlobalSchedulesClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"labvmautostart",
		&armdevtestlabs.GlobalSchedulesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Schedule{
			Name:     to.Ptr("LabVmAutoStart"),
			Type:     to.Ptr("microsoft.devtestlab/labs/schedules"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/schedules/labvmautostart"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ScheduleProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-29T22:54:54.9335182+00:00"); return t }()),
				NotificationSettings: &armdevtestlabs.NotificationSettings{
					Status:        to.Ptr(armdevtestlabs.EnableStatusDisabled),
					TimeInMinutes: to.Ptr[int32](0),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				Status:            to.Ptr(armdevtestlabs.EnableStatusEnabled),
				TaskType:          to.Ptr("LabVmsStartupTask"),
				TimeZoneID:        to.Ptr("Hawaiian Standard Time"),
				UniqueIdentifier:  to.Ptr("{id}"),
				WeeklyRecurrence: &armdevtestlabs.WeekDetails{
					Time: to.Ptr("0700"),
					Weekdays: []*string{
						to.Ptr("Monday"),
						to.Ptr("Tuesday"),
						to.Ptr("Wednesday"),
						to.Ptr("Thursday"),
						to.Ptr("Friday")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Schedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Schedule)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGlobalSchedules_CreateOrUpdate(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GlobalSchedules_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewGlobalSchedulesClient("{subscriptionId}", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroupName",
		"labvmautostart",
		armdevtestlabs.Schedule{
			Properties: &armdevtestlabs.ScheduleProperties{
				Status:     to.Ptr(armdevtestlabs.EnableStatusEnabled),
				TaskType:   to.Ptr("LabVmsStartupTask"),
				TimeZoneID: to.Ptr("Hawaiian Standard Time"),
				WeeklyRecurrence: &armdevtestlabs.WeekDetails{
					Time: to.Ptr("0700"),
					Weekdays: []*string{
						to.Ptr("Monday"),
						to.Ptr("Tuesday"),
						to.Ptr("Wednesday"),
						to.Ptr("Thursday"),
						to.Ptr("Friday"),
						to.Ptr("Saturday")},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Schedule{
			Name:     to.Ptr("LabVmAutoStart"),
			Type:     to.Ptr("microsoft.devtestlab/labs/schedules"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/schedules/labvmautostart"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ScheduleProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-29T22:54:54.9335182+00:00"); return t }()),
				NotificationSettings: &armdevtestlabs.NotificationSettings{
					Status:        to.Ptr(armdevtestlabs.EnableStatusDisabled),
					TimeInMinutes: to.Ptr[int32](0),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				Status:            to.Ptr(armdevtestlabs.EnableStatusEnabled),
				TaskType:          to.Ptr("LabVmsStartupTask"),
				TimeZoneID:        to.Ptr("Hawaiian Standard Time"),
				UniqueIdentifier:  to.Ptr("{id}"),
				WeeklyRecurrence: &armdevtestlabs.WeekDetails{
					Time: to.Ptr("0700"),
					Weekdays: []*string{
						to.Ptr("Monday"),
						to.Ptr("Tuesday"),
						to.Ptr("Wednesday"),
						to.Ptr("Thursday"),
						to.Ptr("Friday")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Schedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Schedule)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGlobalSchedules_Delete(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GlobalSchedules_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewGlobalSchedulesClient("{subscriptionId}", cred, &options)
	_, err := client.Delete(ctx,
		"resourceGroupName",
		"labvmautostart",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_Delete.json: %v", err)
	}
}

func TestGlobalSchedules_Update(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GlobalSchedules_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewGlobalSchedulesClient("{subscriptionId}", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroupName",
		"labvmautostart",
		armdevtestlabs.ScheduleFragment{
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Schedule{
			Name:     to.Ptr("LabVmAutoStart"),
			Type:     to.Ptr("microsoft.devtestlab/labs/schedules"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/schedules/labvmautostart"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ScheduleProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-29T22:54:54.9335182+00:00"); return t }()),
				NotificationSettings: &armdevtestlabs.NotificationSettings{
					Status:        to.Ptr(armdevtestlabs.EnableStatusDisabled),
					TimeInMinutes: to.Ptr[int32](0),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				Status:            to.Ptr(armdevtestlabs.EnableStatusEnabled),
				TaskType:          to.Ptr("LabVmsStartupTask"),
				TimeZoneID:        to.Ptr("Hawaiian Standard Time"),
				UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
				WeeklyRecurrence: &armdevtestlabs.WeekDetails{
					Time: to.Ptr("0700"),
					Weekdays: []*string{
						to.Ptr("Monday"),
						to.Ptr("Tuesday"),
						to.Ptr("Wednesday"),
						to.Ptr("Thursday"),
						to.Ptr("Friday")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Schedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Schedule)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGlobalSchedules_Execute(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_Execute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GlobalSchedules_Execute"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewGlobalSchedulesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginExecute(ctx,
		"resourceGroupName",
		"labvmautostart",
		&armdevtestlabs.GlobalSchedulesClientBeginExecuteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_Execute.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_Execute.json: %v", err)
	}
}

func TestGlobalSchedules_Retarget(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_Retarget.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GlobalSchedules_Retarget"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewGlobalSchedulesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginRetarget(ctx,
		"resourceGroupName",
		"{scheduleName}",
		armdevtestlabs.RetargetScheduleProperties{
			CurrentResourceID: to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{targetLab}"),
			TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{currentLab}"),
		},
		&armdevtestlabs.GlobalSchedulesClientBeginRetargetOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_Retarget.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GlobalSchedules_Retarget.json: %v", err)
	}
}

func TestArtifactSources_List(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ArtifactSources_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ArtifactSources_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewArtifactSourcesClient("{subscriptionId}", cred, &options)
	pager := client.List("resourceGroupName",
		"{labName}",
		&armdevtestlabs.ArtifactSourcesClientListOptions{Expand: nil,
			Filter:  nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ArtifactSources_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.ArtifactSourceList{
			Value: []*armdevtestlabs.ArtifactSource{
				{
					Name:     to.Ptr("{artifactSourceName}"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs/artifactsources"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}"),
					Location: to.Ptr("{location}"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.ArtifactSourceProperties{
						ArmTemplateFolderPath: to.Ptr("{armTemplateFolderPath}"),
						BranchRef:             to.Ptr("{branchRef}"),
						CreatedDate:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-16T16:53:02.4830866-07:00"); return t }()),
						DisplayName:           to.Ptr("{displayName}"),
						FolderPath:            to.Ptr("{folderPath}"),
						ProvisioningState:     to.Ptr("Succeeded"),
						SecurityToken:         to.Ptr("{securityToken}"),
						SourceType:            to.Ptr(armdevtestlabs.SourceControlType("{VsoGit|GitHub|StorageAccount}")),
						Status:                to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
						UniqueIdentifier:      to.Ptr("{uniqueIdentifier}"),
						URI:                   to.Ptr("{artifactSourceUri}"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ArtifactSourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ArtifactSourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ArtifactSources_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestArtifactSources_Get(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ArtifactSources_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ArtifactSources_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewArtifactSourcesClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{artifactSourceName}",
		&armdevtestlabs.ArtifactSourcesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ArtifactSources_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.ArtifactSource{
			Name:     to.Ptr("{artifactSourceName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/artifactsources"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ArtifactSourceProperties{
				ArmTemplateFolderPath: to.Ptr("{armTemplateFolderPath}"),
				BranchRef:             to.Ptr("{branchRef}"),
				CreatedDate:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-16T16:53:02.4830866-07:00"); return t }()),
				DisplayName:           to.Ptr("{displayName}"),
				FolderPath:            to.Ptr("{folderPath}"),
				ProvisioningState:     to.Ptr("Succeeded"),
				SecurityToken:         to.Ptr("{securityToken}"),
				SourceType:            to.Ptr(armdevtestlabs.SourceControlType("{VsoGit|GitHub|StorageAccount}")),
				Status:                to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
				UniqueIdentifier:      to.Ptr("{uniqueIdentifier}"),
				URI:                   to.Ptr("{artifactSourceUri}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ArtifactSource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ArtifactSource)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ArtifactSources_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestArtifactSources_CreateOrUpdate(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ArtifactSources_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ArtifactSources_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewArtifactSourcesClient("{subscriptionId}", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{artifactSourceName}",
		armdevtestlabs.ArtifactSource{
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ArtifactSourceProperties{
				ArmTemplateFolderPath: to.Ptr("{armTemplateFolderPath}"),
				BranchRef:             to.Ptr("{branchRef}"),
				DisplayName:           to.Ptr("{displayName}"),
				FolderPath:            to.Ptr("{folderPath}"),
				SecurityToken:         to.Ptr("{securityToken}"),
				SourceType:            to.Ptr(armdevtestlabs.SourceControlType("{VsoGit|GitHub|StorageAccount}")),
				Status:                to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
				URI:                   to.Ptr("{artifactSourceUri}"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ArtifactSources_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.ArtifactSource{
			Name:     to.Ptr("{artifactSourceName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/artifactsources"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ArtifactSourceProperties{
				ArmTemplateFolderPath: to.Ptr("{armTemplateFolderPath}"),
				BranchRef:             to.Ptr("{branchRef}"),
				CreatedDate:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-16T16:53:02.4830866-07:00"); return t }()),
				DisplayName:           to.Ptr("{displayName}"),
				FolderPath:            to.Ptr("{folderPath}"),
				ProvisioningState:     to.Ptr("Succeeded"),
				SecurityToken:         to.Ptr("{securityToken}"),
				SourceType:            to.Ptr(armdevtestlabs.SourceControlType("{VsoGit|GitHub|StorageAccount}")),
				Status:                to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
				UniqueIdentifier:      to.Ptr("{uniqueIdentifier}"),
				URI:                   to.Ptr("{artifactSourceUri}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ArtifactSource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ArtifactSource)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ArtifactSources_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestArtifactSources_Delete(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ArtifactSources_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ArtifactSources_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewArtifactSourcesClient("{subscriptionId}", cred, &options)
	_, err := client.Delete(ctx,
		"resourceGroupName",
		"{labName}",
		"{artifactSourceName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ArtifactSources_Delete.json: %v", err)
	}
}

func TestArtifactSources_Update(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ArtifactSources_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ArtifactSources_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewArtifactSourcesClient("{subscriptionId}", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"{artifactSourceName}",
		armdevtestlabs.ArtifactSourceFragment{
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ArtifactSources_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.ArtifactSource{
			Name:     to.Ptr("{artifactSourceName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/artifactsources"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ArtifactSourceProperties{
				ArmTemplateFolderPath: to.Ptr("{armTemplateFolderPath}"),
				BranchRef:             to.Ptr("{branchRef}"),
				CreatedDate:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-16T16:53:02.4830866-07:00"); return t }()),
				DisplayName:           to.Ptr("{displayName}"),
				FolderPath:            to.Ptr("{folderPath}"),
				ProvisioningState:     to.Ptr("Succeeded"),
				SecurityToken:         to.Ptr("{securityToken}"),
				SourceType:            to.Ptr(armdevtestlabs.SourceControlType("{VsoGit|GitHub|StorageAccount}")),
				Status:                to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
				UniqueIdentifier:      to.Ptr("{uniqueIdentifier}"),
				URI:                   to.Ptr("{artifactSourceUri}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ArtifactSource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ArtifactSource)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ArtifactSources_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestArmTemplates_List(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ArmTemplates_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ArmTemplates_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewArmTemplatesClient("{subscriptionId}", cred, &options)
	pager := client.List("resourceGroupName",
		"{labName}",
		"{artifactSourceName}",
		&armdevtestlabs.ArmTemplatesClientListOptions{Expand: nil,
			Filter:  nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ArmTemplates_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.ArmTemplateList{
			Value: []*armdevtestlabs.ArmTemplate{
				{
					Name:     to.Ptr("Template1"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs/artifactSources/armTemplates"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/artifactSources/{artifactSourceName}/armTemplates/{armTemplateName}"),
					Location: to.Ptr("{location}"),
					Tags: map[string]*string{
						"MyTag": to.Ptr("MyValue"),
					},
					Properties: &armdevtestlabs.ArmTemplateProperties{
						Contents: map[string]interface{}{
							"$schema":        "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json#",
							"contentVersion": "1.0.0.0",
							"parameters":     map[string]interface{}{},
							"resources":      []interface{}{},
							"variables": map[string]interface{}{
								"hostingPlanName":    "[toLower(concat(variables('resourceNamePrefix'), '-', take(uniqueString(resourceGroup().id), 6), '-sp'))]",
								"resourceNamePrefix": "[take(uniqueString(resourceGroup().id), 3)]",
								"siteName":           "[toLower(concat(variables('resourceNamePrefix'), '-', take(uniqueString(resourceGroup().id), 6)))]",
							},
						},
						DisplayName:              to.Ptr("Template1"),
						Enabled:                  to.Ptr(true),
						ParametersValueFilesInfo: []*armdevtestlabs.ParametersValueFileInfo{},
						Publisher:                to.Ptr("Microsoft"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ArmTemplateList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ArmTemplateList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ArmTemplates_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestArmTemplates_Get(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ArmTemplates_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ArmTemplates_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewArmTemplatesClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{artifactSourceName}",
		"{armTemplateName}",
		&armdevtestlabs.ArmTemplatesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ArmTemplates_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.ArmTemplate{
			Name:     to.Ptr("Template1"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/artifactSources/armTemplates"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/artifactSources/{artifactSourceName}/armTemplates/{armTemplateName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"MyTag": to.Ptr("MyValue"),
			},
			Properties: &armdevtestlabs.ArmTemplateProperties{
				Contents: map[string]interface{}{
					"$schema":        "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json#",
					"contentVersion": "1.0.0.0",
					"parameters":     map[string]interface{}{},
					"resources":      []interface{}{},
					"variables": map[string]interface{}{
						"hostingPlanName":    "[toLower(concat(variables('resourceNamePrefix'), '-', take(uniqueString(resourceGroup().id), 6), '-sp'))]",
						"resourceNamePrefix": "[take(uniqueString(resourceGroup().id), 3)]",
						"siteName":           "[toLower(concat(variables('resourceNamePrefix'), '-', take(uniqueString(resourceGroup().id), 6)))]",
					},
				},
				DisplayName:              to.Ptr("Template1"),
				Enabled:                  to.Ptr(true),
				ParametersValueFilesInfo: []*armdevtestlabs.ParametersValueFileInfo{},
				Publisher:                to.Ptr("Microsoft"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ArmTemplate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ArmTemplate)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ArmTemplates_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestArtifacts_List(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Artifacts_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Artifacts_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewArtifactsClient("{subscriptionId}", cred, &options)
	pager := client.List("resourceGroupName",
		"{labName}",
		"{artifactSourceName}",
		&armdevtestlabs.ArtifactsClientListOptions{Expand: nil,
			Filter:  nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Artifacts_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.ArtifactList{
			Value: []*armdevtestlabs.Artifact{
				{
					Name:     to.Ptr("{artifactName}"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs/artifactSources/artifacts"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/artifactSources/{artifactSourceName}/artifacts/{artifactName}"),
					Location: to.Ptr("{location}"),
					Tags: map[string]*string{
						"MyTag": to.Ptr("MyValue"),
					},
					Properties: &armdevtestlabs.ArtifactProperties{
						Description: to.Ptr("Sample artifact description."),
						FilePath:    to.Ptr("{artifactsPath}/{artifactName}"),
						Parameters: map[string]interface{}{
							"uri": map[string]interface{}{
								"type":         "string",
								"description":  "Sample parameter 1 description.",
								"defaultValue": "https://{labStorageAccount}.blob.core.windows.net/{artifactName}/...",
								"displayName":  "Sample Parameter 1",
							},
						},
						Publisher:    to.Ptr("Microsoft"),
						TargetOsType: to.Ptr("Windows"),
						Title:        to.Ptr("Sample Artifact Title"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ArtifactList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ArtifactList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Artifacts_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestArtifacts_Get(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Artifacts_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Artifacts_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewArtifactsClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{artifactSourceName}",
		"{artifactName}",
		&armdevtestlabs.ArtifactsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Artifacts_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Artifact{
			Name:     to.Ptr("{artifactName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/artifactSources/artifacts"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/artifactSources/{artifactSourceName}/artifacts/{artifactName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"MyTag": to.Ptr("MyValue"),
			},
			Properties: &armdevtestlabs.ArtifactProperties{
				Description: to.Ptr("Sample artifact description."),
				FilePath:    to.Ptr("{artifactsPath}/{artifactName}"),
				Parameters: map[string]interface{}{
					"uri": map[string]interface{}{
						"type":         "string",
						"description":  "Sample parameter 1 description.",
						"defaultValue": "https://{labStorageAccount}.blob.core.windows.net/{artifactName}/...",
						"displayName":  "Sample Parameter 1",
					},
				},
				Publisher:    to.Ptr("Microsoft"),
				TargetOsType: to.Ptr("Windows"),
				Title:        to.Ptr("Sample Artifact Title"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Artifact) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Artifact)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Artifacts_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestArtifacts_GenerateArmTemplate(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Artifacts_GenerateArmTemplate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Artifacts_GenerateArmTemplate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewArtifactsClient("{subscriptionId}", cred, &options)
	res, err := client.GenerateArmTemplate(ctx,
		"resourceGroupName",
		"{labName}",
		"{artifactSourceName}",
		"{artifactName}",
		armdevtestlabs.GenerateArmTemplateRequest{
			FileUploadOptions:  to.Ptr(armdevtestlabs.FileUploadOptionsNone),
			Location:           to.Ptr("{location}"),
			VirtualMachineName: to.Ptr("{vmName}"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Artifacts_GenerateArmTemplate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.ArmTemplateInfo{
			Parameters: map[string]interface{}{
				"extensionName": map[string]interface{}{
					"value": "{vmName}/CustomScriptExtension",
				},
				"location": map[string]interface{}{
					"value": "{location}",
				},
			},
			Template: map[string]interface{}{
				"$schema":        "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
				"contentVersion": "1.0.0.0",
				"parameters": map[string]interface{}{
					"extensionName": map[string]interface{}{
						"type": "string",
					},
					"location": map[string]interface{}{
						"type": "string",
					},
				},
				"resources": []interface{}{
					map[string]interface{}{
						"name":       "[parameters('extensionName')]",
						"type":       "Microsoft.Compute/virtualMachines/extensions",
						"apiVersion": "2015-06-15",
						"location":   "[parameters('location')]",
						"properties": map[string]interface{}{
							"type":                    "CustomScriptExtension",
							"autoUpgradeMinorVersion": "true",
							"forceUpdateTag":          "15/10/2018 00:00:00 +00:00",
							"protectedSettings": map[string]interface{}{
								"commandToExecute": "[concat('cd {MsDtlScriptFolder}/scripts && ', variables('_commandToExecute'))]",
							},
							"publisher": "Microsoft.Compute",
							"settings": map[string]interface{}{
								"commandToExecute": "",
								"fileUris": []interface{}{
									"{MsDtlArtifactFileUris}",
								},
							},
							"typeHandlerVersion": "1.9",
						},
					},
				},
				"variables": map[string]interface{}{
					"_commandToExecute": "{commandToExecute}.",
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ArmTemplateInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ArmTemplateInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Artifacts_GenerateArmTemplate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCosts_Get(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Costs_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Costs_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewCostsClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"targetCost",
		&armdevtestlabs.CostsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Costs_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.LabCost{
			Properties: &armdevtestlabs.LabCostProperties{
				CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-23T22:43:54.7253204+00:00"); return t }()),
				CurrencyCode:      to.Ptr("USD"),
				EndDateTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T23:59:59Z"); return t }()),
				ProvisioningState: to.Ptr("Succeeded"),
				StartDateTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T00:00:00Z"); return t }()),
				TargetCost: &armdevtestlabs.TargetCostProperties{
					CostThresholds: []*armdevtestlabs.CostThresholdProperties{
						{
							DisplayOnChart:   to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							NotificationSent: to.Ptr("0001-01-01T00:00:00.0000000"),
							PercentageThreshold: &armdevtestlabs.PercentageCostThresholdProperties{
								ThresholdValue: to.Ptr[float64](25),
							},
							SendNotificationWhenExceeded: to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							ThresholdID:                  to.Ptr("00000000-0000-0000-0000-000000000001"),
						},
						{
							DisplayOnChart:   to.Ptr(armdevtestlabs.CostThresholdStatusEnabled),
							NotificationSent: to.Ptr("0001-01-01T00:00:00.0000000"),
							PercentageThreshold: &armdevtestlabs.PercentageCostThresholdProperties{
								ThresholdValue: to.Ptr[float64](50),
							},
							SendNotificationWhenExceeded: to.Ptr(armdevtestlabs.CostThresholdStatusEnabled),
							ThresholdID:                  to.Ptr("00000000-0000-0000-0000-000000000001"),
						},
						{
							DisplayOnChart:   to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							NotificationSent: to.Ptr("0001-01-01T00:00:00.0000000"),
							PercentageThreshold: &armdevtestlabs.PercentageCostThresholdProperties{
								ThresholdValue: to.Ptr[float64](75),
							},
							SendNotificationWhenExceeded: to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							ThresholdID:                  to.Ptr("00000000-0000-0000-0000-000000000001"),
						},
						{
							DisplayOnChart:   to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							NotificationSent: to.Ptr("0001-01-01T00:00:00.0000000"),
							PercentageThreshold: &armdevtestlabs.PercentageCostThresholdProperties{
								ThresholdValue: to.Ptr[float64](100),
							},
							SendNotificationWhenExceeded: to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							ThresholdID:                  to.Ptr("00000000-0000-0000-0000-000000000001"),
						},
						{
							DisplayOnChart:   to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							NotificationSent: to.Ptr("0001-01-01T00:00:00.0000000"),
							PercentageThreshold: &armdevtestlabs.PercentageCostThresholdProperties{
								ThresholdValue: to.Ptr[float64](125),
							},
							SendNotificationWhenExceeded: to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							ThresholdID:                  to.Ptr("00000000-0000-0000-0000-000000000001"),
						}},
					CycleEndDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T23:59:59+00:00"); return t }()),
					CycleStartDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T00:00:00+00:00"); return t }()),
					CycleType:          to.Ptr(armdevtestlabs.ReportingCycleTypeCalendarMonth),
					Status:             to.Ptr(armdevtestlabs.TargetCostStatusEnabled),
					Target:             to.Ptr[int32](100),
				},
				UniqueIdentifier: to.Ptr("{uniqueIdentifier}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LabCost) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LabCost)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Costs_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCosts_CreateOrUpdate(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Costs_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Costs_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewCostsClient("{subscriptionId}", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"targetCost",
		armdevtestlabs.LabCost{
			Properties: &armdevtestlabs.LabCostProperties{
				CurrencyCode:  to.Ptr("USD"),
				EndDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T23:59:59Z"); return t }()),
				StartDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T00:00:00Z"); return t }()),
				TargetCost: &armdevtestlabs.TargetCostProperties{
					CostThresholds: []*armdevtestlabs.CostThresholdProperties{
						{
							DisplayOnChart: to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							PercentageThreshold: &armdevtestlabs.PercentageCostThresholdProperties{
								ThresholdValue: to.Ptr[float64](25),
							},
							SendNotificationWhenExceeded: to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							ThresholdID:                  to.Ptr("00000000-0000-0000-0000-000000000001"),
						},
						{
							DisplayOnChart: to.Ptr(armdevtestlabs.CostThresholdStatusEnabled),
							PercentageThreshold: &armdevtestlabs.PercentageCostThresholdProperties{
								ThresholdValue: to.Ptr[float64](50),
							},
							SendNotificationWhenExceeded: to.Ptr(armdevtestlabs.CostThresholdStatusEnabled),
							ThresholdID:                  to.Ptr("00000000-0000-0000-0000-000000000002"),
						},
						{
							DisplayOnChart: to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							PercentageThreshold: &armdevtestlabs.PercentageCostThresholdProperties{
								ThresholdValue: to.Ptr[float64](75),
							},
							SendNotificationWhenExceeded: to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							ThresholdID:                  to.Ptr("00000000-0000-0000-0000-000000000003"),
						},
						{
							DisplayOnChart: to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							PercentageThreshold: &armdevtestlabs.PercentageCostThresholdProperties{
								ThresholdValue: to.Ptr[float64](100),
							},
							SendNotificationWhenExceeded: to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							ThresholdID:                  to.Ptr("00000000-0000-0000-0000-000000000004"),
						},
						{
							DisplayOnChart: to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							PercentageThreshold: &armdevtestlabs.PercentageCostThresholdProperties{
								ThresholdValue: to.Ptr[float64](125),
							},
							SendNotificationWhenExceeded: to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							ThresholdID:                  to.Ptr("00000000-0000-0000-0000-000000000005"),
						}},
					CycleEndDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T00:00:00.000Z"); return t }()),
					CycleStartDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T00:00:00.000Z"); return t }()),
					CycleType:          to.Ptr(armdevtestlabs.ReportingCycleTypeCalendarMonth),
					Status:             to.Ptr(armdevtestlabs.TargetCostStatusEnabled),
					Target:             to.Ptr[int32](100),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Costs_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.LabCost{
			Properties: &armdevtestlabs.LabCostProperties{
				CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-23T22:43:54.7253204+00:00"); return t }()),
				CurrencyCode:      to.Ptr("USD"),
				EndDateTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T23:59:59Z"); return t }()),
				ProvisioningState: to.Ptr("Succeeded"),
				StartDateTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T00:00:00Z"); return t }()),
				TargetCost: &armdevtestlabs.TargetCostProperties{
					CostThresholds: []*armdevtestlabs.CostThresholdProperties{
						{
							DisplayOnChart:   to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							NotificationSent: to.Ptr("0001-01-01T00:00:00.0000000"),
							PercentageThreshold: &armdevtestlabs.PercentageCostThresholdProperties{
								ThresholdValue: to.Ptr[float64](25),
							},
							SendNotificationWhenExceeded: to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							ThresholdID:                  to.Ptr("00000000-0000-0000-0000-000000000001"),
						},
						{
							DisplayOnChart:   to.Ptr(armdevtestlabs.CostThresholdStatusEnabled),
							NotificationSent: to.Ptr("0001-01-01T00:00:00.0000000"),
							PercentageThreshold: &armdevtestlabs.PercentageCostThresholdProperties{
								ThresholdValue: to.Ptr[float64](50),
							},
							SendNotificationWhenExceeded: to.Ptr(armdevtestlabs.CostThresholdStatusEnabled),
							ThresholdID:                  to.Ptr("00000000-0000-0000-0000-000000000001"),
						},
						{
							DisplayOnChart:   to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							NotificationSent: to.Ptr("0001-01-01T00:00:00.0000000"),
							PercentageThreshold: &armdevtestlabs.PercentageCostThresholdProperties{
								ThresholdValue: to.Ptr[float64](75),
							},
							SendNotificationWhenExceeded: to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							ThresholdID:                  to.Ptr("00000000-0000-0000-0000-000000000001"),
						},
						{
							DisplayOnChart:   to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							NotificationSent: to.Ptr("0001-01-01T00:00:00.0000000"),
							PercentageThreshold: &armdevtestlabs.PercentageCostThresholdProperties{
								ThresholdValue: to.Ptr[float64](100),
							},
							SendNotificationWhenExceeded: to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							ThresholdID:                  to.Ptr("00000000-0000-0000-0000-000000000001"),
						},
						{
							DisplayOnChart:   to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							NotificationSent: to.Ptr("0001-01-01T00:00:00.0000000"),
							PercentageThreshold: &armdevtestlabs.PercentageCostThresholdProperties{
								ThresholdValue: to.Ptr[float64](125),
							},
							SendNotificationWhenExceeded: to.Ptr(armdevtestlabs.CostThresholdStatusDisabled),
							ThresholdID:                  to.Ptr("00000000-0000-0000-0000-000000000001"),
						}},
					CycleEndDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T23:59:59+00:00"); return t }()),
					CycleStartDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T00:00:00+00:00"); return t }()),
					CycleType:          to.Ptr(armdevtestlabs.ReportingCycleTypeCalendarMonth),
					Status:             to.Ptr(armdevtestlabs.TargetCostStatusEnabled),
					Target:             to.Ptr[int32](100),
				},
				UniqueIdentifier: to.Ptr("{uniqueIdentifier}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LabCost) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LabCost)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Costs_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomImages_List(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/CustomImages_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomImages_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewCustomImagesClient("{subscriptionId}", cred, &options)
	pager := client.List("resourceGroupName",
		"{labName}",
		&armdevtestlabs.CustomImagesClientListOptions{Expand: nil,
			Filter:  nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/CustomImages_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.CustomImageList{
			Value: []*armdevtestlabs.CustomImage{
				{
					Name:     to.Ptr("{customImageName}"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs/customImages"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/customimages/{customImageName}"),
					Location: to.Ptr("{location}"),
					Properties: &armdevtestlabs.CustomImageProperties{
						Description:       to.Ptr("My Custom Image"),
						Author:            to.Ptr("{authorName}"),
						CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-10T09:59:28.7985144+00:00"); return t }()),
						ProvisioningState: to.Ptr("Succeeded"),
						UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
						VM: &armdevtestlabs.CustomImagePropertiesFromVM{
							LinuxOsInfo: &armdevtestlabs.LinuxOsInfo{
								LinuxOsState: to.Ptr(armdevtestlabs.LinuxOsStateNonDeprovisioned),
							},
							SourceVMID: to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/{vmName}"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CustomImageList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CustomImageList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/CustomImages_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomImages_Get(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/CustomImages_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomImages_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewCustomImagesClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{customImageName}",
		&armdevtestlabs.CustomImagesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/CustomImages_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.CustomImage{
			Name:     to.Ptr("{customImageName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/customImages"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/customimages/{customImageName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.CustomImageProperties{
				Description:       to.Ptr("My Custom Image"),
				Author:            to.Ptr("{authorName}"),
				CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-10T09:59:28.7985144+00:00"); return t }()),
				ProvisioningState: to.Ptr("Succeeded"),
				UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
				VM: &armdevtestlabs.CustomImagePropertiesFromVM{
					LinuxOsInfo: &armdevtestlabs.LinuxOsInfo{
						LinuxOsState: to.Ptr(armdevtestlabs.LinuxOsStateNonDeprovisioned),
					},
					SourceVMID: to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/{vmName}"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomImage) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomImage)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/CustomImages_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomImages_CreateOrUpdate(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/CustomImages_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomImages_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewCustomImagesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{customImageName}",
		armdevtestlabs.CustomImage{
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.CustomImageProperties{
				Description: to.Ptr("My Custom Image"),
				VM: &armdevtestlabs.CustomImagePropertiesFromVM{
					LinuxOsInfo: &armdevtestlabs.LinuxOsInfo{
						LinuxOsState: to.Ptr(armdevtestlabs.LinuxOsStateNonDeprovisioned),
					},
					SourceVMID: to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/{vmName}"),
				},
			},
		},
		&armdevtestlabs.CustomImagesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/CustomImages_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/CustomImages_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.CustomImage{
			Name:     to.Ptr("{customImageName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/customImages"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/customimages/{customImageName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.CustomImageProperties{
				Description:       to.Ptr("My Custom Image"),
				Author:            to.Ptr("{authorName}"),
				CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-10T09:59:28.7985144+00:00"); return t }()),
				ProvisioningState: to.Ptr("Succeeded"),
				UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
				VM: &armdevtestlabs.CustomImagePropertiesFromVM{
					LinuxOsInfo: &armdevtestlabs.LinuxOsInfo{
						LinuxOsState: to.Ptr(armdevtestlabs.LinuxOsStateNonDeprovisioned),
					},
					SourceVMID: to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/{vmName}"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomImage) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomImage)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/CustomImages_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomImages_Delete(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/CustomImages_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomImages_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewCustomImagesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroupName",
		"{labName}",
		"{customImageName}",
		&armdevtestlabs.CustomImagesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/CustomImages_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/CustomImages_Delete.json: %v", err)
	}
}

func TestCustomImages_Update(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/CustomImages_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomImages_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewCustomImagesClient("{subscriptionId}", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"{customImageName}",
		armdevtestlabs.CustomImageFragment{
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/CustomImages_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.CustomImage{
			Name:     to.Ptr("{customImageName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/customImages"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/customimages/{customImageName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue2"),
			},
			Properties: &armdevtestlabs.CustomImageProperties{
				Description:       to.Ptr("My Custom Image"),
				Author:            to.Ptr("{authorName}"),
				CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-10T09:59:28.7985144+00:00"); return t }()),
				ProvisioningState: to.Ptr("Succeeded"),
				UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
				VM: &armdevtestlabs.CustomImagePropertiesFromVM{
					LinuxOsInfo: &armdevtestlabs.LinuxOsInfo{
						LinuxOsState: to.Ptr(armdevtestlabs.LinuxOsStateNonDeprovisioned),
					},
					SourceVMID: to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/{vmName}"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomImage) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomImage)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/CustomImages_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFormulas_List(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Formulas_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Formulas_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewFormulasClient("{subscriptionId}", cred, &options)
	pager := client.List("resourceGroupName",
		"{labName}",
		&armdevtestlabs.FormulasClientListOptions{Expand: nil,
			Filter:  nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Formulas_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.FormulaList{
			Value: []*armdevtestlabs.Formula{
				{
					Name: to.Ptr("{formulaName}"),
					Type: to.Ptr("Microsoft.DevTestLab/labs/formulas"),
					ID:   to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/formulas/{formulaName}"),
					Properties: &armdevtestlabs.FormulaProperties{
						Description:  to.Ptr("Formula used to create a Linux VM"),
						Author:       to.Ptr("user@contoso.com"),
						CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-22T19:13:35.9922091+00:00"); return t }()),
						FormulaContent: &armdevtestlabs.LabVirtualMachineCreationParameter{
							Location: to.Ptr("{location}"),
							Properties: &armdevtestlabs.LabVirtualMachineCreationParameterProperties{
								AllowClaim: to.Ptr(false),
								Artifacts: []*armdevtestlabs.ArtifactInstallProperties{
									{
										ArtifactID: to.Ptr("/artifactsources/{artifactSourceName}/artifacts/linux-install-nodejs"),
										Parameters: []*armdevtestlabs.ArtifactParameterProperties{},
									}},
								DisallowPublicIPAddress: to.Ptr(true),
								GalleryImageReference: &armdevtestlabs.GalleryImageReference{
									Offer:     to.Ptr("0001-com-ubuntu-server-groovy"),
									OSType:    to.Ptr("Linux"),
									Publisher: to.Ptr("canonical"),
									SKU:       to.Ptr("20_10"),
									Version:   to.Ptr("latest"),
								},
								IsAuthenticationWithSSHKey: to.Ptr(false),
								LabSubnetName:              to.Ptr("Dtl{labName}Subnet"),
								LabVirtualNetworkID:        to.Ptr("/virtualnetworks/dtl{labName}"),
								NetworkInterface: &armdevtestlabs.NetworkInterfaceProperties{
									SharedPublicIPAddressConfiguration: &armdevtestlabs.SharedPublicIPAddressConfiguration{
										InboundNatRules: []*armdevtestlabs.InboundNatRule{
											{
												BackendPort:       to.Ptr[int32](22),
												TransportProtocol: to.Ptr(armdevtestlabs.TransportProtocolTCP),
											}},
									},
								},
								Notes:       to.Ptr("Ubuntu Server 20.10"),
								Size:        to.Ptr("Standard_B1ms"),
								StorageType: to.Ptr("Standard"),
								UserName:    to.Ptr("user"),
							},
						},
						OSType:            to.Ptr("Linux"),
						ProvisioningState: to.Ptr("Succeeded"),
						UniqueIdentifier:  to.Ptr("7a7d20ab-8a50-46fb-8dc6-7c6c1443a01b"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FormulaList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FormulaList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Formulas_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFormulas_Get(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Formulas_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Formulas_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewFormulasClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{formulaName}",
		&armdevtestlabs.FormulasClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Formulas_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Formula{
			Name: to.Ptr("{formulaName}"),
			Type: to.Ptr("Microsoft.DevTestLab/labs/formulas"),
			ID:   to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/formulas/{formulaName}"),
			Properties: &armdevtestlabs.FormulaProperties{
				Description:  to.Ptr("Formula used to create a Linux VM"),
				Author:       to.Ptr("user@contoso.com"),
				CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-22T19:13:35.9922091+00:00"); return t }()),
				FormulaContent: &armdevtestlabs.LabVirtualMachineCreationParameter{
					Location: to.Ptr("{location}"),
					Properties: &armdevtestlabs.LabVirtualMachineCreationParameterProperties{
						AllowClaim: to.Ptr(false),
						Artifacts: []*armdevtestlabs.ArtifactInstallProperties{
							{
								ArtifactID: to.Ptr("/artifactsources/{artifactSourceName}/artifacts/linux-install-nodejs"),
								Parameters: []*armdevtestlabs.ArtifactParameterProperties{},
							}},
						DisallowPublicIPAddress: to.Ptr(true),
						GalleryImageReference: &armdevtestlabs.GalleryImageReference{
							Offer:     to.Ptr("0001-com-ubuntu-server-groovy"),
							OSType:    to.Ptr("Linux"),
							Publisher: to.Ptr("canonical"),
							SKU:       to.Ptr("20_10"),
							Version:   to.Ptr("latest"),
						},
						IsAuthenticationWithSSHKey: to.Ptr(false),
						LabSubnetName:              to.Ptr("Dtl{labName}Subnet"),
						LabVirtualNetworkID:        to.Ptr("/virtualnetworks/dtl{labName}"),
						NetworkInterface: &armdevtestlabs.NetworkInterfaceProperties{
							SharedPublicIPAddressConfiguration: &armdevtestlabs.SharedPublicIPAddressConfiguration{
								InboundNatRules: []*armdevtestlabs.InboundNatRule{
									{
										BackendPort:       to.Ptr[int32](22),
										TransportProtocol: to.Ptr(armdevtestlabs.TransportProtocolTCP),
									}},
							},
						},
						Notes:       to.Ptr("Ubuntu Server 20.10"),
						Size:        to.Ptr("Standard_B1ms"),
						StorageType: to.Ptr("Standard"),
						UserName:    to.Ptr("user"),
					},
				},
				OSType:            to.Ptr("Linux"),
				ProvisioningState: to.Ptr("Succeeded"),
				UniqueIdentifier:  to.Ptr("7a7d20ab-8a50-46fb-8dc6-7c6c1443a01b"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Formula) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Formula)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Formulas_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFormulas_CreateOrUpdate(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Formulas_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Formulas_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewFormulasClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{formulaName}",
		armdevtestlabs.Formula{
			Location: to.Ptr("{location}"),
			Properties: &armdevtestlabs.FormulaProperties{
				Description: to.Ptr("Formula using a Linux base"),
				FormulaContent: &armdevtestlabs.LabVirtualMachineCreationParameter{
					Location: to.Ptr("{location}"),
					Properties: &armdevtestlabs.LabVirtualMachineCreationParameterProperties{
						AllowClaim: to.Ptr(false),
						Artifacts: []*armdevtestlabs.ArtifactInstallProperties{
							{
								ArtifactID: to.Ptr("/artifactsources/{artifactSourceName}/artifacts/linux-install-nodejs"),
								Parameters: []*armdevtestlabs.ArtifactParameterProperties{},
							}},
						DisallowPublicIPAddress: to.Ptr(true),
						GalleryImageReference: &armdevtestlabs.GalleryImageReference{
							Offer:     to.Ptr("0001-com-ubuntu-server-groovy"),
							OSType:    to.Ptr("Linux"),
							Publisher: to.Ptr("canonical"),
							SKU:       to.Ptr("20_10"),
							Version:   to.Ptr("latest"),
						},
						IsAuthenticationWithSSHKey: to.Ptr(false),
						LabSubnetName:              to.Ptr("Dtl{labName}Subnet"),
						LabVirtualNetworkID:        to.Ptr("/virtualnetworks/dtl{labName}"),
						NetworkInterface: &armdevtestlabs.NetworkInterfaceProperties{
							SharedPublicIPAddressConfiguration: &armdevtestlabs.SharedPublicIPAddressConfiguration{
								InboundNatRules: []*armdevtestlabs.InboundNatRule{
									{
										BackendPort:       to.Ptr[int32](22),
										TransportProtocol: to.Ptr(armdevtestlabs.TransportProtocolTCP),
									}},
							},
						},
						Notes:       to.Ptr("Ubuntu Server 20.10"),
						Size:        to.Ptr("Standard_B1ms"),
						StorageType: to.Ptr("Standard"),
						UserName:    to.Ptr("user"),
					},
				},
			},
		},
		&armdevtestlabs.FormulasClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Formulas_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Formulas_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Formula{
			Name:     to.Ptr("{formulaName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/formulas"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/formulas/{formulaName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.FormulaProperties{
				Description:  to.Ptr("Formula using a Linux base"),
				Author:       to.Ptr("username@contoso.com"),
				CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-22T21:25:42.9254696+00:00"); return t }()),
				FormulaContent: &armdevtestlabs.LabVirtualMachineCreationParameter{
					Location: to.Ptr("{location}"),
					Properties: &armdevtestlabs.LabVirtualMachineCreationParameterProperties{
						AllowClaim: to.Ptr(false),
						Artifacts: []*armdevtestlabs.ArtifactInstallProperties{
							{
								ArtifactID: to.Ptr("/artifactsources/{artifactSourceName}/artifacts/linux-install-nodejs"),
								Parameters: []*armdevtestlabs.ArtifactParameterProperties{},
							}},
						DisallowPublicIPAddress: to.Ptr(true),
						GalleryImageReference: &armdevtestlabs.GalleryImageReference{
							Offer:     to.Ptr("0001-com-ubuntu-server-groovy"),
							OSType:    to.Ptr("Linux"),
							Publisher: to.Ptr("canonical"),
							SKU:       to.Ptr("20_10"),
							Version:   to.Ptr("latest"),
						},
						IsAuthenticationWithSSHKey: to.Ptr(false),
						LabSubnetName:              to.Ptr("Dtl{labName}Subnet"),
						LabVirtualNetworkID:        to.Ptr("/virtualnetworks/dtl{labName}"),
						NetworkInterface: &armdevtestlabs.NetworkInterfaceProperties{
							SharedPublicIPAddressConfiguration: &armdevtestlabs.SharedPublicIPAddressConfiguration{
								InboundNatRules: []*armdevtestlabs.InboundNatRule{
									{
										BackendPort:       to.Ptr[int32](22),
										TransportProtocol: to.Ptr(armdevtestlabs.TransportProtocolTCP),
									}},
							},
						},
						Notes:       to.Ptr("Ubuntu Server 20.10"),
						Size:        to.Ptr("Standard_B1ms"),
						StorageType: to.Ptr("Standard"),
						UserName:    to.Ptr("user"),
					},
				},
				ProvisioningState: to.Ptr("Succeeded"),
				UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Formula) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Formula)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Formulas_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFormulas_Delete(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Formulas_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Formulas_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewFormulasClient("{subscriptionId}", cred, &options)
	_, err := client.Delete(ctx,
		"resourceGroupName",
		"{labName}",
		"{formulaName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Formulas_Delete.json: %v", err)
	}
}

func TestFormulas_Update(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Formulas_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Formulas_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewFormulasClient("{subscriptionId}", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"{formulaName}",
		armdevtestlabs.FormulaFragment{
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Formulas_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Formula{
			Name: to.Ptr("{formulaName}"),
			Type: to.Ptr("Microsoft.DevTestLab/labs/formulas"),
			ID:   to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/formulas/{formulaName}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.FormulaProperties{
				Description:  to.Ptr("Formula using a Linux base"),
				Author:       to.Ptr("username@contoso.com"),
				CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-22T21:25:42.9254696+00:00"); return t }()),
				FormulaContent: &armdevtestlabs.LabVirtualMachineCreationParameter{
					Location: to.Ptr("{location}"),
					Properties: &armdevtestlabs.LabVirtualMachineCreationParameterProperties{
						AllowClaim: to.Ptr(false),
						Artifacts: []*armdevtestlabs.ArtifactInstallProperties{
							{
								ArtifactID: to.Ptr("/artifactsources/{artifactSourceName}/artifacts/linux-install-nodejs"),
								Parameters: []*armdevtestlabs.ArtifactParameterProperties{},
							}},
						DisallowPublicIPAddress: to.Ptr(true),
						GalleryImageReference: &armdevtestlabs.GalleryImageReference{
							Offer:     to.Ptr("0001-com-ubuntu-server-groovy"),
							OSType:    to.Ptr("Linux"),
							Publisher: to.Ptr("canonical"),
							SKU:       to.Ptr("20_10"),
							Version:   to.Ptr("latest"),
						},
						IsAuthenticationWithSSHKey: to.Ptr(false),
						LabSubnetName:              to.Ptr("Dtl{labName}Subnet"),
						LabVirtualNetworkID:        to.Ptr("/virtualnetworks/dtl{labName}"),
						NetworkInterface: &armdevtestlabs.NetworkInterfaceProperties{
							SharedPublicIPAddressConfiguration: &armdevtestlabs.SharedPublicIPAddressConfiguration{
								InboundNatRules: []*armdevtestlabs.InboundNatRule{
									{
										BackendPort:       to.Ptr[int32](22),
										TransportProtocol: to.Ptr(armdevtestlabs.TransportProtocolTCP),
									}},
							},
						},
						Notes:       to.Ptr("Ubuntu Server 20.10"),
						Size:        to.Ptr("Standard_B1ms"),
						StorageType: to.Ptr("Standard"),
						UserName:    to.Ptr("user"),
					},
				},
				ProvisioningState: to.Ptr("Succeeded"),
				UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Formula) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Formula)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Formulas_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGalleryImages_List(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GalleryImages_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GalleryImages_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewGalleryImagesClient("{subscriptionId}", cred, &options)
	pager := client.List("resourceGroupName",
		"{labName}",
		&armdevtestlabs.GalleryImagesClientListOptions{Expand: nil,
			Filter:  nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GalleryImages_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.GalleryImageList{
			Value: []*armdevtestlabs.GalleryImage{
				{
					Name:     to.Ptr("Ubuntu Server 20.04 LTS"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs/galleryImages"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/galleryimages/ubuntu server 20.04 lts"),
					Location: to.Ptr("{location}"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.GalleryImageProperties{
						Description: to.Ptr("Ubuntu Server is the world's most popular Linux for cloud environments. Updates and patches for Ubuntu Server 20.04 LTS will be available until April 2025. Ubuntu Server is the perfect virtual machine (VM) platform for all workloads from web applications to NoSQL databases and Hadoop. For more information see <a href='https://ubuntu.com/azure' target='_blank'>Ubuntu on Azure</a> and <a href='http://juju.ubuntu.com' target='_blank'>using Juju to deploy your workloads</a>.<p><h3 class='msportalfx-text-header'>Legal Terms</h3></p><p>By clicking the Create button, I acknowledge that I am getting this software from Canonical and that the <a href='http://www.ubuntu.com/project/about-ubuntu/licensing' target='_blank'>legal terms</a> of Canonical apply to it. Microsoft does not provide rights for third-party software. Also see the <a href='http://www.ubuntu.com/aboutus/privacypolicy' target='_blank'>privacy statement</a> from Canonical.</p>"),
						Author:      to.Ptr("Canonical"),
						CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-14T23:43:43.7643542+00:00"); return t }()),
						Enabled:     to.Ptr(true),
						Icon:        to.Ptr("https://106c4.wpc.azureedge.net/80106C4/Gallery-Prod/cdn/2015-02-24/prod20161101-microsoft-windowsazure-gallery/canonical.0001-com-ubuntu-server-focal20_04-lts-ARM.1.0.22/Icons/Small.png"),
						ImageReference: &armdevtestlabs.GalleryImageReference{
							Offer:     to.Ptr("0001-com-ubuntu-server-focal"),
							OSType:    to.Ptr("Linux"),
							Publisher: to.Ptr("canonical"),
							SKU:       to.Ptr("20_04-lts"),
							Version:   to.Ptr("latest"),
						},
					},
				},
				{
					Name:     to.Ptr("Windows 10 Enterprise, Version 20H2"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs/galleryImages"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/galleryimages/windows 10 enterprise, version 20h2"),
					Location: to.Ptr("{location}"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.GalleryImageProperties{
						Description: to.Ptr("<p>This software is provided by Microsoft. Use of this software in Microsoft Azure is not permitted except under a volume licensing agreement with Microsoft. By clicking Create, I acknowledge that I or the company I work for is licensed to use this software under a volume licensing agreement with Microsoft and that the right to use it will be subject to that agreement.</p> <p><h3 class='msportalfx-text-header'>Legal Terms</h3></p><p>By clicking the Create button, I acknowledge that I am getting this software from Microsoft and that the <a href='https://www.microsoft.com/en-us/Useterms/Retail/Windows/10/UseTerms_Retail_Windows_10_English.htm' target='_blank'>legal terms</a> of Microsoft apply to it. Microsoft does not provide rights for third-party software. Also see the <a href='https://go.microsoft.com/fwlink/?LinkId=529552' target='_blank'>privacy statement</a> from Microsoft.</p>"),
						Author:      to.Ptr("Microsoft"),
						CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-14T21:33:33.2464999+00:00"); return t }()),
						Enabled:     to.Ptr(true),
						Icon:        to.Ptr("https://106c4.wpc.azureedge.net/80106C4/Gallery-Prod/cdn/2015-02-24/prod20161101-microsoft-windowsazure-gallery/microsoftwindowsdesktop.windows-1020h2-ent.1.0.238/Icons/Small.png"),
						ImageReference: &armdevtestlabs.GalleryImageReference{
							Offer:     to.Ptr("Windows-10"),
							OSType:    to.Ptr("Windows"),
							Publisher: to.Ptr("MicrosoftWindowsDesktop"),
							SKU:       to.Ptr("20h2-ent"),
							Version:   to.Ptr("latest"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GalleryImageList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GalleryImageList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/GalleryImages_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationChannels_List(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/NotificationChannels_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NotificationChannels_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewNotificationChannelsClient("{subscriptionId}", cred, &options)
	pager := client.List("resourceGroupName",
		"{labName}",
		&armdevtestlabs.NotificationChannelsClientListOptions{Expand: nil,
			Filter:  nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/NotificationChannels_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.NotificationChannelList{
			Value: []*armdevtestlabs.NotificationChannel{
				{
					Name:     to.Ptr("autoshutdown"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs/notificationChannels"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/notificationChannels/{notificationChannelName}"),
					Location: to.Ptr("{location}"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.NotificationChannelProperties{
						Description:    to.Ptr("Integration configured for auto-shutdown"),
						CreatedDate:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-05T02:12:10.6566371+00:00"); return t }()),
						EmailRecipient: to.Ptr("{email}"),
						Events: []*armdevtestlabs.Event{
							{
								EventName: to.Ptr(armdevtestlabs.NotificationChannelEventTypeAutoShutdown),
							}},
						NotificationLocale: to.Ptr("en"),
						ProvisioningState:  to.Ptr("Succeeded"),
						UniqueIdentifier:   to.Ptr("{uniqueIdentifier}"),
						WebHookURL:         to.Ptr("{webhookUrl}"),
					},
				},
				{
					Name:     to.Ptr("costThreshold"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs/notificationChannels"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/notificationChannels/{notificationChannelName}"),
					Location: to.Ptr("{location}"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.NotificationChannelProperties{
						Description: to.Ptr("Integration configured for cost"),
						CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-05T02:14:05.2392034+00:00"); return t }()),
						Events: []*armdevtestlabs.Event{
							{
								EventName: to.Ptr(armdevtestlabs.NotificationChannelEventTypeCost),
							}},
						NotificationLocale: to.Ptr("en"),
						ProvisioningState:  to.Ptr("Succeeded"),
						UniqueIdentifier:   to.Ptr("{uniqueIdentifier}"),
						WebHookURL:         to.Ptr("{webhookUrl}"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NotificationChannelList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NotificationChannelList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/NotificationChannels_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationChannels_Get(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/NotificationChannels_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NotificationChannels_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewNotificationChannelsClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{notificationChannelName}",
		&armdevtestlabs.NotificationChannelsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/NotificationChannels_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.NotificationChannel{
			Name:     to.Ptr("{notificationChannelName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/notificationChannels"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/notificationChannels/{notificationChannelName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.NotificationChannelProperties{
				Description:    to.Ptr("Integration configured for auto-shutdown"),
				CreatedDate:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-05T02:14:05.2392034+00:00"); return t }()),
				EmailRecipient: to.Ptr("{email}"),
				Events: []*armdevtestlabs.Event{
					{
						EventName: to.Ptr(armdevtestlabs.NotificationChannelEventTypeAutoShutdown),
					}},
				NotificationLocale: to.Ptr("en"),
				ProvisioningState:  to.Ptr("Succeeded"),
				UniqueIdentifier:   to.Ptr("{uniqueIdentifier}"),
				WebHookURL:         to.Ptr("{webhookUrl}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NotificationChannel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NotificationChannel)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/NotificationChannels_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationChannels_CreateOrUpdate(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/NotificationChannels_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NotificationChannels_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewNotificationChannelsClient("{subscriptionId}", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{notificationChannelName}",
		armdevtestlabs.NotificationChannel{
			Properties: &armdevtestlabs.NotificationChannelProperties{
				Description:    to.Ptr("Integration configured for auto-shutdown"),
				EmailRecipient: to.Ptr("{email}"),
				Events: []*armdevtestlabs.Event{
					{
						EventName: to.Ptr(armdevtestlabs.NotificationChannelEventTypeAutoShutdown),
					}},
				NotificationLocale: to.Ptr("en"),
				WebHookURL:         to.Ptr("{webhookUrl}"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/NotificationChannels_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.NotificationChannel{
			Name:     to.Ptr("{notificationChannelName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/notificationChannels"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/notificationChannels/{notificationChannelName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.NotificationChannelProperties{
				Description:    to.Ptr("Integration configured for auto-shutdown"),
				CreatedDate:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-05T02:14:05.2392034+00:00"); return t }()),
				EmailRecipient: to.Ptr("{email}"),
				Events: []*armdevtestlabs.Event{
					{
						EventName: to.Ptr(armdevtestlabs.NotificationChannelEventTypeAutoShutdown),
					}},
				NotificationLocale: to.Ptr("en"),
				ProvisioningState:  to.Ptr("Succeeded"),
				UniqueIdentifier:   to.Ptr("{uniqueIdentifier}"),
				WebHookURL:         to.Ptr("{webhookUrl}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NotificationChannel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NotificationChannel)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/NotificationChannels_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationChannels_Delete(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/NotificationChannels_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NotificationChannels_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewNotificationChannelsClient("{subscriptionId}", cred, &options)
	_, err := client.Delete(ctx,
		"resourceGroupName",
		"{labName}",
		"{notificationChannelName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/NotificationChannels_Delete.json: %v", err)
	}
}

func TestNotificationChannels_Update(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/NotificationChannels_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NotificationChannels_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewNotificationChannelsClient("{subscriptionId}", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"{notificationChannelName}",
		armdevtestlabs.NotificationChannelFragment{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/NotificationChannels_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.NotificationChannel{
			Name:     to.Ptr("{notificationChannelName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/notificationChannels"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/notificationChannels/{notificationChannelName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.NotificationChannelProperties{
				Description:    to.Ptr("Integration configured for auto-shutdown"),
				CreatedDate:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-05T02:14:05.2392034+00:00"); return t }()),
				EmailRecipient: to.Ptr("{email}"),
				Events: []*armdevtestlabs.Event{
					{
						EventName: to.Ptr(armdevtestlabs.NotificationChannelEventTypeAutoShutdown),
					}},
				NotificationLocale: to.Ptr("en"),
				ProvisioningState:  to.Ptr("Succeeded"),
				UniqueIdentifier:   to.Ptr("{uniqueIdentifier}"),
				WebHookURL:         to.Ptr("{webhookUrl}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NotificationChannel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NotificationChannel)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/NotificationChannels_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationChannels_Notify(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/NotificationChannels_Notify.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NotificationChannels_Notify"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewNotificationChannelsClient("{subscriptionId}", cred, &options)
	_, err := client.Notify(ctx,
		"resourceGroupName",
		"{labName}",
		"{notificationChannelName}",
		armdevtestlabs.NotifyParameters{
			EventName:   to.Ptr(armdevtestlabs.NotificationChannelEventTypeAutoShutdown),
			JSONPayload: to.Ptr("{\"eventType\":\"AutoShutdown\",\"subscriptionId\":\"{subscriptionId}\",\"resourceGroupName\":\"resourceGroupName\",\"labName\":\"{labName}\"}"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/NotificationChannels_Notify.json: %v", err)
	}
}

func TestPolicySets_EvaluatePolicies(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/PolicySets_EvaluatePolicies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PolicySets_EvaluatePolicies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewPolicySetsClient("{subscriptionId}", cred, &options)
	res, err := client.EvaluatePolicies(ctx,
		"resourceGroupName",
		"{labName}",
		"{policySetName}",
		armdevtestlabs.EvaluatePoliciesRequest{
			Policies: []*armdevtestlabs.EvaluatePoliciesProperties{
				{
					FactName:    to.Ptr("LabVmCount"),
					ValueOffset: to.Ptr("1"),
				}},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/PolicySets_EvaluatePolicies.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.EvaluatePoliciesResponse{
			Results: []*armdevtestlabs.PolicySetResult{
				{
					HasError: to.Ptr(true),
					PolicyViolations: []*armdevtestlabs.PolicyViolation{
						{
							Code:    to.Ptr("MaxValuePolicy"),
							Message: to.Ptr("You cannot exceed the limit (1) of virtual machines that can be created in this lab."),
						}},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.EvaluatePoliciesResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EvaluatePoliciesResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/PolicySets_EvaluatePolicies.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPolicies_List(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Policies_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Policies_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewPoliciesClient("{subscriptionId}", cred, &options)
	pager := client.List("resourceGroupName",
		"{labName}",
		"{policySetName}",
		&armdevtestlabs.PoliciesClientListOptions{Expand: nil,
			Filter:  nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Policies_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.PolicyList{
			Value: []*armdevtestlabs.Policy{
				{
					Name:     to.Ptr("{labName}"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs/policySets/policies"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies/{policyName}"),
					Location: to.Ptr("{location}"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.PolicyProperties{
						Description:       to.Ptr("{policyDescription}"),
						CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
						EvaluatorType:     to.Ptr(armdevtestlabs.PolicyEvaluatorType("{policyEvaluatorType}")),
						FactData:          to.Ptr("{policyFactData}"),
						FactName:          to.Ptr(armdevtestlabs.PolicyFactName("{policyFactName}")),
						ProvisioningState: to.Ptr("Succeeded"),
						Status:            to.Ptr(armdevtestlabs.PolicyStatus("{policyStatus}")),
						Threshold:         to.Ptr("{policyThreshold}"),
						UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PolicyList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PolicyList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Policies_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPolicies_Get(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Policies_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Policies_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewPoliciesClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{policySetName}",
		"{policyName}",
		&armdevtestlabs.PoliciesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Policies_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Policy{
			Properties: &armdevtestlabs.PolicyProperties{
				Description:       to.Ptr("{policyDescription}"),
				CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
				EvaluatorType:     to.Ptr(armdevtestlabs.PolicyEvaluatorType("{policyEvaluatorType}")),
				FactData:          to.Ptr("{policyFactData}"),
				FactName:          to.Ptr(armdevtestlabs.PolicyFactName("{policyFactName}")),
				ProvisioningState: to.Ptr("Succeeded"),
				Status:            to.Ptr(armdevtestlabs.PolicyStatus("{policyStatus}")),
				Threshold:         to.Ptr("{policyThreshold}"),
				UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Policy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Policy)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Policies_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Policies_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Policies_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewPoliciesClient("{subscriptionId}", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{policySetName}",
		"{policyName}",
		armdevtestlabs.Policy{
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.PolicyProperties{
				Description:   to.Ptr("{policyDescription}"),
				EvaluatorType: to.Ptr(armdevtestlabs.PolicyEvaluatorType("{policyEvaluatorType}")),
				FactData:      to.Ptr("{policyFactData}"),
				FactName:      to.Ptr(armdevtestlabs.PolicyFactName("{policyFactName}")),
				Status:        to.Ptr(armdevtestlabs.PolicyStatus("{policyStatus}")),
				Threshold:     to.Ptr("{policyThreshold}"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Policies_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Policy{
			Name:     to.Ptr("{labName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/policies"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies/{policyName}"),
			Location: to.Ptr("{location}"),
			Properties: &armdevtestlabs.PolicyProperties{
				Description:       to.Ptr("{policyDescription}"),
				CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
				EvaluatorType:     to.Ptr(armdevtestlabs.PolicyEvaluatorType("{policyEvaluatorType}")),
				FactData:          to.Ptr("{policyFactData}"),
				FactName:          to.Ptr(armdevtestlabs.PolicyFactName("{policyFactName}")),
				ProvisioningState: to.Ptr("Succeeded"),
				Status:            to.Ptr(armdevtestlabs.PolicyStatus("{policyStatus}")),
				Threshold:         to.Ptr("{policyThreshold}"),
				UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Policy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Policy)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Policies_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPolicies_Delete(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Policies_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Policies_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewPoliciesClient("{subscriptionId}", cred, &options)
	_, err := client.Delete(ctx,
		"resourceGroupName",
		"{labName}",
		"{policySetName}",
		"{policyName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Policies_Delete.json: %v", err)
	}
}

func TestPolicies_Update(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Policies_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Policies_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewPoliciesClient("{subscriptionId}", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"{policySetName}",
		"{policyName}",
		armdevtestlabs.PolicyFragment{
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Policies_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Policy{
			Name:     to.Ptr("{labName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/policies"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies/{policyName}"),
			Location: to.Ptr("{location}"),
			Properties: &armdevtestlabs.PolicyProperties{
				Description:       to.Ptr("{policyDescription}"),
				CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
				EvaluatorType:     to.Ptr(armdevtestlabs.PolicyEvaluatorType("{policyEvaluatorType}")),
				FactData:          to.Ptr("{policyFactData}"),
				FactName:          to.Ptr(armdevtestlabs.PolicyFactName("{policyFactName}")),
				ProvisioningState: to.Ptr("Succeeded"),
				Status:            to.Ptr(armdevtestlabs.PolicyStatus("{policyStatus}")),
				Threshold:         to.Ptr("{policyThreshold}"),
				UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Policy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Policy)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Policies_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSchedules_List(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Schedules_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Schedules_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewSchedulesClient("{subscriptionId}", cred, &options)
	pager := client.List("resourceGroupName",
		"{labName}",
		&armdevtestlabs.SchedulesClientListOptions{Expand: nil,
			Filter:  nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Schedules_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.ScheduleList{
			Value: []*armdevtestlabs.Schedule{
				{
					Name:     to.Ptr("{scheduleName}"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs/schedules"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/schedules/{scheduleName}"),
					Location: to.Ptr("{location}"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.ScheduleProperties{
						CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
						DailyRecurrence: &armdevtestlabs.DayDetails{
							Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurEveryDay}"),
						},
						HourlyRecurrence: &armdevtestlabs.HourDetails{
							Minute: to.Ptr[int32](30),
						},
						NotificationSettings: &armdevtestlabs.NotificationSettings{
							EmailRecipient:     to.Ptr("{email}"),
							NotificationLocale: to.Ptr("EN"),
							Status:             to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
							TimeInMinutes:      to.Ptr[int32](15),
							WebhookURL:         to.Ptr("{webhookUrl}"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
						Status:            to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
						TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}"),
						TaskType:          to.Ptr("{myLabVmTaskType}"),
						TimeZoneID:        to.Ptr("Pacific Standard Time"),
						UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
						WeeklyRecurrence: &armdevtestlabs.WeekDetails{
							Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurOnThoseDays}"),
							Weekdays: []*string{
								to.Ptr("Monday"),
								to.Ptr("Wednesday"),
								to.Ptr("Friday")},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ScheduleList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ScheduleList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Schedules_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSchedules_Get(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Schedules_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Schedules_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewSchedulesClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{scheduleName}",
		&armdevtestlabs.SchedulesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Schedules_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Schedule{
			Name:     to.Ptr("{scheduleName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/schedules"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/schedules/{scheduleName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ScheduleProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
				DailyRecurrence: &armdevtestlabs.DayDetails{
					Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurEveryDay}"),
				},
				HourlyRecurrence: &armdevtestlabs.HourDetails{
					Minute: to.Ptr[int32](30),
				},
				NotificationSettings: &armdevtestlabs.NotificationSettings{
					EmailRecipient:     to.Ptr("{email}"),
					NotificationLocale: to.Ptr("EN"),
					Status:             to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
					TimeInMinutes:      to.Ptr[int32](15),
					WebhookURL:         to.Ptr("{webhookUrl}"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				Status:            to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
				TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}"),
				TaskType:          to.Ptr("{myLabVmTaskType}"),
				TimeZoneID:        to.Ptr("Pacific Standard Time"),
				UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
				WeeklyRecurrence: &armdevtestlabs.WeekDetails{
					Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurOnThoseDays}"),
					Weekdays: []*string{
						to.Ptr("Monday"),
						to.Ptr("Wednesday"),
						to.Ptr("Friday")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Schedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Schedule)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Schedules_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSchedules_CreateOrUpdate(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Schedules_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Schedules_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewSchedulesClient("{subscriptionId}", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{scheduleName}",
		armdevtestlabs.Schedule{
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ScheduleProperties{
				DailyRecurrence: &armdevtestlabs.DayDetails{
					Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurEveryDay}"),
				},
				HourlyRecurrence: &armdevtestlabs.HourDetails{
					Minute: to.Ptr[int32](30),
				},
				NotificationSettings: &armdevtestlabs.NotificationSettings{
					EmailRecipient:     to.Ptr("{email}"),
					NotificationLocale: to.Ptr("EN"),
					Status:             to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
					TimeInMinutes:      to.Ptr[int32](15),
					WebhookURL:         to.Ptr("{webhookUrl}"),
				},
				Status:           to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
				TargetResourceID: to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}"),
				TaskType:         to.Ptr("{myLabVmTaskType}"),
				TimeZoneID:       to.Ptr("Pacific Standard Time"),
				WeeklyRecurrence: &armdevtestlabs.WeekDetails{
					Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurOnThoseDays}"),
					Weekdays: []*string{
						to.Ptr("Monday"),
						to.Ptr("Wednesday"),
						to.Ptr("Friday")},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Schedules_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Schedule{
			Name:     to.Ptr("{scheduleName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/schedules"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/schedules/{scheduleName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ScheduleProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
				DailyRecurrence: &armdevtestlabs.DayDetails{
					Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurEveryDay}"),
				},
				HourlyRecurrence: &armdevtestlabs.HourDetails{
					Minute: to.Ptr[int32](30),
				},
				NotificationSettings: &armdevtestlabs.NotificationSettings{
					EmailRecipient:     to.Ptr("{email}"),
					NotificationLocale: to.Ptr("EN"),
					Status:             to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
					TimeInMinutes:      to.Ptr[int32](15),
					WebhookURL:         to.Ptr("{webhookUrl}"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				Status:            to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
				TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}"),
				TaskType:          to.Ptr("{myLabVmTaskType}"),
				TimeZoneID:        to.Ptr("Pacific Standard Time"),
				UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
				WeeklyRecurrence: &armdevtestlabs.WeekDetails{
					Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurOnThoseDays}"),
					Weekdays: []*string{
						to.Ptr("Monday"),
						to.Ptr("Wednesday"),
						to.Ptr("Friday")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Schedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Schedule)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Schedules_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSchedules_Delete(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Schedules_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Schedules_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewSchedulesClient("{subscriptionId}", cred, &options)
	_, err := client.Delete(ctx,
		"resourceGroupName",
		"{labName}",
		"{scheduleName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Schedules_Delete.json: %v", err)
	}
}

func TestSchedules_Update(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Schedules_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Schedules_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewSchedulesClient("{subscriptionId}", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"{scheduleName}",
		armdevtestlabs.ScheduleFragment{
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Schedules_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Schedule{
			Name:     to.Ptr("{scheduleName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/schedules"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/schedules/{scheduleName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ScheduleProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
				DailyRecurrence: &armdevtestlabs.DayDetails{
					Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurEveryDay}"),
				},
				HourlyRecurrence: &armdevtestlabs.HourDetails{
					Minute: to.Ptr[int32](30),
				},
				NotificationSettings: &armdevtestlabs.NotificationSettings{
					EmailRecipient:     to.Ptr("{email}"),
					NotificationLocale: to.Ptr("EN"),
					Status:             to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
					TimeInMinutes:      to.Ptr[int32](15),
					WebhookURL:         to.Ptr("{webhookUrl}"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				Status:            to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
				TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}"),
				TaskType:          to.Ptr("{myLabVmTaskType}"),
				TimeZoneID:        to.Ptr("Pacific Standard Time"),
				UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
				WeeklyRecurrence: &armdevtestlabs.WeekDetails{
					Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurOnThoseDays}"),
					Weekdays: []*string{
						to.Ptr("Monday"),
						to.Ptr("Wednesday"),
						to.Ptr("Friday")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Schedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Schedule)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Schedules_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSchedules_Execute(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Schedules_Execute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Schedules_Execute"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewSchedulesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginExecute(ctx,
		"resourceGroupName",
		"{labName}",
		"{scheduleName}",
		&armdevtestlabs.SchedulesClientBeginExecuteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Schedules_Execute.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Schedules_Execute.json: %v", err)
	}
}

func TestSchedules_ListApplicable(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Schedules_ListApplicable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Schedules_ListApplicable"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewSchedulesClient("{subscriptionId}", cred, &options)
	pager := client.ListApplicable("resourceGroupName",
		"{labName}",
		"{scheduleName}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Schedules_ListApplicable.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.ScheduleList{
			Value: []*armdevtestlabs.Schedule{
				{
					Name:     to.Ptr("{scheduleName}"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs/schedules"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/schedules/{scheduleName}"),
					Location: to.Ptr("{location}"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.ScheduleProperties{
						CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
						DailyRecurrence: &armdevtestlabs.DayDetails{
							Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurEveryDay}"),
						},
						HourlyRecurrence: &armdevtestlabs.HourDetails{
							Minute: to.Ptr[int32](30),
						},
						NotificationSettings: &armdevtestlabs.NotificationSettings{
							EmailRecipient:     to.Ptr("{email}"),
							NotificationLocale: to.Ptr("EN"),
							Status:             to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
							TimeInMinutes:      to.Ptr[int32](15),
							WebhookURL:         to.Ptr("{webhookUrl}"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
						Status:            to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
						TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}"),
						TaskType:          to.Ptr("{myLabVmTaskType}"),
						TimeZoneID:        to.Ptr("Pacific Standard Time"),
						UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
						WeeklyRecurrence: &armdevtestlabs.WeekDetails{
							Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurOnThoseDays}"),
							Weekdays: []*string{
								to.Ptr("Monday"),
								to.Ptr("Wednesday"),
								to.Ptr("Friday")},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ScheduleList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ScheduleList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Schedules_ListApplicable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceRunners_Get(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceRunners_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceRunners_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewServiceRunnersClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{devtestlabName}",
		"{servicerunnerName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceRunners_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.ServiceRunner{
			Name:     to.Ptr("{serviceRunnerName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/serviceRunners"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/serviceRunners/{serviceRunnerName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Identity: &armdevtestlabs.IdentityProperties{
				Type:            to.Ptr(armdevtestlabs.ManagedIdentityType("{identityType}")),
				ClientSecretURL: to.Ptr("{identityClientSecretUrl}"),
				PrincipalID:     to.Ptr("{identityPrincipalId}"),
				TenantID:        to.Ptr("{identityTenantId}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceRunner) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceRunner)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceRunners_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceRunners_CreateOrUpdate(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceRunners_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceRunners_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewServiceRunnersClient("{subscriptionId}", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroupName",
		"{devtestlabName}",
		"{servicerunnerName}",
		armdevtestlabs.ServiceRunner{
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Identity: &armdevtestlabs.IdentityProperties{
				Type:            to.Ptr(armdevtestlabs.ManagedIdentityType("{identityType}")),
				ClientSecretURL: to.Ptr("{identityClientSecretUrl}"),
				PrincipalID:     to.Ptr("{identityPrincipalId}"),
				TenantID:        to.Ptr("{identityTenantId}"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceRunners_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.ServiceRunner{
			Identity: &armdevtestlabs.IdentityProperties{
				Type:            to.Ptr(armdevtestlabs.ManagedIdentityType("{identityType}")),
				ClientSecretURL: to.Ptr("{identityClientSecretUrl}"),
				PrincipalID:     to.Ptr("{identityPrincipalId}"),
				TenantID:        to.Ptr("{identityTenantId}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceRunner) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceRunner)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceRunners_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceRunners_Delete(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceRunners_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceRunners_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewServiceRunnersClient("{subscriptionId}", cred, &options)
	_, err := client.Delete(ctx,
		"resourceGroupName",
		"{devtestlabName}",
		"{servicerunnerName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceRunners_Delete.json: %v", err)
	}
}

func TestUsers_List(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Users_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Users_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewUsersClient("{subscriptionId}", cred, &options)
	pager := client.List("resourceGroupName",
		"{devtestlabName}",
		&armdevtestlabs.UsersClientListOptions{Expand: nil,
			Filter:  nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Users_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.UserList{
			Value: []*armdevtestlabs.User{
				{
					Name:     to.Ptr("{userName}"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs/users"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}"),
					Location: to.Ptr("{location}"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.UserProperties{
						CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
						Identity: &armdevtestlabs.UserIdentity{
							AppID:         to.Ptr("{appId}"),
							ObjectID:      to.Ptr("{objectId}"),
							PrincipalID:   to.Ptr("{principalId}"),
							PrincipalName: to.Ptr("{principalName}"),
							TenantID:      to.Ptr("{tenantId}"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
						SecretStore: &armdevtestlabs.UserSecretStore{
							KeyVaultID:  to.Ptr("{keyVaultId}"),
							KeyVaultURI: to.Ptr("{keyVaultUri}"),
						},
						UniqueIdentifier: to.Ptr("{uniqueIdentifier}"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UserList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UserList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Users_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUsers_Get(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Users_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Users_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewUsersClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{devtestlabName}",
		"{userName}",
		&armdevtestlabs.UsersClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Users_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.User{
			Name:     to.Ptr("{userName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/users"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.UserProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
				Identity: &armdevtestlabs.UserIdentity{
					AppID:         to.Ptr("{appId}"),
					ObjectID:      to.Ptr("{objectId}"),
					PrincipalID:   to.Ptr("{principalId}"),
					PrincipalName: to.Ptr("{principalName}"),
					TenantID:      to.Ptr("{tenantId}"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				SecretStore: &armdevtestlabs.UserSecretStore{
					KeyVaultID:  to.Ptr("{keyVaultId}"),
					KeyVaultURI: to.Ptr("{keyVaultUri}"),
				},
				UniqueIdentifier: to.Ptr("{uniqueIdentifier}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.User) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.User)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Users_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUsers_CreateOrUpdate(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Users_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Users_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewUsersClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"{devtestlabName}",
		"{userName}",
		armdevtestlabs.User{
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.UserProperties{
				Identity: &armdevtestlabs.UserIdentity{
					AppID:         to.Ptr("{appId}"),
					ObjectID:      to.Ptr("{objectId}"),
					PrincipalID:   to.Ptr("{principalId}"),
					PrincipalName: to.Ptr("{principalName}"),
					TenantID:      to.Ptr("{tenantId}"),
				},
				SecretStore: &armdevtestlabs.UserSecretStore{
					KeyVaultID:  to.Ptr("{keyVaultId}"),
					KeyVaultURI: to.Ptr("{keyVaultUri}"),
				},
			},
		},
		&armdevtestlabs.UsersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Users_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Users_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.User{
			Properties: &armdevtestlabs.UserProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
				Identity: &armdevtestlabs.UserIdentity{
					AppID:         to.Ptr("{appId}"),
					ObjectID:      to.Ptr("{objectId}"),
					PrincipalID:   to.Ptr("{principalId}"),
					PrincipalName: to.Ptr("{principalName}"),
					TenantID:      to.Ptr("{tenantId}"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				SecretStore: &armdevtestlabs.UserSecretStore{
					KeyVaultID:  to.Ptr("{keyVaultId}"),
					KeyVaultURI: to.Ptr("{keyVaultUri}"),
				},
				UniqueIdentifier: to.Ptr("{uniqueIdentifier}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.User) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.User)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Users_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUsers_Delete(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Users_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Users_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewUsersClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroupName",
		"{devtestlabName}",
		"{userName}",
		&armdevtestlabs.UsersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Users_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Users_Delete.json: %v", err)
	}
}

func TestUsers_Update(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Users_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Users_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewUsersClient("{subscriptionId}", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{devtestlabName}",
		"{userName}",
		armdevtestlabs.UserFragment{
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Users_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.User{
			Properties: &armdevtestlabs.UserProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
				Identity: &armdevtestlabs.UserIdentity{
					AppID:         to.Ptr("{appId}"),
					ObjectID:      to.Ptr("{objectId}"),
					PrincipalID:   to.Ptr("{principalId}"),
					PrincipalName: to.Ptr("{principalName}"),
					TenantID:      to.Ptr("{tenantId}"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				SecretStore: &armdevtestlabs.UserSecretStore{
					KeyVaultID:  to.Ptr("{keyVaultId}"),
					KeyVaultURI: to.Ptr("users/{userName}"),
				},
				UniqueIdentifier: to.Ptr("{uniqueIdentifier}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.User) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.User)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Users_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDisks_List(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Disks_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Disks_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewDisksClient("{subscriptionId}", cred, &options)
	pager := client.List("resourceGroupName",
		"{labName}",
		"@me",
		&armdevtestlabs.DisksClientListOptions{Expand: nil,
			Filter:  nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Disks_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.DiskList{
			Value: []*armdevtestlabs.Disk{
				{
					Name: to.Ptr("{diskName}"),
					Type: to.Ptr("Microsoft.DevTestLab/labs/users/disks"),
					ID:   to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/users/{userId}/disks/{diskName}"),
					Properties: &armdevtestlabs.DiskProperties{
						CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-04T20:27:32.1445632+00:00"); return t }()),
						DiskSizeGiB:       to.Ptr[int32](1023),
						DiskType:          to.Ptr(armdevtestlabs.StorageTypeStandard),
						DiskURI:           to.Ptr(""),
						HostCaching:       to.Ptr("None"),
						LeasedByLabVMID:   to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/vmName"),
						ManagedDiskID:     to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.compute/disks/{diskName}"),
						ProvisioningState: to.Ptr("Succeeded"),
						UniqueIdentifier:  to.Ptr("9bf098d1-1b64-41a5-aa05-286767074a0b"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiskList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiskList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Disks_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDisks_Get(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Disks_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Disks_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewDisksClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"@me",
		"{diskName}",
		&armdevtestlabs.DisksClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Disks_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Disk{
			Name: to.Ptr("{diskName}"),
			Type: to.Ptr("Microsoft.DevTestLab/labs/users/disks"),
			ID:   to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/users/{userId}/disks/{diskName}"),
			Properties: &armdevtestlabs.DiskProperties{
				CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-04T20:27:32.1445632+00:00"); return t }()),
				DiskSizeGiB:       to.Ptr[int32](1023),
				DiskType:          to.Ptr(armdevtestlabs.StorageTypeStandard),
				DiskURI:           to.Ptr(""),
				HostCaching:       to.Ptr("None"),
				LeasedByLabVMID:   to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/vmName"),
				ManagedDiskID:     to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.compute/disks/{diskName}"),
				ProvisioningState: to.Ptr("Succeeded"),
				UniqueIdentifier:  to.Ptr("9bf098d1-1b64-41a5-aa05-286767074a0b"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Disks_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDisks_CreateOrUpdate(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Disks_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Disks_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewDisksClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{userId}",
		"{diskName}",
		armdevtestlabs.Disk{
			Properties: &armdevtestlabs.DiskProperties{
				DiskSizeGiB:     to.Ptr[int32](1023),
				DiskType:        to.Ptr(armdevtestlabs.StorageTypeStandard),
				LeasedByLabVMID: to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/vmName"),
			},
		},
		&armdevtestlabs.DisksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Disks_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Disks_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Disk{
			Name: to.Ptr("{diskName}"),
			Type: to.Ptr("Microsoft.DevTestLab/labs/users/disks"),
			ID:   to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/l{labName}/users/{userId}/disks/{diskName}"),
			Properties: &armdevtestlabs.DiskProperties{
				CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-04T20:21:02.0182357+00:00"); return t }()),
				DiskSizeGiB:       to.Ptr[int32](1023),
				DiskType:          to.Ptr(armdevtestlabs.StorageTypeStandard),
				DiskURI:           to.Ptr(""),
				HostCaching:       to.Ptr("None"),
				LeasedByLabVMID:   to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/vmName"),
				ProvisioningState: to.Ptr("Succeeded"),
				UniqueIdentifier:  to.Ptr("b7183ac5-1097-4513-b597-4d9d23e0a820"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Disks_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDisks_Delete(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Disks_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Disks_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewDisksClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroupName",
		"{labName}",
		"{userId}",
		"{diskName}",
		&armdevtestlabs.DisksClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Disks_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Disks_Delete.json: %v", err)
	}
}

func TestDisks_Update(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Disks_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Disks_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewDisksClient("{subscriptionId}", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"@me",
		"diskName",
		armdevtestlabs.DiskFragment{
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Disks_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Disk{
			Name: to.Ptr("{disk-name}"),
			Type: to.Ptr("Microsoft.DevTestLab/labs/users/disks"),
			ID:   to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/users/{user-id}/disks/{diskName}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.DiskProperties{
				CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-04T20:21:02.0182357+00:00"); return t }()),
				DiskSizeGiB:       to.Ptr[int32](1023),
				DiskType:          to.Ptr(armdevtestlabs.StorageTypeStandard),
				DiskURI:           to.Ptr(""),
				HostCaching:       to.Ptr("None"),
				LeasedByLabVMID:   to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/vmName"),
				ProvisioningState: to.Ptr("Succeeded"),
				UniqueIdentifier:  to.Ptr("b7183ac5-1097-4513-b597-4d9d23e0a820"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Disks_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDisks_Attach(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Disks_Attach.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Disks_Attach"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewDisksClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginAttach(ctx,
		"resourceGroupName",
		"{labName}",
		"{userId}",
		"{diskName}",
		armdevtestlabs.AttachDiskProperties{
			LeasedByLabVMID: to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/{vmName}"),
		},
		&armdevtestlabs.DisksClientBeginAttachOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Disks_Attach.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Disks_Attach.json: %v", err)
	}
}

func TestDisks_Detach(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Disks_Detach.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Disks_Detach"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewDisksClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginDetach(ctx,
		"resourceGroupName",
		"{labName}",
		"{userId}",
		"{diskName}",
		armdevtestlabs.DetachDiskProperties{
			LeasedByLabVMID: to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/myResourceGroup/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/{vmName}"),
		},
		&armdevtestlabs.DisksClientBeginDetachOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Disks_Detach.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Disks_Detach.json: %v", err)
	}
}

func TestEnvironments_List(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Environments_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Environments_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewEnvironmentsClient("{subscriptionId}", cred, &options)
	pager := client.List("resourceGroupName",
		"{labName}",
		"@me",
		&armdevtestlabs.EnvironmentsClientListOptions{Expand: nil,
			Filter:  nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Environments_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.DtlEnvironmentList{
			Value: []*armdevtestlabs.DtlEnvironment{
				{
					Name:     to.Ptr("{environmentName}"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs/users/environments"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/users/{uniqueIdentifier}/environments/{environmentName}"),
					Location: to.Ptr("{location}"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.EnvironmentProperties{
						CreatedByUser: to.Ptr("user@contoso.com"),
						DeploymentProperties: &armdevtestlabs.EnvironmentDeploymentProperties{
							ArmTemplateID: to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/artifactSources/{artifactSourceName}/armTemplates/{armTemplateName}"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
						UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DtlEnvironmentList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DtlEnvironmentList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Environments_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEnvironments_Get(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Environments_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Environments_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewEnvironmentsClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"@me",
		"{environmentName}",
		&armdevtestlabs.EnvironmentsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Environments_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.DtlEnvironment{
			Name:     to.Ptr("{environmentName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/users/environments"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/users/{uniqueIdentifier}/environments/{environmentName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.EnvironmentProperties{
				CreatedByUser: to.Ptr("user@contoso.com"),
				DeploymentProperties: &armdevtestlabs.EnvironmentDeploymentProperties{
					ArmTemplateID: to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/artifactSources/{artifactSourceName}/armTemplates/{armTemplateName}"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DtlEnvironment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DtlEnvironment)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Environments_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEnvironments_CreateOrUpdate(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Environments_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Environments_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewEnvironmentsClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"@me",
		"{environmentName}",
		armdevtestlabs.DtlEnvironment{
			Properties: &armdevtestlabs.EnvironmentProperties{
				DeploymentProperties: &armdevtestlabs.EnvironmentDeploymentProperties{
					ArmTemplateID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/artifactSources/{artifactSourceName}/armTemplates/{armTemplateName}"),
					Parameters:    []*armdevtestlabs.ArmTemplateParameterProperties{},
				},
			},
		},
		&armdevtestlabs.EnvironmentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Environments_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Environments_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.DtlEnvironment{
			Name:     to.Ptr("{environmentName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/users/environments"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/users/{uniqueIdentifier}/environments/{environmentName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.EnvironmentProperties{
				CreatedByUser: to.Ptr("user@contoso.com"),
				DeploymentProperties: &armdevtestlabs.EnvironmentDeploymentProperties{
					ArmTemplateID: to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/artifactSources/{artifactSourceName}/armTemplates/{armTemplateName}"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DtlEnvironment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DtlEnvironment)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Environments_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEnvironments_Delete(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Environments_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Environments_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewEnvironmentsClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroupName",
		"{labName}",
		"@me",
		"{environmentName}",
		&armdevtestlabs.EnvironmentsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Environments_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Environments_Delete.json: %v", err)
	}
}

func TestEnvironments_Update(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Environments_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Environments_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewEnvironmentsClient("{subscriptionId}", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"@me",
		"{environmentName}",
		armdevtestlabs.DtlEnvironmentFragment{
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Environments_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.DtlEnvironment{
			Name:     to.Ptr("{environmentName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/users/environments"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/users/{uniqueIdentifier}/environments/{environmentName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.EnvironmentProperties{
				CreatedByUser: to.Ptr("user@contoso.com"),
				DeploymentProperties: &armdevtestlabs.EnvironmentDeploymentProperties{
					ArmTemplateID: to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/artifactSources/{artifactSourceName}/armTemplates/{armTemplateName}"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DtlEnvironment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DtlEnvironment)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Environments_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecrets_List(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Secrets_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Secrets_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewSecretsClient("{subscriptionId}", cred, &options)
	pager := client.List("resourceGroupName",
		"{labName}",
		"{userName}",
		&armdevtestlabs.SecretsClientListOptions{Expand: nil,
			Filter:  nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Secrets_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.SecretList{
			Value: []*armdevtestlabs.Secret{
				{
					Name: to.Ptr("secret1"),
					Type: to.Ptr("Microsoft.DevTestLab/labs/users/secrets"),
					ID:   to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/users/{userName}/secrets/secret1"),
					Properties: &armdevtestlabs.SecretProperties{
						UniqueIdentifier: to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				},
				{
					Name: to.Ptr("secret2"),
					Type: to.Ptr("Microsoft.DevTestLab/labs/users/secrets"),
					ID:   to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/users/{userName}/secrets/secret2"),
					Properties: &armdevtestlabs.SecretProperties{
						UniqueIdentifier: to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SecretList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SecretList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Secrets_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecrets_Get(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Secrets_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Secrets_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewSecretsClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{userName}",
		"{secretName}",
		&armdevtestlabs.SecretsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Secrets_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Secret{
			Name: to.Ptr("{secretName}"),
			Type: to.Ptr("Microsoft.DevTestLab/labs/users/secrets"),
			ID:   to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/users/{userName}/secrets/{secretName}"),
			Properties: &armdevtestlabs.SecretProperties{
				UniqueIdentifier: to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Secret) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Secret)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Secrets_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecrets_CreateOrUpdate(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Secrets_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Secrets_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewSecretsClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{userName}",
		"{secretName}",
		armdevtestlabs.Secret{
			Properties: &armdevtestlabs.SecretProperties{
				Value: to.Ptr("{secret}"),
			},
		},
		&armdevtestlabs.SecretsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Secrets_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Secrets_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Secret{
			Name: to.Ptr("{secretName}"),
			Type: to.Ptr("Microsoft.DevTestLab/labs/users/secrets"),
			ID:   to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/users/{userName}/secrets/{secretName}"),
			Properties: &armdevtestlabs.SecretProperties{
				UniqueIdentifier: to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Secret) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Secret)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Secrets_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecrets_Delete(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Secrets_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Secrets_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewSecretsClient("{subscriptionId}", cred, &options)
	_, err := client.Delete(ctx,
		"resourceGroupName",
		"{labName}",
		"{userName}",
		"{secretName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Secrets_Delete.json: %v", err)
	}
}

func TestSecrets_Update(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Secrets_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Secrets_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewSecretsClient("{subscriptionId}", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"{userName}",
		"{secretName}",
		armdevtestlabs.SecretFragment{
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Secrets_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Secret{
			Name: to.Ptr("{secretName}"),
			Type: to.Ptr("Microsoft.DevTestLab/labs/users/secrets"),
			ID:   to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/users/{userName}/secrets/{secretName}"),
			Properties: &armdevtestlabs.SecretProperties{
				UniqueIdentifier: to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Secret) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Secret)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Secrets_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceFabrics_List(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceFabrics_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewServiceFabricsClient("{subscriptionId}", cred, &options)
	pager := client.List("resourceGroupName",
		"{labName}",
		"{userName}",
		&armdevtestlabs.ServiceFabricsClientListOptions{Expand: nil,
			Filter:  nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.ServiceFabricList{
			Value: []*armdevtestlabs.ServiceFabric{
				{
					Name:     to.Ptr("{serviceFabricName}"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs/users/serviceFabrics"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/users/{userName}/servicefabrics/{serviceFabricName}"),
					Location: to.Ptr("{location}"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.ServiceFabricProperties{
						ApplicableSchedule: &armdevtestlabs.ApplicableSchedule{
							Name:     to.Ptr("{scheduleName}"),
							Type:     to.Ptr("{scheduleType}"),
							ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/schedules/{scheduleName}"),
							Location: to.Ptr("{location}"),
							Tags: map[string]*string{
								"tagName1": to.Ptr("tagValue1"),
							},
							Properties: &armdevtestlabs.ApplicableScheduleProperties{
								LabVMsShutdown: &armdevtestlabs.Schedule{
									Name:     to.Ptr("{scheduleName}"),
									Type:     to.Ptr("Microsoft.DevTestLab/labs/schedules"),
									ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/schedules/{scheduleName}"),
									Location: to.Ptr("{location}"),
									Tags: map[string]*string{
										"tagName1": to.Ptr("tagValue1"),
									},
									Properties: &armdevtestlabs.ScheduleProperties{
										CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
										DailyRecurrence: &armdevtestlabs.DayDetails{
											Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurEveryDay}"),
										},
										HourlyRecurrence: &armdevtestlabs.HourDetails{
											Minute: to.Ptr[int32](30),
										},
										NotificationSettings: &armdevtestlabs.NotificationSettings{
											EmailRecipient:     to.Ptr("{email}"),
											NotificationLocale: to.Ptr("EN"),
											Status:             to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
											TimeInMinutes:      to.Ptr[int32](15),
											WebhookURL:         to.Ptr("{webhookUrl}"),
										},
										ProvisioningState: to.Ptr("Succeeded"),
										Status:            to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
										TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}"),
										TaskType:          to.Ptr("{myLabVmTaskType}"),
										TimeZoneID:        to.Ptr("Pacific Standard Time"),
										UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
										WeeklyRecurrence: &armdevtestlabs.WeekDetails{
											Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurOnThoseDays}"),
											Weekdays: []*string{
												to.Ptr("Monday"),
												to.Ptr("Wednesday"),
												to.Ptr("Friday")},
										},
									},
								},
								LabVMsStartup: &armdevtestlabs.Schedule{
									Name:     to.Ptr("{scheduleName}"),
									Type:     to.Ptr("Microsoft.DevTestLab/labs/schedules"),
									ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/schedules/{scheduleName}"),
									Location: to.Ptr("{location}"),
									Tags: map[string]*string{
										"tagName1": to.Ptr("tagValue1"),
									},
									Properties: &armdevtestlabs.ScheduleProperties{
										CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
										DailyRecurrence: &armdevtestlabs.DayDetails{
											Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurEveryDay}"),
										},
										HourlyRecurrence: &armdevtestlabs.HourDetails{
											Minute: to.Ptr[int32](30),
										},
										NotificationSettings: &armdevtestlabs.NotificationSettings{
											EmailRecipient:     to.Ptr("{email}"),
											NotificationLocale: to.Ptr("EN"),
											Status:             to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
											TimeInMinutes:      to.Ptr[int32](15),
											WebhookURL:         to.Ptr("{webhookUrl}"),
										},
										ProvisioningState: to.Ptr("Succeeded"),
										Status:            to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
										TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}"),
										TaskType:          to.Ptr("{myLabVmTaskType}"),
										TimeZoneID:        to.Ptr("Pacific Standard Time"),
										UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
										WeeklyRecurrence: &armdevtestlabs.WeekDetails{
											Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurOnThoseDays}"),
											Weekdays: []*string{
												to.Ptr("Monday"),
												to.Ptr("Wednesday"),
												to.Ptr("Friday")},
										},
									},
								},
							},
						},
						EnvironmentID:           to.Ptr("{environmentId}"),
						ExternalServiceFabricID: to.Ptr("{serviceFabricId}"),
						ProvisioningState:       to.Ptr("Succeeded"),
						UniqueIdentifier:        to.Ptr("{uniqueIdentifier}"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceFabricList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceFabricList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceFabrics_Get(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceFabrics_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewServiceFabricsClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{userName}",
		"{serviceFabricName}",
		&armdevtestlabs.ServiceFabricsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.ServiceFabric{
			Name:     to.Ptr("{serviceFabricName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/users/serviceFabrics"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/users/{userName}/servicefabrics/{serviceFabricName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ServiceFabricProperties{
				ApplicableSchedule: &armdevtestlabs.ApplicableSchedule{
					Name:     to.Ptr("{scheduleName}"),
					Type:     to.Ptr("{scheduleType}"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/schedules/{scheduleName}"),
					Location: to.Ptr("{location}"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.ApplicableScheduleProperties{
						LabVMsShutdown: &armdevtestlabs.Schedule{
							Name:     to.Ptr("{scheduleName}"),
							Type:     to.Ptr("Microsoft.DevTestLab/labs/schedules"),
							ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/schedules/{scheduleName}"),
							Location: to.Ptr("{location}"),
							Tags: map[string]*string{
								"tagName1": to.Ptr("tagValue1"),
							},
							Properties: &armdevtestlabs.ScheduleProperties{
								CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
								DailyRecurrence: &armdevtestlabs.DayDetails{
									Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurEveryDay}"),
								},
								HourlyRecurrence: &armdevtestlabs.HourDetails{
									Minute: to.Ptr[int32](30),
								},
								NotificationSettings: &armdevtestlabs.NotificationSettings{
									EmailRecipient:     to.Ptr("{email}"),
									NotificationLocale: to.Ptr("EN"),
									Status:             to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
									TimeInMinutes:      to.Ptr[int32](15),
									WebhookURL:         to.Ptr("{webhookUrl}"),
								},
								ProvisioningState: to.Ptr("Succeeded"),
								Status:            to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
								TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}"),
								TaskType:          to.Ptr("{myLabVmTaskType}"),
								TimeZoneID:        to.Ptr("Pacific Standard Time"),
								UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
								WeeklyRecurrence: &armdevtestlabs.WeekDetails{
									Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurOnThoseDays}"),
									Weekdays: []*string{
										to.Ptr("Monday"),
										to.Ptr("Wednesday"),
										to.Ptr("Friday")},
								},
							},
						},
						LabVMsStartup: &armdevtestlabs.Schedule{
							Name:     to.Ptr("{scheduleName}"),
							Type:     to.Ptr("Microsoft.DevTestLab/labs/schedules"),
							ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/schedules/{scheduleName}"),
							Location: to.Ptr("{location}"),
							Tags: map[string]*string{
								"tagName1": to.Ptr("tagValue1"),
							},
							Properties: &armdevtestlabs.ScheduleProperties{
								CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
								DailyRecurrence: &armdevtestlabs.DayDetails{
									Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurEveryDay}"),
								},
								HourlyRecurrence: &armdevtestlabs.HourDetails{
									Minute: to.Ptr[int32](30),
								},
								NotificationSettings: &armdevtestlabs.NotificationSettings{
									EmailRecipient:     to.Ptr("{email}"),
									NotificationLocale: to.Ptr("EN"),
									Status:             to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
									TimeInMinutes:      to.Ptr[int32](15),
									WebhookURL:         to.Ptr("{webhookUrl}"),
								},
								ProvisioningState: to.Ptr("Succeeded"),
								Status:            to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
								TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}"),
								TaskType:          to.Ptr("{myLabVmTaskType}"),
								TimeZoneID:        to.Ptr("Pacific Standard Time"),
								UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
								WeeklyRecurrence: &armdevtestlabs.WeekDetails{
									Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurOnThoseDays}"),
									Weekdays: []*string{
										to.Ptr("Monday"),
										to.Ptr("Wednesday"),
										to.Ptr("Friday")},
								},
							},
						},
					},
				},
				EnvironmentID:           to.Ptr("{environmentId}"),
				ExternalServiceFabricID: to.Ptr("{serviceFabricId}"),
				ProvisioningState:       to.Ptr("Succeeded"),
				UniqueIdentifier:        to.Ptr("{uniqueIdentifier}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceFabric) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceFabric)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceFabrics_CreateOrUpdate(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceFabrics_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewServiceFabricsClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{userName}",
		"{serviceFabricName}",
		armdevtestlabs.ServiceFabric{
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ServiceFabricProperties{
				EnvironmentID:           to.Ptr("{environmentId}"),
				ExternalServiceFabricID: to.Ptr("{serviceFabricId}"),
			},
		},
		&armdevtestlabs.ServiceFabricsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.ServiceFabric{
			Name:     to.Ptr("{serviceFabricName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/users/serviceFabrics"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/users/{userName}/servicefabrics/{serviceFabricName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ServiceFabricProperties{
				ApplicableSchedule: &armdevtestlabs.ApplicableSchedule{
					Name:     to.Ptr("{scheduleName}"),
					Type:     to.Ptr("{scheduleType}"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/schedules/{scheduleName}"),
					Location: to.Ptr("{location}"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.ApplicableScheduleProperties{
						LabVMsShutdown: &armdevtestlabs.Schedule{
							Name:     to.Ptr("{scheduleName}"),
							Type:     to.Ptr("Microsoft.DevTestLab/labs/schedules"),
							ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/schedules/{scheduleName}"),
							Location: to.Ptr("{location}"),
							Tags: map[string]*string{
								"tagName1": to.Ptr("tagValue1"),
							},
							Properties: &armdevtestlabs.ScheduleProperties{
								CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
								DailyRecurrence: &armdevtestlabs.DayDetails{
									Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurEveryDay}"),
								},
								HourlyRecurrence: &armdevtestlabs.HourDetails{
									Minute: to.Ptr[int32](30),
								},
								NotificationSettings: &armdevtestlabs.NotificationSettings{
									EmailRecipient:     to.Ptr("{email}"),
									NotificationLocale: to.Ptr("EN"),
									Status:             to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
									TimeInMinutes:      to.Ptr[int32](15),
									WebhookURL:         to.Ptr("{webhookUrl}"),
								},
								ProvisioningState: to.Ptr("Succeeded"),
								Status:            to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
								TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}"),
								TaskType:          to.Ptr("{myLabVmTaskType}"),
								TimeZoneID:        to.Ptr("Pacific Standard Time"),
								UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
								WeeklyRecurrence: &armdevtestlabs.WeekDetails{
									Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurOnThoseDays}"),
									Weekdays: []*string{
										to.Ptr("Monday"),
										to.Ptr("Wednesday"),
										to.Ptr("Friday")},
								},
							},
						},
						LabVMsStartup: &armdevtestlabs.Schedule{
							Name:     to.Ptr("{scheduleName}"),
							Type:     to.Ptr("Microsoft.DevTestLab/labs/schedules"),
							ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/schedules/{scheduleName}"),
							Location: to.Ptr("{location}"),
							Tags: map[string]*string{
								"tagName1": to.Ptr("tagValue1"),
							},
							Properties: &armdevtestlabs.ScheduleProperties{
								CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
								DailyRecurrence: &armdevtestlabs.DayDetails{
									Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurEveryDay}"),
								},
								HourlyRecurrence: &armdevtestlabs.HourDetails{
									Minute: to.Ptr[int32](30),
								},
								NotificationSettings: &armdevtestlabs.NotificationSettings{
									EmailRecipient:     to.Ptr("{email}"),
									NotificationLocale: to.Ptr("EN"),
									Status:             to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
									TimeInMinutes:      to.Ptr[int32](15),
									WebhookURL:         to.Ptr("{webhookUrl}"),
								},
								ProvisioningState: to.Ptr("Succeeded"),
								Status:            to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
								TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}"),
								TaskType:          to.Ptr("{myLabVmTaskType}"),
								TimeZoneID:        to.Ptr("Pacific Standard Time"),
								UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
								WeeklyRecurrence: &armdevtestlabs.WeekDetails{
									Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurOnThoseDays}"),
									Weekdays: []*string{
										to.Ptr("Monday"),
										to.Ptr("Wednesday"),
										to.Ptr("Friday")},
								},
							},
						},
					},
				},
				EnvironmentID:           to.Ptr("{environmentId}"),
				ExternalServiceFabricID: to.Ptr("{serviceFabricId}"),
				ProvisioningState:       to.Ptr("Succeeded"),
				UniqueIdentifier:        to.Ptr("{uniqueIdentifier}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceFabric) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceFabric)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceFabrics_Delete(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceFabrics_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewServiceFabricsClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroupName",
		"{labName}",
		"{userName}",
		"{serviceFabricName}",
		&armdevtestlabs.ServiceFabricsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_Delete.json: %v", err)
	}
}

func TestServiceFabrics_Update(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceFabrics_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewServiceFabricsClient("{subscriptionId}", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"{userName}",
		"{serviceFabricName}",
		armdevtestlabs.ServiceFabricFragment{
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.ServiceFabric{
			Name:     to.Ptr("{serviceFabricName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/users/serviceFabrics"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/users/{userName}/servicefabrics/{serviceFabricName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ServiceFabricProperties{
				ApplicableSchedule: &armdevtestlabs.ApplicableSchedule{
					Name:     to.Ptr("{scheduleName}"),
					Type:     to.Ptr("{scheduleType}"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/schedules/{scheduleName}"),
					Location: to.Ptr("{location}"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.ApplicableScheduleProperties{
						LabVMsShutdown: &armdevtestlabs.Schedule{
							Name:     to.Ptr("{scheduleName}"),
							Type:     to.Ptr("Microsoft.DevTestLab/labs/schedules"),
							ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/schedules/{scheduleName}"),
							Location: to.Ptr("{location}"),
							Tags: map[string]*string{
								"tagName1": to.Ptr("tagValue1"),
							},
							Properties: &armdevtestlabs.ScheduleProperties{
								CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
								DailyRecurrence: &armdevtestlabs.DayDetails{
									Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurEveryDay}"),
								},
								HourlyRecurrence: &armdevtestlabs.HourDetails{
									Minute: to.Ptr[int32](30),
								},
								NotificationSettings: &armdevtestlabs.NotificationSettings{
									EmailRecipient:     to.Ptr("{email}"),
									NotificationLocale: to.Ptr("EN"),
									Status:             to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
									TimeInMinutes:      to.Ptr[int32](15),
									WebhookURL:         to.Ptr("{webhookUrl}"),
								},
								ProvisioningState: to.Ptr("Succeeded"),
								Status:            to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
								TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}"),
								TaskType:          to.Ptr("{myLabVmTaskType}"),
								TimeZoneID:        to.Ptr("Pacific Standard Time"),
								UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
								WeeklyRecurrence: &armdevtestlabs.WeekDetails{
									Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurOnThoseDays}"),
									Weekdays: []*string{
										to.Ptr("Monday"),
										to.Ptr("Wednesday"),
										to.Ptr("Friday")},
								},
							},
						},
						LabVMsStartup: &armdevtestlabs.Schedule{
							Name:     to.Ptr("{scheduleName}"),
							Type:     to.Ptr("Microsoft.DevTestLab/labs/schedules"),
							ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/schedules/{scheduleName}"),
							Location: to.Ptr("{location}"),
							Tags: map[string]*string{
								"tagName1": to.Ptr("tagValue1"),
							},
							Properties: &armdevtestlabs.ScheduleProperties{
								CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
								DailyRecurrence: &armdevtestlabs.DayDetails{
									Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurEveryDay}"),
								},
								HourlyRecurrence: &armdevtestlabs.HourDetails{
									Minute: to.Ptr[int32](30),
								},
								NotificationSettings: &armdevtestlabs.NotificationSettings{
									EmailRecipient:     to.Ptr("{email}"),
									NotificationLocale: to.Ptr("EN"),
									Status:             to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
									TimeInMinutes:      to.Ptr[int32](15),
									WebhookURL:         to.Ptr("{webhookUrl}"),
								},
								ProvisioningState: to.Ptr("Succeeded"),
								Status:            to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
								TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}"),
								TaskType:          to.Ptr("{myLabVmTaskType}"),
								TimeZoneID:        to.Ptr("Pacific Standard Time"),
								UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
								WeeklyRecurrence: &armdevtestlabs.WeekDetails{
									Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurOnThoseDays}"),
									Weekdays: []*string{
										to.Ptr("Monday"),
										to.Ptr("Wednesday"),
										to.Ptr("Friday")},
								},
							},
						},
					},
				},
				EnvironmentID:           to.Ptr("{environmentId}"),
				ExternalServiceFabricID: to.Ptr("{serviceFabricId}"),
				ProvisioningState:       to.Ptr("Succeeded"),
				UniqueIdentifier:        to.Ptr("{uniqueIdentifier}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceFabric) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceFabric)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceFabrics_ListApplicableSchedules(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_ListApplicableSchedules.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceFabrics_ListApplicableSchedules"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewServiceFabricsClient("{subscriptionId}", cred, &options)
	res, err := client.ListApplicableSchedules(ctx,
		"resourceGroupName",
		"{labName}",
		"{userName}",
		"{serviceFabricName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_ListApplicableSchedules.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.ApplicableSchedule{
			Name:     to.Ptr("{scheduleName}"),
			Type:     to.Ptr("{scheduleType}"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/schedules/{scheduleName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ApplicableScheduleProperties{
				LabVMsShutdown: &armdevtestlabs.Schedule{
					Name:     to.Ptr("{scheduleName}"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs/schedules"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/schedules/{scheduleName}"),
					Location: to.Ptr("{location}"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.ScheduleProperties{
						CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
						DailyRecurrence: &armdevtestlabs.DayDetails{
							Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurEveryDay}"),
						},
						HourlyRecurrence: &armdevtestlabs.HourDetails{
							Minute: to.Ptr[int32](30),
						},
						NotificationSettings: &armdevtestlabs.NotificationSettings{
							EmailRecipient:     to.Ptr("{email}"),
							NotificationLocale: to.Ptr("EN"),
							Status:             to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
							TimeInMinutes:      to.Ptr[int32](15),
							WebhookURL:         to.Ptr("{webhookUrl}"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
						Status:            to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
						TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}"),
						TaskType:          to.Ptr("{myLabVmTaskType}"),
						TimeZoneID:        to.Ptr("Pacific Standard Time"),
						UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
						WeeklyRecurrence: &armdevtestlabs.WeekDetails{
							Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurOnThoseDays}"),
							Weekdays: []*string{
								to.Ptr("Monday"),
								to.Ptr("Wednesday"),
								to.Ptr("Friday")},
						},
					},
				},
				LabVMsStartup: &armdevtestlabs.Schedule{
					Name:     to.Ptr("{scheduleName}"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs/schedules"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/schedules/{scheduleName}"),
					Location: to.Ptr("{location}"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.ScheduleProperties{
						CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T18:40:48.1739018-07:00"); return t }()),
						DailyRecurrence: &armdevtestlabs.DayDetails{
							Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurEveryDay}"),
						},
						HourlyRecurrence: &armdevtestlabs.HourDetails{
							Minute: to.Ptr[int32](30),
						},
						NotificationSettings: &armdevtestlabs.NotificationSettings{
							EmailRecipient:     to.Ptr("{email}"),
							NotificationLocale: to.Ptr("EN"),
							Status:             to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
							TimeInMinutes:      to.Ptr[int32](15),
							WebhookURL:         to.Ptr("{webhookUrl}"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
						Status:            to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
						TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}"),
						TaskType:          to.Ptr("{myLabVmTaskType}"),
						TimeZoneID:        to.Ptr("Pacific Standard Time"),
						UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
						WeeklyRecurrence: &armdevtestlabs.WeekDetails{
							Time: to.Ptr("{timeOfTheDayTheScheduleWillOccurOnThoseDays}"),
							Weekdays: []*string{
								to.Ptr("Monday"),
								to.Ptr("Wednesday"),
								to.Ptr("Friday")},
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicableSchedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicableSchedule)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_ListApplicableSchedules.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceFabrics_Start(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_Start.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceFabrics_Start"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewServiceFabricsClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginStart(ctx,
		"resourceGroupName",
		"{labName}",
		"{userName}",
		"{serviceFabricName}",
		&armdevtestlabs.ServiceFabricsClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_Start.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_Start.json: %v", err)
	}
}

func TestServiceFabrics_Stop(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_Stop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceFabrics_Stop"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewServiceFabricsClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginStop(ctx,
		"resourceGroupName",
		"{labName}",
		"{userName}",
		"{serviceFabricName}",
		&armdevtestlabs.ServiceFabricsClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_Stop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabrics_Stop.json: %v", err)
	}
}

func TestServiceFabricSchedules_List(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabricSchedules_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceFabricSchedules_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewServiceFabricSchedulesClient("{subscriptionId}", cred, &options)
	pager := client.List("resourceGroupName",
		"{labName}",
		"@me",
		"{serviceFrabicName}",
		&armdevtestlabs.ServiceFabricSchedulesClientListOptions{Expand: nil,
			Filter:  nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabricSchedules_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.ScheduleList{
			Value: []*armdevtestlabs.Schedule{
				{
					Name:     to.Ptr("{scheduleName}"),
					Type:     to.Ptr("microsoft.devtestlab/labs/users/servicefabrics/schedules"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/users/{uniqueIdentifier}/servicefabrics/{serviceFrabicName}/schedules/{scheduleName}"),
					Location: to.Ptr("{location}"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.ScheduleProperties{
						CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-15T00:00:00.0000000-00:00"); return t }()),
						NotificationSettings: &armdevtestlabs.NotificationSettings{
							EmailRecipient:     to.Ptr("{email}"),
							NotificationLocale: to.Ptr("EN"),
							Status:             to.Ptr(armdevtestlabs.EnableStatusDisabled),
							TimeInMinutes:      to.Ptr[int32](15),
							WebhookURL:         to.Ptr("{webhookUrl}"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
						Status:            to.Ptr(armdevtestlabs.EnableStatusEnabled),
						TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/users/{uniqueIdentifier}/servicefabrics/{serviceFrabicName}"),
						TaskType:          to.Ptr("Unknown"),
						TimeZoneID:        to.Ptr("Pacific Standard Time"),
						UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
						WeeklyRecurrence: &armdevtestlabs.WeekDetails{
							Time: to.Ptr("1900"),
							Weekdays: []*string{
								to.Ptr("Sunday"),
								to.Ptr("Monday"),
								to.Ptr("Tuesday"),
								to.Ptr("Wednesday"),
								to.Ptr("Thursday"),
								to.Ptr("Friday"),
								to.Ptr("Saturday")},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ScheduleList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ScheduleList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabricSchedules_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceFabricSchedules_Get(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabricSchedules_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceFabricSchedules_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewServiceFabricSchedulesClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"@me",
		"{serviceFrabicName}",
		"{scheduleName}",
		&armdevtestlabs.ServiceFabricSchedulesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabricSchedules_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Schedule{
			Name:     to.Ptr("{scheduleName}"),
			Type:     to.Ptr("microsoft.devtestlab/labs/users/servicefabrics/schedules"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/users/{uniqueIdentifier}/servicefabrics/{serviceFrabicName}/schedules/{scheduleName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ScheduleProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-15T00:00:00.0000000-00:00"); return t }()),
				NotificationSettings: &armdevtestlabs.NotificationSettings{
					EmailRecipient:     to.Ptr("{email}"),
					NotificationLocale: to.Ptr("EN"),
					Status:             to.Ptr(armdevtestlabs.EnableStatusDisabled),
					TimeInMinutes:      to.Ptr[int32](15),
					WebhookURL:         to.Ptr("{webhookUrl}"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				Status:            to.Ptr(armdevtestlabs.EnableStatusEnabled),
				TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/users/{uniqueIdentifier}/servicefabrics/{serviceFrabicName}"),
				TaskType:          to.Ptr("Unknown"),
				TimeZoneID:        to.Ptr("Pacific Standard Time"),
				UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
				WeeklyRecurrence: &armdevtestlabs.WeekDetails{
					Time: to.Ptr("1900"),
					Weekdays: []*string{
						to.Ptr("Sunday"),
						to.Ptr("Monday"),
						to.Ptr("Tuesday"),
						to.Ptr("Wednesday"),
						to.Ptr("Thursday"),
						to.Ptr("Friday"),
						to.Ptr("Saturday")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Schedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Schedule)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabricSchedules_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceFabricSchedules_CreateOrUpdate(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabricSchedules_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceFabricSchedules_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewServiceFabricSchedulesClient("{subscriptionId}", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"@me",
		"{serviceFrabicName}",
		"{scheduleName}",
		armdevtestlabs.Schedule{
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ScheduleProperties{
				DailyRecurrence: &armdevtestlabs.DayDetails{
					Time: to.Ptr("19:00"),
				},
				HourlyRecurrence: &armdevtestlabs.HourDetails{
					Minute: to.Ptr[int32](0),
				},
				NotificationSettings: &armdevtestlabs.NotificationSettings{
					EmailRecipient:     to.Ptr("{email}"),
					NotificationLocale: to.Ptr("EN"),
					Status:             to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
					TimeInMinutes:      to.Ptr[int32](15),
					WebhookURL:         to.Ptr("{webhoolUrl}"),
				},
				Status:           to.Ptr(armdevtestlabs.EnableStatus("{Enabled|Disabled}")),
				TargetResourceID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/users/{uniqueIdentifier}/servicefabrics/{serviceFrabicName}"),
				TaskType:         to.Ptr("{Unknown|LabVmsShutdownTask|LabVmsStartupTask|LabVmReclamationTask|ComputeVmShutdownTask}"),
				TimeZoneID:       to.Ptr("Pacific Standard Time"),
				WeeklyRecurrence: &armdevtestlabs.WeekDetails{
					Time: to.Ptr("19:00"),
					Weekdays: []*string{
						to.Ptr("Monday"),
						to.Ptr("Tuesday"),
						to.Ptr("Wednesday"),
						to.Ptr("Thursday"),
						to.Ptr("Friday"),
						to.Ptr("Saturday"),
						to.Ptr("Sunday")},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabricSchedules_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Schedule{
			Name:     to.Ptr("{scheduleName}"),
			Type:     to.Ptr("microsoft.devtestlab/labs/users/servicefabrics/schedules"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/users/{uniqueIdentifier}/servicefabrics/{serviceFrabicName}/schedules/{scheduleName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ScheduleProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-15T00:00:00.0000000-00:00"); return t }()),
				NotificationSettings: &armdevtestlabs.NotificationSettings{
					EmailRecipient:     to.Ptr("{email}"),
					NotificationLocale: to.Ptr("EN"),
					Status:             to.Ptr(armdevtestlabs.EnableStatusDisabled),
					TimeInMinutes:      to.Ptr[int32](15),
					WebhookURL:         to.Ptr("{webhookUrl}"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				Status:            to.Ptr(armdevtestlabs.EnableStatusEnabled),
				TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/users/{uniqueIdentifier}/servicefabrics/{serviceFrabicName}"),
				TaskType:          to.Ptr("Unknown"),
				TimeZoneID:        to.Ptr("Pacific Standard Time"),
				UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
				WeeklyRecurrence: &armdevtestlabs.WeekDetails{
					Time: to.Ptr("1900"),
					Weekdays: []*string{
						to.Ptr("Sunday"),
						to.Ptr("Monday"),
						to.Ptr("Tuesday"),
						to.Ptr("Wednesday"),
						to.Ptr("Thursday"),
						to.Ptr("Friday"),
						to.Ptr("Saturday")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Schedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Schedule)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabricSchedules_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceFabricSchedules_Delete(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabricSchedules_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceFabricSchedules_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewServiceFabricSchedulesClient("{subscriptionId}", cred, &options)
	_, err := client.Delete(ctx,
		"resourceGroupName",
		"{labName}",
		"@me",
		"{serviceFrabicName}",
		"{scheduleName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabricSchedules_Delete.json: %v", err)
	}
}

func TestServiceFabricSchedules_Update(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabricSchedules_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceFabricSchedules_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewServiceFabricSchedulesClient("{subscriptionId}", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"@me",
		"{serviceFrabicName}",
		"{scheduleName}",
		armdevtestlabs.ScheduleFragment{
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabricSchedules_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Schedule{
			Name:     to.Ptr("{scheduleName}"),
			Type:     to.Ptr("microsoft.devtestlab/labs/users/servicefabrics/schedules"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/users/{uniqueIdentifier}/servicefabrics/{serviceFrabicName}/schedules/{scheduleName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ScheduleProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-15T00:00:00.0000000-00:00"); return t }()),
				NotificationSettings: &armdevtestlabs.NotificationSettings{
					EmailRecipient:     to.Ptr("{email}"),
					NotificationLocale: to.Ptr("EN"),
					Status:             to.Ptr(armdevtestlabs.EnableStatusDisabled),
					TimeInMinutes:      to.Ptr[int32](15),
					WebhookURL:         to.Ptr("{webhookUrl}"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				Status:            to.Ptr(armdevtestlabs.EnableStatusDisabled),
				TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/users/{uniqueIdentifier}/servicefabrics/{serviceFrabicName}"),
				TaskType:          to.Ptr("Unknown"),
				TimeZoneID:        to.Ptr("Pacific Standard Time"),
				UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
				WeeklyRecurrence: &armdevtestlabs.WeekDetails{
					Time: to.Ptr("1900"),
					Weekdays: []*string{
						to.Ptr("Sunday"),
						to.Ptr("Monday"),
						to.Ptr("Tuesday"),
						to.Ptr("Wednesday"),
						to.Ptr("Thursday"),
						to.Ptr("Friday"),
						to.Ptr("Saturday")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Schedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Schedule)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabricSchedules_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceFabricSchedules_Execute(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabricSchedules_Execute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServiceFabricSchedules_Execute"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewServiceFabricSchedulesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginExecute(ctx,
		"resourceGroupName",
		"{labName}",
		"@me",
		"{serviceFrabicName}",
		"{scheduleName}",
		&armdevtestlabs.ServiceFabricSchedulesClientBeginExecuteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabricSchedules_Execute.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/ServiceFabricSchedules_Execute.json: %v", err)
	}
}

func TestVirtualMachines_List(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachinesClient("{subscriptionId}", cred, &options)
	pager := client.List("resourceGroupName",
		"{labName}",
		&armdevtestlabs.VirtualMachinesClientListOptions{Expand: nil,
			Filter:  nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.LabVirtualMachineList{
			Value: []*armdevtestlabs.LabVirtualMachine{
				{
					Name:     to.Ptr("{vmName}"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs/virtualMachines"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/{vmName}"),
					Location: to.Ptr("{location}"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.LabVirtualMachineProperties{
						AllowClaim: to.Ptr(true),
						ArtifactDeploymentStatus: &armdevtestlabs.ArtifactDeploymentStatusProperties{
							ArtifactsApplied: to.Ptr[int32](0),
							TotalArtifacts:   to.Ptr[int32](0),
						},
						ComputeID:               to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{labName}-{vmName}-{randomSuffix}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
						CreatedByUser:           to.Ptr(""),
						CreatedByUserID:         to.Ptr(""),
						CreatedDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T16:53:02.4830866-07:00"); return t }()),
						DataDiskParameters:      []*armdevtestlabs.DataDiskProperties{},
						DisallowPublicIPAddress: to.Ptr(true),
						GalleryImageReference: &armdevtestlabs.GalleryImageReference{
							Offer:     to.Ptr("UbuntuServer"),
							OSType:    to.Ptr("Linux"),
							Publisher: to.Ptr("Canonical"),
							SKU:       to.Ptr("16.04-LTS"),
							Version:   to.Ptr("Latest"),
						},
						LabSubnetName:                to.Ptr("{virtualNetworkName}Subnet"),
						LabVirtualNetworkID:          to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualnetworks/{virtualNetworkName}"),
						NetworkInterface:             &armdevtestlabs.NetworkInterfaceProperties{},
						OSType:                       to.Ptr("Linux"),
						OwnerObjectID:                to.Ptr(""),
						OwnerUserPrincipalName:       to.Ptr(""),
						ProvisioningState:            to.Ptr("Succeeded"),
						Size:                         to.Ptr("Standard_A2_v2"),
						StorageType:                  to.Ptr("Standard"),
						UniqueIdentifier:             to.Ptr("{uniqueIdentifier}"),
						UserName:                     to.Ptr("{userName}"),
						VirtualMachineCreationSource: to.Ptr(armdevtestlabs.VirtualMachineCreationSourceFromGalleryImage),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LabVirtualMachineList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LabVirtualMachineList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_Get(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachinesClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		&armdevtestlabs.VirtualMachinesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.LabVirtualMachine{
			Name:     to.Ptr("{vmName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/virtualMachines"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/{vmName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.LabVirtualMachineProperties{
				AllowClaim: to.Ptr(true),
				ArtifactDeploymentStatus: &armdevtestlabs.ArtifactDeploymentStatusProperties{
					ArtifactsApplied: to.Ptr[int32](0),
					TotalArtifacts:   to.Ptr[int32](0),
				},
				ComputeID:               to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{labName}-{vmName}-{randomSuffix}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
				CreatedByUser:           to.Ptr(""),
				CreatedByUserID:         to.Ptr(""),
				CreatedDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T16:53:02.4830866-07:00"); return t }()),
				DataDiskParameters:      []*armdevtestlabs.DataDiskProperties{},
				DisallowPublicIPAddress: to.Ptr(true),
				GalleryImageReference: &armdevtestlabs.GalleryImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					OSType:    to.Ptr("Linux"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("Latest"),
				},
				LabSubnetName:                to.Ptr("{virtualNetworkName}Subnet"),
				LabVirtualNetworkID:          to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualnetworks/{virtualNetworkName}"),
				NetworkInterface:             &armdevtestlabs.NetworkInterfaceProperties{},
				OSType:                       to.Ptr("Linux"),
				OwnerObjectID:                to.Ptr(""),
				OwnerUserPrincipalName:       to.Ptr(""),
				ProvisioningState:            to.Ptr("Succeeded"),
				Size:                         to.Ptr("Standard_A2_v2"),
				StorageType:                  to.Ptr("Standard"),
				UniqueIdentifier:             to.Ptr("{uniqueIdentifier}"),
				UserName:                     to.Ptr("{userName}"),
				VirtualMachineCreationSource: to.Ptr(armdevtestlabs.VirtualMachineCreationSourceFromGalleryImage),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LabVirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LabVirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_CreateOrUpdate(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachinesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		armdevtestlabs.LabVirtualMachine{
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.LabVirtualMachineProperties{
				AllowClaim:              to.Ptr(true),
				DisallowPublicIPAddress: to.Ptr(true),
				GalleryImageReference: &armdevtestlabs.GalleryImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					OSType:    to.Ptr("Linux"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("Latest"),
				},
				LabSubnetName:       to.Ptr("{virtualNetworkName}Subnet"),
				LabVirtualNetworkID: to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualnetworks/{virtualNetworkName}"),
				Password:            to.Ptr("{userPassword}"),
				Size:                to.Ptr("Standard_A2_v2"),
				StorageType:         to.Ptr("Standard"),
				UserName:            to.Ptr("{userName}"),
			},
		},
		&armdevtestlabs.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.LabVirtualMachine{
			Name:     to.Ptr("{vmName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/virtualMachines"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/{vmName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.LabVirtualMachineProperties{
				AllowClaim: to.Ptr(true),
				ArtifactDeploymentStatus: &armdevtestlabs.ArtifactDeploymentStatusProperties{
					ArtifactsApplied: to.Ptr[int32](0),
					TotalArtifacts:   to.Ptr[int32](0),
				},
				CreatedByUser:           to.Ptr(""),
				CreatedByUserID:         to.Ptr(""),
				CreatedDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T16:53:02.4830866-07:00"); return t }()),
				DataDiskParameters:      []*armdevtestlabs.DataDiskProperties{},
				DisallowPublicIPAddress: to.Ptr(true),
				GalleryImageReference: &armdevtestlabs.GalleryImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					OSType:    to.Ptr("Linux"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("Latest"),
				},
				LabSubnetName:                to.Ptr("{virtualNetworkName}Subnet"),
				LabVirtualNetworkID:          to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualnetworks/{virtualNetworkName}"),
				NetworkInterface:             &armdevtestlabs.NetworkInterfaceProperties{},
				OwnerObjectID:                to.Ptr(""),
				OwnerUserPrincipalName:       to.Ptr(""),
				ProvisioningState:            to.Ptr("Succeeded"),
				Size:                         to.Ptr("Standard_A2_v2"),
				StorageType:                  to.Ptr("Standard"),
				UniqueIdentifier:             to.Ptr("{uniqueIdentifier}"),
				UserName:                     to.Ptr("{userName}"),
				VirtualMachineCreationSource: to.Ptr(armdevtestlabs.VirtualMachineCreationSourceFromGalleryImage),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LabVirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LabVirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_Delete(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachinesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		&armdevtestlabs.VirtualMachinesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Delete.json: %v", err)
	}
}

func TestVirtualMachines_Update(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachinesClient("{subscriptionId}", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		armdevtestlabs.LabVirtualMachineFragment{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.LabVirtualMachine{
			Name:     to.Ptr("{vmName}"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/virtualMachines"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/{vmName}"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.LabVirtualMachineProperties{
				AllowClaim: to.Ptr(true),
				ArtifactDeploymentStatus: &armdevtestlabs.ArtifactDeploymentStatusProperties{
					ArtifactsApplied: to.Ptr[int32](0),
					TotalArtifacts:   to.Ptr[int32](0),
				},
				ComputeID:               to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{labName}-{vmName}-{randomSuffix}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
				CreatedByUser:           to.Ptr(""),
				CreatedByUserID:         to.Ptr(""),
				CreatedDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T16:53:02.4830866-07:00"); return t }()),
				DataDiskParameters:      []*armdevtestlabs.DataDiskProperties{},
				DisallowPublicIPAddress: to.Ptr(true),
				GalleryImageReference: &armdevtestlabs.GalleryImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					OSType:    to.Ptr("Linux"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("Latest"),
				},
				LabSubnetName:                to.Ptr("{virtualNetworkName}Subnet"),
				LabVirtualNetworkID:          to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualnetworks/{virtualNetworkName}"),
				NetworkInterface:             &armdevtestlabs.NetworkInterfaceProperties{},
				OSType:                       to.Ptr("Linux"),
				OwnerObjectID:                to.Ptr(""),
				OwnerUserPrincipalName:       to.Ptr(""),
				ProvisioningState:            to.Ptr("Succeeded"),
				Size:                         to.Ptr("Standard_A2_v2"),
				StorageType:                  to.Ptr("Standard"),
				UniqueIdentifier:             to.Ptr("{uniqueIdentifier}"),
				UserName:                     to.Ptr("{userName}"),
				VirtualMachineCreationSource: to.Ptr(armdevtestlabs.VirtualMachineCreationSourceFromGalleryImage),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LabVirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LabVirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_AddDataDisk(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_AddDataDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_AddDataDisk"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachinesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginAddDataDisk(ctx,
		"resourceGroupName",
		"{labName}",
		"{virtualMachineName}",
		armdevtestlabs.DataDiskProperties{
			AttachNewDataDiskOptions: &armdevtestlabs.AttachNewDataDiskOptions{
				DiskName:    to.Ptr("{diskName}"),
				DiskSizeGiB: to.Ptr[int32](127),
				DiskType:    to.Ptr(armdevtestlabs.StorageType("{diskType}")),
			},
		},
		&armdevtestlabs.VirtualMachinesClientBeginAddDataDiskOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_AddDataDisk.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_AddDataDisk.json: %v", err)
	}
}

func TestVirtualMachines_ApplyArtifacts(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_ApplyArtifacts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_ApplyArtifacts"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachinesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginApplyArtifacts(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		armdevtestlabs.ApplyArtifactsRequest{
			Artifacts: []*armdevtestlabs.ArtifactInstallProperties{
				{
					ArtifactID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/artifactSources/public repo/artifacts/windows-restart"),
				}},
		},
		&armdevtestlabs.VirtualMachinesClientBeginApplyArtifactsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_ApplyArtifacts.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_ApplyArtifacts.json: %v", err)
	}
}

func TestVirtualMachines_Claim(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Claim.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_Claim"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachinesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginClaim(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		&armdevtestlabs.VirtualMachinesClientBeginClaimOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Claim.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Claim.json: %v", err)
	}
}

func TestVirtualMachines_DetachDataDisk(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_DetachDataDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_DetachDataDisk"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachinesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginDetachDataDisk(ctx,
		"resourceGroupName",
		"{labName}",
		"{virtualMachineName}",
		armdevtestlabs.DetachDataDiskProperties{
			ExistingLabDiskID: to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/{virtualMachineName}"),
		},
		&armdevtestlabs.VirtualMachinesClientBeginDetachDataDiskOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_DetachDataDisk.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_DetachDataDisk.json: %v", err)
	}
}

func TestVirtualMachines_GetRdpFileContents(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_GetRdpFileContents.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_GetRdpFileContents"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachinesClient("{subscriptionId}", cred, &options)
	res, err := client.GetRdpFileContents(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_GetRdpFileContents.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.RdpConnection{
			Contents: to.Ptr("full address:s:10.0.0.4\r\nprompt for credentials:i:1\r\nusername:s:{vmName}\\{userName}\r\n"),
		}
		if !reflect.DeepEqual(exampleRes, res.RdpConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RdpConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_GetRdpFileContents.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_ListApplicableSchedules(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_ListApplicableSchedules.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_ListApplicableSchedules"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachinesClient("{subscriptionId}", cred, &options)
	res, err := client.ListApplicableSchedules(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_ListApplicableSchedules.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.ApplicableSchedule{
			Properties: &armdevtestlabs.ApplicableScheduleProperties{
				LabVMsShutdown: &armdevtestlabs.Schedule{
					Name:     to.Ptr("LabVmsShutdown"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/schedules"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/schedules/myAutoShutdownSchedule"),
					Location: to.Ptr("{location}"),
					Properties: &armdevtestlabs.ScheduleProperties{
						CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-29T21:48:14.1369355+00:00"); return t }()),
						DailyRecurrence: &armdevtestlabs.DayDetails{
							Time: to.Ptr("1900"),
						},
						HourlyRecurrence: &armdevtestlabs.HourDetails{
							Minute: to.Ptr[int32](30),
						},
						NotificationSettings: &armdevtestlabs.NotificationSettings{
							EmailRecipient:     to.Ptr("{email}"),
							NotificationLocale: to.Ptr("EN"),
							Status:             to.Ptr(armdevtestlabs.EnableStatusEnabled),
							TimeInMinutes:      to.Ptr[int32](30),
							WebhookURL:         to.Ptr("{webhookUrl}"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
						Status:            to.Ptr(armdevtestlabs.EnableStatusEnabled),
						TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{vmName}"),
						TaskType:          to.Ptr("LabVmsShutdownTask"),
						TimeZoneID:        to.Ptr("Pacific Standard Time"),
						UniqueIdentifier:  to.Ptr("4acf0408-1c10-49cb-96b7-28ce655c8320"),
						WeeklyRecurrence: &armdevtestlabs.WeekDetails{
							Time: to.Ptr("1700"),
							Weekdays: []*string{
								to.Ptr("Friday"),
								to.Ptr("Saturday"),
								to.Ptr("Sunday")},
						},
					},
				},
				LabVMsStartup: &armdevtestlabs.Schedule{
					Name:     to.Ptr("LabVmAutoStart"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/schedules"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/schedules/myAutoStartSchedule"),
					Location: to.Ptr("{location}"),
					Properties: &armdevtestlabs.ScheduleProperties{
						CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-29T21:46:37.0473976+00:00"); return t }()),
						DailyRecurrence: &armdevtestlabs.DayDetails{
							Time: to.Ptr("0900"),
						},
						HourlyRecurrence: &armdevtestlabs.HourDetails{
							Minute: to.Ptr[int32](30),
						},
						NotificationSettings: &armdevtestlabs.NotificationSettings{
							EmailRecipient:     to.Ptr("{email}"),
							NotificationLocale: to.Ptr("EN"),
							Status:             to.Ptr(armdevtestlabs.EnableStatusEnabled),
							TimeInMinutes:      to.Ptr[int32](30),
							WebhookURL:         to.Ptr("{webhookUrl}"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
						Status:            to.Ptr(armdevtestlabs.EnableStatusEnabled),
						TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{vmName}"),
						TaskType:          to.Ptr("LabVmsStartupTask"),
						TimeZoneID:        to.Ptr("Pacific Standard Time"),
						WeeklyRecurrence: &armdevtestlabs.WeekDetails{
							Time: to.Ptr("1000"),
							Weekdays: []*string{
								to.Ptr("Friday"),
								to.Ptr("Saturday"),
								to.Ptr("Sunday")},
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ApplicableSchedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ApplicableSchedule)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_ListApplicableSchedules.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_Redeploy(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Redeploy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_Redeploy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachinesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginRedeploy(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		&armdevtestlabs.VirtualMachinesClientBeginRedeployOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Redeploy.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Redeploy.json: %v", err)
	}
}

func TestVirtualMachines_Resize(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Resize.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_Resize"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachinesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginResize(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		armdevtestlabs.ResizeLabVirtualMachineProperties{
			Size: to.Ptr("Standard_A4_v2"),
		},
		&armdevtestlabs.VirtualMachinesClientBeginResizeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Resize.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Resize.json: %v", err)
	}
}

func TestVirtualMachines_Restart(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Restart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_Restart"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachinesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginRestart(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		&armdevtestlabs.VirtualMachinesClientBeginRestartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Restart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Restart.json: %v", err)
	}
}

func TestVirtualMachines_Start(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Start.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_Start"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachinesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginStart(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		&armdevtestlabs.VirtualMachinesClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Start.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Start.json: %v", err)
	}
}

func TestVirtualMachines_Stop(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Stop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_Stop"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachinesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginStop(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		&armdevtestlabs.VirtualMachinesClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Stop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_Stop.json: %v", err)
	}
}

func TestVirtualMachines_TransferDisks(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_TransferDisks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_TransferDisks"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachinesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginTransferDisks(ctx,
		"resourceGroupName",
		"{labName}",
		"{virtualmachineName}",
		&armdevtestlabs.VirtualMachinesClientBeginTransferDisksOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_TransferDisks.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_TransferDisks.json: %v", err)
	}
}

func TestVirtualMachines_UnClaim(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_UnClaim.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_UnClaim"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachinesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginUnClaim(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		&armdevtestlabs.VirtualMachinesClientBeginUnClaimOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_UnClaim.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_UnClaim.json: %v", err)
	}
}

func TestVirtualMachineSchedules_List(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachineSchedules_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineSchedules_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachineSchedulesClient("{subscriptionId}", cred, &options)
	pager := client.List("resourceGroupName",
		"{labName}",
		"{vmName}",
		&armdevtestlabs.VirtualMachineSchedulesClientListOptions{Expand: nil,
			Filter:  nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachineSchedules_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.ScheduleList{
			Value: []*armdevtestlabs.Schedule{
				{
					Name:     to.Ptr("LabVmsShutdown"),
					Type:     to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/schedules"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualMachines/{vmName}/schedules/mySchedule"),
					Location: to.Ptr("{location}"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.ScheduleProperties{
						CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T18:40:48.1739018-07:00"); return t }()),
						DailyRecurrence: &armdevtestlabs.DayDetails{
							Time: to.Ptr("1900"),
						},
						HourlyRecurrence: &armdevtestlabs.HourDetails{
							Minute: to.Ptr[int32](30),
						},
						NotificationSettings: &armdevtestlabs.NotificationSettings{
							EmailRecipient:     to.Ptr("{email}"),
							NotificationLocale: to.Ptr("EN"),
							Status:             to.Ptr(armdevtestlabs.EnableStatusEnabled),
							TimeInMinutes:      to.Ptr[int32](30),
							WebhookURL:         to.Ptr("{webhookUrl}"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
						Status:            to.Ptr(armdevtestlabs.EnableStatusEnabled),
						TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/labName}/virtualMachines/{vmName}"),
						TaskType:          to.Ptr("LabVmsShutdownTask"),
						TimeZoneID:        to.Ptr("Pacific Standard Time"),
						WeeklyRecurrence: &armdevtestlabs.WeekDetails{
							Time: to.Ptr("1700"),
							Weekdays: []*string{
								to.Ptr("Friday"),
								to.Ptr("Saturday"),
								to.Ptr("Sunday")},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ScheduleList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ScheduleList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachineSchedules_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineSchedules_Get(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachineSchedules_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineSchedules_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachineSchedulesClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		"LabVmsShutdown",
		&armdevtestlabs.VirtualMachineSchedulesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachineSchedules_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Schedule{
			Name:     to.Ptr("LabVmsShutdown"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/schedules"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualMachines/{vmName}/schedules/mySchedule"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ScheduleProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T18:40:48.1739018-07:00"); return t }()),
				DailyRecurrence: &armdevtestlabs.DayDetails{
					Time: to.Ptr("1900"),
				},
				HourlyRecurrence: &armdevtestlabs.HourDetails{
					Minute: to.Ptr[int32](30),
				},
				NotificationSettings: &armdevtestlabs.NotificationSettings{
					EmailRecipient:     to.Ptr("{email}"),
					NotificationLocale: to.Ptr("EN"),
					Status:             to.Ptr(armdevtestlabs.EnableStatusEnabled),
					TimeInMinutes:      to.Ptr[int32](30),
					WebhookURL:         to.Ptr("{webhookUrl}"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				Status:            to.Ptr(armdevtestlabs.EnableStatusEnabled),
				TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualMachines/{vmName}"),
				TaskType:          to.Ptr("LabVmsShutdownTask"),
				TimeZoneID:        to.Ptr("Pacific Standard Time"),
				WeeklyRecurrence: &armdevtestlabs.WeekDetails{
					Time: to.Ptr("1700"),
					Weekdays: []*string{
						to.Ptr("Friday"),
						to.Ptr("Saturday"),
						to.Ptr("Sunday")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Schedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Schedule)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachineSchedules_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineSchedules_CreateOrUpdate(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachineSchedules_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineSchedules_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachineSchedulesClient("{subscriptionId}", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		"LabVmsShutdown",
		armdevtestlabs.Schedule{
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ScheduleProperties{
				DailyRecurrence: &armdevtestlabs.DayDetails{
					Time: to.Ptr("1900"),
				},
				HourlyRecurrence: &armdevtestlabs.HourDetails{
					Minute: to.Ptr[int32](30),
				},
				NotificationSettings: &armdevtestlabs.NotificationSettings{
					EmailRecipient:     to.Ptr("{email}"),
					NotificationLocale: to.Ptr("EN"),
					Status:             to.Ptr(armdevtestlabs.EnableStatusEnabled),
					TimeInMinutes:      to.Ptr[int32](30),
					WebhookURL:         to.Ptr("{webhookUrl}"),
				},
				Status:           to.Ptr(armdevtestlabs.EnableStatusEnabled),
				TargetResourceID: to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualMachines/{vmName}"),
				TaskType:         to.Ptr("LabVmsShutdownTask"),
				TimeZoneID:       to.Ptr("Pacific Standard Time"),
				WeeklyRecurrence: &armdevtestlabs.WeekDetails{
					Time: to.Ptr("1700"),
					Weekdays: []*string{
						to.Ptr("Friday"),
						to.Ptr("Saturday"),
						to.Ptr("Sunday")},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachineSchedules_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Schedule{
			Name:     to.Ptr("LabVmsShutdown"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/schedules"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualMachines/{vmName}/schedules/LabVmsShutdown"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ScheduleProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T18:40:48.1739018-07:00"); return t }()),
				DailyRecurrence: &armdevtestlabs.DayDetails{
					Time: to.Ptr("1900"),
				},
				HourlyRecurrence: &armdevtestlabs.HourDetails{
					Minute: to.Ptr[int32](30),
				},
				NotificationSettings: &armdevtestlabs.NotificationSettings{
					EmailRecipient:     to.Ptr("{email}"),
					NotificationLocale: to.Ptr("EN"),
					Status:             to.Ptr(armdevtestlabs.EnableStatusEnabled),
					TimeInMinutes:      to.Ptr[int32](30),
					WebhookURL:         to.Ptr("{webhookUrl}"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				Status:            to.Ptr(armdevtestlabs.EnableStatusEnabled),
				TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualMachines/{vmName}"),
				TaskType:          to.Ptr("LabVmsShutdownTask"),
				TimeZoneID:        to.Ptr("Pacific Standard Time"),
				WeeklyRecurrence: &armdevtestlabs.WeekDetails{
					Time: to.Ptr("1700"),
					Weekdays: []*string{
						to.Ptr("Friday"),
						to.Ptr("Saturday"),
						to.Ptr("Sunday")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Schedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Schedule)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachineSchedules_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineSchedules_Delete(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachineSchedules_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineSchedules_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachineSchedulesClient("{subscriptionId}", cred, &options)
	_, err := client.Delete(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		"LabVmsShutdown",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachineSchedules_Delete.json: %v", err)
	}
}

func TestVirtualMachineSchedules_Update(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachineSchedules_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineSchedules_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachineSchedulesClient("{subscriptionId}", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		"LabVmsShutdown",
		armdevtestlabs.ScheduleFragment{
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachineSchedules_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.Schedule{
			Name:     to.Ptr("LabVmsShutdown"),
			Type:     to.Ptr("Microsoft.DevTestLab/labs/virtualMachines/schedules"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualMachines/{vmName}/schedules/mySchedule"),
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.ScheduleProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T18:40:48.1739018-07:00"); return t }()),
				DailyRecurrence: &armdevtestlabs.DayDetails{
					Time: to.Ptr("1900"),
				},
				HourlyRecurrence: &armdevtestlabs.HourDetails{
					Minute: to.Ptr[int32](30),
				},
				NotificationSettings: &armdevtestlabs.NotificationSettings{
					EmailRecipient:     to.Ptr("{email}"),
					NotificationLocale: to.Ptr("EN"),
					Status:             to.Ptr(armdevtestlabs.EnableStatusEnabled),
					TimeInMinutes:      to.Ptr[int32](30),
					WebhookURL:         to.Ptr("{webhookUrl}"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				Status:            to.Ptr(armdevtestlabs.EnableStatusEnabled),
				TargetResourceID:  to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualMachines/{vmName}"),
				TaskType:          to.Ptr("LabVmsShutdownTask"),
				TimeZoneID:        to.Ptr("Pacific Standard Time"),
				WeeklyRecurrence: &armdevtestlabs.WeekDetails{
					Time: to.Ptr("1700"),
					Weekdays: []*string{
						to.Ptr("Friday"),
						to.Ptr("Saturday"),
						to.Ptr("Sunday")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Schedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Schedule)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachineSchedules_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineSchedules_Execute(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachineSchedules_Execute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineSchedules_Execute"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualMachineSchedulesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginExecute(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		"LabVmsShutdown",
		&armdevtestlabs.VirtualMachineSchedulesClientBeginExecuteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachineSchedules_Execute.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachineSchedules_Execute.json: %v", err)
	}
}

func TestVirtualNetworks_List(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualNetworks_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualNetworks_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualNetworksClient("{subscriptionId}", cred, &options)
	pager := client.List("resourceGroupName",
		"{labName}",
		&armdevtestlabs.VirtualNetworksClientListOptions{Expand: nil,
			Filter:  nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualNetworks_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevtestlabs.VirtualNetworkList{
			Value: []*armdevtestlabs.VirtualNetwork{
				{
					Name: to.Ptr("{virtualNetworkName}"),
					Type: to.Ptr("Microsoft.DevTestLab/labs/virtualNetworks"),
					ID:   to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualnetworks/{virtualNetworkName}"),
					Tags: map[string]*string{
						"tagName1": to.Ptr("tagValue1"),
					},
					Properties: &armdevtestlabs.VirtualNetworkProperties{
						AllowedSubnets: []*armdevtestlabs.Subnet{
							{
								AllowPublicIP: to.Ptr(armdevtestlabs.UsagePermissionTypeAllow),
								LabSubnetName: to.Ptr("{virtualNetworkName}Subnet"),
								ResourceID:    to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{virtualNetworkName}Subnet"),
							}},
						CreatedDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T13:01:44.6005134-07:00"); return t }()),
						ExternalProviderResourceID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}"),
						ProvisioningState:          to.Ptr("Succeeded"),
						SubnetOverrides: []*armdevtestlabs.SubnetOverride{
							{
								LabSubnetName: to.Ptr("{virtualNetworkName}Subnet"),
								ResourceID:    to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{virtualNetworkName}Subnet"),
								SharedPublicIPAddressConfiguration: &armdevtestlabs.SubnetSharedPublicIPAddressConfiguration{
									AllowedPorts: []*armdevtestlabs.Port{
										{
											BackendPort:       to.Ptr[int32](3389),
											TransportProtocol: to.Ptr(armdevtestlabs.TransportProtocolTCP),
										},
										{
											BackendPort:       to.Ptr[int32](22),
											TransportProtocol: to.Ptr(armdevtestlabs.TransportProtocolTCP),
										}},
								},
								UseInVMCreationPermission:    to.Ptr(armdevtestlabs.UsagePermissionTypeAllow),
								UsePublicIPAddressPermission: to.Ptr(armdevtestlabs.UsagePermissionTypeAllow),
							}},
						UniqueIdentifier: to.Ptr("{uniqueIdentifier}"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualNetworkList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualNetworkList)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualNetworks_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworks_Get(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualNetworks_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualNetworks_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualNetworksClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{virtualNetworkName}",
		&armdevtestlabs.VirtualNetworksClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualNetworks_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.VirtualNetwork{
			Name: to.Ptr("{virtualNetworkName}"),
			Type: to.Ptr("Microsoft.DevTestLab/labs/virtualNetworks"),
			ID:   to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualnetworks/{virtualNetworkName}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.VirtualNetworkProperties{
				AllowedSubnets: []*armdevtestlabs.Subnet{
					{
						AllowPublicIP: to.Ptr(armdevtestlabs.UsagePermissionTypeAllow),
						LabSubnetName: to.Ptr("{virtualNetworkName}Subnet"),
						ResourceID:    to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{virtualNetworkName}Subnet"),
					}},
				CreatedDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T13:01:44.6005134-07:00"); return t }()),
				ExternalProviderResourceID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}"),
				ProvisioningState:          to.Ptr("Succeeded"),
				SubnetOverrides: []*armdevtestlabs.SubnetOverride{
					{
						LabSubnetName: to.Ptr("{virtualNetworkName}Subnet"),
						ResourceID:    to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{virtualNetworkName}Subnet"),
						SharedPublicIPAddressConfiguration: &armdevtestlabs.SubnetSharedPublicIPAddressConfiguration{
							AllowedPorts: []*armdevtestlabs.Port{
								{
									BackendPort:       to.Ptr[int32](3389),
									TransportProtocol: to.Ptr(armdevtestlabs.TransportProtocolTCP),
								},
								{
									BackendPort:       to.Ptr[int32](22),
									TransportProtocol: to.Ptr(armdevtestlabs.TransportProtocolTCP),
								}},
						},
						UseInVMCreationPermission:    to.Ptr(armdevtestlabs.UsagePermissionTypeAllow),
						UsePublicIPAddressPermission: to.Ptr(armdevtestlabs.UsagePermissionTypeAllow),
					}},
				UniqueIdentifier: to.Ptr("{uniqueIdentifier}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetwork) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetwork)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualNetworks_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworks_CreateOrUpdate(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualNetworks_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualNetworks_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualNetworksClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{virtualNetworkName}",
		armdevtestlabs.VirtualNetwork{
			Location: to.Ptr("{location}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
		},
		&armdevtestlabs.VirtualNetworksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualNetworks_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualNetworks_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.VirtualNetwork{
			Name: to.Ptr("{virtualNetworkName}"),
			Type: to.Ptr("Microsoft.DevTestLab/labs/virtualNetworks"),
			ID:   to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualnetworks/{virtualNetworkName}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.VirtualNetworkProperties{
				CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T13:01:44.6005134-07:00"); return t }()),
				ProvisioningState: to.Ptr("Succeeded"),
				UniqueIdentifier:  to.Ptr("{uniqueIdentifier}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetwork) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetwork)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualNetworks_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworks_Delete(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualNetworks_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualNetworks_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualNetworksClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroupName",
		"{labName}",
		"{virtualNetworkName}",
		&armdevtestlabs.VirtualNetworksClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualNetworks_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualNetworks_Delete.json: %v", err)
	}
}

func TestVirtualNetworks_Update(t *testing.T) {
	// From example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualNetworks_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualNetworks_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevtestlabs.NewVirtualNetworksClient("{subscriptionId}", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"{virtualNetworkName}",
		armdevtestlabs.VirtualNetworkFragment{
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualNetworks_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevtestlabs.VirtualNetwork{
			Name: to.Ptr("{virtualNetworkName}"),
			Type: to.Ptr("Microsoft.DevTestLab/labs/virtualNetworks"),
			ID:   to.Ptr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualnetworks/{virtualNetworkName}"),
			Tags: map[string]*string{
				"tagName1": to.Ptr("tagValue1"),
			},
			Properties: &armdevtestlabs.VirtualNetworkProperties{
				CreatedDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-01T13:01:44.6005134-07:00"); return t }()),
				ExternalProviderResourceID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}"),
				ProvisioningState:          to.Ptr("Succeeded"),
				SubnetOverrides: []*armdevtestlabs.SubnetOverride{
					{
						LabSubnetName: to.Ptr("{virtualNetworkName}Subnet"),
						ResourceID:    to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{virtualNetworkName}Subnet"),
						SharedPublicIPAddressConfiguration: &armdevtestlabs.SubnetSharedPublicIPAddressConfiguration{
							AllowedPorts: []*armdevtestlabs.Port{
								{
									BackendPort:       to.Ptr[int32](3389),
									TransportProtocol: to.Ptr(armdevtestlabs.TransportProtocolTCP),
								},
								{
									BackendPort:       to.Ptr[int32](22),
									TransportProtocol: to.Ptr(armdevtestlabs.TransportProtocolTCP),
								}},
						},
						UseInVMCreationPermission:    to.Ptr(armdevtestlabs.UsagePermissionTypeAllow),
						UsePublicIPAddressPermission: to.Ptr(armdevtestlabs.UsagePermissionTypeAllow),
					}},
				UniqueIdentifier: to.Ptr("{uniqueIdentifier}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetwork) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetwork)
			t.Fatalf("Mock response is not equal to example response for example specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualNetworks_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
