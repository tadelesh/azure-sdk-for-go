//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdevtestlabs

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestProviderOperations_List(t *testing.T) {
	// From example ProviderOperations_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProviderOperationsClient(con)
	pager := client.List(&ProviderOperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestLabs_ListBySubscription(t *testing.T) {
	// From example Labs_ListBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabsClient(con,
		"{subscriptionId}")
	pager := client.ListBySubscription(&LabsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Lab.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Lab.ID should not be nil!")
			}
		}
	}
}

func TestLabs_ListByResourceGroup(t *testing.T) {
	// From example Labs_ListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabsClient(con,
		"{subscriptionId}")
	pager := client.ListByResourceGroup("resourceGroupName",
		&LabsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Lab.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Lab.ID should not be nil!")
			}
		}
	}
}

func TestLabs_Get(t *testing.T) {
	// From example Labs_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabsClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		&LabsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Lab.ID == nil {
		t.Fatal("Lab.ID should not be nil!")
	}
}

func TestLabs_CreateOrUpdate(t *testing.T) {
	// From example Labs_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabsClient(con,
		"{subscriptionId}")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		Lab{
			Resource: Resource{
				Location: to.StringPtr("{location}"),
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
			Properties: &LabProperties{
				LabStorageType: StorageTypeStandard.ToPtr(),
			},
		},
		&LabsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Lab.ID == nil {
		t.Fatal("Lab.ID should not be nil!")
	}
}

func TestLabs_Delete(t *testing.T) {
	// From example Labs_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabsClient(con,
		"{subscriptionId}")
	poller, err := client.BeginDelete(ctx,
		"resourceGroupName",
		"{labName}",
		&LabsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLabs_Update(t *testing.T) {
	// From example Labs_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabsClient(con,
		"{subscriptionId}")
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		LabFragment{},
		&LabsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Lab.ID == nil {
		t.Fatal("Lab.ID should not be nil!")
	}
}

func TestLabs_ClaimAnyVm(t *testing.T) {
	// From example Labs_ClaimAnyVm
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabsClient(con,
		"{subscriptionId}")
	poller, err := client.BeginClaimAnyVM(ctx,
		"resourceGroupName",
		"{labName}",
		&LabsBeginClaimAnyVMOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLabs_CreateEnvironment(t *testing.T) {
	// From example Labs_CreateEnvironment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabsClient(con,
		"{subscriptionId}")
	poller, err := client.BeginCreateEnvironment(ctx,
		"resourceGroupName",
		"{labName}",
		LabVirtualMachineCreationParameter{
			Name:     to.StringPtr("{vmName}"),
			Location: to.StringPtr("{location}"),
			Properties: &LabVirtualMachineCreationParameterProperties{
				AllowClaim:              to.BoolPtr(true),
				DisallowPublicIPAddress: to.BoolPtr(true),
				GalleryImageReference: &GalleryImageReference{
					Offer:     to.StringPtr("UbuntuServer"),
					OSType:    to.StringPtr("Linux"),
					Publisher: to.StringPtr("Canonical"),
					SKU:       to.StringPtr("16.04-LTS"),
					Version:   to.StringPtr("Latest"),
				},
				LabSubnetName:       to.StringPtr("{virtualnetwork-subnet-name}"),
				LabVirtualNetworkID: to.StringPtr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualnetworks/{virtualNetworkName}"),
				Password:            to.StringPtr("{userPassword}"),
				Size:                to.StringPtr("Standard_A2_v2"),
				StorageType:         to.StringPtr("Standard"),
				UserName:            to.StringPtr("{userName}"),
			},
			Tags: map[string]*string{
				"tagName1": to.StringPtr("tagValue1"),
			},
		},
		&LabsBeginCreateEnvironmentOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLabs_ExportResourceUsage(t *testing.T) {
	// From example Labs_ExportResourceUsage
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabsClient(con,
		"{subscriptionId}")
	poller, err := client.BeginExportResourceUsage(ctx,
		"resourceGroupName",
		"{labName}",
		ExportResourceUsageParameters{
			BlobStorageAbsoluteSasURI: to.StringPtr("https://invalid.blob.core.windows.net/export.blob?sv=2015-07-08&sig={sas}&sp=rcw"),
			UsageStartDate:            to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T00:00:00Z"); return t }()),
		},
		&LabsBeginExportResourceUsageOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLabs_GenerateUploadUri(t *testing.T) {
	// From example Labs_GenerateUploadUri
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabsClient(con,
		"{subscriptionId}")
	_, err := client.GenerateUploadURI(ctx,
		"resourceGroupName",
		"{labName}",
		GenerateUploadURIParameter{
			BlobName: to.StringPtr("{blob-name}"),
		},
		&LabsGenerateUploadURIOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestLabs_ImportVirtualMachine(t *testing.T) {
	// From example Labs_ImportVirtualMachine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabsClient(con,
		"{subscriptionId}")
	poller, err := client.BeginImportVirtualMachine(ctx,
		"resourceGroupName",
		"{labName}",
		ImportLabVirtualMachineRequest{
			DestinationVirtualMachineName:  to.StringPtr("{vmName}"),
			SourceVirtualMachineResourceID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{otherResourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
		},
		&LabsBeginImportVirtualMachineOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLabs_ListVhds(t *testing.T) {
	// From example Labs_ListVhds
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLabsClient(con,
		"{subscriptionId}")
	pager := client.ListVhds("resourceGroupName",
		"{labName}",
		&LabsListVhdsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LabVhd.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LabVhd.ID should not be nil!")
			}
		}
	}
}

func TestOperations_Get(t *testing.T) {
	// From example Operations_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con,
		"{subscriptionId}")
	_, err := client.Get(ctx,
		"{locationName}",
		"{operationName}",
		&OperationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGlobalSchedules_ListBySubscription(t *testing.T) {
	// From example GlobalSchedules_ListBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGlobalSchedulesClient(con,
		"{subscriptionId}")
	pager := client.ListBySubscription(&GlobalSchedulesListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Schedule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Schedule.ID should not be nil!")
			}
		}
	}
}

func TestGlobalSchedules_ListByResourceGroup(t *testing.T) {
	// From example GlobalSchedules_ListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGlobalSchedulesClient(con,
		"{subscriptionId}")
	pager := client.ListByResourceGroup("resourceGroupName",
		&GlobalSchedulesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Schedule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Schedule.ID should not be nil!")
			}
		}
	}
}

func TestGlobalSchedules_Get(t *testing.T) {
	// From example GlobalSchedules_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGlobalSchedulesClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"labvmautostart",
		&GlobalSchedulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Schedule.ID == nil {
		t.Fatal("Schedule.ID should not be nil!")
	}
}

func TestGlobalSchedules_CreateOrUpdate(t *testing.T) {
	// From example GlobalSchedules_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGlobalSchedulesClient(con,
		"{subscriptionId}")
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroupName",
		"labvmautostart",
		Schedule{
			Properties: &ScheduleProperties{
				Status:     EnableStatusEnabled.ToPtr(),
				TaskType:   to.StringPtr("LabVmsStartupTask"),
				TimeZoneID: to.StringPtr("Hawaiian Standard Time"),
				WeeklyRecurrence: &WeekDetails{
					Time: to.StringPtr("0700"),
					Weekdays: []*string{
						to.StringPtr("Monday"),
						to.StringPtr("Tuesday"),
						to.StringPtr("Wednesday"),
						to.StringPtr("Thursday"),
						to.StringPtr("Friday"),
						to.StringPtr("Saturday")},
				},
			},
		},
		&GlobalSchedulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Schedule.ID == nil {
		t.Fatal("Schedule.ID should not be nil!")
	}
}

func TestGlobalSchedules_Delete(t *testing.T) {
	// From example GlobalSchedules_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGlobalSchedulesClient(con,
		"{subscriptionId}")
	_, err := client.Delete(ctx,
		"resourceGroupName",
		"labvmautostart",
		&GlobalSchedulesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGlobalSchedules_Update(t *testing.T) {
	// From example GlobalSchedules_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGlobalSchedulesClient(con,
		"{subscriptionId}")
	res, err := client.Update(ctx,
		"resourceGroupName",
		"labvmautostart",
		ScheduleFragment{
			UpdateResource: UpdateResource{
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
		},
		&GlobalSchedulesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Schedule.ID == nil {
		t.Fatal("Schedule.ID should not be nil!")
	}
}

func TestGlobalSchedules_Execute(t *testing.T) {
	// From example GlobalSchedules_Execute
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGlobalSchedulesClient(con,
		"{subscriptionId}")
	poller, err := client.BeginExecute(ctx,
		"resourceGroupName",
		"labvmautostart",
		&GlobalSchedulesBeginExecuteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestGlobalSchedules_Retarget(t *testing.T) {
	// From example GlobalSchedules_Retarget
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGlobalSchedulesClient(con,
		"{subscriptionId}")
	poller, err := client.BeginRetarget(ctx,
		"resourceGroupName",
		"{scheduleName}",
		RetargetScheduleProperties{
			CurrentResourceID: to.StringPtr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{targetLab}"),
			TargetResourceID:  to.StringPtr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{currentLab}"),
		},
		&GlobalSchedulesBeginRetargetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestArtifactSources_List(t *testing.T) {
	// From example ArtifactSources_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewArtifactSourcesClient(con,
		"{subscriptionId}")
	pager := client.List("resourceGroupName",
		"{labName}",
		&ArtifactSourcesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ArtifactSource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ArtifactSource.ID should not be nil!")
			}
		}
	}
}

func TestArtifactSources_Get(t *testing.T) {
	// From example ArtifactSources_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewArtifactSourcesClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{artifactSourceName}",
		&ArtifactSourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ArtifactSource.ID == nil {
		t.Fatal("ArtifactSource.ID should not be nil!")
	}
}

func TestArtifactSources_CreateOrUpdate(t *testing.T) {
	// From example ArtifactSources_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewArtifactSourcesClient(con,
		"{subscriptionId}")
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{artifactSourceName}",
		ArtifactSource{
			Resource: Resource{
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
			Properties: &ArtifactSourceProperties{
				ArmTemplateFolderPath: to.StringPtr("{armTemplateFolderPath}"),
				BranchRef:             to.StringPtr("{branchRef}"),
				DisplayName:           to.StringPtr("{displayName}"),
				FolderPath:            to.StringPtr("{folderPath}"),
				SecurityToken:         to.StringPtr("{securityToken}"),
				SourceType:            SourceControlTypeVsoGit.ToPtr(),
				Status:                EnableStatusEnabled.ToPtr(),
				URI:                   to.StringPtr("{artifactSourceUri}"),
			},
		},
		&ArtifactSourcesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ArtifactSource.ID == nil {
		t.Fatal("ArtifactSource.ID should not be nil!")
	}
}

func TestArtifactSources_Delete(t *testing.T) {
	// From example ArtifactSources_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewArtifactSourcesClient(con,
		"{subscriptionId}")
	_, err := client.Delete(ctx,
		"resourceGroupName",
		"{labName}",
		"{artifactSourceName}",
		&ArtifactSourcesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestArtifactSources_Update(t *testing.T) {
	// From example ArtifactSources_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewArtifactSourcesClient(con,
		"{subscriptionId}")
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"{artifactSourceName}",
		ArtifactSourceFragment{
			UpdateResource: UpdateResource{
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
		},
		&ArtifactSourcesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ArtifactSource.ID == nil {
		t.Fatal("ArtifactSource.ID should not be nil!")
	}
}

func TestArmTemplates_List(t *testing.T) {
	// From example ArmTemplates_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewArmTemplatesClient(con,
		"{subscriptionId}")
	pager := client.List("resourceGroupName",
		"{labName}",
		"{artifactSourceName}",
		&ArmTemplatesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ArmTemplate.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ArmTemplate.ID should not be nil!")
			}
		}
	}
}

func TestArmTemplates_Get(t *testing.T) {
	// From example ArmTemplates_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewArmTemplatesClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{artifactSourceName}",
		"{armTemplateName}",
		&ArmTemplatesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ArmTemplate.ID == nil {
		t.Fatal("ArmTemplate.ID should not be nil!")
	}
}

func TestArtifacts_List(t *testing.T) {
	// From example Artifacts_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewArtifactsClient(con,
		"{subscriptionId}")
	pager := client.List("resourceGroupName",
		"{labName}",
		"{artifactSourceName}",
		&ArtifactsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Artifact.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Artifact.ID should not be nil!")
			}
		}
	}
}

func TestArtifacts_Get(t *testing.T) {
	// From example Artifacts_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewArtifactsClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{artifactSourceName}",
		"{artifactName}",
		&ArtifactsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Artifact.ID == nil {
		t.Fatal("Artifact.ID should not be nil!")
	}
}

func TestArtifacts_GenerateArmTemplate(t *testing.T) {
	// From example Artifacts_GenerateArmTemplate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewArtifactsClient(con,
		"{subscriptionId}")
	_, err := client.GenerateArmTemplate(ctx,
		"resourceGroupName",
		"{labName}",
		"{artifactSourceName}",
		"{artifactName}",
		GenerateArmTemplateRequest{
			FileUploadOptions:  FileUploadOptionsNone.ToPtr(),
			Location:           to.StringPtr("{location}"),
			VirtualMachineName: to.StringPtr("{vmName}"),
		},
		&ArtifactsGenerateArmTemplateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCosts_Get(t *testing.T) {
	// From example Costs_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCostsClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"targetCost",
		&CostsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LabCost.ID == nil {
		t.Fatal("LabCost.ID should not be nil!")
	}
}

func TestCosts_CreateOrUpdate(t *testing.T) {
	// From example Costs_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCostsClient(con,
		"{subscriptionId}")
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"targetCost",
		LabCost{
			Properties: &LabCostProperties{
				CurrencyCode:  to.StringPtr("USD"),
				EndDateTime:   to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T23:59:59Z"); return t }()),
				StartDateTime: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T00:00:00Z"); return t }()),
				TargetCost: &TargetCostProperties{
					CostThresholds: []*CostThresholdProperties{
						{
							DisplayOnChart: CostThresholdStatusDisabled.ToPtr(),
							PercentageThreshold: &PercentageCostThresholdProperties{
								ThresholdValue: to.Float64Ptr(25),
							},
							SendNotificationWhenExceeded: CostThresholdStatusDisabled.ToPtr(),
							ThresholdID:                  to.StringPtr("00000000-0000-0000-0000-000000000001"),
						},
						{
							DisplayOnChart: CostThresholdStatusEnabled.ToPtr(),
							PercentageThreshold: &PercentageCostThresholdProperties{
								ThresholdValue: to.Float64Ptr(50),
							},
							SendNotificationWhenExceeded: CostThresholdStatusEnabled.ToPtr(),
							ThresholdID:                  to.StringPtr("00000000-0000-0000-0000-000000000002"),
						},
						{
							DisplayOnChart: CostThresholdStatusDisabled.ToPtr(),
							PercentageThreshold: &PercentageCostThresholdProperties{
								ThresholdValue: to.Float64Ptr(75),
							},
							SendNotificationWhenExceeded: CostThresholdStatusDisabled.ToPtr(),
							ThresholdID:                  to.StringPtr("00000000-0000-0000-0000-000000000003"),
						},
						{
							DisplayOnChart: CostThresholdStatusDisabled.ToPtr(),
							PercentageThreshold: &PercentageCostThresholdProperties{
								ThresholdValue: to.Float64Ptr(100),
							},
							SendNotificationWhenExceeded: CostThresholdStatusDisabled.ToPtr(),
							ThresholdID:                  to.StringPtr("00000000-0000-0000-0000-000000000004"),
						},
						{
							DisplayOnChart: CostThresholdStatusDisabled.ToPtr(),
							PercentageThreshold: &PercentageCostThresholdProperties{
								ThresholdValue: to.Float64Ptr(125),
							},
							SendNotificationWhenExceeded: CostThresholdStatusDisabled.ToPtr(),
							ThresholdID:                  to.StringPtr("00000000-0000-0000-0000-000000000005"),
						}},
					CycleEndDateTime:   to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T00:00:00.000Z"); return t }()),
					CycleStartDateTime: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T00:00:00.000Z"); return t }()),
					CycleType:          ReportingCycleTypeCalendarMonth.ToPtr(),
					Status:             TargetCostStatusEnabled.ToPtr(),
					Target:             to.Int32Ptr(100),
				},
			},
		},
		&CostsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LabCost.ID == nil {
		t.Fatal("LabCost.ID should not be nil!")
	}
}

func TestCustomImages_List(t *testing.T) {
	// From example CustomImages_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCustomImagesClient(con,
		"{subscriptionId}")
	pager := client.List("resourceGroupName",
		"{labName}",
		&CustomImagesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("CustomImage.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("CustomImage.ID should not be nil!")
			}
		}
	}
}

func TestCustomImages_Get(t *testing.T) {
	// From example CustomImages_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCustomImagesClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{customImageName}",
		&CustomImagesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CustomImage.ID == nil {
		t.Fatal("CustomImage.ID should not be nil!")
	}
}

func TestCustomImages_CreateOrUpdate(t *testing.T) {
	// From example CustomImages_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCustomImagesClient(con,
		"{subscriptionId}")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{customImageName}",
		CustomImage{
			Resource: Resource{
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
			Properties: &CustomImageProperties{
				Description: to.StringPtr("My Custom Image"),
				VM: &CustomImagePropertiesFromVM{
					LinuxOsInfo: &LinuxOsInfo{
						LinuxOsState: LinuxOsStateNonDeprovisioned.ToPtr(),
					},
					SourceVMID: to.StringPtr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/{vmName}"),
				},
			},
		},
		&CustomImagesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.CustomImage.ID == nil {
		t.Fatal("CustomImage.ID should not be nil!")
	}
}

func TestCustomImages_Delete(t *testing.T) {
	// From example CustomImages_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCustomImagesClient(con,
		"{subscriptionId}")
	poller, err := client.BeginDelete(ctx,
		"resourceGroupName",
		"{labName}",
		"{customImageName}",
		&CustomImagesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestCustomImages_Update(t *testing.T) {
	// From example CustomImages_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCustomImagesClient(con,
		"{subscriptionId}")
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"{customImageName}",
		CustomImageFragment{
			UpdateResource: UpdateResource{
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue2"),
				},
			},
		},
		&CustomImagesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CustomImage.ID == nil {
		t.Fatal("CustomImage.ID should not be nil!")
	}
}

func TestFormulas_List(t *testing.T) {
	// From example Formulas_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFormulasClient(con,
		"{subscriptionId}")
	pager := client.List("resourceGroupName",
		"{labName}",
		&FormulasListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Formula.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Formula.ID should not be nil!")
			}
		}
	}
}

func TestFormulas_Get(t *testing.T) {
	// From example Formulas_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFormulasClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{formulaName}",
		&FormulasGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Formula.ID == nil {
		t.Fatal("Formula.ID should not be nil!")
	}
}

func TestFormulas_CreateOrUpdate(t *testing.T) {
	// From example Formulas_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFormulasClient(con,
		"{subscriptionId}")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{formulaName}",
		Formula{
			Resource: Resource{
				Location: to.StringPtr("{location}"),
			},
			Properties: &FormulaProperties{
				Description: to.StringPtr("Formula using a Linux base"),
				FormulaContent: &LabVirtualMachineCreationParameter{
					Location: to.StringPtr("{location}"),
					Properties: &LabVirtualMachineCreationParameterProperties{
						AllowClaim: to.BoolPtr(false),
						Artifacts: []*ArtifactInstallProperties{
							{
								ArtifactID: to.StringPtr("/artifactsources/{artifactSourceName}/artifacts/linux-install-nodejs"),
								Parameters: []*ArtifactParameterProperties{},
							}},
						DisallowPublicIPAddress: to.BoolPtr(true),
						GalleryImageReference: &GalleryImageReference{
							Offer:     to.StringPtr("0001-com-ubuntu-server-groovy"),
							OSType:    to.StringPtr("Linux"),
							Publisher: to.StringPtr("canonical"),
							SKU:       to.StringPtr("20_10"),
							Version:   to.StringPtr("latest"),
						},
						IsAuthenticationWithSSHKey: to.BoolPtr(false),
						LabSubnetName:              to.StringPtr("Dtl{labName}Subnet"),
						LabVirtualNetworkID:        to.StringPtr("/virtualnetworks/dtl{labName}"),
						NetworkInterface: &NetworkInterfaceProperties{
							SharedPublicIPAddressConfiguration: &SharedPublicIPAddressConfiguration{
								InboundNatRules: []*InboundNatRule{
									{
										BackendPort:       to.Int32Ptr(22),
										TransportProtocol: TransportProtocolTCP.ToPtr(),
									}},
							},
						},
						Notes:       to.StringPtr("Ubuntu Server 20.10"),
						Size:        to.StringPtr("Standard_B1ms"),
						StorageType: to.StringPtr("Standard"),
						UserName:    to.StringPtr("user"),
					},
				},
			},
		},
		&FormulasBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Formula.ID == nil {
		t.Fatal("Formula.ID should not be nil!")
	}
}

func TestFormulas_Delete(t *testing.T) {
	// From example Formulas_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFormulasClient(con,
		"{subscriptionId}")
	_, err := client.Delete(ctx,
		"resourceGroupName",
		"{labName}",
		"{formulaName}",
		&FormulasDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestFormulas_Update(t *testing.T) {
	// From example Formulas_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFormulasClient(con,
		"{subscriptionId}")
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"{formulaName}",
		FormulaFragment{
			UpdateResource: UpdateResource{
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
		},
		&FormulasUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Formula.ID == nil {
		t.Fatal("Formula.ID should not be nil!")
	}
}

func TestGalleryImages_List(t *testing.T) {
	// From example GalleryImages_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGalleryImagesClient(con,
		"{subscriptionId}")
	pager := client.List("resourceGroupName",
		"{labName}",
		&GalleryImagesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("GalleryImage.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("GalleryImage.ID should not be nil!")
			}
		}
	}
}

func TestNotificationChannels_List(t *testing.T) {
	// From example NotificationChannels_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationChannelsClient(con,
		"{subscriptionId}")
	pager := client.List("resourceGroupName",
		"{labName}",
		&NotificationChannelsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NotificationChannel.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NotificationChannel.ID should not be nil!")
			}
		}
	}
}

func TestNotificationChannels_Get(t *testing.T) {
	// From example NotificationChannels_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationChannelsClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{notificationChannelName}",
		&NotificationChannelsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NotificationChannel.ID == nil {
		t.Fatal("NotificationChannel.ID should not be nil!")
	}
}

func TestNotificationChannels_CreateOrUpdate(t *testing.T) {
	// From example NotificationChannels_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationChannelsClient(con,
		"{subscriptionId}")
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{notificationChannelName}",
		NotificationChannel{
			Properties: &NotificationChannelProperties{
				Description:    to.StringPtr("Integration configured for auto-shutdown"),
				EmailRecipient: to.StringPtr("{email}"),
				Events: []*Event{
					{
						EventName: NotificationChannelEventTypeAutoShutdown.ToPtr(),
					}},
				NotificationLocale: to.StringPtr("en"),
				WebHookURL:         to.StringPtr("{webhookUrl}"),
			},
		},
		&NotificationChannelsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NotificationChannel.ID == nil {
		t.Fatal("NotificationChannel.ID should not be nil!")
	}
}

func TestNotificationChannels_Delete(t *testing.T) {
	// From example NotificationChannels_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationChannelsClient(con,
		"{subscriptionId}")
	_, err := client.Delete(ctx,
		"resourceGroupName",
		"{labName}",
		"{notificationChannelName}",
		&NotificationChannelsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNotificationChannels_Update(t *testing.T) {
	// From example NotificationChannels_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationChannelsClient(con,
		"{subscriptionId}")
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"{notificationChannelName}",
		NotificationChannelFragment{},
		&NotificationChannelsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NotificationChannel.ID == nil {
		t.Fatal("NotificationChannel.ID should not be nil!")
	}
}

func TestNotificationChannels_Notify(t *testing.T) {
	// From example NotificationChannels_Notify
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationChannelsClient(con,
		"{subscriptionId}")
	_, err := client.Notify(ctx,
		"resourceGroupName",
		"{labName}",
		"{notificationChannelName}",
		NotifyParameters{
			EventName:   NotificationChannelEventTypeAutoShutdown.ToPtr(),
			JSONPayload: to.StringPtr("{\"eventType\":\"AutoShutdown\",\"subscriptionId\":\"{subscriptionId}\",\"resourceGroupName\":\"resourceGroupName\",\"labName\":\"{labName}\"}"),
		},
		&NotificationChannelsNotifyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPolicySets_EvaluatePolicies(t *testing.T) {
	// From example PolicySets_EvaluatePolicies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPolicySetsClient(con,
		"{subscriptionId}")
	_, err := client.EvaluatePolicies(ctx,
		"resourceGroupName",
		"{labName}",
		"{policySetName}",
		EvaluatePoliciesRequest{
			Policies: []*EvaluatePoliciesProperties{
				{
					FactName:    to.StringPtr("LabVmCount"),
					ValueOffset: to.StringPtr("1"),
				}},
		},
		&PolicySetsEvaluatePoliciesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPolicies_List(t *testing.T) {
	// From example Policies_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPoliciesClient(con,
		"{subscriptionId}")
	pager := client.List("resourceGroupName",
		"{labName}",
		"{policySetName}",
		&PoliciesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Policy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Policy.ID should not be nil!")
			}
		}
	}
}

func TestPolicies_Get(t *testing.T) {
	// From example Policies_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPoliciesClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{policySetName}",
		"{policyName}",
		&PoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Policy.ID == nil {
		t.Fatal("Policy.ID should not be nil!")
	}
}

func TestPolicies_CreateOrUpdate(t *testing.T) {
	// From example Policies_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPoliciesClient(con,
		"{subscriptionId}")
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{policySetName}",
		"{policyName}",
		Policy{
			Resource: Resource{
				Location: to.StringPtr("{location}"),
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
			Properties: &PolicyProperties{
				Description:   to.StringPtr("{policyDescription}"),
				EvaluatorType: PolicyEvaluatorTypeAllowedValuesPolicy.ToPtr(),
				FactData:      to.StringPtr("{policyFactData}"),
				FactName:      PolicyFactNameUserOwnedLabVMCount.ToPtr(),
				Status:        PolicyStatusEnabled.ToPtr(),
				Threshold:     to.StringPtr("{policyThreshold}"),
			},
		},
		&PoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Policy.ID == nil {
		t.Fatal("Policy.ID should not be nil!")
	}
}

func TestPolicies_Delete(t *testing.T) {
	// From example Policies_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPoliciesClient(con,
		"{subscriptionId}")
	_, err := client.Delete(ctx,
		"resourceGroupName",
		"{labName}",
		"{policySetName}",
		"{policyName}",
		&PoliciesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPolicies_Update(t *testing.T) {
	// From example Policies_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPoliciesClient(con,
		"{subscriptionId}")
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"{policySetName}",
		"{policyName}",
		PolicyFragment{
			UpdateResource: UpdateResource{
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
		},
		&PoliciesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Policy.ID == nil {
		t.Fatal("Policy.ID should not be nil!")
	}
}

func TestSchedules_List(t *testing.T) {
	// From example Schedules_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSchedulesClient(con,
		"{subscriptionId}")
	pager := client.List("resourceGroupName",
		"{labName}",
		&SchedulesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Schedule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Schedule.ID should not be nil!")
			}
		}
	}
}

func TestSchedules_Get(t *testing.T) {
	// From example Schedules_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSchedulesClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{scheduleName}",
		&SchedulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Schedule.ID == nil {
		t.Fatal("Schedule.ID should not be nil!")
	}
}

func TestSchedules_CreateOrUpdate(t *testing.T) {
	// From example Schedules_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSchedulesClient(con,
		"{subscriptionId}")
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{scheduleName}",
		Schedule{
			Resource: Resource{
				Location: to.StringPtr("{location}"),
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
			Properties: &ScheduleProperties{
				DailyRecurrence: &DayDetails{
					Time: to.StringPtr("{timeOfTheDayTheScheduleWillOccurEveryDay}"),
				},
				HourlyRecurrence: &HourDetails{
					Minute: to.Int32Ptr(30),
				},
				NotificationSettings: &NotificationSettings{
					EmailRecipient:     to.StringPtr("{email}"),
					NotificationLocale: to.StringPtr("EN"),
					Status:             EnableStatusEnabled.ToPtr(),
					TimeInMinutes:      to.Int32Ptr(15),
					WebhookURL:         to.StringPtr("{webhookUrl}"),
				},
				Status:           EnableStatusEnabled.ToPtr(),
				TargetResourceID: to.StringPtr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}"),
				TaskType:         to.StringPtr("{myLabVmTaskType}"),
				TimeZoneID:       to.StringPtr("Pacific Standard Time"),
				WeeklyRecurrence: &WeekDetails{
					Time: to.StringPtr("{timeOfTheDayTheScheduleWillOccurOnThoseDays}"),
					Weekdays: []*string{
						to.StringPtr("Monday"),
						to.StringPtr("Wednesday"),
						to.StringPtr("Friday")},
				},
			},
		},
		&SchedulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Schedule.ID == nil {
		t.Fatal("Schedule.ID should not be nil!")
	}
}

func TestSchedules_Delete(t *testing.T) {
	// From example Schedules_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSchedulesClient(con,
		"{subscriptionId}")
	_, err := client.Delete(ctx,
		"resourceGroupName",
		"{labName}",
		"{scheduleName}",
		&SchedulesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSchedules_Update(t *testing.T) {
	// From example Schedules_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSchedulesClient(con,
		"{subscriptionId}")
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"{scheduleName}",
		ScheduleFragment{
			UpdateResource: UpdateResource{
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
		},
		&SchedulesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Schedule.ID == nil {
		t.Fatal("Schedule.ID should not be nil!")
	}
}

func TestSchedules_Execute(t *testing.T) {
	// From example Schedules_Execute
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSchedulesClient(con,
		"{subscriptionId}")
	poller, err := client.BeginExecute(ctx,
		"resourceGroupName",
		"{labName}",
		"{scheduleName}",
		&SchedulesBeginExecuteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSchedules_ListApplicable(t *testing.T) {
	// From example Schedules_ListApplicable
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSchedulesClient(con,
		"{subscriptionId}")
	pager := client.ListApplicable("resourceGroupName",
		"{labName}",
		"{scheduleName}",
		&SchedulesListApplicableOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Schedule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Schedule.ID should not be nil!")
			}
		}
	}
}

func TestServiceRunners_Get(t *testing.T) {
	// From example ServiceRunners_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceRunnersClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{devtestlabName}",
		"{servicerunnerName}",
		&ServiceRunnersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServiceRunner.ID == nil {
		t.Fatal("ServiceRunner.ID should not be nil!")
	}
}

func TestServiceRunners_CreateOrUpdate(t *testing.T) {
	// From example ServiceRunners_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceRunnersClient(con,
		"{subscriptionId}")
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroupName",
		"{devtestlabName}",
		"{servicerunnerName}",
		ServiceRunner{
			Resource: Resource{
				Location: to.StringPtr("{location}"),
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
			Identity: &IdentityProperties{
				Type:            ManagedIdentityTypeNone.ToPtr(),
				ClientSecretURL: to.StringPtr("{identityClientSecretUrl}"),
				PrincipalID:     to.StringPtr("{identityPrincipalId}"),
				TenantID:        to.StringPtr("{identityTenantId}"),
			},
		},
		&ServiceRunnersCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServiceRunner.ID == nil {
		t.Fatal("ServiceRunner.ID should not be nil!")
	}
}

func TestServiceRunners_Delete(t *testing.T) {
	// From example ServiceRunners_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceRunnersClient(con,
		"{subscriptionId}")
	_, err := client.Delete(ctx,
		"resourceGroupName",
		"{devtestlabName}",
		"{servicerunnerName}",
		&ServiceRunnersDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestUsers_List(t *testing.T) {
	// From example Users_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsersClient(con,
		"{subscriptionId}")
	pager := client.List("resourceGroupName",
		"{devtestlabName}",
		&UsersListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("User.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("User.ID should not be nil!")
			}
		}
	}
}

func TestUsers_Get(t *testing.T) {
	// From example Users_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsersClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{devtestlabName}",
		"{userName}",
		&UsersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.User.ID == nil {
		t.Fatal("User.ID should not be nil!")
	}
}

func TestUsers_CreateOrUpdate(t *testing.T) {
	// From example Users_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsersClient(con,
		"{subscriptionId}")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"{devtestlabName}",
		"{userName}",
		User{
			Resource: Resource{
				Location: to.StringPtr("{location}"),
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
			Properties: &UserProperties{
				Identity: &UserIdentity{
					AppID:         to.StringPtr("{appId}"),
					ObjectID:      to.StringPtr("{objectId}"),
					PrincipalID:   to.StringPtr("{principalId}"),
					PrincipalName: to.StringPtr("{principalName}"),
					TenantID:      to.StringPtr("{tenantId}"),
				},
				SecretStore: &UserSecretStore{
					KeyVaultID:  to.StringPtr("{keyVaultId}"),
					KeyVaultURI: to.StringPtr("{keyVaultUri}"),
				},
			},
		},
		&UsersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.User.ID == nil {
		t.Fatal("User.ID should not be nil!")
	}
}

func TestUsers_Delete(t *testing.T) {
	// From example Users_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsersClient(con,
		"{subscriptionId}")
	poller, err := client.BeginDelete(ctx,
		"resourceGroupName",
		"{devtestlabName}",
		"{userName}",
		&UsersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestUsers_Update(t *testing.T) {
	// From example Users_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsersClient(con,
		"{subscriptionId}")
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{devtestlabName}",
		"{userName}",
		UserFragment{
			UpdateResource: UpdateResource{
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
		},
		&UsersUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.User.ID == nil {
		t.Fatal("User.ID should not be nil!")
	}
}

func TestDisks_List(t *testing.T) {
	// From example Disks_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisksClient(con,
		"{subscriptionId}")
	pager := client.List("resourceGroupName",
		"{labName}",
		"@me",
		&DisksListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Disk.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Disk.ID should not be nil!")
			}
		}
	}
}

func TestDisks_Get(t *testing.T) {
	// From example Disks_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisksClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"@me",
		"{diskName}",
		&DisksGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Disk.ID == nil {
		t.Fatal("Disk.ID should not be nil!")
	}
}

func TestDisks_CreateOrUpdate(t *testing.T) {
	// From example Disks_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisksClient(con,
		"{subscriptionId}")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{userId}",
		"{diskName}",
		Disk{
			Properties: &DiskProperties{
				DiskSizeGiB:     to.Int32Ptr(1023),
				DiskType:        StorageTypeStandard.ToPtr(),
				LeasedByLabVMID: to.StringPtr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/vmName"),
			},
		},
		&DisksBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Disk.ID == nil {
		t.Fatal("Disk.ID should not be nil!")
	}
}

func TestDisks_Delete(t *testing.T) {
	// From example Disks_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisksClient(con,
		"{subscriptionId}")
	poller, err := client.BeginDelete(ctx,
		"resourceGroupName",
		"{labName}",
		"{userId}",
		"{diskName}",
		&DisksBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDisks_Update(t *testing.T) {
	// From example Disks_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisksClient(con,
		"{subscriptionId}")
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"@me",
		"diskName",
		DiskFragment{
			UpdateResource: UpdateResource{
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
		},
		&DisksUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Disk.ID == nil {
		t.Fatal("Disk.ID should not be nil!")
	}
}

func TestDisks_Attach(t *testing.T) {
	// From example Disks_Attach
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisksClient(con,
		"{subscriptionId}")
	poller, err := client.BeginAttach(ctx,
		"resourceGroupName",
		"{labName}",
		"{userId}",
		"{diskName}",
		AttachDiskProperties{
			LeasedByLabVMID: to.StringPtr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/{vmName}"),
		},
		&DisksBeginAttachOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDisks_Detach(t *testing.T) {
	// From example Disks_Detach
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisksClient(con,
		"{subscriptionId}")
	poller, err := client.BeginDetach(ctx,
		"resourceGroupName",
		"{labName}",
		"{userId}",
		"{diskName}",
		DetachDiskProperties{
			LeasedByLabVMID: to.StringPtr("/subscriptions/{subscriptionId}/resourcegroups/myResourceGroup/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/{vmName}"),
		},
		&DisksBeginDetachOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestEnvironments_List(t *testing.T) {
	// From example Environments_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEnvironmentsClient(con,
		"{subscriptionId}")
	pager := client.List("resourceGroupName",
		"{labName}",
		"@me",
		&EnvironmentsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DtlEnvironment.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DtlEnvironment.ID should not be nil!")
			}
		}
	}
}

func TestEnvironments_Get(t *testing.T) {
	// From example Environments_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEnvironmentsClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"@me",
		"{environmentName}",
		&EnvironmentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DtlEnvironment.ID == nil {
		t.Fatal("DtlEnvironment.ID should not be nil!")
	}
}

func TestEnvironments_CreateOrUpdate(t *testing.T) {
	// From example Environments_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEnvironmentsClient(con,
		"{subscriptionId}")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"@me",
		"{environmentName}",
		DtlEnvironment{
			Properties: &EnvironmentProperties{
				DeploymentProperties: &EnvironmentDeploymentProperties{
					ArmTemplateID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/artifactSources/{artifactSourceName}/armTemplates/{armTemplateName}"),
					Parameters:    []*ArmTemplateParameterProperties{},
				},
			},
		},
		&EnvironmentsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DtlEnvironment.ID == nil {
		t.Fatal("DtlEnvironment.ID should not be nil!")
	}
}

func TestEnvironments_Delete(t *testing.T) {
	// From example Environments_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEnvironmentsClient(con,
		"{subscriptionId}")
	poller, err := client.BeginDelete(ctx,
		"resourceGroupName",
		"{labName}",
		"@me",
		"{environmentName}",
		&EnvironmentsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestEnvironments_Update(t *testing.T) {
	// From example Environments_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEnvironmentsClient(con,
		"{subscriptionId}")
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"@me",
		"{environmentName}",
		DtlEnvironmentFragment{
			UpdateResource: UpdateResource{
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
		},
		&EnvironmentsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DtlEnvironment.ID == nil {
		t.Fatal("DtlEnvironment.ID should not be nil!")
	}
}

func TestSecrets_List(t *testing.T) {
	// From example Secrets_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSecretsClient(con,
		"{subscriptionId}")
	pager := client.List("resourceGroupName",
		"{labName}",
		"{userName}",
		&SecretsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Secret.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Secret.ID should not be nil!")
			}
		}
	}
}

func TestSecrets_Get(t *testing.T) {
	// From example Secrets_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSecretsClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{userName}",
		"{secretName}",
		&SecretsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Secret.ID == nil {
		t.Fatal("Secret.ID should not be nil!")
	}
}

func TestSecrets_CreateOrUpdate(t *testing.T) {
	// From example Secrets_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSecretsClient(con,
		"{subscriptionId}")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{userName}",
		"{secretName}",
		Secret{
			Properties: &SecretProperties{
				Value: to.StringPtr("{secret}"),
			},
		},
		&SecretsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Secret.ID == nil {
		t.Fatal("Secret.ID should not be nil!")
	}
}

func TestSecrets_Delete(t *testing.T) {
	// From example Secrets_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSecretsClient(con,
		"{subscriptionId}")
	_, err := client.Delete(ctx,
		"resourceGroupName",
		"{labName}",
		"{userName}",
		"{secretName}",
		&SecretsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSecrets_Update(t *testing.T) {
	// From example Secrets_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSecretsClient(con,
		"{subscriptionId}")
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"{userName}",
		"{secretName}",
		SecretFragment{
			UpdateResource: UpdateResource{
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
		},
		&SecretsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Secret.ID == nil {
		t.Fatal("Secret.ID should not be nil!")
	}
}

func TestServiceFabrics_List(t *testing.T) {
	// From example ServiceFabrics_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceFabricsClient(con,
		"{subscriptionId}")
	pager := client.List("resourceGroupName",
		"{labName}",
		"{userName}",
		&ServiceFabricsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServiceFabric.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServiceFabric.ID should not be nil!")
			}
		}
	}
}

func TestServiceFabrics_Get(t *testing.T) {
	// From example ServiceFabrics_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceFabricsClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{userName}",
		"{serviceFabricName}",
		&ServiceFabricsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServiceFabric.ID == nil {
		t.Fatal("ServiceFabric.ID should not be nil!")
	}
}

func TestServiceFabrics_CreateOrUpdate(t *testing.T) {
	// From example ServiceFabrics_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceFabricsClient(con,
		"{subscriptionId}")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{userName}",
		"{serviceFabricName}",
		ServiceFabric{
			Resource: Resource{
				Location: to.StringPtr("{location}"),
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
			Properties: &ServiceFabricProperties{
				EnvironmentID:           to.StringPtr("{environmentId}"),
				ExternalServiceFabricID: to.StringPtr("{serviceFabricId}"),
			},
		},
		&ServiceFabricsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServiceFabric.ID == nil {
		t.Fatal("ServiceFabric.ID should not be nil!")
	}
}

func TestServiceFabrics_Delete(t *testing.T) {
	// From example ServiceFabrics_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceFabricsClient(con,
		"{subscriptionId}")
	poller, err := client.BeginDelete(ctx,
		"resourceGroupName",
		"{labName}",
		"{userName}",
		"{serviceFabricName}",
		&ServiceFabricsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServiceFabrics_Update(t *testing.T) {
	// From example ServiceFabrics_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceFabricsClient(con,
		"{subscriptionId}")
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"{userName}",
		"{serviceFabricName}",
		ServiceFabricFragment{
			UpdateResource: UpdateResource{
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
		},
		&ServiceFabricsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServiceFabric.ID == nil {
		t.Fatal("ServiceFabric.ID should not be nil!")
	}
}

func TestServiceFabrics_ListApplicableSchedules(t *testing.T) {
	// From example ServiceFabrics_ListApplicableSchedules
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceFabricsClient(con,
		"{subscriptionId}")
	res, err := client.ListApplicableSchedules(ctx,
		"resourceGroupName",
		"{labName}",
		"{userName}",
		"{serviceFabricName}",
		&ServiceFabricsListApplicableSchedulesOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ApplicableSchedule.ID == nil {
		t.Fatal("ApplicableSchedule.ID should not be nil!")
	}
}

func TestServiceFabrics_Start(t *testing.T) {
	// From example ServiceFabrics_Start
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceFabricsClient(con,
		"{subscriptionId}")
	poller, err := client.BeginStart(ctx,
		"resourceGroupName",
		"{labName}",
		"{userName}",
		"{serviceFabricName}",
		&ServiceFabricsBeginStartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServiceFabrics_Stop(t *testing.T) {
	// From example ServiceFabrics_Stop
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceFabricsClient(con,
		"{subscriptionId}")
	poller, err := client.BeginStop(ctx,
		"resourceGroupName",
		"{labName}",
		"{userName}",
		"{serviceFabricName}",
		&ServiceFabricsBeginStopOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServiceFabricSchedules_List(t *testing.T) {
	// From example ServiceFabricSchedules_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceFabricSchedulesClient(con,
		"{subscriptionId}")
	pager := client.List("resourceGroupName",
		"{labName}",
		"@me",
		"{serviceFrabicName}",
		&ServiceFabricSchedulesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Schedule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Schedule.ID should not be nil!")
			}
		}
	}
}

func TestServiceFabricSchedules_Get(t *testing.T) {
	// From example ServiceFabricSchedules_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceFabricSchedulesClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"@me",
		"{serviceFrabicName}",
		"{scheduleName}",
		&ServiceFabricSchedulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Schedule.ID == nil {
		t.Fatal("Schedule.ID should not be nil!")
	}
}

func TestServiceFabricSchedules_CreateOrUpdate(t *testing.T) {
	// From example ServiceFabricSchedules_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceFabricSchedulesClient(con,
		"{subscriptionId}")
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"@me",
		"{serviceFrabicName}",
		"{scheduleName}",
		Schedule{
			Resource: Resource{
				Location: to.StringPtr("{location}"),
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
			Properties: &ScheduleProperties{
				DailyRecurrence: &DayDetails{
					Time: to.StringPtr("19:00"),
				},
				HourlyRecurrence: &HourDetails{
					Minute: to.Int32Ptr(0),
				},
				NotificationSettings: &NotificationSettings{
					EmailRecipient:     to.StringPtr("{email}"),
					NotificationLocale: to.StringPtr("EN"),
					Status:             EnableStatusEnabled.ToPtr(),
					TimeInMinutes:      to.Int32Ptr(15),
					WebhookURL:         to.StringPtr("{webhoolUrl}"),
				},
				Status:           EnableStatusEnabled.ToPtr(),
				TargetResourceID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/users/{uniqueIdentifier}/servicefabrics/{serviceFrabicName}"),
				TaskType:         to.StringPtr("{Unknown|LabVmsShutdownTask|LabVmsStartupTask|LabVmReclamationTask|ComputeVmShutdownTask}"),
				TimeZoneID:       to.StringPtr("Pacific Standard Time"),
				WeeklyRecurrence: &WeekDetails{
					Time: to.StringPtr("19:00"),
					Weekdays: []*string{
						to.StringPtr("Monday"),
						to.StringPtr("Tuesday"),
						to.StringPtr("Wednesday"),
						to.StringPtr("Thursday"),
						to.StringPtr("Friday"),
						to.StringPtr("Saturday"),
						to.StringPtr("Sunday")},
				},
			},
		},
		&ServiceFabricSchedulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Schedule.ID == nil {
		t.Fatal("Schedule.ID should not be nil!")
	}
}

func TestServiceFabricSchedules_Delete(t *testing.T) {
	// From example ServiceFabricSchedules_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceFabricSchedulesClient(con,
		"{subscriptionId}")
	_, err := client.Delete(ctx,
		"resourceGroupName",
		"{labName}",
		"@me",
		"{serviceFrabicName}",
		"{scheduleName}",
		&ServiceFabricSchedulesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServiceFabricSchedules_Update(t *testing.T) {
	// From example ServiceFabricSchedules_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceFabricSchedulesClient(con,
		"{subscriptionId}")
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"@me",
		"{serviceFrabicName}",
		"{scheduleName}",
		ScheduleFragment{
			UpdateResource: UpdateResource{
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
		},
		&ServiceFabricSchedulesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Schedule.ID == nil {
		t.Fatal("Schedule.ID should not be nil!")
	}
}

func TestServiceFabricSchedules_Execute(t *testing.T) {
	// From example ServiceFabricSchedules_Execute
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceFabricSchedulesClient(con,
		"{subscriptionId}")
	poller, err := client.BeginExecute(ctx,
		"resourceGroupName",
		"{labName}",
		"@me",
		"{serviceFrabicName}",
		"{scheduleName}",
		&ServiceFabricSchedulesBeginExecuteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualMachines_List(t *testing.T) {
	// From example VirtualMachines_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscriptionId}")
	pager := client.List("resourceGroupName",
		"{labName}",
		&VirtualMachinesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LabVirtualMachine.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LabVirtualMachine.ID should not be nil!")
			}
		}
	}
}

func TestVirtualMachines_Get(t *testing.T) {
	// From example VirtualMachines_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		&VirtualMachinesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LabVirtualMachine.ID == nil {
		t.Fatal("LabVirtualMachine.ID should not be nil!")
	}
}

func TestVirtualMachines_CreateOrUpdate(t *testing.T) {
	// From example VirtualMachines_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscriptionId}")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		LabVirtualMachine{
			Resource: Resource{
				Location: to.StringPtr("{location}"),
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
			Properties: &LabVirtualMachineProperties{
				AllowClaim:              to.BoolPtr(true),
				DisallowPublicIPAddress: to.BoolPtr(true),
				GalleryImageReference: &GalleryImageReference{
					Offer:     to.StringPtr("UbuntuServer"),
					OSType:    to.StringPtr("Linux"),
					Publisher: to.StringPtr("Canonical"),
					SKU:       to.StringPtr("16.04-LTS"),
					Version:   to.StringPtr("Latest"),
				},
				LabSubnetName:       to.StringPtr("{virtualNetworkName}Subnet"),
				LabVirtualNetworkID: to.StringPtr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualnetworks/{virtualNetworkName}"),
				Password:            to.StringPtr("{userPassword}"),
				Size:                to.StringPtr("Standard_A2_v2"),
				StorageType:         to.StringPtr("Standard"),
				UserName:            to.StringPtr("{userName}"),
			},
		},
		&VirtualMachinesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LabVirtualMachine.ID == nil {
		t.Fatal("LabVirtualMachine.ID should not be nil!")
	}
}

func TestVirtualMachines_Delete(t *testing.T) {
	// From example VirtualMachines_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscriptionId}")
	poller, err := client.BeginDelete(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		&VirtualMachinesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualMachines_Update(t *testing.T) {
	// From example VirtualMachines_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscriptionId}")
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		LabVirtualMachineFragment{},
		&VirtualMachinesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LabVirtualMachine.ID == nil {
		t.Fatal("LabVirtualMachine.ID should not be nil!")
	}
}

func TestVirtualMachines_AddDataDisk(t *testing.T) {
	// From example VirtualMachines_AddDataDisk
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscriptionId}")
	poller, err := client.BeginAddDataDisk(ctx,
		"resourceGroupName",
		"{labName}",
		"{virtualMachineName}",
		DataDiskProperties{
			AttachNewDataDiskOptions: &AttachNewDataDiskOptions{
				DiskName:    to.StringPtr("{diskName}"),
				DiskSizeGiB: to.Int32Ptr(127),
				DiskType:    StorageTypeStandard.ToPtr(),
			},
		},
		&VirtualMachinesBeginAddDataDiskOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualMachines_ApplyArtifacts(t *testing.T) {
	// From example VirtualMachines_ApplyArtifacts
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscriptionId}")
	poller, err := client.BeginApplyArtifacts(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		ApplyArtifactsRequest{
			Artifacts: []*ArtifactInstallProperties{
				{
					ArtifactID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/artifactSources/public repo/artifacts/windows-restart"),
				}},
		},
		&VirtualMachinesBeginApplyArtifactsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualMachines_Claim(t *testing.T) {
	// From example VirtualMachines_Claim
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscriptionId}")
	poller, err := client.BeginClaim(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		&VirtualMachinesBeginClaimOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualMachines_DetachDataDisk(t *testing.T) {
	// From example VirtualMachines_DetachDataDisk
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscriptionId}")
	poller, err := client.BeginDetachDataDisk(ctx,
		"resourceGroupName",
		"{labName}",
		"{virtualMachineName}",
		DetachDataDiskProperties{
			ExistingLabDiskID: to.StringPtr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualmachines/{virtualMachineName}"),
		},
		&VirtualMachinesBeginDetachDataDiskOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualMachines_GetRdpFileContents(t *testing.T) {
	// From example VirtualMachines_GetRdpFileContents
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscriptionId}")
	_, err := client.GetRdpFileContents(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		&VirtualMachinesGetRdpFileContentsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualMachines_ListApplicableSchedules(t *testing.T) {
	// From example VirtualMachines_ListApplicableSchedules
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscriptionId}")
	res, err := client.ListApplicableSchedules(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		&VirtualMachinesListApplicableSchedulesOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ApplicableSchedule.ID == nil {
		t.Fatal("ApplicableSchedule.ID should not be nil!")
	}
}

func TestVirtualMachines_Redeploy(t *testing.T) {
	// From example VirtualMachines_Redeploy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscriptionId}")
	poller, err := client.BeginRedeploy(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		&VirtualMachinesBeginRedeployOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualMachines_Resize(t *testing.T) {
	// From example VirtualMachines_Resize
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscriptionId}")
	poller, err := client.BeginResize(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		ResizeLabVirtualMachineProperties{
			Size: to.StringPtr("Standard_A4_v2"),
		},
		&VirtualMachinesBeginResizeOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualMachines_Restart(t *testing.T) {
	// From example VirtualMachines_Restart
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscriptionId}")
	poller, err := client.BeginRestart(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		&VirtualMachinesBeginRestartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualMachines_Start(t *testing.T) {
	// From example VirtualMachines_Start
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscriptionId}")
	poller, err := client.BeginStart(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		&VirtualMachinesBeginStartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualMachines_Stop(t *testing.T) {
	// From example VirtualMachines_Stop
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscriptionId}")
	poller, err := client.BeginStop(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		&VirtualMachinesBeginStopOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualMachines_TransferDisks(t *testing.T) {
	// From example VirtualMachines_TransferDisks
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscriptionId}")
	poller, err := client.BeginTransferDisks(ctx,
		"resourceGroupName",
		"{labName}",
		"{virtualmachineName}",
		&VirtualMachinesBeginTransferDisksOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualMachines_UnClaim(t *testing.T) {
	// From example VirtualMachines_UnClaim
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscriptionId}")
	poller, err := client.BeginUnClaim(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		&VirtualMachinesBeginUnClaimOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualMachineSchedules_List(t *testing.T) {
	// From example VirtualMachineSchedules_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachineSchedulesClient(con,
		"{subscriptionId}")
	pager := client.List("resourceGroupName",
		"{labName}",
		"{vmName}",
		&VirtualMachineSchedulesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Schedule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Schedule.ID should not be nil!")
			}
		}
	}
}

func TestVirtualMachineSchedules_Get(t *testing.T) {
	// From example VirtualMachineSchedules_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachineSchedulesClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		"LabVmsShutdown",
		&VirtualMachineSchedulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Schedule.ID == nil {
		t.Fatal("Schedule.ID should not be nil!")
	}
}

func TestVirtualMachineSchedules_CreateOrUpdate(t *testing.T) {
	// From example VirtualMachineSchedules_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachineSchedulesClient(con,
		"{subscriptionId}")
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		"LabVmsShutdown",
		Schedule{
			Resource: Resource{
				Location: to.StringPtr("{location}"),
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
			Properties: &ScheduleProperties{
				DailyRecurrence: &DayDetails{
					Time: to.StringPtr("1900"),
				},
				HourlyRecurrence: &HourDetails{
					Minute: to.Int32Ptr(30),
				},
				NotificationSettings: &NotificationSettings{
					EmailRecipient:     to.StringPtr("{email}"),
					NotificationLocale: to.StringPtr("EN"),
					Status:             EnableStatusEnabled.ToPtr(),
					TimeInMinutes:      to.Int32Ptr(30),
					WebhookURL:         to.StringPtr("{webhookUrl}"),
				},
				Status:           EnableStatusEnabled.ToPtr(),
				TargetResourceID: to.StringPtr("/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualMachines/{vmName}"),
				TaskType:         to.StringPtr("LabVmsShutdownTask"),
				TimeZoneID:       to.StringPtr("Pacific Standard Time"),
				WeeklyRecurrence: &WeekDetails{
					Time: to.StringPtr("1700"),
					Weekdays: []*string{
						to.StringPtr("Friday"),
						to.StringPtr("Saturday"),
						to.StringPtr("Sunday")},
				},
			},
		},
		&VirtualMachineSchedulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Schedule.ID == nil {
		t.Fatal("Schedule.ID should not be nil!")
	}
}

func TestVirtualMachineSchedules_Delete(t *testing.T) {
	// From example VirtualMachineSchedules_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachineSchedulesClient(con,
		"{subscriptionId}")
	_, err := client.Delete(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		"LabVmsShutdown",
		&VirtualMachineSchedulesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualMachineSchedules_Update(t *testing.T) {
	// From example VirtualMachineSchedules_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachineSchedulesClient(con,
		"{subscriptionId}")
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		"LabVmsShutdown",
		ScheduleFragment{
			UpdateResource: UpdateResource{
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
		},
		&VirtualMachineSchedulesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Schedule.ID == nil {
		t.Fatal("Schedule.ID should not be nil!")
	}
}

func TestVirtualMachineSchedules_Execute(t *testing.T) {
	// From example VirtualMachineSchedules_Execute
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachineSchedulesClient(con,
		"{subscriptionId}")
	poller, err := client.BeginExecute(ctx,
		"resourceGroupName",
		"{labName}",
		"{vmName}",
		"LabVmsShutdown",
		&VirtualMachineSchedulesBeginExecuteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworks_List(t *testing.T) {
	// From example VirtualNetworks_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworksClient(con,
		"{subscriptionId}")
	pager := client.List("resourceGroupName",
		"{labName}",
		&VirtualNetworksListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualNetwork.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualNetwork.ID should not be nil!")
			}
		}
	}
}

func TestVirtualNetworks_Get(t *testing.T) {
	// From example VirtualNetworks_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworksClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"resourceGroupName",
		"{labName}",
		"{virtualNetworkName}",
		&VirtualNetworksGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetwork.ID == nil {
		t.Fatal("VirtualNetwork.ID should not be nil!")
	}
}

func TestVirtualNetworks_CreateOrUpdate(t *testing.T) {
	// From example VirtualNetworks_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworksClient(con,
		"{subscriptionId}")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"{labName}",
		"{virtualNetworkName}",
		VirtualNetwork{
			Resource: Resource{
				Location: to.StringPtr("{location}"),
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
		},
		&VirtualNetworksBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetwork.ID == nil {
		t.Fatal("VirtualNetwork.ID should not be nil!")
	}
}

func TestVirtualNetworks_Delete(t *testing.T) {
	// From example VirtualNetworks_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworksClient(con,
		"{subscriptionId}")
	poller, err := client.BeginDelete(ctx,
		"resourceGroupName",
		"{labName}",
		"{virtualNetworkName}",
		&VirtualNetworksBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworks_Update(t *testing.T) {
	// From example VirtualNetworks_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworksClient(con,
		"{subscriptionId}")
	res, err := client.Update(ctx,
		"resourceGroupName",
		"{labName}",
		"{virtualNetworkName}",
		VirtualNetworkFragment{
			UpdateResource: UpdateResource{
				Tags: map[string]*string{
					"tagName1": to.StringPtr("tagValue1"),
				},
			},
		},
		&VirtualNetworksUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetwork.ID == nil {
		t.Fatal("VirtualNetwork.ID should not be nil!")
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
