//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armblockchain_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/blockchain/armblockchain"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestBlockchainMembers_Get(t *testing.T) {
	// From example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMembers_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BlockchainMembers_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblockchain.NewMembersClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	res, err := client.Get(ctx,
		"contosemember1",
		"mygroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMembers_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblockchain.Member{
			Name:     to.Ptr("contosemember1"),
			Type:     to.Ptr("Microsoft.Blockchain/blockchainMembers"),
			ID:       to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Blockchain/blockchainMembers/contosemember1"),
			Location: to.Ptr("southeastasia"),
			Properties: &armblockchain.MemberProperties{
				Consortium:                         to.Ptr("ContoseConsortium"),
				ConsortiumManagementAccountAddress: to.Ptr("0xc40d40dedc353885d3e8393735cf799e4d7fe38c"),
				ConsortiumMemberDisplayName:        to.Ptr("contosemember1"),
				ConsortiumRole:                     to.Ptr("ADMIN"),
				DNS:                                to.Ptr("contosemember1.blockchain.azure.com"),
				ProvisioningState:                  to.Ptr(armblockchain.BlockchainMemberProvisioningStateSucceeded),
				PublicKey:                          to.Ptr("1VhPX4PbNGnE9dOEjgTrw92dltBpKxFQjXWNugcwvl0="),
				RootContractAddress:                to.Ptr("0x7407947df2f67142340ca7d1a2c120f0dbfd30e1"),
				UserName:                           to.Ptr("contosemember1"),
				ValidatorNodesSKU: &armblockchain.MemberNodesSKU{
					Capacity: to.Ptr[int32](2),
				},
				Protocol: to.Ptr(armblockchain.BlockchainProtocolQuorum),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Member) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Member)
			t.Fatalf("Mock response is not equal to example response for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMembers_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlockchainMembers_Create(t *testing.T) {
	// From example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMembers_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BlockchainMembers_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblockchain.NewMembersClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"contosemember1",
		"mygroup",
		&armblockchain.MembersClientBeginCreateOptions{BlockchainMember: &armblockchain.Member{
			Location: to.Ptr("southeastasia"),
			Properties: &armblockchain.MemberProperties{
				Consortium:                          to.Ptr("ContoseConsortium"),
				ConsortiumManagementAccountPassword: to.Ptr("<consortiumManagementAccountPassword>"),
				Password:                            to.Ptr("<password>"),
				ValidatorNodesSKU: &armblockchain.MemberNodesSKU{
					Capacity: to.Ptr[int32](2),
				},
				Protocol: to.Ptr(armblockchain.BlockchainProtocolQuorum),
			},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMembers_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMembers_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblockchain.Member{
			Name:     to.Ptr("contosemember1"),
			Type:     to.Ptr("Microsoft.Blockchain/blockchainMembers"),
			ID:       to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Blockchain/blockchainMembers/contosemember1"),
			Location: to.Ptr("southeastasia"),
			Properties: &armblockchain.MemberProperties{
				Consortium:        to.Ptr("ContoseConsortium"),
				ProvisioningState: to.Ptr(armblockchain.BlockchainMemberProvisioningStateSucceeded),
				UserName:          to.Ptr("contosemember1"),
				ValidatorNodesSKU: &armblockchain.MemberNodesSKU{
					Capacity: to.Ptr[int32](2),
				},
				Protocol: to.Ptr(armblockchain.BlockchainProtocolQuorum),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Member) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Member)
			t.Fatalf("Mock response is not equal to example response for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMembers_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlockchainMembers_Delete(t *testing.T) {
	// From example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMembers_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BlockchainMembers_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblockchain.NewMembersClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"contosemember1",
		"mygroup",
		&armblockchain.MembersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMembers_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMembers_Delete.json: %v", err)
	}
}

func TestBlockchainMembers_Update(t *testing.T) {
	// From example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMembers_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BlockchainMembers_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblockchain.NewMembersClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	res, err := client.Update(ctx,
		"ContoseMember1",
		"mygroup",
		&armblockchain.MembersClientUpdateOptions{BlockchainMember: &armblockchain.MemberUpdate{
			Properties: &armblockchain.MemberPropertiesUpdate{
				Password:                            to.Ptr("<password>"),
				ConsortiumManagementAccountPassword: to.Ptr("<consortiumManagementAccountPassword>"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMembers_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblockchain.Member{
			Name:     to.Ptr("ContoseMember1"),
			Type:     to.Ptr("Microsoft.Blockchain/blockchainMembers"),
			ID:       to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Blockchain/blockchainMembers/ContoseMember1"),
			Location: to.Ptr("southeastasia"),
			Properties: &armblockchain.MemberProperties{
				Consortium:                  to.Ptr("ContoseConsortium"),
				ConsortiumMemberDisplayName: to.Ptr("contosemember1"),
				ConsortiumRole:              to.Ptr("ADMIN"),
				ProvisioningState:           to.Ptr(armblockchain.BlockchainMemberProvisioningStateSucceeded),
				UserName:                    to.Ptr("testuser1"),
				ValidatorNodesSKU: &armblockchain.MemberNodesSKU{
					Capacity: to.Ptr[int32](2),
				},
				Protocol: to.Ptr(armblockchain.BlockchainProtocolQuorum),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Member) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Member)
			t.Fatalf("Mock response is not equal to example response for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMembers_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlockchainMembers_List(t *testing.T) {
	// From example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMembers_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BlockchainMembers_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblockchain.NewMembersClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	pager := client.List("mygroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMembers_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armblockchain.MemberCollection{
			Value: []*armblockchain.Member{
				{
					Name:     to.Ptr("contosemember1"),
					Type:     to.Ptr("Microsoft.Blockchain/blockchainMembers"),
					ID:       to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Blockchain/blockchainMembers/contosemember1"),
					Location: to.Ptr("southeastasia"),
					Properties: &armblockchain.MemberProperties{
						Consortium:                  to.Ptr("ContoseConsortium"),
						ConsortiumMemberDisplayName: to.Ptr("contosemember1"),
						ConsortiumRole:              to.Ptr("ADMIN"),
						DNS:                         to.Ptr("contosemember1.blockchain.azure.com"),
						ProvisioningState:           to.Ptr(armblockchain.BlockchainMemberProvisioningStateSucceeded),
						PublicKey:                   to.Ptr("1VhPX4PbNGnE9dOEjgTrw92dltBpKxFQjXWNugcwvl0="),
						RootContractAddress:         to.Ptr("0x7407947df2f67142340ca7d1a2c120f0dbfd30e1"),
						UserName:                    to.Ptr("contosemember1"),
						ValidatorNodesSKU: &armblockchain.MemberNodesSKU{
							Capacity: to.Ptr[int32](2),
						},
						Protocol: to.Ptr(armblockchain.BlockchainProtocolQuorum),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MemberCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MemberCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMembers_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlockchainMembers_ListAll(t *testing.T) {
	// From example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMembers_ListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BlockchainMembers_ListAll"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblockchain.NewMembersClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	pager := client.ListAll(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMembers_ListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armblockchain.MemberCollection{
			Value: []*armblockchain.Member{
				{
					Name:     to.Ptr("contosemember1"),
					Type:     to.Ptr("Microsoft.Blockchain/blockchainMembers"),
					ID:       to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Blockchain/blockchainMembers/contosemember1"),
					Location: to.Ptr("southeastasia"),
					Properties: &armblockchain.MemberProperties{
						Consortium:                  to.Ptr("ContoseConsortium"),
						ConsortiumMemberDisplayName: to.Ptr("contosemember1"),
						ConsortiumRole:              to.Ptr("ADMIN"),
						DNS:                         to.Ptr("contosemember1.blockchain.azure.com"),
						ProvisioningState:           to.Ptr(armblockchain.BlockchainMemberProvisioningStateSucceeded),
						PublicKey:                   to.Ptr("1VhPX4PbNGnE9dOEjgTrw92dltBpKxFQjXWNugcwvl0="),
						RootContractAddress:         to.Ptr("0x7407947df2f67142340ca7d1a2c120f0dbfd30e1"),
						UserName:                    to.Ptr("contosemember1"),
						ValidatorNodesSKU: &armblockchain.MemberNodesSKU{
							Capacity: to.Ptr[int32](2),
						},
						Protocol: to.Ptr(armblockchain.BlockchainProtocolQuorum),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MemberCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MemberCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMembers_ListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlockchainMembers_ListConsortiumMembers(t *testing.T) {
	// From example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMembers_ListConsortiumMembers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BlockchainMembers_ListConsortiumMembers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblockchain.NewMembersClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	pager := client.ListConsortiumMembers("contosemember1",
		"mygroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMembers_ListConsortiumMembers.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armblockchain.ConsortiumMemberCollection{
			Value: []*armblockchain.ConsortiumMember{
				{
					Name:           to.Ptr("contosemember1"),
					DateModified:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-23T22:34:00.330Z"); return t }()),
					DisplayName:    to.Ptr("Contose member 1"),
					JoinDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-23T22:34:00.330Z"); return t }()),
					Role:           to.Ptr("Member"),
					Status:         to.Ptr("Ready"),
					SubscriptionID: to.Ptr("51766542-3ed7-4a72-a187-0c8ab644ddab"),
				},
				{
					Name:           to.Ptr(""),
					DateModified:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-23T22:34:00.330Z"); return t }()),
					Role:           to.Ptr("ADMIN"),
					Status:         to.Ptr("Invited"),
					SubscriptionID: to.Ptr("02bf808a-5446-4e54-aea8-39723aaa05e7"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConsortiumMemberCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConsortiumMemberCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMembers_ListConsortiumMembers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlockchainMemberOperationResults_Get(t *testing.T) {
	// From example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMemberOperationResults_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BlockchainMemberOperationResults_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblockchain.NewMemberOperationResultsClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	res, err := client.Get(ctx,
		"southeastasia",
		"12f4b309-01e3-4fcf-bc0b-1cc034ca03f8",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMemberOperationResults_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblockchain.OperationResult{
			Name:      to.Ptr("DeleteTransactionNode"),
			EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-23T22:28:04.677Z"); return t }()),
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-23T22:34:00.330Z"); return t }()),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/BlockchainMemberOperationResults_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocations_CheckNameAvailability(t *testing.T) {
	// From example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/Locations_CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Locations_CheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblockchain.NewLocationsClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"southeastasia",
		&armblockchain.LocationsClientCheckNameAvailabilityOptions{NameAvailabilityRequest: &armblockchain.NameAvailabilityRequest{
			Name: to.Ptr("contosemember1"),
			Type: to.Ptr("Microsoft.Blockchain/blockchainMembers"),
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/Locations_CheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblockchain.NameAvailability{
			Message:       to.Ptr("A blockchain member named 'contosemember1' is already in use."),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr(armblockchain.NameAvailabilityReasonAlreadyExists),
		}
		if !reflect.DeepEqual(exampleRes, res.NameAvailability) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NameAvailability)
			t.Fatalf("Mock response is not equal to example response for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/Locations_CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocations_ListConsortiums(t *testing.T) {
	// From example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/Locations_ListConsortiums.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Locations_ListConsortiums"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblockchain.NewLocationsClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	res, err := client.ListConsortiums(ctx,
		"southeastasia",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/Locations_ListConsortiums.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblockchain.ConsortiumCollection{
			Value: []*armblockchain.Consortium{
				{
					Name:     to.Ptr("gebiconsortium1"),
					Protocol: to.Ptr(armblockchain.BlockchainProtocolParity),
				},
				{
					Name:     to.Ptr("bwtestpsh"),
					Protocol: to.Ptr(armblockchain.BlockchainProtocolParity),
				},
				{
					Name:     to.Ptr("jackyhsuconsortium"),
					Protocol: to.Ptr(armblockchain.BlockchainProtocolQuorum),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ConsortiumCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConsortiumCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/Locations_ListConsortiums.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblockchain.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armblockchain.ResourceProviderOperationCollection{
			Value: []*armblockchain.ResourceProviderOperation{
				{
					Name: to.Ptr("Microsoft.Blockchain/register/action"),
					Display: &armblockchain.ResourceProviderOperationDisplay{
						Description: to.Ptr("Registers the subscription for the Blockchain Resource Provider."),
						Operation:   to.Ptr("Register the Blockchain Resource Provider"),
						Provider:    to.Ptr("Microsoft Blockchain"),
						Resource:    to.Ptr("Blockchain Resource Provider"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Blockchain/blockchainMembers/read"),
					Display: &armblockchain.ResourceProviderOperationDisplay{
						Description: to.Ptr("Gets or Lists existing Blockchain Member(s)."),
						Operation:   to.Ptr("Get or List Blockchain Member(s)"),
						Provider:    to.Ptr("Microsoft Blockchain"),
						Resource:    to.Ptr("Blockchain Members"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Blockchain/blockchainMembers/write"),
					Display: &armblockchain.ResourceProviderOperationDisplay{
						Description: to.Ptr("Creates or Updates a Blockchain Member."),
						Operation:   to.Ptr("Create or Update Blockchain Member"),
						Provider:    to.Ptr("Microsoft Blockchain"),
						Resource:    to.Ptr("Blockchain Members"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Blockchain/blockchainMembers/delete"),
					Display: &armblockchain.ResourceProviderOperationDisplay{
						Description: to.Ptr("Deletes an existing Blockchain Member."),
						Operation:   to.Ptr("Delete Blockchain Member"),
						Provider:    to.Ptr("Microsoft Blockchain"),
						Resource:    to.Ptr("Blockchain Members"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Blockchain/blockchainMembers/transactionNodes/read"),
					Display: &armblockchain.ResourceProviderOperationDisplay{
						Description: to.Ptr("Gets or Lists existing Blockchain Member Transaction Node(s)."),
						Operation:   to.Ptr("Get or List Blockchain Member Transaction Node(s)"),
						Provider:    to.Ptr("Microsoft Blockchain"),
						Resource:    to.Ptr("Blockchain Member Transaction Nodes"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Blockchain/blockchainMembers/transactionNodes/write"),
					Display: &armblockchain.ResourceProviderOperationDisplay{
						Description: to.Ptr("Creates or Updates a Blockchain Member Transaction Node."),
						Operation:   to.Ptr("Create or Update Blockchain Member Transaction Node"),
						Provider:    to.Ptr("Microsoft Blockchain"),
						Resource:    to.Ptr("Blockchain Member Transaction Nodes"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Blockchain/blockchainMembers/transactionNodes/delete"),
					Display: &armblockchain.ResourceProviderOperationDisplay{
						Description: to.Ptr("Deletes an existing Blockchain Member Transaction Node."),
						Operation:   to.Ptr("Delete Blockchain Member Transaction Node"),
						Provider:    to.Ptr("Microsoft Blockchain"),
						Resource:    to.Ptr("Blockchain Member Transaction Nodes"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Blockchain/blockchainMembers/transactionNodes/connect/action"),
					Display: &armblockchain.ResourceProviderOperationDisplay{
						Description: to.Ptr("Connects to a Blockchain Member Transaction Node."),
						Operation:   to.Ptr("Connect Blockchain Member Transaction Node"),
						Provider:    to.Ptr("Microsoft Blockchain"),
						Resource:    to.Ptr("Blockchain Member Transaction Nodes"),
					},
					IsDataAction: to.Ptr(true),
				},
				{
					Name: to.Ptr("Microsoft.Blockchain/locations/blockchainMemberOperationResults/read"),
					Display: &armblockchain.ResourceProviderOperationDisplay{
						Description: to.Ptr("Gets the Operation Results of Blockchain Members."),
						Operation:   to.Ptr("Get Blockchain Member Operation Results"),
						Provider:    to.Ptr("Microsoft Blockchain"),
						Resource:    to.Ptr("Locations"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Blockchain/locations/checkNameAvailability/action"),
					Display: &armblockchain.ResourceProviderOperationDisplay{
						Description: to.Ptr("Checks that resource name is valid and is not in use."),
						Operation:   to.Ptr("Check Name Availability"),
						Provider:    to.Ptr("Microsoft Blockchain"),
						Resource:    to.Ptr("Locations"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Blockchain/operations/read"),
					Display: &armblockchain.ResourceProviderOperationDisplay{
						Description: to.Ptr("List all Operations in Microsoft Blockchain Resource Provider."),
						Operation:   to.Ptr("List all Operations"),
						Provider:    to.Ptr("Microsoft Blockchain"),
						Resource:    to.Ptr("Operations"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Blockchain/blockchainMembers/providers/Microsoft.Insights/logDefinitions/read"),
					Display: &armblockchain.ResourceProviderOperationDisplay{
						Description: to.Ptr("Gets the available logs for Microsoft Blockchain"),
						Operation:   to.Ptr("Read Microsoft Blockchain log definitions"),
						Provider:    to.Ptr("Microsoft Blockchain"),
						Resource:    to.Ptr("The log definition of Microsoft Blockchain"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.Blockchain/blockchainMembers/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armblockchain.ResourceProviderOperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource"),
						Operation:   to.Ptr("Read diagnostic setting"),
						Provider:    to.Ptr("Microsoft Blockchain"),
						Resource:    to.Ptr("The display resource of diagnostic settings of Microsoft Blockchain"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.Blockchain/blockchainMembers/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armblockchain.ResourceProviderOperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource"),
						Operation:   to.Ptr("Write diagnostic setting"),
						Provider:    to.Ptr("Microsoft Blockchain"),
						Resource:    to.Ptr("The display resource of diagnostic settings of Microsoft Blockchain"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceProviderOperationCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceProviderOperationCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSKUs_List(t *testing.T) {
	// From example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/Skus_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Skus_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblockchain.NewSKUsClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/Skus_List.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblockchain.ResourceTypeSKUCollection{
			Value: []*armblockchain.ResourceTypeSKU{
				{
					ResourceType: to.Ptr("blockchainMembers"),
					SKUs: []*armblockchain.SKUSetting{
						{
							Name: to.Ptr("B0"),
							Locations: []*string{
								to.Ptr("SoutheastAsia")},
							RequiredFeatures: []*string{
								to.Ptr("Microsoft.Blockchain/privatePreviewAccess")},
							Tier: to.Ptr("Basic"),
						},
						{
							Name: to.Ptr("S0"),
							Locations: []*string{
								to.Ptr("SoutheastAsia")},
							RequiredFeatures: []*string{
								to.Ptr("Microsoft.Blockchain/privatePreviewAccess")},
							Tier: to.Ptr("Standard"),
						}},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceTypeSKUCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceTypeSKUCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/Skus_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTransactionNodes_Get(t *testing.T) {
	// From example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/TransactionNodes_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TransactionNodes_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblockchain.NewTransactionNodesClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	res, err := client.Get(ctx,
		"contosemember1",
		"txnode2",
		"mygroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/TransactionNodes_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblockchain.TransactionNode{
			Name:     to.Ptr("txnode2"),
			Type:     to.Ptr("Microsoft.Blockchain/blockchainMembers/transactionNodes"),
			ID:       to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Blockchain/blockchainMembers/contosemember1/transactionNodes/txnode2"),
			Location: to.Ptr("southeastasia"),
			Properties: &armblockchain.TransactionNodeProperties{
				DNS:               to.Ptr("txnode2-contosemember1.blockchain.ppe.azure-int.net"),
				ProvisioningState: to.Ptr(armblockchain.NodeProvisioningStateSucceeded),
				PublicKey:         to.Ptr("h7Q10I/1dLK/hzX8FkVrfl03D/aX8jW3YNoxJ/n4vkY="),
				UserName:          to.Ptr("txnode2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TransactionNode) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TransactionNode)
			t.Fatalf("Mock response is not equal to example response for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/TransactionNodes_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTransactionNodes_Create(t *testing.T) {
	// From example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/TransactionNodes_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TransactionNodes_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblockchain.NewTransactionNodesClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"contosemember1",
		"txnode2",
		"mygroup",
		&armblockchain.TransactionNodesClientBeginCreateOptions{TransactionNode: &armblockchain.TransactionNode{
			Location: to.Ptr("southeastasia"),
			Properties: &armblockchain.TransactionNodeProperties{
				Password: to.Ptr("<password>"),
			},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/TransactionNodes_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/TransactionNodes_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblockchain.TransactionNode{
			Name:     to.Ptr("txnode2"),
			Type:     to.Ptr("Microsoft.Blockchain/blockchainMembers/transactionNodes"),
			ID:       to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Blockchain/blockchainMembers/contosemember1/transactionNodes/txnode2"),
			Location: to.Ptr("southeastasia"),
			Properties: &armblockchain.TransactionNodeProperties{
				ProvisioningState: to.Ptr(armblockchain.NodeProvisioningStateSucceeded),
				UserName:          to.Ptr("txnode2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TransactionNode) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TransactionNode)
			t.Fatalf("Mock response is not equal to example response for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/TransactionNodes_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTransactionNodes_Delete(t *testing.T) {
	// From example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/TransactionNodes_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TransactionNodes_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblockchain.NewTransactionNodesClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"contosemember1",
		"txNode2",
		"mygroup",
		&armblockchain.TransactionNodesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/TransactionNodes_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/TransactionNodes_Delete.json: %v", err)
	}
}

func TestTransactionNodes_Update(t *testing.T) {
	// From example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/TransactionNodes_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TransactionNodes_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblockchain.NewTransactionNodesClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	res, err := client.Update(ctx,
		"contosemember1",
		"txnode2",
		"mygroup",
		&armblockchain.TransactionNodesClientUpdateOptions{TransactionNode: &armblockchain.TransactionNodeUpdate{
			Properties: &armblockchain.TransactionNodePropertiesUpdate{
				Password: to.Ptr("<password>"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/TransactionNodes_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblockchain.TransactionNode{
			Name:     to.Ptr("txnode2"),
			Type:     to.Ptr("Microsoft.Blockchain/blockchainMembers/transactionNodes"),
			ID:       to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Blockchain/blockchainMembers/contosemember1/transactionNodes/txnode2"),
			Location: to.Ptr("southeastasia"),
			Properties: &armblockchain.TransactionNodeProperties{
				DNS:               to.Ptr("txnode1-contosemember1.blockchain.azure.com"),
				ProvisioningState: to.Ptr(armblockchain.NodeProvisioningStateSucceeded),
				PublicKey:         to.Ptr("DbRYTorBtY7rZfNfByUQpdC+hD3k/0lfA7+UnH4ovWM="),
				UserName:          to.Ptr("txnode2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TransactionNode) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TransactionNode)
			t.Fatalf("Mock response is not equal to example response for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/TransactionNodes_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTransactionNodes_List(t *testing.T) {
	// From example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/TransactionNodes_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TransactionNodes_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblockchain.NewTransactionNodesClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	pager := client.List("contosemember1",
		"mygroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/TransactionNodes_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armblockchain.TransactionNodeCollection{
			Value: []*armblockchain.TransactionNode{
				{
					Name:     to.Ptr("txnode2"),
					Type:     to.Ptr("Microsoft.Blockchain/blockchainMembers/transactionNodes"),
					ID:       to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Blockchain/blockchainMembers/contosemember1/transactionNodes/txnode2"),
					Location: to.Ptr("southeastasia"),
					Properties: &armblockchain.TransactionNodeProperties{
						DNS:               to.Ptr("txnode2-contosemember1.blockchain.azure.com"),
						ProvisioningState: to.Ptr(armblockchain.NodeProvisioningStateSucceeded),
						PublicKey:         to.Ptr("DbRYTorBtY7rZfNfByUQpdC+hD3k/0lfA7+UnH4ovWM="),
						UserName:          to.Ptr("txnode2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TransactionNodeCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TransactionNodeCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/blockchain/resource-manager/Microsoft.Blockchain/preview/2018-06-01-preview/examples/TransactionNodes_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
