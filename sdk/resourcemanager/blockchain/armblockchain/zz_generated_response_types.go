//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armblockchain

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"time"
)

// LocationsClientCheckNameAvailabilityResponse contains the response from method LocationsClient.CheckNameAvailability.
type LocationsClientCheckNameAvailabilityResponse struct {
	NameAvailability
}

// LocationsClientListConsortiumsResponse contains the response from method LocationsClient.ListConsortiums.
type LocationsClientListConsortiumsResponse struct {
	ConsortiumCollection
}

// MemberOperationResultsClientGetResponse contains the response from method MemberOperationResultsClient.Get.
type MemberOperationResultsClientGetResponse struct {
	OperationResult
}

// MembersClientCreatePollerResponse contains the response from method MembersClient.Create.
type MembersClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *MembersClientCreatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l MembersClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (MembersClientCreateResponse, error) {
	respType := MembersClientCreateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Member)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a MembersClientCreatePollerResponse from the provided client and resume token.
func (l *MembersClientCreatePollerResponse) Resume(ctx context.Context, client *MembersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("MembersClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &MembersClientCreatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// MembersClientCreateResponse contains the response from method MembersClient.Create.
type MembersClientCreateResponse struct {
	Member
}

// MembersClientDeletePollerResponse contains the response from method MembersClient.Delete.
type MembersClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *MembersClientDeletePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l MembersClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (MembersClientDeleteResponse, error) {
	respType := MembersClientDeleteResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a MembersClientDeletePollerResponse from the provided client and resume token.
func (l *MembersClientDeletePollerResponse) Resume(ctx context.Context, client *MembersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("MembersClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &MembersClientDeletePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// MembersClientDeleteResponse contains the response from method MembersClient.Delete.
type MembersClientDeleteResponse struct {
	// placeholder for future response values
}

// MembersClientGetResponse contains the response from method MembersClient.Get.
type MembersClientGetResponse struct {
	Member
}

// MembersClientListAPIKeysResponse contains the response from method MembersClient.ListAPIKeys.
type MembersClientListAPIKeysResponse struct {
	APIKeyCollection
}

// MembersClientListAllResponse contains the response from method MembersClient.ListAll.
type MembersClientListAllResponse struct {
	MemberCollection
}

// MembersClientListConsortiumMembersResponse contains the response from method MembersClient.ListConsortiumMembers.
type MembersClientListConsortiumMembersResponse struct {
	ConsortiumMemberCollection
}

// MembersClientListRegenerateAPIKeysResponse contains the response from method MembersClient.ListRegenerateAPIKeys.
type MembersClientListRegenerateAPIKeysResponse struct {
	APIKeyCollection
}

// MembersClientListResponse contains the response from method MembersClient.List.
type MembersClientListResponse struct {
	MemberCollection
}

// MembersClientUpdateResponse contains the response from method MembersClient.Update.
type MembersClientUpdateResponse struct {
	Member
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	ResourceProviderOperationCollection
}

// SKUsClientListResponse contains the response from method SKUsClient.List.
type SKUsClientListResponse struct {
	ResourceTypeSKUCollection
}

// TransactionNodesClientCreatePollerResponse contains the response from method TransactionNodesClient.Create.
type TransactionNodesClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *TransactionNodesClientCreatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l TransactionNodesClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (TransactionNodesClientCreateResponse, error) {
	respType := TransactionNodesClientCreateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.TransactionNode)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a TransactionNodesClientCreatePollerResponse from the provided client and resume token.
func (l *TransactionNodesClientCreatePollerResponse) Resume(ctx context.Context, client *TransactionNodesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("TransactionNodesClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &TransactionNodesClientCreatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// TransactionNodesClientCreateResponse contains the response from method TransactionNodesClient.Create.
type TransactionNodesClientCreateResponse struct {
	TransactionNode
}

// TransactionNodesClientDeletePollerResponse contains the response from method TransactionNodesClient.Delete.
type TransactionNodesClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *TransactionNodesClientDeletePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l TransactionNodesClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (TransactionNodesClientDeleteResponse, error) {
	respType := TransactionNodesClientDeleteResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a TransactionNodesClientDeletePollerResponse from the provided client and resume token.
func (l *TransactionNodesClientDeletePollerResponse) Resume(ctx context.Context, client *TransactionNodesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("TransactionNodesClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &TransactionNodesClientDeletePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// TransactionNodesClientDeleteResponse contains the response from method TransactionNodesClient.Delete.
type TransactionNodesClientDeleteResponse struct {
	// placeholder for future response values
}

// TransactionNodesClientGetResponse contains the response from method TransactionNodesClient.Get.
type TransactionNodesClientGetResponse struct {
	TransactionNode
}

// TransactionNodesClientListAPIKeysResponse contains the response from method TransactionNodesClient.ListAPIKeys.
type TransactionNodesClientListAPIKeysResponse struct {
	APIKeyCollection
}

// TransactionNodesClientListRegenerateAPIKeysResponse contains the response from method TransactionNodesClient.ListRegenerateAPIKeys.
type TransactionNodesClientListRegenerateAPIKeysResponse struct {
	APIKeyCollection
}

// TransactionNodesClientListResponse contains the response from method TransactionNodesClient.List.
type TransactionNodesClientListResponse struct {
	TransactionNodeCollection
}

// TransactionNodesClientUpdateResponse contains the response from method TransactionNodesClient.Update.
type TransactionNodesClientUpdateResponse struct {
	TransactionNode
}
