//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmonitor_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/monitor/armmonitor"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestAutoscaleSettings_ListByResourceGroup(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/listAutoscaleSetting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List autoscale settings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewAutoscaleSettingsClient("b67f7fec-69fc-4974-9099-a26bd6ffeda3", cred, &options)
	pager := client.ListByResourceGroup("TestingMetricsScaleSet",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/listAutoscaleSetting.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.AutoscaleSettingResourceCollection{
			Value: []*armmonitor.AutoscaleSettingResource{
				{
					Name:     to.Ptr("MySetting"),
					Type:     to.Ptr("Microsoft.Insights/autoscaleSettings"),
					ID:       to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/microsoft.insights/autoscalesettings/MySetting"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"$type": to.Ptr("Microsoft.WindowsAzure.Management.Common.Storage.CasePreservedDictionary, Microsoft.WindowsAzure.Management.Common.Storage"),
					},
					Properties: &armmonitor.AutoscaleSetting{
						Name:    to.Ptr("MySetting"),
						Enabled: to.Ptr(true),
						Notifications: []*armmonitor.AutoscaleNotification{
							{
								Email: &armmonitor.EmailNotification{
									CustomEmails: []*string{
										to.Ptr("gu@ms.com"),
										to.Ptr("ge@ns.net")},
									SendToSubscriptionAdministrator:    to.Ptr(true),
									SendToSubscriptionCoAdministrators: to.Ptr(true),
								},
								Operation: to.Ptr("Scale"),
								Webhooks: []*armmonitor.WebhookNotification{
									{
										Properties: map[string]*string{},
										ServiceURI: to.Ptr("http://myservice.com"),
									}},
							}},
						Profiles: []*armmonitor.AutoscaleProfile{
							{
								Name: to.Ptr("adios"),
								Capacity: &armmonitor.ScaleCapacity{
									Default: to.Ptr("1"),
									Maximum: to.Ptr("10"),
									Minimum: to.Ptr("1"),
								},
								FixedDate: &armmonitor.TimeWindow{
									End:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-05T14:30:00Z"); return t }()),
									Start:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-05T14:00:00Z"); return t }()),
									TimeZone: to.Ptr("UTC"),
								},
								Rules: []*armmonitor.ScaleRule{
									{
										MetricTrigger: &armmonitor.MetricTrigger{
											DividePerInstance: to.Ptr(false),
											MetricName:        to.Ptr("Percentage CPU"),
											MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
											Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
											Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
											Threshold:         to.Ptr[float64](10),
											TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
											TimeGrain:         to.Ptr("PT1M"),
											TimeWindow:        to.Ptr("PT5M"),
										},
										ScaleAction: &armmonitor.ScaleAction{
											Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
											Cooldown:  to.Ptr("PT5M"),
											Direction: to.Ptr(armmonitor.ScaleDirectionIncrease),
											Value:     to.Ptr("1"),
										},
									},
									{
										MetricTrigger: &armmonitor.MetricTrigger{
											DividePerInstance: to.Ptr(false),
											MetricName:        to.Ptr("Percentage CPU"),
											MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
											Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
											Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
											Threshold:         to.Ptr[float64](15),
											TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
											TimeGrain:         to.Ptr("PT2M"),
											TimeWindow:        to.Ptr("PT5M"),
										},
										ScaleAction: &armmonitor.ScaleAction{
											Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
											Cooldown:  to.Ptr("PT6M"),
											Direction: to.Ptr(armmonitor.ScaleDirectionDecrease),
											Value:     to.Ptr("2"),
										},
									}},
							},
							{
								Name: to.Ptr("saludos"),
								Capacity: &armmonitor.ScaleCapacity{
									Default: to.Ptr("1"),
									Maximum: to.Ptr("10"),
									Minimum: to.Ptr("1"),
								},
								Recurrence: &armmonitor.Recurrence{
									Frequency: to.Ptr(armmonitor.RecurrenceFrequencyWeek),
									Schedule: &armmonitor.RecurrentSchedule{
										Days: []*string{
											to.Ptr("1")},
										Hours: []*int32{
											to.Ptr[int32](5)},
										Minutes: []*int32{
											to.Ptr[int32](15)},
										TimeZone: to.Ptr("UTC"),
									},
								},
								Rules: []*armmonitor.ScaleRule{
									{
										MetricTrigger: &armmonitor.MetricTrigger{
											DividePerInstance: to.Ptr(false),
											MetricName:        to.Ptr("Percentage CPU"),
											MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
											Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
											Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
											Threshold:         to.Ptr[float64](10),
											TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
											TimeGrain:         to.Ptr("PT1M"),
											TimeWindow:        to.Ptr("PT5M"),
										},
										ScaleAction: &armmonitor.ScaleAction{
											Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
											Cooldown:  to.Ptr("PT5M"),
											Direction: to.Ptr(armmonitor.ScaleDirectionIncrease),
											Value:     to.Ptr("1"),
										},
									},
									{
										MetricTrigger: &armmonitor.MetricTrigger{
											DividePerInstance: to.Ptr(false),
											MetricName:        to.Ptr("Percentage CPU"),
											MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
											Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
											Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
											Threshold:         to.Ptr[float64](15),
											TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
											TimeGrain:         to.Ptr("PT2M"),
											TimeWindow:        to.Ptr("PT5M"),
										},
										ScaleAction: &armmonitor.ScaleAction{
											Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
											Cooldown:  to.Ptr("PT6M"),
											Direction: to.Ptr(armmonitor.ScaleDirectionDecrease),
											Value:     to.Ptr("2"),
										},
									}},
							}},
						TargetResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AutoscaleSettingResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AutoscaleSettingResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/listAutoscaleSetting.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutoscaleSettings_CreateOrUpdate(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/createOrUpdateAutoscaleSetting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an autoscale setting"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewAutoscaleSettingsClient("b67f7fec-69fc-4974-9099-a26bd6ffeda3", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"TestingMetricsScaleSet",
		"MySetting",
		armmonitor.AutoscaleSettingResource{
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.AutoscaleSetting{
				Enabled: to.Ptr(true),
				Notifications: []*armmonitor.AutoscaleNotification{
					{
						Email: &armmonitor.EmailNotification{
							CustomEmails: []*string{
								to.Ptr("gu@ms.com"),
								to.Ptr("ge@ns.net")},
							SendToSubscriptionAdministrator:    to.Ptr(true),
							SendToSubscriptionCoAdministrators: to.Ptr(true),
						},
						Operation: to.Ptr("Scale"),
						Webhooks: []*armmonitor.WebhookNotification{
							{
								Properties: map[string]*string{},
								ServiceURI: to.Ptr("http://myservice.com"),
							}},
					}},
				Profiles: []*armmonitor.AutoscaleProfile{
					{
						Name: to.Ptr("adios"),
						Capacity: &armmonitor.ScaleCapacity{
							Default: to.Ptr("1"),
							Maximum: to.Ptr("10"),
							Minimum: to.Ptr("1"),
						},
						FixedDate: &armmonitor.TimeWindow{
							End:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-05T14:30:00Z"); return t }()),
							Start:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-05T14:00:00Z"); return t }()),
							TimeZone: to.Ptr("UTC"),
						},
						Rules: []*armmonitor.ScaleRule{
							{
								MetricTrigger: &armmonitor.MetricTrigger{
									DividePerInstance: to.Ptr(false),
									MetricName:        to.Ptr("Percentage CPU"),
									MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
									Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
									Threshold:         to.Ptr[float64](10),
									TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
									TimeGrain:         to.Ptr("PT1M"),
									TimeWindow:        to.Ptr("PT5M"),
								},
								ScaleAction: &armmonitor.ScaleAction{
									Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
									Cooldown:  to.Ptr("PT5M"),
									Direction: to.Ptr(armmonitor.ScaleDirectionIncrease),
									Value:     to.Ptr("1"),
								},
							},
							{
								MetricTrigger: &armmonitor.MetricTrigger{
									DividePerInstance: to.Ptr(false),
									MetricName:        to.Ptr("Percentage CPU"),
									MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
									Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
									Threshold:         to.Ptr[float64](15),
									TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
									TimeGrain:         to.Ptr("PT2M"),
									TimeWindow:        to.Ptr("PT5M"),
								},
								ScaleAction: &armmonitor.ScaleAction{
									Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
									Cooldown:  to.Ptr("PT6M"),
									Direction: to.Ptr(armmonitor.ScaleDirectionDecrease),
									Value:     to.Ptr("2"),
								},
							}},
					},
					{
						Name: to.Ptr("saludos"),
						Capacity: &armmonitor.ScaleCapacity{
							Default: to.Ptr("1"),
							Maximum: to.Ptr("10"),
							Minimum: to.Ptr("1"),
						},
						Recurrence: &armmonitor.Recurrence{
							Frequency: to.Ptr(armmonitor.RecurrenceFrequencyWeek),
							Schedule: &armmonitor.RecurrentSchedule{
								Days: []*string{
									to.Ptr("1")},
								Hours: []*int32{
									to.Ptr[int32](5)},
								Minutes: []*int32{
									to.Ptr[int32](15)},
								TimeZone: to.Ptr("UTC"),
							},
						},
						Rules: []*armmonitor.ScaleRule{
							{
								MetricTrigger: &armmonitor.MetricTrigger{
									DividePerInstance: to.Ptr(false),
									MetricName:        to.Ptr("Percentage CPU"),
									MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
									Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
									Threshold:         to.Ptr[float64](10),
									TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
									TimeGrain:         to.Ptr("PT1M"),
									TimeWindow:        to.Ptr("PT5M"),
								},
								ScaleAction: &armmonitor.ScaleAction{
									Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
									Cooldown:  to.Ptr("PT5M"),
									Direction: to.Ptr(armmonitor.ScaleDirectionIncrease),
									Value:     to.Ptr("1"),
								},
							},
							{
								MetricTrigger: &armmonitor.MetricTrigger{
									DividePerInstance: to.Ptr(false),
									MetricName:        to.Ptr("Percentage CPU"),
									MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
									Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
									Threshold:         to.Ptr[float64](15),
									TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
									TimeGrain:         to.Ptr("PT2M"),
									TimeWindow:        to.Ptr("PT5M"),
								},
								ScaleAction: &armmonitor.ScaleAction{
									Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
									Cooldown:  to.Ptr("PT6M"),
									Direction: to.Ptr(armmonitor.ScaleDirectionDecrease),
									Value:     to.Ptr("2"),
								},
							}},
					}},
				TargetResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/createOrUpdateAutoscaleSetting.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.AutoscaleSettingResource{
			Name:     to.Ptr("MySetting"),
			Type:     to.Ptr("Microsoft.Insights/autoscaleSettings"),
			ID:       to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/microsoft.insights/autoscalesettings/MySetting"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"$type": to.Ptr("Microsoft.WindowsAzure.Management.Common.Storage.CasePreservedDictionary, Microsoft.WindowsAzure.Management.Common.Storage"),
			},
			Properties: &armmonitor.AutoscaleSetting{
				Name:    to.Ptr("MySetting"),
				Enabled: to.Ptr(true),
				Notifications: []*armmonitor.AutoscaleNotification{
					{
						Email: &armmonitor.EmailNotification{
							CustomEmails: []*string{
								to.Ptr("gu@ms.com"),
								to.Ptr("ge@ns.net")},
							SendToSubscriptionAdministrator:    to.Ptr(true),
							SendToSubscriptionCoAdministrators: to.Ptr(true),
						},
						Operation: to.Ptr("Scale"),
						Webhooks: []*armmonitor.WebhookNotification{
							{
								Properties: map[string]*string{},
								ServiceURI: to.Ptr("http://myservice.com"),
							}},
					}},
				Profiles: []*armmonitor.AutoscaleProfile{
					{
						Name: to.Ptr("adios"),
						Capacity: &armmonitor.ScaleCapacity{
							Default: to.Ptr("1"),
							Maximum: to.Ptr("10"),
							Minimum: to.Ptr("1"),
						},
						FixedDate: &armmonitor.TimeWindow{
							End:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-05T14:30:00Z"); return t }()),
							Start:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-05T14:00:00Z"); return t }()),
							TimeZone: to.Ptr("UTC"),
						},
						Rules: []*armmonitor.ScaleRule{
							{
								MetricTrigger: &armmonitor.MetricTrigger{
									DividePerInstance: to.Ptr(false),
									MetricName:        to.Ptr("Percentage CPU"),
									MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
									Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
									Threshold:         to.Ptr[float64](10),
									TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
									TimeGrain:         to.Ptr("PT1M"),
									TimeWindow:        to.Ptr("PT5M"),
								},
								ScaleAction: &armmonitor.ScaleAction{
									Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
									Cooldown:  to.Ptr("PT5M"),
									Direction: to.Ptr(armmonitor.ScaleDirectionIncrease),
									Value:     to.Ptr("1"),
								},
							},
							{
								MetricTrigger: &armmonitor.MetricTrigger{
									DividePerInstance: to.Ptr(false),
									MetricName:        to.Ptr("Percentage CPU"),
									MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
									Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
									Threshold:         to.Ptr[float64](15),
									TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
									TimeGrain:         to.Ptr("PT2M"),
									TimeWindow:        to.Ptr("PT5M"),
								},
								ScaleAction: &armmonitor.ScaleAction{
									Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
									Cooldown:  to.Ptr("PT6M"),
									Direction: to.Ptr(armmonitor.ScaleDirectionDecrease),
									Value:     to.Ptr("2"),
								},
							}},
					},
					{
						Name: to.Ptr("saludos"),
						Capacity: &armmonitor.ScaleCapacity{
							Default: to.Ptr("1"),
							Maximum: to.Ptr("10"),
							Minimum: to.Ptr("1"),
						},
						Recurrence: &armmonitor.Recurrence{
							Frequency: to.Ptr(armmonitor.RecurrenceFrequencyWeek),
							Schedule: &armmonitor.RecurrentSchedule{
								Days: []*string{
									to.Ptr("1")},
								Hours: []*int32{
									to.Ptr[int32](5)},
								Minutes: []*int32{
									to.Ptr[int32](15)},
								TimeZone: to.Ptr("UTC"),
							},
						},
						Rules: []*armmonitor.ScaleRule{
							{
								MetricTrigger: &armmonitor.MetricTrigger{
									DividePerInstance: to.Ptr(false),
									MetricName:        to.Ptr("Percentage CPU"),
									MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
									Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
									Threshold:         to.Ptr[float64](10),
									TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
									TimeGrain:         to.Ptr("PT1M"),
									TimeWindow:        to.Ptr("PT5M"),
								},
								ScaleAction: &armmonitor.ScaleAction{
									Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
									Cooldown:  to.Ptr("PT5M"),
									Direction: to.Ptr(armmonitor.ScaleDirectionIncrease),
									Value:     to.Ptr("1"),
								},
							},
							{
								MetricTrigger: &armmonitor.MetricTrigger{
									DividePerInstance: to.Ptr(false),
									MetricName:        to.Ptr("Percentage CPU"),
									MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
									Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
									Threshold:         to.Ptr[float64](15),
									TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
									TimeGrain:         to.Ptr("PT2M"),
									TimeWindow:        to.Ptr("PT5M"),
								},
								ScaleAction: &armmonitor.ScaleAction{
									Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
									Cooldown:  to.Ptr("PT6M"),
									Direction: to.Ptr(armmonitor.ScaleDirectionDecrease),
									Value:     to.Ptr("2"),
								},
							}},
					}},
				TargetResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AutoscaleSettingResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AutoscaleSettingResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/createOrUpdateAutoscaleSetting.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutoscaleSettings_Delete(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/deleteAutoscaleSetting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an autoscale setting"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewAutoscaleSettingsClient("b67f7fec-69fc-4974-9099-a26bd6ffeda3", cred, &options)
	_, err := client.Delete(ctx,
		"TestingMetricsScaleSet",
		"MySetting",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/deleteAutoscaleSetting.json: %v", err)
	}
}

func TestAutoscaleSettings_Get(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/getAutoscaleSetting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an autoscale setting"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewAutoscaleSettingsClient("b67f7fec-69fc-4974-9099-a26bd6ffeda3", cred, &options)
	res, err := client.Get(ctx,
		"TestingMetricsScaleSet",
		"MySetting",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/getAutoscaleSetting.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.AutoscaleSettingResource{
			Name:     to.Ptr("MySetting"),
			Type:     to.Ptr("Microsoft.Insights/autoscaleSettings"),
			ID:       to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/microsoft.insights/autoscalesettings/MySetting"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"$type": to.Ptr("Microsoft.WindowsAzure.Management.Common.Storage.CasePreservedDictionary, Microsoft.WindowsAzure.Management.Common.Storage"),
			},
			Properties: &armmonitor.AutoscaleSetting{
				Name:    to.Ptr("MySetting"),
				Enabled: to.Ptr(true),
				Notifications: []*armmonitor.AutoscaleNotification{
					{
						Email: &armmonitor.EmailNotification{
							CustomEmails: []*string{
								to.Ptr("gu@ms.com"),
								to.Ptr("ge@ns.net")},
							SendToSubscriptionAdministrator:    to.Ptr(true),
							SendToSubscriptionCoAdministrators: to.Ptr(true),
						},
						Operation: to.Ptr("Scale"),
						Webhooks: []*armmonitor.WebhookNotification{
							{
								Properties: map[string]*string{},
								ServiceURI: to.Ptr("http://myservice.com"),
							}},
					}},
				Profiles: []*armmonitor.AutoscaleProfile{
					{
						Name: to.Ptr("adios"),
						Capacity: &armmonitor.ScaleCapacity{
							Default: to.Ptr("1"),
							Maximum: to.Ptr("10"),
							Minimum: to.Ptr("1"),
						},
						FixedDate: &armmonitor.TimeWindow{
							End:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-05T14:30:00Z"); return t }()),
							Start:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-05T14:00:00Z"); return t }()),
							TimeZone: to.Ptr("UTC"),
						},
						Rules: []*armmonitor.ScaleRule{
							{
								MetricTrigger: &armmonitor.MetricTrigger{
									DividePerInstance: to.Ptr(false),
									MetricName:        to.Ptr("Percentage CPU"),
									MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
									Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
									Threshold:         to.Ptr[float64](10),
									TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
									TimeGrain:         to.Ptr("PT1M"),
									TimeWindow:        to.Ptr("PT5M"),
								},
								ScaleAction: &armmonitor.ScaleAction{
									Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
									Cooldown:  to.Ptr("PT5M"),
									Direction: to.Ptr(armmonitor.ScaleDirectionIncrease),
									Value:     to.Ptr("1"),
								},
							},
							{
								MetricTrigger: &armmonitor.MetricTrigger{
									DividePerInstance: to.Ptr(false),
									MetricName:        to.Ptr("Percentage CPU"),
									MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
									Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
									Threshold:         to.Ptr[float64](15),
									TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
									TimeGrain:         to.Ptr("PT2M"),
									TimeWindow:        to.Ptr("PT5M"),
								},
								ScaleAction: &armmonitor.ScaleAction{
									Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
									Cooldown:  to.Ptr("PT6M"),
									Direction: to.Ptr(armmonitor.ScaleDirectionDecrease),
									Value:     to.Ptr("2"),
								},
							}},
					},
					{
						Name: to.Ptr("saludos"),
						Capacity: &armmonitor.ScaleCapacity{
							Default: to.Ptr("1"),
							Maximum: to.Ptr("10"),
							Minimum: to.Ptr("1"),
						},
						Recurrence: &armmonitor.Recurrence{
							Frequency: to.Ptr(armmonitor.RecurrenceFrequencyWeek),
							Schedule: &armmonitor.RecurrentSchedule{
								Days: []*string{
									to.Ptr("1")},
								Hours: []*int32{
									to.Ptr[int32](5)},
								Minutes: []*int32{
									to.Ptr[int32](15)},
								TimeZone: to.Ptr("UTC"),
							},
						},
						Rules: []*armmonitor.ScaleRule{
							{
								MetricTrigger: &armmonitor.MetricTrigger{
									DividePerInstance: to.Ptr(false),
									MetricName:        to.Ptr("Percentage CPU"),
									MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
									Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
									Threshold:         to.Ptr[float64](10),
									TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
									TimeGrain:         to.Ptr("PT1M"),
									TimeWindow:        to.Ptr("PT5M"),
								},
								ScaleAction: &armmonitor.ScaleAction{
									Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
									Cooldown:  to.Ptr("PT5M"),
									Direction: to.Ptr(armmonitor.ScaleDirectionIncrease),
									Value:     to.Ptr("1"),
								},
							},
							{
								MetricTrigger: &armmonitor.MetricTrigger{
									DividePerInstance: to.Ptr(false),
									MetricName:        to.Ptr("Percentage CPU"),
									MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
									Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
									Threshold:         to.Ptr[float64](15),
									TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
									TimeGrain:         to.Ptr("PT2M"),
									TimeWindow:        to.Ptr("PT5M"),
								},
								ScaleAction: &armmonitor.ScaleAction{
									Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
									Cooldown:  to.Ptr("PT6M"),
									Direction: to.Ptr(armmonitor.ScaleDirectionDecrease),
									Value:     to.Ptr("2"),
								},
							}},
					}},
				TargetResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AutoscaleSettingResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AutoscaleSettingResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/getAutoscaleSetting.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutoscaleSettings_Update(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/patchAutoscaleSetting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch an autoscale setting"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewAutoscaleSettingsClient("b67f7fec-69fc-4974-9099-a26bd6ffeda3", cred, &options)
	res, err := client.Update(ctx,
		"TestingMetricsScaleSet",
		"MySetting",
		armmonitor.AutoscaleSettingResourcePatch{
			Properties: &armmonitor.AutoscaleSetting{
				Enabled: to.Ptr(true),
				Notifications: []*armmonitor.AutoscaleNotification{
					{
						Email: &armmonitor.EmailNotification{
							CustomEmails: []*string{
								to.Ptr("gu@ms.com"),
								to.Ptr("ge@ns.net")},
							SendToSubscriptionAdministrator:    to.Ptr(true),
							SendToSubscriptionCoAdministrators: to.Ptr(true),
						},
						Operation: to.Ptr("Scale"),
						Webhooks: []*armmonitor.WebhookNotification{
							{
								Properties: map[string]*string{},
								ServiceURI: to.Ptr("http://myservice.com"),
							}},
					}},
				Profiles: []*armmonitor.AutoscaleProfile{
					{
						Name: to.Ptr("adios"),
						Capacity: &armmonitor.ScaleCapacity{
							Default: to.Ptr("1"),
							Maximum: to.Ptr("10"),
							Minimum: to.Ptr("1"),
						},
						FixedDate: &armmonitor.TimeWindow{
							End:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-05T14:30:00Z"); return t }()),
							Start:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-05T14:00:00Z"); return t }()),
							TimeZone: to.Ptr("UTC"),
						},
						Rules: []*armmonitor.ScaleRule{
							{
								MetricTrigger: &armmonitor.MetricTrigger{
									DividePerInstance: to.Ptr(false),
									MetricName:        to.Ptr("Percentage CPU"),
									MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
									Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
									Threshold:         to.Ptr[float64](10),
									TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
									TimeGrain:         to.Ptr("PT1M"),
									TimeWindow:        to.Ptr("PT5M"),
								},
								ScaleAction: &armmonitor.ScaleAction{
									Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
									Cooldown:  to.Ptr("PT5M"),
									Direction: to.Ptr(armmonitor.ScaleDirectionIncrease),
									Value:     to.Ptr("1"),
								},
							},
							{
								MetricTrigger: &armmonitor.MetricTrigger{
									DividePerInstance: to.Ptr(false),
									MetricName:        to.Ptr("Percentage CPU"),
									MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
									Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
									Threshold:         to.Ptr[float64](15),
									TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
									TimeGrain:         to.Ptr("PT2M"),
									TimeWindow:        to.Ptr("PT5M"),
								},
								ScaleAction: &armmonitor.ScaleAction{
									Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
									Cooldown:  to.Ptr("PT6M"),
									Direction: to.Ptr(armmonitor.ScaleDirectionDecrease),
									Value:     to.Ptr("2"),
								},
							}},
					},
					{
						Name: to.Ptr("saludos"),
						Capacity: &armmonitor.ScaleCapacity{
							Default: to.Ptr("1"),
							Maximum: to.Ptr("10"),
							Minimum: to.Ptr("1"),
						},
						Recurrence: &armmonitor.Recurrence{
							Frequency: to.Ptr(armmonitor.RecurrenceFrequencyWeek),
							Schedule: &armmonitor.RecurrentSchedule{
								Days: []*string{
									to.Ptr("1")},
								Hours: []*int32{
									to.Ptr[int32](5)},
								Minutes: []*int32{
									to.Ptr[int32](15)},
								TimeZone: to.Ptr("UTC"),
							},
						},
						Rules: []*armmonitor.ScaleRule{
							{
								MetricTrigger: &armmonitor.MetricTrigger{
									DividePerInstance: to.Ptr(false),
									MetricName:        to.Ptr("Percentage CPU"),
									MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
									Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
									Threshold:         to.Ptr[float64](10),
									TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
									TimeGrain:         to.Ptr("PT1M"),
									TimeWindow:        to.Ptr("PT5M"),
								},
								ScaleAction: &armmonitor.ScaleAction{
									Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
									Cooldown:  to.Ptr("PT5M"),
									Direction: to.Ptr(armmonitor.ScaleDirectionIncrease),
									Value:     to.Ptr("1"),
								},
							},
							{
								MetricTrigger: &armmonitor.MetricTrigger{
									DividePerInstance: to.Ptr(false),
									MetricName:        to.Ptr("Percentage CPU"),
									MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
									Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
									Threshold:         to.Ptr[float64](15),
									TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
									TimeGrain:         to.Ptr("PT2M"),
									TimeWindow:        to.Ptr("PT5M"),
								},
								ScaleAction: &armmonitor.ScaleAction{
									Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
									Cooldown:  to.Ptr("PT6M"),
									Direction: to.Ptr(armmonitor.ScaleDirectionDecrease),
									Value:     to.Ptr("2"),
								},
							}},
					}},
				TargetResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
			},
			Tags: map[string]*string{
				"$type": to.Ptr("Microsoft.WindowsAzure.Management.Common.Storage.CasePreservedDictionary"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/patchAutoscaleSetting.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.AutoscaleSettingResource{
			Name:     to.Ptr("MySetting"),
			Type:     to.Ptr("Microsoft.Insights/autoscaleSettings"),
			ID:       to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/microsoft.insights/autoscalesettings/MySetting"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"$type": to.Ptr("Microsoft.WindowsAzure.Management.Common.Storage.CasePreservedDictionary"),
			},
			Properties: &armmonitor.AutoscaleSetting{
				Name:    to.Ptr("MySetting"),
				Enabled: to.Ptr(true),
				Notifications: []*armmonitor.AutoscaleNotification{
					{
						Email: &armmonitor.EmailNotification{
							CustomEmails: []*string{
								to.Ptr("gu@ms.com"),
								to.Ptr("ge@ns.net")},
							SendToSubscriptionAdministrator:    to.Ptr(true),
							SendToSubscriptionCoAdministrators: to.Ptr(true),
						},
						Operation: to.Ptr("Scale"),
						Webhooks: []*armmonitor.WebhookNotification{
							{
								Properties: map[string]*string{},
								ServiceURI: to.Ptr("http://myservice.com"),
							}},
					}},
				Profiles: []*armmonitor.AutoscaleProfile{
					{
						Name: to.Ptr("adios"),
						Capacity: &armmonitor.ScaleCapacity{
							Default: to.Ptr("1"),
							Maximum: to.Ptr("10"),
							Minimum: to.Ptr("1"),
						},
						FixedDate: &armmonitor.TimeWindow{
							End:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-05T14:30:00Z"); return t }()),
							Start:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-05T14:00:00Z"); return t }()),
							TimeZone: to.Ptr("UTC"),
						},
						Rules: []*armmonitor.ScaleRule{
							{
								MetricTrigger: &armmonitor.MetricTrigger{
									DividePerInstance: to.Ptr(false),
									MetricName:        to.Ptr("Percentage CPU"),
									MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
									Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
									Threshold:         to.Ptr[float64](10),
									TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
									TimeGrain:         to.Ptr("PT1M"),
									TimeWindow:        to.Ptr("PT5M"),
								},
								ScaleAction: &armmonitor.ScaleAction{
									Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
									Cooldown:  to.Ptr("PT5M"),
									Direction: to.Ptr(armmonitor.ScaleDirectionIncrease),
									Value:     to.Ptr("1"),
								},
							},
							{
								MetricTrigger: &armmonitor.MetricTrigger{
									DividePerInstance: to.Ptr(false),
									MetricName:        to.Ptr("Percentage CPU"),
									MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
									Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
									Threshold:         to.Ptr[float64](15),
									TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
									TimeGrain:         to.Ptr("PT2M"),
									TimeWindow:        to.Ptr("PT5M"),
								},
								ScaleAction: &armmonitor.ScaleAction{
									Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
									Cooldown:  to.Ptr("PT6M"),
									Direction: to.Ptr(armmonitor.ScaleDirectionDecrease),
									Value:     to.Ptr("2"),
								},
							}},
					},
					{
						Name: to.Ptr("saludos"),
						Capacity: &armmonitor.ScaleCapacity{
							Default: to.Ptr("1"),
							Maximum: to.Ptr("10"),
							Minimum: to.Ptr("1"),
						},
						Recurrence: &armmonitor.Recurrence{
							Frequency: to.Ptr(armmonitor.RecurrenceFrequencyWeek),
							Schedule: &armmonitor.RecurrentSchedule{
								Days: []*string{
									to.Ptr("1")},
								Hours: []*int32{
									to.Ptr[int32](5)},
								Minutes: []*int32{
									to.Ptr[int32](15)},
								TimeZone: to.Ptr("UTC"),
							},
						},
						Rules: []*armmonitor.ScaleRule{
							{
								MetricTrigger: &armmonitor.MetricTrigger{
									DividePerInstance: to.Ptr(false),
									MetricName:        to.Ptr("Percentage CPU"),
									MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
									Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
									Threshold:         to.Ptr[float64](10),
									TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
									TimeGrain:         to.Ptr("PT1M"),
									TimeWindow:        to.Ptr("PT5M"),
								},
								ScaleAction: &armmonitor.ScaleAction{
									Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
									Cooldown:  to.Ptr("PT5M"),
									Direction: to.Ptr(armmonitor.ScaleDirectionIncrease),
									Value:     to.Ptr("1"),
								},
							},
							{
								MetricTrigger: &armmonitor.MetricTrigger{
									DividePerInstance: to.Ptr(false),
									MetricName:        to.Ptr("Percentage CPU"),
									MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
									Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
									Threshold:         to.Ptr[float64](15),
									TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
									TimeGrain:         to.Ptr("PT2M"),
									TimeWindow:        to.Ptr("PT5M"),
								},
								ScaleAction: &armmonitor.ScaleAction{
									Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
									Cooldown:  to.Ptr("PT6M"),
									Direction: to.Ptr(armmonitor.ScaleDirectionDecrease),
									Value:     to.Ptr("2"),
								},
							}},
					}},
				TargetResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AutoscaleSettingResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AutoscaleSettingResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/patchAutoscaleSetting.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutoscaleSettings_ListBySubscription(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/listAutoscaleSettingBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List autoscale settings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewAutoscaleSettingsClient("b67f7fec-69fc-4974-9099-a26bd6ffeda3", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/listAutoscaleSettingBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.AutoscaleSettingResourceCollection{
			Value: []*armmonitor.AutoscaleSettingResource{
				{
					Name:     to.Ptr("MySetting"),
					Type:     to.Ptr("Microsoft.Insights/autoscaleSettings"),
					ID:       to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/microsoft.insights/autoscalesettings/MySetting"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"$type": to.Ptr("Microsoft.WindowsAzure.Management.Common.Storage.CasePreservedDictionary, Microsoft.WindowsAzure.Management.Common.Storage"),
					},
					Properties: &armmonitor.AutoscaleSetting{
						Name:    to.Ptr("MySetting"),
						Enabled: to.Ptr(true),
						Notifications: []*armmonitor.AutoscaleNotification{
							{
								Email: &armmonitor.EmailNotification{
									CustomEmails: []*string{
										to.Ptr("gu@ms.com"),
										to.Ptr("ge@ns.net")},
									SendToSubscriptionAdministrator:    to.Ptr(true),
									SendToSubscriptionCoAdministrators: to.Ptr(true),
								},
								Operation: to.Ptr("Scale"),
								Webhooks: []*armmonitor.WebhookNotification{
									{
										Properties: map[string]*string{},
										ServiceURI: to.Ptr("http://myservice.com"),
									}},
							}},
						Profiles: []*armmonitor.AutoscaleProfile{
							{
								Name: to.Ptr("adios"),
								Capacity: &armmonitor.ScaleCapacity{
									Default: to.Ptr("1"),
									Maximum: to.Ptr("10"),
									Minimum: to.Ptr("1"),
								},
								FixedDate: &armmonitor.TimeWindow{
									End:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-05T14:30:00Z"); return t }()),
									Start:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-05T14:00:00Z"); return t }()),
									TimeZone: to.Ptr("UTC"),
								},
								Rules: []*armmonitor.ScaleRule{
									{
										MetricTrigger: &armmonitor.MetricTrigger{
											DividePerInstance: to.Ptr(false),
											MetricName:        to.Ptr("Percentage CPU"),
											MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
											Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
											Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
											Threshold:         to.Ptr[float64](10),
											TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
											TimeGrain:         to.Ptr("PT1M"),
											TimeWindow:        to.Ptr("PT5M"),
										},
										ScaleAction: &armmonitor.ScaleAction{
											Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
											Cooldown:  to.Ptr("PT5M"),
											Direction: to.Ptr(armmonitor.ScaleDirectionIncrease),
											Value:     to.Ptr("1"),
										},
									},
									{
										MetricTrigger: &armmonitor.MetricTrigger{
											DividePerInstance: to.Ptr(false),
											MetricName:        to.Ptr("Percentage CPU"),
											MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
											Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
											Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
											Threshold:         to.Ptr[float64](15),
											TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
											TimeGrain:         to.Ptr("PT2M"),
											TimeWindow:        to.Ptr("PT5M"),
										},
										ScaleAction: &armmonitor.ScaleAction{
											Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
											Cooldown:  to.Ptr("PT6M"),
											Direction: to.Ptr(armmonitor.ScaleDirectionDecrease),
											Value:     to.Ptr("2"),
										},
									}},
							},
							{
								Name: to.Ptr("saludos"),
								Capacity: &armmonitor.ScaleCapacity{
									Default: to.Ptr("1"),
									Maximum: to.Ptr("10"),
									Minimum: to.Ptr("1"),
								},
								Recurrence: &armmonitor.Recurrence{
									Frequency: to.Ptr(armmonitor.RecurrenceFrequencyWeek),
									Schedule: &armmonitor.RecurrentSchedule{
										Days: []*string{
											to.Ptr("1")},
										Hours: []*int32{
											to.Ptr[int32](5)},
										Minutes: []*int32{
											to.Ptr[int32](15)},
										TimeZone: to.Ptr("UTC"),
									},
								},
								Rules: []*armmonitor.ScaleRule{
									{
										MetricTrigger: &armmonitor.MetricTrigger{
											DividePerInstance: to.Ptr(false),
											MetricName:        to.Ptr("Percentage CPU"),
											MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
											Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
											Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
											Threshold:         to.Ptr[float64](10),
											TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
											TimeGrain:         to.Ptr("PT1M"),
											TimeWindow:        to.Ptr("PT5M"),
										},
										ScaleAction: &armmonitor.ScaleAction{
											Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
											Cooldown:  to.Ptr("PT5M"),
											Direction: to.Ptr(armmonitor.ScaleDirectionIncrease),
											Value:     to.Ptr("1"),
										},
									},
									{
										MetricTrigger: &armmonitor.MetricTrigger{
											DividePerInstance: to.Ptr(false),
											MetricName:        to.Ptr("Percentage CPU"),
											MetricResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
											Operator:          to.Ptr(armmonitor.ComparisonOperationTypeGreaterThan),
											Statistic:         to.Ptr(armmonitor.MetricStatisticTypeAverage),
											Threshold:         to.Ptr[float64](15),
											TimeAggregation:   to.Ptr(armmonitor.TimeAggregationTypeAverage),
											TimeGrain:         to.Ptr("PT2M"),
											TimeWindow:        to.Ptr("PT5M"),
										},
										ScaleAction: &armmonitor.ScaleAction{
											Type:      to.Ptr(armmonitor.ScaleTypeChangeCount),
											Cooldown:  to.Ptr("PT6M"),
											Direction: to.Ptr(armmonitor.ScaleDirectionDecrease),
											Value:     to.Ptr("2"),
										},
									}},
							}},
						TargetResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AutoscaleSettingResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AutoscaleSettingResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/listAutoscaleSettingBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/OperationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of operations for a resource provider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewOperationsClient(cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/OperationList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.OperationListResult{
			Value: []*armmonitor.Operation{
				{
					Name: to.Ptr("Microsoft.Insights/Operations/Read"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Operations read"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Operations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/MetricDefinitions/Read"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Metric definitions read"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Metric Definitions"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/Metrics/Read"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Metrics read"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Metrics"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/AlertRules/Write"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Alert Rule write"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Alert Rules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/AlertRules/Delete"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Alert Rule delete"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Alert Rules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/AlertRules/Read"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Alert Rule read"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Alert Rules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/MetricAlerts/Write"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Metric alert write"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Metric alerts"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/MetricAlerts/Delete"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Metric alert delete"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Metric alerts"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/MetricAlerts/Read"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Metric alert read"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Metric alerts"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/AutoscaleSettings/Write"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Autoscale Setting write"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Autoscale"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/AutoscaleSettings/Delete"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Autoscale Setting delete"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Autoscale"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/AutoscaleSettings/Read"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Autoscale Setting read"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Autoscale"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/AlertRules/Incidents/Read"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Alert Rule Incidents read"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Alert Rule Incident resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/AutoscaleSettings/providers/Microsoft.Insights/MetricDefinitions/Read"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Metric definitions read"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Metric Definitions"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/ActionGroups/Write"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Action group write"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Action groups"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/ActionGroups/Delete"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Action group delete"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Action groups"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/ActionGroups/Read"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Action group read"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Action groups"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/ActivityLogAlerts/Write"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Activity log alert read"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Activity log alert"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/ActivityLogAlerts/Delete"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Activity log alert delete"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Activity log alert"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/ActivityLogAlerts/Read"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Activity log alert read"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Activity log alert"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/ActivityLogAlerts/Activated/Action"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Activity Log Alert Activated"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Activity Log Alert"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/EventCategories/Read"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Event category read"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Event category"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/eventtypes/values/Read"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Event types management values read"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Events"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/eventtypes/digestevents/Read"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Event types management digest read"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Digest events"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/DiagnosticSettings/Write"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Diagnostic settings write"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Diagnostic settings"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/DiagnosticSettings/Delete"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Diagnostic settings delete"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Diagnostic settings"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/DiagnosticSettings/Read"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Diagnostic settings read"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Diagnostic settings"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/ExtendedDiagnosticSettings/Write"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Extended Diagnostic settings write"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Extended Diagnostic settings"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/ExtendedDiagnosticSettings/Delete"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Extended Diagnostic settings delete"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Extended Diagnostic settings"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/ExtendedDiagnosticSettings/Read"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Extended Diagnostic settings read"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Extended Diagnostic settings"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/LogProfiles/Write"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Log profile write"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Log Profiles"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/LogProfiles/Delete"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Log profile delete"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Log Profiles"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/LogProfiles/Read"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Log profile read"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Log Profiles"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/LogDefinitions/Read"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Log Definitions read"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Log Definitions"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/AutoscaleSettings/Scaleup/Action"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Autoscale scale up operation"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Autoscale"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/AutoscaleSettings/Scaledown/Action"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Autoscale scale down operation"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Autoscale"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/AlertRules/Activated/Action"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Alert Rule activated"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Alert Rules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/AlertRules/Resolved/Action"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Alert Rule resolved"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Alert Rules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/AlertRules/Throttled/Action"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Alert Rule throttled"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Alert Rules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/Register/Action"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Register Microsoft.Insights"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Microsoft.Insights"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/Components/Write"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Application insights component write"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Application insights components"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/Components/Delete"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Application insights component delete"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Application insights components"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/Components/Read"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Application insights component read"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Application insights components"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/Webtests/Write"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Webtest write"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Web tests"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/Webtests/Delete"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Webtest delete"),
						Provider:  to.Ptr("Microsoft Monitoring Insights"),
						Resource:  to.Ptr("Web tests"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/Workbooks/Read"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Workbooks read"),
						Provider:  to.Ptr("Microsoft Application Insights"),
						Resource:  to.Ptr("Workbooks"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/Workbooks/Write"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Workbooks write"),
						Provider:  to.Ptr("Microsoft Application Insights"),
						Resource:  to.Ptr("Workbooks"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/Workbooks/Delete"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Workbooks delete"),
						Provider:  to.Ptr("Microsoft Application Insights"),
						Resource:  to.Ptr("Workbooks"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Insights/Workbooks/Read"),
					Display: &armmonitor.OperationDisplay{
						Operation: to.Ptr("Workbooks read"),
						Provider:  to.Ptr("Microsoft Application Insights"),
						Resource:  to.Ptr("Workbooks"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/OperationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlertRuleIncidents_Get(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/getAlertRuleIncident.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a single alert rule incident"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewAlertRuleIncidentsClient("b67f7fec-69fc-4974-9099-a26bd6ffeda3", cred, &options)
	res, err := client.Get(ctx,
		"Rac46PostSwapRG",
		"myRuleName",
		"Website_started",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/getAlertRuleIncident.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.Incident{
			Name:          to.Ptr("Website_started"),
			ActivatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-13T15:45:26.9792776Z"); return t }()),
			IsActive:      to.Ptr(true),
			ResolvedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-13T22:14:28.9792776Z"); return t }()),
			RuleName:      to.Ptr("myRuleName"),
		}
		if !reflect.DeepEqual(exampleRes, res.Incident) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Incident)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/getAlertRuleIncident.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlertRuleIncidents_ListByAlertRule(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/listAlertRuleIncidents.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List alert rule incidents"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewAlertRuleIncidentsClient("b67f7fec-69fc-4974-9099-a26bd6ffeda3", cred, &options)
	pager := client.ListByAlertRule("Rac46PostSwapRG",
		"myRuleName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/listAlertRuleIncidents.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.IncidentListResult{
			Value: []*armmonitor.Incident{
				{
					Name:          to.Ptr("Website_started"),
					ActivatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-13T15:45:26.9792776Z"); return t }()),
					IsActive:      to.Ptr(true),
					ResolvedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-13T22:14:28.9792776Z"); return t }()),
					RuleName:      to.Ptr("myRuleName"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IncidentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IncidentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/listAlertRuleIncidents.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlertRules_CreateOrUpdate(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/createOrUpdateAlertRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an alert rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewAlertRulesClient("b67f7fec-69fc-4974-9099-a26bd6ffeda3", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"Rac46PostSwapRG",
		"chiricutin",
		armmonitor.AlertRuleResource{
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.AlertRule{
				Name:        to.Ptr("chiricutin"),
				Description: to.Ptr("Pura Vida"),
				Actions:     []armmonitor.RuleActionClassification{},
				Condition: &armmonitor.ThresholdRuleCondition{
					DataSource: &armmonitor.RuleMetricDataSource{
						ODataType:   to.Ptr("Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource"),
						ResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest"),
						MetricName:  to.Ptr("Requests"),
					},
					ODataType:       to.Ptr("Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition"),
					Operator:        to.Ptr(armmonitor.ConditionOperatorGreaterThan),
					Threshold:       to.Ptr[float64](3),
					TimeAggregation: to.Ptr(armmonitor.TimeAggregationOperatorTotal),
					WindowSize:      to.Ptr("PT5M"),
				},
				IsEnabled: to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/createOrUpdateAlertRule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.AlertRuleResource{
			Name:     to.Ptr("chiricutin"),
			Type:     to.Ptr("Microsoft.Insights/alertRules"),
			ID:       to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/alertrules/chiricutin"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"$type": to.Ptr("Microsoft.WindowsAzure.Management.Common.Storage.CasePreservedDictionary, Microsoft.WindowsAzure.Management.Common.Storage"),
				"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
			},
			Properties: &armmonitor.AlertRule{
				Name:        to.Ptr("chiricutin"),
				Description: to.Ptr("Pura Vida"),
				Actions:     []armmonitor.RuleActionClassification{},
				Condition: &armmonitor.ThresholdRuleCondition{
					DataSource: &armmonitor.RuleMetricDataSource{
						ODataType:   to.Ptr("Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource"),
						ResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest"),
						MetricName:  to.Ptr("Requests"),
					},
					ODataType:       to.Ptr("Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition"),
					Operator:        to.Ptr(armmonitor.ConditionOperatorGreaterThan),
					Threshold:       to.Ptr[float64](3),
					TimeAggregation: to.Ptr(armmonitor.TimeAggregationOperatorTotal),
					WindowSize:      to.Ptr("PT5M"),
				},
				IsEnabled:       to.Ptr(true),
				LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-11-23T21:23:52.0221265Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertRuleResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertRuleResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/createOrUpdateAlertRule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlertRules_Delete(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/deleteAlertRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an alert rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewAlertRulesClient("b67f7fec-69fc-4974-9099-a26bd6ffeda3", cred, &options)
	_, err := client.Delete(ctx,
		"Rac46PostSwapRG",
		"chiricutin",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/deleteAlertRule.json: %v", err)
	}
}

func TestAlertRules_Get(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/getAlertRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an alert rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewAlertRulesClient("b67f7fec-69fc-4974-9099-a26bd6ffeda3", cred, &options)
	res, err := client.Get(ctx,
		"Rac46PostSwapRG",
		"chiricutin",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/getAlertRule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.AlertRuleResource{
			Name:     to.Ptr("chiricutin"),
			Type:     to.Ptr("Microsoft.Insights/alertRules"),
			ID:       to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/alertrules/chiricutin"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"$type": to.Ptr("Microsoft.WindowsAzure.Management.Common.Storage.CasePreservedDictionary, Microsoft.WindowsAzure.Management.Common.Storage"),
				"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
			},
			Properties: &armmonitor.AlertRule{
				Name:        to.Ptr("chiricutin"),
				Description: to.Ptr("Pura Vida"),
				Actions:     []armmonitor.RuleActionClassification{},
				Condition: &armmonitor.ThresholdRuleCondition{
					DataSource: &armmonitor.RuleMetricDataSource{
						ODataType:   to.Ptr("Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource"),
						ResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest"),
						MetricName:  to.Ptr("Requests"),
					},
					ODataType:       to.Ptr("Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition"),
					Operator:        to.Ptr(armmonitor.ConditionOperatorGreaterThan),
					Threshold:       to.Ptr[float64](3),
					TimeAggregation: to.Ptr(armmonitor.TimeAggregationOperatorTotal),
					WindowSize:      to.Ptr("PT5M"),
				},
				IsEnabled:       to.Ptr(true),
				LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-11-23T21:23:52.0221265Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertRuleResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertRuleResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/getAlertRule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlertRules_Update(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/patchAlertRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch an alert rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewAlertRulesClient("b67f7fec-69fc-4974-9099-a26bd6ffeda3", cred, &options)
	res, err := client.Update(ctx,
		"Rac46PostSwapRG",
		"chiricutin",
		armmonitor.AlertRuleResourcePatch{
			Properties: &armmonitor.AlertRule{
				Name:        to.Ptr("chiricutin"),
				Description: to.Ptr("Pura Vida"),
				Actions:     []armmonitor.RuleActionClassification{},
				Condition: &armmonitor.ThresholdRuleCondition{
					DataSource: &armmonitor.RuleMetricDataSource{
						ODataType:   to.Ptr("Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource"),
						ResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest"),
						MetricName:  to.Ptr("Requests"),
					},
					ODataType:       to.Ptr("Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition"),
					Operator:        to.Ptr(armmonitor.ConditionOperatorGreaterThan),
					Threshold:       to.Ptr[float64](3),
					TimeAggregation: to.Ptr(armmonitor.TimeAggregationOperatorTotal),
					WindowSize:      to.Ptr("PT5M"),
				},
				IsEnabled: to.Ptr(true),
			},
			Tags: map[string]*string{
				"$type": to.Ptr("Microsoft.WindowsAzure.Management.Common.Storage.CasePreservedDictionary"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/patchAlertRule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.AlertRuleResource{
			Name:     to.Ptr("chiricutin"),
			Type:     to.Ptr("Microsoft.Insights/alertRules"),
			ID:       to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/alertrules/chiricutin"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"$type": to.Ptr("Microsoft.WindowsAzure.Management.Common.Storage.CasePreservedDictionary"),
			},
			Properties: &armmonitor.AlertRule{
				Name:        to.Ptr("chiricutin"),
				Description: to.Ptr("Pura Vida"),
				Actions:     []armmonitor.RuleActionClassification{},
				Condition: &armmonitor.ThresholdRuleCondition{
					DataSource: &armmonitor.RuleMetricDataSource{
						ODataType:   to.Ptr("Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource"),
						ResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest"),
						MetricName:  to.Ptr("Requests"),
					},
					ODataType:       to.Ptr("Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition"),
					Operator:        to.Ptr(armmonitor.ConditionOperatorGreaterThan),
					Threshold:       to.Ptr[float64](3),
					TimeAggregation: to.Ptr(armmonitor.TimeAggregationOperatorTotal),
					WindowSize:      to.Ptr("PT5M"),
				},
				IsEnabled:       to.Ptr(true),
				LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-11-23T21:23:52.0221265Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertRuleResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertRuleResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/patchAlertRule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlertRules_ListByResourceGroup(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/listAlertRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List alert rules"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewAlertRulesClient("b67f7fec-69fc-4974-9099-a26bd6ffeda3", cred, &options)
	pager := client.ListByResourceGroup("Rac46PostSwapRG",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/listAlertRule.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.AlertRuleResourceCollection{
			Value: []*armmonitor.AlertRuleResource{
				{
					Name:     to.Ptr("myRuleName"),
					Type:     to.Ptr("Microsoft.Insights/alertRules"),
					ID:       to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/alertrules/myRuleName"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"$type": to.Ptr("Microsoft.WindowsAzure.Management.Common.Storage.CasePreservedDictionary, Microsoft.WindowsAzure.Management.Common.Storage"),
						"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
					},
					Properties: &armmonitor.AlertRule{
						Name:        to.Ptr("myRuleName"),
						Description: to.Ptr("Pura Vida"),
						Actions: []armmonitor.RuleActionClassification{
							&armmonitor.RuleEmailAction{
								ODataType: to.Ptr("Microsoft.Azure.Management.Insights.Models.RuleEmailAction"),
								CustomEmails: []*string{
									to.Ptr("gu@ms.com"),
									to.Ptr("su@ms.net")},
								SendToServiceOwners: to.Ptr(true),
							}},
						Condition: &armmonitor.ThresholdRuleCondition{
							DataSource: &armmonitor.RuleMetricDataSource{
								ODataType:   to.Ptr("Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource"),
								ResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest"),
								MetricName:  to.Ptr("Requests"),
							},
							ODataType:       to.Ptr("Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition"),
							Operator:        to.Ptr(armmonitor.ConditionOperatorGreaterThan),
							Threshold:       to.Ptr[float64](2),
							TimeAggregation: to.Ptr(armmonitor.TimeAggregationOperatorTotal),
							WindowSize:      to.Ptr("PT5M"),
						},
						IsEnabled:       to.Ptr(true),
						LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-11-10T21:04:39.0005255Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("chiricutin0"),
					Type:     to.Ptr("Microsoft.Insights/alertRules"),
					ID:       to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/alertrules/chiricutin0"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"$type": to.Ptr("Microsoft.WindowsAzure.Management.Common.Storage.CasePreservedDictionary, Microsoft.WindowsAzure.Management.Common.Storage"),
						"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
					},
					Properties: &armmonitor.AlertRule{
						Name:        to.Ptr("chiricutin0"),
						Description: to.Ptr("Pura Vida 0"),
						Actions:     []armmonitor.RuleActionClassification{},
						Condition: &armmonitor.ThresholdRuleCondition{
							DataSource: &armmonitor.RuleMetricDataSource{
								ODataType:   to.Ptr("Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource"),
								ResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest"),
								MetricName:  to.Ptr("Requests"),
							},
							ODataType:       to.Ptr("Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition"),
							Operator:        to.Ptr(armmonitor.ConditionOperatorGreaterThan),
							Threshold:       to.Ptr[float64](2),
							TimeAggregation: to.Ptr(armmonitor.TimeAggregationOperatorTotal),
							WindowSize:      to.Ptr("PT5M"),
						},
						IsEnabled:       to.Ptr(true),
						LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-11-10T21:04:39.1082596Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AlertRuleResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AlertRuleResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/listAlertRule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlertRules_ListBySubscription(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/listAlertRuleBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List alert rules"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewAlertRulesClient("b67f7fec-69fc-4974-9099-a26bd6ffeda3", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/listAlertRuleBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.AlertRuleResourceCollection{
			Value: []*armmonitor.AlertRuleResource{
				{
					Name:     to.Ptr("myRuleName"),
					Type:     to.Ptr("Microsoft.Insights/alertRules"),
					ID:       to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/alertrules/myRuleName"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"$type": to.Ptr("Microsoft.WindowsAzure.Management.Common.Storage.CasePreservedDictionary, Microsoft.WindowsAzure.Management.Common.Storage"),
						"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
					},
					Properties: &armmonitor.AlertRule{
						Name:        to.Ptr("myRuleName"),
						Description: to.Ptr("Pura Vida"),
						Actions: []armmonitor.RuleActionClassification{
							&armmonitor.RuleEmailAction{
								ODataType: to.Ptr("Microsoft.Azure.Management.Insights.Models.RuleEmailAction"),
								CustomEmails: []*string{
									to.Ptr("gu@ms.com"),
									to.Ptr("su@ms.net")},
								SendToServiceOwners: to.Ptr(true),
							}},
						Condition: &armmonitor.ThresholdRuleCondition{
							DataSource: &armmonitor.RuleMetricDataSource{
								ODataType:   to.Ptr("Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource"),
								ResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest"),
								MetricName:  to.Ptr("Requests"),
							},
							ODataType:       to.Ptr("Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition"),
							Operator:        to.Ptr(armmonitor.ConditionOperatorGreaterThan),
							Threshold:       to.Ptr[float64](2),
							TimeAggregation: to.Ptr(armmonitor.TimeAggregationOperatorTotal),
							WindowSize:      to.Ptr("PT5M"),
						},
						IsEnabled:       to.Ptr(true),
						LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-11-10T21:04:39.0005255Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("chiricutin0"),
					Type:     to.Ptr("Microsoft.Insights/alertRules"),
					ID:       to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/alertrules/chiricutin0"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"$type": to.Ptr("Microsoft.WindowsAzure.Management.Common.Storage.CasePreservedDictionary, Microsoft.WindowsAzure.Management.Common.Storage"),
						"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
					},
					Properties: &armmonitor.AlertRule{
						Name:        to.Ptr("chiricutin0"),
						Description: to.Ptr("Pura Vida 0"),
						Actions:     []armmonitor.RuleActionClassification{},
						Condition: &armmonitor.ThresholdRuleCondition{
							DataSource: &armmonitor.RuleMetricDataSource{
								ODataType:   to.Ptr("Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource"),
								ResourceURI: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest"),
								MetricName:  to.Ptr("Requests"),
							},
							ODataType:       to.Ptr("Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition"),
							Operator:        to.Ptr(armmonitor.ConditionOperatorGreaterThan),
							Threshold:       to.Ptr[float64](2),
							TimeAggregation: to.Ptr(armmonitor.TimeAggregationOperatorTotal),
							WindowSize:      to.Ptr("PT5M"),
						},
						IsEnabled:       to.Ptr(true),
						LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-11-10T21:04:39.1082596Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AlertRuleResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AlertRuleResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/listAlertRuleBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLogProfiles_Delete(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/deleteLogProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete log profile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewLogProfilesClient("b67f7fec-69fc-4974-9099-a26bd6ffeda3", cred, &options)
	_, err := client.Delete(ctx,
		"Rac46PostSwapRG",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/deleteLogProfile.json: %v", err)
	}
}

func TestLogProfiles_Get(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/getLogProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get log profile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewLogProfilesClient("df602c9c-7aa0-407d-a6fb-eb20c8bd1192", cred, &options)
	res, err := client.Get(ctx,
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/getLogProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.LogProfileResource{
			Name:     to.Ptr("default"),
			Type:     to.Ptr(""),
			ID:       to.Ptr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/providers/microsoft.insights/logprofiles/default"),
			Location: to.Ptr(""),
			Properties: &armmonitor.LogProfileProperties{
				Categories: []*string{
					to.Ptr("Delete"),
					to.Ptr("Write"),
					to.Ptr("Action")},
				Locations: []*string{
					to.Ptr("global")},
				RetentionPolicy: &armmonitor.RetentionPolicy{
					Days:    to.Ptr[int32](3),
					Enabled: to.Ptr(true),
				},
				ServiceBusRuleID: to.Ptr(""),
				StorageAccountID: to.Ptr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/resourceGroups/JohnKemTest/providers/Microsoft.Storage/storageAccounts/johnkemtest8162"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LogProfileResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LogProfileResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/getLogProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLogProfiles_CreateOrUpdate(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/createOrUpdateLogProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a log profile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewLogProfilesClient("df602c9c-7aa0-407d-a6fb-eb20c8bd1192", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"Rac46PostSwapRG",
		armmonitor.LogProfileResource{
			Location: to.Ptr(""),
			Tags:     map[string]*string{},
			Properties: &armmonitor.LogProfileProperties{
				Categories: []*string{
					to.Ptr("Write"),
					to.Ptr("Delete"),
					to.Ptr("Action")},
				Locations: []*string{
					to.Ptr("global")},
				RetentionPolicy: &armmonitor.RetentionPolicy{
					Days:    to.Ptr[int32](3),
					Enabled: to.Ptr(true),
				},
				ServiceBusRuleID: to.Ptr(""),
				StorageAccountID: to.Ptr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/resourceGroups/JohnKemTest/providers/Microsoft.Storage/storageAccounts/johnkemtest8162"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/createOrUpdateLogProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.LogProfileResource{
			Name:     to.Ptr("default"),
			Type:     to.Ptr(""),
			ID:       to.Ptr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/providers/microsoft.insights/logprofiles/default"),
			Location: to.Ptr(""),
			Properties: &armmonitor.LogProfileProperties{
				Categories: []*string{
					to.Ptr("Delete"),
					to.Ptr("Write"),
					to.Ptr("Action")},
				Locations: []*string{
					to.Ptr("global")},
				RetentionPolicy: &armmonitor.RetentionPolicy{
					Days:    to.Ptr[int32](3),
					Enabled: to.Ptr(true),
				},
				ServiceBusRuleID: to.Ptr(""),
				StorageAccountID: to.Ptr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/resourceGroups/JohnKemTest/providers/Microsoft.Storage/storageAccounts/johnkemtest8162"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LogProfileResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LogProfileResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/createOrUpdateLogProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLogProfiles_Update(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/patchLogProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch a log profile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewLogProfilesClient("df602c9c-7aa0-407d-a6fb-eb20c8bd1192", cred, &options)
	res, err := client.Update(ctx,
		"Rac46PostSwapRG",
		armmonitor.LogProfileResourcePatch{
			Properties: &armmonitor.LogProfileProperties{
				Categories: []*string{
					to.Ptr("Write"),
					to.Ptr("Delete"),
					to.Ptr("Action")},
				Locations: []*string{
					to.Ptr("global")},
				RetentionPolicy: &armmonitor.RetentionPolicy{
					Days:    to.Ptr[int32](3),
					Enabled: to.Ptr(true),
				},
				ServiceBusRuleID: to.Ptr(""),
				StorageAccountID: to.Ptr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/resourceGroups/JohnKemTest/providers/Microsoft.Storage/storageAccounts/johnkemtest8162"),
			},
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/patchLogProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.LogProfileResource{
			Name:     to.Ptr("default"),
			Type:     to.Ptr(""),
			ID:       to.Ptr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/providers/microsoft.insights/logprofiles/default"),
			Location: to.Ptr(""),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armmonitor.LogProfileProperties{
				Categories: []*string{
					to.Ptr("Delete"),
					to.Ptr("Write"),
					to.Ptr("Action")},
				Locations: []*string{
					to.Ptr("global")},
				RetentionPolicy: &armmonitor.RetentionPolicy{
					Days:    to.Ptr[int32](3),
					Enabled: to.Ptr(true),
				},
				ServiceBusRuleID: to.Ptr(""),
				StorageAccountID: to.Ptr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/resourceGroups/JohnKemTest/providers/Microsoft.Storage/storageAccounts/johnkemtest8162"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LogProfileResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LogProfileResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/patchLogProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLogProfiles_List(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/listLogProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List log profiles"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewLogProfilesClient("df602c9c-7aa0-407d-a6fb-eb20c8bd1192", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/listLogProfile.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.LogProfileCollection{
			Value: []*armmonitor.LogProfileResource{
				{
					Name:     to.Ptr("default"),
					Type:     to.Ptr(""),
					ID:       to.Ptr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/providers/microsoft.insights/logprofiles/default"),
					Location: to.Ptr(""),
					Properties: &armmonitor.LogProfileProperties{
						Categories: []*string{
							to.Ptr("Delete"),
							to.Ptr("Write"),
							to.Ptr("Action")},
						Locations: []*string{
							to.Ptr("global")},
						RetentionPolicy: &armmonitor.RetentionPolicy{
							Days:    to.Ptr[int32](3),
							Enabled: to.Ptr(true),
						},
						ServiceBusRuleID: to.Ptr(""),
						StorageAccountID: to.Ptr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/resourceGroups/JohnKemTest/providers/Microsoft.Storage/storageAccounts/johnkemtest8162"),
					},
				},
				{
					Name:     to.Ptr("default2"),
					Type:     to.Ptr(""),
					ID:       to.Ptr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/providers/microsoft.insights/logprofiles/default2"),
					Location: to.Ptr(""),
					Properties: &armmonitor.LogProfileProperties{
						Categories: []*string{
							to.Ptr("Delete"),
							to.Ptr("Write"),
							to.Ptr("Action")},
						Locations: []*string{
							to.Ptr("global")},
						RetentionPolicy: &armmonitor.RetentionPolicy{
							Days:    to.Ptr[int32](15),
							Enabled: to.Ptr(true),
						},
						ServiceBusRuleID: to.Ptr(""),
						StorageAccountID: to.Ptr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/resourceGroups/JohnKemTest/providers/Microsoft.Storage/storageAccounts/johnkemtest8165"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LogProfileCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LogProfileCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2016-03-01/examples/listLogProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnosticSettings_Get(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2017-05-01-preview/examples/getDiagnosticSetting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the diagnostic setting"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDiagnosticSettingsClient(cred, &options)
	res, err := client.Get(ctx,
		"subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourcegroups/viruela1/providers/microsoft.logic/workflows/viruela6",
		"mysetting",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2017-05-01-preview/examples/getDiagnosticSetting.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.DiagnosticSettingsResource{
			Name: to.Ptr("mysetting"),
			Type: to.Ptr(""),
			ID:   to.Ptr("/subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourcegroups/viruela1/providers/microsoft.logic/workflows/viruela6/diagnosticSettings/service"),
			Properties: &armmonitor.DiagnosticSettings{
				EventHubAuthorizationRuleID: to.Ptr("/subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourceGroups/montest/providers/microsoft.eventhub/namespaces/mynamespace/eventhubs/myeventhub/authorizationrules/myrule"),
				Logs: []*armmonitor.LogSettings{
					{
						Category: to.Ptr("WorkflowRuntime"),
						Enabled:  to.Ptr(true),
						RetentionPolicy: &armmonitor.RetentionPolicy{
							Days:    to.Ptr[int32](0),
							Enabled: to.Ptr(false),
						},
					}},
				Metrics: []*armmonitor.MetricSettings{
					{
						Category: to.Ptr("WorkflowMetrics"),
						Enabled:  to.Ptr(true),
						RetentionPolicy: &armmonitor.RetentionPolicy{
							Days:    to.Ptr[int32](0),
							Enabled: to.Ptr(false),
						},
					}},
				StorageAccountID: to.Ptr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/resourceGroups/apptest/providers/Microsoft.Storage/storageAccounts/appteststorage1"),
				WorkspaceID:      to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticSettingsResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticSettingsResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2017-05-01-preview/examples/getDiagnosticSetting.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnosticSettings_CreateOrUpdate(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2017-05-01-preview/examples/createOrUpdateDiagnosticSetting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or Updates the diagnostic setting"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDiagnosticSettingsClient(cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourcegroups/viruela1/providers/microsoft.logic/workflows/viruela6",
		"mysetting",
		armmonitor.DiagnosticSettingsResource{
			Properties: &armmonitor.DiagnosticSettings{
				EventHubAuthorizationRuleID: to.Ptr("/subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourceGroups/montest/providers/microsoft.eventhub/namespaces/mynamespace/eventhubs/myeventhub/authorizationrules/myrule"),
				EventHubName:                to.Ptr("myeventhub"),
				LogAnalyticsDestinationType: to.Ptr("Dedicated"),
				Logs: []*armmonitor.LogSettings{
					{
						Category: to.Ptr("WorkflowRuntime"),
						Enabled:  to.Ptr(true),
						RetentionPolicy: &armmonitor.RetentionPolicy{
							Days:    to.Ptr[int32](0),
							Enabled: to.Ptr(false),
						},
					}},
				Metrics: []*armmonitor.MetricSettings{
					{
						Category: to.Ptr("WorkflowMetrics"),
						Enabled:  to.Ptr(true),
						RetentionPolicy: &armmonitor.RetentionPolicy{
							Days:    to.Ptr[int32](0),
							Enabled: to.Ptr(false),
						},
					}},
				StorageAccountID: to.Ptr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/resourceGroups/apptest/providers/Microsoft.Storage/storageAccounts/appteststorage1"),
				WorkspaceID:      to.Ptr(""),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2017-05-01-preview/examples/createOrUpdateDiagnosticSetting.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.DiagnosticSettingsResource{
			Name: to.Ptr("mysetting"),
			Type: to.Ptr(""),
			ID:   to.Ptr("/subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourcegroups/viruela1/providers/microsoft.logic/workflows/viruela6/diagnosticSettings/mysetting"),
			Properties: &armmonitor.DiagnosticSettings{
				EventHubAuthorizationRuleID: to.Ptr("/subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourceGroups/montest/providers/microsoft.eventhub/namespaces/mynamespace/eventhubs/myeventhub/authorizationrules/myrule"),
				EventHubName:                to.Ptr("myeventhub"),
				LogAnalyticsDestinationType: to.Ptr("Dedicated"),
				Logs: []*armmonitor.LogSettings{
					{
						Category: to.Ptr("WorkflowRuntime"),
						Enabled:  to.Ptr(true),
						RetentionPolicy: &armmonitor.RetentionPolicy{
							Days:    to.Ptr[int32](0),
							Enabled: to.Ptr(false),
						},
					}},
				Metrics: []*armmonitor.MetricSettings{
					{
						Category: to.Ptr("WorkflowMetrics"),
						Enabled:  to.Ptr(true),
						RetentionPolicy: &armmonitor.RetentionPolicy{
							Days:    to.Ptr[int32](0),
							Enabled: to.Ptr(false),
						},
					}},
				StorageAccountID: to.Ptr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/resourceGroups/apptest/providers/Microsoft.Storage/storageAccounts/appteststorage1"),
				WorkspaceID:      to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticSettingsResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticSettingsResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2017-05-01-preview/examples/createOrUpdateDiagnosticSetting.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnosticSettings_Delete(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2017-05-01-preview/examples/deleteDiagnosticSetting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes the diagnostic setting"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDiagnosticSettingsClient(cred, &options)
	_, err := client.Delete(ctx,
		"subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourcegroups/viruela1/providers/microsoft.logic/workflows/viruela6",
		"mysetting",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2017-05-01-preview/examples/deleteDiagnosticSetting.json: %v", err)
	}
}

func TestDiagnosticSettings_List(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2017-05-01-preview/examples/listDiagnosticSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the diagnostic setting"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDiagnosticSettingsClient(cred, &options)
	res, err := client.List(ctx,
		"subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourcegroups/viruela1/providers/microsoft.logic/workflows/viruela6",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2017-05-01-preview/examples/listDiagnosticSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.DiagnosticSettingsResourceCollection{
			Value: []*armmonitor.DiagnosticSettingsResource{
				{
					Name: to.Ptr("mysetting"),
					Type: to.Ptr("microsoft.logic/workflows"),
					ID:   to.Ptr("/subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourcegroups/viruela1/providers/microsoft.logic/workflows/viruela6/diagnosticSettings/mysetting"),
					Properties: &armmonitor.DiagnosticSettings{
						EventHubAuthorizationRuleID: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/andy1101/providers/Microsoft.EventHub/namespaces/andy1101/authorizationrules/RootManageSharedAccessKey"),
						Logs: []*armmonitor.LogSettings{
							{
								Category: to.Ptr("WorkflowRuntime"),
								Enabled:  to.Ptr(true),
								RetentionPolicy: &armmonitor.RetentionPolicy{
									Days:    to.Ptr[int32](0),
									Enabled: to.Ptr(false),
								},
							}},
						Metrics: []*armmonitor.MetricSettings{
							{
								Category: to.Ptr("WorkflowMetrics"),
								Enabled:  to.Ptr(true),
								RetentionPolicy: &armmonitor.RetentionPolicy{
									Days:    to.Ptr[int32](0),
									Enabled: to.Ptr(false),
								},
							}},
						StorageAccountID: to.Ptr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/resourceGroups/apptest/providers/Microsoft.Storage/storageAccounts/appteststorage1"),
						WorkspaceID:      to.Ptr(""),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticSettingsResourceCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticSettingsResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2017-05-01-preview/examples/listDiagnosticSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnosticSettingsCategory_Get(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2017-05-01-preview/examples/getDiagnosticSettingsCategory.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the diagnostic setting"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDiagnosticSettingsCategoryClient(cred, &options)
	res, err := client.Get(ctx,
		"subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourcegroups/viruela1/providers/microsoft.logic/workflows/viruela6",
		"WorkflowRuntime",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2017-05-01-preview/examples/getDiagnosticSettingsCategory.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.DiagnosticSettingsCategoryResource{
			Name: to.Ptr("WorkflowRuntime"),
			Type: to.Ptr("microsoft.insights/diagnosticSettingsCategories"),
			ID:   to.Ptr("/subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourcegroups/viruela1/providers/microsoft.logic/workflows/viruela6/providers/microsoft.insights/diagnosticSettingsCategories/WorkflowRuntime"),
			Properties: &armmonitor.DiagnosticSettingsCategory{
				CategoryType: to.Ptr(armmonitor.CategoryTypeLogs),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticSettingsCategoryResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticSettingsCategoryResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2017-05-01-preview/examples/getDiagnosticSettingsCategory.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnosticSettingsCategory_List(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2017-05-01-preview/examples/listDiagnosticSettingsCategories.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the diagnostic setting"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDiagnosticSettingsCategoryClient(cred, &options)
	res, err := client.List(ctx,
		"subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourcegroups/viruela1/providers/microsoft.logic/workflows/viruela6",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2017-05-01-preview/examples/listDiagnosticSettingsCategories.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.DiagnosticSettingsCategoryResourceCollection{
			Value: []*armmonitor.DiagnosticSettingsCategoryResource{
				{
					Name: to.Ptr("WorkflowRuntime"),
					Type: to.Ptr("microsoft.insights/diagnosticSettingsCategories"),
					ID:   to.Ptr("/subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourcegroups/viruela1/providers/microsoft.logic/workflows/viruela6/providers/microsoft.insights/diagnosticSettingsCategories/WorkflowRuntime"),
					Properties: &armmonitor.DiagnosticSettingsCategory{
						CategoryType: to.Ptr(armmonitor.CategoryTypeLogs),
					},
				},
				{
					Name: to.Ptr("WorkflowMetric"),
					Type: to.Ptr("microsoft.insights/diagnosticSettingsCategories"),
					ID:   to.Ptr("/subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourcegroups/viruela1/providers/microsoft.logic/workflows/viruela6/providers/microsoft.insights/diagnosticSettingsCategories/WorkflowMetric"),
					Properties: &armmonitor.DiagnosticSettingsCategory{
						CategoryType: to.Ptr(armmonitor.CategoryTypeMetrics),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticSettingsCategoryResourceCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticSettingsCategoryResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2017-05-01-preview/examples/listDiagnosticSettingsCategories.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestActionGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-09-01/examples/createOrUpdateActionGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an action group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewActionGroupsClient("187f412d-1758-44d9-b052-169e2564721d", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"Default-NotificationRules",
		"SampleActionGroup",
		armmonitor.ActionGroupResource{
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.ActionGroup{
				ArmRoleReceivers: []*armmonitor.ArmRoleReceiver{
					{
						Name:                 to.Ptr("Sample armRole"),
						RoleID:               to.Ptr("8e3af657-a8ff-443c-a75c-2fe8c4bcb635"),
						UseCommonAlertSchema: to.Ptr(true),
					}},
				AutomationRunbookReceivers: []*armmonitor.AutomationRunbookReceiver{
					{
						Name:                 to.Ptr("testRunbook"),
						AutomationAccountID:  to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/runbookTest/providers/Microsoft.Automation/automationAccounts/runbooktest"),
						IsGlobalRunbook:      to.Ptr(false),
						RunbookName:          to.Ptr("Sample runbook"),
						ServiceURI:           to.Ptr("<serviceUri>"),
						UseCommonAlertSchema: to.Ptr(true),
						WebhookResourceID:    to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/runbookTest/providers/Microsoft.Automation/automationAccounts/runbooktest/webhooks/Alert1510184037084"),
					}},
				AzureAppPushReceivers: []*armmonitor.AzureAppPushReceiver{
					{
						Name:         to.Ptr("Sample azureAppPush"),
						EmailAddress: to.Ptr("johndoe@email.com"),
					}},
				AzureFunctionReceivers: []*armmonitor.AzureFunctionReceiver{
					{
						Name:                  to.Ptr("Sample azureFunction"),
						FunctionAppResourceID: to.Ptr("/subscriptions/5def922a-3ed4-49c1-b9fd-05ec533819a3/resourceGroups/aznsTest/providers/Microsoft.Web/sites/testFunctionApp"),
						FunctionName:          to.Ptr("HttpTriggerCSharp1"),
						HTTPTriggerURL:        to.Ptr("http://test.me"),
						UseCommonAlertSchema:  to.Ptr(true),
					}},
				EmailReceivers: []*armmonitor.EmailReceiver{
					{
						Name:                 to.Ptr("John Doe's email"),
						EmailAddress:         to.Ptr("johndoe@email.com"),
						UseCommonAlertSchema: to.Ptr(false),
					},
					{
						Name:                 to.Ptr("Jane Smith's email"),
						EmailAddress:         to.Ptr("janesmith@email.com"),
						UseCommonAlertSchema: to.Ptr(true),
					}},
				Enabled: to.Ptr(true),
				EventHubReceivers: []*armmonitor.EventHubReceiver{
					{
						Name:              to.Ptr("Sample eventHub"),
						EventHubName:      to.Ptr("testEventHub"),
						EventHubNameSpace: to.Ptr("testEventHubNameSpace"),
						SubscriptionID:    to.Ptr("187f412d-1758-44d9-b052-169e2564721d"),
						TenantID:          to.Ptr("68a4459a-ccb8-493c-b9da-dd30457d1b84"),
					}},
				GroupShortName: to.Ptr("sample"),
				ItsmReceivers: []*armmonitor.ItsmReceiver{
					{
						Name:                to.Ptr("Sample itsm"),
						ConnectionID:        to.Ptr("a3b9076c-ce8e-434e-85b4-aff10cb3c8f1"),
						Region:              to.Ptr("westcentralus"),
						TicketConfiguration: to.Ptr("{\"PayloadRevision\":0,\"WorkItemType\":\"Incident\",\"UseTemplate\":false,\"WorkItemData\":\"{}\",\"CreateOneWIPerCI\":false}"),
						WorkspaceID:         to.Ptr("5def922a-3ed4-49c1-b9fd-05ec533819a3|55dfd1f8-7e59-4f89-bf56-4c82f5ace23c"),
					}},
				LogicAppReceivers: []*armmonitor.LogicAppReceiver{
					{
						Name:                 to.Ptr("Sample logicApp"),
						CallbackURL:          to.Ptr("https://prod-27.northcentralus.logic.azure.com/workflows/68e572e818e5457ba898763b7db90877/triggers/manual/paths/invoke/azns/test?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Abpsb72UYJxPPvmDo937uzofupO5r_vIeWEx7KVHo7w"),
						ResourceID:           to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/LogicApp/providers/Microsoft.Logic/workflows/testLogicApp"),
						UseCommonAlertSchema: to.Ptr(false),
					}},
				SmsReceivers: []*armmonitor.SmsReceiver{
					{
						Name:        to.Ptr("John Doe's mobile"),
						CountryCode: to.Ptr("1"),
						PhoneNumber: to.Ptr("1234567890"),
					},
					{
						Name:        to.Ptr("Jane Smith's mobile"),
						CountryCode: to.Ptr("1"),
						PhoneNumber: to.Ptr("0987654321"),
					}},
				VoiceReceivers: []*armmonitor.VoiceReceiver{
					{
						Name:        to.Ptr("Sample voice"),
						CountryCode: to.Ptr("1"),
						PhoneNumber: to.Ptr("1234567890"),
					}},
				WebhookReceivers: []*armmonitor.WebhookReceiver{
					{
						Name:                 to.Ptr("Sample webhook 1"),
						ServiceURI:           to.Ptr("http://www.example.com/webhook1"),
						UseCommonAlertSchema: to.Ptr(true),
					},
					{
						Name:                 to.Ptr("Sample webhook 2"),
						IdentifierURI:        to.Ptr("http://someidentifier/d7811ba3-7996-4a93-99b6-6b2f3f355f8a"),
						ObjectID:             to.Ptr("d3bb868c-fe44-452c-aa26-769a6538c808"),
						ServiceURI:           to.Ptr("http://www.example.com/webhook2"),
						TenantID:             to.Ptr("68a4459a-ccb8-493c-b9da-dd30457d1b84"),
						UseAADAuth:           to.Ptr(true),
						UseCommonAlertSchema: to.Ptr(true),
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-09-01/examples/createOrUpdateActionGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.ActionGroupResource{
			Name:     to.Ptr("SampleActionGroup"),
			Type:     to.Ptr("Microsoft.Insights/ActionGroups"),
			ID:       to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/Default-NotificationRules/providers/microsoft.insights/actionGroups/SampleActionGroup"),
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.ActionGroup{
				ArmRoleReceivers: []*armmonitor.ArmRoleReceiver{
					{
						Name:                 to.Ptr("Sample armRole"),
						RoleID:               to.Ptr("8e3af657-a8ff-443c-a75c-2fe8c4bcb635"),
						UseCommonAlertSchema: to.Ptr(true),
					}},
				AutomationRunbookReceivers: []*armmonitor.AutomationRunbookReceiver{
					{
						Name:                 to.Ptr("testRunbook"),
						AutomationAccountID:  to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/runbookTest/providers/Microsoft.Automation/automationAccounts/runbooktest"),
						IsGlobalRunbook:      to.Ptr(false),
						RunbookName:          to.Ptr("Sample runbook"),
						ServiceURI:           to.Ptr("<serviceUri>"),
						UseCommonAlertSchema: to.Ptr(true),
						WebhookResourceID:    to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/runbookTest/providers/Microsoft.Automation/automationAccounts/runbooktest/webhooks/Alert1510184037084"),
					}},
				AzureAppPushReceivers: []*armmonitor.AzureAppPushReceiver{
					{
						Name:         to.Ptr("Sample azureAppPush"),
						EmailAddress: to.Ptr("johndoe@email.com"),
					}},
				AzureFunctionReceivers: []*armmonitor.AzureFunctionReceiver{
					{
						Name:                  to.Ptr("Sample azureFunction"),
						FunctionAppResourceID: to.Ptr("/subscriptions/5def922a-3ed4-49c1-b9fd-05ec533819a3/resourceGroups/aznsTest/providers/Microsoft.Web/sites/testFunctionApp"),
						FunctionName:          to.Ptr("HttpTriggerCSharp1"),
						HTTPTriggerURL:        to.Ptr("<httpTriggerUrl>"),
						UseCommonAlertSchema:  to.Ptr(true),
					}},
				EmailReceivers: []*armmonitor.EmailReceiver{
					{
						Name:                 to.Ptr("John Doe's email"),
						EmailAddress:         to.Ptr("johndoe@email.com"),
						Status:               to.Ptr(armmonitor.ReceiverStatusEnabled),
						UseCommonAlertSchema: to.Ptr(false),
					},
					{
						Name:                 to.Ptr("Jane Smith's email"),
						EmailAddress:         to.Ptr("janesmith@email.com"),
						Status:               to.Ptr(armmonitor.ReceiverStatusEnabled),
						UseCommonAlertSchema: to.Ptr(true),
					}},
				Enabled: to.Ptr(true),
				EventHubReceivers: []*armmonitor.EventHubReceiver{
					{
						Name:                 to.Ptr("Sample eventHub"),
						EventHubName:         to.Ptr("testEventHub"),
						EventHubNameSpace:    to.Ptr("testEventHubNameSpace"),
						SubscriptionID:       to.Ptr("187f412d-1758-44d9-b052-169e2564721d"),
						TenantID:             to.Ptr("68a4459a-ccb8-493c-b9da-dd30457d1b84"),
						UseCommonAlertSchema: to.Ptr(false),
					}},
				GroupShortName: to.Ptr("sample"),
				ItsmReceivers: []*armmonitor.ItsmReceiver{
					{
						Name:                to.Ptr("Sample itsm"),
						ConnectionID:        to.Ptr("a3b9076c-ce8e-434e-85b4-aff10cb3c8f1"),
						Region:              to.Ptr("westcentralus"),
						TicketConfiguration: to.Ptr("{\"PayloadRevision\":0,\"WorkItemType\":\"Incident\",\"UseTemplate\":false,\"WorkItemData\":\"{}\",\"CreateOneWIPerCI\":false}"),
						WorkspaceID:         to.Ptr("5def922a-3ed4-49c1-b9fd-05ec533819a3|55dfd1f8-7e59-4f89-bf56-4c82f5ace23c"),
					}},
				LogicAppReceivers: []*armmonitor.LogicAppReceiver{
					{
						Name:                 to.Ptr("Sample logicApp"),
						CallbackURL:          to.Ptr("https://prod-27.northcentralus.logic.azure.com/workflows/68e572e818e5457ba898763b7db90877/triggers/manual/paths/invoke/azns/test?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Abpsb72UYJxPPvmDo937uzofupO5r_vIeWEx7KVHo7w"),
						ResourceID:           to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/LogicApp/providers/Microsoft.Logic/workflows/testLogicApp"),
						UseCommonAlertSchema: to.Ptr(false),
					}},
				SmsReceivers: []*armmonitor.SmsReceiver{
					{
						Name:        to.Ptr("John Doe's mobile"),
						CountryCode: to.Ptr("1"),
						PhoneNumber: to.Ptr("1234567890"),
						Status:      to.Ptr(armmonitor.ReceiverStatusEnabled),
					},
					{
						Name:        to.Ptr("Jane Smith's mobile"),
						CountryCode: to.Ptr("1"),
						PhoneNumber: to.Ptr("0987654321"),
						Status:      to.Ptr(armmonitor.ReceiverStatusEnabled),
					}},
				VoiceReceivers: []*armmonitor.VoiceReceiver{
					{
						Name:        to.Ptr("Sample voice"),
						CountryCode: to.Ptr("1"),
						PhoneNumber: to.Ptr("1234567890"),
					}},
				WebhookReceivers: []*armmonitor.WebhookReceiver{
					{
						Name:                 to.Ptr("Sample webhook 1"),
						ServiceURI:           to.Ptr("http://www.example.com/webhook1"),
						UseCommonAlertSchema: to.Ptr(true),
					},
					{
						Name:                 to.Ptr("Sample webhook 2"),
						IdentifierURI:        to.Ptr("http://someidentifier/d7811ba3-7996-4a93-99b6-6b2f3f355f8a"),
						ObjectID:             to.Ptr("d3bb868c-fe44-452c-aa26-769a6538c808"),
						ServiceURI:           to.Ptr("http://www.example.com/webhook2"),
						TenantID:             to.Ptr("68a4459a-ccb8-493c-b9da-dd30457d1b84"),
						UseAADAuth:           to.Ptr(true),
						UseCommonAlertSchema: to.Ptr(true),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ActionGroupResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ActionGroupResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-09-01/examples/createOrUpdateActionGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestActionGroups_Get(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-09-01/examples/getActionGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an action group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewActionGroupsClient("187f412d-1758-44d9-b052-169e2564721d", cred, &options)
	res, err := client.Get(ctx,
		"Default-NotificationRules",
		"SampleActionGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-09-01/examples/getActionGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.ActionGroupResource{
			Name:     to.Ptr("SampleActionGroup"),
			Type:     to.Ptr("Microsoft.Insights/ActionGroups"),
			ID:       to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/Default-NotificationRules/providers/microsoft.insights/actionGroups/SampleActionGroup"),
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.ActionGroup{
				ArmRoleReceivers:           []*armmonitor.ArmRoleReceiver{},
				AutomationRunbookReceivers: []*armmonitor.AutomationRunbookReceiver{},
				AzureAppPushReceivers:      []*armmonitor.AzureAppPushReceiver{},
				AzureFunctionReceivers:     []*armmonitor.AzureFunctionReceiver{},
				EmailReceivers: []*armmonitor.EmailReceiver{
					{
						Name:                 to.Ptr("John Doe's email"),
						EmailAddress:         to.Ptr("johndoe@email.com"),
						Status:               to.Ptr(armmonitor.ReceiverStatusEnabled),
						UseCommonAlertSchema: to.Ptr(true),
					},
					{
						Name:                 to.Ptr("Jane Smith's email"),
						EmailAddress:         to.Ptr("janesmith@email.com"),
						Status:               to.Ptr(armmonitor.ReceiverStatusDisabled),
						UseCommonAlertSchema: to.Ptr(true),
					}},
				Enabled:           to.Ptr(true),
				EventHubReceivers: []*armmonitor.EventHubReceiver{},
				GroupShortName:    to.Ptr("sample"),
				ItsmReceivers:     []*armmonitor.ItsmReceiver{},
				LogicAppReceivers: []*armmonitor.LogicAppReceiver{},
				SmsReceivers: []*armmonitor.SmsReceiver{
					{
						Name:        to.Ptr("John Doe's mobile"),
						CountryCode: to.Ptr("1"),
						PhoneNumber: to.Ptr("1234567890"),
						Status:      to.Ptr(armmonitor.ReceiverStatusDisabled),
					},
					{
						Name:        to.Ptr("Jane Smith's mobile"),
						CountryCode: to.Ptr("1"),
						PhoneNumber: to.Ptr("0987654321"),
						Status:      to.Ptr(armmonitor.ReceiverStatusEnabled),
					}},
				VoiceReceivers: []*armmonitor.VoiceReceiver{},
				WebhookReceivers: []*armmonitor.WebhookReceiver{
					{
						Name:                 to.Ptr("Sample webhook"),
						ServiceURI:           to.Ptr("http://www.example.com/webhook"),
						UseCommonAlertSchema: to.Ptr(false),
					},
					{
						Name:                 to.Ptr("Sample webhook 2"),
						IdentifierURI:        to.Ptr("http://someidentifier/d7811ba3-7996-4a93-99b6-6b2f3f355f8a"),
						ObjectID:             to.Ptr("d3bb868c-fe44-452c-aa26-769a6538c808"),
						ServiceURI:           to.Ptr("http://www.example.com/webhook2"),
						TenantID:             to.Ptr("68a4459a-ccb8-493c-b9da-dd30457d1b84"),
						UseAADAuth:           to.Ptr(true),
						UseCommonAlertSchema: to.Ptr(true),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ActionGroupResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ActionGroupResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-09-01/examples/getActionGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestActionGroups_Delete(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-09-01/examples/deleteActionGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an action group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewActionGroupsClient("187f412d-1758-44d9-b052-169e2564721d", cred, &options)
	_, err := client.Delete(ctx,
		"Default-NotificationRules",
		"SampleActionGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-09-01/examples/deleteActionGroup.json: %v", err)
	}
}

func TestActionGroups_Update(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-09-01/examples/patchActionGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch an action group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewActionGroupsClient("187f412d-1758-44d9-b052-169e2564721d", cred, &options)
	res, err := client.Update(ctx,
		"Default-NotificationRules",
		"SampleActionGroup",
		armmonitor.ActionGroupPatchBody{
			Properties: &armmonitor.ActionGroupPatch{
				Enabled: to.Ptr(false),
			},
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-09-01/examples/patchActionGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.ActionGroupResource{
			Name:     to.Ptr("SampleActionGroup"),
			Type:     to.Ptr("Microsoft.Insights/ActionGroups"),
			ID:       to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/Default-NotificationRules/providers/microsoft.insights/actionGroups/SampleActionGroup"),
			Location: to.Ptr("Global"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armmonitor.ActionGroup{
				ArmRoleReceivers:           []*armmonitor.ArmRoleReceiver{},
				AutomationRunbookReceivers: []*armmonitor.AutomationRunbookReceiver{},
				AzureAppPushReceivers:      []*armmonitor.AzureAppPushReceiver{},
				AzureFunctionReceivers:     []*armmonitor.AzureFunctionReceiver{},
				EmailReceivers: []*armmonitor.EmailReceiver{
					{
						Name:                 to.Ptr("John Doe's email"),
						EmailAddress:         to.Ptr("johndoe@email.com"),
						Status:               to.Ptr(armmonitor.ReceiverStatusEnabled),
						UseCommonAlertSchema: to.Ptr(true),
					},
					{
						Name:                 to.Ptr("Jane Smith's email"),
						EmailAddress:         to.Ptr("janesmith@email.com"),
						Status:               to.Ptr(armmonitor.ReceiverStatusEnabled),
						UseCommonAlertSchema: to.Ptr(true),
					}},
				Enabled:           to.Ptr(true),
				EventHubReceivers: []*armmonitor.EventHubReceiver{},
				GroupShortName:    to.Ptr("sample"),
				ItsmReceivers:     []*armmonitor.ItsmReceiver{},
				LogicAppReceivers: []*armmonitor.LogicAppReceiver{},
				SmsReceivers: []*armmonitor.SmsReceiver{
					{
						Name:        to.Ptr("John Doe's mobile"),
						CountryCode: to.Ptr("1"),
						PhoneNumber: to.Ptr("1234567890"),
						Status:      to.Ptr(armmonitor.ReceiverStatusEnabled),
					},
					{
						Name:        to.Ptr("Jane Smith's mobile"),
						CountryCode: to.Ptr("1"),
						PhoneNumber: to.Ptr("0987654321"),
						Status:      to.Ptr(armmonitor.ReceiverStatusEnabled),
					}},
				VoiceReceivers: []*armmonitor.VoiceReceiver{},
				WebhookReceivers: []*armmonitor.WebhookReceiver{
					{
						Name:                 to.Ptr("Sample webhook"),
						ServiceURI:           to.Ptr("http://www.example.com/webhook"),
						UseCommonAlertSchema: to.Ptr(false),
					},
					{
						Name:                 to.Ptr("Sample webhook 2"),
						IdentifierURI:        to.Ptr("http://someidentifier/d7811ba3-7996-4a93-99b6-6b2f3f355f8a"),
						ObjectID:             to.Ptr("d3bb868c-fe44-452c-aa26-769a6538c808"),
						ServiceURI:           to.Ptr("http://www.example.com/webhook2"),
						TenantID:             to.Ptr("68a4459a-ccb8-493c-b9da-dd30457d1b84"),
						UseAADAuth:           to.Ptr(true),
						UseCommonAlertSchema: to.Ptr(true),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ActionGroupResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ActionGroupResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-09-01/examples/patchActionGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestActionGroups_PostTestNotifications(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-09-01/examples/postTestNotifications.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List action groups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewActionGroupsClient("187f412d-1758-44d9-b052-169e2564721d", cred, &options)
	poller, err := client.BeginPostTestNotifications(ctx,
		armmonitor.NotificationRequestBody{
			AlertType: to.Ptr("budget"),
			AutomationRunbookReceivers: []*armmonitor.AutomationRunbookReceiver{
				{
					Name:                 to.Ptr("testRunbook"),
					AutomationAccountID:  to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/runbookTest/providers/Microsoft.Automation/automationAccounts/runbooktest"),
					IsGlobalRunbook:      to.Ptr(false),
					RunbookName:          to.Ptr("Sample runbook"),
					ServiceURI:           to.Ptr("http://test.me"),
					UseCommonAlertSchema: to.Ptr(true),
					WebhookResourceID:    to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/runbookTest/providers/Microsoft.Automation/automationAccounts/runbooktest/webhooks/Alert1510184037084"),
				}},
			AzureAppPushReceivers: []*armmonitor.AzureAppPushReceiver{
				{
					Name:         to.Ptr("Sample azureAppPush"),
					EmailAddress: to.Ptr("johndoe@email.com"),
				}},
			AzureFunctionReceivers: []*armmonitor.AzureFunctionReceiver{
				{
					Name:                  to.Ptr("Sample azureFunction"),
					FunctionAppResourceID: to.Ptr("/subscriptions/5def922a-3ed4-49c1-b9fd-05ec533819a3/resourceGroups/aznsTest/providers/Microsoft.Web/sites/testFunctionApp"),
					FunctionName:          to.Ptr("HttpTriggerCSharp1"),
					HTTPTriggerURL:        to.Ptr("http://test.me"),
					UseCommonAlertSchema:  to.Ptr(true),
				}},
			EmailReceivers: []*armmonitor.EmailReceiver{
				{
					Name:                 to.Ptr("John Doe's email"),
					EmailAddress:         to.Ptr("johndoe@email.com"),
					UseCommonAlertSchema: to.Ptr(false),
				},
				{
					Name:                 to.Ptr("Jane Smith's email"),
					EmailAddress:         to.Ptr("janesmith@email.com"),
					UseCommonAlertSchema: to.Ptr(true),
				}},
			EventHubReceivers: []*armmonitor.EventHubReceiver{
				{
					Name:              to.Ptr("Sample eventHub"),
					EventHubName:      to.Ptr("testEventHub"),
					EventHubNameSpace: to.Ptr("testEventHubNameSpace"),
					SubscriptionID:    to.Ptr("187f412d-1758-44d9-b052-169e2564721d"),
					TenantID:          to.Ptr("68a4459a-ccb8-493c-b9da-dd30457d1b84"),
				}},
			ItsmReceivers: []*armmonitor.ItsmReceiver{
				{
					Name:                to.Ptr("Sample itsm"),
					ConnectionID:        to.Ptr("a3b9076c-ce8e-434e-85b4-aff10cb3c8f1"),
					Region:              to.Ptr("westcentralus"),
					TicketConfiguration: to.Ptr("{\"PayloadRevision\":0,\"WorkItemType\":\"Incident\",\"UseTemplate\":false,\"WorkItemData\":\"{}\",\"CreateOneWIPerCI\":false}"),
					WorkspaceID:         to.Ptr("5def922a-3ed4-49c1-b9fd-05ec533819a3|55dfd1f8-7e59-4f89-bf56-4c82f5ace23c"),
				}},
			LogicAppReceivers: []*armmonitor.LogicAppReceiver{
				{
					Name:                 to.Ptr("Sample logicApp"),
					CallbackURL:          to.Ptr("https://prod-27.northcentralus.logic.azure.com/workflows/68e572e818e5457ba898763b7db90877/triggers/manual/paths/invoke/azns/test?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Abpsb72UYJxPPvmDo937uzofupO5r_vIeWEx7KVHo7w"),
					ResourceID:           to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/LogicApp/providers/Microsoft.Logic/workflows/testLogicApp"),
					UseCommonAlertSchema: to.Ptr(false),
				}},
			SmsReceivers: []*armmonitor.SmsReceiver{
				{
					Name:        to.Ptr("John Doe's mobile"),
					CountryCode: to.Ptr("1"),
					PhoneNumber: to.Ptr("1234567890"),
				},
				{
					Name:        to.Ptr("Jane Smith's mobile"),
					CountryCode: to.Ptr("1"),
					PhoneNumber: to.Ptr("0987654321"),
				}},
			VoiceReceivers: []*armmonitor.VoiceReceiver{
				{
					Name:        to.Ptr("Sample voice"),
					CountryCode: to.Ptr("1"),
					PhoneNumber: to.Ptr("1234567890"),
				}},
			WebhookReceivers: []*armmonitor.WebhookReceiver{
				{
					Name:                 to.Ptr("Sample webhook 1"),
					ServiceURI:           to.Ptr("http://www.example.com/webhook1"),
					UseCommonAlertSchema: to.Ptr(true),
				},
				{
					Name:                 to.Ptr("Sample webhook 2"),
					IdentifierURI:        to.Ptr("http://someidentifier/d7811ba3-7996-4a93-99b6-6b2f3f355f8a"),
					ObjectID:             to.Ptr("d3bb868c-fe44-452c-aa26-769a6538c808"),
					ServiceURI:           to.Ptr("http://www.example.com/webhook2"),
					TenantID:             to.Ptr("68a4459a-ccb8-493c-b9da-dd30457d1b84"),
					UseAADAuth:           to.Ptr(true),
					UseCommonAlertSchema: to.Ptr(true),
				}},
		},
		&armmonitor.ActionGroupsClientBeginPostTestNotificationsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-09-01/examples/postTestNotifications.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-09-01/examples/postTestNotifications.json: %v", err)
	}
}

func TestActionGroups_GetTestNotifications(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-09-01/examples/getTestNotifications.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get notification details"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewActionGroupsClient("187f412d-1758-44d9-b052-169e2564721d", cred, &options)
	res, err := client.GetTestNotifications(ctx,
		"11000222191287",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-09-01/examples/getTestNotifications.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.TestNotificationDetailsResponse{
			ActionDetails: []*armmonitor.ActionDetail{
				{
					MechanismType: to.Ptr("AzureAppPush"),
					Name:          to.Ptr("AzureAppPush"),
					SendTime:      to.Ptr("2021-09-21T04:52:42.8620629+00:00"),
					Status:        to.Ptr("Completed"),
					SubState:      to.Ptr("Default"),
				},
				{
					MechanismType: to.Ptr("AzureFunction"),
					Name:          to.Ptr("AzureFunction-1"),
					SendTime:      to.Ptr("2021-09-21T04:52:42.0623319+00:00"),
					Status:        to.Ptr("Completed"),
					SubState:      to.Ptr("Default"),
				},
				{
					MechanismType: to.Ptr("Email"),
					Name:          to.Ptr("Email-2"),
					SendTime:      to.Ptr("2021-09-21T04:52:40.7480368+00:00"),
					Status:        to.Ptr("Completed"),
					SubState:      to.Ptr("Default"),
				},
				{
					MechanismType: to.Ptr("LogicApp"),
					Name:          to.Ptr("Sample logicApp"),
					SendTime:      to.Ptr("2021-09-21T04:52:42.2473419+00:00"),
					Status:        to.Ptr("Completed"),
					SubState:      to.Ptr("Default"),
				},
				{
					MechanismType: to.Ptr("SecureWebhook"),
					Name:          to.Ptr("SecureWebhook-1"),
					SendTime:      to.Ptr("2021-09-21T04:52:42.0723479+00:00"),
					Status:        to.Ptr("Completed"),
					SubState:      to.Ptr("Default"),
				},
				{
					MechanismType: to.Ptr("Sms"),
					Name:          to.Ptr("Sms-1"),
					SendTime:      to.Ptr("2021-09-21T04:52:41.353015+00:00"),
					Status:        to.Ptr("Completed"),
					SubState:      to.Ptr("Default"),
				},
				{
					MechanismType: to.Ptr("Voice"),
					Name:          to.Ptr("Voice-1"),
					SendTime:      to.Ptr("2021-09-21T04:52:41.6330734+00:00"),
					Status:        to.Ptr("Completed"),
					SubState:      to.Ptr("Default"),
				}},
			CompletedTime: to.Ptr("0001-01-01T00:00:00+00:00"),
			Context: &armmonitor.Context{
				ContextType:        to.Ptr("Microsoft.Insights/Budget"),
				NotificationSource: to.Ptr("Microsoft.Insights/TestNotification"),
			},
			CreatedTime: to.Ptr("2021-09-21T04:52:29.5091168+00:00"),
			State:       to.Ptr("Completed"),
		}
		if !reflect.DeepEqual(exampleRes, res.TestNotificationDetailsResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TestNotificationDetailsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-09-01/examples/getTestNotifications.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestActionGroups_ListByResourceGroup(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-09-01/examples/listActionGroups.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List action groups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewActionGroupsClient("187f412d-1758-44d9-b052-169e2564721d", cred, &options)
	pager := client.ListByResourceGroup("Default-NotificationRules",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-09-01/examples/listActionGroups.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.ActionGroupList{
			Value: []*armmonitor.ActionGroupResource{
				{
					Name:     to.Ptr("SampleActionGroup"),
					Type:     to.Ptr("Microsoft.Insights/ActionGroups"),
					ID:       to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/Default-NotificationRules/providers/microsoft.insights/actionGroups/SampleActionGroup"),
					Location: to.Ptr("Global"),
					Tags:     map[string]*string{},
					Properties: &armmonitor.ActionGroup{
						ArmRoleReceivers:           []*armmonitor.ArmRoleReceiver{},
						AutomationRunbookReceivers: []*armmonitor.AutomationRunbookReceiver{},
						AzureAppPushReceivers:      []*armmonitor.AzureAppPushReceiver{},
						AzureFunctionReceivers:     []*armmonitor.AzureFunctionReceiver{},
						EmailReceivers: []*armmonitor.EmailReceiver{
							{
								Name:                 to.Ptr("John Doe's email"),
								EmailAddress:         to.Ptr("johndoe@email.com"),
								Status:               to.Ptr(armmonitor.ReceiverStatusEnabled),
								UseCommonAlertSchema: to.Ptr(true),
							},
							{
								Name:                 to.Ptr("Jane Smith's email"),
								EmailAddress:         to.Ptr("janesmith@email.com"),
								Status:               to.Ptr(armmonitor.ReceiverStatusDisabled),
								UseCommonAlertSchema: to.Ptr(true),
							}},
						Enabled:           to.Ptr(true),
						EventHubReceivers: []*armmonitor.EventHubReceiver{},
						GroupShortName:    to.Ptr("sample"),
						ItsmReceivers:     []*armmonitor.ItsmReceiver{},
						LogicAppReceivers: []*armmonitor.LogicAppReceiver{},
						SmsReceivers: []*armmonitor.SmsReceiver{
							{
								Name:        to.Ptr("John Doe's mobile"),
								CountryCode: to.Ptr("1"),
								PhoneNumber: to.Ptr("1234567890"),
								Status:      to.Ptr(armmonitor.ReceiverStatusDisabled),
							},
							{
								Name:        to.Ptr("Jane Smith's mobile"),
								CountryCode: to.Ptr("1"),
								PhoneNumber: to.Ptr("0987654321"),
								Status:      to.Ptr(armmonitor.ReceiverStatusEnabled),
							}},
						VoiceReceivers: []*armmonitor.VoiceReceiver{},
						WebhookReceivers: []*armmonitor.WebhookReceiver{
							{
								Name:                 to.Ptr("Sample webhook"),
								ServiceURI:           to.Ptr("http://www.example.com/webhook"),
								UseCommonAlertSchema: to.Ptr(false),
							},
							{
								Name:                 to.Ptr("Sample webhook 2"),
								IdentifierURI:        to.Ptr("http://someidentifier/d7811ba3-7996-4a93-99b6-6b2f3f355f8a"),
								ObjectID:             to.Ptr("d3bb868c-fe44-452c-aa26-769a6538c808"),
								ServiceURI:           to.Ptr("http://www.example.com/webhook2"),
								TenantID:             to.Ptr("68a4459a-ccb8-493c-b9da-dd30457d1b84"),
								UseAADAuth:           to.Ptr(true),
								UseCommonAlertSchema: to.Ptr(true),
							}},
					},
				},
				{
					Name:     to.Ptr("SampleActionGroup2"),
					Type:     to.Ptr("Microsoft.Insights/ActionGroups"),
					ID:       to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/Default-NotificationRules/providers/microsoft.insights/actionGroups/SampleActionGroup2"),
					Location: to.Ptr("Global"),
					Tags:     map[string]*string{},
					Properties: &armmonitor.ActionGroup{
						ArmRoleReceivers:           []*armmonitor.ArmRoleReceiver{},
						AutomationRunbookReceivers: []*armmonitor.AutomationRunbookReceiver{},
						AzureAppPushReceivers:      []*armmonitor.AzureAppPushReceiver{},
						AzureFunctionReceivers:     []*armmonitor.AzureFunctionReceiver{},
						EmailReceivers: []*armmonitor.EmailReceiver{
							{
								Name:                 to.Ptr("John Doe's email"),
								EmailAddress:         to.Ptr("johndoe@email.com"),
								Status:               to.Ptr(armmonitor.ReceiverStatusEnabled),
								UseCommonAlertSchema: to.Ptr(true),
							}},
						Enabled:           to.Ptr(false),
						EventHubReceivers: []*armmonitor.EventHubReceiver{},
						GroupShortName:    to.Ptr("sample2"),
						ItsmReceivers:     []*armmonitor.ItsmReceiver{},
						LogicAppReceivers: []*armmonitor.LogicAppReceiver{},
						SmsReceivers: []*armmonitor.SmsReceiver{
							{
								Name:        to.Ptr("Jane Smith's mobile"),
								CountryCode: to.Ptr("1"),
								PhoneNumber: to.Ptr("0987654321"),
								Status:      to.Ptr(armmonitor.ReceiverStatusEnabled),
							}},
						VoiceReceivers:   []*armmonitor.VoiceReceiver{},
						WebhookReceivers: []*armmonitor.WebhookReceiver{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ActionGroupList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ActionGroupList)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-09-01/examples/listActionGroups.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestActionGroups_EnableReceiver(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-09-01/examples/enableReceiver.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enable the receiver"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewActionGroupsClient("187f412d-1758-44d9-b052-169e2564721d", cred, &options)
	_, err := client.EnableReceiver(ctx,
		"Default-NotificationRules",
		"SampleActionGroup",
		armmonitor.EnableRequest{
			ReceiverName: to.Ptr("John Doe's mobile"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-09-01/examples/enableReceiver.json: %v", err)
	}
}

func TestActivityLogs_List(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/GetActivityLogsFiltered.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Activity Logs with filter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewActivityLogsClient("089bd33f-d4ec-47fe-8ba5-0753aa5c5b33", cred, &options)
	pager := client.List("eventTimestamp ge '2015-01-21T20:00:00Z' and eventTimestamp le '2015-01-23T20:00:00Z' and resourceGroupName eq 'MSSupportGroup'",
		&armmonitor.ActivityLogsClientListOptions{Select: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/GetActivityLogsFiltered.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.EventDataCollection{
			Value: []*armmonitor.EventData{
				{
					OperationID: to.Ptr("1e121103-0ba6-4300-ac9d-952bb5d0c80f"),
					Description: to.Ptr(""),
					Authorization: &armmonitor.SenderAuthorization{
						Action: to.Ptr("microsoft.support/supporttickets/write"),
						Role:   to.Ptr("Subscription Admin"),
						Scope:  to.Ptr("/subscriptions/089bd33f-d4ec-47fe-8ba5-0753aa5c5b33/resourceGroups/MSSupportGroup/providers/microsoft.support/supporttickets/115012112305841"),
					},
					Caller: to.Ptr("admin@contoso.com"),
					Claims: map[string]*string{
						"name":     to.Ptr("John Smith"),
						"appid":    to.Ptr("c44b4083-3bq0-49c1-b47d-974e53cbdf3c"),
						"appidacr": to.Ptr("2"),
						"aud":      to.Ptr("https://management.core.windows.net/"),
						"exp":      to.Ptr("1421880271"),
						"groups":   to.Ptr("cacfe77c-e058-4712-83qw-f9b08849fd60,7f71d11d-4c41-4b23-99d2-d32ce7aa621c,31522864-0578-4ea0-9gdc-e66cc564d18c"),
						"http://schemas.microsoft.com/claims/authnclassreference":              to.Ptr("1"),
						"http://schemas.microsoft.com/claims/authnmethodsreferences":           to.Ptr("pwd"),
						"http://schemas.microsoft.com/identity/claims/objectidentifier":        to.Ptr("2468adf0-8211-44e3-95xq-85137af64708"),
						"http://schemas.microsoft.com/identity/claims/scope":                   to.Ptr("user_impersonation"),
						"http://schemas.microsoft.com/identity/claims/tenantid":                to.Ptr("1e8d8218-c5e7-4578-9acc-9abbd5d23315"),
						"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname":      to.Ptr("John"),
						"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name":           to.Ptr("admin@contoso.com"),
						"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier": to.Ptr("9vckmEGF7zDKk1YzIY8k0t1_EAPaXoeHyPRn6f413zM"),
						"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname":        to.Ptr("Smith"),
						"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn":            to.Ptr("admin@contoso.com"),
						"iat":  to.Ptr("1421876371"),
						"iss":  to.Ptr("https://sts.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47/"),
						"nbf":  to.Ptr("1421876371"),
						"puid": to.Ptr("20030000801A118C"),
						"ver":  to.Ptr("1.0"),
					},
					CorrelationID: to.Ptr("1e121103-0ba6-4300-ac9d-952bb5d0c80f"),
					EventDataID:   to.Ptr("44ade6b4-3813-45e6-ae27-7420a95fa2f8"),
					EventName: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("End request"),
						Value:          to.Ptr("EndRequest"),
					},
					EventTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-01-21T22:14:26.9792776Z"); return t }()),
					HTTPRequest: &armmonitor.HTTPRequestInfo{
						Method:          to.Ptr("PUT"),
						ClientIPAddress: to.Ptr("192.168.35.115"),
						ClientRequestID: to.Ptr("27003b25-91d3-418f-8eb1-29e537dcb249"),
					},
					ID:    to.Ptr("/subscriptions/089bd33f-d4ec-47fe-8ba5-0753aa5c5b33/resourceGroups/MSSupportGroup/providers/microsoft.support/supporttickets/115012112305841/events/44ade6b4-3813-45e6-ae27-7420a95fa2f8/ticks/635574752669792776"),
					Level: to.Ptr(armmonitor.EventLevelInformational),
					OperationName: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("microsoft.support/supporttickets/write"),
						Value:          to.Ptr("microsoft.support/supporttickets/write"),
					},
					Properties: map[string]*string{
						"statusCode": to.Ptr("Created"),
					},
					ResourceGroupName: to.Ptr("MSSupportGroup"),
					ResourceProviderName: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("microsoft.support"),
						Value:          to.Ptr("microsoft.support"),
					},
					Status: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Succeeded"),
						Value:          to.Ptr("Succeeded"),
					},
					SubStatus: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Created (HTTP Status Code: 201)"),
						Value:          to.Ptr("Created"),
					},
					SubmissionTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-01-21T22:14:39.9936304Z"); return t }()),
					SubscriptionID:      to.Ptr("089bd33f-d4ec-47fe-8ba5-0753aa5c5b33"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventDataCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventDataCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/GetActivityLogsFiltered.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/GetActivityLogsFilteredAndSelected.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Activity Logs with filter and select"},
	})
	client = armmonitor.NewActivityLogsClient("089bd33f-d4ec-47fe-8ba5-0753aa5c5b33", cred, &options)
	pager = client.List("eventTimestamp ge '2015-01-21T20:00:00Z' and eventTimestamp le '2015-01-23T20:00:00Z' and resourceGroupName eq 'MSSupportGroup'",
		&armmonitor.ActivityLogsClientListOptions{Select: to.Ptr("eventName,id,resourceGroupName,resourceProviderName,operationName,status,eventTimestamp,correlationId,submissionTimestamp,level")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/GetActivityLogsFilteredAndSelected.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.EventDataCollection{
			Value: []*armmonitor.EventData{
				{
					CorrelationID: to.Ptr("1e121103-0ba6-4300-ac9d-952bb5d0c80f"),
					EventName: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("End request"),
						Value:          to.Ptr("EndRequest"),
					},
					EventTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-01-21T22:14:26.9792776Z"); return t }()),
					ID:             to.Ptr("/subscriptions/089bd33f-d4ec-47fe-8ba5-0753aa5c5b33/resourceGroups/MSSupportGroup/providers/microsoft.support/supporttickets/115012112305841/events/44ade6b4-3813-45e6-ae27-7420a95fa2f8/ticks/635574752669792776"),
					Level:          to.Ptr(armmonitor.EventLevelInformational),
					OperationName: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("microsoft.support/supporttickets/write"),
						Value:          to.Ptr("microsoft.support/supporttickets/write"),
					},
					ResourceGroupName: to.Ptr("MSSupportGroup"),
					ResourceProviderName: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("microsoft.support"),
						Value:          to.Ptr("microsoft.support"),
					},
					Status: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Succeeded"),
						Value:          to.Ptr("Succeeded"),
					},
					SubmissionTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-01-21T22:14:39.9936304Z"); return t }()),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventDataCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventDataCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/GetActivityLogsFilteredAndSelected.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEventCategories_List(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/GetEventCategories.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get event categories"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewEventCategoriesClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/GetEventCategories.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.EventCategoryCollection{
			Value: []*armmonitor.LocalizableString{
				{
					LocalizedValue: to.Ptr("category1"),
					Value:          to.Ptr("category1"),
				},
				{
					LocalizedValue: to.Ptr("category2"),
					Value:          to.Ptr("category2"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventCategoryCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventCategoryCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/GetEventCategories.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTenantActivityLogs_List(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/GetTenantActivityLogsFiltered.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Tenant Activity Logs with filter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewTenantActivityLogsClient(cred, &options)
	pager := client.List(&armmonitor.TenantActivityLogsClientListOptions{Filter: to.Ptr("eventTimestamp ge '2015-01-21T20:00:00Z' and eventTimestamp le '2015-01-23T20:00:00Z' and resourceGroupName eq 'MSSupportGroup'"),
		Select: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/GetTenantActivityLogsFiltered.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.EventDataCollection{
			Value: []*armmonitor.EventData{
				{
					OperationID: to.Ptr("1e121103-0ba6-4300-ac9d-952bb5d0c80f"),
					Description: to.Ptr(""),
					Authorization: &armmonitor.SenderAuthorization{
						Action: to.Ptr("microsoft.support/supporttickets/write"),
						Role:   to.Ptr("Subscription Admin"),
						Scope:  to.Ptr("/subscriptions/089bd33f-d4ec-47fe-8ba5-0753aa5c5b33/resourceGroups/MSSupportGroup/providers/microsoft.support/supporttickets/115012112305841"),
					},
					Caller: to.Ptr("admin@contoso.com"),
					Claims: map[string]*string{
						"name":     to.Ptr("John Smith"),
						"appid":    to.Ptr("c44b4083-3bq0-49c1-b47d-974e53cbdf3c"),
						"appidacr": to.Ptr("2"),
						"aud":      to.Ptr("https://management.core.windows.net/"),
						"exp":      to.Ptr("1421880271"),
						"groups":   to.Ptr("cacfe77c-e058-4712-83qw-f9b08849fd60,7f71d11d-4c41-4b23-99d2-d32ce7aa621c,31522864-0578-4ea0-9gdc-e66cc564d18c"),
						"http://schemas.microsoft.com/claims/authnclassreference":              to.Ptr("1"),
						"http://schemas.microsoft.com/claims/authnmethodsreferences":           to.Ptr("pwd"),
						"http://schemas.microsoft.com/identity/claims/objectidentifier":        to.Ptr("2468adf0-8211-44e3-95xq-85137af64708"),
						"http://schemas.microsoft.com/identity/claims/scope":                   to.Ptr("user_impersonation"),
						"http://schemas.microsoft.com/identity/claims/tenantid":                to.Ptr("1e8d8218-c5e7-4578-9acc-9abbd5d23315"),
						"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname":      to.Ptr("John"),
						"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name":           to.Ptr("admin@contoso.com"),
						"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier": to.Ptr("9vckmEGF7zDKk1YzIY8k0t1_EAPaXoeHyPRn6f413zM"),
						"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname":        to.Ptr("Smith"),
						"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn":            to.Ptr("admin@contoso.com"),
						"iat":  to.Ptr("1421876371"),
						"iss":  to.Ptr("https://sts.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47/"),
						"nbf":  to.Ptr("1421876371"),
						"puid": to.Ptr("20030000801A118C"),
						"ver":  to.Ptr("1.0"),
					},
					CorrelationID: to.Ptr("1e121103-0ba6-4300-ac9d-952bb5d0c80f"),
					EventDataID:   to.Ptr("44ade6b4-3813-45e6-ae27-7420a95fa2f8"),
					EventName: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("End request"),
						Value:          to.Ptr("EndRequest"),
					},
					EventTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-01-21T22:14:26.9792776Z"); return t }()),
					HTTPRequest: &armmonitor.HTTPRequestInfo{
						Method:          to.Ptr("PUT"),
						ClientIPAddress: to.Ptr("192.168.35.115"),
						ClientRequestID: to.Ptr("27003b25-91d3-418f-8eb1-29e537dcb249"),
					},
					ID:    to.Ptr("/subscriptions/089bd33f-d4ec-47fe-8ba5-0753aa5c5b33/resourceGroups/MSSupportGroup/providers/microsoft.support/supporttickets/115012112305841/events/44ade6b4-3813-45e6-ae27-7420a95fa2f8/ticks/635574752669792776"),
					Level: to.Ptr(armmonitor.EventLevelInformational),
					OperationName: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("microsoft.support/supporttickets/write"),
						Value:          to.Ptr("microsoft.support/supporttickets/write"),
					},
					Properties: map[string]*string{
						"statusCode": to.Ptr("Created"),
					},
					ResourceGroupName: to.Ptr("MSSupportGroup"),
					ResourceProviderName: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("microsoft.support"),
						Value:          to.Ptr("microsoft.support"),
					},
					Status: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Succeeded"),
						Value:          to.Ptr("Succeeded"),
					},
					SubStatus: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Created (HTTP Status Code: 201)"),
						Value:          to.Ptr("Created"),
					},
					SubmissionTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-01-21T22:14:39.9936304Z"); return t }()),
					SubscriptionID:      to.Ptr("089bd33f-d4ec-47fe-8ba5-0753aa5c5b33"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventDataCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventDataCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/GetTenantActivityLogsFiltered.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/GetTenantActivityLogsFilteredAndSelected.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Tenant Activity Logs with filter and select"},
	})
	client = armmonitor.NewTenantActivityLogsClient(cred, &options)
	pager = client.List(&armmonitor.TenantActivityLogsClientListOptions{Filter: to.Ptr("eventTimestamp ge '2015-01-21T20:00:00Z' and eventTimestamp le '2015-01-23T20:00:00Z' and resourceGroupName eq 'MSSupportGroup'"),
		Select: to.Ptr("eventName,id,resourceGroupName,resourceProviderName,operationName,status,eventTimestamp,correlationId,submissionTimestamp,level"),
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/GetTenantActivityLogsFilteredAndSelected.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.EventDataCollection{
			Value: []*armmonitor.EventData{
				{
					CorrelationID: to.Ptr("1e121103-0ba6-4300-ac9d-952bb5d0c80f"),
					EventName: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("End request"),
						Value:          to.Ptr("EndRequest"),
					},
					EventTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-01-21T22:14:26.9792776Z"); return t }()),
					ID:             to.Ptr("/subscriptions/089bd33f-d4ec-47fe-8ba5-0753aa5c5b33/resourceGroups/MSSupportGroup/providers/microsoft.support/supporttickets/115012112305841/events/44ade6b4-3813-45e6-ae27-7420a95fa2f8/ticks/635574752669792776"),
					Level:          to.Ptr(armmonitor.EventLevelInformational),
					OperationName: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("microsoft.support/supporttickets/write"),
						Value:          to.Ptr("microsoft.support/supporttickets/write"),
					},
					ResourceGroupName: to.Ptr("MSSupportGroup"),
					ResourceProviderName: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("microsoft.support"),
						Value:          to.Ptr("microsoft.support"),
					},
					Status: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Succeeded"),
						Value:          to.Ptr("Succeeded"),
					},
					SubmissionTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-01-21T22:14:39.9936304Z"); return t }()),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventDataCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventDataCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/GetTenantActivityLogsFilteredAndSelected.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/GetTenantActivityLogsSelected.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Tenant Activity Logs with select"},
	})
	client = armmonitor.NewTenantActivityLogsClient(cred, &options)
	pager = client.List(&armmonitor.TenantActivityLogsClientListOptions{Filter: nil,
		Select: to.Ptr("eventName,id,resourceGroupName,resourceProviderName,operationName,status,eventTimestamp,correlationId,submissionTimestamp,level"),
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/GetTenantActivityLogsSelected.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.EventDataCollection{
			Value: []*armmonitor.EventData{
				{
					CorrelationID: to.Ptr("1e121103-0ba6-4300-ac9d-952bb5d0c80f"),
					EventName: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("End request"),
						Value:          to.Ptr("EndRequest"),
					},
					EventTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-01-21T22:14:26.9792776Z"); return t }()),
					ID:             to.Ptr("/subscriptions/089bd33f-d4ec-47fe-8ba5-0753aa5c5b33/resourceGroups/MSSupportGroup/providers/microsoft.support/supporttickets/115012112305841/events/44ade6b4-3813-45e6-ae27-7420a95fa2f8/ticks/635574752669792776"),
					Level:          to.Ptr(armmonitor.EventLevelInformational),
					OperationName: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("microsoft.support/supporttickets/write"),
						Value:          to.Ptr("microsoft.support/supporttickets/write"),
					},
					ResourceGroupName: to.Ptr("MSSupportGroup"),
					ResourceProviderName: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("microsoft.support"),
						Value:          to.Ptr("microsoft.support"),
					},
					Status: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Succeeded"),
						Value:          to.Ptr("Succeeded"),
					},
					SubmissionTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-01-21T22:14:39.9936304Z"); return t }()),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventDataCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventDataCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/GetTenantActivityLogsSelected.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/GetTenantActivityLogsNoParams.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Tenant Activity Logs without filter or select"},
	})
	client = armmonitor.NewTenantActivityLogsClient(cred, &options)
	pager = client.List(&armmonitor.TenantActivityLogsClientListOptions{Filter: nil,
		Select: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/GetTenantActivityLogsNoParams.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.EventDataCollection{
			Value: []*armmonitor.EventData{
				{
					OperationID: to.Ptr("1e121103-0ba6-4300-ac9d-952bb5d0c80f"),
					Description: to.Ptr(""),
					Authorization: &armmonitor.SenderAuthorization{
						Action: to.Ptr("microsoft.support/supporttickets/write"),
						Role:   to.Ptr("Subscription Admin"),
						Scope:  to.Ptr("/subscriptions/089bd33f-d4ec-47fe-8ba5-0753aa5c5b33/resourceGroups/MSSupportGroup/providers/microsoft.support/supporttickets/115012112305841"),
					},
					Caller: to.Ptr("admin@contoso.com"),
					Claims: map[string]*string{
						"name":     to.Ptr("John Smith"),
						"appid":    to.Ptr("c44b4083-3bq0-49c1-b47d-974e53cbdf3c"),
						"appidacr": to.Ptr("2"),
						"aud":      to.Ptr("https://management.core.windows.net/"),
						"exp":      to.Ptr("1421880271"),
						"groups":   to.Ptr("cacfe77c-e058-4712-83qw-f9b08849fd60,7f71d11d-4c41-4b23-99d2-d32ce7aa621c,31522864-0578-4ea0-9gdc-e66cc564d18c"),
						"http://schemas.microsoft.com/claims/authnclassreference":              to.Ptr("1"),
						"http://schemas.microsoft.com/claims/authnmethodsreferences":           to.Ptr("pwd"),
						"http://schemas.microsoft.com/identity/claims/objectidentifier":        to.Ptr("2468adf0-8211-44e3-95xq-85137af64708"),
						"http://schemas.microsoft.com/identity/claims/scope":                   to.Ptr("user_impersonation"),
						"http://schemas.microsoft.com/identity/claims/tenantid":                to.Ptr("1e8d8218-c5e7-4578-9acc-9abbd5d23315"),
						"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname":      to.Ptr("John"),
						"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name":           to.Ptr("admin@contoso.com"),
						"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier": to.Ptr("9vckmEGF7zDKk1YzIY8k0t1_EAPaXoeHyPRn6f413zM"),
						"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname":        to.Ptr("Smith"),
						"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn":            to.Ptr("admin@contoso.com"),
						"iat":  to.Ptr("1421876371"),
						"iss":  to.Ptr("https://sts.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47/"),
						"nbf":  to.Ptr("1421876371"),
						"puid": to.Ptr("20030000801A118C"),
						"ver":  to.Ptr("1.0"),
					},
					CorrelationID: to.Ptr("1e121103-0ba6-4300-ac9d-952bb5d0c80f"),
					EventDataID:   to.Ptr("44ade6b4-3813-45e6-ae27-7420a95fa2f8"),
					EventName: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("End request"),
						Value:          to.Ptr("EndRequest"),
					},
					EventTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-01-21T22:14:26.9792776Z"); return t }()),
					HTTPRequest: &armmonitor.HTTPRequestInfo{
						Method:          to.Ptr("PUT"),
						ClientIPAddress: to.Ptr("192.168.35.115"),
						ClientRequestID: to.Ptr("27003b25-91d3-418f-8eb1-29e537dcb249"),
					},
					ID:    to.Ptr("/subscriptions/089bd33f-d4ec-47fe-8ba5-0753aa5c5b33/resourceGroups/MSSupportGroup/providers/microsoft.support/supporttickets/115012112305841/events/44ade6b4-3813-45e6-ae27-7420a95fa2f8/ticks/635574752669792776"),
					Level: to.Ptr(armmonitor.EventLevelInformational),
					OperationName: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("microsoft.support/supporttickets/write"),
						Value:          to.Ptr("microsoft.support/supporttickets/write"),
					},
					Properties: map[string]*string{
						"statusCode": to.Ptr("Created"),
					},
					ResourceGroupName: to.Ptr("MSSupportGroup"),
					ResourceProviderName: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("microsoft.support"),
						Value:          to.Ptr("microsoft.support"),
					},
					Status: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Succeeded"),
						Value:          to.Ptr("Succeeded"),
					},
					SubStatus: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Created (HTTP Status Code: 201)"),
						Value:          to.Ptr("Created"),
					},
					SubmissionTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-01-21T22:14:39.9936304Z"); return t }()),
					SubscriptionID:      to.Ptr("089bd33f-d4ec-47fe-8ba5-0753aa5c5b33"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventDataCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventDataCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2015-04-01/examples/GetTenantActivityLogsNoParams.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMetricDefinitions_List(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-01-01/examples/GetMetricDefinitionsApplicationInsights.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Application Insights Metric Definitions without filter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewMetricDefinitionsClient(cred, &options)
	pager := client.List("subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions",
		&armmonitor.MetricDefinitionsClientListOptions{Metricnamespace: to.Ptr("microsoft.insights/components")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-01-01/examples/GetMetricDefinitionsApplicationInsights.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.MetricDefinitionCollection{
			Value: []*armmonitor.MetricDefinition{
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Availability"),
						Value:          to.Ptr("availabilityResults/availabilityPercentage"),
					},
					Category: to.Ptr("Availability"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Test name"),
							Value:          to.Ptr("availabilityResult/name"),
						},
						{
							LocalizedValue: to.Ptr("Run location"),
							Value:          to.Ptr("availabilityResult/location"),
						}},
					DisplayDescription:  to.Ptr("Percentage of successfully completed availability tests"),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/availabilityResults/availabilityPercentage"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitPercent),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Availability tests"),
						Value:          to.Ptr("availabilityResults/count"),
					},
					Category: to.Ptr("Availability"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Test name"),
							Value:          to.Ptr("availabilityResult/name"),
						},
						{
							LocalizedValue: to.Ptr("Run location"),
							Value:          to.Ptr("availabilityResult/location"),
						},
						{
							LocalizedValue: to.Ptr("Test result"),
							Value:          to.Ptr("availabilityResult/success"),
						}},
					DisplayDescription:  to.Ptr("Count of availability tests"),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/availabilityResults/count"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeCount),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Availability test duration"),
						Value:          to.Ptr("availabilityResults/duration"),
					},
					Category: to.Ptr("Availability"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Test name"),
							Value:          to.Ptr("availabilityResult/name"),
						},
						{
							LocalizedValue: to.Ptr("Run location"),
							Value:          to.Ptr("availabilityResult/location"),
						},
						{
							LocalizedValue: to.Ptr("Test result"),
							Value:          to.Ptr("availabilityResult/success"),
						}},
					DisplayDescription:  to.Ptr("Availability test duration"),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/availabilityResults/duration"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeMinimum)},
					Unit: to.Ptr(armmonitor.MetricUnitMilliSeconds),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Page load network connect time"),
						Value:          to.Ptr("browserTimings/networkDuration"),
					},
					Category:            to.Ptr("Browser"),
					DisplayDescription:  to.Ptr("Time between user request and network connection. Includes DNS lookup and transport connection."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/browserTimings/networkDuration"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeMinimum)},
					Unit: to.Ptr(armmonitor.MetricUnitMilliSeconds),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Client processing time"),
						Value:          to.Ptr("browserTimings/processingDuration"),
					},
					Category:            to.Ptr("Browser"),
					DisplayDescription:  to.Ptr("Time between receiving the last byte of a document until the DOM is loaded. Async requests may still be processing."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/browserTimings/processingDuration"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeMinimum)},
					Unit: to.Ptr(armmonitor.MetricUnitMilliSeconds),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Receiving response time"),
						Value:          to.Ptr("browserTimings/receiveDuration"),
					},
					Category:            to.Ptr("Browser"),
					DisplayDescription:  to.Ptr("Time between the first and last bytes, or until disconnection."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/browserTimings/receiveDuration"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeMinimum)},
					Unit: to.Ptr(armmonitor.MetricUnitMilliSeconds),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Send request time"),
						Value:          to.Ptr("browserTimings/sendDuration"),
					},
					Category:            to.Ptr("Browser"),
					DisplayDescription:  to.Ptr("Time between network connection and receiving the first byte."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/browserTimings/sendDuration"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeMinimum)},
					Unit: to.Ptr(armmonitor.MetricUnitMilliSeconds),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Browser page load time"),
						Value:          to.Ptr("browserTimings/totalDuration"),
					},
					Category:            to.Ptr("Browser"),
					DisplayDescription:  to.Ptr("Time from user request until DOM, stylesheets, scripts and images are loaded."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/browserTimings/totalDuration"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeMinimum)},
					Unit: to.Ptr(armmonitor.MetricUnitMilliSeconds),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Dependency calls"),
						Value:          to.Ptr("dependencies/count"),
					},
					Category: to.Ptr("Server"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Dependency type"),
							Value:          to.Ptr("dependency/type"),
						},
						{
							LocalizedValue: to.Ptr("Dependency performance"),
							Value:          to.Ptr("dependency/performanceBucket"),
						},
						{
							LocalizedValue: to.Ptr("Successful call"),
							Value:          to.Ptr("dependency/success"),
						},
						{
							LocalizedValue: to.Ptr("Target of a dependency call"),
							Value:          to.Ptr("dependency/target"),
						},
						{
							LocalizedValue: to.Ptr("Result code"),
							Value:          to.Ptr("dependency/resultCode"),
						},
						{
							LocalizedValue: to.Ptr("Is traffic synthetic"),
							Value:          to.Ptr("operation/synthetic"),
						},
						{
							LocalizedValue: to.Ptr("Cloud role instance"),
							Value:          to.Ptr("cloud/roleInstance"),
						},
						{
							LocalizedValue: to.Ptr("Cloud role name"),
							Value:          to.Ptr("cloud/roleName"),
						}},
					DisplayDescription:  to.Ptr("Count of calls made by the application to external resources."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/dependencies/count"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeCount),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Dependency duration"),
						Value:          to.Ptr("dependencies/duration"),
					},
					Category: to.Ptr("Server"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Dependency type"),
							Value:          to.Ptr("dependency/type"),
						},
						{
							LocalizedValue: to.Ptr("Dependency performance"),
							Value:          to.Ptr("dependency/performanceBucket"),
						},
						{
							LocalizedValue: to.Ptr("Successful call"),
							Value:          to.Ptr("dependency/success"),
						},
						{
							LocalizedValue: to.Ptr("Target of a dependency call"),
							Value:          to.Ptr("dependency/target"),
						},
						{
							LocalizedValue: to.Ptr("Result code"),
							Value:          to.Ptr("dependency/resultCode"),
						},
						{
							LocalizedValue: to.Ptr("Is traffic synthetic"),
							Value:          to.Ptr("operation/synthetic"),
						},
						{
							LocalizedValue: to.Ptr("Cloud role instance"),
							Value:          to.Ptr("cloud/roleInstance"),
						},
						{
							LocalizedValue: to.Ptr("Cloud role name"),
							Value:          to.Ptr("cloud/roleName"),
						}},
					DisplayDescription:  to.Ptr("Duration of calls made by the application to external resources."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/dependencies/duration"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeMinimum)},
					Unit: to.Ptr(armmonitor.MetricUnitMilliSeconds),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Dependency call failures"),
						Value:          to.Ptr("dependencies/failed"),
					},
					Category: to.Ptr("Failures"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Dependency type"),
							Value:          to.Ptr("dependency/type"),
						},
						{
							LocalizedValue: to.Ptr("Dependency performance"),
							Value:          to.Ptr("dependency/performanceBucket"),
						},
						{
							LocalizedValue: to.Ptr("Target of a dependency call"),
							Value:          to.Ptr("dependency/target"),
						},
						{
							LocalizedValue: to.Ptr("Result code"),
							Value:          to.Ptr("dependency/resultCode"),
						},
						{
							LocalizedValue: to.Ptr("Is traffic synthetic"),
							Value:          to.Ptr("operation/synthetic"),
						},
						{
							LocalizedValue: to.Ptr("Cloud role instance"),
							Value:          to.Ptr("cloud/roleInstance"),
						},
						{
							LocalizedValue: to.Ptr("Cloud role name"),
							Value:          to.Ptr("cloud/roleName"),
						}},
					DisplayDescription:  to.Ptr("Count of failed dependency calls made by the application to external resources."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/dependencies/failed"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeCount),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Page views"),
						Value:          to.Ptr("pageViews/count"),
					},
					Category: to.Ptr("Usage"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Is traffic synthetic"),
							Value:          to.Ptr("operation/synthetic"),
						},
						{
							LocalizedValue: to.Ptr("Cloud role name"),
							Value:          to.Ptr("cloud/roleName"),
						}},
					DisplayDescription:  to.Ptr("Count of page views."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/pageViews/count"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeCount),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Page view load time"),
						Value:          to.Ptr("pageViews/duration"),
					},
					Category: to.Ptr("Usage"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Is traffic synthetic"),
							Value:          to.Ptr("operation/synthetic"),
						},
						{
							LocalizedValue: to.Ptr("Cloud role name"),
							Value:          to.Ptr("cloud/roleName"),
						}},
					DisplayDescription:  to.Ptr("Page view load time"),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/pageViews/duration"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeMinimum)},
					Unit: to.Ptr(armmonitor.MetricUnitMilliSeconds),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("HTTP request execution time"),
						Value:          to.Ptr("performanceCounters/requestExecutionTime"),
					},
					Category: to.Ptr("Performance counters"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Cloud role instance"),
							Value:          to.Ptr("cloud/roleInstance"),
						}},
					DisplayDescription:  to.Ptr("Execution time of the most recent request."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/performanceCounters/requestExecutionTime"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeMinimum)},
					Unit: to.Ptr(armmonitor.MetricUnitMilliSeconds),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("HTTP requests in application queue"),
						Value:          to.Ptr("performanceCounters/requestsInQueue"),
					},
					Category: to.Ptr("Performance counters"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Cloud role instance"),
							Value:          to.Ptr("cloud/roleInstance"),
						}},
					DisplayDescription:  to.Ptr("Length of the application request queue."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/performanceCounters/requestsInQueue"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeMinimum)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("HTTP request rate"),
						Value:          to.Ptr("performanceCounters/requestsPerSecond"),
					},
					Category: to.Ptr("Performance counters"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Cloud role instance"),
							Value:          to.Ptr("cloud/roleInstance"),
						}},
					DisplayDescription:  to.Ptr("Rate of all requests to the application per second from ASP.NET."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/performanceCounters/requestsPerSecond"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeMinimum)},
					Unit: to.Ptr(armmonitor.MetricUnitCountPerSecond),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Exception rate"),
						Value:          to.Ptr("performanceCounters/exceptionsPerSecond"),
					},
					Category: to.Ptr("Performance counters"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Cloud role instance"),
							Value:          to.Ptr("cloud/roleInstance"),
						}},
					DisplayDescription:  to.Ptr("Count of handled and unhandled exceptions reported to windows, including .NET exceptions and unmanaged exceptions that are converted into .NET exceptions."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/performanceCounters/exceptionsPerSecond"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeMinimum)},
					Unit: to.Ptr(armmonitor.MetricUnitCountPerSecond),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Process IO rate"),
						Value:          to.Ptr("performanceCounters/processIOBytesPerSecond"),
					},
					Category: to.Ptr("Performance counters"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Cloud role instance"),
							Value:          to.Ptr("cloud/roleInstance"),
						}},
					DisplayDescription:  to.Ptr("Total bytes per second read and written to files, network and devices."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/performanceCounters/processIOBytesPerSecond"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeMinimum)},
					Unit: to.Ptr(armmonitor.MetricUnitBytesPerSecond),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Process CPU"),
						Value:          to.Ptr("performanceCounters/processCpuPercentage"),
					},
					Category: to.Ptr("Performance counters"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Cloud role instance"),
							Value:          to.Ptr("cloud/roleInstance"),
						}},
					DisplayDescription:  to.Ptr("The percentage of elapsed time that all process threads used the processor to execute instructions. This can vary between 0 to 100. This metric indicates the performance of w3wp process alone."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/performanceCounters/processCpuPercentage"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeMinimum)},
					Unit: to.Ptr(armmonitor.MetricUnitPercent),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Processor time"),
						Value:          to.Ptr("performanceCounters/processorCpuPercentage"),
					},
					Category: to.Ptr("Performance counters"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Cloud role instance"),
							Value:          to.Ptr("cloud/roleInstance"),
						}},
					DisplayDescription:  to.Ptr("The percentage of time that the processor spends in non-idle threads."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/performanceCounters/processorCpuPercentage"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeMinimum)},
					Unit: to.Ptr(armmonitor.MetricUnitPercent),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Available memory"),
						Value:          to.Ptr("performanceCounters/memoryAvailableBytes"),
					},
					Category: to.Ptr("Performance counters"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Cloud role instance"),
							Value:          to.Ptr("cloud/roleInstance"),
						}},
					DisplayDescription:  to.Ptr("Physical memory immediately available for allocation to a process or for system use."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/performanceCounters/memoryAvailableBytes"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeMinimum)},
					Unit: to.Ptr(armmonitor.MetricUnitBytes),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Process private bytes"),
						Value:          to.Ptr("performanceCounters/processPrivateBytes"),
					},
					Category: to.Ptr("Performance counters"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Cloud role instance"),
							Value:          to.Ptr("cloud/roleInstance"),
						}},
					DisplayDescription:  to.Ptr("Memory exclusively assigned to the monitored application's processes."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/performanceCounters/processPrivateBytes"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeMinimum)},
					Unit: to.Ptr(armmonitor.MetricUnitBytes),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Server response time"),
						Value:          to.Ptr("requests/duration"),
					},
					Category: to.Ptr("Server"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Request performance"),
							Value:          to.Ptr("request/performanceBucket"),
						},
						{
							LocalizedValue: to.Ptr("Result code"),
							Value:          to.Ptr("request/resultCode"),
						},
						{
							LocalizedValue: to.Ptr("Is traffic synthetic"),
							Value:          to.Ptr("operation/synthetic"),
						},
						{
							LocalizedValue: to.Ptr("Cloud role instance"),
							Value:          to.Ptr("cloud/roleInstance"),
						},
						{
							LocalizedValue: to.Ptr("Successful request"),
							Value:          to.Ptr("request/success"),
						},
						{
							LocalizedValue: to.Ptr("Cloud role name"),
							Value:          to.Ptr("cloud/roleName"),
						}},
					DisplayDescription:  to.Ptr("Time between receiving an HTTP request and finishing sending the response."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/requests/duration"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeMinimum)},
					Unit: to.Ptr(armmonitor.MetricUnitMilliSeconds),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Server requests"),
						Value:          to.Ptr("requests/count"),
					},
					Category: to.Ptr("Server"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Request performance"),
							Value:          to.Ptr("request/performanceBucket"),
						},
						{
							LocalizedValue: to.Ptr("Result code"),
							Value:          to.Ptr("request/resultCode"),
						},
						{
							LocalizedValue: to.Ptr("Is traffic synthetic"),
							Value:          to.Ptr("operation/synthetic"),
						},
						{
							LocalizedValue: to.Ptr("Cloud role instance"),
							Value:          to.Ptr("cloud/roleInstance"),
						},
						{
							LocalizedValue: to.Ptr("Successful request"),
							Value:          to.Ptr("request/success"),
						},
						{
							LocalizedValue: to.Ptr("Cloud role name"),
							Value:          to.Ptr("cloud/roleName"),
						}},
					DisplayDescription:  to.Ptr("Count of HTTP requests completed."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/requests/count"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeCount),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Failed requests"),
						Value:          to.Ptr("requests/failed"),
					},
					Category: to.Ptr("Failures"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Request performance"),
							Value:          to.Ptr("request/performanceBucket"),
						},
						{
							LocalizedValue: to.Ptr("Result code"),
							Value:          to.Ptr("request/resultCode"),
						},
						{
							LocalizedValue: to.Ptr("Is traffic synthetic"),
							Value:          to.Ptr("operation/synthetic"),
						},
						{
							LocalizedValue: to.Ptr("Cloud role instance"),
							Value:          to.Ptr("cloud/roleInstance"),
						},
						{
							LocalizedValue: to.Ptr("Cloud role name"),
							Value:          to.Ptr("cloud/roleName"),
						}},
					DisplayDescription:  to.Ptr("Count of HTTP requests marked as failed. In most cases these are requests with a response code >= 400 and not equal to 401."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/requests/failed"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeCount),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Server request rate"),
						Value:          to.Ptr("requests/rate"),
					},
					Category: to.Ptr("Server"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Request performance"),
							Value:          to.Ptr("request/performanceBucket"),
						},
						{
							LocalizedValue: to.Ptr("Result code"),
							Value:          to.Ptr("request/resultCode"),
						},
						{
							LocalizedValue: to.Ptr("Is traffic synthetic"),
							Value:          to.Ptr("operation/synthetic"),
						},
						{
							LocalizedValue: to.Ptr("Cloud role instance"),
							Value:          to.Ptr("cloud/roleInstance"),
						},
						{
							LocalizedValue: to.Ptr("Successful request"),
							Value:          to.Ptr("request/success"),
						},
						{
							LocalizedValue: to.Ptr("Cloud role name"),
							Value:          to.Ptr("cloud/roleName"),
						}},
					DisplayDescription:  to.Ptr("Rate of server requests per second"),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/requests/rate"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitCountPerSecond),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Exceptions"),
						Value:          to.Ptr("exceptions/count"),
					},
					Category: to.Ptr("Failures"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Cloud role name"),
							Value:          to.Ptr("cloud/roleName"),
						},
						{
							LocalizedValue: to.Ptr("Cloud role instance"),
							Value:          to.Ptr("cloud/roleInstance"),
						},
						{
							LocalizedValue: to.Ptr("Device type"),
							Value:          to.Ptr("client/type"),
						}},
					DisplayDescription:  to.Ptr("Combined count of all uncaught exceptions."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/exceptions/count"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeCount),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Browser exceptions"),
						Value:          to.Ptr("exceptions/browser"),
					},
					Category: to.Ptr("Failures"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Cloud role name"),
							Value:          to.Ptr("cloud/roleName"),
						}},
					DisplayDescription:  to.Ptr("Count of uncaught exceptions thrown in the browser."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/exceptions/browser"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeCount),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Server exceptions"),
						Value:          to.Ptr("exceptions/server"),
					},
					Category: to.Ptr("Failures"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Cloud role name"),
							Value:          to.Ptr("cloud/roleName"),
						},
						{
							LocalizedValue: to.Ptr("Cloud role instance"),
							Value:          to.Ptr("cloud/roleInstance"),
						}},
					DisplayDescription:  to.Ptr("Count of uncaught exceptions thrown in the server application."),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/exceptions/server"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeCount),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Traces"),
						Value:          to.Ptr("traces/count"),
					},
					Category: to.Ptr("Usage"),
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Severity level"),
							Value:          to.Ptr("trace/severityLevel"),
						},
						{
							LocalizedValue: to.Ptr("Is traffic synthetic"),
							Value:          to.Ptr("operation/synthetic"),
						},
						{
							LocalizedValue: to.Ptr("Cloud role name"),
							Value:          to.Ptr("cloud/roleName"),
						},
						{
							LocalizedValue: to.Ptr("Cloud role instance"),
							Value:          to.Ptr("cloud/roleInstance"),
						}},
					DisplayDescription:  to.Ptr("Trace document count"),
					ID:                  to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions/traces/count"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("microsoft.insights/components"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeCount),
					ResourceID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MetricDefinitionCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MetricDefinitionCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-01-01/examples/GetMetricDefinitionsApplicationInsights.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-01-01/examples/GetMetricDefinitions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Metric Definitions without filter"},
	})
	client = armmonitor.NewMetricDefinitionsClient(cred, &options)
	pager = client.List("subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest/providers/microsoft.insights/metricDefinitions",
		&armmonitor.MetricDefinitionsClientListOptions{Metricnamespace: to.Ptr("Microsoft.Web/sites")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-01-01/examples/GetMetricDefinitions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.MetricDefinitionCollection{
			Value: []*armmonitor.MetricDefinition{
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("CPU Time"),
						Value:          to.Ptr("CpuTime"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Instance"),
							Value:          to.Ptr("Instance"),
						}},
					ID:                  to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest/providers/microsoft.insights/metricdefinitions/CpuTime"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("Microsoft.Web/sites"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeTotal),
					ResourceID:             to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeNone),
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeTotal),
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitSeconds),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Requests"),
						Value:          to.Ptr("Requests"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Instance"),
							Value:          to.Ptr("Instance"),
						}},
					ID:                  to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest/providers/microsoft.insights/metricdefinitions/Requests"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("Microsoft.Web/sites"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeTotal),
					ResourceID:             to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeNone),
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeTotal),
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Data In"),
						Value:          to.Ptr("BytesReceived"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Instance"),
							Value:          to.Ptr("Instance"),
						}},
					ID:                  to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest/providers/microsoft.insights/metricdefinitions/BytesReceived"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("Microsoft.Web/sites"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeTotal),
					ResourceID:             to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeNone),
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeTotal),
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitBytes),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Data Out"),
						Value:          to.Ptr("BytesSent"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Instance"),
							Value:          to.Ptr("Instance"),
						}},
					ID:                  to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest/providers/microsoft.insights/metricdefinitions/BytesSent"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("Microsoft.Web/sites"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeTotal),
					ResourceID:             to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeNone),
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeTotal),
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitBytes),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Http 101"),
						Value:          to.Ptr("Http101"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Instance"),
							Value:          to.Ptr("Instance"),
						}},
					ID:                  to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest/providers/microsoft.insights/metricdefinitions/Http101"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("Microsoft.Web/sites"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeTotal),
					ResourceID:             to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeNone),
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeTotal),
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Http 2xx"),
						Value:          to.Ptr("Http2xx"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Instance"),
							Value:          to.Ptr("Instance"),
						}},
					ID:                  to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest/providers/microsoft.insights/metricdefinitions/Http2xx"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("Microsoft.Web/sites"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeTotal),
					ResourceID:             to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeNone),
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeTotal),
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Http 3xx"),
						Value:          to.Ptr("Http3xx"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Instance"),
							Value:          to.Ptr("Instance"),
						}},
					ID:                  to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest/providers/microsoft.insights/metricdefinitions/Http3xx"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("Microsoft.Web/sites"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeTotal),
					ResourceID:             to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeNone),
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeTotal),
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Http 401"),
						Value:          to.Ptr("Http401"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Instance"),
							Value:          to.Ptr("Instance"),
						}},
					ID:                  to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest/providers/microsoft.insights/metricdefinitions/Http401"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("Microsoft.Web/sites"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeTotal),
					ResourceID:             to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeNone),
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeTotal),
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Http 403"),
						Value:          to.Ptr("Http403"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Instance"),
							Value:          to.Ptr("Instance"),
						}},
					ID:                  to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest/providers/microsoft.insights/metricdefinitions/Http403"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("Microsoft.Web/sites"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeTotal),
					ResourceID:             to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeNone),
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeTotal),
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Http 404"),
						Value:          to.Ptr("Http404"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Instance"),
							Value:          to.Ptr("Instance"),
						}},
					ID:                  to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest/providers/microsoft.insights/metricdefinitions/Http404"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("Microsoft.Web/sites"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeTotal),
					ResourceID:             to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeNone),
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeTotal),
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Http 406"),
						Value:          to.Ptr("Http406"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Instance"),
							Value:          to.Ptr("Instance"),
						}},
					ID:                  to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest/providers/microsoft.insights/metricdefinitions/Http406"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("Microsoft.Web/sites"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeTotal),
					ResourceID:             to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeNone),
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeTotal),
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Http 4xx"),
						Value:          to.Ptr("Http4xx"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Instance"),
							Value:          to.Ptr("Instance"),
						}},
					ID:                  to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest/providers/microsoft.insights/metricdefinitions/Http4xx"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("Microsoft.Web/sites"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeTotal),
					ResourceID:             to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeNone),
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeTotal),
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Http Server Errors"),
						Value:          to.Ptr("Http5xx"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Instance"),
							Value:          to.Ptr("Instance"),
						}},
					ID:                  to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest/providers/microsoft.insights/metricdefinitions/Http5xx"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("Microsoft.Web/sites"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeTotal),
					ResourceID:             to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeNone),
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeTotal),
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Memory working set"),
						Value:          to.Ptr("MemoryWorkingSet"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Instance"),
							Value:          to.Ptr("Instance"),
						}},
					ID:                  to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest/providers/microsoft.insights/metricdefinitions/MemoryWorkingSet"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("Microsoft.Web/sites"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeNone),
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeTotal),
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitBytes),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Average memory working set"),
						Value:          to.Ptr("AverageMemoryWorkingSet"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Instance"),
							Value:          to.Ptr("Instance"),
						}},
					ID:                  to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest/providers/microsoft.insights/metricdefinitions/AverageMemoryWorkingSet"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("Microsoft.Web/sites"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeNone),
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeTotal),
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitBytes),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Average Response Time"),
						Value:          to.Ptr("AverageResponseTime"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("Instance"),
							Value:          to.Ptr("Instance"),
						}},
					ID:                  to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest/providers/microsoft.insights/metricdefinitions/AverageResponseTime"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					Namespace:              to.Ptr("Microsoft.Web/sites"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeNone),
						to.Ptr(armmonitor.AggregationTypeAverage),
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeTotal),
						to.Ptr(armmonitor.AggregationTypeCount)},
					Unit: to.Ptr(armmonitor.MetricUnitSeconds),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MetricDefinitionCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MetricDefinitionCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-01-01/examples/GetMetricDefinitions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-01-01/examples/GetMetricDefinitionsMetricClass.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get StorageCache Metric Definitions with metric class"},
	})
	client = armmonitor.NewMetricDefinitionsClient(cred, &options)
	pager = client.List("subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache",
		&armmonitor.MetricDefinitionsClientListOptions{Metricnamespace: to.Ptr("microsoft.storagecache/caches")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-01-01/examples/GetMetricDefinitionsMetricClass.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.MetricDefinitionCollection{
			Value: []*armmonitor.MetricDefinition{
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Total Client IOPS"),
						Value:          to.Ptr("ClientIOPS"),
					},
					DisplayDescription:  to.Ptr("The rate of client file operations processed by the Cache."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/ClientIOPS"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassTransactions),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Average Client Latency"),
						Value:          to.Ptr("ClientLatency"),
					},
					DisplayDescription:  to.Ptr("Average latency of client file operations to the Cache."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/ClientLatency"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassLatency),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitMilliSeconds),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Client Read IOPS"),
						Value:          to.Ptr("ClientReadIOPS"),
					},
					DisplayDescription:  to.Ptr("Client read operations per second."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/ClientReadIOPS"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassTransactions),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitCountPerSecond),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Average Cache Read Throughput"),
						Value:          to.Ptr("ClientReadThroughput"),
					},
					DisplayDescription:  to.Ptr("Client read data transfer rate."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/ClientReadThroughput"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassTransactions),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitBytesPerSecond),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Client Write IOPS"),
						Value:          to.Ptr("ClientWriteIOPS"),
					},
					DisplayDescription:  to.Ptr("Client write operations per second."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/ClientWriteIOPS"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassTransactions),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitCountPerSecond),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Average Cache Write Throughput"),
						Value:          to.Ptr("ClientWriteThroughput"),
					},
					DisplayDescription:  to.Ptr("Client write data transfer rate."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/ClientWriteThroughput"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassTransactions),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitBytesPerSecond),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Client Metadata Read IOPS"),
						Value:          to.Ptr("ClientMetadataReadIOPS"),
					},
					DisplayDescription:  to.Ptr("The rate of client file operations sent to the Cache, excluding data reads, that do not modify persistent state."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/ClientMetadataReadIOPS"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassTransactions),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitCountPerSecond),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Client Metadata Write IOPS"),
						Value:          to.Ptr("ClientMetadataWriteIOPS"),
					},
					DisplayDescription:  to.Ptr("The rate of client file operations sent to the Cache, excluding data writes, that modify persistent state."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/ClientMetadataWriteIOPS"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassTransactions),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitCountPerSecond),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Client Lock IOPS"),
						Value:          to.Ptr("ClientLockIOPS"),
					},
					DisplayDescription:  to.Ptr("Client file locking operations per second."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/ClientLockIOPS"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassTransactions),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitCountPerSecond),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Storage Target Health"),
						Value:          to.Ptr("StorageTargetHealth"),
					},
					DisplayDescription:  to.Ptr("Boolean results of connectivity test between the Cache and Storage Targets."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/StorageTargetHealth"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassErrors),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Uptime"),
						Value:          to.Ptr("Uptime"),
					},
					DisplayDescription:  to.Ptr("Boolean results of connectivity test between the Cache and monitoring system."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/Uptime"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassAvailability),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Total StorageTarget IOPS"),
						Value:          to.Ptr("StorageTargetIOPS"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("StorageTarget"),
							Value:          to.Ptr("StorageTarget"),
						}},
					DisplayDescription:  to.Ptr("The rate of all file operations the Cache sends to a particular StorageTarget."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/StorageTargetIOPS"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassTransactions),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("StorageTarget Write IOPS"),
						Value:          to.Ptr("StorageTargetWriteIOPS"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("StorageTarget"),
							Value:          to.Ptr("StorageTarget"),
						}},
					DisplayDescription:  to.Ptr("The rate of the file write operations the Cache sends to a particular StorageTarget."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/StorageTargetWriteIOPS"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassTransactions),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("StorageTarget Asynchronous Write Throughput"),
						Value:          to.Ptr("StorageTargetAsyncWriteThroughput"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("StorageTarget"),
							Value:          to.Ptr("StorageTarget"),
						}},
					DisplayDescription:  to.Ptr("The rate the Cache asynchronously writes data to a particular StorageTarget. These are opportunistic writes that do not cause clients to block."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/StorageTargetAsyncWriteThroughput"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassTransactions),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitBytesPerSecond),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("StorageTarget Synchronous Write Throughput"),
						Value:          to.Ptr("StorageTargetSyncWriteThroughput"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("StorageTarget"),
							Value:          to.Ptr("StorageTarget"),
						}},
					DisplayDescription:  to.Ptr("The rate the Cache synchronously writes data to a particular StorageTarget. These are writes that do cause clients to block."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/StorageTargetSyncWriteThroughput"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassTransactions),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitBytesPerSecond),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("StorageTarget Total Write Throughput"),
						Value:          to.Ptr("StorageTargetTotalWriteThroughput"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("StorageTarget"),
							Value:          to.Ptr("StorageTarget"),
						}},
					DisplayDescription:  to.Ptr("The total rate that the Cache writes data to a particular StorageTarget."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/StorageTargetTotalWriteThroughput"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassTransactions),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitBytesPerSecond),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("StorageTarget Latency"),
						Value:          to.Ptr("StorageTargetLatency"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("StorageTarget"),
							Value:          to.Ptr("StorageTarget"),
						}},
					DisplayDescription:  to.Ptr("The average round trip latency of all the file operations the Cache sends to a partricular StorageTarget."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/StorageTargetLatency"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassTransactions),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitMilliSeconds),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("StorageTarget Metadata Read IOPS"),
						Value:          to.Ptr("StorageTargetMetadataReadIOPS"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("StorageTarget"),
							Value:          to.Ptr("StorageTarget"),
						}},
					DisplayDescription:  to.Ptr("The rate of file operations that do not modify persistent state, and excluding the read operation, that the Cache sends to a particular StorageTarget."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/StorageTargetMetadataReadIOPS"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassTransactions),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitCountPerSecond),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("StorageTarget Metadata Write IOPS"),
						Value:          to.Ptr("StorageTargetMetadataWriteIOPS"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("StorageTarget"),
							Value:          to.Ptr("StorageTarget"),
						}},
					DisplayDescription:  to.Ptr("The rate of file operations that do modify persistent state and excluding the write operation, that the Cache sends to a particular StorageTarget."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/StorageTargetMetadataWriteIOPS"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassTransactions),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitCountPerSecond),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("StorageTarget Read IOPS"),
						Value:          to.Ptr("StorageTargetReadIOPS"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("StorageTarget"),
							Value:          to.Ptr("StorageTarget"),
						}},
					DisplayDescription:  to.Ptr("The rate of file read operations the Cache sends to a particular StorageTarget."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/StorageTargetReadIOPS"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassTransactions),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitCountPerSecond),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("StorageTarget Read Ahead Throughput"),
						Value:          to.Ptr("StorageTargetReadAheadThroughput"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("StorageTarget"),
							Value:          to.Ptr("StorageTarget"),
						}},
					DisplayDescription:  to.Ptr("The rate the Cache opportunisticly reads data from the StorageTarget."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/StorageTargetReadAheadThroughput"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassTransactions),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitBytesPerSecond),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("StorageTarget Fill Throughput"),
						Value:          to.Ptr("StorageTargetFillThroughput"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("StorageTarget"),
							Value:          to.Ptr("StorageTarget"),
						}},
					DisplayDescription:  to.Ptr("The rate the Cache reads data from the StorageTarget to handle a cache miss."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/StorageTargetFillThroughput"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassTransactions),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitBytesPerSecond),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("StorageTarget Total Read Throughput"),
						Value:          to.Ptr("StorageTargetTotalReadThroughput"),
					},
					Dimensions: []*armmonitor.LocalizableString{
						{
							LocalizedValue: to.Ptr("StorageTarget"),
							Value:          to.Ptr("StorageTarget"),
						}},
					DisplayDescription:  to.Ptr("The total rate that the Cache reads data from a particular StorageTarget."),
					ID:                  to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache/providers/microsoft.insights/metricdefinitions/StorageTargetTotalReadThroughput"),
					IsDimensionRequired: to.Ptr(false),
					MetricAvailabilities: []*armmonitor.MetricAvailability{
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT15M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT30M"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT6H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("PT12H"),
						},
						{
							Retention: to.Ptr("P93D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					MetricClass:            to.Ptr(armmonitor.MetricClassTransactions),
					Namespace:              to.Ptr("microsoft.storagecache/caches"),
					PrimaryAggregationType: to.Ptr(armmonitor.AggregationTypeAverage),
					ResourceID:             to.Ptr("/subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache"),
					SupportedAggregationTypes: []*armmonitor.AggregationType{
						to.Ptr(armmonitor.AggregationTypeMinimum),
						to.Ptr(armmonitor.AggregationTypeMaximum),
						to.Ptr(armmonitor.AggregationTypeAverage)},
					Unit: to.Ptr(armmonitor.MetricUnitBytesPerSecond),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MetricDefinitionCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MetricDefinitionCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-01-01/examples/GetMetricDefinitionsMetricClass.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMetrics_List(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-01-01/examples/GetMetric.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Metric for data"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewMetricsClient(cred, &options)
	res, err := client.List(ctx,
		"subscriptions/b324c52b-4073-4807-93af-e07d289c093e/resourceGroups/test/providers/Microsoft.Storage/storageAccounts/larryshoebox/blobServices/default",
		&armmonitor.MetricsClientListOptions{Timespan: to.Ptr("2017-04-14T02:20:00Z/2017-04-14T04:20:00Z"),
			Interval:        to.Ptr("PT1M"),
			Metricnames:     nil,
			Aggregation:     to.Ptr("Average,count"),
			Top:             to.Ptr[int32](3),
			Orderby:         to.Ptr("Average asc"),
			Filter:          to.Ptr("BlobType eq '*'"),
			ResultType:      nil,
			Metricnamespace: to.Ptr("Microsoft.Storage/storageAccounts/blobServices"),
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-01-01/examples/GetMetric.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.Response{
			Cost:           to.Ptr[int32](0),
			Interval:       to.Ptr("PT1M"),
			Namespace:      to.Ptr("Microsoft.Storage/storageAccounts/blobServices"),
			Resourceregion: to.Ptr("eastus2"),
			Timespan:       to.Ptr("2017-04-14T02:20:00Z/2017-04-14T04:20:00Z"),
			Value: []*armmonitor.Metric{
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Blob Capacity"),
						Value:          to.Ptr("BlobCapacity"),
					},
					Type:               to.Ptr("Microsoft.Insights/metrics"),
					DisplayDescription: to.Ptr("The amount of storage used by the storage account’s Blob service in bytes."),
					ID:                 to.Ptr("/subscriptions/b324c52b-4073-4807-93af-e07d289c093e/resourceGroups/test/providers/Microsoft.Storage/storageAccounts/larryshoebox/blobServices/default/providers/Microsoft.Insights/metrics/BlobCapacity"),
					Timeseries: []*armmonitor.TimeSeriesElement{
						{
							Data: []*armmonitor.MetricValue{
								{
									Count:     to.Ptr[float64](0),
									TimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T02:20:00Z"); return t }()),
								},
								{
									Count:     to.Ptr[float64](0),
									TimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T02:21:00Z"); return t }()),
								},
								{
									Count:     to.Ptr[float64](0),
									TimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T02:22:00Z"); return t }()),
								},
								{
									Average:   to.Ptr[float64](0),
									Count:     to.Ptr[float64](1),
									TimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T02:23:00Z"); return t }()),
								}},
							Metadatavalues: []*armmonitor.MetadataValue{
								{
									Name: &armmonitor.LocalizableString{
										LocalizedValue: to.Ptr("blobtype"),
										Value:          to.Ptr("blobtype"),
									},
									Value: to.Ptr("PageBlob"),
								}},
						},
						{
							Data: []*armmonitor.MetricValue{
								{
									Count:     to.Ptr[float64](0),
									TimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T02:20:00Z"); return t }()),
								},
								{
									Count:     to.Ptr[float64](0),
									TimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T02:21:00Z"); return t }()),
								},
								{
									Count:     to.Ptr[float64](0),
									TimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T02:22:00Z"); return t }()),
								},
								{
									Average:   to.Ptr[float64](245),
									Count:     to.Ptr[float64](1),
									TimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T02:23:00Z"); return t }()),
								}},
							Metadatavalues: []*armmonitor.MetadataValue{
								{
									Name: &armmonitor.LocalizableString{
										LocalizedValue: to.Ptr("blobtype"),
										Value:          to.Ptr("blobtype"),
									},
									Value: to.Ptr("BlockBlob"),
								}},
						}},
					Unit: to.Ptr(armmonitor.MetricUnitBytes),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.Response) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Response)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-01-01/examples/GetMetric.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-01-01/examples/GetMetricMetadata.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Metric for metadata"},
	})
	client = armmonitor.NewMetricsClient(cred, &options)
	res, err = client.List(ctx,
		"subscriptions/b324c52b-4073-4807-93af-e07d289c093e/resourceGroups/test/providers/Microsoft.Storage/storageAccounts/larryshoebox/blobServices/default",
		&armmonitor.MetricsClientListOptions{Timespan: to.Ptr("2017-04-14T02:20:00Z/2017-04-14T04:20:00Z"),
			Interval:        to.Ptr("PT1M"),
			Metricnames:     nil,
			Aggregation:     to.Ptr("Average,count"),
			Top:             to.Ptr[int32](3),
			Orderby:         to.Ptr("Average asc"),
			Filter:          to.Ptr("BlobType eq '*'"),
			ResultType:      nil,
			Metricnamespace: to.Ptr("Microsoft.Storage/storageAccounts/blobServices"),
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-01-01/examples/GetMetricMetadata.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.Response{
			Namespace:      to.Ptr("Microsoft.Storage/storageAccounts/blobServices"),
			Resourceregion: to.Ptr("eastus2"),
			Timespan:       to.Ptr("2017-04-14T02:20:00Z/2017-04-14T04:20:00Z"),
			Value: []*armmonitor.Metric{
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Blob Capacity"),
						Value:          to.Ptr("BlobCapacity"),
					},
					Type:               to.Ptr("Microsoft.Insights/metrics"),
					DisplayDescription: to.Ptr("The amount of storage used by the storage account’s Blob service in bytes."),
					ID:                 to.Ptr("/subscriptions/b324c52b-4073-4807-93af-e07d289c093e/resourceGroups/test/providers/Microsoft.Storage/storageAccounts/larryshoebox/blobServices/default/providers/Microsoft.Insights/metrics/BlobCapacity"),
					Timeseries: []*armmonitor.TimeSeriesElement{
						{
							Metadatavalues: []*armmonitor.MetadataValue{
								{
									Name: &armmonitor.LocalizableString{
										LocalizedValue: to.Ptr("blobtype"),
										Value:          to.Ptr("blobtype"),
									},
									Value: to.Ptr("BlockBlob"),
								}},
						},
						{
							Metadatavalues: []*armmonitor.MetadataValue{
								{
									Name: &armmonitor.LocalizableString{
										LocalizedValue: to.Ptr("blobtype"),
										Value:          to.Ptr("blobtype"),
									},
									Value: to.Ptr("PageBlob"),
								}},
						}},
					Unit: to.Ptr(armmonitor.MetricUnitBytes),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.Response) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Response)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-01-01/examples/GetMetricMetadata.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-01-01/examples/GetMetricError.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Metric with error"},
	})
	client = armmonitor.NewMetricsClient(cred, &options)
	res, err = client.List(ctx,
		"subscriptions/ac41e21f-afd6-4a79-8070-f01eba278f97/resourceGroups/todking/providers/Microsoft.DocumentDb/databaseAccounts/tk-cosmos-mongo",
		&armmonitor.MetricsClientListOptions{Timespan: to.Ptr("2021-06-07T21:51:00Z/2021-06-08T01:51:00Z"),
			Interval:        to.Ptr("FULL"),
			Metricnames:     to.Ptr("MongoRequestsCount,MongoRequests"),
			Aggregation:     to.Ptr("average"),
			Top:             nil,
			Orderby:         nil,
			Filter:          nil,
			ResultType:      nil,
			Metricnamespace: to.Ptr("microsoft.documentdb/databaseaccounts"),
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-01-01/examples/GetMetricError.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.Response{
			Cost:           to.Ptr[int32](239),
			Interval:       to.Ptr("PT4H"),
			Namespace:      to.Ptr("microsoft.documentdb/databaseaccounts"),
			Resourceregion: to.Ptr("westus2"),
			Timespan:       to.Ptr("2021-06-07T21:51:00Z/2021-06-08T01:51:00Z"),
			Value: []*armmonitor.Metric{
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("(deprecated) Mongo Request Rate"),
						Value:          to.Ptr("MongoRequestsCount"),
					},
					Type:         to.Ptr("Microsoft.Insights/metrics"),
					ErrorCode:    to.Ptr("InvalidSamplingType"),
					ErrorMessage: to.Ptr("Sampling type is not found. Metric:CosmosDBCustomer,AzureMonitor,MongoRequests, SamplingType:NullableAverage."),
					ID:           to.Ptr("/subscriptions/ac41e21f-afd6-4a79-8070-f01eba278f97/resourceGroups/todking/providers/Microsoft.DocumentDb/databaseAccounts/tk-cosmos-mongo/providers/Microsoft.Insights/metrics/MongoRequestsCount"),
					Timeseries:   []*armmonitor.TimeSeriesElement{},
					Unit:         to.Ptr(armmonitor.MetricUnitCountPerSecond),
				},
				{
					Name: &armmonitor.LocalizableString{
						LocalizedValue: to.Ptr("Mongo Requests"),
						Value:          to.Ptr("MongoRequests"),
					},
					Type:               to.Ptr("Microsoft.Insights/metrics"),
					DisplayDescription: to.Ptr("Number of Mongo Requests Made"),
					ErrorCode:          to.Ptr("Success"),
					ID:                 to.Ptr("/subscriptions/ac41e21f-afd6-4a79-8070-f01eba278f97/resourceGroups/todking/providers/Microsoft.DocumentDb/databaseAccounts/tk-cosmos-mongo/providers/Microsoft.Insights/metrics/MongoRequests"),
					Timeseries: []*armmonitor.TimeSeriesElement{
						{
							Data: []*armmonitor.MetricValue{
								{
									Average:   to.Ptr[float64](0),
									TimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-07T21:51:00Z"); return t }()),
								}},
							Metadatavalues: []*armmonitor.MetadataValue{},
						}},
					Unit: to.Ptr(armmonitor.MetricUnitCount),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.Response) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Response)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-01-01/examples/GetMetricError.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBaselines_List(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2019-03-01/examples/metricBaselines.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get metric baselines"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewBaselinesClient(cred, &options)
	pager := client.List("subscriptions/b368ca2f-e298-46b7-b0ab-012281956afa/resourceGroups/vms/providers/Microsoft.Compute/virtualMachines/vm1",
		&armmonitor.BaselinesClientListOptions{Metricnames: nil,
			Metricnamespace: nil,
			Timespan:        to.Ptr("2019-03-12T11:00:00.000Z/2019-03-12T12:00:00.000Z"),
			Interval:        to.Ptr("PT1H"),
			Aggregation:     to.Ptr("average"),
			Sensitivities:   to.Ptr("Low,Medium"),
			Filter:          nil,
			ResultType:      nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2019-03-01/examples/metricBaselines.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.MetricBaselinesResponse{
			Value: []*armmonitor.SingleMetricBaseline{
				{
					Name: to.Ptr("Percentage CPU"),
					Type: to.Ptr("microsoft.insights/metricBaselines"),
					ID:   to.Ptr("/subscriptions/11aeb0ed-456b-4ca0-8df5-b9fbdc63d0d3/resourceGroups/SmartAnalytics-DEV-VM/providers/Microsoft.Compute/virtualMachines/DemoVM1/providers/microsoft.insights/metricBaselines/Percentage CPU"),
					Properties: &armmonitor.MetricBaselinesProperties{
						Baselines: []*armmonitor.TimeSeriesBaseline{
							{
								Aggregation: to.Ptr("average"),
								Data: []*armmonitor.SingleBaseline{
									{
										HighThresholds: []*float64{
											to.Ptr[float64](90.3453),
											to.Ptr[float64](91.3453)},
										LowThresholds: []*float64{
											to.Ptr[float64](30),
											to.Ptr[float64](31.1)},
										Sensitivity: to.Ptr(armmonitor.BaselineSensitivityLow),
									},
									{
										HighThresholds: []*float64{
											to.Ptr[float64](70.3453),
											to.Ptr[float64](71.3453)},
										LowThresholds: []*float64{
											to.Ptr[float64](50),
											to.Ptr[float64](51.1)},
										Sensitivity: to.Ptr(armmonitor.BaselineSensitivityMedium),
									}},
								Dimensions: []*armmonitor.MetricSingleDimension{},
								MetadataValues: []*armmonitor.BaselineMetadata{
									{
										Name:  to.Ptr("ErrorType"),
										Value: to.Ptr("TooManyAnomalies"),
									},
									{
										Name:  to.Ptr("SeasonalityFrequency"),
										Value: to.Ptr("288"),
									}},
								Timestamps: []*time.Time{
									to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-12T11:00:00.000Z"); return t }()),
									to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-12T12:00:00.000Z"); return t }())},
							}},
						Interval:  to.Ptr("PT1H"),
						Namespace: to.Ptr("microsoft.compute/virtualmachines"),
						Timespan:  to.Ptr("2019-03-12T11:00:00.000Z/2019-03-12T12:00:00.000Z"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MetricBaselinesResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MetricBaselinesResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2019-03-01/examples/metricBaselines.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMetricAlerts_ListBySubscription(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/listMetricAlert.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List metric alert rules"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewMetricAlertsClient("14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/listMetricAlert.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.MetricAlertResourceCollection{
			Value: []*armmonitor.MetricAlertResource{
				{
					Type:     to.Ptr("Microsoft.Insights/metricAlerts"),
					ID:       to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/highcpu"),
					Location: to.Ptr("global"),
					Tags: map[string]*string{
						"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
					},
					Properties: &armmonitor.MetricAlertProperties{
						Description: to.Ptr("This is the description of the rule1"),
						Actions: []*armmonitor.MetricAlertAction{
							{
								ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
								WebHookProperties: map[string]*string{
									"key11": to.Ptr("value11"),
									"key12": to.Ptr("value12"),
								},
							}},
						Criteria: &armmonitor.MetricAlertSingleResourceMultipleMetricCriteria{
							ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorSingleResourceMultipleMetricCriteria),
							AllOf: []*armmonitor.MetricCriteria{
								{
									Name:            to.Ptr("High_CPU_80"),
									CriterionType:   to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
									Dimensions:      []*armmonitor.MetricDimension{},
									MetricName:      to.Ptr("CustomMetric_\\Processor(_Total)\\% Processor Time"),
									TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
									Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
									Threshold:       to.Ptr[float64](80.5),
								}},
						},
						Enabled:             to.Ptr(true),
						EvaluationFrequency: to.Ptr("Pt1m"),
						Scopes: []*string{
							to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme")},
						Severity:   to.Ptr[int32](3),
						WindowSize: to.Ptr("Pt15m"),
					},
				},
				{
					Type:     to.Ptr("Microsoft.Insights/metricAlerts"),
					ID:       to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/mediumcpu"),
					Location: to.Ptr("global"),
					Tags: map[string]*string{
						"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
					},
					Properties: &armmonitor.MetricAlertProperties{
						Description: to.Ptr("Med cpu alert"),
						Actions: []*armmonitor.MetricAlertAction{
							{
								ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
								WebHookProperties: map[string]*string{
									"key11": to.Ptr("value11"),
									"key12": to.Ptr("value12"),
								},
							}},
						Criteria: &armmonitor.MetricAlertSingleResourceMultipleMetricCriteria{
							ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorSingleResourceMultipleMetricCriteria),
							AllOf: []*armmonitor.MetricCriteria{
								{
									Name:            to.Ptr("Medium_CPU_50"),
									CriterionType:   to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
									Dimensions:      []*armmonitor.MetricDimension{},
									MetricName:      to.Ptr("CustomMetric_\\Processor(_Total)\\% Processor Time"),
									TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
									Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
									Threshold:       to.Ptr[float64](50.5),
								}},
						},
						Enabled:             to.Ptr(true),
						EvaluationFrequency: to.Ptr("Pt1m"),
						Scopes: []*string{
							to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme")},
						Severity:   to.Ptr[int32](4),
						WindowSize: to.Ptr("Pt15m"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MetricAlertResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MetricAlertResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/listMetricAlert.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMetricAlerts_ListByResourceGroup(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/listMetricAlert.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List metric alert rules"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewMetricAlertsClient("14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7", cred, &options)
	pager := client.ListByResourceGroup("gigtest",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/listMetricAlert.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.MetricAlertResourceCollection{
			Value: []*armmonitor.MetricAlertResource{
				{
					Type:     to.Ptr("Microsoft.Insights/metricAlerts"),
					ID:       to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/highcpu"),
					Location: to.Ptr("global"),
					Tags: map[string]*string{
						"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
					},
					Properties: &armmonitor.MetricAlertProperties{
						Description: to.Ptr("This is the description of the rule1"),
						Actions: []*armmonitor.MetricAlertAction{
							{
								ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
								WebHookProperties: map[string]*string{
									"key11": to.Ptr("value11"),
									"key12": to.Ptr("value12"),
								},
							}},
						Criteria: &armmonitor.MetricAlertSingleResourceMultipleMetricCriteria{
							ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorSingleResourceMultipleMetricCriteria),
							AllOf: []*armmonitor.MetricCriteria{
								{
									Name:            to.Ptr("High_CPU_80"),
									CriterionType:   to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
									Dimensions:      []*armmonitor.MetricDimension{},
									MetricName:      to.Ptr("CustomMetric_\\Processor(_Total)\\% Processor Time"),
									TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
									Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
									Threshold:       to.Ptr[float64](80.5),
								}},
						},
						Enabled:             to.Ptr(true),
						EvaluationFrequency: to.Ptr("Pt1m"),
						Scopes: []*string{
							to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme")},
						Severity:   to.Ptr[int32](3),
						WindowSize: to.Ptr("Pt15m"),
					},
				},
				{
					Type:     to.Ptr("Microsoft.Insights/metricAlerts"),
					ID:       to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/mediumcpu"),
					Location: to.Ptr("global"),
					Tags: map[string]*string{
						"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
					},
					Properties: &armmonitor.MetricAlertProperties{
						Description: to.Ptr("Med cpu alert"),
						Actions: []*armmonitor.MetricAlertAction{
							{
								ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
								WebHookProperties: map[string]*string{
									"key11": to.Ptr("value11"),
									"key12": to.Ptr("value12"),
								},
							}},
						Criteria: &armmonitor.MetricAlertSingleResourceMultipleMetricCriteria{
							ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorSingleResourceMultipleMetricCriteria),
							AllOf: []*armmonitor.MetricCriteria{
								{
									Name:            to.Ptr("Medium_CPU_50"),
									CriterionType:   to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
									Dimensions:      []*armmonitor.MetricDimension{},
									MetricName:      to.Ptr("CustomMetric_\\Processor(_Total)\\% Processor Time"),
									TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
									Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
									Threshold:       to.Ptr[float64](50.5),
								}},
						},
						Enabled:             to.Ptr(true),
						EvaluationFrequency: to.Ptr("Pt1m"),
						Scopes: []*string{
							to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme")},
						Severity:   to.Ptr[int32](4),
						WindowSize: to.Ptr("Pt15m"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MetricAlertResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MetricAlertResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/listMetricAlert.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMetricAlerts_Get(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getDynamicMetricAlertMultipleResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a dynamic alert rule for multiple resources"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewMetricAlertsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"gigtest",
		"MetricAlertOnMultipleResources",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getDynamicMetricAlertMultipleResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.MetricAlertResource{
			Type:     to.Ptr("Microsoft.Insights/metricAlerts"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/MetricAlertOnMultipleResources"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
			},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("This is the description of the rule1"),
				Actions: []*armmonitor.MetricAlertAction{
					{
						ActionGroupID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.Ptr("value11"),
							"key12": to.Ptr("value12"),
						},
					}},
				AutoMitigate: to.Ptr(false),
				Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
					ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
					AllOf: []armmonitor.MultiMetricCriteriaClassification{
						&armmonitor.DynamicMetricCriteria{
							Name:             to.Ptr("High_CPU_80"),
							CriterionType:    to.Ptr(armmonitor.CriterionTypeDynamicThresholdCriterion),
							Dimensions:       []*armmonitor.MetricDimension{},
							MetricName:       to.Ptr("Percentage CPU"),
							MetricNamespace:  to.Ptr("microsoft.compute/virtualmachines"),
							TimeAggregation:  to.Ptr(armmonitor.AggregationTypeEnumAverage),
							AlertSensitivity: to.Ptr(armmonitor.DynamicThresholdSensitivityMedium),
							FailingPeriods: &armmonitor.DynamicThresholdFailingPeriods{
								MinFailingPeriodsToAlert:  to.Ptr[float32](4),
								NumberOfEvaluationPeriods: to.Ptr[float32](4),
							},
							Operator: to.Ptr(armmonitor.DynamicThresholdOperatorGreaterOrLessThan),
						}},
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("PT1M"),
				Scopes: []*string{
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1"),
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2")},
				Severity:             to.Ptr[int32](3),
				TargetResourceRegion: to.Ptr("southcentralus"),
				TargetResourceType:   to.Ptr("Microsoft.Compute/virtualMachines"),
				WindowSize:           to.Ptr("PT15M"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetricAlertResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetricAlertResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getDynamicMetricAlertMultipleResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getDynamicMetricAlertSingleResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a dynamic alert rule for single resource"},
	})
	client = armmonitor.NewMetricAlertsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.Get(ctx,
		"gigtest",
		"chiricutin",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getDynamicMetricAlertSingleResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.MetricAlertResource{
			Type:     to.Ptr("Microsoft.Insights/metricAlerts"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/chiricutin"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
			},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("This is the description of the rule1"),
				Actions: []*armmonitor.MetricAlertAction{
					{
						ActionGroupID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.Ptr("value11"),
							"key12": to.Ptr("value12"),
						},
					}},
				AutoMitigate: to.Ptr(false),
				Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
					ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
					AllOf: []armmonitor.MultiMetricCriteriaClassification{
						&armmonitor.DynamicMetricCriteria{
							Name:             to.Ptr("High_CPU_80"),
							CriterionType:    to.Ptr(armmonitor.CriterionTypeDynamicThresholdCriterion),
							Dimensions:       []*armmonitor.MetricDimension{},
							MetricName:       to.Ptr("Percentage CPU"),
							MetricNamespace:  to.Ptr("microsoft.compute/virtualmachines"),
							TimeAggregation:  to.Ptr(armmonitor.AggregationTypeEnumAverage),
							AlertSensitivity: to.Ptr(armmonitor.DynamicThresholdSensitivityMedium),
							FailingPeriods: &armmonitor.DynamicThresholdFailingPeriods{
								MinFailingPeriodsToAlert:  to.Ptr[float32](4),
								NumberOfEvaluationPeriods: to.Ptr[float32](4),
							},
							Operator: to.Ptr(armmonitor.DynamicThresholdOperatorGreaterOrLessThan),
						}},
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("Pt1m"),
				Scopes: []*string{
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme")},
				Severity:   to.Ptr[int32](3),
				WindowSize: to.Ptr("Pt15m"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetricAlertResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetricAlertResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getDynamicMetricAlertSingleResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getWebTestMetricAlert.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a web test alert rule"},
	})
	client = armmonitor.NewMetricAlertsClient("12345678-1234-1234-1234-123456789101", cred, &options)
	res, err = client.Get(ctx,
		"rg-example",
		"webtest-name-example",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getWebTestMetricAlert.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.MetricAlertResource{
			Name:     to.Ptr("webtest-name-example"),
			Type:     to.Ptr("Microsoft.Insights/metricAlerts"),
			ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/metricalerts/webtest-name-example"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/component-example":  to.Ptr("Resource"),
				"hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/webtest-name-example": to.Ptr("Resource"),
			},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("Automatically created alert rule for availability test \"webtest-name-example\""),
				Actions:     []*armmonitor.MetricAlertAction{},
				Criteria: &armmonitor.WebtestLocationAvailabilityCriteria{
					ODataType:           to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorWebtestLocationAvailabilityCriteria),
					ComponentID:         to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/component-example"),
					FailedLocationCount: to.Ptr[float32](2),
					WebTestID:           to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/webtest-name-example"),
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("PT1M"),
				Scopes: []*string{
					to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/webtest-name-example"),
					to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/component-example")},
				Severity:   to.Ptr[int32](4),
				WindowSize: to.Ptr("PT15M"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetricAlertResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetricAlertResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getWebTestMetricAlert.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getMetricAlertMultipleResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an alert rule for multiple resources"},
	})
	client = armmonitor.NewMetricAlertsClient("14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7", cred, &options)
	res, err = client.Get(ctx,
		"gigtest",
		"MetricAlertOnMultipleResources",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getMetricAlertMultipleResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.MetricAlertResource{
			Type:     to.Ptr("Microsoft.Insights/metricAlerts"),
			ID:       to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/MetricAlertOnMultipleResources"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
			},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("This is the description of the rule1"),
				Actions: []*armmonitor.MetricAlertAction{
					{
						ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.Ptr("value11"),
							"key12": to.Ptr("value12"),
						},
					}},
				AutoMitigate: to.Ptr(false),
				Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
					ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
					AllOf: []armmonitor.MultiMetricCriteriaClassification{
						&armmonitor.MetricCriteria{
							Name:            to.Ptr("High_CPU_80"),
							CriterionType:   to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
							Dimensions:      []*armmonitor.MetricDimension{},
							MetricName:      to.Ptr("Percentage CPU"),
							MetricNamespace: to.Ptr("microsoft.compute/virtualmachines"),
							TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
							Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
							Threshold:       to.Ptr[float64](80.5),
						}},
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("PT1M"),
				Scopes: []*string{
					to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1"),
					to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2")},
				Severity:             to.Ptr[int32](3),
				TargetResourceRegion: to.Ptr("southcentralus"),
				TargetResourceType:   to.Ptr("Microsoft.Compute/virtualMachines"),
				WindowSize:           to.Ptr("PT15M"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetricAlertResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetricAlertResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getMetricAlertMultipleResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getMetricAlertSingleResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an alert rule for single resource"},
	})
	client = armmonitor.NewMetricAlertsClient("14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7", cred, &options)
	res, err = client.Get(ctx,
		"gigtest",
		"chiricutin",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getMetricAlertSingleResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.MetricAlertResource{
			Type:     to.Ptr("Microsoft.Insights/metricAlerts"),
			ID:       to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/chiricutin"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
			},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("This is the description of the rule1"),
				Actions: []*armmonitor.MetricAlertAction{
					{
						ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.Ptr("value11"),
							"key12": to.Ptr("value12"),
						},
					}},
				AutoMitigate: to.Ptr(false),
				Criteria: &armmonitor.MetricAlertSingleResourceMultipleMetricCriteria{
					ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorSingleResourceMultipleMetricCriteria),
					AllOf: []*armmonitor.MetricCriteria{
						{
							Name:            to.Ptr("High_CPU_80"),
							CriterionType:   to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
							Dimensions:      []*armmonitor.MetricDimension{},
							MetricName:      to.Ptr("\\Processor(_Total)\\% Processor Time"),
							TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
							Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
							Threshold:       to.Ptr[float64](80.5),
						}},
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("Pt1m"),
				Scopes: []*string{
					to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme")},
				Severity:   to.Ptr[int32](3),
				WindowSize: to.Ptr("Pt15m"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetricAlertResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetricAlertResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getMetricAlertSingleResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getMetricAlertResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an alert rule on resource group(s)"},
	})
	client = armmonitor.NewMetricAlertsClient("14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7", cred, &options)
	res, err = client.Get(ctx,
		"gigtest1",
		"MetricAlertAtResourceGroupLevel",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getMetricAlertResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.MetricAlertResource{
			Type:     to.Ptr("Microsoft.Insights/metricAlerts"),
			ID:       to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest1/providers/providers/microsoft.insights/metricalerts/MetricAlertAtResourceGroupLevel"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
			},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("This is the description of the rule1"),
				Actions: []*armmonitor.MetricAlertAction{
					{
						ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.Ptr("value11"),
							"key12": to.Ptr("value12"),
						},
					}},
				AutoMitigate: to.Ptr(false),
				Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
					ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
					AllOf: []armmonitor.MultiMetricCriteriaClassification{
						&armmonitor.MetricCriteria{
							Name:            to.Ptr("High_CPU_80"),
							CriterionType:   to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
							Dimensions:      []*armmonitor.MetricDimension{},
							MetricName:      to.Ptr("Percentage CPU"),
							MetricNamespace: to.Ptr("microsoft.compute/virtualmachines"),
							TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
							Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
							Threshold:       to.Ptr[float64](80.5),
						}},
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("PT1M"),
				Scopes: []*string{
					to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest1"),
					to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest2")},
				Severity:             to.Ptr[int32](3),
				TargetResourceRegion: to.Ptr("southcentralus"),
				TargetResourceType:   to.Ptr("Microsoft.Compute/virtualMachines"),
				WindowSize:           to.Ptr("PT15M"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetricAlertResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetricAlertResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getMetricAlertResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getMetricAlertSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an alert rule on subscription"},
	})
	client = armmonitor.NewMetricAlertsClient("14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7", cred, &options)
	res, err = client.Get(ctx,
		"gigtest",
		"MetricAlertAtSubscriptionLevel",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getMetricAlertSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.MetricAlertResource{
			Type:     to.Ptr("Microsoft.Insights/metricAlerts"),
			ID:       to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/MetricAlertAtSubscriptionLevel"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
			},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("This is the description of the rule1"),
				Actions: []*armmonitor.MetricAlertAction{
					{
						ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.Ptr("value11"),
							"key12": to.Ptr("value12"),
						},
					}},
				AutoMitigate: to.Ptr(false),
				Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
					ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
					AllOf: []armmonitor.MultiMetricCriteriaClassification{
						&armmonitor.MetricCriteria{
							Name:            to.Ptr("High_CPU_80"),
							CriterionType:   to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
							Dimensions:      []*armmonitor.MetricDimension{},
							MetricName:      to.Ptr("Percentage CPU"),
							MetricNamespace: to.Ptr("microsoft.compute/virtualmachines"),
							TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
							Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
							Threshold:       to.Ptr[float64](80.5),
						}},
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("PT1M"),
				Scopes: []*string{
					to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7")},
				Severity:             to.Ptr[int32](3),
				TargetResourceRegion: to.Ptr("southcentralus"),
				TargetResourceType:   to.Ptr("Microsoft.Compute/virtualMachines"),
				WindowSize:           to.Ptr("PT15M"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetricAlertResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetricAlertResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getMetricAlertSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMetricAlerts_CreateOrUpdate(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateDynamicMetricAlertMultipleResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a dynamic alert rule for Multiple Resources"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewMetricAlertsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"gigtest",
		"MetricAlertOnMultipleResources",
		armmonitor.MetricAlertResource{
			Location: to.Ptr("global"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("This is the description of the rule1"),
				Actions: []*armmonitor.MetricAlertAction{
					{
						ActionGroupID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.Ptr("value11"),
							"key12": to.Ptr("value12"),
						},
					}},
				AutoMitigate: to.Ptr(true),
				Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
					ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
					AllOf: []armmonitor.MultiMetricCriteriaClassification{
						&armmonitor.DynamicMetricCriteria{
							Name:             to.Ptr("High_CPU_80"),
							CriterionType:    to.Ptr(armmonitor.CriterionTypeDynamicThresholdCriterion),
							Dimensions:       []*armmonitor.MetricDimension{},
							MetricName:       to.Ptr("Percentage CPU"),
							MetricNamespace:  to.Ptr("microsoft.compute/virtualmachines"),
							TimeAggregation:  to.Ptr(armmonitor.AggregationTypeEnumAverage),
							AlertSensitivity: to.Ptr(armmonitor.DynamicThresholdSensitivityMedium),
							FailingPeriods: &armmonitor.DynamicThresholdFailingPeriods{
								MinFailingPeriodsToAlert:  to.Ptr[float32](4),
								NumberOfEvaluationPeriods: to.Ptr[float32](4),
							},
							Operator: to.Ptr(armmonitor.DynamicThresholdOperatorGreaterOrLessThan),
						}},
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("PT1M"),
				Scopes: []*string{
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1"),
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2")},
				Severity:             to.Ptr[int32](3),
				TargetResourceRegion: to.Ptr("southcentralus"),
				TargetResourceType:   to.Ptr("Microsoft.Compute/virtualMachines"),
				WindowSize:           to.Ptr("PT15M"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateDynamicMetricAlertMultipleResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.MetricAlertResource{
			Type:     to.Ptr("Microsoft.Insights/metricAlerts"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/MetricAlertOnMultipleResources"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
			},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("This is the description of the rule1"),
				Actions: []*armmonitor.MetricAlertAction{
					{
						ActionGroupID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.Ptr("value11"),
							"key12": to.Ptr("value12"),
						},
					}},
				AutoMitigate: to.Ptr(true),
				Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
					ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
					AllOf: []armmonitor.MultiMetricCriteriaClassification{
						&armmonitor.DynamicMetricCriteria{
							Name:             to.Ptr("High_CPU_80"),
							CriterionType:    to.Ptr(armmonitor.CriterionTypeDynamicThresholdCriterion),
							Dimensions:       []*armmonitor.MetricDimension{},
							MetricName:       to.Ptr("Percentage CPU"),
							MetricNamespace:  to.Ptr("microsoft.compute/virtualmachines"),
							TimeAggregation:  to.Ptr(armmonitor.AggregationTypeEnumAverage),
							AlertSensitivity: to.Ptr(armmonitor.DynamicThresholdSensitivityMedium),
							FailingPeriods: &armmonitor.DynamicThresholdFailingPeriods{
								MinFailingPeriodsToAlert:  to.Ptr[float32](4),
								NumberOfEvaluationPeriods: to.Ptr[float32](4),
							},
							Operator: to.Ptr(armmonitor.DynamicThresholdOperatorGreaterOrLessThan),
						}},
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("PT1M"),
				Scopes: []*string{
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1"),
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2")},
				Severity:             to.Ptr[int32](3),
				TargetResourceRegion: to.Ptr("southcentralus"),
				TargetResourceType:   to.Ptr("Microsoft.Compute/virtualMachines"),
				WindowSize:           to.Ptr("PT15M"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetricAlertResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetricAlertResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateDynamicMetricAlertMultipleResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateDynamicMetricAlertSingleResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a dynamic alert rule for Single Resource"},
	})
	client = armmonitor.NewMetricAlertsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"gigtest",
		"chiricutin",
		armmonitor.MetricAlertResource{
			Location: to.Ptr("global"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("This is the description of the rule1"),
				Actions: []*armmonitor.MetricAlertAction{
					{
						ActionGroupID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.Ptr("value11"),
							"key12": to.Ptr("value12"),
						},
					}},
				AutoMitigate: to.Ptr(true),
				Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
					ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
					AllOf: []armmonitor.MultiMetricCriteriaClassification{
						&armmonitor.DynamicMetricCriteria{
							Name:             to.Ptr("High_CPU_80"),
							CriterionType:    to.Ptr(armmonitor.CriterionTypeDynamicThresholdCriterion),
							Dimensions:       []*armmonitor.MetricDimension{},
							MetricName:       to.Ptr("Percentage CPU"),
							MetricNamespace:  to.Ptr("microsoft.compute/virtualmachines"),
							TimeAggregation:  to.Ptr(armmonitor.AggregationTypeEnumAverage),
							AlertSensitivity: to.Ptr(armmonitor.DynamicThresholdSensitivityMedium),
							FailingPeriods: &armmonitor.DynamicThresholdFailingPeriods{
								MinFailingPeriodsToAlert:  to.Ptr[float32](4),
								NumberOfEvaluationPeriods: to.Ptr[float32](4),
							},
							IgnoreDataBefore: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-04T21:00:00.000Z"); return t }()),
							Operator:         to.Ptr(armmonitor.DynamicThresholdOperatorGreaterOrLessThan),
						}},
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("PT1M"),
				Scopes: []*string{
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme")},
				Severity:   to.Ptr[int32](3),
				WindowSize: to.Ptr("PT15M"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateDynamicMetricAlertSingleResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.MetricAlertResource{
			Type:     to.Ptr("Microsoft.Insights/metricAlerts"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/chiricutin"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
			},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("This is the description of the rule1"),
				Actions: []*armmonitor.MetricAlertAction{
					{
						ActionGroupID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.Ptr("value11"),
							"key12": to.Ptr("value12"),
						},
					}},
				AutoMitigate: to.Ptr(true),
				Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
					ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
					AllOf: []armmonitor.MultiMetricCriteriaClassification{
						&armmonitor.DynamicMetricCriteria{
							Name:             to.Ptr("High_CPU_80"),
							CriterionType:    to.Ptr(armmonitor.CriterionTypeDynamicThresholdCriterion),
							Dimensions:       []*armmonitor.MetricDimension{},
							MetricName:       to.Ptr("Percentage CPU"),
							MetricNamespace:  to.Ptr("microsoft.compute/virtualmachines"),
							TimeAggregation:  to.Ptr(armmonitor.AggregationTypeEnumAverage),
							AlertSensitivity: to.Ptr(armmonitor.DynamicThresholdSensitivityMedium),
							FailingPeriods: &armmonitor.DynamicThresholdFailingPeriods{
								MinFailingPeriodsToAlert:  to.Ptr[float32](4),
								NumberOfEvaluationPeriods: to.Ptr[float32](4),
							},
							IgnoreDataBefore: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-04T21:00:00.000Z"); return t }()),
							Operator:         to.Ptr(armmonitor.DynamicThresholdOperatorGreaterOrLessThan),
						}},
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("PT1M"),
				Scopes: []*string{
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme")},
				Severity:             to.Ptr[int32](3),
				TargetResourceRegion: to.Ptr("southcentralus"),
				TargetResourceType:   to.Ptr("Microsoft.Compute/virtualMachines"),
				WindowSize:           to.Ptr("PT15M"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetricAlertResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetricAlertResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateDynamicMetricAlertSingleResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateWebTestMetricAlert.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a web test alert rule"},
	})
	client = armmonitor.NewMetricAlertsClient("12345678-1234-1234-1234-123456789101", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"rg-example",
		"webtest-name-example",
		armmonitor.MetricAlertResource{
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example": to.Ptr("Resource"),
				"hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example":      to.Ptr("Resource"),
			},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("Automatically created alert rule for availability test \"component-example\" a"),
				Actions:     []*armmonitor.MetricAlertAction{},
				Criteria: &armmonitor.WebtestLocationAvailabilityCriteria{
					ODataType:           to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorWebtestLocationAvailabilityCriteria),
					ComponentID:         to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example"),
					FailedLocationCount: to.Ptr[float32](2),
					WebTestID:           to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example"),
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("PT1M"),
				Scopes: []*string{
					to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example"),
					to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example")},
				Severity:   to.Ptr[int32](4),
				WindowSize: to.Ptr("PT15M"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateWebTestMetricAlert.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.MetricAlertResource{
			Name:     to.Ptr("webtest-name-example"),
			Type:     to.Ptr("Microsoft.Insights/metricAlerts"),
			ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/metricalerts/webtest-name-example"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/component-example":  to.Ptr("Resource"),
				"hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/webtest-name-example": to.Ptr("Resource"),
			},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("Automatically created alert rule for availability test \"webtest-name-example\" a"),
				Actions:     []*armmonitor.MetricAlertAction{},
				Criteria: &armmonitor.WebtestLocationAvailabilityCriteria{
					ODataType:           to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorWebtestLocationAvailabilityCriteria),
					ComponentID:         to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/component-example"),
					FailedLocationCount: to.Ptr[float32](2),
					WebTestID:           to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/webtest-name-example"),
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("PT1M"),
				Scopes: []*string{
					to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/webtest-name-example"),
					to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/component-example")},
				Severity:   to.Ptr[int32](4),
				WindowSize: to.Ptr("PT15M"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetricAlertResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetricAlertResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateWebTestMetricAlert.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertMultipleResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an alert rule for Multiple Resource"},
	})
	client = armmonitor.NewMetricAlertsClient("14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"gigtest",
		"MetricAlertOnMultipleResources",
		armmonitor.MetricAlertResource{
			Location: to.Ptr("global"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("This is the description of the rule1"),
				Actions: []*armmonitor.MetricAlertAction{
					{
						ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.Ptr("value11"),
							"key12": to.Ptr("value12"),
						},
					}},
				AutoMitigate: to.Ptr(true),
				Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
					ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
					AllOf: []armmonitor.MultiMetricCriteriaClassification{
						&armmonitor.MetricCriteria{
							Name:            to.Ptr("High_CPU_80"),
							CriterionType:   to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
							Dimensions:      []*armmonitor.MetricDimension{},
							MetricName:      to.Ptr("Percentage CPU"),
							MetricNamespace: to.Ptr("microsoft.compute/virtualmachines"),
							TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
							Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
							Threshold:       to.Ptr[float64](80.5),
						}},
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("PT1M"),
				Scopes: []*string{
					to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1"),
					to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2")},
				Severity:             to.Ptr[int32](3),
				TargetResourceRegion: to.Ptr("southcentralus"),
				TargetResourceType:   to.Ptr("Microsoft.Compute/virtualMachines"),
				WindowSize:           to.Ptr("PT15M"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertMultipleResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.MetricAlertResource{
			Type:     to.Ptr("Microsoft.Insights/metricAlerts"),
			ID:       to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/MetricAlertOnMultipleResources"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
			},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("This is the description of the rule1"),
				Actions: []*armmonitor.MetricAlertAction{
					{
						ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.Ptr("value11"),
							"key12": to.Ptr("value12"),
						},
					}},
				AutoMitigate: to.Ptr(true),
				Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
					ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
					AllOf: []armmonitor.MultiMetricCriteriaClassification{
						&armmonitor.MetricCriteria{
							Name:            to.Ptr("High_CPU_80"),
							CriterionType:   to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
							Dimensions:      []*armmonitor.MetricDimension{},
							MetricName:      to.Ptr("Percentage CPU"),
							MetricNamespace: to.Ptr("microsoft.compute/virtualmachines"),
							TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
							Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
							Threshold:       to.Ptr[float64](80.5),
						}},
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("PT1M"),
				Scopes: []*string{
					to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1"),
					to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2")},
				Severity:             to.Ptr[int32](3),
				TargetResourceRegion: to.Ptr("southcentralus"),
				TargetResourceType:   to.Ptr("Microsoft.Compute/virtualMachines"),
				WindowSize:           to.Ptr("PT15M"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetricAlertResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetricAlertResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertMultipleResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertSingleResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an alert rule for Single Resource"},
	})
	client = armmonitor.NewMetricAlertsClient("14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"gigtest",
		"chiricutin",
		armmonitor.MetricAlertResource{
			Location: to.Ptr("global"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("This is the description of the rule1"),
				Actions: []*armmonitor.MetricAlertAction{
					{
						ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.Ptr("value11"),
							"key12": to.Ptr("value12"),
						},
					}},
				AutoMitigate: to.Ptr(true),
				Criteria: &armmonitor.MetricAlertSingleResourceMultipleMetricCriteria{
					ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorSingleResourceMultipleMetricCriteria),
					AllOf: []*armmonitor.MetricCriteria{
						{
							Name:            to.Ptr("High_CPU_80"),
							CriterionType:   to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
							Dimensions:      []*armmonitor.MetricDimension{},
							MetricName:      to.Ptr("\\Processor(_Total)\\% Processor Time"),
							TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
							Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
							Threshold:       to.Ptr[float64](80.5),
						}},
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("Pt1m"),
				Scopes: []*string{
					to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme")},
				Severity:   to.Ptr[int32](3),
				WindowSize: to.Ptr("Pt15m"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertSingleResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.MetricAlertResource{
			Type:     to.Ptr("Microsoft.Insights/metricAlerts"),
			ID:       to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/chiricutin"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
			},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("This is the description of the rule1"),
				Actions: []*armmonitor.MetricAlertAction{
					{
						ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.Ptr("value11"),
							"key12": to.Ptr("value12"),
						},
					}},
				AutoMitigate: to.Ptr(true),
				Criteria: &armmonitor.MetricAlertSingleResourceMultipleMetricCriteria{
					ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorSingleResourceMultipleMetricCriteria),
					AllOf: []*armmonitor.MetricCriteria{
						{
							Name:            to.Ptr("High_CPU_80"),
							CriterionType:   to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
							Dimensions:      []*armmonitor.MetricDimension{},
							MetricName:      to.Ptr("\\Processor(_Total)\\% Processor Time"),
							TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
							Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
							Threshold:       to.Ptr[float64](80.5),
						}},
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("Pt1m"),
				Scopes: []*string{
					to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme")},
				Severity:   to.Ptr[int32](3),
				WindowSize: to.Ptr("Pt15m"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetricAlertResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetricAlertResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertSingleResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an alert rule on Resource group(s)"},
	})
	client = armmonitor.NewMetricAlertsClient("14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"gigtest1",
		"MetricAlertAtResourceGroupLevel",
		armmonitor.MetricAlertResource{
			Location: to.Ptr("global"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("This is the description of the rule1"),
				Actions: []*armmonitor.MetricAlertAction{
					{
						ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.Ptr("value11"),
							"key12": to.Ptr("value12"),
						},
					}},
				AutoMitigate: to.Ptr(true),
				Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
					ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
					AllOf: []armmonitor.MultiMetricCriteriaClassification{
						&armmonitor.MetricCriteria{
							Name:            to.Ptr("High_CPU_80"),
							CriterionType:   to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
							Dimensions:      []*armmonitor.MetricDimension{},
							MetricName:      to.Ptr("Percentage CPU"),
							MetricNamespace: to.Ptr("microsoft.compute/virtualmachines"),
							TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
							Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
							Threshold:       to.Ptr[float64](80.5),
						}},
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("PT1M"),
				Scopes: []*string{
					to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest1"),
					to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest2")},
				Severity:             to.Ptr[int32](3),
				TargetResourceRegion: to.Ptr("southcentralus"),
				TargetResourceType:   to.Ptr("Microsoft.Compute/virtualMachines"),
				WindowSize:           to.Ptr("PT15M"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.MetricAlertResource{
			Type:     to.Ptr("Microsoft.Insights/metricAlerts"),
			ID:       to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest1/providers/providers/microsoft.insights/metricalerts/MetricAlertAtResourceGroupLevel"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
			},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("This is the description of the rule1"),
				Actions: []*armmonitor.MetricAlertAction{
					{
						ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.Ptr("value11"),
							"key12": to.Ptr("value12"),
						},
					}},
				AutoMitigate: to.Ptr(true),
				Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
					ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
					AllOf: []armmonitor.MultiMetricCriteriaClassification{
						&armmonitor.MetricCriteria{
							Name:            to.Ptr("High_CPU_80"),
							CriterionType:   to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
							Dimensions:      []*armmonitor.MetricDimension{},
							MetricName:      to.Ptr("Percentage CPU"),
							MetricNamespace: to.Ptr("microsoft.compute/virtualmachines"),
							TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
							Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
							Threshold:       to.Ptr[float64](80.5),
						}},
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("PT1M"),
				Scopes: []*string{
					to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest1"),
					to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest2")},
				Severity:             to.Ptr[int32](3),
				TargetResourceRegion: to.Ptr("southcentralus"),
				TargetResourceType:   to.Ptr("Microsoft.Compute/virtualMachines"),
				WindowSize:           to.Ptr("PT15M"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetricAlertResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetricAlertResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an alert rule on Subscription "},
	})
	client = armmonitor.NewMetricAlertsClient("14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"gigtest",
		"MetricAlertAtSubscriptionLevel",
		armmonitor.MetricAlertResource{
			Location: to.Ptr("global"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("This is the description of the rule1"),
				Actions: []*armmonitor.MetricAlertAction{
					{
						ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.Ptr("value11"),
							"key12": to.Ptr("value12"),
						},
					}},
				AutoMitigate: to.Ptr(true),
				Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
					ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
					AllOf: []armmonitor.MultiMetricCriteriaClassification{
						&armmonitor.MetricCriteria{
							Name:            to.Ptr("High_CPU_80"),
							CriterionType:   to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
							Dimensions:      []*armmonitor.MetricDimension{},
							MetricName:      to.Ptr("Percentage CPU"),
							MetricNamespace: to.Ptr("microsoft.compute/virtualmachines"),
							TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
							Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
							Threshold:       to.Ptr[float64](80.5),
						}},
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("PT1M"),
				Scopes: []*string{
					to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7")},
				Severity:             to.Ptr[int32](3),
				TargetResourceRegion: to.Ptr("southcentralus"),
				TargetResourceType:   to.Ptr("Microsoft.Compute/virtualMachines"),
				WindowSize:           to.Ptr("PT15M"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.MetricAlertResource{
			Type:     to.Ptr("Microsoft.Insights/metricAlerts"),
			ID:       to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/MetricAlertAtSubscriptionLevel"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
			},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("This is the description of the rule1"),
				Actions: []*armmonitor.MetricAlertAction{
					{
						ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.Ptr("value11"),
							"key12": to.Ptr("value12"),
						},
					}},
				AutoMitigate: to.Ptr(true),
				Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
					ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
					AllOf: []armmonitor.MultiMetricCriteriaClassification{
						&armmonitor.MetricCriteria{
							Name:            to.Ptr("High_CPU_80"),
							CriterionType:   to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
							Dimensions:      []*armmonitor.MetricDimension{},
							MetricName:      to.Ptr("Percentage CPU"),
							MetricNamespace: to.Ptr("microsoft.compute/virtualmachines"),
							TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
							Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
							Threshold:       to.Ptr[float64](80.5),
						}},
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("PT1M"),
				Scopes: []*string{
					to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7")},
				Severity:             to.Ptr[int32](3),
				TargetResourceRegion: to.Ptr("southcentralus"),
				TargetResourceType:   to.Ptr("Microsoft.Compute/virtualMachines"),
				WindowSize:           to.Ptr("PT15M"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetricAlertResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetricAlertResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertWithDimensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an alert rules with dimensions"},
	})
	client = armmonitor.NewMetricAlertsClient("14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"gigtest",
		"MetricAlertOnMultipleDimensions",
		armmonitor.MetricAlertResource{
			Location: to.Ptr("global"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("This is the description of the rule1"),
				Actions: []*armmonitor.MetricAlertAction{
					{
						ActionGroupID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.Ptr("value11"),
							"key12": to.Ptr("value12"),
						},
					}},
				AutoMitigate: to.Ptr(true),
				Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
					ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
					AllOf: []armmonitor.MultiMetricCriteriaClassification{
						&armmonitor.MetricCriteria{
							Name:          to.Ptr("Metric1"),
							CriterionType: to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
							Dimensions: []*armmonitor.MetricDimension{
								{
									Name:     to.Ptr("ActivityName"),
									Operator: to.Ptr("Include"),
									Values: []*string{
										to.Ptr("*")},
								},
								{
									Name:     to.Ptr("StatusCode"),
									Operator: to.Ptr("Include"),
									Values: []*string{
										to.Ptr("200")},
								}},
							MetricName:      to.Ptr("Availability"),
							MetricNamespace: to.Ptr("Microsoft.KeyVault/vaults"),
							TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
							Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
							Threshold:       to.Ptr[float64](55),
						}},
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("PT1H"),
				Scopes: []*string{
					to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.KeyVault/vaults/keyVaultResource")},
				Severity:   to.Ptr[int32](3),
				WindowSize: to.Ptr("P1D"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertWithDimensions.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.MetricAlertResource{
			Type:     to.Ptr("Microsoft.Insights/metricAlerts"),
			ID:       to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/MetricAlertWithDimensions"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
			},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("This is the description of the rule1"),
				Actions: []*armmonitor.MetricAlertAction{
					{
						ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.Ptr("value11"),
							"key12": to.Ptr("value12"),
						},
					}},
				AutoMitigate: to.Ptr(true),
				Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
					ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
					AllOf: []armmonitor.MultiMetricCriteriaClassification{
						&armmonitor.MetricCriteria{
							Name:          to.Ptr("Metric1"),
							CriterionType: to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
							Dimensions: []*armmonitor.MetricDimension{
								{
									Name:     to.Ptr("ActivityName"),
									Operator: to.Ptr("Include"),
									Values: []*string{
										to.Ptr("*")},
								},
								{
									Name:     to.Ptr("StatusCode"),
									Operator: to.Ptr("Include"),
									Values: []*string{
										to.Ptr("200")},
								}},
							MetricName:      to.Ptr("Availability"),
							MetricNamespace: to.Ptr("Microsoft.KeyVault/vaults"),
							TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
							Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
							Threshold:       to.Ptr[float64](55),
						}},
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("PT1H"),
				Scopes: []*string{
					to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.KeyVault/vaults/keyVaultResource")},
				Severity:             to.Ptr[int32](3),
				TargetResourceRegion: to.Ptr("southcentralus"),
				TargetResourceType:   to.Ptr("Microsoft.KeyVault/vaults"),
				WindowSize:           to.Ptr("P1D"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetricAlertResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetricAlertResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertWithDimensions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMetricAlerts_Update(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/UpdateMetricAlert.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an alert rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewMetricAlertsClient("14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7", cred, &options)
	res, err := client.Update(ctx,
		"gigtest",
		"chiricutin",
		armmonitor.MetricAlertResourcePatch{
			Properties: &armmonitor.MetricAlertPropertiesPatch{
				Description: to.Ptr("This is the description of the rule1"),
				Actions: []*armmonitor.MetricAlertAction{
					{
						ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.Ptr("value11"),
							"key12": to.Ptr("value12"),
						},
					}},
				AutoMitigate: to.Ptr(true),
				Criteria: &armmonitor.MetricAlertSingleResourceMultipleMetricCriteria{
					ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorSingleResourceMultipleMetricCriteria),
					AllOf: []*armmonitor.MetricCriteria{
						{
							Name:            to.Ptr("High_CPU_80"),
							CriterionType:   to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
							Dimensions:      []*armmonitor.MetricDimension{},
							MetricName:      to.Ptr("\\Processor(_Total)\\% Processor Time"),
							TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
							Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
							Threshold:       to.Ptr[float64](80.5),
						}},
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("Pt1m"),
				Scopes: []*string{
					to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme")},
				Severity:   to.Ptr[int32](3),
				WindowSize: to.Ptr("Pt15m"),
			},
			Tags: map[string]*string{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/UpdateMetricAlert.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.MetricAlertResource{
			Type:     to.Ptr("Microsoft.Insights/metricAlerts"),
			ID:       to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/chiricutin"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": to.Ptr("Resource"),
			},
			Properties: &armmonitor.MetricAlertProperties{
				Description: to.Ptr("This is the description of the rule1"),
				Actions: []*armmonitor.MetricAlertAction{
					{
						ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.Ptr("value11"),
							"key12": to.Ptr("value12"),
						},
					}},
				AutoMitigate: to.Ptr(true),
				Criteria: &armmonitor.MetricAlertSingleResourceMultipleMetricCriteria{
					ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorSingleResourceMultipleMetricCriteria),
					AllOf: []*armmonitor.MetricCriteria{
						{
							Name:            to.Ptr("High_CPU_80"),
							CriterionType:   to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
							Dimensions:      []*armmonitor.MetricDimension{},
							MetricName:      to.Ptr("\\Processor(_Total)\\% Processor Time"),
							TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
							Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
							Threshold:       to.Ptr[float64](80.5),
						}},
				},
				Enabled:             to.Ptr(true),
				EvaluationFrequency: to.Ptr("Pt1m"),
				Scopes: []*string{
					to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme")},
				Severity:   to.Ptr[int32](3),
				WindowSize: to.Ptr("Pt15m"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetricAlertResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetricAlertResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/UpdateMetricAlert.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMetricAlerts_Delete(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/deleteMetricAlert.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an alert rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewMetricAlertsClient("14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7", cred, &options)
	_, err := client.Delete(ctx,
		"gigtest",
		"chiricutin",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/deleteMetricAlert.json: %v", err)
	}
}

func TestMetricAlertsStatus_List(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getMetricAlertStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an alert rule status"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewMetricAlertsStatusClient("14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7", cred, &options)
	res, err := client.List(ctx,
		"gigtest",
		"chiricutin",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getMetricAlertStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.MetricAlertStatusCollection{
			Value: []*armmonitor.MetricAlertStatus{
				{
					Name: to.Ptr("cmVzb3VyY2VJZD0vc3Vic2NyaXB0aW9ucy8xNGRkZjBjNS03N2M1LTRiNTMtODRmNi1lMWZhNDNhZDY4ZjcvcmVzb3VyY2VHcm91cHMvZ2lndGVzdC9wcm92aWRlcnMvTWljcm9zb2Z0LkNvbXB1dGUvdmlydHVhbE1hY2hpbmVzL2dpZ3dhZG1l"),
					Type: to.Ptr("Microsoft.Insights/metricAlerts/status"),
					ID:   to.Ptr("/subscriptions/009f6022-67ec-423e-9aa7-691182870588/resourceGroups/EastUs/providers/microsoft.insights/metricAlerts/LeoAlert_custom1"),
					Properties: &armmonitor.MetricAlertStatusProperties{
						Dimensions: map[string]*string{
							"resourceId": to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme"),
						},
						Status:    to.Ptr("Healthy"),
						Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-17T20:17:25.6293237Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.MetricAlertStatusCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetricAlertStatusCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getMetricAlertStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMetricAlertsStatus_ListByName(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getMetricAlertStatusByName.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an alert rule status"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewMetricAlertsStatusClient("009f6022-67ec-423e-9aa7-691182870588", cred, &options)
	res, err := client.ListByName(ctx,
		"EastUs",
		"custom1",
		"cmVzb3VyY2VJZD0vc3Vic2NyaXB0aW9ucy8xNGRkZjBjNS03N2M1LTRiNTMtODRmNi1lMWZhNDNhZDY4ZjcvcmVzb3VyY2VHcm91cHMvZ2lndGVzdC9wcm92aWRlcnMvTWljcm9zb2Z0LkNvbXB1dGUvdmlydHVhbE1hY2hpbmVzL2dpZ3dhZG1l",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getMetricAlertStatusByName.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.MetricAlertStatusCollection{
			Value: []*armmonitor.MetricAlertStatus{
				{
					Name: to.Ptr("cmVzb3VyY2VJZD0vc3Vic2NyaXB0aW9ucy8xNGRkZjBjNS03N2M1LTRiNTMtODRmNi1lMWZhNDNhZDY4ZjcvcmVzb3VyY2VHcm91cHMvZ2lndGVzdC9wcm92aWRlcnMvTWljcm9zb2Z0LkNvbXB1dGUvdmlydHVhbE1hY2hpbmVzL2dpZ3dhZG1l"),
					Type: to.Ptr("Microsoft.Insights/metricAlerts/status"),
					ID:   to.Ptr("/subscriptions/009f6022-67ec-423e-9aa7-691182870588/resourceGroups/EastUs/providers/microsoft.insights/metricAlerts/custom1"),
					Properties: &armmonitor.MetricAlertStatusProperties{
						Dimensions: map[string]*string{
							"resourceId": to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme"),
						},
						Status:    to.Ptr("Healthy"),
						Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-17T20:17:25.6293237Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.MetricAlertStatusCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetricAlertStatusCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/getMetricAlertStatusByName.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScheduledQueryRules_CreateOrUpdate(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/createOrUpdateScheduledQueryRules.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update rule - AlertingAction"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewScheduledQueryRulesClient("b67f7fec-69fc-4974-9099-a26bd6ffeda3", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"Rac46PostSwapRG",
		"logalertfoo",
		armmonitor.LogSearchRuleResource{
			Location: to.Ptr("eastus"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.LogSearchRule{
				Description: to.Ptr("log alert description"),
				Action: &armmonitor.AlertingAction{
					ODataType: to.Ptr("Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"),
					AznsAction: &armmonitor.AzNsActionGroup{
						ActionGroup:          []*string{},
						CustomWebhookPayload: to.Ptr("{}"),
						EmailSubject:         to.Ptr("Email Header"),
					},
					Severity: to.Ptr(armmonitor.AlertSeverityOne),
					Trigger: &armmonitor.TriggerCondition{
						MetricTrigger: &armmonitor.LogMetricTrigger{
							MetricColumn:      to.Ptr("Computer"),
							MetricTriggerType: to.Ptr(armmonitor.MetricTriggerTypeConsecutive),
							Threshold:         to.Ptr[float64](5),
							ThresholdOperator: to.Ptr(armmonitor.ConditionalOperatorGreaterThan),
						},
						Threshold:         to.Ptr[float64](3),
						ThresholdOperator: to.Ptr(armmonitor.ConditionalOperatorGreaterThan),
					},
				},
				Enabled: to.Ptr(armmonitor.EnabledTrue),
				Schedule: &armmonitor.Schedule{
					FrequencyInMinutes:  to.Ptr[int32](15),
					TimeWindowInMinutes: to.Ptr[int32](15),
				},
				Source: &armmonitor.Source{
					DataSourceID: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.OperationalInsights/workspaces/sampleWorkspace"),
					Query:        to.Ptr("Heartbeat | summarize AggregatedValue = count() by bin(TimeGenerated, 5m)"),
					QueryType:    to.Ptr(armmonitor.QueryTypeResultCount),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/createOrUpdateScheduledQueryRules.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.LogSearchRuleResource{
			Name:     to.Ptr("logalertfoo"),
			Type:     to.Ptr("Microsoft.Insights/scheduledQueryRules"),
			ID:       to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/scheduledQueryRules/logalertfoo"),
			Location: to.Ptr("eastus"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.LogSearchRule{
				Description: to.Ptr("log alert description"),
				Action: &armmonitor.AlertingAction{
					ODataType: to.Ptr("Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"),
					AznsAction: &armmonitor.AzNsActionGroup{
						ActionGroup:          []*string{},
						CustomWebhookPayload: to.Ptr("{}"),
						EmailSubject:         to.Ptr("Email Header"),
					},
					Severity: to.Ptr(armmonitor.AlertSeverityOne),
					Trigger: &armmonitor.TriggerCondition{
						MetricTrigger: &armmonitor.LogMetricTrigger{
							MetricColumn:      to.Ptr("Computer"),
							MetricTriggerType: to.Ptr(armmonitor.MetricTriggerTypeConsecutive),
							Threshold:         to.Ptr[float64](5),
							ThresholdOperator: to.Ptr(armmonitor.ConditionalOperatorGreaterThan),
						},
						Threshold:         to.Ptr[float64](3),
						ThresholdOperator: to.Ptr(armmonitor.ConditionalOperatorGreaterThan),
					},
				},
				Enabled:           to.Ptr(armmonitor.EnabledTrue),
				LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-23T21:23:52.0221265Z"); return t }()),
				ProvisioningState: to.Ptr(armmonitor.ProvisioningStateSucceeded),
				Schedule: &armmonitor.Schedule{
					FrequencyInMinutes:  to.Ptr[int32](15),
					TimeWindowInMinutes: to.Ptr[int32](15),
				},
				Source: &armmonitor.Source{
					DataSourceID: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.OperationalInsights/workspaces/sampleWorkspace"),
					Query:        to.Ptr("Heartbeat | summarize AggregatedValue = count() by bin(TimeGenerated, 5m)"),
					QueryType:    to.Ptr(armmonitor.QueryTypeResultCount),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LogSearchRuleResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LogSearchRuleResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/createOrUpdateScheduledQueryRules.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/createOrUpdateScheduledQueryRuleswithCrossResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update rule - AlertingAction with Cross-Resource"},
	})
	client = armmonitor.NewScheduledQueryRulesClient("b67f7fec-69fc-4974-9099-a26bd6ffeda3", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"Rac46PostSwapRG",
		"SampleCrossResourceAlert",
		armmonitor.LogSearchRuleResource{
			Location: to.Ptr("eastus"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.LogSearchRule{
				Description: to.Ptr("Sample Cross Resource alert"),
				Action: &armmonitor.AlertingAction{
					ODataType: to.Ptr("Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"),
					AznsAction: &armmonitor.AzNsActionGroup{
						ActionGroup: []*string{
							to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/actiongroups/test-ag")},
						EmailSubject: to.Ptr("Cross Resource Mail!!"),
					},
					Severity: to.Ptr(armmonitor.AlertSeverityThree),
					Trigger: &armmonitor.TriggerCondition{
						Threshold:         to.Ptr[float64](5000),
						ThresholdOperator: to.Ptr(armmonitor.ConditionalOperatorGreaterThan),
					},
				},
				Enabled: to.Ptr(armmonitor.EnabledTrue),
				Schedule: &armmonitor.Schedule{
					FrequencyInMinutes:  to.Ptr[int32](60),
					TimeWindowInMinutes: to.Ptr[int32](60),
				},
				Source: &armmonitor.Source{
					AuthorizedResources: []*string{
						to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.OperationalInsights/workspaces/sampleWorkspace"),
						to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/components/sampleAI")},
					DataSourceID: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/components/sampleAI"),
					Query:        to.Ptr("union requests, workspace(\"sampleWorkspace\").Update"),
					QueryType:    to.Ptr(armmonitor.QueryTypeResultCount),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/createOrUpdateScheduledQueryRuleswithCrossResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.LogSearchRuleResource{
			Name:     to.Ptr("SampleCrossResourceAlert"),
			Type:     to.Ptr("Microsoft.Insights/scheduledQueryRules"),
			ID:       to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/scheduledQueryRules/SampleCrossResourceAlert"),
			Location: to.Ptr("eastus"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.LogSearchRule{
				Description: to.Ptr("Sample Cross Resource alert"),
				Action: &armmonitor.AlertingAction{
					ODataType: to.Ptr("Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"),
					AznsAction: &armmonitor.AzNsActionGroup{
						ActionGroup: []*string{
							to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/actiongroups/test-ag")},
						EmailSubject: to.Ptr("Cross Resource Mail!!"),
					},
					Severity: to.Ptr(armmonitor.AlertSeverityThree),
					Trigger: &armmonitor.TriggerCondition{
						Threshold:         to.Ptr[float64](5000),
						ThresholdOperator: to.Ptr(armmonitor.ConditionalOperatorGreaterThan),
					},
				},
				Enabled:           to.Ptr(armmonitor.EnabledTrue),
				LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-04T06:27:58.3892575Z"); return t }()),
				ProvisioningState: to.Ptr(armmonitor.ProvisioningStateSucceeded),
				Schedule: &armmonitor.Schedule{
					FrequencyInMinutes:  to.Ptr[int32](60),
					TimeWindowInMinutes: to.Ptr[int32](60),
				},
				Source: &armmonitor.Source{
					AuthorizedResources: []*string{
						to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.OperationalInsights/workspaces/sampleWorkspace"),
						to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/components/sampleAI")},
					DataSourceID: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/components/sampleAI"),
					Query:        to.Ptr("union requests, workspace(\"sampleWorkspace\").Update"),
					QueryType:    to.Ptr(armmonitor.QueryTypeResultCount),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LogSearchRuleResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LogSearchRuleResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/createOrUpdateScheduledQueryRuleswithCrossResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/createOrUpdateScheduledQueryRule-LogToMetricAction.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update rule - LogToMetricAction"},
	})
	client = armmonitor.NewScheduledQueryRulesClient("af52d502-a447-4bc6-8cb7-4780fbb00490", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"alertsweu",
		"logtometricfoo",
		armmonitor.LogSearchRuleResource{
			Location: to.Ptr("West Europe"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.LogSearchRule{
				Description: to.Ptr("log to metric description"),
				Action: &armmonitor.LogToMetricAction{
					ODataType: to.Ptr("Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.LogToMetricAction"),
					Criteria: []*armmonitor.Criteria{
						{
							Dimensions: []*armmonitor.Dimension{},
							MetricName: to.Ptr("Average_% Idle Time"),
						}},
				},
				Enabled: to.Ptr(armmonitor.EnabledTrue),
				Source: &armmonitor.Source{
					DataSourceID: to.Ptr("/subscriptions/af52d502-a447-4bc6-8cb7-4780fbb00490/resourceGroups/alertsweu/providers/Microsoft.OperationalInsights/workspaces/alertsweu"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/createOrUpdateScheduledQueryRule-LogToMetricAction.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.LogSearchRuleResource{
			Name:     to.Ptr("logtometricfoo"),
			Type:     to.Ptr("microsoft.insights/scheduledqueryrules"),
			ID:       to.Ptr("/subscriptions/af52d502-a447-4bc6-8cb7-4780fbb00490/resourceGroups/alertsweu/providers/microsoft.insights/scheduledqueryrules/logtometricfoo"),
			Location: to.Ptr("westeurope"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.LogSearchRule{
				Description: to.Ptr("log to metric description"),
				Action: &armmonitor.LogToMetricAction{
					ODataType: to.Ptr("Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.LogToMetricAction"),
					Criteria: []*armmonitor.Criteria{
						{
							Dimensions: []*armmonitor.Dimension{},
							MetricName: to.Ptr("Average_% Idle Time"),
						}},
				},
				DisplayName:       to.Ptr("logtometricfoo"),
				Enabled:           to.Ptr(armmonitor.EnabledTrue),
				LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-04T06:31:56.3737792Z"); return t }()),
				ProvisioningState: to.Ptr(armmonitor.ProvisioningStateSucceeded),
				Source: &armmonitor.Source{
					DataSourceID: to.Ptr("/subscriptions/af52d502-a447-4bc6-8cb7-4780fbb00490/resourceGroups/alertsweu/providers/Microsoft.OperationalInsights/workspaces/alertsweu"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LogSearchRuleResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LogSearchRuleResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/createOrUpdateScheduledQueryRule-LogToMetricAction.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScheduledQueryRules_Get(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/getScheduledQueryRules.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewScheduledQueryRulesClient("b67f7fec-69fc-4974-9099-a26bd6ffeda3", cred, &options)
	res, err := client.Get(ctx,
		"Rac46PostSwapRG",
		"logalertfoo",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/getScheduledQueryRules.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.LogSearchRuleResource{
			Name:     to.Ptr("logalertfoo"),
			Type:     to.Ptr("Microsoft.Insights/scheduledQueryRules"),
			ID:       to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/scheduledQueryRules/logalertfoo"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.LogSearchRule{
				Description: to.Ptr("log alert description"),
				Action: &armmonitor.AlertingAction{
					ODataType: to.Ptr("Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"),
					AznsAction: &armmonitor.AzNsActionGroup{
						ActionGroup:          []*string{},
						CustomWebhookPayload: to.Ptr("{}"),
						EmailSubject:         to.Ptr("Email Header"),
					},
					Severity: to.Ptr(armmonitor.AlertSeverityOne),
					Trigger: &armmonitor.TriggerCondition{
						Threshold:         to.Ptr[float64](3),
						ThresholdOperator: to.Ptr(armmonitor.ConditionalOperatorGreaterThan),
					},
				},
				Enabled:           to.Ptr(armmonitor.EnabledTrue),
				LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-23T21:23:52.0221265Z"); return t }()),
				ProvisioningState: to.Ptr(armmonitor.ProvisioningStateSucceeded),
				Schedule: &armmonitor.Schedule{
					FrequencyInMinutes:  to.Ptr[int32](15),
					TimeWindowInMinutes: to.Ptr[int32](15),
				},
				Source: &armmonitor.Source{
					DataSourceID: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/components/sampleAI"),
					Query:        to.Ptr("requests"),
					QueryType:    to.Ptr(armmonitor.QueryTypeResultCount),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LogSearchRuleResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LogSearchRuleResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/getScheduledQueryRules.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScheduledQueryRules_Update(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/patchScheduledQueryRules.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch Log Search Rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewScheduledQueryRulesClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"my-resource-group",
		"logalertfoo",
		armmonitor.LogSearchRuleResourcePatch{
			Properties: &armmonitor.LogSearchRulePatch{
				Enabled: to.Ptr(armmonitor.EnabledTrue),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/patchScheduledQueryRules.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.LogSearchRuleResource{
			Name:     to.Ptr("logalertfoo"),
			Type:     to.Ptr("Microsoft.Insights/scheduledQueryRules"),
			ID:       to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/scheduledQueryRules/logalertfoo"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.LogSearchRule{
				Description: to.Ptr("log alert description"),
				Action: &armmonitor.AlertingAction{
					ODataType: to.Ptr("Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"),
					AznsAction: &armmonitor.AzNsActionGroup{
						ActionGroup:          []*string{},
						CustomWebhookPayload: to.Ptr("{}"),
						EmailSubject:         to.Ptr("Email Header"),
					},
					Severity: to.Ptr(armmonitor.AlertSeverityOne),
					Trigger: &armmonitor.TriggerCondition{
						MetricTrigger: &armmonitor.LogMetricTrigger{
							MetricColumn:      to.Ptr("ColumnName"),
							MetricTriggerType: to.Ptr(armmonitor.MetricTriggerTypeConsecutive),
							Threshold:         to.Ptr[float64](5),
							ThresholdOperator: to.Ptr(armmonitor.ConditionalOperatorGreaterThan),
						},
						Threshold:         to.Ptr[float64](3),
						ThresholdOperator: to.Ptr(armmonitor.ConditionalOperatorGreaterThan),
					},
				},
				Enabled:           to.Ptr(armmonitor.EnabledTrue),
				LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-23T21:23:52.0221265Z"); return t }()),
				ProvisioningState: to.Ptr(armmonitor.ProvisioningStateSucceeded),
				Schedule: &armmonitor.Schedule{
					FrequencyInMinutes:  to.Ptr[int32](15),
					TimeWindowInMinutes: to.Ptr[int32](15),
				},
				Source: &armmonitor.Source{
					DataSourceID: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/components/sampleAI"),
					Query:        to.Ptr("requests"),
					QueryType:    to.Ptr(armmonitor.QueryTypeResultCount),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LogSearchRuleResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LogSearchRuleResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/patchScheduledQueryRules.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScheduledQueryRules_Delete(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/deleteScheduledQueryRules.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewScheduledQueryRulesClient("b67f7fec-69fc-4974-9099-a26bd6ffeda3", cred, &options)
	_, err := client.Delete(ctx,
		"Rac46PostSwapRG",
		"logalertfoo",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/deleteScheduledQueryRules.json: %v", err)
	}
}

func TestScheduledQueryRules_ListBySubscription(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/listScheduledQueryRules.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List rules"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewScheduledQueryRulesClient("14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7", cred, &options)
	pager := client.ListBySubscription(&armmonitor.ScheduledQueryRulesClientListBySubscriptionOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/listScheduledQueryRules.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.LogSearchRuleResourceCollection{
			Value: []*armmonitor.LogSearchRuleResource{
				{
					Name:     to.Ptr("logalertfoo"),
					Type:     to.Ptr("Microsoft.Insights/scheduledQueryRules"),
					ID:       to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/scheduledQueryRules/logalertfoo"),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armmonitor.LogSearchRule{
						Description: to.Ptr("log alert description"),
						Action: &armmonitor.AlertingAction{
							ODataType: to.Ptr("Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"),
							AznsAction: &armmonitor.AzNsActionGroup{
								ActionGroup:          []*string{},
								CustomWebhookPayload: to.Ptr("{}"),
								EmailSubject:         to.Ptr("Email Header"),
							},
							Severity: to.Ptr(armmonitor.AlertSeverityOne),
							Trigger: &armmonitor.TriggerCondition{
								MetricTrigger: &armmonitor.LogMetricTrigger{
									MetricColumn:      to.Ptr("user_Id"),
									MetricTriggerType: to.Ptr(armmonitor.MetricTriggerTypeTotal),
									Threshold:         to.Ptr[float64](2),
									ThresholdOperator: to.Ptr(armmonitor.ConditionalOperatorLessThan),
								},
								Threshold:         to.Ptr[float64](2),
								ThresholdOperator: to.Ptr(armmonitor.ConditionalOperatorGreaterThan),
							},
						},
						Enabled:           to.Ptr(armmonitor.EnabledFalse),
						LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-23T21:23:52.0221265Z"); return t }()),
						ProvisioningState: to.Ptr(armmonitor.ProvisioningStateSucceeded),
						Schedule: &armmonitor.Schedule{
							FrequencyInMinutes:  to.Ptr[int32](15),
							TimeWindowInMinutes: to.Ptr[int32](15),
						},
						Source: &armmonitor.Source{
							DataSourceID: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/components/sampleAI"),
							Query:        to.Ptr("requests"),
							QueryType:    to.Ptr(armmonitor.QueryTypeResultCount),
						},
					},
				},
				{
					Name:     to.Ptr("logalertfoo"),
					Type:     to.Ptr("Microsoft.Insights/scheduledQueryRules"),
					ID:       to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/scheduledQueryRules/logalertfoo"),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armmonitor.LogSearchRule{
						Description: to.Ptr("log alert description"),
						Action: &armmonitor.AlertingAction{
							ODataType: to.Ptr("Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"),
							AznsAction: &armmonitor.AzNsActionGroup{
								ActionGroup:          []*string{},
								CustomWebhookPayload: to.Ptr("{}"),
								EmailSubject:         to.Ptr("Email Header"),
							},
							Severity: to.Ptr(armmonitor.AlertSeverityOne),
							Trigger: &armmonitor.TriggerCondition{
								Threshold:         to.Ptr[float64](3),
								ThresholdOperator: to.Ptr(armmonitor.ConditionalOperatorGreaterThan),
							},
						},
						Enabled:           to.Ptr(armmonitor.EnabledTrue),
						LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-23T21:23:52.0221265Z"); return t }()),
						ProvisioningState: to.Ptr(armmonitor.ProvisioningStateSucceeded),
						Schedule: &armmonitor.Schedule{
							FrequencyInMinutes:  to.Ptr[int32](10),
							TimeWindowInMinutes: to.Ptr[int32](30),
						},
						Source: &armmonitor.Source{
							DataSourceID: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/components/sampleAI"),
							Query:        to.Ptr("requests"),
							QueryType:    to.Ptr(armmonitor.QueryTypeResultCount),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LogSearchRuleResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LogSearchRuleResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/listScheduledQueryRules.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScheduledQueryRules_ListByResourceGroup(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/listScheduledQueryRules.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List rules"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewScheduledQueryRulesClient("14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7", cred, &options)
	pager := client.ListByResourceGroup("gigtest",
		&armmonitor.ScheduledQueryRulesClientListByResourceGroupOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/listScheduledQueryRules.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.LogSearchRuleResourceCollection{
			Value: []*armmonitor.LogSearchRuleResource{
				{
					Name:     to.Ptr("logalertfoo"),
					Type:     to.Ptr("Microsoft.Insights/scheduledQueryRules"),
					ID:       to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/scheduledQueryRules/logalertfoo"),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armmonitor.LogSearchRule{
						Description: to.Ptr("log alert description"),
						Action: &armmonitor.AlertingAction{
							ODataType: to.Ptr("Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"),
							AznsAction: &armmonitor.AzNsActionGroup{
								ActionGroup:          []*string{},
								CustomWebhookPayload: to.Ptr("{}"),
								EmailSubject:         to.Ptr("Email Header"),
							},
							Severity: to.Ptr(armmonitor.AlertSeverityOne),
							Trigger: &armmonitor.TriggerCondition{
								MetricTrigger: &armmonitor.LogMetricTrigger{
									MetricColumn:      to.Ptr("user_Id"),
									MetricTriggerType: to.Ptr(armmonitor.MetricTriggerTypeTotal),
									Threshold:         to.Ptr[float64](2),
									ThresholdOperator: to.Ptr(armmonitor.ConditionalOperatorLessThan),
								},
								Threshold:         to.Ptr[float64](2),
								ThresholdOperator: to.Ptr(armmonitor.ConditionalOperatorGreaterThan),
							},
						},
						Enabled:           to.Ptr(armmonitor.EnabledFalse),
						LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-23T21:23:52.0221265Z"); return t }()),
						ProvisioningState: to.Ptr(armmonitor.ProvisioningStateSucceeded),
						Schedule: &armmonitor.Schedule{
							FrequencyInMinutes:  to.Ptr[int32](15),
							TimeWindowInMinutes: to.Ptr[int32](15),
						},
						Source: &armmonitor.Source{
							DataSourceID: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/components/sampleAI"),
							Query:        to.Ptr("requests"),
							QueryType:    to.Ptr(armmonitor.QueryTypeResultCount),
						},
					},
				},
				{
					Name:     to.Ptr("logalertfoo"),
					Type:     to.Ptr("Microsoft.Insights/scheduledQueryRules"),
					ID:       to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/scheduledQueryRules/logalertfoo"),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armmonitor.LogSearchRule{
						Description: to.Ptr("log alert description"),
						Action: &armmonitor.AlertingAction{
							ODataType: to.Ptr("Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"),
							AznsAction: &armmonitor.AzNsActionGroup{
								ActionGroup:          []*string{},
								CustomWebhookPayload: to.Ptr("{}"),
								EmailSubject:         to.Ptr("Email Header"),
							},
							Severity: to.Ptr(armmonitor.AlertSeverityOne),
							Trigger: &armmonitor.TriggerCondition{
								Threshold:         to.Ptr[float64](3),
								ThresholdOperator: to.Ptr(armmonitor.ConditionalOperatorGreaterThan),
							},
						},
						Enabled:           to.Ptr(armmonitor.EnabledTrue),
						LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-23T21:23:52.0221265Z"); return t }()),
						ProvisioningState: to.Ptr(armmonitor.ProvisioningStateSucceeded),
						Schedule: &armmonitor.Schedule{
							FrequencyInMinutes:  to.Ptr[int32](10),
							TimeWindowInMinutes: to.Ptr[int32](30),
						},
						Source: &armmonitor.Source{
							DataSourceID: to.Ptr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/components/sampleAI"),
							Query:        to.Ptr("requests"),
							QueryType:    to.Ptr(armmonitor.QueryTypeResultCount),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LogSearchRuleResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LogSearchRuleResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/listScheduledQueryRules.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMetricNamespaces_List(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2017-12-01-preview/examples/GetMetricNamespaces.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Metric Namespaces without filter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewMetricNamespacesClient(cred, &options)
	pager := client.List("subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill",
		&armmonitor.MetricNamespacesClientListOptions{StartTime: to.Ptr("2020-08-31T15:53:00Z")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/preview/2017-12-01-preview/examples/GetMetricNamespaces.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.MetricNamespaceCollection{
			Value: []*armmonitor.MetricNamespace{
				{
					Name:           to.Ptr("Azure.ApplicationInsights"),
					Type:           to.Ptr("Microsoft.Insights/metricNamespaces"),
					Classification: to.Ptr(armmonitor.NamespaceClassificationCustom),
					ID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricNamespaces/Azure.ApplicationInsights"),
					Properties: &armmonitor.MetricNamespaceName{
						MetricNamespaceName: to.Ptr("Azure.ApplicationInsights"),
					},
				},
				{
					Name:           to.Ptr("microsoft.insights-components"),
					Type:           to.Ptr("Microsoft.Insights/metricNamespaces"),
					Classification: to.Ptr(armmonitor.NamespaceClassificationPlatform),
					ID:             to.Ptr("/subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricNamespaces/microsoft.insights-components"),
					Properties: &armmonitor.MetricNamespaceName{
						MetricNamespaceName: to.Ptr("microsoft.insights/components"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MetricNamespaceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MetricNamespaceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2017-12-01-preview/examples/GetMetricNamespaces.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVMInsights_GetOnboardingStatus(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2018-11-27-preview/examples/getOnboardingStatusVMScaleSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get status for a VM scale set that is actively reporting data"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewVMInsightsClient(cred, &options)
	res, err := client.GetOnboardingStatus(ctx,
		"subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87/resourceGroups/my-service-cluster/providers/Microsoft.Compute/virtualMachineScaleSets/scale-set-01",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2018-11-27-preview/examples/getOnboardingStatusVMScaleSet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.VMInsightsOnboardingStatus{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Insights/vmInsightsOnboardingStatuses"),
			ID:   to.Ptr("/subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87/resourceGroups/my-service-cluster/providers/Microsoft.Compute/virtualMachineScaleSets/scale-set-01/providers/Microsoft.Insights/vmInsightsOnboardingStatuses/default"),
			Properties: &armmonitor.VMInsightsOnboardingStatusProperties{
				Data: []*armmonitor.DataContainer{
					{
						Workspace: &armmonitor.WorkspaceInfo{
							ID:       to.Ptr("/subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87/resourcegroups/monitoring/providers/microsoft.operationalinsights/workspaces/vm-monitoring"),
							Location: to.Ptr("eastus"),
							Properties: &armmonitor.WorkspaceInfoProperties{
								CustomerID: to.Ptr("c7f8f44d-d8ee-4b79-9d9a-4d8a1f2a112a"),
							},
						},
					}},
				DataStatus:       to.Ptr(armmonitor.DataStatusPresent),
				OnboardingStatus: to.Ptr(armmonitor.OnboardingStatusOnboarded),
				ResourceID:       to.Ptr("/subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87/resourceGroups/my-service-cluster/providers/Microsoft.Compute/virtualMachineScaleSets/scale-set-01"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VMInsightsOnboardingStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VMInsightsOnboardingStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2018-11-27-preview/examples/getOnboardingStatusVMScaleSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2018-11-27-preview/examples/getOnboardingStatusSingleVMUnknown.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get status for a VM that has not yet reported data"},
	})
	client = armmonitor.NewVMInsightsClient(cred, &options)
	res, err = client.GetOnboardingStatus(ctx,
		"subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87/resourceGroups/vm-resource-group/providers/Microsoft.Compute/virtualMachines/ubuntu-vm",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2018-11-27-preview/examples/getOnboardingStatusSingleVMUnknown.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.VMInsightsOnboardingStatus{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Insights/vmInsightsOnboardingStatuses"),
			ID:   to.Ptr("/subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87/resourceGroups/vm-resource-group/providers/Microsoft.Compute/virtualMachines/ubuntu-vm/providers/Microsoft.Insights/vmInsightsOnboardingStatuses/default"),
			Properties: &armmonitor.VMInsightsOnboardingStatusProperties{
				Data:             []*armmonitor.DataContainer{},
				DataStatus:       to.Ptr(armmonitor.DataStatusNotPresent),
				OnboardingStatus: to.Ptr(armmonitor.OnboardingStatusUnknown),
				ResourceID:       to.Ptr("/subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87/resourceGroups/vm-resource-group/providers/Microsoft.Compute/virtualMachines/ubuntu-vm"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VMInsightsOnboardingStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VMInsightsOnboardingStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2018-11-27-preview/examples/getOnboardingStatusSingleVMUnknown.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2018-11-27-preview/examples/getOnboardingStatusSingleVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get status for a VM that is actively reporting data"},
	})
	client = armmonitor.NewVMInsightsClient(cred, &options)
	res, err = client.GetOnboardingStatus(ctx,
		"subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87/resourceGroups/vm-resource-group/providers/Microsoft.Compute/virtualMachines/ubuntu-vm",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2018-11-27-preview/examples/getOnboardingStatusSingleVM.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.VMInsightsOnboardingStatus{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Insights/vmInsightsOnboardingStatuses"),
			ID:   to.Ptr("/subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87/resourceGroups/vm-resource-group/providers/Microsoft.Compute/virtualMachines/ubuntu-vm/providers/Microsoft.Insights/vmInsightsOnboardingStatuses/default"),
			Properties: &armmonitor.VMInsightsOnboardingStatusProperties{
				Data: []*armmonitor.DataContainer{
					{
						Workspace: &armmonitor.WorkspaceInfo{
							ID:       to.Ptr("/subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87/resourcegroups/monitoring/providers/microsoft.operationalinsights/workspaces/vm-monitoring"),
							Location: to.Ptr("eastus"),
							Properties: &armmonitor.WorkspaceInfoProperties{
								CustomerID: to.Ptr("c7f8f44d-d8ee-4b79-9d9a-4d8a1f2a112a"),
							},
						},
					}},
				DataStatus:       to.Ptr(armmonitor.DataStatusPresent),
				OnboardingStatus: to.Ptr(armmonitor.OnboardingStatusOnboarded),
				ResourceID:       to.Ptr("/subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87/resourceGroups/vm-resource-group/providers/Microsoft.Compute/virtualMachines/ubuntu-vm"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VMInsightsOnboardingStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VMInsightsOnboardingStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2018-11-27-preview/examples/getOnboardingStatusSingleVM.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2018-11-27-preview/examples/getOnboardingStatusResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get status for a resource group that has at least one VM that is actively reporting data"},
	})
	client = armmonitor.NewVMInsightsClient(cred, &options)
	res, err = client.GetOnboardingStatus(ctx,
		"subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87/resourceGroups/resource-group-with-vms",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2018-11-27-preview/examples/getOnboardingStatusResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.VMInsightsOnboardingStatus{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Insights/vmInsightsOnboardingStatuses"),
			ID:   to.Ptr("/subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87/resourceGroups/resource-group-with-vms/providers/Microsoft.Insights/vmInsightsOnboardingStatuses/default"),
			Properties: &armmonitor.VMInsightsOnboardingStatusProperties{
				Data: []*armmonitor.DataContainer{
					{
						Workspace: &armmonitor.WorkspaceInfo{
							ID:       to.Ptr("/subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87/resourcegroups/monitoring/providers/microsoft.operationalinsights/workspaces/vm-monitoring"),
							Location: to.Ptr("eastus"),
							Properties: &armmonitor.WorkspaceInfoProperties{
								CustomerID: to.Ptr("c7f8f44d-d8ee-4b79-9d9a-4d8a1f2a112a"),
							},
						},
					}},
				DataStatus:       to.Ptr(armmonitor.DataStatusPresent),
				OnboardingStatus: to.Ptr(armmonitor.OnboardingStatusOnboarded),
				ResourceID:       to.Ptr("/subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87/resourceGroups/resource-group-with-vms"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VMInsightsOnboardingStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VMInsightsOnboardingStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2018-11-27-preview/examples/getOnboardingStatusResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2018-11-27-preview/examples/getOnboardingStatusSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get status for a subscription that has at least one VM that is actively reporting data"},
	})
	client = armmonitor.NewVMInsightsClient(cred, &options)
	res, err = client.GetOnboardingStatus(ctx,
		"subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2018-11-27-preview/examples/getOnboardingStatusSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.VMInsightsOnboardingStatus{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Insights/vmInsightsOnboardingStatuses"),
			ID:   to.Ptr("/subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87/providers/Microsoft.Insights/vmInsightsOnboardingStatuses/default"),
			Properties: &armmonitor.VMInsightsOnboardingStatusProperties{
				Data: []*armmonitor.DataContainer{
					{
						Workspace: &armmonitor.WorkspaceInfo{
							ID:       to.Ptr("/subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87/resourcegroups/monitoring/providers/microsoft.operationalinsights/workspaces/vm-monitoring-secondary"),
							Location: to.Ptr("eastus"),
							Properties: &armmonitor.WorkspaceInfoProperties{
								CustomerID: to.Ptr("f096d163-206e-4abf-9db3-2c62af003d68"),
							},
						},
					},
					{
						Workspace: &armmonitor.WorkspaceInfo{
							ID:       to.Ptr("/subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87/resourcegroups/monitoring/providers/microsoft.operationalinsights/workspaces/vm-monitoring"),
							Location: to.Ptr("eastus"),
							Properties: &armmonitor.WorkspaceInfoProperties{
								CustomerID: to.Ptr("c7f8f44d-d8ee-4b79-9d9a-4d8a1f2a112a"),
							},
						},
					}},
				DataStatus:       to.Ptr(armmonitor.DataStatusPresent),
				OnboardingStatus: to.Ptr(armmonitor.OnboardingStatusOnboarded),
				ResourceID:       to.Ptr("/subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VMInsightsOnboardingStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VMInsightsOnboardingStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2018-11-27-preview/examples/getOnboardingStatusSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkScopes_List(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkScopesList.json"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewPrivateLinkScopesClient("86dc51d3-92ed-4d7e-947a-775ea79b4919", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.AzureMonitorPrivateLinkScopeListResult{
			Value: []*armmonitor.AzureMonitorPrivateLinkScope{
				{
					Name:     to.Ptr("my-privatelinkscope"),
					Type:     to.Ptr("Microsoft.Insights/privateLinkScopes"),
					ID:       to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4919/resourceGroups/my-resource-group/providers/microsoft.insights/privateLinkScopes/my-privatelinkscope"),
					Location: to.Ptr("Global"),
					Tags:     map[string]*string{},
					Properties: &armmonitor.AzureMonitorPrivateLinkScopeProperties{
						ProvisioningState: to.Ptr("Succeeded"),
					},
				},
				{
					Name:     to.Ptr("my-other-privatelinkscope"),
					Type:     to.Ptr("Microsoft.Insights/privateLinkScopes"),
					ID:       to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4919/resourceGroups/my-other-resource-group/providers/microsoft.insights/privateLinkScopes/my-other-privatelinkscope"),
					Location: to.Ptr("Global"),
					Tags:     map[string]*string{},
					Properties: &armmonitor.AzureMonitorPrivateLinkScopeProperties{
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AzureMonitorPrivateLinkScopeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AzureMonitorPrivateLinkScopeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkScopes_ListByResourceGroup(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopesListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkScopeListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewPrivateLinkScopesClient("86dc51d3-92ed-4d7e-947a-775ea79b4919", cred, &options)
	pager := client.ListByResourceGroup("my-resource-group",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopesListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.AzureMonitorPrivateLinkScopeListResult{
			Value: []*armmonitor.AzureMonitorPrivateLinkScope{
				{
					Name:     to.Ptr("my-privatelinkscope"),
					Type:     to.Ptr("Microsoft.Insights/privateLinkScopes"),
					ID:       to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4919/resourceGroups/my-resource-group/providers/microsoft.insights/privateLinkScopes/my-privatelinkscope"),
					Location: to.Ptr("Global"),
					Tags:     map[string]*string{},
					Properties: &armmonitor.AzureMonitorPrivateLinkScopeProperties{
						ProvisioningState: to.Ptr("Succeeded"),
					},
				},
				{
					Name:     to.Ptr("my-other-privatelinkscope"),
					Type:     to.Ptr("Microsoft.Insights/privateLinkScopes"),
					ID:       to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4919/resourceGroups/my-resource-group/providers/microsoft.insights/privateLinkScopes/my-other-privatelinkscope"),
					Location: to.Ptr("Global"),
					Tags:     map[string]*string{},
					Properties: &armmonitor.AzureMonitorPrivateLinkScopeProperties{
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AzureMonitorPrivateLinkScopeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AzureMonitorPrivateLinkScopeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopesListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkScopes_Delete(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopesDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkScopesDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewPrivateLinkScopesClient("86dc51d3-92ed-4d7e-947a-775ea79b4919", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"my-resource-group",
		"my-privatelinkscope",
		&armmonitor.PrivateLinkScopesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopesDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopesDelete.json: %v", err)
	}
}

func TestPrivateLinkScopes_Get(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkScopeGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewPrivateLinkScopesClient("86dc51d3-92ed-4d7e-947a-775ea79b4919", cred, &options)
	res, err := client.Get(ctx,
		"my-resource-group",
		"my-privatelinkscope",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.AzureMonitorPrivateLinkScope{
			Name:     to.Ptr("my-privatelinkscope"),
			Type:     to.Ptr("Microsoft.Insights/privateLinkScopes"),
			ID:       to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4919/resourceGroups/my-resource-group/providers/microsoft.insights/privateLinkScopes/my-privatelinkscope"),
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.AzureMonitorPrivateLinkScopeProperties{
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureMonitorPrivateLinkScope) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureMonitorPrivateLinkScope)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkScopes_CreateOrUpdate(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopesCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkScopeCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewPrivateLinkScopesClient("86dc51d3-92ed-4d7e-947a-775ea79b4919", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"my-resource-group",
		"my-privatelinkscope",
		armmonitor.AzureMonitorPrivateLinkScope{
			Location:   to.Ptr("Global"),
			Properties: &armmonitor.AzureMonitorPrivateLinkScopeProperties{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopesCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.AzureMonitorPrivateLinkScope{
			Name:     to.Ptr("my-privatelinkscope"),
			Type:     to.Ptr("Microsoft.Insights/privateLinkScopes"),
			ID:       to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4919/resourceGroups/my-resource-group/providers/microsoft.insights/privateLinkScopes/my-privatelinkscope"),
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.AzureMonitorPrivateLinkScopeProperties{
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureMonitorPrivateLinkScope) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureMonitorPrivateLinkScope)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopesCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopesUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkScopeUpdate"},
	})
	client = armmonitor.NewPrivateLinkScopesClient("86dc51d3-92ed-4d7e-947a-775ea79b4919", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"my-resource-group",
		"my-privatelinkscope",
		armmonitor.AzureMonitorPrivateLinkScope{
			Location: to.Ptr("Global"),
			Tags: map[string]*string{
				"Tag1": to.Ptr("Value1"),
			},
			Properties: &armmonitor.AzureMonitorPrivateLinkScopeProperties{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopesUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.AzureMonitorPrivateLinkScope{
			Name:     to.Ptr("my-privatelinkscope"),
			Type:     to.Ptr("Microsoft.Insights/privateLinkScopes"),
			ID:       to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4919/resourceGroups/my-resource-group/providers/microsoft.insights/privateLinkScopes/my-privatelinkscope"),
			Location: to.Ptr("Global"),
			Tags: map[string]*string{
				"Tag1": to.Ptr("Value1"),
			},
			Properties: &armmonitor.AzureMonitorPrivateLinkScopeProperties{
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureMonitorPrivateLinkScope) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureMonitorPrivateLinkScope)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopesUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkScopes_UpdateTags(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopesUpdateTagsOnly.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkScopeUpdateTagsOnly"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewPrivateLinkScopesClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"my-resource-group",
		"my-privatelinkscope",
		armmonitor.TagsResource{
			Tags: map[string]*string{
				"Tag1": to.Ptr("Value1"),
				"Tag2": to.Ptr("Value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopesUpdateTagsOnly.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.AzureMonitorPrivateLinkScope{
			Name:     to.Ptr("my-privatelinkscope"),
			Type:     to.Ptr("Microsoft.Insights/privateLinkScopes"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/microsoft.insights/privateLinkScopes/my-privatelinkscope"),
			Location: to.Ptr("Global"),
			Tags: map[string]*string{
				"Tag1": to.Ptr("Value1"),
				"Tag2": to.Ptr("Value2"),
			},
			Properties: &armmonitor.AzureMonitorPrivateLinkScopeProperties{
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureMonitorPrivateLinkScope) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureMonitorPrivateLinkScope)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopesUpdateTagsOnly.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkScopeOperationStatus_Get(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/privateLinkScopeOperationStatuses.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get specific operation status"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewPrivateLinkScopeOperationStatusClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	res, err := client.Get(ctx,
		"713192d7-503f-477a-9cfe-4efc3ee2bd11",
		"MyResourceGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/privateLinkScopeOperationStatuses.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.OperationStatus{
			Name:      to.Ptr("713192d7-503f-477a-9cfe-4efc3ee2bd11"),
			EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-01T16:13:13.933Z"); return t }()),
			ID:        to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/privateLinkScopeOperationStatuses/713192d7-503f-477a-9cfe-4efc3ee2bd11"),
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-01T13:13:13.933Z"); return t }()),
			Status:    to.Ptr("Succeeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/privateLinkScopeOperationStatuses.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_ListByPrivateLinkScope(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopePrivateLinkResourceListGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private endpoint connection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewPrivateLinkResourcesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByPrivateLinkScope("MyResourceGroup",
		"MyPrivateLinkScope",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopePrivateLinkResourceListGet.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.PrivateLinkResourceListResult{
			Value: []*armmonitor.PrivateLinkResource{
				{
					Name: to.Ptr("azuremonitor"),
					Type: to.Ptr("Microsoft.Insights/privateLinkScopes/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/privateLinkScopes/MyPrivateLinkScope/privateLinkResources/azuremonitor"),
					Properties: &armmonitor.PrivateLinkResourceProperties{
						GroupID: to.Ptr("azuremonitor"),
						RequiredMembers: []*string{
							to.Ptr("draft"),
							to.Ptr("breeze"),
							to.Ptr("livemetrics"),
							to.Ptr("snapshotdebugger"),
							to.Ptr("profiler"),
							to.Ptr("oms-12300000-1111-2222-3333-444444444444"),
							to.Ptr("ods-12300000-1111-2222-3333-444444444444"),
							to.Ptr("agent-12300000-1111-2222-3333-444444444444")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopePrivateLinkResourceListGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopePrivateLinkResourceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private endpoint connection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewPrivateLinkResourcesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"MyPrivateLinkScope",
		"azuremonitor",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopePrivateLinkResourceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.PrivateLinkResource{
			Name: to.Ptr("azuremonitor"),
			Type: to.Ptr("Microsoft.Insights/privateLinkScopes/privateLinkResources"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/privateLinkScopes/MyPrivateLinkScope/privateLinkResources/azuremonitor"),
			Properties: &armmonitor.PrivateLinkResourceProperties{
				GroupID: to.Ptr("azuremonitor"),
				RequiredMembers: []*string{
					to.Ptr("draft"),
					to.Ptr("breeze"),
					to.Ptr("livemetrics"),
					to.Ptr("snapshotdebugger"),
					to.Ptr("profiler"),
					to.Ptr("oms-12300000-1111-2222-3333-444444444444"),
					to.Ptr("ods-12300000-1111-2222-3333-444444444444"),
					to.Ptr("agent-12300000-1111-2222-3333-444444444444")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopePrivateLinkResourceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateEndpointConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private endpoint connection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"MyPrivateLinkScope",
		"private-endpoint-connection-name",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateEndpointConnectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.PrivateEndpointConnection{
			Name: to.Ptr("private-endpoint-connection-name"),
			Type: to.Ptr("Microsoft.Insights/privateLinkScopes/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/privateLinkScopes/MyPrivateLinkScope/privateEndpointConnections/private-endpoint-connection-name"),
			Properties: &armmonitor.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armmonitor.PrivateEndpointProperty{
					ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
				},
				PrivateLinkServiceConnectionState: &armmonitor.PrivateLinkServiceConnectionStateProperty{
					Description:     to.Ptr("Auto-approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateEndpointConnectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateEndpointConnectionUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Approve or reject a private endpoint connection with a given name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"MyResourceGroup",
		"MyPrivateLinkScope",
		"private-endpoint-connection-name",
		armmonitor.PrivateEndpointConnection{
			Properties: &armmonitor.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armmonitor.PrivateLinkServiceConnectionStateProperty{
					Description: to.Ptr("Approved by johndoe@contoso.com"),
					Status:      to.Ptr("Approved"),
				},
			},
		},
		&armmonitor.PrivateEndpointConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateEndpointConnectionUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateEndpointConnectionUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.PrivateEndpointConnection{
			Name: to.Ptr("private-endpoint-connection-name"),
			Type: to.Ptr("Microsoft.Insights/privateLinkScopes/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/privateLinkScopes/MyPrivateLinkScope/privateEndpointConnections/private-endpoint-connection-name"),
			Properties: &armmonitor.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armmonitor.PrivateEndpointProperty{
					ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
				},
				PrivateLinkServiceConnectionState: &armmonitor.PrivateLinkServiceConnectionStateProperty{
					Description:     to.Ptr("Approved by johndoe@contoso.com"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateEndpointConnectionUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateEndpointConnectionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a private endpoint connection with a given name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"MyResourceGroup",
		"MyPrivateLinkScope",
		"private-endpoint-connection-name",
		&armmonitor.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateEndpointConnectionDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateEndpointConnectionDelete.json: %v", err)
	}
}

func TestPrivateEndpointConnections_ListByPrivateLinkScope(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateEndpointConnectionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets list of private endpoint connections on a private link scope."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByPrivateLinkScope("MyResourceGroup",
		"MyPrivateLinkScope",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateEndpointConnectionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.PrivateEndpointConnectionListResult{
			Value: []*armmonitor.PrivateEndpointConnection{
				{
					Name: to.Ptr("private-endpoint-connection-name"),
					Type: to.Ptr("Microsoft.Insights/privateLinkScopes/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/privateLinkScopes/MyPrivateLinkScope/privateEndpointConnections/private-endpoint-connection-name-2"),
					Properties: &armmonitor.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armmonitor.PrivateEndpointProperty{
							ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
						},
						PrivateLinkServiceConnectionState: &armmonitor.PrivateLinkServiceConnectionStateProperty{
							Description:     to.Ptr("Auto-approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr("Approved"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				},
				{
					Name: to.Ptr("private-endpoint-connection-name-2"),
					Type: to.Ptr("Microsoft.Insights/privateLinkScopes/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/privateLinkScopes/MyPrivateLinkScope/privateEndpointConnections/private-endpoint-connection-name-2"),
					Properties: &armmonitor.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armmonitor.PrivateEndpointProperty{
							ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name-2"),
						},
						PrivateLinkServiceConnectionState: &armmonitor.PrivateLinkServiceConnectionStateProperty{
							Description:     to.Ptr("Please approve my connection."),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr("Pending"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateEndpointConnectionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkScopedResources_Get(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopedResourceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private link scoped resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewPrivateLinkScopedResourcesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"MyPrivateLinkScope",
		"scoped-resource-name",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopedResourceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.ScopedResource{
			Name: to.Ptr("scoped-resource-name"),
			Type: to.Ptr("Microsoft.Insights/privateLinkScopes/scopedResources"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/privateLinkScopes/MyPrivateLinkScope/scopedResources/scoped-resource-name"),
			Properties: &armmonitor.ScopedResourceProperties{
				LinkedResourceID:  to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/components/my-component"),
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ScopedResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ScopedResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopedResourceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkScopedResources_CreateOrUpdate(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopedResourceUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a scoped resource in a private link scope."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewPrivateLinkScopedResourcesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"MyResourceGroup",
		"MyPrivateLinkScope",
		"scoped-resource-name",
		armmonitor.ScopedResource{
			Properties: &armmonitor.ScopedResourceProperties{
				LinkedResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/components/my-component"),
			},
		},
		&armmonitor.PrivateLinkScopedResourcesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopedResourceUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopedResourceUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.ScopedResource{
			Name: to.Ptr("scoped-resource-name"),
			Type: to.Ptr("Microsoft.Insights/privateLinkScopes/scopedResources"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/privateLinkScopes/MyPrivateLinkScope/scopedResources/scoped-resource-name"),
			Properties: &armmonitor.ScopedResourceProperties{
				LinkedResourceID:  to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/components/my-component"),
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ScopedResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ScopedResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopedResourceUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkScopedResources_Delete(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopedResourceDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a scoped resource with a given name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewPrivateLinkScopedResourcesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"MyResourceGroup",
		"MyPrivateLinkScope",
		"scoped-resource-name",
		&armmonitor.PrivateLinkScopedResourcesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopedResourceDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopedResourceDelete.json: %v", err)
	}
}

func TestPrivateLinkScopedResources_ListByPrivateLinkScope(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopedResourceList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets list of scoped resources in a private link scope."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewPrivateLinkScopedResourcesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByPrivateLinkScope("MyResourceGroup",
		"MyPrivateLinkScope",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopedResourceList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.ScopedResourceListResult{
			Value: []*armmonitor.ScopedResource{
				{
					Name: to.Ptr("scoped-resource-name"),
					Type: to.Ptr("Microsoft.Insights/privateLinkScopes/scopedResources"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/privateLinkScopes/MyPrivateLinkScope/scopedResources/scoped-resource-name"),
					Properties: &armmonitor.ScopedResourceProperties{
						LinkedResourceID:  to.Ptr("/subscriptions/00000000-0000-2222-3333-444444444444/resourceGroups/MyComponentResourceGroup/providers/Microsoft.Insights/components/my-component"),
						ProvisioningState: to.Ptr("Succeeded"),
					},
				},
				{
					Name: to.Ptr("other-scoped-resource-name"),
					Type: to.Ptr("Microsoft.Insights/privateLinkScopes/scopedResources"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/privateLinkScopes/MyPrivateLinkScope/scopedResources/other-scoped-resource-name"),
					Properties: &armmonitor.ScopedResourceProperties{
						LinkedResourceID:  to.Ptr("/subscriptions/00000000-3333-2222-5555-444444444444/resourceGroups/MyWorkspaceResourceGroup/providers/Microsoft.OperationalInsights/workspaces/my-workspace"),
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ScopedResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ScopedResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/preview/2019-10-17-preview/examples/PrivateLinkScopedResourceList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestActivityLogAlerts_CreateOrUpdate(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an Activity Log Alert rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewActivityLogAlertsClient("187f412d-1758-44d9-b052-169e2564721d", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"MyResourceGroup",
		"SampleActivityLogAlertRule",
		armmonitor.ActivityLogAlertResource{
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.AlertRuleProperties{
				Description: to.Ptr("Description of sample Activity Log Alert rule."),
				Actions: &armmonitor.ActionList{
					ActionGroups: []*armmonitor.ActionGroupAutoGenerated{
						{
							ActionGroupID: to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/actionGroups/SampleActionGroup"),
							WebhookProperties: map[string]*string{
								"sampleWebhookProperty": to.Ptr("SamplePropertyValue"),
							},
						}},
				},
				Condition: &armmonitor.AlertRuleAllOfCondition{
					AllOf: []*armmonitor.AlertRuleAnyOfOrLeafCondition{
						{
							Equals: to.Ptr("Administrative"),
							Field:  to.Ptr("category"),
						},
						{
							Equals: to.Ptr("Error"),
							Field:  to.Ptr("level"),
						}},
				},
				Enabled: to.Ptr(true),
				Scopes: []*string{
					to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d")},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.ActivityLogAlertResource{
			Name:     to.Ptr("SampleActivityLogAlertRule"),
			Type:     to.Ptr("Microsoft.Insights/ActivityLogAlerts"),
			ID:       to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/microsoft.insights/activityLogAlerts/SampleActivityLogAlertRule"),
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.AlertRuleProperties{
				Description: to.Ptr("Description of sample Activity Log Alert rule."),
				Actions: &armmonitor.ActionList{
					ActionGroups: []*armmonitor.ActionGroupAutoGenerated{
						{
							ActionGroupID: to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/microsoft.insights/actionGroups/SampleActionGroup"),
							WebhookProperties: map[string]*string{
								"sampleWebhookProperty": to.Ptr("SamplePropertyValue"),
							},
						}},
				},
				Condition: &armmonitor.AlertRuleAllOfCondition{
					AllOf: []*armmonitor.AlertRuleAnyOfOrLeafCondition{
						{
							Equals: to.Ptr("Administrative"),
							Field:  to.Ptr("Category"),
						},
						{
							Equals: to.Ptr("Error"),
							Field:  to.Ptr("Level"),
						}},
				},
				Enabled: to.Ptr(true),
				Scopes: []*string{
					to.Ptr("subscriptions/187f412d-1758-44d9-b052-169e2564721d")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ActivityLogAlertResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ActivityLogAlertResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_CreateOrUpdateRuleWithAnyOfCondition.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an Activity Log Alert rule with 'anyOf' condition"},
	})
	client = armmonitor.NewActivityLogAlertsClient("187f412d-1758-44d9-b052-169e2564721d", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"MyResourceGroup",
		"SampleActivityLogAlertRuleWithAnyOfCondition",
		armmonitor.ActivityLogAlertResource{
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.AlertRuleProperties{
				Description: to.Ptr("Description of sample Activity Log Alert rule with 'anyOf' condition."),
				Actions: &armmonitor.ActionList{
					ActionGroups: []*armmonitor.ActionGroupAutoGenerated{
						{
							ActionGroupID: to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/actionGroups/SampleActionGroup"),
							WebhookProperties: map[string]*string{
								"sampleWebhookProperty": to.Ptr("SamplePropertyValue"),
							},
						}},
				},
				Condition: &armmonitor.AlertRuleAllOfCondition{
					AllOf: []*armmonitor.AlertRuleAnyOfOrLeafCondition{
						{
							Equals: to.Ptr("ServiceHealth"),
							Field:  to.Ptr("category"),
						},
						{
							AnyOf: []*armmonitor.AlertRuleLeafCondition{
								{
									Equals: to.Ptr("Incident"),
									Field:  to.Ptr("properties.incidentType"),
								},
								{
									Equals: to.Ptr("Maintenance"),
									Field:  to.Ptr("properties.incidentType"),
								}},
						}},
				},
				Enabled: to.Ptr(true),
				Scopes: []*string{
					to.Ptr("subscriptions/187f412d-1758-44d9-b052-169e2564721d")},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_CreateOrUpdateRuleWithAnyOfCondition.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.ActivityLogAlertResource{
			Name:     to.Ptr("SampleActivityLogAlertRuleWithAnyOfCondition"),
			Type:     to.Ptr("Microsoft.Insights/ActivityLogAlerts"),
			ID:       to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/microsoft.insights/activityLogAlerts/SampleActivityLogAlertRuleWithAnyOfCondition"),
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.AlertRuleProperties{
				Description: to.Ptr("Description of sample Activity Log Alert rule with 'anyOf' condition."),
				Actions: &armmonitor.ActionList{
					ActionGroups: []*armmonitor.ActionGroupAutoGenerated{
						{
							ActionGroupID: to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/actionGroups/SampleActionGroup"),
							WebhookProperties: map[string]*string{
								"sampleWebhookProperty": to.Ptr("SamplePropertyValue"),
							},
						}},
				},
				Condition: &armmonitor.AlertRuleAllOfCondition{
					AllOf: []*armmonitor.AlertRuleAnyOfOrLeafCondition{
						{
							Equals: to.Ptr("ServiceHealth"),
							Field:  to.Ptr("category"),
						},
						{
							AnyOf: []*armmonitor.AlertRuleLeafCondition{
								{
									Equals: to.Ptr("Incident"),
									Field:  to.Ptr("properties.incidentType"),
								},
								{
									Equals: to.Ptr("Maintenance"),
									Field:  to.Ptr("properties.incidentType"),
								}},
						}},
				},
				Enabled: to.Ptr(true),
				Scopes: []*string{
					to.Ptr("subscriptions/187f412d-1758-44d9-b052-169e2564721d")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ActivityLogAlertResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ActivityLogAlertResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_CreateOrUpdateRuleWithAnyOfCondition.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_CreateOrUpdateRuleWithContainsAny.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an Activity Log Alert rule with 'containsAny'"},
	})
	client = armmonitor.NewActivityLogAlertsClient("187f412d-1758-44d9-b052-169e2564721d", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"MyResourceGroup",
		"SampleActivityLogAlertRuleWithContainsAny",
		armmonitor.ActivityLogAlertResource{
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.AlertRuleProperties{
				Description: to.Ptr("Description of sample Activity Log Alert rule with 'containsAny'."),
				Actions: &armmonitor.ActionList{
					ActionGroups: []*armmonitor.ActionGroupAutoGenerated{
						{
							ActionGroupID: to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/actionGroups/SampleActionGroup"),
							WebhookProperties: map[string]*string{
								"sampleWebhookProperty": to.Ptr("SamplePropertyValue"),
							},
						}},
				},
				Condition: &armmonitor.AlertRuleAllOfCondition{
					AllOf: []*armmonitor.AlertRuleAnyOfOrLeafCondition{
						{
							Equals: to.Ptr("ServiceHealth"),
							Field:  to.Ptr("category"),
						},
						{
							ContainsAny: []*string{
								to.Ptr("North Europe"),
								to.Ptr("West Europe")},
							Field: to.Ptr("properties.impactedServices[*].ImpactedRegions[*].RegionName"),
						}},
				},
				Enabled: to.Ptr(true),
				Scopes: []*string{
					to.Ptr("subscriptions/187f412d-1758-44d9-b052-169e2564721d")},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_CreateOrUpdateRuleWithContainsAny.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.ActivityLogAlertResource{
			Name:     to.Ptr("SampleActivityLogAlertRuleWithContainsAny"),
			Type:     to.Ptr("Microsoft.Insights/ActivityLogAlerts"),
			ID:       to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/microsoft.insights/activityLogAlerts/SampleActivityLogAlertRuleWithContainsAny"),
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.AlertRuleProperties{
				Description: to.Ptr("Description of sample Activity Log Alert rule with 'containsAny'."),
				Actions: &armmonitor.ActionList{
					ActionGroups: []*armmonitor.ActionGroupAutoGenerated{
						{
							ActionGroupID: to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/actionGroups/SampleActionGroup"),
							WebhookProperties: map[string]*string{
								"sampleWebhookProperty": to.Ptr("SamplePropertyValue"),
							},
						}},
				},
				Condition: &armmonitor.AlertRuleAllOfCondition{
					AllOf: []*armmonitor.AlertRuleAnyOfOrLeafCondition{
						{
							Equals: to.Ptr("ServiceHealth"),
							Field:  to.Ptr("category"),
						},
						{
							ContainsAny: []*string{
								to.Ptr("North Europe"),
								to.Ptr("West Europe")},
							Field: to.Ptr("properties.impactedServices[*].ImpactedRegions[*].RegionName"),
						}},
				},
				Enabled: to.Ptr(true),
				Scopes: []*string{
					to.Ptr("subscriptions/187f412d-1758-44d9-b052-169e2564721d")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ActivityLogAlertResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ActivityLogAlertResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_CreateOrUpdateRuleWithContainsAny.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestActivityLogAlerts_Get(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an Activity Log Alert rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewActivityLogAlertsClient("187f412d-1758-44d9-b052-169e2564721d", cred, &options)
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"SampleActivityLogAlertRule",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.ActivityLogAlertResource{
			Name:     to.Ptr("SampleActivityLogAlertRule"),
			Type:     to.Ptr("Microsoft.Insights/ActivityLogAlerts"),
			ID:       to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/microsoft.insights/activityLogAlerts/SampleActivityLogAlertRule"),
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armmonitor.AlertRuleProperties{
				Description: to.Ptr("Description of sample Activity Log Alert rule."),
				Actions: &armmonitor.ActionList{
					ActionGroups: []*armmonitor.ActionGroupAutoGenerated{
						{
							ActionGroupID: to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/microsoft.insights/actionGroups/SampleActionGroup"),
							WebhookProperties: map[string]*string{
								"sampleWebhookProperty": to.Ptr("SamplePropertyValue"),
							},
						}},
				},
				Condition: &armmonitor.AlertRuleAllOfCondition{
					AllOf: []*armmonitor.AlertRuleAnyOfOrLeafCondition{
						{
							Equals: to.Ptr("Administrative"),
							Field:  to.Ptr("category"),
						},
						{
							Equals: to.Ptr("Error"),
							Field:  to.Ptr("level"),
						}},
				},
				Enabled: to.Ptr(true),
				Scopes: []*string{
					to.Ptr("subscriptions/187f412d-1758-44d9-b052-169e2564721d")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ActivityLogAlertResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ActivityLogAlertResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestActivityLogAlerts_Delete(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an Activity Log Alert rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewActivityLogAlertsClient("187f412d-1758-44d9-b052-169e2564721d", cred, &options)
	_, err := client.Delete(ctx,
		"MyResourceGroup",
		"SampleActivityLogAlertRule",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_Delete.json: %v", err)
	}
}

func TestActivityLogAlerts_Update(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch an Activity Log Alert rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewActivityLogAlertsClient("187f412d-1758-44d9-b052-169e2564721d", cred, &options)
	res, err := client.Update(ctx,
		"MyResourceGroup",
		"SampleActivityLogAlertRule",
		armmonitor.AlertRulePatchObject{
			Properties: &armmonitor.AlertRulePatchProperties{
				Enabled: to.Ptr(false),
			},
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.ActivityLogAlertResource{
			Name:     to.Ptr("SampleActivityLogAlertRule"),
			Type:     to.Ptr("Microsoft.Insights/ActivityLogAlerts"),
			ID:       to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/microsoft.insights/activityLogAlerts/SampleActivityLogAlertRule"),
			Location: to.Ptr("Global"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armmonitor.AlertRuleProperties{
				Description: to.Ptr("Description of sample Activity Log Alert rule."),
				Actions: &armmonitor.ActionList{
					ActionGroups: []*armmonitor.ActionGroupAutoGenerated{
						{
							ActionGroupID: to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/microsoft.insights/actionGroups/SampleActionGroup"),
							WebhookProperties: map[string]*string{
								"sampleWebhookProperty": to.Ptr("SamplePropertyValue"),
							},
						}},
				},
				Condition: &armmonitor.AlertRuleAllOfCondition{
					AllOf: []*armmonitor.AlertRuleAnyOfOrLeafCondition{
						{
							Equals: to.Ptr("Administrative"),
							Field:  to.Ptr("category"),
						},
						{
							Equals: to.Ptr("Error"),
							Field:  to.Ptr("level"),
						}},
				},
				Enabled: to.Ptr(false),
				Scopes: []*string{
					to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ActivityLogAlertResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ActivityLogAlertResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestActivityLogAlerts_ListByResourceGroup(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_ListByResourceGroupName.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List activity log alerts"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewActivityLogAlertsClient("187f412d-1758-44d9-b052-169e2564721d", cred, &options)
	pager := client.ListByResourceGroup("MyResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_ListByResourceGroupName.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.AlertRuleList{
			Value: []*armmonitor.ActivityLogAlertResource{
				{
					Name:     to.Ptr("SampleActivityLogAlertRule1"),
					Type:     to.Ptr("Microsoft.Insights/ActivityLogAlerts"),
					ID:       to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/microsoft.insights/activityLogAlerts/SampleActivityLogAlertRule1"),
					Location: to.Ptr("Global"),
					Tags:     map[string]*string{},
					Properties: &armmonitor.AlertRuleProperties{
						Description: to.Ptr("Description of sample Activity Log Alert rule."),
						Actions: &armmonitor.ActionList{
							ActionGroups: []*armmonitor.ActionGroupAutoGenerated{
								{
									ActionGroupID: to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/microsoft.insights/actionGroups/SampleActionGroup"),
									WebhookProperties: map[string]*string{
										"sampleWebhookProperty": to.Ptr("SamplePropertyValue"),
									},
								}},
						},
						Condition: &armmonitor.AlertRuleAllOfCondition{
							AllOf: []*armmonitor.AlertRuleAnyOfOrLeafCondition{
								{
									Equals: to.Ptr("Administrative"),
									Field:  to.Ptr("category"),
								},
								{
									Equals: to.Ptr("Error"),
									Field:  to.Ptr("level"),
								}},
						},
						Enabled: to.Ptr(true),
						Scopes: []*string{
							to.Ptr("subscriptions/187f412d-1758-44d9-b052-169e2564721d")},
					},
				},
				{
					Name:     to.Ptr("SampleActivityLogAlertRule2"),
					Type:     to.Ptr("Microsoft.Insights/ActivityLogAlerts"),
					ID:       to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/microsoft.insights/activityLogAlerts/SampleActivityLogAlertRule2"),
					Location: to.Ptr("Global"),
					Tags:     map[string]*string{},
					Properties: &armmonitor.AlertRuleProperties{
						Description: to.Ptr("Description of sample Activity Log Alert rule."),
						Actions: &armmonitor.ActionList{
							ActionGroups: []*armmonitor.ActionGroupAutoGenerated{
								{
									ActionGroupID:     to.Ptr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/microsoft.insights/actionGroups/SampleActionGroup"),
									WebhookProperties: map[string]*string{},
								}},
						},
						Condition: &armmonitor.AlertRuleAllOfCondition{
							AllOf: []*armmonitor.AlertRuleAnyOfOrLeafCondition{
								{
									Equals: to.Ptr("Administrative"),
									Field:  to.Ptr("category"),
								},
								{
									Equals: to.Ptr("Succeeded"),
									Field:  to.Ptr("status"),
								}},
						},
						Enabled: to.Ptr(true),
						Scopes: []*string{
							to.Ptr("subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AlertRuleList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AlertRuleList)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_ListByResourceGroupName.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataCollectionEndpoints_ListByResourceGroup(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionEndpointsListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List data collection endpoints by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDataCollectionEndpointsClient("703362b3-f278-4e4b-9179-c76eaf41ffc2", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionEndpointsListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.DataCollectionEndpointResourceListResult{
			Value: []*armmonitor.DataCollectionEndpointResource{
				{
					Name:     to.Ptr("myCollectionEndpoint"),
					Type:     to.Ptr("Microsoft.Insights/dataCollectionEndpoints"),
					Etag:     to.Ptr("070057da-0000-0000-0000-5ba70d6c0000"),
					ID:       to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Insights/dataCollectionEndpoints/myCollectionEndpoint"),
					Location: to.Ptr("eastus"),
					Properties: &armmonitor.DataCollectionEndpointResourceProperties{
						ConfigurationAccess: &armmonitor.DataCollectionEndpointConfigurationAccess{
							Endpoint: to.Ptr("https://mycollectionendpoint-abcd.eastus-1.control.monitor.azure.com"),
						},
						LogsIngestion: &armmonitor.DataCollectionEndpointLogsIngestion{
							Endpoint: to.Ptr("https://mycollectionendpoint-abcd.eastus-1.ingest.monitor.azure.com"),
						},
						NetworkACLs: &armmonitor.DataCollectionEndpointNetworkACLs{
							PublicNetworkAccess: to.Ptr(armmonitor.KnownPublicNetworkAccessOptionsEnabled),
						},
					},
					SystemData: &armmonitor.DataCollectionEndpointResourceSystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T12:34:56.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armmonitor.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T12:34:56.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armmonitor.CreatedByTypeUser),
					},
					Tags: map[string]*string{
						"tag1": to.Ptr("A"),
						"tag2": to.Ptr("B"),
					},
				},
				{
					Name:     to.Ptr("herCollectionEndpoint"),
					Type:     to.Ptr("Microsoft.Insights/dataCollectionEndpoints"),
					Etag:     to.Ptr("070057da-0000-0000-0000-5ba70d6c0000"),
					ID:       to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Insights/dataCollectionEndpoints/herCollectionEndpoint"),
					Location: to.Ptr("westus"),
					Properties: &armmonitor.DataCollectionEndpointResourceProperties{
						ConfigurationAccess: &armmonitor.DataCollectionEndpointConfigurationAccess{
							Endpoint: to.Ptr("https://hercollectionendpoint-xywz.eastus-1.control.monitor.azure.com"),
						},
						LogsIngestion: &armmonitor.DataCollectionEndpointLogsIngestion{
							Endpoint: to.Ptr("https://hercollectionendpoint-xywz.eastus-1.ingest.monitor.azure.com"),
						},
						NetworkACLs: &armmonitor.DataCollectionEndpointNetworkACLs{
							PublicNetworkAccess: to.Ptr(armmonitor.KnownPublicNetworkAccessOptionsDisabled),
						},
					},
					SystemData: &armmonitor.DataCollectionEndpointResourceSystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T12:34:56.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armmonitor.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T12:34:56.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armmonitor.CreatedByTypeUser),
					},
					Tags: map[string]*string{
						"tag1": to.Ptr("A"),
						"tag2": to.Ptr("B"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataCollectionEndpointResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataCollectionEndpointResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionEndpointsListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataCollectionEndpoints_ListBySubscription(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionEndpointsListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List data collection endpoints by subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDataCollectionEndpointsClient("703362b3-f278-4e4b-9179-c76eaf41ffc2", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionEndpointsListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.DataCollectionEndpointResourceListResult{
			Value: []*armmonitor.DataCollectionEndpointResource{
				{
					Name:     to.Ptr("myCollectionEndpoint"),
					Type:     to.Ptr("Microsoft.Insights/dataCollectionEndpoints"),
					Etag:     to.Ptr("070057da-0000-0000-0000-5ba70d6c0000"),
					ID:       to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Insights/dataCollectionEndpoints/myCollectionEndpoint"),
					Location: to.Ptr("eastus"),
					Properties: &armmonitor.DataCollectionEndpointResourceProperties{
						ConfigurationAccess: &armmonitor.DataCollectionEndpointConfigurationAccess{
							Endpoint: to.Ptr("https://mycollectionendpoint-abcd.eastus-1.control.monitor.azure.com"),
						},
						LogsIngestion: &armmonitor.DataCollectionEndpointLogsIngestion{
							Endpoint: to.Ptr("https://mycollectionendpoint-abcd.eastus-1.ingest.monitor.azure.com"),
						},
						NetworkACLs: &armmonitor.DataCollectionEndpointNetworkACLs{
							PublicNetworkAccess: to.Ptr(armmonitor.KnownPublicNetworkAccessOptionsEnabled),
						},
					},
					SystemData: &armmonitor.DataCollectionEndpointResourceSystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T12:34:56.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armmonitor.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T12:34:56.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armmonitor.CreatedByTypeUser),
					},
					Tags: map[string]*string{
						"tag1": to.Ptr("A"),
						"tag2": to.Ptr("B"),
					},
				},
				{
					Name:     to.Ptr("herCollectionEndpoint"),
					Type:     to.Ptr("Microsoft.Insights/dataCollectionEndpoints"),
					Etag:     to.Ptr("070057da-0000-0000-0000-5ba70d6c0000"),
					ID:       to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/herResourceGroup/providers/Microsoft.Insights/dataCollectionEndpoints/herCollectionEndpoint"),
					Location: to.Ptr("westus"),
					Properties: &armmonitor.DataCollectionEndpointResourceProperties{
						ConfigurationAccess: &armmonitor.DataCollectionEndpointConfigurationAccess{
							Endpoint: to.Ptr("https://hercollectionendpoint-xywz.eastus-1.control.monitor.azure.com"),
						},
						LogsIngestion: &armmonitor.DataCollectionEndpointLogsIngestion{
							Endpoint: to.Ptr("https://hercollectionendpoint-xywz.eastus-1.ingest.monitor.azure.com"),
						},
						NetworkACLs: &armmonitor.DataCollectionEndpointNetworkACLs{
							PublicNetworkAccess: to.Ptr(armmonitor.KnownPublicNetworkAccessOptionsDisabled),
						},
					},
					SystemData: &armmonitor.DataCollectionEndpointResourceSystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T12:34:56.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armmonitor.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T12:34:56.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armmonitor.CreatedByTypeUser),
					},
					Tags: map[string]*string{
						"tag1": to.Ptr("A"),
						"tag2": to.Ptr("B"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataCollectionEndpointResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataCollectionEndpointResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionEndpointsListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataCollectionEndpoints_Get(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionEndpointsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get data collection endpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDataCollectionEndpointsClient("703362b3-f278-4e4b-9179-c76eaf41ffc2", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myCollectionEndpoint",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionEndpointsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.DataCollectionEndpointResource{
			Name:     to.Ptr("myCollectionEndpoint"),
			Type:     to.Ptr("Microsoft.Insights/dataCollectionEndpoints"),
			Etag:     to.Ptr("070057da-0000-0000-0000-5ba70d6c0000"),
			ID:       to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Insights/dataCollectionEndpoints/myCollectionEndpoint"),
			Location: to.Ptr("eastus"),
			Properties: &armmonitor.DataCollectionEndpointResourceProperties{
				ConfigurationAccess: &armmonitor.DataCollectionEndpointConfigurationAccess{
					Endpoint: to.Ptr("https://mycollectionendpoint-abcd.eastus-1.control.monitor.azure.com"),
				},
				LogsIngestion: &armmonitor.DataCollectionEndpointLogsIngestion{
					Endpoint: to.Ptr("https://mycollectionendpoint-abcd.eastus-1.ingest.monitor.azure.com"),
				},
				NetworkACLs: &armmonitor.DataCollectionEndpointNetworkACLs{
					PublicNetworkAccess: to.Ptr(armmonitor.KnownPublicNetworkAccessOptionsEnabled),
				},
			},
			SystemData: &armmonitor.DataCollectionEndpointResourceSystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T12:34:56.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armmonitor.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T12:34:56.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armmonitor.CreatedByTypeUser),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("A"),
				"tag2": to.Ptr("B"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataCollectionEndpointResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataCollectionEndpointResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionEndpointsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataCollectionEndpoints_Create(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionEndpointsCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update data collection endpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDataCollectionEndpointsClient("703362b3-f278-4e4b-9179-c76eaf41ffc2", cred, &options)
	res, err := client.Create(ctx,
		"myResourceGroup",
		"myCollectionEndpoint",
		&armmonitor.DataCollectionEndpointsClientCreateOptions{Body: &armmonitor.DataCollectionEndpointResource{
			Location: to.Ptr("eastus"),
			Properties: &armmonitor.DataCollectionEndpointResourceProperties{
				NetworkACLs: &armmonitor.DataCollectionEndpointNetworkACLs{
					PublicNetworkAccess: to.Ptr(armmonitor.KnownPublicNetworkAccessOptionsEnabled),
				},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionEndpointsCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.DataCollectionEndpointResource{
			Name:     to.Ptr("myCollectionEndpoint"),
			Type:     to.Ptr("Microsoft.Insights/dataCollectionEndpoints"),
			Etag:     to.Ptr("070057da-0000-0000-0000-5ba70d6c0000"),
			ID:       to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Insights/dataCollectionEndpoints/myCollectionEndpoint"),
			Location: to.Ptr("eastus"),
			Properties: &armmonitor.DataCollectionEndpointResourceProperties{
				ConfigurationAccess: &armmonitor.DataCollectionEndpointConfigurationAccess{
					Endpoint: to.Ptr("https://mycollectionendpoint-abcd.eastus-1.control.monitor.azure.com"),
				},
				LogsIngestion: &armmonitor.DataCollectionEndpointLogsIngestion{
					Endpoint: to.Ptr("https://mycollectionendpoint-abcd.eastus-1.ingest.monitor.azure.com"),
				},
				NetworkACLs: &armmonitor.DataCollectionEndpointNetworkACLs{
					PublicNetworkAccess: to.Ptr(armmonitor.KnownPublicNetworkAccessOptionsEnabled),
				},
			},
			SystemData: &armmonitor.DataCollectionEndpointResourceSystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T12:34:56.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armmonitor.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T12:34:56.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armmonitor.CreatedByTypeUser),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("A"),
				"tag2": to.Ptr("B"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataCollectionEndpointResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataCollectionEndpointResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionEndpointsCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataCollectionEndpoints_Update(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionEndpointsUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update data collection endpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDataCollectionEndpointsClient("703362b3-f278-4e4b-9179-c76eaf41ffc2", cred, &options)
	res, err := client.Update(ctx,
		"myResourceGroup",
		"myCollectionEndpoint",
		&armmonitor.DataCollectionEndpointsClientUpdateOptions{Body: &armmonitor.ResourceForUpdate{
			Tags: map[string]*string{
				"tag1": to.Ptr("A"),
				"tag2": to.Ptr("B"),
				"tag3": to.Ptr("C"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionEndpointsUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.DataCollectionEndpointResource{
			Name:     to.Ptr("myCollectionEndpoint"),
			Type:     to.Ptr("Microsoft.Insights/dataCollectionEndpoints"),
			Etag:     to.Ptr("070057da-0000-0000-0000-5ba70d6c0000"),
			ID:       to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Insights/dataCollectionEndpoints/myCollectionEndpoint"),
			Location: to.Ptr("eastus"),
			Properties: &armmonitor.DataCollectionEndpointResourceProperties{
				ConfigurationAccess: &armmonitor.DataCollectionEndpointConfigurationAccess{
					Endpoint: to.Ptr("https://mycollectionendpoint-abcd.eastus-1.control.monitor.azure.com"),
				},
				LogsIngestion: &armmonitor.DataCollectionEndpointLogsIngestion{
					Endpoint: to.Ptr("https://mycollectionendpoint-abcd.eastus-1.ingest.monitor.azure.com"),
				},
				NetworkACLs: &armmonitor.DataCollectionEndpointNetworkACLs{
					PublicNetworkAccess: to.Ptr(armmonitor.KnownPublicNetworkAccessOptionsEnabled),
				},
			},
			SystemData: &armmonitor.DataCollectionEndpointResourceSystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T12:34:56.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armmonitor.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T12:34:56.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armmonitor.CreatedByTypeUser),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("A"),
				"tag2": to.Ptr("B"),
				"tag3": to.Ptr("C"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataCollectionEndpointResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataCollectionEndpointResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionEndpointsUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataCollectionEndpoints_Delete(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionEndpointsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete data collection endpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDataCollectionEndpointsClient("703362b3-f278-4e4b-9179-c76eaf41ffc2", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myCollectionEndpoint",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionEndpointsDelete.json: %v", err)
	}
}

func TestDataCollectionRuleAssociations_ListByResource(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRuleAssociationsListByResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List associations for specified resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDataCollectionRuleAssociationsClient("<subscription-id>", cred, &options)
	pager := client.ListByResource("subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVm",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRuleAssociationsListByResource.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.DataCollectionRuleAssociationProxyOnlyResourceListResult{
			Value: []*armmonitor.DataCollectionRuleAssociationProxyOnlyResource{
				{
					Name: to.Ptr("myRuleAssociation"),
					Type: to.Ptr("Microsoft.Insights/dataCollectionRuleAssociations"),
					Etag: to.Ptr("070057da-0000-0000-0000-5ba70d6c0000"),
					ID:   to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVm/providers/Microsoft.Insights/dataCollectionRuleAssociations/myRuleAssociation"),
					Properties: &armmonitor.DataCollectionRuleAssociationProxyOnlyResourceProperties{
						DataCollectionRuleID: to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Insights/dataCollectionRules/myCollectionRule"),
						ProvisioningState:    to.Ptr(armmonitor.KnownDataCollectionRuleAssociationProvisioningStateSucceeded),
					},
					SystemData: &armmonitor.DataCollectionRuleAssociationProxyOnlyResourceSystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T12:34:56.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armmonitor.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T12:34:56.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armmonitor.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("herRuleAssociation"),
					Type: to.Ptr("Microsoft.Insights/dataCollectionRuleAssociations"),
					Etag: to.Ptr("3afa167b-3255-432b-b66d-e74a348468af"),
					ID:   to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVm/providers/Microsoft.Insights/dataCollectionRuleAssociations/herRuleAssociation"),
					Properties: &armmonitor.DataCollectionRuleAssociationProxyOnlyResourceProperties{
						DataCollectionRuleID: to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Insights/dataCollectionRules/herCollectionRule"),
						ProvisioningState:    to.Ptr(armmonitor.KnownDataCollectionRuleAssociationProvisioningStateSucceeded),
					},
					SystemData: &armmonitor.DataCollectionRuleAssociationProxyOnlyResourceSystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T12:34:56.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armmonitor.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T12:34:56.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armmonitor.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("myEndpointAssociation"),
					Type: to.Ptr("Microsoft.Insights/dataCollectionRuleAssociations"),
					Etag: to.Ptr("562d96b1-29e9-4250-b2fd-8bebfdf77a9d"),
					ID:   to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVm/providers/Microsoft.Insights/dataCollectionRuleAssociations/myEndpointAssociation"),
					Properties: &armmonitor.DataCollectionRuleAssociationProxyOnlyResourceProperties{
						DataCollectionEndpointID: to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Insights/dataCollectionEndpoints/myCollectionEndpoint"),
						ProvisioningState:        to.Ptr(armmonitor.KnownDataCollectionRuleAssociationProvisioningStateSucceeded),
					},
					SystemData: &armmonitor.DataCollectionRuleAssociationProxyOnlyResourceSystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T12:34:56.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armmonitor.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T12:34:56.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armmonitor.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataCollectionRuleAssociationProxyOnlyResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataCollectionRuleAssociationProxyOnlyResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRuleAssociationsListByResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataCollectionRuleAssociations_ListByRule(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRuleAssociationsListByRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List associations for specified data collection rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDataCollectionRuleAssociationsClient("703362b3-f278-4e4b-9179-c76eaf41ffc2", cred, &options)
	pager := client.ListByRule("myResourceGroup",
		"myCollectionRule",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRuleAssociationsListByRule.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.DataCollectionRuleAssociationProxyOnlyResourceListResult{
			Value: []*armmonitor.DataCollectionRuleAssociationProxyOnlyResource{
				{
					Name: to.Ptr("myAssociation"),
					Type: to.Ptr("Microsoft.Insights/dataCollectionRuleAssociations"),
					Etag: to.Ptr("070057da-0000-0000-0000-5ba70d6c0000"),
					ID:   to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVm/providers/Microsoft.Insights/dataCollectionRuleAssociations/myAssociation"),
					Properties: &armmonitor.DataCollectionRuleAssociationProxyOnlyResourceProperties{
						DataCollectionRuleID: to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Insights/dataCollectionRules/myCollectionRule"),
						ProvisioningState:    to.Ptr(armmonitor.KnownDataCollectionRuleAssociationProvisioningStateSucceeded),
					},
					SystemData: &armmonitor.DataCollectionRuleAssociationProxyOnlyResourceSystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T12:34:56.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armmonitor.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T12:34:56.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armmonitor.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataCollectionRuleAssociationProxyOnlyResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataCollectionRuleAssociationProxyOnlyResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRuleAssociationsListByRule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataCollectionRuleAssociations_Get(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRuleAssociationsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get association"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDataCollectionRuleAssociationsClient("<subscription-id>", cred, &options)
	res, err := client.Get(ctx,
		"subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVm",
		"myAssociation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRuleAssociationsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.DataCollectionRuleAssociationProxyOnlyResource{
			Name: to.Ptr("myAssociation"),
			Type: to.Ptr("Microsoft.Insights/dataCollectionRuleAssociations"),
			Etag: to.Ptr("070057da-0000-0000-0000-5ba70d6c0000"),
			ID:   to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVm/providers/Microsoft.Insights/dataCollectionRuleAssociations/myAssociation"),
			Properties: &armmonitor.DataCollectionRuleAssociationProxyOnlyResourceProperties{
				DataCollectionRuleID: to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Insights/dataCollectionRules/myCollectionRule"),
				ProvisioningState:    to.Ptr(armmonitor.KnownDataCollectionRuleAssociationProvisioningStateSucceeded),
			},
			SystemData: &armmonitor.DataCollectionRuleAssociationProxyOnlyResourceSystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T12:34:56.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armmonitor.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T12:34:56.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armmonitor.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataCollectionRuleAssociationProxyOnlyResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataCollectionRuleAssociationProxyOnlyResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRuleAssociationsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataCollectionRuleAssociations_Create(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRuleAssociationsCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update association"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDataCollectionRuleAssociationsClient("<subscription-id>", cred, &options)
	res, err := client.Create(ctx,
		"subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVm",
		"myAssociation",
		&armmonitor.DataCollectionRuleAssociationsClientCreateOptions{Body: &armmonitor.DataCollectionRuleAssociationProxyOnlyResource{
			Properties: &armmonitor.DataCollectionRuleAssociationProxyOnlyResourceProperties{
				DataCollectionRuleID: to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Insights/dataCollectionRules/myCollectionRule"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRuleAssociationsCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.DataCollectionRuleAssociationProxyOnlyResource{
			Name: to.Ptr("myAssociation"),
			Type: to.Ptr("Microsoft.Insights/dataCollectionRuleAssociations"),
			Etag: to.Ptr("070057da-0000-0000-0000-5ba70d6c0000"),
			ID:   to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVm/providers/Microsoft.Insights/dataCollectionRuleAssociations/myAssociation"),
			Properties: &armmonitor.DataCollectionRuleAssociationProxyOnlyResourceProperties{
				DataCollectionRuleID: to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Insights/dataCollectionRules/myCollectionRule"),
				ProvisioningState:    to.Ptr(armmonitor.KnownDataCollectionRuleAssociationProvisioningStateSucceeded),
			},
			SystemData: &armmonitor.DataCollectionRuleAssociationProxyOnlyResourceSystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T12:34:56.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armmonitor.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T12:34:56.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armmonitor.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataCollectionRuleAssociationProxyOnlyResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataCollectionRuleAssociationProxyOnlyResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRuleAssociationsCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataCollectionRuleAssociations_Delete(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRuleAssociationsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete association"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDataCollectionRuleAssociationsClient("<subscription-id>", cred, &options)
	_, err := client.Delete(ctx,
		"subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVm",
		"myAssociation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRuleAssociationsDelete.json: %v", err)
	}
}

func TestDataCollectionRules_ListByResourceGroup(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRulesListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List data collection rules by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDataCollectionRulesClient("703362b3-f278-4e4b-9179-c76eaf41ffc2", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRulesListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.DataCollectionRuleResourceListResult{
			Value: []*armmonitor.DataCollectionRuleResource{
				{
					Name:     to.Ptr("myCollectionRule"),
					Type:     to.Ptr("Microsoft.Insights/dataCollectionRules"),
					Etag:     to.Ptr("070057da-0000-0000-0000-5ba70d6c0000"),
					ID:       to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Insights/dataCollectionRules/myCollectionRule"),
					Location: to.Ptr("eastus"),
					Properties: &armmonitor.DataCollectionRuleResourceProperties{
						DataFlows: []*armmonitor.DataFlow{
							{
								Destinations: []*string{
									to.Ptr("centralWorkspace")},
								Streams: []*armmonitor.KnownDataFlowStreams{
									to.Ptr(armmonitor.KnownDataFlowStreamsMicrosoftPerf),
									to.Ptr(armmonitor.KnownDataFlowStreamsMicrosoftSyslog),
									to.Ptr(armmonitor.KnownDataFlowStreamsMicrosoftWindowsEvent)},
							}},
						DataSources: &armmonitor.DataCollectionRuleDataSources{
							PerformanceCounters: []*armmonitor.PerfCounterDataSource{
								{
									Name: to.Ptr("cloudTeamCoreCounters"),
									CounterSpecifiers: []*string{
										to.Ptr("\\Processor(_Total)\\% Processor Time"),
										to.Ptr("\\Memory\\Committed Bytes"),
										to.Ptr("\\LogicalDisk(_Total)\\Free Megabytes"),
										to.Ptr("\\PhysicalDisk(_Total)\\Avg. Disk Queue Length")},
									SamplingFrequencyInSeconds: to.Ptr[int32](15),
									Streams: []*armmonitor.KnownPerfCounterDataSourceStreams{
										to.Ptr(armmonitor.KnownPerfCounterDataSourceStreamsMicrosoftPerf)},
								},
								{
									Name: to.Ptr("appTeamExtraCounters"),
									CounterSpecifiers: []*string{
										to.Ptr("\\Process(_Total)\\Thread Count")},
									SamplingFrequencyInSeconds: to.Ptr[int32](30),
									Streams: []*armmonitor.KnownPerfCounterDataSourceStreams{
										to.Ptr(armmonitor.KnownPerfCounterDataSourceStreamsMicrosoftPerf)},
								}},
							Syslog: []*armmonitor.SyslogDataSource{
								{
									Name: to.Ptr("cronSyslog"),
									FacilityNames: []*armmonitor.KnownSyslogDataSourceFacilityNames{
										to.Ptr(armmonitor.KnownSyslogDataSourceFacilityNamesCron)},
									LogLevels: []*armmonitor.KnownSyslogDataSourceLogLevels{
										to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsDebug),
										to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsCritical),
										to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsEmergency)},
									Streams: []*armmonitor.KnownSyslogDataSourceStreams{
										to.Ptr(armmonitor.KnownSyslogDataSourceStreamsMicrosoftSyslog)},
								},
								{
									Name: to.Ptr("syslogBase"),
									FacilityNames: []*armmonitor.KnownSyslogDataSourceFacilityNames{
										to.Ptr(armmonitor.KnownSyslogDataSourceFacilityNamesSyslog)},
									LogLevels: []*armmonitor.KnownSyslogDataSourceLogLevels{
										to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsAlert),
										to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsCritical),
										to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsEmergency)},
									Streams: []*armmonitor.KnownSyslogDataSourceStreams{
										to.Ptr(armmonitor.KnownSyslogDataSourceStreamsMicrosoftSyslog)},
								}},
							WindowsEventLogs: []*armmonitor.WindowsEventLogDataSource{
								{
									Name: to.Ptr("cloudSecurityTeamEvents"),
									Streams: []*armmonitor.KnownWindowsEventLogDataSourceStreams{
										to.Ptr(armmonitor.KnownWindowsEventLogDataSourceStreamsMicrosoftWindowsEvent)},
									XPathQueries: []*string{
										to.Ptr("Security!")},
								},
								{
									Name: to.Ptr("appTeam1AppEvents"),
									Streams: []*armmonitor.KnownWindowsEventLogDataSourceStreams{
										to.Ptr(armmonitor.KnownWindowsEventLogDataSourceStreamsMicrosoftWindowsEvent)},
									XPathQueries: []*string{
										to.Ptr("System![System[(Level = 1 or Level = 2 or Level = 3)]]"),
										to.Ptr("Application!*[System[(Level = 1 or Level = 2 or Level = 3)]]")},
								}},
						},
						Destinations: &armmonitor.DataCollectionRuleDestinations{
							LogAnalytics: []*armmonitor.LogAnalyticsDestination{
								{
									Name:                to.Ptr("centralWorkspace"),
									WorkspaceID:         to.Ptr("9ba8bc53-bd36-4156-8667-e983e7ae0e4f"),
									WorkspaceResourceID: to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.OperationalInsights/workspaces/centralTeamWorkspace"),
								}},
						},
						ImmutableID: to.Ptr("dcr-b74e0d383fc9415abaa584ec41adece3"),
					},
					SystemData: &armmonitor.DataCollectionRuleResourceSystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T12:34:56.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armmonitor.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T12:34:56.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armmonitor.CreatedByTypeUser),
					},
					Tags: map[string]*string{
						"tag1": to.Ptr("A"),
						"tag2": to.Ptr("B"),
					},
				},
				{
					Name:     to.Ptr("herCollectionRule"),
					Type:     to.Ptr("Microsoft.Insights/dataCollectionRules"),
					Etag:     to.Ptr("3afa167b-3255-432b-b66d-e74a348468af"),
					ID:       to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Insights/dataCollectionRules/herCollectionRule"),
					Location: to.Ptr("westus"),
					Properties: &armmonitor.DataCollectionRuleResourceProperties{
						DataFlows: []*armmonitor.DataFlow{
							{
								Destinations: []*string{
									to.Ptr("herWorkspace")},
								Streams: []*armmonitor.KnownDataFlowStreams{
									to.Ptr(armmonitor.KnownDataFlowStreamsMicrosoftPerf),
									to.Ptr(armmonitor.KnownDataFlowStreamsMicrosoftWindowsEvent)},
							}},
						DataSources: &armmonitor.DataCollectionRuleDataSources{
							PerformanceCounters: []*armmonitor.PerfCounterDataSource{
								{
									Name: to.Ptr("herPerfCounters"),
									CounterSpecifiers: []*string{
										to.Ptr("\\Processor(_Total)\\% Processor Time"),
										to.Ptr("\\LogicalDisk(_Total)\\Free Megabytes"),
										to.Ptr("\\PhysicalDisk(_Total)\\Avg. Disk Queue Length")},
									SamplingFrequencyInSeconds: to.Ptr[int32](30),
									Streams: []*armmonitor.KnownPerfCounterDataSourceStreams{
										to.Ptr(armmonitor.KnownPerfCounterDataSourceStreamsMicrosoftPerf)},
								}},
							WindowsEventLogs: []*armmonitor.WindowsEventLogDataSource{
								{
									Name: to.Ptr("herWindowsEventLogs"),
									Streams: []*armmonitor.KnownWindowsEventLogDataSourceStreams{
										to.Ptr(armmonitor.KnownWindowsEventLogDataSourceStreamsMicrosoftWindowsEvent)},
									XPathQueries: []*string{
										to.Ptr("Security!*"),
										to.Ptr("System!*[System[(Level = 1 or Level = 2 or Level = 3)]]"),
										to.Ptr("Application!*[System[(Level = 1 or Level = 2 or Level = 3)]]")},
								}},
						},
						Destinations: &armmonitor.DataCollectionRuleDestinations{
							LogAnalytics: []*armmonitor.LogAnalyticsDestination{
								{
									Name:                to.Ptr("herWorkspace"),
									WorkspaceID:         to.Ptr("c49b982a-c4f7-40c4-bd13-d6588f1b4015"),
									WorkspaceResourceID: to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/herResourceGroup/providers/Microsoft.OperationalInsights/workspaces/herTeamWorkspace"),
								}},
						},
						ImmutableID:       to.Ptr("dcr-ca1e6d9dad844b2c94e7961c42af917a"),
						ProvisioningState: to.Ptr(armmonitor.KnownDataCollectionRuleProvisioningStateSucceeded),
					},
					SystemData: &armmonitor.DataCollectionRuleResourceSystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T12:34:56.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armmonitor.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T12:34:56.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armmonitor.CreatedByTypeUser),
					},
					Tags: map[string]*string{
						"tag1": to.Ptr("C"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataCollectionRuleResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataCollectionRuleResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRulesListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataCollectionRules_ListBySubscription(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRulesListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List data collection rules by subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDataCollectionRulesClient("703362b3-f278-4e4b-9179-c76eaf41ffc2", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRulesListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmonitor.DataCollectionRuleResourceListResult{
			Value: []*armmonitor.DataCollectionRuleResource{
				{
					Name:     to.Ptr("myCollectionRule"),
					Type:     to.Ptr("Microsoft.Insights/dataCollectionRules"),
					Etag:     to.Ptr("070057da-0000-0000-0000-5ba70d6c0000"),
					ID:       to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Insights/dataCollectionRules/myCollectionRule"),
					Location: to.Ptr("eastus"),
					Properties: &armmonitor.DataCollectionRuleResourceProperties{
						DataFlows: []*armmonitor.DataFlow{
							{
								Destinations: []*string{
									to.Ptr("centralWorkspace")},
								Streams: []*armmonitor.KnownDataFlowStreams{
									to.Ptr(armmonitor.KnownDataFlowStreamsMicrosoftPerf),
									to.Ptr(armmonitor.KnownDataFlowStreamsMicrosoftSyslog),
									to.Ptr(armmonitor.KnownDataFlowStreamsMicrosoftWindowsEvent)},
							}},
						DataSources: &armmonitor.DataCollectionRuleDataSources{
							PerformanceCounters: []*armmonitor.PerfCounterDataSource{
								{
									Name: to.Ptr("cloudTeamCoreCounters"),
									CounterSpecifiers: []*string{
										to.Ptr("\\Processor(_Total)\\% Processor Time"),
										to.Ptr("\\Memory\\Committed Bytes"),
										to.Ptr("\\LogicalDisk(_Total)\\Free Megabytes"),
										to.Ptr("\\PhysicalDisk(_Total)\\Avg. Disk Queue Length")},
									SamplingFrequencyInSeconds: to.Ptr[int32](15),
									Streams: []*armmonitor.KnownPerfCounterDataSourceStreams{
										to.Ptr(armmonitor.KnownPerfCounterDataSourceStreamsMicrosoftPerf)},
								},
								{
									Name: to.Ptr("appTeamExtraCounters"),
									CounterSpecifiers: []*string{
										to.Ptr("\\Process(_Total)\\Thread Count")},
									SamplingFrequencyInSeconds: to.Ptr[int32](30),
									Streams: []*armmonitor.KnownPerfCounterDataSourceStreams{
										to.Ptr(armmonitor.KnownPerfCounterDataSourceStreamsMicrosoftPerf)},
								}},
							Syslog: []*armmonitor.SyslogDataSource{
								{
									Name: to.Ptr("cronSyslog"),
									FacilityNames: []*armmonitor.KnownSyslogDataSourceFacilityNames{
										to.Ptr(armmonitor.KnownSyslogDataSourceFacilityNamesCron)},
									LogLevels: []*armmonitor.KnownSyslogDataSourceLogLevels{
										to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsDebug),
										to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsCritical),
										to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsEmergency)},
									Streams: []*armmonitor.KnownSyslogDataSourceStreams{
										to.Ptr(armmonitor.KnownSyslogDataSourceStreamsMicrosoftSyslog)},
								},
								{
									Name: to.Ptr("syslogBase"),
									FacilityNames: []*armmonitor.KnownSyslogDataSourceFacilityNames{
										to.Ptr(armmonitor.KnownSyslogDataSourceFacilityNamesSyslog)},
									LogLevels: []*armmonitor.KnownSyslogDataSourceLogLevels{
										to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsAlert),
										to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsCritical),
										to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsEmergency)},
									Streams: []*armmonitor.KnownSyslogDataSourceStreams{
										to.Ptr(armmonitor.KnownSyslogDataSourceStreamsMicrosoftSyslog)},
								}},
							WindowsEventLogs: []*armmonitor.WindowsEventLogDataSource{
								{
									Name: to.Ptr("cloudSecurityTeamEvents"),
									Streams: []*armmonitor.KnownWindowsEventLogDataSourceStreams{
										to.Ptr(armmonitor.KnownWindowsEventLogDataSourceStreamsMicrosoftWindowsEvent)},
									XPathQueries: []*string{
										to.Ptr("Security!")},
								},
								{
									Name: to.Ptr("appTeam1AppEvents"),
									Streams: []*armmonitor.KnownWindowsEventLogDataSourceStreams{
										to.Ptr(armmonitor.KnownWindowsEventLogDataSourceStreamsMicrosoftWindowsEvent)},
									XPathQueries: []*string{
										to.Ptr("System![System[(Level = 1 or Level = 2 or Level = 3)]]"),
										to.Ptr("Application!*[System[(Level = 1 or Level = 2 or Level = 3)]]")},
								}},
						},
						Destinations: &armmonitor.DataCollectionRuleDestinations{
							LogAnalytics: []*armmonitor.LogAnalyticsDestination{
								{
									Name:                to.Ptr("centralWorkspace"),
									WorkspaceID:         to.Ptr("9ba8bc53-bd36-4156-8667-e983e7ae0e4f"),
									WorkspaceResourceID: to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.OperationalInsights/workspaces/centralTeamWorkspace"),
								}},
						},
						ImmutableID: to.Ptr("dcr-b74e0d383fc9415abaa584ec41adece3"),
					},
					SystemData: &armmonitor.DataCollectionRuleResourceSystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T12:34:56.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armmonitor.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T12:34:56.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armmonitor.CreatedByTypeUser),
					},
					Tags: map[string]*string{
						"tag1": to.Ptr("A"),
						"tag2": to.Ptr("B"),
					},
				},
				{
					Name:     to.Ptr("herCollectionRule"),
					Type:     to.Ptr("Microsoft.Insights/dataCollectionRules"),
					Etag:     to.Ptr("3afa167b-3255-432b-b66d-e74a348468af"),
					ID:       to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/herResourceGroup/providers/Microsoft.Insights/dataCollectionRules/herCollectionRule"),
					Location: to.Ptr("westus"),
					Properties: &armmonitor.DataCollectionRuleResourceProperties{
						DataFlows: []*armmonitor.DataFlow{
							{
								Destinations: []*string{
									to.Ptr("herWorkspace")},
								Streams: []*armmonitor.KnownDataFlowStreams{
									to.Ptr(armmonitor.KnownDataFlowStreamsMicrosoftPerf),
									to.Ptr(armmonitor.KnownDataFlowStreamsMicrosoftWindowsEvent)},
							}},
						DataSources: &armmonitor.DataCollectionRuleDataSources{
							PerformanceCounters: []*armmonitor.PerfCounterDataSource{
								{
									Name: to.Ptr("herPerfCounters"),
									CounterSpecifiers: []*string{
										to.Ptr("\\Processor(_Total)\\% Processor Time"),
										to.Ptr("\\LogicalDisk(_Total)\\Free Megabytes"),
										to.Ptr("\\PhysicalDisk(_Total)\\Avg. Disk Queue Length")},
									SamplingFrequencyInSeconds: to.Ptr[int32](30),
									Streams: []*armmonitor.KnownPerfCounterDataSourceStreams{
										to.Ptr(armmonitor.KnownPerfCounterDataSourceStreamsMicrosoftPerf)},
								}},
							WindowsEventLogs: []*armmonitor.WindowsEventLogDataSource{
								{
									Name: to.Ptr("herWindowsEventLogs"),
									Streams: []*armmonitor.KnownWindowsEventLogDataSourceStreams{
										to.Ptr(armmonitor.KnownWindowsEventLogDataSourceStreamsMicrosoftWindowsEvent)},
									XPathQueries: []*string{
										to.Ptr("Security!*"),
										to.Ptr("System!*[System[(Level = 1 or Level = 2 or Level = 3)]]"),
										to.Ptr("Application!*[System[(Level = 1 or Level = 2 or Level = 3)]]")},
								}},
						},
						Destinations: &armmonitor.DataCollectionRuleDestinations{
							LogAnalytics: []*armmonitor.LogAnalyticsDestination{
								{
									Name:                to.Ptr("herWorkspace"),
									WorkspaceID:         to.Ptr("c49b982a-c4f7-40c4-bd13-d6588f1b4015"),
									WorkspaceResourceID: to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/herResourceGroup/providers/Microsoft.OperationalInsights/workspaces/herTeamWorkspace"),
								}},
						},
						ImmutableID:       to.Ptr("dcr-ca1e6d9dad844b2c94e7961c42af917a"),
						ProvisioningState: to.Ptr(armmonitor.KnownDataCollectionRuleProvisioningStateSucceeded),
					},
					SystemData: &armmonitor.DataCollectionRuleResourceSystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T12:34:56.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armmonitor.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T12:34:56.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armmonitor.CreatedByTypeUser),
					},
					Tags: map[string]*string{
						"tag1": to.Ptr("C"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataCollectionRuleResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataCollectionRuleResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRulesListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataCollectionRules_Get(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRulesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get data collection rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDataCollectionRulesClient("703362b3-f278-4e4b-9179-c76eaf41ffc2", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myCollectionRule",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRulesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.DataCollectionRuleResource{
			Name:     to.Ptr("myCollectionRule"),
			Type:     to.Ptr("Microsoft.Insights/dataCollectionRules"),
			Etag:     to.Ptr("070057da-0000-0000-0000-5ba70d6c0000"),
			ID:       to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Insights/dataCollectionRules/myCollectionRule"),
			Location: to.Ptr("eastus"),
			Properties: &armmonitor.DataCollectionRuleResourceProperties{
				DataFlows: []*armmonitor.DataFlow{
					{
						Destinations: []*string{
							to.Ptr("centralWorkspace")},
						Streams: []*armmonitor.KnownDataFlowStreams{
							to.Ptr(armmonitor.KnownDataFlowStreamsMicrosoftPerf),
							to.Ptr(armmonitor.KnownDataFlowStreamsMicrosoftSyslog),
							to.Ptr(armmonitor.KnownDataFlowStreamsMicrosoftWindowsEvent)},
					}},
				DataSources: &armmonitor.DataCollectionRuleDataSources{
					PerformanceCounters: []*armmonitor.PerfCounterDataSource{
						{
							Name: to.Ptr("cloudTeamCoreCounters"),
							CounterSpecifiers: []*string{
								to.Ptr("\\Processor(_Total)\\% Processor Time"),
								to.Ptr("\\Memory\\Committed Bytes"),
								to.Ptr("\\LogicalDisk(_Total)\\Free Megabytes"),
								to.Ptr("\\PhysicalDisk(_Total)\\Avg. Disk Queue Length")},
							SamplingFrequencyInSeconds: to.Ptr[int32](15),
							Streams: []*armmonitor.KnownPerfCounterDataSourceStreams{
								to.Ptr(armmonitor.KnownPerfCounterDataSourceStreamsMicrosoftPerf)},
						},
						{
							Name: to.Ptr("appTeamExtraCounters"),
							CounterSpecifiers: []*string{
								to.Ptr("\\Process(_Total)\\Thread Count")},
							SamplingFrequencyInSeconds: to.Ptr[int32](30),
							Streams: []*armmonitor.KnownPerfCounterDataSourceStreams{
								to.Ptr(armmonitor.KnownPerfCounterDataSourceStreamsMicrosoftPerf)},
						}},
					Syslog: []*armmonitor.SyslogDataSource{
						{
							Name: to.Ptr("cronSyslog"),
							FacilityNames: []*armmonitor.KnownSyslogDataSourceFacilityNames{
								to.Ptr(armmonitor.KnownSyslogDataSourceFacilityNamesCron)},
							LogLevels: []*armmonitor.KnownSyslogDataSourceLogLevels{
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsDebug),
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsCritical),
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsEmergency)},
							Streams: []*armmonitor.KnownSyslogDataSourceStreams{
								to.Ptr(armmonitor.KnownSyslogDataSourceStreamsMicrosoftSyslog)},
						},
						{
							Name: to.Ptr("syslogBase"),
							FacilityNames: []*armmonitor.KnownSyslogDataSourceFacilityNames{
								to.Ptr(armmonitor.KnownSyslogDataSourceFacilityNamesSyslog)},
							LogLevels: []*armmonitor.KnownSyslogDataSourceLogLevels{
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsAlert),
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsCritical),
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsEmergency)},
							Streams: []*armmonitor.KnownSyslogDataSourceStreams{
								to.Ptr(armmonitor.KnownSyslogDataSourceStreamsMicrosoftSyslog)},
						}},
					WindowsEventLogs: []*armmonitor.WindowsEventLogDataSource{
						{
							Name: to.Ptr("cloudSecurityTeamEvents"),
							Streams: []*armmonitor.KnownWindowsEventLogDataSourceStreams{
								to.Ptr(armmonitor.KnownWindowsEventLogDataSourceStreamsMicrosoftWindowsEvent)},
							XPathQueries: []*string{
								to.Ptr("Security!")},
						},
						{
							Name: to.Ptr("appTeam1AppEvents"),
							Streams: []*armmonitor.KnownWindowsEventLogDataSourceStreams{
								to.Ptr(armmonitor.KnownWindowsEventLogDataSourceStreamsMicrosoftWindowsEvent)},
							XPathQueries: []*string{
								to.Ptr("System![System[(Level = 1 or Level = 2 or Level = 3)]]"),
								to.Ptr("Application!*[System[(Level = 1 or Level = 2 or Level = 3)]]")},
						}},
				},
				Destinations: &armmonitor.DataCollectionRuleDestinations{
					LogAnalytics: []*armmonitor.LogAnalyticsDestination{
						{
							Name:                to.Ptr("centralWorkspace"),
							WorkspaceID:         to.Ptr("9ba8bc53-bd36-4156-8667-e983e7ae0e4f"),
							WorkspaceResourceID: to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.OperationalInsights/workspaces/centralTeamWorkspace"),
						}},
				},
				ImmutableID: to.Ptr("dcr-b74e0d383fc9415abaa584ec41adece3"),
			},
			SystemData: &armmonitor.DataCollectionRuleResourceSystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T12:34:56.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armmonitor.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T12:34:56.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armmonitor.CreatedByTypeUser),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("A"),
				"tag2": to.Ptr("B"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataCollectionRuleResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataCollectionRuleResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRulesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataCollectionRules_Create(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRulesCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update data collection rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDataCollectionRulesClient("703362b3-f278-4e4b-9179-c76eaf41ffc2", cred, &options)
	res, err := client.Create(ctx,
		"myResourceGroup",
		"myCollectionRule",
		&armmonitor.DataCollectionRulesClientCreateOptions{Body: &armmonitor.DataCollectionRuleResource{
			Location: to.Ptr("eastus"),
			Properties: &armmonitor.DataCollectionRuleResourceProperties{
				DataFlows: []*armmonitor.DataFlow{
					{
						Destinations: []*string{
							to.Ptr("centralWorkspace")},
						Streams: []*armmonitor.KnownDataFlowStreams{
							to.Ptr(armmonitor.KnownDataFlowStreamsMicrosoftPerf),
							to.Ptr(armmonitor.KnownDataFlowStreamsMicrosoftSyslog),
							to.Ptr(armmonitor.KnownDataFlowStreamsMicrosoftWindowsEvent)},
					}},
				DataSources: &armmonitor.DataCollectionRuleDataSources{
					PerformanceCounters: []*armmonitor.PerfCounterDataSource{
						{
							Name: to.Ptr("cloudTeamCoreCounters"),
							CounterSpecifiers: []*string{
								to.Ptr("\\Processor(_Total)\\% Processor Time"),
								to.Ptr("\\Memory\\Committed Bytes"),
								to.Ptr("\\LogicalDisk(_Total)\\Free Megabytes"),
								to.Ptr("\\PhysicalDisk(_Total)\\Avg. Disk Queue Length")},
							SamplingFrequencyInSeconds: to.Ptr[int32](15),
							Streams: []*armmonitor.KnownPerfCounterDataSourceStreams{
								to.Ptr(armmonitor.KnownPerfCounterDataSourceStreamsMicrosoftPerf)},
						},
						{
							Name: to.Ptr("appTeamExtraCounters"),
							CounterSpecifiers: []*string{
								to.Ptr("\\Process(_Total)\\Thread Count")},
							SamplingFrequencyInSeconds: to.Ptr[int32](30),
							Streams: []*armmonitor.KnownPerfCounterDataSourceStreams{
								to.Ptr(armmonitor.KnownPerfCounterDataSourceStreamsMicrosoftPerf)},
						}},
					Syslog: []*armmonitor.SyslogDataSource{
						{
							Name: to.Ptr("cronSyslog"),
							FacilityNames: []*armmonitor.KnownSyslogDataSourceFacilityNames{
								to.Ptr(armmonitor.KnownSyslogDataSourceFacilityNamesCron)},
							LogLevels: []*armmonitor.KnownSyslogDataSourceLogLevels{
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsDebug),
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsCritical),
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsEmergency)},
							Streams: []*armmonitor.KnownSyslogDataSourceStreams{
								to.Ptr(armmonitor.KnownSyslogDataSourceStreamsMicrosoftSyslog)},
						},
						{
							Name: to.Ptr("syslogBase"),
							FacilityNames: []*armmonitor.KnownSyslogDataSourceFacilityNames{
								to.Ptr(armmonitor.KnownSyslogDataSourceFacilityNamesSyslog)},
							LogLevels: []*armmonitor.KnownSyslogDataSourceLogLevels{
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsAlert),
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsCritical),
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsEmergency)},
							Streams: []*armmonitor.KnownSyslogDataSourceStreams{
								to.Ptr(armmonitor.KnownSyslogDataSourceStreamsMicrosoftSyslog)},
						}},
					WindowsEventLogs: []*armmonitor.WindowsEventLogDataSource{
						{
							Name: to.Ptr("cloudSecurityTeamEvents"),
							Streams: []*armmonitor.KnownWindowsEventLogDataSourceStreams{
								to.Ptr(armmonitor.KnownWindowsEventLogDataSourceStreamsMicrosoftWindowsEvent)},
							XPathQueries: []*string{
								to.Ptr("Security!")},
						},
						{
							Name: to.Ptr("appTeam1AppEvents"),
							Streams: []*armmonitor.KnownWindowsEventLogDataSourceStreams{
								to.Ptr(armmonitor.KnownWindowsEventLogDataSourceStreamsMicrosoftWindowsEvent)},
							XPathQueries: []*string{
								to.Ptr("System![System[(Level = 1 or Level = 2 or Level = 3)]]"),
								to.Ptr("Application!*[System[(Level = 1 or Level = 2 or Level = 3)]]")},
						}},
				},
				Destinations: &armmonitor.DataCollectionRuleDestinations{
					LogAnalytics: []*armmonitor.LogAnalyticsDestination{
						{
							Name:                to.Ptr("centralWorkspace"),
							WorkspaceResourceID: to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.OperationalInsights/workspaces/centralTeamWorkspace"),
						}},
				},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRulesCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.DataCollectionRuleResource{
			Name:     to.Ptr("myCollectionRule"),
			Type:     to.Ptr("Microsoft.Insights/dataCollectionRules"),
			Etag:     to.Ptr("070057da-0000-0000-0000-5ba70d6c0000"),
			ID:       to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Insights/dataCollectionRules/myCollectionRule"),
			Location: to.Ptr("eastus"),
			Properties: &armmonitor.DataCollectionRuleResourceProperties{
				DataFlows: []*armmonitor.DataFlow{
					{
						Destinations: []*string{
							to.Ptr("centralWorkspace")},
						Streams: []*armmonitor.KnownDataFlowStreams{
							to.Ptr(armmonitor.KnownDataFlowStreamsMicrosoftPerf),
							to.Ptr(armmonitor.KnownDataFlowStreamsMicrosoftSyslog),
							to.Ptr(armmonitor.KnownDataFlowStreamsMicrosoftWindowsEvent)},
					}},
				DataSources: &armmonitor.DataCollectionRuleDataSources{
					PerformanceCounters: []*armmonitor.PerfCounterDataSource{
						{
							Name: to.Ptr("cloudTeamCoreCounters"),
							CounterSpecifiers: []*string{
								to.Ptr("\\Processor(_Total)\\% Processor Time"),
								to.Ptr("\\Memory\\Committed Bytes"),
								to.Ptr("\\LogicalDisk(_Total)\\Free Megabytes"),
								to.Ptr("\\PhysicalDisk(_Total)\\Avg. Disk Queue Length")},
							SamplingFrequencyInSeconds: to.Ptr[int32](15),
							Streams: []*armmonitor.KnownPerfCounterDataSourceStreams{
								to.Ptr(armmonitor.KnownPerfCounterDataSourceStreamsMicrosoftPerf)},
						},
						{
							Name: to.Ptr("appTeamExtraCounters"),
							CounterSpecifiers: []*string{
								to.Ptr("\\Process(_Total)\\Thread Count")},
							SamplingFrequencyInSeconds: to.Ptr[int32](30),
							Streams: []*armmonitor.KnownPerfCounterDataSourceStreams{
								to.Ptr(armmonitor.KnownPerfCounterDataSourceStreamsMicrosoftPerf)},
						}},
					Syslog: []*armmonitor.SyslogDataSource{
						{
							Name: to.Ptr("cronSyslog"),
							FacilityNames: []*armmonitor.KnownSyslogDataSourceFacilityNames{
								to.Ptr(armmonitor.KnownSyslogDataSourceFacilityNamesCron)},
							LogLevels: []*armmonitor.KnownSyslogDataSourceLogLevels{
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsDebug),
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsCritical),
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsEmergency)},
							Streams: []*armmonitor.KnownSyslogDataSourceStreams{
								to.Ptr(armmonitor.KnownSyslogDataSourceStreamsMicrosoftSyslog)},
						},
						{
							Name: to.Ptr("syslogBase"),
							FacilityNames: []*armmonitor.KnownSyslogDataSourceFacilityNames{
								to.Ptr(armmonitor.KnownSyslogDataSourceFacilityNamesSyslog)},
							LogLevels: []*armmonitor.KnownSyslogDataSourceLogLevels{
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsAlert),
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsCritical),
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsEmergency)},
							Streams: []*armmonitor.KnownSyslogDataSourceStreams{
								to.Ptr(armmonitor.KnownSyslogDataSourceStreamsMicrosoftSyslog)},
						}},
					WindowsEventLogs: []*armmonitor.WindowsEventLogDataSource{
						{
							Name: to.Ptr("cloudSecurityTeamEvents"),
							Streams: []*armmonitor.KnownWindowsEventLogDataSourceStreams{
								to.Ptr(armmonitor.KnownWindowsEventLogDataSourceStreamsMicrosoftWindowsEvent)},
							XPathQueries: []*string{
								to.Ptr("Security!")},
						},
						{
							Name: to.Ptr("appTeam1AppEvents"),
							Streams: []*armmonitor.KnownWindowsEventLogDataSourceStreams{
								to.Ptr(armmonitor.KnownWindowsEventLogDataSourceStreamsMicrosoftWindowsEvent)},
							XPathQueries: []*string{
								to.Ptr("System![System[(Level = 1 or Level = 2 or Level = 3)]]"),
								to.Ptr("Application!*[System[(Level = 1 or Level = 2 or Level = 3)]]")},
						}},
				},
				Destinations: &armmonitor.DataCollectionRuleDestinations{
					LogAnalytics: []*armmonitor.LogAnalyticsDestination{
						{
							Name:                to.Ptr("centralWorkspace"),
							WorkspaceID:         to.Ptr("9ba8bc53-bd36-4156-8667-e983e7ae0e4f"),
							WorkspaceResourceID: to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.OperationalInsights/workspaces/centralTeamWorkspace"),
						}},
				},
				ImmutableID: to.Ptr("dcr-b74e0d383fc9415abaa584ec41adece3"),
			},
			SystemData: &armmonitor.DataCollectionRuleResourceSystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T12:34:56.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armmonitor.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T12:34:56.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armmonitor.CreatedByTypeUser),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("A"),
				"tag2": to.Ptr("B"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataCollectionRuleResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataCollectionRuleResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRulesCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataCollectionRules_Update(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRulesUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update data collection rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDataCollectionRulesClient("703362b3-f278-4e4b-9179-c76eaf41ffc2", cred, &options)
	res, err := client.Update(ctx,
		"myResourceGroup",
		"myCollectionRule",
		&armmonitor.DataCollectionRulesClientUpdateOptions{Body: &armmonitor.ResourceForUpdate{
			Tags: map[string]*string{
				"tag1": to.Ptr("A"),
				"tag2": to.Ptr("B"),
				"tag3": to.Ptr("C"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRulesUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmonitor.DataCollectionRuleResource{
			Name:     to.Ptr("myCollectionRule"),
			Type:     to.Ptr("Microsoft.Insights/dataCollectionRules"),
			Etag:     to.Ptr("070057da-0000-0000-0000-5ba70d6c0000"),
			ID:       to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Insights/dataCollectionRules/myCollectionRule"),
			Location: to.Ptr("eastus"),
			Properties: &armmonitor.DataCollectionRuleResourceProperties{
				DataFlows: []*armmonitor.DataFlow{
					{
						Destinations: []*string{
							to.Ptr("centralWorkspace")},
						Streams: []*armmonitor.KnownDataFlowStreams{
							to.Ptr(armmonitor.KnownDataFlowStreamsMicrosoftPerf),
							to.Ptr(armmonitor.KnownDataFlowStreamsMicrosoftSyslog),
							to.Ptr(armmonitor.KnownDataFlowStreamsMicrosoftWindowsEvent)},
					}},
				DataSources: &armmonitor.DataCollectionRuleDataSources{
					PerformanceCounters: []*armmonitor.PerfCounterDataSource{
						{
							Name: to.Ptr("cloudTeamCoreCounters"),
							CounterSpecifiers: []*string{
								to.Ptr("\\Processor(_Total)\\% Processor Time"),
								to.Ptr("\\Memory\\Committed Bytes"),
								to.Ptr("\\LogicalDisk(_Total)\\Free Megabytes"),
								to.Ptr("\\PhysicalDisk(_Total)\\Avg. Disk Queue Length")},
							SamplingFrequencyInSeconds: to.Ptr[int32](15),
							Streams: []*armmonitor.KnownPerfCounterDataSourceStreams{
								to.Ptr(armmonitor.KnownPerfCounterDataSourceStreamsMicrosoftPerf)},
						},
						{
							Name: to.Ptr("appTeamExtraCounters"),
							CounterSpecifiers: []*string{
								to.Ptr("\\Process(_Total)\\Thread Count")},
							SamplingFrequencyInSeconds: to.Ptr[int32](30),
							Streams: []*armmonitor.KnownPerfCounterDataSourceStreams{
								to.Ptr(armmonitor.KnownPerfCounterDataSourceStreamsMicrosoftPerf)},
						}},
					Syslog: []*armmonitor.SyslogDataSource{
						{
							Name: to.Ptr("cronSyslog"),
							FacilityNames: []*armmonitor.KnownSyslogDataSourceFacilityNames{
								to.Ptr(armmonitor.KnownSyslogDataSourceFacilityNamesCron)},
							LogLevels: []*armmonitor.KnownSyslogDataSourceLogLevels{
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsDebug),
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsCritical),
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsEmergency)},
							Streams: []*armmonitor.KnownSyslogDataSourceStreams{
								to.Ptr(armmonitor.KnownSyslogDataSourceStreamsMicrosoftSyslog)},
						},
						{
							Name: to.Ptr("syslogBase"),
							FacilityNames: []*armmonitor.KnownSyslogDataSourceFacilityNames{
								to.Ptr(armmonitor.KnownSyslogDataSourceFacilityNamesSyslog)},
							LogLevels: []*armmonitor.KnownSyslogDataSourceLogLevels{
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsAlert),
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsCritical),
								to.Ptr(armmonitor.KnownSyslogDataSourceLogLevelsEmergency)},
							Streams: []*armmonitor.KnownSyslogDataSourceStreams{
								to.Ptr(armmonitor.KnownSyslogDataSourceStreamsMicrosoftSyslog)},
						}},
					WindowsEventLogs: []*armmonitor.WindowsEventLogDataSource{
						{
							Name: to.Ptr("cloudSecurityTeamEvents"),
							Streams: []*armmonitor.KnownWindowsEventLogDataSourceStreams{
								to.Ptr(armmonitor.KnownWindowsEventLogDataSourceStreamsMicrosoftWindowsEvent)},
							XPathQueries: []*string{
								to.Ptr("Security!")},
						},
						{
							Name: to.Ptr("appTeam1AppEvents"),
							Streams: []*armmonitor.KnownWindowsEventLogDataSourceStreams{
								to.Ptr(armmonitor.KnownWindowsEventLogDataSourceStreamsMicrosoftWindowsEvent)},
							XPathQueries: []*string{
								to.Ptr("System![System[(Level = 1 or Level = 2 or Level = 3)]]"),
								to.Ptr("Application!*[System[(Level = 1 or Level = 2 or Level = 3)]]")},
						}},
				},
				Destinations: &armmonitor.DataCollectionRuleDestinations{
					LogAnalytics: []*armmonitor.LogAnalyticsDestination{
						{
							Name:                to.Ptr("centralWorkspace"),
							WorkspaceID:         to.Ptr("9ba8bc53-bd36-4156-8667-e983e7ae0e4f"),
							WorkspaceResourceID: to.Ptr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.OperationalInsights/workspaces/centralTeamWorkspace"),
						}},
				},
				ImmutableID: to.Ptr("dcr-b74e0d383fc9415abaa584ec41adece3"),
			},
			SystemData: &armmonitor.DataCollectionRuleResourceSystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T12:34:56.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armmonitor.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T12:34:56.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armmonitor.CreatedByTypeUser),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("A"),
				"tag2": to.Ptr("B"),
				"tag3": to.Ptr("C"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataCollectionRuleResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataCollectionRuleResource)
			t.Fatalf("Mock response is not equal to example response for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRulesUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataCollectionRules_Delete(t *testing.T) {
	// From example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRulesDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete data collection rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmonitor.NewDataCollectionRulesClient("703362b3-f278-4e4b-9179-c76eaf41ffc2", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myCollectionRule",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/monitor/resource-manager/Microsoft.Insights/stable/2021-04-01/examples/DataCollectionRulesDelete.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
