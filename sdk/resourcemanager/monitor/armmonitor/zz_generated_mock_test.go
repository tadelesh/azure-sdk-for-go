//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmonitor

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestAutoscaleSettings_ListByResourceGroup(t *testing.T) {
	// From example List autoscale settings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAutoscaleSettingsClient(con,
		"b67f7fec-69fc-4974-9099-a26bd6ffeda3")
	pager := client.ListByResourceGroup("TestingMetricsScaleSet",
		&AutoscaleSettingsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AutoscaleSettingResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AutoscaleSettingResource.ID should not be nil!")
			}
		}
	}
}

func TestAutoscaleSettings_CreateOrUpdate(t *testing.T) {
	// From example Create or update an autoscale setting
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAutoscaleSettingsClient(con,
		"b67f7fec-69fc-4974-9099-a26bd6ffeda3")
	res, err := client.CreateOrUpdate(ctx,
		"TestingMetricsScaleSet",
		"MySetting",
		AutoscaleSettingResource{
			Resource: Resource{
				Location: to.StringPtr("West US"),
				Tags:     map[string]*string{},
			},
			Properties: &AutoscaleSetting{
				Enabled: to.BoolPtr(true),
				Notifications: []*AutoscaleNotification{
					{
						Email: &EmailNotification{
							CustomEmails: []*string{
								to.StringPtr("gu@ms.com"),
								to.StringPtr("ge@ns.net")},
							SendToSubscriptionAdministrator:    to.BoolPtr(true),
							SendToSubscriptionCoAdministrators: to.BoolPtr(true),
						},
						Operation: to.StringPtr("Scale"),
						Webhooks: []*WebhookNotification{
							{
								Properties: map[string]*string{},
								ServiceURI: to.StringPtr("http://myservice.com"),
							}},
					}},
				Profiles: []*AutoscaleProfile{
					{
						Name: to.StringPtr("adios"),
						Capacity: &ScaleCapacity{
							Default: to.StringPtr("1"),
							Maximum: to.StringPtr("10"),
							Minimum: to.StringPtr("1"),
						},
						FixedDate: &TimeWindow{
							End:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-05T14:30:00Z"); return t }()),
							Start:    to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-05T14:00:00Z"); return t }()),
							TimeZone: to.StringPtr("UTC"),
						},
						Rules: []*ScaleRule{
							{
								MetricTrigger: &MetricTrigger{
									DividePerInstance: to.BoolPtr(false),
									MetricName:        to.StringPtr("Percentage CPU"),
									MetricResourceURI: to.StringPtr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          ComparisonOperationTypeGreaterThan.ToPtr(),
									Statistic:         MetricStatisticTypeAverage.ToPtr(),
									Threshold:         to.Float64Ptr(10),
									TimeAggregation:   TimeAggregationTypeAverage.ToPtr(),
									TimeGrain:         to.StringPtr("PT1M"),
									TimeWindow:        to.StringPtr("PT5M"),
								},
								ScaleAction: &ScaleAction{
									Type:      ScaleTypeChangeCount.ToPtr(),
									Cooldown:  to.StringPtr("PT5M"),
									Direction: ScaleDirectionIncrease.ToPtr(),
									Value:     to.StringPtr("1"),
								},
							},
							{
								MetricTrigger: &MetricTrigger{
									DividePerInstance: to.BoolPtr(false),
									MetricName:        to.StringPtr("Percentage CPU"),
									MetricResourceURI: to.StringPtr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          ComparisonOperationTypeGreaterThan.ToPtr(),
									Statistic:         MetricStatisticTypeAverage.ToPtr(),
									Threshold:         to.Float64Ptr(15),
									TimeAggregation:   TimeAggregationTypeAverage.ToPtr(),
									TimeGrain:         to.StringPtr("PT2M"),
									TimeWindow:        to.StringPtr("PT5M"),
								},
								ScaleAction: &ScaleAction{
									Type:      ScaleTypeChangeCount.ToPtr(),
									Cooldown:  to.StringPtr("PT6M"),
									Direction: ScaleDirectionDecrease.ToPtr(),
									Value:     to.StringPtr("2"),
								},
							}},
					},
					{
						Name: to.StringPtr("saludos"),
						Capacity: &ScaleCapacity{
							Default: to.StringPtr("1"),
							Maximum: to.StringPtr("10"),
							Minimum: to.StringPtr("1"),
						},
						Recurrence: &Recurrence{
							Frequency: RecurrenceFrequencyWeek.ToPtr(),
							Schedule: &RecurrentSchedule{
								Days: []*string{
									to.StringPtr("1")},
								Hours: []*int32{
									to.Int32Ptr(5)},
								Minutes: []*int32{
									to.Int32Ptr(15)},
								TimeZone: to.StringPtr("UTC"),
							},
						},
						Rules: []*ScaleRule{
							{
								MetricTrigger: &MetricTrigger{
									DividePerInstance: to.BoolPtr(false),
									MetricName:        to.StringPtr("Percentage CPU"),
									MetricResourceURI: to.StringPtr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          ComparisonOperationTypeGreaterThan.ToPtr(),
									Statistic:         MetricStatisticTypeAverage.ToPtr(),
									Threshold:         to.Float64Ptr(10),
									TimeAggregation:   TimeAggregationTypeAverage.ToPtr(),
									TimeGrain:         to.StringPtr("PT1M"),
									TimeWindow:        to.StringPtr("PT5M"),
								},
								ScaleAction: &ScaleAction{
									Type:      ScaleTypeChangeCount.ToPtr(),
									Cooldown:  to.StringPtr("PT5M"),
									Direction: ScaleDirectionIncrease.ToPtr(),
									Value:     to.StringPtr("1"),
								},
							},
							{
								MetricTrigger: &MetricTrigger{
									DividePerInstance: to.BoolPtr(false),
									MetricName:        to.StringPtr("Percentage CPU"),
									MetricResourceURI: to.StringPtr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          ComparisonOperationTypeGreaterThan.ToPtr(),
									Statistic:         MetricStatisticTypeAverage.ToPtr(),
									Threshold:         to.Float64Ptr(15),
									TimeAggregation:   TimeAggregationTypeAverage.ToPtr(),
									TimeGrain:         to.StringPtr("PT2M"),
									TimeWindow:        to.StringPtr("PT5M"),
								},
								ScaleAction: &ScaleAction{
									Type:      ScaleTypeChangeCount.ToPtr(),
									Cooldown:  to.StringPtr("PT6M"),
									Direction: ScaleDirectionDecrease.ToPtr(),
									Value:     to.StringPtr("2"),
								},
							}},
					}},
				TargetResourceURI: to.StringPtr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
			},
		},
		&AutoscaleSettingsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AutoscaleSettingResource.ID == nil {
		t.Fatal("AutoscaleSettingResource.ID should not be nil!")
	}
}

func TestAutoscaleSettings_Delete(t *testing.T) {
	// From example Delete an autoscale setting
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAutoscaleSettingsClient(con,
		"b67f7fec-69fc-4974-9099-a26bd6ffeda3")
	_, err := client.Delete(ctx,
		"TestingMetricsScaleSet",
		"MySetting",
		&AutoscaleSettingsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAutoscaleSettings_Get(t *testing.T) {
	// From example Get an autoscale setting
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAutoscaleSettingsClient(con,
		"b67f7fec-69fc-4974-9099-a26bd6ffeda3")
	res, err := client.Get(ctx,
		"TestingMetricsScaleSet",
		"MySetting",
		&AutoscaleSettingsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AutoscaleSettingResource.ID == nil {
		t.Fatal("AutoscaleSettingResource.ID should not be nil!")
	}
}

func TestAutoscaleSettings_Update(t *testing.T) {
	// From example Patch an autoscale setting
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAutoscaleSettingsClient(con,
		"b67f7fec-69fc-4974-9099-a26bd6ffeda3")
	res, err := client.Update(ctx,
		"TestingMetricsScaleSet",
		"MySetting",
		AutoscaleSettingResourcePatch{
			Properties: &AutoscaleSetting{
				Enabled: to.BoolPtr(true),
				Notifications: []*AutoscaleNotification{
					{
						Email: &EmailNotification{
							CustomEmails: []*string{
								to.StringPtr("gu@ms.com"),
								to.StringPtr("ge@ns.net")},
							SendToSubscriptionAdministrator:    to.BoolPtr(true),
							SendToSubscriptionCoAdministrators: to.BoolPtr(true),
						},
						Operation: to.StringPtr("Scale"),
						Webhooks: []*WebhookNotification{
							{
								Properties: map[string]*string{},
								ServiceURI: to.StringPtr("http://myservice.com"),
							}},
					}},
				Profiles: []*AutoscaleProfile{
					{
						Name: to.StringPtr("adios"),
						Capacity: &ScaleCapacity{
							Default: to.StringPtr("1"),
							Maximum: to.StringPtr("10"),
							Minimum: to.StringPtr("1"),
						},
						FixedDate: &TimeWindow{
							End:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-05T14:30:00Z"); return t }()),
							Start:    to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-05T14:00:00Z"); return t }()),
							TimeZone: to.StringPtr("UTC"),
						},
						Rules: []*ScaleRule{
							{
								MetricTrigger: &MetricTrigger{
									DividePerInstance: to.BoolPtr(false),
									MetricName:        to.StringPtr("Percentage CPU"),
									MetricResourceURI: to.StringPtr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          ComparisonOperationTypeGreaterThan.ToPtr(),
									Statistic:         MetricStatisticTypeAverage.ToPtr(),
									Threshold:         to.Float64Ptr(10),
									TimeAggregation:   TimeAggregationTypeAverage.ToPtr(),
									TimeGrain:         to.StringPtr("PT1M"),
									TimeWindow:        to.StringPtr("PT5M"),
								},
								ScaleAction: &ScaleAction{
									Type:      ScaleTypeChangeCount.ToPtr(),
									Cooldown:  to.StringPtr("PT5M"),
									Direction: ScaleDirectionIncrease.ToPtr(),
									Value:     to.StringPtr("1"),
								},
							},
							{
								MetricTrigger: &MetricTrigger{
									DividePerInstance: to.BoolPtr(false),
									MetricName:        to.StringPtr("Percentage CPU"),
									MetricResourceURI: to.StringPtr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          ComparisonOperationTypeGreaterThan.ToPtr(),
									Statistic:         MetricStatisticTypeAverage.ToPtr(),
									Threshold:         to.Float64Ptr(15),
									TimeAggregation:   TimeAggregationTypeAverage.ToPtr(),
									TimeGrain:         to.StringPtr("PT2M"),
									TimeWindow:        to.StringPtr("PT5M"),
								},
								ScaleAction: &ScaleAction{
									Type:      ScaleTypeChangeCount.ToPtr(),
									Cooldown:  to.StringPtr("PT6M"),
									Direction: ScaleDirectionDecrease.ToPtr(),
									Value:     to.StringPtr("2"),
								},
							}},
					},
					{
						Name: to.StringPtr("saludos"),
						Capacity: &ScaleCapacity{
							Default: to.StringPtr("1"),
							Maximum: to.StringPtr("10"),
							Minimum: to.StringPtr("1"),
						},
						Recurrence: &Recurrence{
							Frequency: RecurrenceFrequencyWeek.ToPtr(),
							Schedule: &RecurrentSchedule{
								Days: []*string{
									to.StringPtr("1")},
								Hours: []*int32{
									to.Int32Ptr(5)},
								Minutes: []*int32{
									to.Int32Ptr(15)},
								TimeZone: to.StringPtr("UTC"),
							},
						},
						Rules: []*ScaleRule{
							{
								MetricTrigger: &MetricTrigger{
									DividePerInstance: to.BoolPtr(false),
									MetricName:        to.StringPtr("Percentage CPU"),
									MetricResourceURI: to.StringPtr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          ComparisonOperationTypeGreaterThan.ToPtr(),
									Statistic:         MetricStatisticTypeAverage.ToPtr(),
									Threshold:         to.Float64Ptr(10),
									TimeAggregation:   TimeAggregationTypeAverage.ToPtr(),
									TimeGrain:         to.StringPtr("PT1M"),
									TimeWindow:        to.StringPtr("PT5M"),
								},
								ScaleAction: &ScaleAction{
									Type:      ScaleTypeChangeCount.ToPtr(),
									Cooldown:  to.StringPtr("PT5M"),
									Direction: ScaleDirectionIncrease.ToPtr(),
									Value:     to.StringPtr("1"),
								},
							},
							{
								MetricTrigger: &MetricTrigger{
									DividePerInstance: to.BoolPtr(false),
									MetricName:        to.StringPtr("Percentage CPU"),
									MetricResourceURI: to.StringPtr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
									Operator:          ComparisonOperationTypeGreaterThan.ToPtr(),
									Statistic:         MetricStatisticTypeAverage.ToPtr(),
									Threshold:         to.Float64Ptr(15),
									TimeAggregation:   TimeAggregationTypeAverage.ToPtr(),
									TimeGrain:         to.StringPtr("PT2M"),
									TimeWindow:        to.StringPtr("PT5M"),
								},
								ScaleAction: &ScaleAction{
									Type:      ScaleTypeChangeCount.ToPtr(),
									Cooldown:  to.StringPtr("PT6M"),
									Direction: ScaleDirectionDecrease.ToPtr(),
									Value:     to.StringPtr("2"),
								},
							}},
					}},
				TargetResourceURI: to.StringPtr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc"),
			},
			Tags: map[string]*string{
				"$type": to.StringPtr("Microsoft.WindowsAzure.Management.Common.Storage.CasePreservedDictionary"),
			},
		},
		&AutoscaleSettingsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AutoscaleSettingResource.ID == nil {
		t.Fatal("AutoscaleSettingResource.ID should not be nil!")
	}
}

func TestAutoscaleSettings_ListBySubscription(t *testing.T) {
	// From example List autoscale settings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAutoscaleSettingsClient(con,
		"b67f7fec-69fc-4974-9099-a26bd6ffeda3")
	pager := client.ListBySubscription(&AutoscaleSettingsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AutoscaleSettingResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AutoscaleSettingResource.ID should not be nil!")
			}
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example Get a list of operations for a resource provider
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	_, err := client.List(ctx,
		&OperationsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAlertRuleIncidents_Get(t *testing.T) {
	// From example Get a single alert rule incident
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAlertRuleIncidentsClient(con,
		"b67f7fec-69fc-4974-9099-a26bd6ffeda3")
	_, err := client.Get(ctx,
		"Rac46PostSwapRG",
		"myRuleName",
		"Website_started",
		&AlertRuleIncidentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAlertRuleIncidents_ListByAlertRule(t *testing.T) {
	// From example List alert rule incidents
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAlertRuleIncidentsClient(con,
		"b67f7fec-69fc-4974-9099-a26bd6ffeda3")
	_, err := client.ListByAlertRule(ctx,
		"Rac46PostSwapRG",
		"myRuleName",
		&AlertRuleIncidentsListByAlertRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAlertRules_CreateOrUpdate(t *testing.T) {
	// From example Create or update an alert rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAlertRulesClient(con,
		"b67f7fec-69fc-4974-9099-a26bd6ffeda3")
	res, err := client.CreateOrUpdate(ctx,
		"Rac46PostSwapRG",
		"chiricutin",
		AlertRuleResource{
			Resource: Resource{
				Location: to.StringPtr("West US"),
				Tags:     map[string]*string{},
			},
			Properties: &AlertRule{
				Name:        to.StringPtr("chiricutin"),
				Description: to.StringPtr("Pura Vida"),
				Actions:     []RuleAction{},
				Condition: &ThresholdRuleCondition{
					RuleCondition: RuleCondition{
						DataSource: &RuleMetricDataSource{
							RuleDataSource: RuleDataSource{
								ODataType:   to.StringPtr("Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource"),
								ResourceURI: to.StringPtr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest"),
							},
							MetricName: to.StringPtr("Requests"),
						},
						ODataType: to.StringPtr("Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition"),
					},
					Operator:        ConditionOperatorGreaterThan.ToPtr(),
					Threshold:       to.Float64Ptr(3),
					TimeAggregation: TimeAggregationOperatorTotal.ToPtr(),
					WindowSize:      to.StringPtr("PT5M"),
				},
				IsEnabled: to.BoolPtr(true),
			},
		},
		&AlertRulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AlertRuleResource.ID == nil {
		t.Fatal("AlertRuleResource.ID should not be nil!")
	}
}

func TestAlertRules_Delete(t *testing.T) {
	// From example Delete an alert rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAlertRulesClient(con,
		"b67f7fec-69fc-4974-9099-a26bd6ffeda3")
	_, err := client.Delete(ctx,
		"Rac46PostSwapRG",
		"chiricutin",
		&AlertRulesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAlertRules_Get(t *testing.T) {
	// From example Get an alert rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAlertRulesClient(con,
		"b67f7fec-69fc-4974-9099-a26bd6ffeda3")
	res, err := client.Get(ctx,
		"Rac46PostSwapRG",
		"chiricutin",
		&AlertRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AlertRuleResource.ID == nil {
		t.Fatal("AlertRuleResource.ID should not be nil!")
	}
}

func TestAlertRules_Update(t *testing.T) {
	// From example Patch an alert rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAlertRulesClient(con,
		"b67f7fec-69fc-4974-9099-a26bd6ffeda3")
	res, err := client.Update(ctx,
		"Rac46PostSwapRG",
		"chiricutin",
		AlertRuleResourcePatch{
			Properties: &AlertRule{
				Name:        to.StringPtr("chiricutin"),
				Description: to.StringPtr("Pura Vida"),
				Actions:     []RuleAction{},
				Condition: &ThresholdRuleCondition{
					RuleCondition: RuleCondition{
						DataSource: &RuleMetricDataSource{
							RuleDataSource: RuleDataSource{
								ODataType:   to.StringPtr("Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource"),
								ResourceURI: to.StringPtr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest"),
							},
							MetricName: to.StringPtr("Requests"),
						},
						ODataType: to.StringPtr("Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition"),
					},
					Operator:        ConditionOperatorGreaterThan.ToPtr(),
					Threshold:       to.Float64Ptr(3),
					TimeAggregation: TimeAggregationOperatorTotal.ToPtr(),
					WindowSize:      to.StringPtr("PT5M"),
				},
				IsEnabled: to.BoolPtr(true),
			},
			Tags: map[string]*string{
				"$type": to.StringPtr("Microsoft.WindowsAzure.Management.Common.Storage.CasePreservedDictionary"),
			},
		},
		&AlertRulesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AlertRuleResource.ID == nil {
		t.Fatal("AlertRuleResource.ID should not be nil!")
	}
}

func TestAlertRules_ListByResourceGroup(t *testing.T) {
	// From example List alert rules
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAlertRulesClient(con,
		"b67f7fec-69fc-4974-9099-a26bd6ffeda3")
	_, err := client.ListByResourceGroup(ctx,
		"Rac46PostSwapRG",
		&AlertRulesListByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAlertRules_ListBySubscription(t *testing.T) {
	// From example List alert rules
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAlertRulesClient(con,
		"b67f7fec-69fc-4974-9099-a26bd6ffeda3")
	_, err := client.ListBySubscription(ctx,
		&AlertRulesListBySubscriptionOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestLogProfiles_Delete(t *testing.T) {
	// From example Delete log profile
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLogProfilesClient(con,
		"b67f7fec-69fc-4974-9099-a26bd6ffeda3")
	_, err := client.Delete(ctx,
		"Rac46PostSwapRG",
		&LogProfilesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestLogProfiles_Get(t *testing.T) {
	// From example Get log profile
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLogProfilesClient(con,
		"df602c9c-7aa0-407d-a6fb-eb20c8bd1192")
	res, err := client.Get(ctx,
		"default",
		&LogProfilesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LogProfileResource.ID == nil {
		t.Fatal("LogProfileResource.ID should not be nil!")
	}
}

func TestLogProfiles_CreateOrUpdate(t *testing.T) {
	// From example Create or update a log profile
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLogProfilesClient(con,
		"df602c9c-7aa0-407d-a6fb-eb20c8bd1192")
	res, err := client.CreateOrUpdate(ctx,
		"Rac46PostSwapRG",
		LogProfileResource{
			Resource: Resource{
				Location: to.StringPtr(""),
				Tags:     map[string]*string{},
			},
			Properties: &LogProfileProperties{
				Categories: []*string{
					to.StringPtr("Write"),
					to.StringPtr("Delete"),
					to.StringPtr("Action")},
				Locations: []*string{
					to.StringPtr("global")},
				RetentionPolicy: &RetentionPolicy{
					Days:    to.Int32Ptr(3),
					Enabled: to.BoolPtr(true),
				},
				ServiceBusRuleID: to.StringPtr(""),
				StorageAccountID: to.StringPtr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/resourceGroups/JohnKemTest/providers/Microsoft.Storage/storageAccounts/johnkemtest8162"),
			},
		},
		&LogProfilesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LogProfileResource.ID == nil {
		t.Fatal("LogProfileResource.ID should not be nil!")
	}
}

func TestLogProfiles_Update(t *testing.T) {
	// From example Patch a log profile
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLogProfilesClient(con,
		"df602c9c-7aa0-407d-a6fb-eb20c8bd1192")
	res, err := client.Update(ctx,
		"Rac46PostSwapRG",
		LogProfileResourcePatch{
			Properties: &LogProfileProperties{
				Categories: []*string{
					to.StringPtr("Write"),
					to.StringPtr("Delete"),
					to.StringPtr("Action")},
				Locations: []*string{
					to.StringPtr("global")},
				RetentionPolicy: &RetentionPolicy{
					Days:    to.Int32Ptr(3),
					Enabled: to.BoolPtr(true),
				},
				ServiceBusRuleID: to.StringPtr(""),
				StorageAccountID: to.StringPtr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/resourceGroups/JohnKemTest/providers/Microsoft.Storage/storageAccounts/johnkemtest8162"),
			},
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
			},
		},
		&LogProfilesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LogProfileResource.ID == nil {
		t.Fatal("LogProfileResource.ID should not be nil!")
	}
}

func TestLogProfiles_List(t *testing.T) {
	// From example List log profiles
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLogProfilesClient(con,
		"df602c9c-7aa0-407d-a6fb-eb20c8bd1192")
	_, err := client.List(ctx,
		&LogProfilesListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDiagnosticSettings_Get(t *testing.T) {
	// From example Gets the diagnostic setting
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticSettingsClient(con)
	res, err := client.Get(ctx,
		"subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourcegroups/viruela1/providers/microsoft.logic/workflows/viruela6",
		"mysetting",
		&DiagnosticSettingsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticSettingsResource.ID == nil {
		t.Fatal("DiagnosticSettingsResource.ID should not be nil!")
	}
}

func TestDiagnosticSettings_CreateOrUpdate(t *testing.T) {
	// From example Creates or Updates the diagnostic setting
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticSettingsClient(con)
	res, err := client.CreateOrUpdate(ctx,
		"subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourcegroups/viruela1/providers/microsoft.logic/workflows/viruela6",
		"mysetting",
		DiagnosticSettingsResource{
			Properties: &DiagnosticSettings{
				EventHubAuthorizationRuleID: to.StringPtr("/subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourceGroups/montest/providers/microsoft.eventhub/namespaces/mynamespace/eventhubs/myeventhub/authorizationrules/myrule"),
				EventHubName:                to.StringPtr("myeventhub"),
				LogAnalyticsDestinationType: to.StringPtr("Dedicated"),
				Logs: []*LogSettings{
					{
						Category: to.StringPtr("WorkflowRuntime"),
						Enabled:  to.BoolPtr(true),
						RetentionPolicy: &RetentionPolicy{
							Days:    to.Int32Ptr(0),
							Enabled: to.BoolPtr(false),
						},
					}},
				Metrics: []*MetricSettings{
					{
						Category: to.StringPtr("WorkflowMetrics"),
						Enabled:  to.BoolPtr(true),
						RetentionPolicy: &RetentionPolicy{
							Days:    to.Int32Ptr(0),
							Enabled: to.BoolPtr(false),
						},
					}},
				StorageAccountID: to.StringPtr("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/resourceGroups/apptest/providers/Microsoft.Storage/storageAccounts/appteststorage1"),
				WorkspaceID:      to.StringPtr(""),
			},
		},
		&DiagnosticSettingsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticSettingsResource.ID == nil {
		t.Fatal("DiagnosticSettingsResource.ID should not be nil!")
	}
}

func TestDiagnosticSettings_Delete(t *testing.T) {
	// From example Deletes the diagnostic setting
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticSettingsClient(con)
	_, err := client.Delete(ctx,
		"subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourcegroups/viruela1/providers/microsoft.logic/workflows/viruela6",
		"mysetting",
		&DiagnosticSettingsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDiagnosticSettings_List(t *testing.T) {
	// From example Gets the diagnostic setting
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticSettingsClient(con)
	_, err := client.List(ctx,
		"subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourcegroups/viruela1/providers/microsoft.logic/workflows/viruela6",
		&DiagnosticSettingsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDiagnosticSettingsCategory_Get(t *testing.T) {
	// From example Gets the diagnostic setting
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticSettingsCategoryClient(con)
	res, err := client.Get(ctx,
		"subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourcegroups/viruela1/providers/microsoft.logic/workflows/viruela6",
		"WorkflowRuntime",
		&DiagnosticSettingsCategoryGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticSettingsCategoryResource.ID == nil {
		t.Fatal("DiagnosticSettingsCategoryResource.ID should not be nil!")
	}
}

func TestDiagnosticSettingsCategory_List(t *testing.T) {
	// From example Gets the diagnostic setting
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticSettingsCategoryClient(con)
	_, err := client.List(ctx,
		"subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourcegroups/viruela1/providers/microsoft.logic/workflows/viruela6",
		&DiagnosticSettingsCategoryListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestActionGroups_CreateOrUpdate(t *testing.T) {
	// From example Create or update an action group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewActionGroupsClient(con,
		"187f412d-1758-44d9-b052-169e2564721d")
	res, err := client.CreateOrUpdate(ctx,
		"Default-NotificationRules",
		"SampleActionGroup",
		ActionGroupResource{
			AzureResource: AzureResource{
				Location: to.StringPtr("Global"),
				Tags:     map[string]*string{},
			},
			Properties: &ActionGroup{
				ArmRoleReceivers: []*ArmRoleReceiver{
					{
						Name:                 to.StringPtr("Sample armRole"),
						RoleID:               to.StringPtr("8e3af657-a8ff-443c-a75c-2fe8c4bcb635"),
						UseCommonAlertSchema: to.BoolPtr(true),
					}},
				AutomationRunbookReceivers: []*AutomationRunbookReceiver{
					{
						Name:                 to.StringPtr("testRunbook"),
						AutomationAccountID:  to.StringPtr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/runbookTest/providers/Microsoft.Automation/automationAccounts/runbooktest"),
						IsGlobalRunbook:      to.BoolPtr(false),
						RunbookName:          to.StringPtr("Sample runbook"),
						ServiceURI:           to.StringPtr("<serviceUri>"),
						UseCommonAlertSchema: to.BoolPtr(true),
						WebhookResourceID:    to.StringPtr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/runbookTest/providers/Microsoft.Automation/automationAccounts/runbooktest/webhooks/Alert1510184037084"),
					}},
				AzureAppPushReceivers: []*AzureAppPushReceiver{
					{
						Name:         to.StringPtr("Sample azureAppPush"),
						EmailAddress: to.StringPtr("johndoe@email.com"),
					}},
				AzureFunctionReceivers: []*AzureFunctionReceiver{
					{
						Name:                  to.StringPtr("Sample azureFunction"),
						FunctionAppResourceID: to.StringPtr("/subscriptions/5def922a-3ed4-49c1-b9fd-05ec533819a3/resourceGroups/aznsTest/providers/Microsoft.Web/sites/testFunctionApp"),
						FunctionName:          to.StringPtr("HttpTriggerCSharp1"),
						HTTPTriggerURL:        to.StringPtr("<httpTriggerUrl>"),
						UseCommonAlertSchema:  to.BoolPtr(true),
					}},
				EmailReceivers: []*EmailReceiver{
					{
						Name:                 to.StringPtr("John Doe's email"),
						EmailAddress:         to.StringPtr("johndoe@email.com"),
						UseCommonAlertSchema: to.BoolPtr(false),
					},
					{
						Name:                 to.StringPtr("Jane Smith's email"),
						EmailAddress:         to.StringPtr("janesmith@email.com"),
						UseCommonAlertSchema: to.BoolPtr(true),
					}},
				Enabled:        to.BoolPtr(true),
				GroupShortName: to.StringPtr("sample"),
				ItsmReceivers: []*ItsmReceiver{
					{
						Name:                to.StringPtr("Sample itsm"),
						ConnectionID:        to.StringPtr("a3b9076c-ce8e-434e-85b4-aff10cb3c8f1"),
						Region:              to.StringPtr("westcentralus"),
						TicketConfiguration: to.StringPtr("{\"PayloadRevision\":0,\"WorkItemType\":\"Incident\",\"UseTemplate\":false,\"WorkItemData\":\"{}\",\"CreateOneWIPerCI\":false}"),
						WorkspaceID:         to.StringPtr("5def922a-3ed4-49c1-b9fd-05ec533819a3|55dfd1f8-7e59-4f89-bf56-4c82f5ace23c"),
					}},
				LogicAppReceivers: []*LogicAppReceiver{
					{
						Name:                 to.StringPtr("Sample logicApp"),
						CallbackURL:          to.StringPtr("https://prod-27.northcentralus.logic.azure.com/workflows/68e572e818e5457ba898763b7db90877/triggers/manual/paths/invoke/azns/test?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Abpsb72UYJxPPvmDo937uzofupO5r_vIeWEx7KVHo7w"),
						ResourceID:           to.StringPtr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/LogicApp/providers/Microsoft.Logic/workflows/testLogicApp"),
						UseCommonAlertSchema: to.BoolPtr(false),
					}},
				SmsReceivers: []*SmsReceiver{
					{
						Name:        to.StringPtr("John Doe's mobile"),
						CountryCode: to.StringPtr("1"),
						PhoneNumber: to.StringPtr("1234567890"),
					},
					{
						Name:        to.StringPtr("Jane Smith's mobile"),
						CountryCode: to.StringPtr("1"),
						PhoneNumber: to.StringPtr("0987654321"),
					}},
				VoiceReceivers: []*VoiceReceiver{
					{
						Name:        to.StringPtr("Sample voice"),
						CountryCode: to.StringPtr("1"),
						PhoneNumber: to.StringPtr("1234567890"),
					}},
				WebhookReceivers: []*WebhookReceiver{
					{
						Name:                 to.StringPtr("Sample webhook 1"),
						ServiceURI:           to.StringPtr("http://www.example.com/webhook1"),
						UseCommonAlertSchema: to.BoolPtr(true),
					},
					{
						Name:                 to.StringPtr("Sample webhook 2"),
						IdentifierURI:        to.StringPtr("http://someidentifier/d7811ba3-7996-4a93-99b6-6b2f3f355f8a"),
						ObjectID:             to.StringPtr("d3bb868c-fe44-452c-aa26-769a6538c808"),
						ServiceURI:           to.StringPtr("http://www.example.com/webhook2"),
						TenantID:             to.StringPtr("68a4459a-ccb8-493c-b9da-dd30457d1b84"),
						UseAADAuth:           to.BoolPtr(true),
						UseCommonAlertSchema: to.BoolPtr(true),
					}},
			},
		},
		&ActionGroupsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ActionGroupResource.ID == nil {
		t.Fatal("ActionGroupResource.ID should not be nil!")
	}
}

func TestActionGroups_Get(t *testing.T) {
	// From example Get an action group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewActionGroupsClient(con,
		"187f412d-1758-44d9-b052-169e2564721d")
	res, err := client.Get(ctx,
		"Default-NotificationRules",
		"SampleActionGroup",
		&ActionGroupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ActionGroupResource.ID == nil {
		t.Fatal("ActionGroupResource.ID should not be nil!")
	}
}

func TestActionGroups_Delete(t *testing.T) {
	// From example Delete an action group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewActionGroupsClient(con,
		"187f412d-1758-44d9-b052-169e2564721d")
	_, err := client.Delete(ctx,
		"Default-NotificationRules",
		"SampleActionGroup",
		&ActionGroupsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestActionGroups_Update(t *testing.T) {
	// From example Patch an action group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewActionGroupsClient(con,
		"187f412d-1758-44d9-b052-169e2564721d")
	res, err := client.Update(ctx,
		"Default-NotificationRules",
		"SampleActionGroup",
		ActionGroupPatchBody{
			Properties: &ActionGroupPatch{
				Enabled: to.BoolPtr(false),
			},
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
				"key2": to.StringPtr("value2"),
			},
		},
		&ActionGroupsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ActionGroupResource.ID == nil {
		t.Fatal("ActionGroupResource.ID should not be nil!")
	}
}

func TestActionGroups_ListBySubscriptionId(t *testing.T) {
	// From example List action groups
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewActionGroupsClient(con,
		"187f412d-1758-44d9-b052-169e2564721d")
	_, err := client.ListBySubscriptionID(ctx,
		&ActionGroupsListBySubscriptionIDOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestActionGroups_ListByResourceGroup(t *testing.T) {
	// From example List action groups
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewActionGroupsClient(con,
		"187f412d-1758-44d9-b052-169e2564721d")
	_, err := client.ListByResourceGroup(ctx,
		"Default-NotificationRules",
		&ActionGroupsListByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestActionGroups_EnableReceiver(t *testing.T) {
	// From example Enable the receiver
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewActionGroupsClient(con,
		"187f412d-1758-44d9-b052-169e2564721d")
	_, err := client.EnableReceiver(ctx,
		"Default-NotificationRules",
		"SampleActionGroup",
		EnableRequest{
			ReceiverName: to.StringPtr("John Doe's mobile"),
		},
		&ActionGroupsEnableReceiverOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestActivityLogs_List(t *testing.T) {
	// From example Get Activity Logs with filter
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewActivityLogsClient(con,
		"089bd33f-d4ec-47fe-8ba5-0753aa5c5b33")
	pager := client.List("eventTimestamp ge '2015-01-21T20:00:00Z' and eventTimestamp le '2015-01-23T20:00:00Z' and resourceGroupName eq 'MSSupportGroup'",
		&ActivityLogsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventData.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventData.ID should not be nil!")
			}
		}
	}

	// From example Get Activity Logs with filter and select
	pager = client.List("eventTimestamp ge '2015-01-21T20:00:00Z' and eventTimestamp le '2015-01-23T20:00:00Z' and resourceGroupName eq 'MSSupportGroup'",
		&ActivityLogsListOptions{Select: to.StringPtr("eventName,id,resourceGroupName,resourceProviderName,operationName,status,eventTimestamp,correlationId,submissionTimestamp,level")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventData.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventData.ID should not be nil!")
			}
		}
	}
}

func TestEventCategories_List(t *testing.T) {
	// From example Get event categories
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventCategoriesClient(con)
	_, err := client.List(ctx,
		&EventCategoriesListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTenantActivityLogs_List(t *testing.T) {
	// From example Get Tenant Activity Logs with filter
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTenantActivityLogsClient(con)
	pager := client.List(&TenantActivityLogsListOptions{Filter: to.StringPtr("eventTimestamp ge '2015-01-21T20:00:00Z' and eventTimestamp le '2015-01-23T20:00:00Z' and resourceGroupName eq 'MSSupportGroup'")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventData.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventData.ID should not be nil!")
			}
		}
	}

	// From example Get Tenant Activity Logs with filter and select
	pager = client.List(&TenantActivityLogsListOptions{Filter: to.StringPtr("eventTimestamp ge '2015-01-21T20:00:00Z' and eventTimestamp le '2015-01-23T20:00:00Z' and resourceGroupName eq 'MSSupportGroup'"),
		Select: to.StringPtr("eventName,id,resourceGroupName,resourceProviderName,operationName,status,eventTimestamp,correlationId,submissionTimestamp,level"),
	})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventData.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventData.ID should not be nil!")
			}
		}
	}

	// From example Get Tenant Activity Logs with select
	pager = client.List(&TenantActivityLogsListOptions{Select: to.StringPtr("eventName,id,resourceGroupName,resourceProviderName,operationName,status,eventTimestamp,correlationId,submissionTimestamp,level")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventData.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventData.ID should not be nil!")
			}
		}
	}

	// From example Get Tenant Activity Logs without filter or select
	pager = client.List(&TenantActivityLogsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventData.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventData.ID should not be nil!")
			}
		}
	}
}

func TestMetricDefinitions_List(t *testing.T) {
	// From example Get Application Insights Metric Definitions without filter
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMetricDefinitionsClient(con)
	_, err := client.List(ctx,
		"subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill/providers/microsoft.insights/metricdefinitions",
		&MetricDefinitionsListOptions{Metricnamespace: to.StringPtr("microsoft.insights/components")})
	if err != nil {
		t.Fatal(err)
	}

	// From example Get Metric Definitions without filter
	_, err = client.List(ctx,
		"subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest/providers/microsoft.insights/metricDefinitions",
		&MetricDefinitionsListOptions{Metricnamespace: to.StringPtr("Microsoft.Web/sites")})
	if err != nil {
		t.Fatal(err)
	}

	// From example Get StorageCache Metric Definitions with metric class
	_, err = client.List(ctx,
		"subscriptions/46841c0e-69c8-4b17-af46-6626ecb15fc2/resourceGroups/adgarntptestrg/providers/Microsoft.StorageCache/caches/adgarntptestcache",
		&MetricDefinitionsListOptions{Metricnamespace: to.StringPtr("microsoft.storagecache/caches")})
	if err != nil {
		t.Fatal(err)
	}
}

func TestMetrics_List(t *testing.T) {
	// From example Get Metric for data
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMetricsClient(con)
	_, err := client.List(ctx,
		"subscriptions/b324c52b-4073-4807-93af-e07d289c093e/resourceGroups/test/providers/Microsoft.Storage/storageAccounts/larryshoebox/blobServices/default",
		&MetricsListOptions{Timespan: to.StringPtr("2017-04-14T02:20:00Z/2017-04-14T04:20:00Z"),
			Interval:        to.StringPtr("PT1M"),
			Aggregation:     to.StringPtr("Average,count"),
			Top:             to.Int32Ptr(3),
			Orderby:         to.StringPtr("Average asc"),
			Filter:          to.StringPtr("BlobType eq '*'"),
			Metricnamespace: to.StringPtr("Microsoft.Storage/storageAccounts/blobServices"),
		})
	if err != nil {
		t.Fatal(err)
	}

	// From example Get Metric for metadata
	_, err = client.List(ctx,
		"subscriptions/b324c52b-4073-4807-93af-e07d289c093e/resourceGroups/test/providers/Microsoft.Storage/storageAccounts/larryshoebox/blobServices/default",
		&MetricsListOptions{Timespan: to.StringPtr("2017-04-14T02:20:00Z/2017-04-14T04:20:00Z"),
			Interval:        to.StringPtr("PT1M"),
			Aggregation:     to.StringPtr("Average,count"),
			Top:             to.Int32Ptr(3),
			Orderby:         to.StringPtr("Average asc"),
			Filter:          to.StringPtr("BlobType eq '*'"),
			Metricnamespace: to.StringPtr("Microsoft.Storage/storageAccounts/blobServices"),
		})
	if err != nil {
		t.Fatal(err)
	}

	// From example Get Metric with error
	_, err = client.List(ctx,
		"subscriptions/ac41e21f-afd6-4a79-8070-f01eba278f97/resourceGroups/todking/providers/Microsoft.DocumentDb/databaseAccounts/tk-cosmos-mongo",
		&MetricsListOptions{Timespan: to.StringPtr("2021-06-07T21:51:00Z/2021-06-08T01:51:00Z"),
			Interval:        to.StringPtr("FULL"),
			Metricnames:     to.StringPtr("MongoRequestsCount,MongoRequests"),
			Aggregation:     to.StringPtr("average"),
			Metricnamespace: to.StringPtr("microsoft.documentdb/databaseaccounts"),
		})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBaselines_List(t *testing.T) {
	// From example Get metric baselines
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBaselinesClient(con)
	_, err := client.List(ctx,
		"subscriptions/b368ca2f-e298-46b7-b0ab-012281956afa/resourceGroups/vms/providers/Microsoft.Compute/virtualMachines/vm1",
		&BaselinesListOptions{Timespan: to.StringPtr("2019-03-12T11:00:00.000Z/2019-03-12T12:00:00.000Z"),
			Interval:      to.StringPtr("PT1H"),
			Aggregation:   to.StringPtr("average"),
			Sensitivities: to.StringPtr("Low,Medium"),
		})
	if err != nil {
		t.Fatal(err)
	}
}

func TestMetricAlerts_ListBySubscription(t *testing.T) {
	// From example List metric alert rules
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMetricAlertsClient(con,
		"14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7")
	_, err := client.ListBySubscription(ctx,
		&MetricAlertsListBySubscriptionOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestMetricAlerts_ListByResourceGroup(t *testing.T) {
	// From example List metric alert rules
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMetricAlertsClient(con,
		"14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7")
	_, err := client.ListByResourceGroup(ctx,
		"gigtest",
		&MetricAlertsListByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestMetricAlerts_Get(t *testing.T) {
	// From example Get a dynamic alert rule for multiple resources
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMetricAlertsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"gigtest",
		"MetricAlertOnMultipleResources",
		&MetricAlertsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MetricAlertResource.ID == nil {
		t.Fatal("MetricAlertResource.ID should not be nil!")
	}

	// From example Get a dynamic alert rule for single resource
	res, err = client.Get(ctx,
		"gigtest",
		"chiricutin",
		&MetricAlertsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MetricAlertResource.ID == nil {
		t.Fatal("MetricAlertResource.ID should not be nil!")
	}

	// From example Get a web test alert rule
	res, err = client.Get(ctx,
		"rg-example",
		"webtest-name-example",
		&MetricAlertsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MetricAlertResource.ID == nil {
		t.Fatal("MetricAlertResource.ID should not be nil!")
	}

	// From example Get an alert rule for multiple resources
	res, err = client.Get(ctx,
		"gigtest",
		"MetricAlertOnMultipleResources",
		&MetricAlertsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MetricAlertResource.ID == nil {
		t.Fatal("MetricAlertResource.ID should not be nil!")
	}

	// From example Get an alert rule for single resource
	res, err = client.Get(ctx,
		"gigtest",
		"chiricutin",
		&MetricAlertsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MetricAlertResource.ID == nil {
		t.Fatal("MetricAlertResource.ID should not be nil!")
	}

	// From example Get an alert rule on resource group(s)
	res, err = client.Get(ctx,
		"gigtest1",
		"MetricAlertAtResourceGroupLevel",
		&MetricAlertsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MetricAlertResource.ID == nil {
		t.Fatal("MetricAlertResource.ID should not be nil!")
	}

	// From example Get an alert rule on subscription
	res, err = client.Get(ctx,
		"gigtest",
		"MetricAlertAtSubscriptionLevel",
		&MetricAlertsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MetricAlertResource.ID == nil {
		t.Fatal("MetricAlertResource.ID should not be nil!")
	}
}

func TestMetricAlerts_CreateOrUpdate(t *testing.T) {
	// From example Create or update a dynamic alert rule for Multiple Resources
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMetricAlertsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.CreateOrUpdate(ctx,
		"gigtest",
		"MetricAlertOnMultipleResources",
		MetricAlertResource{
			Resource: Resource{
				Location: to.StringPtr("global"),
				Tags:     map[string]*string{},
			},
			Properties: &MetricAlertProperties{
				Description: to.StringPtr("This is the description of the rule1"),
				Actions: []*MetricAlertAction{
					{
						ActionGroupID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.StringPtr("value11"),
							"key12": to.StringPtr("value12"),
						},
					}},
				AutoMitigate: to.BoolPtr(true),
				Criteria: &MetricAlertMultipleResourceMultipleMetricCriteria{
					MetricAlertCriteria: MetricAlertCriteria{
						MetricAlertCriteria: map[string]map[string]interface{}{
							"allOf": map[string]interface{}{
								"0": map[string]interface{}{
									"name":             "High_CPU_80",
									"alertSensitivity": "Medium",
									"criterionType":    "DynamicThresholdCriterion",
									"dimensions":       []interface{}{},
									"failingPeriods": map[string]interface{}{
										"minFailingPeriodsToAlert":  4,
										"numberOfEvaluationPeriods": 4,
									},
									"metricName":      "Percentage CPU",
									"metricNamespace": "microsoft.compute/virtualmachines",
									"operator":        "GreaterOrLessThan",
									"timeAggregation": "Average",
								},
							},
							"odata.type": map[string]interface{}{
								"0":  "M",
								"1":  "i",
								"2":  "c",
								"3":  "r",
								"4":  "o",
								"5":  "s",
								"6":  "o",
								"7":  "f",
								"8":  "t",
								"9":  ".",
								"10": "A",
								"11": "z",
								"12": "u",
								"13": "r",
								"14": "e",
								"15": ".",
								"16": "M",
								"17": "o",
								"18": "n",
								"19": "i",
								"20": "t",
								"21": "o",
								"22": "r",
								"23": ".",
								"24": "M",
								"25": "u",
								"26": "l",
								"27": "t",
								"28": "i",
								"29": "p",
								"30": "l",
								"31": "e",
								"32": "R",
								"33": "e",
								"34": "s",
								"35": "o",
								"36": "u",
								"37": "r",
								"38": "c",
								"39": "e",
								"40": "M",
								"41": "u",
								"42": "l",
								"43": "t",
								"44": "i",
								"45": "p",
								"46": "l",
								"47": "e",
								"48": "M",
								"49": "e",
								"50": "t",
								"51": "r",
								"52": "i",
								"53": "c",
								"54": "C",
								"55": "r",
								"56": "i",
								"57": "t",
								"58": "e",
								"59": "r",
								"60": "i",
								"61": "a",
							},
						},
						ODataType: OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria.ToPtr(),
					},
					AllOf: []MultiMetricCriteria{
						{
							MultiMetricCriteria: MultiMetricCriteria{
								MultiMetricCriteria: map[string]map[string]interface{}{
									"name": map[string]interface{}{
										"0":  "H",
										"1":  "i",
										"2":  "g",
										"3":  "h",
										"4":  "_",
										"5":  "C",
										"6":  "P",
										"7":  "U",
										"8":  "_",
										"9":  "8",
										"10": "0",
									},
									"alertSensitivity": map[string]interface{}{
										"0": "M",
										"1": "e",
										"2": "d",
										"3": "i",
										"4": "u",
										"5": "m",
									},
									"criterionType": map[string]interface{}{
										"0":  "D",
										"1":  "y",
										"2":  "n",
										"3":  "a",
										"4":  "m",
										"5":  "i",
										"6":  "c",
										"7":  "T",
										"8":  "h",
										"9":  "r",
										"10": "e",
										"11": "s",
										"12": "h",
										"13": "o",
										"14": "l",
										"15": "d",
										"16": "C",
										"17": "r",
										"18": "i",
										"19": "t",
										"20": "e",
										"21": "r",
										"22": "i",
										"23": "o",
										"24": "n",
									},
									"dimensions": map[string]interface{}{},
									"failingPeriods": map[string]interface{}{
										"minFailingPeriodsToAlert":  4,
										"numberOfEvaluationPeriods": 4,
									},
									"metricName": map[string]interface{}{
										"0":  "P",
										"1":  "e",
										"2":  "r",
										"3":  "c",
										"4":  "e",
										"5":  "n",
										"6":  "t",
										"7":  "a",
										"8":  "g",
										"9":  "e",
										"10": " ",
										"11": "C",
										"12": "P",
										"13": "U",
									},
									"metricNamespace": map[string]interface{}{
										"0":  "m",
										"1":  "i",
										"2":  "c",
										"3":  "r",
										"4":  "o",
										"5":  "s",
										"6":  "o",
										"7":  "f",
										"8":  "t",
										"9":  ".",
										"10": "c",
										"11": "o",
										"12": "m",
										"13": "p",
										"14": "u",
										"15": "t",
										"16": "e",
										"17": "/",
										"18": "v",
										"19": "i",
										"20": "r",
										"21": "t",
										"22": "u",
										"23": "a",
										"24": "l",
										"25": "m",
										"26": "a",
										"27": "c",
										"28": "h",
										"29": "i",
										"30": "n",
										"31": "e",
										"32": "s",
									},
									"operator": map[string]interface{}{
										"0":  "G",
										"1":  "r",
										"2":  "e",
										"3":  "a",
										"4":  "t",
										"5":  "e",
										"6":  "r",
										"7":  "O",
										"8":  "r",
										"9":  "L",
										"10": "e",
										"11": "s",
										"12": "s",
										"13": "T",
										"14": "h",
										"15": "a",
										"16": "n",
									},
									"timeAggregation": map[string]interface{}{
										"0": "A",
										"1": "v",
										"2": "e",
										"3": "r",
										"4": "a",
										"5": "g",
										"6": "e",
									},
								},
								Name:            to.StringPtr("High_CPU_80"),
								CriterionType:   CriterionTypeDynamicThresholdCriterion.ToPtr(),
								Dimensions:      []*MetricDimension{},
								MetricName:      to.StringPtr("Percentage CPU"),
								MetricNamespace: to.StringPtr("microsoft.compute/virtualmachines"),
								TimeAggregation: AggregationTypeEnumAverage.ToPtr(),
							},
							AlertSensitivity: DynamicThresholdSensitivityMedium.ToPtr(),
							FailingPeriods: &DynamicThresholdFailingPeriods{
								MinFailingPeriodsToAlert:  to.Float32Ptr(4),
								NumberOfEvaluationPeriods: to.Float32Ptr(4),
							},
							Operator: DynamicThresholdOperatorGreaterOrLessThan.ToPtr(),
						}},
				},
				Enabled:             to.BoolPtr(true),
				EvaluationFrequency: to.StringPtr("PT1M"),
				Scopes: []*string{
					to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1"),
					to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2")},
				Severity:             to.Int32Ptr(3),
				TargetResourceRegion: to.StringPtr("southcentralus"),
				TargetResourceType:   to.StringPtr("Microsoft.Compute/virtualMachines"),
				WindowSize:           to.StringPtr("PT15M"),
			},
		},
		&MetricAlertsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MetricAlertResource.ID == nil {
		t.Fatal("MetricAlertResource.ID should not be nil!")
	}

	// From example Create or update a dynamic alert rule for Single Resource
	res, err = client.CreateOrUpdate(ctx,
		"gigtest",
		"chiricutin",
		MetricAlertResource{
			Resource: Resource{
				Location: to.StringPtr("global"),
				Tags:     map[string]*string{},
			},
			Properties: &MetricAlertProperties{
				Description: to.StringPtr("This is the description of the rule1"),
				Actions: []*MetricAlertAction{
					{
						ActionGroupID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.StringPtr("value11"),
							"key12": to.StringPtr("value12"),
						},
					}},
				AutoMitigate: to.BoolPtr(true),
				Criteria: &MetricAlertMultipleResourceMultipleMetricCriteria{
					MetricAlertCriteria: MetricAlertCriteria{
						MetricAlertCriteria: map[string]map[string]interface{}{
							"allOf": map[string]interface{}{
								"0": map[string]interface{}{
									"name":             "High_CPU_80",
									"alertSensitivity": "Medium",
									"criterionType":    "DynamicThresholdCriterion",
									"dimensions":       []interface{}{},
									"failingPeriods": map[string]interface{}{
										"minFailingPeriodsToAlert":  4,
										"numberOfEvaluationPeriods": 4,
									},
									"ignoreDataBefore": "2019-04-04T21:00:00.000Z",
									"metricName":       "Percentage CPU",
									"metricNamespace":  "microsoft.compute/virtualmachines",
									"operator":         "GreaterOrLessThan",
									"timeAggregation":  "Average",
								},
							},
							"odata.type": map[string]interface{}{
								"0":  "M",
								"1":  "i",
								"2":  "c",
								"3":  "r",
								"4":  "o",
								"5":  "s",
								"6":  "o",
								"7":  "f",
								"8":  "t",
								"9":  ".",
								"10": "A",
								"11": "z",
								"12": "u",
								"13": "r",
								"14": "e",
								"15": ".",
								"16": "M",
								"17": "o",
								"18": "n",
								"19": "i",
								"20": "t",
								"21": "o",
								"22": "r",
								"23": ".",
								"24": "M",
								"25": "u",
								"26": "l",
								"27": "t",
								"28": "i",
								"29": "p",
								"30": "l",
								"31": "e",
								"32": "R",
								"33": "e",
								"34": "s",
								"35": "o",
								"36": "u",
								"37": "r",
								"38": "c",
								"39": "e",
								"40": "M",
								"41": "u",
								"42": "l",
								"43": "t",
								"44": "i",
								"45": "p",
								"46": "l",
								"47": "e",
								"48": "M",
								"49": "e",
								"50": "t",
								"51": "r",
								"52": "i",
								"53": "c",
								"54": "C",
								"55": "r",
								"56": "i",
								"57": "t",
								"58": "e",
								"59": "r",
								"60": "i",
								"61": "a",
							},
						},
						ODataType: OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria.ToPtr(),
					},
					AllOf: []MultiMetricCriteria{
						{
							MultiMetricCriteria: MultiMetricCriteria{
								MultiMetricCriteria: map[string]map[string]interface{}{
									"name": map[string]interface{}{
										"0":  "H",
										"1":  "i",
										"2":  "g",
										"3":  "h",
										"4":  "_",
										"5":  "C",
										"6":  "P",
										"7":  "U",
										"8":  "_",
										"9":  "8",
										"10": "0",
									},
									"alertSensitivity": map[string]interface{}{
										"0": "M",
										"1": "e",
										"2": "d",
										"3": "i",
										"4": "u",
										"5": "m",
									},
									"criterionType": map[string]interface{}{
										"0":  "D",
										"1":  "y",
										"2":  "n",
										"3":  "a",
										"4":  "m",
										"5":  "i",
										"6":  "c",
										"7":  "T",
										"8":  "h",
										"9":  "r",
										"10": "e",
										"11": "s",
										"12": "h",
										"13": "o",
										"14": "l",
										"15": "d",
										"16": "C",
										"17": "r",
										"18": "i",
										"19": "t",
										"20": "e",
										"21": "r",
										"22": "i",
										"23": "o",
										"24": "n",
									},
									"dimensions": map[string]interface{}{},
									"failingPeriods": map[string]interface{}{
										"minFailingPeriodsToAlert":  4,
										"numberOfEvaluationPeriods": 4,
									},
									"ignoreDataBefore": map[string]interface{}{
										"0":  "2",
										"1":  "0",
										"2":  "1",
										"3":  "9",
										"4":  "-",
										"5":  "0",
										"6":  "4",
										"7":  "-",
										"8":  "0",
										"9":  "4",
										"10": "T",
										"11": "2",
										"12": "1",
										"13": ":",
										"14": "0",
										"15": "0",
										"16": ":",
										"17": "0",
										"18": "0",
										"19": ".",
										"20": "0",
										"21": "0",
										"22": "0",
										"23": "Z",
									},
									"metricName": map[string]interface{}{
										"0":  "P",
										"1":  "e",
										"2":  "r",
										"3":  "c",
										"4":  "e",
										"5":  "n",
										"6":  "t",
										"7":  "a",
										"8":  "g",
										"9":  "e",
										"10": " ",
										"11": "C",
										"12": "P",
										"13": "U",
									},
									"metricNamespace": map[string]interface{}{
										"0":  "m",
										"1":  "i",
										"2":  "c",
										"3":  "r",
										"4":  "o",
										"5":  "s",
										"6":  "o",
										"7":  "f",
										"8":  "t",
										"9":  ".",
										"10": "c",
										"11": "o",
										"12": "m",
										"13": "p",
										"14": "u",
										"15": "t",
										"16": "e",
										"17": "/",
										"18": "v",
										"19": "i",
										"20": "r",
										"21": "t",
										"22": "u",
										"23": "a",
										"24": "l",
										"25": "m",
										"26": "a",
										"27": "c",
										"28": "h",
										"29": "i",
										"30": "n",
										"31": "e",
										"32": "s",
									},
									"operator": map[string]interface{}{
										"0":  "G",
										"1":  "r",
										"2":  "e",
										"3":  "a",
										"4":  "t",
										"5":  "e",
										"6":  "r",
										"7":  "O",
										"8":  "r",
										"9":  "L",
										"10": "e",
										"11": "s",
										"12": "s",
										"13": "T",
										"14": "h",
										"15": "a",
										"16": "n",
									},
									"timeAggregation": map[string]interface{}{
										"0": "A",
										"1": "v",
										"2": "e",
										"3": "r",
										"4": "a",
										"5": "g",
										"6": "e",
									},
								},
								Name:            to.StringPtr("High_CPU_80"),
								CriterionType:   CriterionTypeDynamicThresholdCriterion.ToPtr(),
								Dimensions:      []*MetricDimension{},
								MetricName:      to.StringPtr("Percentage CPU"),
								MetricNamespace: to.StringPtr("microsoft.compute/virtualmachines"),
								TimeAggregation: AggregationTypeEnumAverage.ToPtr(),
							},
							AlertSensitivity: DynamicThresholdSensitivityMedium.ToPtr(),
							FailingPeriods: &DynamicThresholdFailingPeriods{
								MinFailingPeriodsToAlert:  to.Float32Ptr(4),
								NumberOfEvaluationPeriods: to.Float32Ptr(4),
							},
							IgnoreDataBefore: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-04T21:00:00.000Z"); return t }()),
							Operator:         DynamicThresholdOperatorGreaterOrLessThan.ToPtr(),
						}},
				},
				Enabled:             to.BoolPtr(true),
				EvaluationFrequency: to.StringPtr("PT1M"),
				Scopes: []*string{
					to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme")},
				Severity:   to.Int32Ptr(3),
				WindowSize: to.StringPtr("PT15M"),
			},
		},
		&MetricAlertsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MetricAlertResource.ID == nil {
		t.Fatal("MetricAlertResource.ID should not be nil!")
	}

	// From example Create or update a web test alert rule
	res, err = client.CreateOrUpdate(ctx,
		"rg-example",
		"webtest-name-example",
		MetricAlertResource{
			Resource: Resource{
				Location: to.StringPtr("global"),
				Tags: map[string]*string{
					"hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example": to.StringPtr("Resource"),
					"hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example":      to.StringPtr("Resource"),
				},
			},
			Properties: &MetricAlertProperties{
				Description: to.StringPtr("Automatically created alert rule for availability test \"component-example\" a"),
				Actions:     []*MetricAlertAction{},
				Criteria: &WebtestLocationAvailabilityCriteria{
					MetricAlertCriteria: MetricAlertCriteria{
						MetricAlertCriteria: map[string]map[string]interface{}{
							"componentId": map[string]interface{}{
								"0":   "/",
								"1":   "s",
								"2":   "u",
								"3":   "b",
								"4":   "s",
								"5":   "c",
								"6":   "r",
								"7":   "i",
								"8":   "p",
								"9":   "t",
								"10":  "i",
								"11":  "o",
								"12":  "n",
								"13":  "s",
								"14":  "/",
								"15":  "1",
								"16":  "2",
								"17":  "3",
								"18":  "4",
								"19":  "5",
								"20":  "6",
								"21":  "7",
								"22":  "8",
								"23":  "-",
								"24":  "1",
								"25":  "2",
								"26":  "3",
								"27":  "4",
								"28":  "-",
								"29":  "1",
								"30":  "2",
								"31":  "3",
								"32":  "4",
								"33":  "-",
								"34":  "1",
								"35":  "2",
								"36":  "3",
								"37":  "4",
								"38":  "-",
								"39":  "1",
								"40":  "2",
								"41":  "3",
								"42":  "4",
								"43":  "5",
								"44":  "6",
								"45":  "7",
								"46":  "8",
								"47":  "9",
								"48":  "1",
								"49":  "0",
								"50":  "1",
								"51":  "/",
								"52":  "r",
								"53":  "e",
								"54":  "s",
								"55":  "o",
								"56":  "u",
								"57":  "r",
								"58":  "c",
								"59":  "e",
								"60":  "g",
								"61":  "r",
								"62":  "o",
								"63":  "u",
								"64":  "p",
								"65":  "s",
								"66":  "/",
								"67":  "r",
								"68":  "g",
								"69":  "-",
								"70":  "e",
								"71":  "x",
								"72":  "a",
								"73":  "m",
								"74":  "p",
								"75":  "l",
								"76":  "e",
								"77":  "/",
								"78":  "p",
								"79":  "r",
								"80":  "o",
								"81":  "v",
								"82":  "i",
								"83":  "d",
								"84":  "e",
								"85":  "r",
								"86":  "s",
								"87":  "/",
								"88":  "m",
								"89":  "i",
								"90":  "c",
								"91":  "r",
								"92":  "o",
								"93":  "s",
								"94":  "o",
								"95":  "f",
								"96":  "t",
								"97":  ".",
								"98":  "i",
								"99":  "n",
								"100": "s",
								"101": "i",
								"102": "g",
								"103": "h",
								"104": "t",
								"105": "s",
								"106": "/",
								"107": "c",
								"108": "o",
								"109": "m",
								"110": "p",
								"111": "o",
								"112": "n",
								"113": "e",
								"114": "n",
								"115": "t",
								"116": "s",
								"117": "/",
								"118": "w",
								"119": "e",
								"120": "b",
								"121": "t",
								"122": "e",
								"123": "s",
								"124": "t",
								"125": "-",
								"126": "n",
								"127": "a",
								"128": "m",
								"129": "e",
								"130": "-",
								"131": "e",
								"132": "x",
								"133": "a",
								"134": "m",
								"135": "p",
								"136": "l",
								"137": "e",
							},
							"failedLocationCount": map[string]interface{}{},
							"odata.type": map[string]interface{}{
								"0":  "M",
								"1":  "i",
								"2":  "c",
								"3":  "r",
								"4":  "o",
								"5":  "s",
								"6":  "o",
								"7":  "f",
								"8":  "t",
								"9":  ".",
								"10": "A",
								"11": "z",
								"12": "u",
								"13": "r",
								"14": "e",
								"15": ".",
								"16": "M",
								"17": "o",
								"18": "n",
								"19": "i",
								"20": "t",
								"21": "o",
								"22": "r",
								"23": ".",
								"24": "W",
								"25": "e",
								"26": "b",
								"27": "t",
								"28": "e",
								"29": "s",
								"30": "t",
								"31": "L",
								"32": "o",
								"33": "c",
								"34": "a",
								"35": "t",
								"36": "i",
								"37": "o",
								"38": "n",
								"39": "A",
								"40": "v",
								"41": "a",
								"42": "i",
								"43": "l",
								"44": "a",
								"45": "b",
								"46": "i",
								"47": "l",
								"48": "i",
								"49": "t",
								"50": "y",
								"51": "C",
								"52": "r",
								"53": "i",
								"54": "t",
								"55": "e",
								"56": "r",
								"57": "i",
								"58": "a",
							},
							"webTestId": map[string]interface{}{
								"0":   "/",
								"1":   "s",
								"2":   "u",
								"3":   "b",
								"4":   "s",
								"5":   "c",
								"6":   "r",
								"7":   "i",
								"8":   "p",
								"9":   "t",
								"10":  "i",
								"11":  "o",
								"12":  "n",
								"13":  "s",
								"14":  "/",
								"15":  "1",
								"16":  "2",
								"17":  "3",
								"18":  "4",
								"19":  "5",
								"20":  "6",
								"21":  "7",
								"22":  "8",
								"23":  "-",
								"24":  "1",
								"25":  "2",
								"26":  "3",
								"27":  "4",
								"28":  "-",
								"29":  "1",
								"30":  "2",
								"31":  "3",
								"32":  "4",
								"33":  "-",
								"34":  "1",
								"35":  "2",
								"36":  "3",
								"37":  "4",
								"38":  "-",
								"39":  "1",
								"40":  "2",
								"41":  "3",
								"42":  "4",
								"43":  "5",
								"44":  "6",
								"45":  "7",
								"46":  "8",
								"47":  "9",
								"48":  "1",
								"49":  "0",
								"50":  "1",
								"51":  "/",
								"52":  "r",
								"53":  "e",
								"54":  "s",
								"55":  "o",
								"56":  "u",
								"57":  "r",
								"58":  "c",
								"59":  "e",
								"60":  "g",
								"61":  "r",
								"62":  "o",
								"63":  "u",
								"64":  "p",
								"65":  "s",
								"66":  "/",
								"67":  "r",
								"68":  "g",
								"69":  "-",
								"70":  "e",
								"71":  "x",
								"72":  "a",
								"73":  "m",
								"74":  "p",
								"75":  "l",
								"76":  "e",
								"77":  "/",
								"78":  "p",
								"79":  "r",
								"80":  "o",
								"81":  "v",
								"82":  "i",
								"83":  "d",
								"84":  "e",
								"85":  "r",
								"86":  "s",
								"87":  "/",
								"88":  "m",
								"89":  "i",
								"90":  "c",
								"91":  "r",
								"92":  "o",
								"93":  "s",
								"94":  "o",
								"95":  "f",
								"96":  "t",
								"97":  ".",
								"98":  "i",
								"99":  "n",
								"100": "s",
								"101": "i",
								"102": "g",
								"103": "h",
								"104": "t",
								"105": "s",
								"106": "/",
								"107": "w",
								"108": "e",
								"109": "b",
								"110": "t",
								"111": "e",
								"112": "s",
								"113": "t",
								"114": "s",
								"115": "/",
								"116": "c",
								"117": "o",
								"118": "m",
								"119": "p",
								"120": "o",
								"121": "n",
								"122": "e",
								"123": "n",
								"124": "t",
								"125": "-",
								"126": "e",
								"127": "x",
								"128": "a",
								"129": "m",
								"130": "p",
								"131": "l",
								"132": "e",
							},
						},
						ODataType: OdatatypeMicrosoftAzureMonitorWebtestLocationAvailabilityCriteria.ToPtr(),
					},
					ComponentID:         to.StringPtr("/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example"),
					FailedLocationCount: to.Float32Ptr(2),
					WebTestID:           to.StringPtr("/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example"),
				},
				Enabled:             to.BoolPtr(true),
				EvaluationFrequency: to.StringPtr("PT1M"),
				Scopes: []*string{
					to.StringPtr("/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example"),
					to.StringPtr("/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example")},
				Severity:   to.Int32Ptr(4),
				WindowSize: to.StringPtr("PT15M"),
			},
		},
		&MetricAlertsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MetricAlertResource.ID == nil {
		t.Fatal("MetricAlertResource.ID should not be nil!")
	}

	// From example Create or update an alert rule for Multiple Resource
	res, err = client.CreateOrUpdate(ctx,
		"gigtest",
		"MetricAlertOnMultipleResources",
		MetricAlertResource{
			Resource: Resource{
				Location: to.StringPtr("global"),
				Tags:     map[string]*string{},
			},
			Properties: &MetricAlertProperties{
				Description: to.StringPtr("This is the description of the rule1"),
				Actions: []*MetricAlertAction{
					{
						ActionGroupID: to.StringPtr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.StringPtr("value11"),
							"key12": to.StringPtr("value12"),
						},
					}},
				AutoMitigate: to.BoolPtr(true),
				Criteria: &MetricAlertMultipleResourceMultipleMetricCriteria{
					MetricAlertCriteria: MetricAlertCriteria{
						MetricAlertCriteria: map[string]map[string]interface{}{
							"allOf": map[string]interface{}{
								"0": map[string]interface{}{
									"name":            "High_CPU_80",
									"criterionType":   "StaticThresholdCriterion",
									"dimensions":      []interface{}{},
									"metricName":      "Percentage CPU",
									"metricNamespace": "microsoft.compute/virtualmachines",
									"operator":        "GreaterThan",
									"threshold":       80.5,
									"timeAggregation": "Average",
								},
							},
							"odata.type": map[string]interface{}{
								"0":  "M",
								"1":  "i",
								"2":  "c",
								"3":  "r",
								"4":  "o",
								"5":  "s",
								"6":  "o",
								"7":  "f",
								"8":  "t",
								"9":  ".",
								"10": "A",
								"11": "z",
								"12": "u",
								"13": "r",
								"14": "e",
								"15": ".",
								"16": "M",
								"17": "o",
								"18": "n",
								"19": "i",
								"20": "t",
								"21": "o",
								"22": "r",
								"23": ".",
								"24": "M",
								"25": "u",
								"26": "l",
								"27": "t",
								"28": "i",
								"29": "p",
								"30": "l",
								"31": "e",
								"32": "R",
								"33": "e",
								"34": "s",
								"35": "o",
								"36": "u",
								"37": "r",
								"38": "c",
								"39": "e",
								"40": "M",
								"41": "u",
								"42": "l",
								"43": "t",
								"44": "i",
								"45": "p",
								"46": "l",
								"47": "e",
								"48": "M",
								"49": "e",
								"50": "t",
								"51": "r",
								"52": "i",
								"53": "c",
								"54": "C",
								"55": "r",
								"56": "i",
								"57": "t",
								"58": "e",
								"59": "r",
								"60": "i",
								"61": "a",
							},
						},
						ODataType: OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria.ToPtr(),
					},
					AllOf: []MultiMetricCriteria{
						{
							MultiMetricCriteria: MultiMetricCriteria{
								MultiMetricCriteria: map[string]map[string]interface{}{
									"name": map[string]interface{}{
										"0":  "H",
										"1":  "i",
										"2":  "g",
										"3":  "h",
										"4":  "_",
										"5":  "C",
										"6":  "P",
										"7":  "U",
										"8":  "_",
										"9":  "8",
										"10": "0",
									},
									"criterionType": map[string]interface{}{
										"0":  "S",
										"1":  "t",
										"2":  "a",
										"3":  "t",
										"4":  "i",
										"5":  "c",
										"6":  "T",
										"7":  "h",
										"8":  "r",
										"9":  "e",
										"10": "s",
										"11": "h",
										"12": "o",
										"13": "l",
										"14": "d",
										"15": "C",
										"16": "r",
										"17": "i",
										"18": "t",
										"19": "e",
										"20": "r",
										"21": "i",
										"22": "o",
										"23": "n",
									},
									"dimensions": map[string]interface{}{},
									"metricName": map[string]interface{}{
										"0":  "P",
										"1":  "e",
										"2":  "r",
										"3":  "c",
										"4":  "e",
										"5":  "n",
										"6":  "t",
										"7":  "a",
										"8":  "g",
										"9":  "e",
										"10": " ",
										"11": "C",
										"12": "P",
										"13": "U",
									},
									"metricNamespace": map[string]interface{}{
										"0":  "m",
										"1":  "i",
										"2":  "c",
										"3":  "r",
										"4":  "o",
										"5":  "s",
										"6":  "o",
										"7":  "f",
										"8":  "t",
										"9":  ".",
										"10": "c",
										"11": "o",
										"12": "m",
										"13": "p",
										"14": "u",
										"15": "t",
										"16": "e",
										"17": "/",
										"18": "v",
										"19": "i",
										"20": "r",
										"21": "t",
										"22": "u",
										"23": "a",
										"24": "l",
										"25": "m",
										"26": "a",
										"27": "c",
										"28": "h",
										"29": "i",
										"30": "n",
										"31": "e",
										"32": "s",
									},
									"operator": map[string]interface{}{
										"0":  "G",
										"1":  "r",
										"2":  "e",
										"3":  "a",
										"4":  "t",
										"5":  "e",
										"6":  "r",
										"7":  "T",
										"8":  "h",
										"9":  "a",
										"10": "n",
									},
									"threshold": map[string]interface{}{},
									"timeAggregation": map[string]interface{}{
										"0": "A",
										"1": "v",
										"2": "e",
										"3": "r",
										"4": "a",
										"5": "g",
										"6": "e",
									},
								},
								Name:            to.StringPtr("High_CPU_80"),
								CriterionType:   CriterionTypeStaticThresholdCriterion.ToPtr(),
								Dimensions:      []*MetricDimension{},
								MetricName:      to.StringPtr("Percentage CPU"),
								MetricNamespace: to.StringPtr("microsoft.compute/virtualmachines"),
								TimeAggregation: AggregationTypeEnumAverage.ToPtr(),
							},
							Operator:  OperatorGreaterThan.ToPtr(),
							Threshold: to.Float64Ptr(80.5),
						}},
				},
				Enabled:             to.BoolPtr(true),
				EvaluationFrequency: to.StringPtr("PT1M"),
				Scopes: []*string{
					to.StringPtr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1"),
					to.StringPtr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2")},
				Severity:             to.Int32Ptr(3),
				TargetResourceRegion: to.StringPtr("southcentralus"),
				TargetResourceType:   to.StringPtr("Microsoft.Compute/virtualMachines"),
				WindowSize:           to.StringPtr("PT15M"),
			},
		},
		&MetricAlertsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MetricAlertResource.ID == nil {
		t.Fatal("MetricAlertResource.ID should not be nil!")
	}

	// From example Create or update an alert rule for Single Resource
	res, err = client.CreateOrUpdate(ctx,
		"gigtest",
		"chiricutin",
		MetricAlertResource{
			Resource: Resource{
				Location: to.StringPtr("global"),
				Tags:     map[string]*string{},
			},
			Properties: &MetricAlertProperties{
				Description: to.StringPtr("This is the description of the rule1"),
				Actions: []*MetricAlertAction{
					{
						ActionGroupID: to.StringPtr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.StringPtr("value11"),
							"key12": to.StringPtr("value12"),
						},
					}},
				AutoMitigate: to.BoolPtr(true),
				Criteria: &MetricAlertSingleResourceMultipleMetricCriteria{
					MetricAlertCriteria: MetricAlertCriteria{
						MetricAlertCriteria: map[string]map[string]interface{}{
							"allOf": map[string]interface{}{
								"0": map[string]interface{}{
									"name":            "High_CPU_80",
									"criterionType":   "StaticThresholdCriterion",
									"dimensions":      []interface{}{},
									"metricName":      "\\Processor(_Total)\\% Processor Time",
									"operator":        "GreaterThan",
									"threshold":       80.5,
									"timeAggregation": "Average",
								},
							},
							"odata.type": map[string]interface{}{
								"0":  "M",
								"1":  "i",
								"2":  "c",
								"3":  "r",
								"4":  "o",
								"5":  "s",
								"6":  "o",
								"7":  "f",
								"8":  "t",
								"9":  ".",
								"10": "A",
								"11": "z",
								"12": "u",
								"13": "r",
								"14": "e",
								"15": ".",
								"16": "M",
								"17": "o",
								"18": "n",
								"19": "i",
								"20": "t",
								"21": "o",
								"22": "r",
								"23": ".",
								"24": "S",
								"25": "i",
								"26": "n",
								"27": "g",
								"28": "l",
								"29": "e",
								"30": "R",
								"31": "e",
								"32": "s",
								"33": "o",
								"34": "u",
								"35": "r",
								"36": "c",
								"37": "e",
								"38": "M",
								"39": "u",
								"40": "l",
								"41": "t",
								"42": "i",
								"43": "p",
								"44": "l",
								"45": "e",
								"46": "M",
								"47": "e",
								"48": "t",
								"49": "r",
								"50": "i",
								"51": "c",
								"52": "C",
								"53": "r",
								"54": "i",
								"55": "t",
								"56": "e",
								"57": "r",
								"58": "i",
								"59": "a",
							},
						},
						ODataType: OdatatypeMicrosoftAzureMonitorSingleResourceMultipleMetricCriteria.ToPtr(),
					},
					AllOf: []*MetricCriteria{
						{
							MultiMetricCriteria: MultiMetricCriteria{
								MultiMetricCriteria: map[string]map[string]interface{}{
									"name": map[string]interface{}{
										"0":  "H",
										"1":  "i",
										"2":  "g",
										"3":  "h",
										"4":  "_",
										"5":  "C",
										"6":  "P",
										"7":  "U",
										"8":  "_",
										"9":  "8",
										"10": "0",
									},
									"criterionType": map[string]interface{}{
										"0":  "S",
										"1":  "t",
										"2":  "a",
										"3":  "t",
										"4":  "i",
										"5":  "c",
										"6":  "T",
										"7":  "h",
										"8":  "r",
										"9":  "e",
										"10": "s",
										"11": "h",
										"12": "o",
										"13": "l",
										"14": "d",
										"15": "C",
										"16": "r",
										"17": "i",
										"18": "t",
										"19": "e",
										"20": "r",
										"21": "i",
										"22": "o",
										"23": "n",
									},
									"dimensions": map[string]interface{}{},
									"metricName": map[string]interface{}{
										"0":  "\\",
										"1":  "P",
										"2":  "r",
										"3":  "o",
										"4":  "c",
										"5":  "e",
										"6":  "s",
										"7":  "s",
										"8":  "o",
										"9":  "r",
										"10": "(",
										"11": "_",
										"12": "T",
										"13": "o",
										"14": "t",
										"15": "a",
										"16": "l",
										"17": ")",
										"18": "\\",
										"19": "%",
										"20": " ",
										"21": "P",
										"22": "r",
										"23": "o",
										"24": "c",
										"25": "e",
										"26": "s",
										"27": "s",
										"28": "o",
										"29": "r",
										"30": " ",
										"31": "T",
										"32": "i",
										"33": "m",
										"34": "e",
									},
									"operator": map[string]interface{}{
										"0":  "G",
										"1":  "r",
										"2":  "e",
										"3":  "a",
										"4":  "t",
										"5":  "e",
										"6":  "r",
										"7":  "T",
										"8":  "h",
										"9":  "a",
										"10": "n",
									},
									"threshold": map[string]interface{}{},
									"timeAggregation": map[string]interface{}{
										"0": "A",
										"1": "v",
										"2": "e",
										"3": "r",
										"4": "a",
										"5": "g",
										"6": "e",
									},
								},
								Name:            to.StringPtr("High_CPU_80"),
								CriterionType:   CriterionTypeStaticThresholdCriterion.ToPtr(),
								Dimensions:      []*MetricDimension{},
								MetricName:      to.StringPtr("\\Processor(_Total)\\% Processor Time"),
								TimeAggregation: AggregationTypeEnumAverage.ToPtr(),
							},
							Operator:  OperatorGreaterThan.ToPtr(),
							Threshold: to.Float64Ptr(80.5),
						}},
				},
				Enabled:             to.BoolPtr(true),
				EvaluationFrequency: to.StringPtr("Pt1m"),
				Scopes: []*string{
					to.StringPtr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme")},
				Severity:   to.Int32Ptr(3),
				WindowSize: to.StringPtr("Pt15m"),
			},
		},
		&MetricAlertsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MetricAlertResource.ID == nil {
		t.Fatal("MetricAlertResource.ID should not be nil!")
	}

	// From example Create or update an alert rule on Resource group(s)
	res, err = client.CreateOrUpdate(ctx,
		"gigtest1",
		"MetricAlertAtResourceGroupLevel",
		MetricAlertResource{
			Resource: Resource{
				Location: to.StringPtr("global"),
				Tags:     map[string]*string{},
			},
			Properties: &MetricAlertProperties{
				Description: to.StringPtr("This is the description of the rule1"),
				Actions: []*MetricAlertAction{
					{
						ActionGroupID: to.StringPtr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.StringPtr("value11"),
							"key12": to.StringPtr("value12"),
						},
					}},
				AutoMitigate: to.BoolPtr(true),
				Criteria: &MetricAlertMultipleResourceMultipleMetricCriteria{
					MetricAlertCriteria: MetricAlertCriteria{
						MetricAlertCriteria: map[string]map[string]interface{}{
							"allOf": map[string]interface{}{
								"0": map[string]interface{}{
									"name":            "High_CPU_80",
									"criterionType":   "StaticThresholdCriterion",
									"dimensions":      []interface{}{},
									"metricName":      "Percentage CPU",
									"metricNamespace": "microsoft.compute/virtualmachines",
									"operator":        "GreaterThan",
									"threshold":       80.5,
									"timeAggregation": "Average",
								},
							},
							"odata.type": map[string]interface{}{
								"0":  "M",
								"1":  "i",
								"2":  "c",
								"3":  "r",
								"4":  "o",
								"5":  "s",
								"6":  "o",
								"7":  "f",
								"8":  "t",
								"9":  ".",
								"10": "A",
								"11": "z",
								"12": "u",
								"13": "r",
								"14": "e",
								"15": ".",
								"16": "M",
								"17": "o",
								"18": "n",
								"19": "i",
								"20": "t",
								"21": "o",
								"22": "r",
								"23": ".",
								"24": "M",
								"25": "u",
								"26": "l",
								"27": "t",
								"28": "i",
								"29": "p",
								"30": "l",
								"31": "e",
								"32": "R",
								"33": "e",
								"34": "s",
								"35": "o",
								"36": "u",
								"37": "r",
								"38": "c",
								"39": "e",
								"40": "M",
								"41": "u",
								"42": "l",
								"43": "t",
								"44": "i",
								"45": "p",
								"46": "l",
								"47": "e",
								"48": "M",
								"49": "e",
								"50": "t",
								"51": "r",
								"52": "i",
								"53": "c",
								"54": "C",
								"55": "r",
								"56": "i",
								"57": "t",
								"58": "e",
								"59": "r",
								"60": "i",
								"61": "a",
							},
						},
						ODataType: OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria.ToPtr(),
					},
					AllOf: []MultiMetricCriteria{
						{
							MultiMetricCriteria: MultiMetricCriteria{
								MultiMetricCriteria: map[string]map[string]interface{}{
									"name": map[string]interface{}{
										"0":  "H",
										"1":  "i",
										"2":  "g",
										"3":  "h",
										"4":  "_",
										"5":  "C",
										"6":  "P",
										"7":  "U",
										"8":  "_",
										"9":  "8",
										"10": "0",
									},
									"criterionType": map[string]interface{}{
										"0":  "S",
										"1":  "t",
										"2":  "a",
										"3":  "t",
										"4":  "i",
										"5":  "c",
										"6":  "T",
										"7":  "h",
										"8":  "r",
										"9":  "e",
										"10": "s",
										"11": "h",
										"12": "o",
										"13": "l",
										"14": "d",
										"15": "C",
										"16": "r",
										"17": "i",
										"18": "t",
										"19": "e",
										"20": "r",
										"21": "i",
										"22": "o",
										"23": "n",
									},
									"dimensions": map[string]interface{}{},
									"metricName": map[string]interface{}{
										"0":  "P",
										"1":  "e",
										"2":  "r",
										"3":  "c",
										"4":  "e",
										"5":  "n",
										"6":  "t",
										"7":  "a",
										"8":  "g",
										"9":  "e",
										"10": " ",
										"11": "C",
										"12": "P",
										"13": "U",
									},
									"metricNamespace": map[string]interface{}{
										"0":  "m",
										"1":  "i",
										"2":  "c",
										"3":  "r",
										"4":  "o",
										"5":  "s",
										"6":  "o",
										"7":  "f",
										"8":  "t",
										"9":  ".",
										"10": "c",
										"11": "o",
										"12": "m",
										"13": "p",
										"14": "u",
										"15": "t",
										"16": "e",
										"17": "/",
										"18": "v",
										"19": "i",
										"20": "r",
										"21": "t",
										"22": "u",
										"23": "a",
										"24": "l",
										"25": "m",
										"26": "a",
										"27": "c",
										"28": "h",
										"29": "i",
										"30": "n",
										"31": "e",
										"32": "s",
									},
									"operator": map[string]interface{}{
										"0":  "G",
										"1":  "r",
										"2":  "e",
										"3":  "a",
										"4":  "t",
										"5":  "e",
										"6":  "r",
										"7":  "T",
										"8":  "h",
										"9":  "a",
										"10": "n",
									},
									"threshold": map[string]interface{}{},
									"timeAggregation": map[string]interface{}{
										"0": "A",
										"1": "v",
										"2": "e",
										"3": "r",
										"4": "a",
										"5": "g",
										"6": "e",
									},
								},
								Name:            to.StringPtr("High_CPU_80"),
								CriterionType:   CriterionTypeStaticThresholdCriterion.ToPtr(),
								Dimensions:      []*MetricDimension{},
								MetricName:      to.StringPtr("Percentage CPU"),
								MetricNamespace: to.StringPtr("microsoft.compute/virtualmachines"),
								TimeAggregation: AggregationTypeEnumAverage.ToPtr(),
							},
							Operator:  OperatorGreaterThan.ToPtr(),
							Threshold: to.Float64Ptr(80.5),
						}},
				},
				Enabled:             to.BoolPtr(true),
				EvaluationFrequency: to.StringPtr("PT1M"),
				Scopes: []*string{
					to.StringPtr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest1"),
					to.StringPtr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest2")},
				Severity:             to.Int32Ptr(3),
				TargetResourceRegion: to.StringPtr("southcentralus"),
				TargetResourceType:   to.StringPtr("Microsoft.Compute/virtualMachines"),
				WindowSize:           to.StringPtr("PT15M"),
			},
		},
		&MetricAlertsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MetricAlertResource.ID == nil {
		t.Fatal("MetricAlertResource.ID should not be nil!")
	}

	// From example Create or update an alert rule on Subscription
	res, err = client.CreateOrUpdate(ctx,
		"gigtest",
		"MetricAlertAtSubscriptionLevel",
		MetricAlertResource{
			Resource: Resource{
				Location: to.StringPtr("global"),
				Tags:     map[string]*string{},
			},
			Properties: &MetricAlertProperties{
				Description: to.StringPtr("This is the description of the rule1"),
				Actions: []*MetricAlertAction{
					{
						ActionGroupID: to.StringPtr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.StringPtr("value11"),
							"key12": to.StringPtr("value12"),
						},
					}},
				AutoMitigate: to.BoolPtr(true),
				Criteria: &MetricAlertMultipleResourceMultipleMetricCriteria{
					MetricAlertCriteria: MetricAlertCriteria{
						MetricAlertCriteria: map[string]map[string]interface{}{
							"allOf": map[string]interface{}{
								"0": map[string]interface{}{
									"name":            "High_CPU_80",
									"criterionType":   "StaticThresholdCriterion",
									"dimensions":      []interface{}{},
									"metricName":      "Percentage CPU",
									"metricNamespace": "microsoft.compute/virtualmachines",
									"operator":        "GreaterThan",
									"threshold":       80.5,
									"timeAggregation": "Average",
								},
							},
							"odata.type": map[string]interface{}{
								"0":  "M",
								"1":  "i",
								"2":  "c",
								"3":  "r",
								"4":  "o",
								"5":  "s",
								"6":  "o",
								"7":  "f",
								"8":  "t",
								"9":  ".",
								"10": "A",
								"11": "z",
								"12": "u",
								"13": "r",
								"14": "e",
								"15": ".",
								"16": "M",
								"17": "o",
								"18": "n",
								"19": "i",
								"20": "t",
								"21": "o",
								"22": "r",
								"23": ".",
								"24": "M",
								"25": "u",
								"26": "l",
								"27": "t",
								"28": "i",
								"29": "p",
								"30": "l",
								"31": "e",
								"32": "R",
								"33": "e",
								"34": "s",
								"35": "o",
								"36": "u",
								"37": "r",
								"38": "c",
								"39": "e",
								"40": "M",
								"41": "u",
								"42": "l",
								"43": "t",
								"44": "i",
								"45": "p",
								"46": "l",
								"47": "e",
								"48": "M",
								"49": "e",
								"50": "t",
								"51": "r",
								"52": "i",
								"53": "c",
								"54": "C",
								"55": "r",
								"56": "i",
								"57": "t",
								"58": "e",
								"59": "r",
								"60": "i",
								"61": "a",
							},
						},
						ODataType: OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria.ToPtr(),
					},
					AllOf: []MultiMetricCriteria{
						{
							MultiMetricCriteria: MultiMetricCriteria{
								MultiMetricCriteria: map[string]map[string]interface{}{
									"name": map[string]interface{}{
										"0":  "H",
										"1":  "i",
										"2":  "g",
										"3":  "h",
										"4":  "_",
										"5":  "C",
										"6":  "P",
										"7":  "U",
										"8":  "_",
										"9":  "8",
										"10": "0",
									},
									"criterionType": map[string]interface{}{
										"0":  "S",
										"1":  "t",
										"2":  "a",
										"3":  "t",
										"4":  "i",
										"5":  "c",
										"6":  "T",
										"7":  "h",
										"8":  "r",
										"9":  "e",
										"10": "s",
										"11": "h",
										"12": "o",
										"13": "l",
										"14": "d",
										"15": "C",
										"16": "r",
										"17": "i",
										"18": "t",
										"19": "e",
										"20": "r",
										"21": "i",
										"22": "o",
										"23": "n",
									},
									"dimensions": map[string]interface{}{},
									"metricName": map[string]interface{}{
										"0":  "P",
										"1":  "e",
										"2":  "r",
										"3":  "c",
										"4":  "e",
										"5":  "n",
										"6":  "t",
										"7":  "a",
										"8":  "g",
										"9":  "e",
										"10": " ",
										"11": "C",
										"12": "P",
										"13": "U",
									},
									"metricNamespace": map[string]interface{}{
										"0":  "m",
										"1":  "i",
										"2":  "c",
										"3":  "r",
										"4":  "o",
										"5":  "s",
										"6":  "o",
										"7":  "f",
										"8":  "t",
										"9":  ".",
										"10": "c",
										"11": "o",
										"12": "m",
										"13": "p",
										"14": "u",
										"15": "t",
										"16": "e",
										"17": "/",
										"18": "v",
										"19": "i",
										"20": "r",
										"21": "t",
										"22": "u",
										"23": "a",
										"24": "l",
										"25": "m",
										"26": "a",
										"27": "c",
										"28": "h",
										"29": "i",
										"30": "n",
										"31": "e",
										"32": "s",
									},
									"operator": map[string]interface{}{
										"0":  "G",
										"1":  "r",
										"2":  "e",
										"3":  "a",
										"4":  "t",
										"5":  "e",
										"6":  "r",
										"7":  "T",
										"8":  "h",
										"9":  "a",
										"10": "n",
									},
									"threshold": map[string]interface{}{},
									"timeAggregation": map[string]interface{}{
										"0": "A",
										"1": "v",
										"2": "e",
										"3": "r",
										"4": "a",
										"5": "g",
										"6": "e",
									},
								},
								Name:            to.StringPtr("High_CPU_80"),
								CriterionType:   CriterionTypeStaticThresholdCriterion.ToPtr(),
								Dimensions:      []*MetricDimension{},
								MetricName:      to.StringPtr("Percentage CPU"),
								MetricNamespace: to.StringPtr("microsoft.compute/virtualmachines"),
								TimeAggregation: AggregationTypeEnumAverage.ToPtr(),
							},
							Operator:  OperatorGreaterThan.ToPtr(),
							Threshold: to.Float64Ptr(80.5),
						}},
				},
				Enabled:             to.BoolPtr(true),
				EvaluationFrequency: to.StringPtr("PT1M"),
				Scopes: []*string{
					to.StringPtr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7")},
				Severity:             to.Int32Ptr(3),
				TargetResourceRegion: to.StringPtr("southcentralus"),
				TargetResourceType:   to.StringPtr("Microsoft.Compute/virtualMachines"),
				WindowSize:           to.StringPtr("PT15M"),
			},
		},
		&MetricAlertsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MetricAlertResource.ID == nil {
		t.Fatal("MetricAlertResource.ID should not be nil!")
	}

	// From example Create or update an alert rules with dimensions
	res, err = client.CreateOrUpdate(ctx,
		"gigtest",
		"MetricAlertOnMultipleDimensions",
		MetricAlertResource{
			Resource: Resource{
				Location: to.StringPtr("global"),
				Tags:     map[string]*string{},
			},
			Properties: &MetricAlertProperties{
				Description: to.StringPtr("This is the description of the rule1"),
				Actions: []*MetricAlertAction{
					{
						ActionGroupID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.StringPtr("value11"),
							"key12": to.StringPtr("value12"),
						},
					}},
				AutoMitigate: to.BoolPtr(true),
				Criteria: &MetricAlertMultipleResourceMultipleMetricCriteria{
					MetricAlertCriteria: MetricAlertCriteria{
						MetricAlertCriteria: map[string]map[string]interface{}{
							"allOf": map[string]interface{}{
								"0": map[string]interface{}{
									"name":          "Metric1",
									"criterionType": "StaticThresholdCriterion",
									"dimensions": []interface{}{
										map[string]interface{}{
											"name":     "ActivityName",
											"operator": "Include",
											"values": []interface{}{
												"*",
											},
										},
										map[string]interface{}{
											"name":     "StatusCode",
											"operator": "Include",
											"values": []interface{}{
												"200",
											},
										},
									},
									"metricName":      "Availability",
									"metricNamespace": "Microsoft.KeyVault/vaults",
									"operator":        "GreaterThan",
									"threshold":       55,
									"timeAggregation": "Average",
								},
							},
							"odata.type": map[string]interface{}{
								"0":  "M",
								"1":  "i",
								"2":  "c",
								"3":  "r",
								"4":  "o",
								"5":  "s",
								"6":  "o",
								"7":  "f",
								"8":  "t",
								"9":  ".",
								"10": "A",
								"11": "z",
								"12": "u",
								"13": "r",
								"14": "e",
								"15": ".",
								"16": "M",
								"17": "o",
								"18": "n",
								"19": "i",
								"20": "t",
								"21": "o",
								"22": "r",
								"23": ".",
								"24": "M",
								"25": "u",
								"26": "l",
								"27": "t",
								"28": "i",
								"29": "p",
								"30": "l",
								"31": "e",
								"32": "R",
								"33": "e",
								"34": "s",
								"35": "o",
								"36": "u",
								"37": "r",
								"38": "c",
								"39": "e",
								"40": "M",
								"41": "u",
								"42": "l",
								"43": "t",
								"44": "i",
								"45": "p",
								"46": "l",
								"47": "e",
								"48": "M",
								"49": "e",
								"50": "t",
								"51": "r",
								"52": "i",
								"53": "c",
								"54": "C",
								"55": "r",
								"56": "i",
								"57": "t",
								"58": "e",
								"59": "r",
								"60": "i",
								"61": "a",
							},
						},
						ODataType: OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria.ToPtr(),
					},
					AllOf: []MultiMetricCriteria{
						{
							MultiMetricCriteria: MultiMetricCriteria{
								MultiMetricCriteria: map[string]map[string]interface{}{
									"name": map[string]interface{}{
										"0": "M",
										"1": "e",
										"2": "t",
										"3": "r",
										"4": "i",
										"5": "c",
										"6": "1",
									},
									"criterionType": map[string]interface{}{
										"0":  "S",
										"1":  "t",
										"2":  "a",
										"3":  "t",
										"4":  "i",
										"5":  "c",
										"6":  "T",
										"7":  "h",
										"8":  "r",
										"9":  "e",
										"10": "s",
										"11": "h",
										"12": "o",
										"13": "l",
										"14": "d",
										"15": "C",
										"16": "r",
										"17": "i",
										"18": "t",
										"19": "e",
										"20": "r",
										"21": "i",
										"22": "o",
										"23": "n",
									},
									"dimensions": map[string]interface{}{
										"0": map[string]interface{}{
											"name":     "ActivityName",
											"operator": "Include",
											"values": []interface{}{
												"*",
											},
										},
										"1": map[string]interface{}{
											"name":     "StatusCode",
											"operator": "Include",
											"values": []interface{}{
												"200",
											},
										},
									},
									"metricName": map[string]interface{}{
										"0":  "A",
										"1":  "v",
										"2":  "a",
										"3":  "i",
										"4":  "l",
										"5":  "a",
										"6":  "b",
										"7":  "i",
										"8":  "l",
										"9":  "i",
										"10": "t",
										"11": "y",
									},
									"metricNamespace": map[string]interface{}{
										"0":  "M",
										"1":  "i",
										"2":  "c",
										"3":  "r",
										"4":  "o",
										"5":  "s",
										"6":  "o",
										"7":  "f",
										"8":  "t",
										"9":  ".",
										"10": "K",
										"11": "e",
										"12": "y",
										"13": "V",
										"14": "a",
										"15": "u",
										"16": "l",
										"17": "t",
										"18": "/",
										"19": "v",
										"20": "a",
										"21": "u",
										"22": "l",
										"23": "t",
										"24": "s",
									},
									"operator": map[string]interface{}{
										"0":  "G",
										"1":  "r",
										"2":  "e",
										"3":  "a",
										"4":  "t",
										"5":  "e",
										"6":  "r",
										"7":  "T",
										"8":  "h",
										"9":  "a",
										"10": "n",
									},
									"threshold": map[string]interface{}{},
									"timeAggregation": map[string]interface{}{
										"0": "A",
										"1": "v",
										"2": "e",
										"3": "r",
										"4": "a",
										"5": "g",
										"6": "e",
									},
								},
								Name:          to.StringPtr("Metric1"),
								CriterionType: CriterionTypeStaticThresholdCriterion.ToPtr(),
								Dimensions: []*MetricDimension{
									{
										Name:     to.StringPtr("ActivityName"),
										Operator: to.StringPtr("Include"),
										Values: []*string{
											to.StringPtr("*")},
									},
									{
										Name:     to.StringPtr("StatusCode"),
										Operator: to.StringPtr("Include"),
										Values: []*string{
											to.StringPtr("200")},
									}},
								MetricName:      to.StringPtr("Availability"),
								MetricNamespace: to.StringPtr("Microsoft.KeyVault/vaults"),
								TimeAggregation: AggregationTypeEnumAverage.ToPtr(),
							},
							Operator:  OperatorGreaterThan.ToPtr(),
							Threshold: to.Float64Ptr(55),
						}},
				},
				Enabled:             to.BoolPtr(true),
				EvaluationFrequency: to.StringPtr("PT1H"),
				Scopes: []*string{
					to.StringPtr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.KeyVault/vaults/keyVaultResource")},
				Severity:   to.Int32Ptr(3),
				WindowSize: to.StringPtr("P1D"),
			},
		},
		&MetricAlertsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MetricAlertResource.ID == nil {
		t.Fatal("MetricAlertResource.ID should not be nil!")
	}
}

func TestMetricAlerts_Update(t *testing.T) {
	// From example Create or update an alert rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMetricAlertsClient(con,
		"14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7")
	res, err := client.Update(ctx,
		"gigtest",
		"chiricutin",
		MetricAlertResourcePatch{
			Properties: &MetricAlertPropertiesPatch{
				Description: to.StringPtr("This is the description of the rule1"),
				Actions: []*MetricAlertAction{
					{
						ActionGroupID: to.StringPtr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
						WebHookProperties: map[string]*string{
							"key11": to.StringPtr("value11"),
							"key12": to.StringPtr("value12"),
						},
					}},
				AutoMitigate: to.BoolPtr(true),
				Criteria: &MetricAlertSingleResourceMultipleMetricCriteria{
					MetricAlertCriteria: MetricAlertCriteria{
						MetricAlertCriteria: map[string]map[string]interface{}{
							"allOf": map[string]interface{}{
								"0": map[string]interface{}{
									"name":            "High_CPU_80",
									"criterionType":   "StaticThresholdCriterion",
									"dimensions":      []interface{}{},
									"metricName":      "\\Processor(_Total)\\% Processor Time",
									"operator":        "GreaterThan",
									"threshold":       80.5,
									"timeAggregation": "Average",
								},
							},
							"odata.type": map[string]interface{}{
								"0":  "M",
								"1":  "i",
								"2":  "c",
								"3":  "r",
								"4":  "o",
								"5":  "s",
								"6":  "o",
								"7":  "f",
								"8":  "t",
								"9":  ".",
								"10": "A",
								"11": "z",
								"12": "u",
								"13": "r",
								"14": "e",
								"15": ".",
								"16": "M",
								"17": "o",
								"18": "n",
								"19": "i",
								"20": "t",
								"21": "o",
								"22": "r",
								"23": ".",
								"24": "S",
								"25": "i",
								"26": "n",
								"27": "g",
								"28": "l",
								"29": "e",
								"30": "R",
								"31": "e",
								"32": "s",
								"33": "o",
								"34": "u",
								"35": "r",
								"36": "c",
								"37": "e",
								"38": "M",
								"39": "u",
								"40": "l",
								"41": "t",
								"42": "i",
								"43": "p",
								"44": "l",
								"45": "e",
								"46": "M",
								"47": "e",
								"48": "t",
								"49": "r",
								"50": "i",
								"51": "c",
								"52": "C",
								"53": "r",
								"54": "i",
								"55": "t",
								"56": "e",
								"57": "r",
								"58": "i",
								"59": "a",
							},
						},
						ODataType: OdatatypeMicrosoftAzureMonitorSingleResourceMultipleMetricCriteria.ToPtr(),
					},
					AllOf: []*MetricCriteria{
						{
							MultiMetricCriteria: MultiMetricCriteria{
								MultiMetricCriteria: map[string]map[string]interface{}{
									"name": map[string]interface{}{
										"0":  "H",
										"1":  "i",
										"2":  "g",
										"3":  "h",
										"4":  "_",
										"5":  "C",
										"6":  "P",
										"7":  "U",
										"8":  "_",
										"9":  "8",
										"10": "0",
									},
									"criterionType": map[string]interface{}{
										"0":  "S",
										"1":  "t",
										"2":  "a",
										"3":  "t",
										"4":  "i",
										"5":  "c",
										"6":  "T",
										"7":  "h",
										"8":  "r",
										"9":  "e",
										"10": "s",
										"11": "h",
										"12": "o",
										"13": "l",
										"14": "d",
										"15": "C",
										"16": "r",
										"17": "i",
										"18": "t",
										"19": "e",
										"20": "r",
										"21": "i",
										"22": "o",
										"23": "n",
									},
									"dimensions": map[string]interface{}{},
									"metricName": map[string]interface{}{
										"0":  "\\",
										"1":  "P",
										"2":  "r",
										"3":  "o",
										"4":  "c",
										"5":  "e",
										"6":  "s",
										"7":  "s",
										"8":  "o",
										"9":  "r",
										"10": "(",
										"11": "_",
										"12": "T",
										"13": "o",
										"14": "t",
										"15": "a",
										"16": "l",
										"17": ")",
										"18": "\\",
										"19": "%",
										"20": " ",
										"21": "P",
										"22": "r",
										"23": "o",
										"24": "c",
										"25": "e",
										"26": "s",
										"27": "s",
										"28": "o",
										"29": "r",
										"30": " ",
										"31": "T",
										"32": "i",
										"33": "m",
										"34": "e",
									},
									"operator": map[string]interface{}{
										"0":  "G",
										"1":  "r",
										"2":  "e",
										"3":  "a",
										"4":  "t",
										"5":  "e",
										"6":  "r",
										"7":  "T",
										"8":  "h",
										"9":  "a",
										"10": "n",
									},
									"threshold": map[string]interface{}{},
									"timeAggregation": map[string]interface{}{
										"0": "A",
										"1": "v",
										"2": "e",
										"3": "r",
										"4": "a",
										"5": "g",
										"6": "e",
									},
								},
								Name:            to.StringPtr("High_CPU_80"),
								CriterionType:   CriterionTypeStaticThresholdCriterion.ToPtr(),
								Dimensions:      []*MetricDimension{},
								MetricName:      to.StringPtr("\\Processor(_Total)\\% Processor Time"),
								TimeAggregation: AggregationTypeEnumAverage.ToPtr(),
							},
							Operator:  OperatorGreaterThan.ToPtr(),
							Threshold: to.Float64Ptr(80.5),
						}},
				},
				Enabled:             to.BoolPtr(true),
				EvaluationFrequency: to.StringPtr("Pt1m"),
				Scopes: []*string{
					to.StringPtr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme")},
				Severity:   to.Int32Ptr(3),
				WindowSize: to.StringPtr("Pt15m"),
			},
			Tags: map[string]*string{},
		},
		&MetricAlertsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MetricAlertResource.ID == nil {
		t.Fatal("MetricAlertResource.ID should not be nil!")
	}
}

func TestMetricAlerts_Delete(t *testing.T) {
	// From example Delete an alert rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMetricAlertsClient(con,
		"14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7")
	_, err := client.Delete(ctx,
		"gigtest",
		"chiricutin",
		&MetricAlertsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestMetricAlertsStatus_List(t *testing.T) {
	// From example Get an alert rule status
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMetricAlertsStatusClient(con,
		"14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7")
	_, err := client.List(ctx,
		"gigtest",
		"chiricutin",
		&MetricAlertsStatusListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestMetricAlertsStatus_ListByName(t *testing.T) {
	// From example Get an alert rule status
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMetricAlertsStatusClient(con,
		"009f6022-67ec-423e-9aa7-691182870588")
	_, err := client.ListByName(ctx,
		"EastUs",
		"custom1",
		"cmVzb3VyY2VJZD0vc3Vic2NyaXB0aW9ucy8xNGRkZjBjNS03N2M1LTRiNTMtODRmNi1lMWZhNDNhZDY4ZjcvcmVzb3VyY2VHcm91cHMvZ2lndGVzdC9wcm92aWRlcnMvTWljcm9zb2Z0LkNvbXB1dGUvdmlydHVhbE1hY2hpbmVzL2dpZ3dhZG1l",
		&MetricAlertsStatusListByNameOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestScheduledQueryRules_CreateOrUpdate(t *testing.T) {
	// From example Create or Update rule - AlertingAction
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewScheduledQueryRulesClient(con,
		"b67f7fec-69fc-4974-9099-a26bd6ffeda3")
	res, err := client.CreateOrUpdate(ctx,
		"Rac46PostSwapRG",
		"logalertfoo",
		LogSearchRuleResource{
			TrackedEntityResource: TrackedEntityResource{
				Location: to.StringPtr("eastus"),
				Tags:     map[string]*string{},
			},
			Properties: &LogSearchRule{
				Description: to.StringPtr("log alert description"),
				Action: &AlertingAction{
					Action: Action{
						ODataType: to.StringPtr("Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"),
					},
					AznsAction: &AzNsActionGroup{
						ActionGroup:          []*string{},
						CustomWebhookPayload: to.StringPtr("{}"),
						EmailSubject:         to.StringPtr("Email Header"),
					},
					Severity: AlertSeverityOne.ToPtr(),
					Trigger: &TriggerCondition{
						MetricTrigger: &LogMetricTrigger{
							MetricColumn:      to.StringPtr("Computer"),
							MetricTriggerType: MetricTriggerTypeConsecutive.ToPtr(),
							Threshold:         to.Float64Ptr(5),
							ThresholdOperator: ConditionalOperatorGreaterThan.ToPtr(),
						},
						Threshold:         to.Float64Ptr(3),
						ThresholdOperator: ConditionalOperatorGreaterThan.ToPtr(),
					},
				},
				Enabled: EnabledTrue.ToPtr(),
				Schedule: &Schedule{
					FrequencyInMinutes:  to.Int32Ptr(15),
					TimeWindowInMinutes: to.Int32Ptr(15),
				},
				Source: &Source{
					DataSourceID: to.StringPtr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.OperationalInsights/workspaces/sampleWorkspace"),
					Query:        to.StringPtr("Heartbeat | summarize AggregatedValue = count() by bin(TimeGenerated, 5m)"),
					QueryType:    QueryTypeResultCount.ToPtr(),
				},
			},
		},
		&ScheduledQueryRulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LogSearchRuleResource.ID == nil {
		t.Fatal("LogSearchRuleResource.ID should not be nil!")
	}

	// From example Create or Update rule - AlertingAction with Cross-Resource
	res, err = client.CreateOrUpdate(ctx,
		"Rac46PostSwapRG",
		"SampleCrossResourceAlert",
		LogSearchRuleResource{
			TrackedEntityResource: TrackedEntityResource{
				Location: to.StringPtr("eastus"),
				Tags:     map[string]*string{},
			},
			Properties: &LogSearchRule{
				Description: to.StringPtr("Sample Cross Resource alert"),
				Action: &AlertingAction{
					Action: Action{
						ODataType: to.StringPtr("Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"),
					},
					AznsAction: &AzNsActionGroup{
						ActionGroup: []*string{
							to.StringPtr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/actiongroups/test-ag")},
						EmailSubject: to.StringPtr("Cross Resource Mail!!"),
					},
					Severity: AlertSeverityThree.ToPtr(),
					Trigger: &TriggerCondition{
						Threshold:         to.Float64Ptr(5000),
						ThresholdOperator: ConditionalOperatorGreaterThan.ToPtr(),
					},
				},
				Enabled: EnabledTrue.ToPtr(),
				Schedule: &Schedule{
					FrequencyInMinutes:  to.Int32Ptr(60),
					TimeWindowInMinutes: to.Int32Ptr(60),
				},
				Source: &Source{
					AuthorizedResources: []*string{
						to.StringPtr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.OperationalInsights/workspaces/sampleWorkspace"),
						to.StringPtr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/components/sampleAI")},
					DataSourceID: to.StringPtr("/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/components/sampleAI"),
					Query:        to.StringPtr("union requests, workspace(\"sampleWorkspace\").Update"),
					QueryType:    QueryTypeResultCount.ToPtr(),
				},
			},
		},
		&ScheduledQueryRulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LogSearchRuleResource.ID == nil {
		t.Fatal("LogSearchRuleResource.ID should not be nil!")
	}

	// From example Create or Update rule - LogToMetricAction
	res, err = client.CreateOrUpdate(ctx,
		"alertsweu",
		"logtometricfoo",
		LogSearchRuleResource{
			TrackedEntityResource: TrackedEntityResource{
				Location: to.StringPtr("West Europe"),
				Tags:     map[string]*string{},
			},
			Properties: &LogSearchRule{
				Description: to.StringPtr("log to metric description"),
				Action: &LogToMetricAction{
					Action: Action{
						ODataType: to.StringPtr("Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.LogToMetricAction"),
					},
					Criteria: []*Criteria{
						{
							Dimensions: []*Dimension{},
							MetricName: to.StringPtr("Average_% Idle Time"),
						}},
				},
				Enabled: EnabledTrue.ToPtr(),
				Source: &Source{
					DataSourceID: to.StringPtr("/subscriptions/af52d502-a447-4bc6-8cb7-4780fbb00490/resourceGroups/alertsweu/providers/Microsoft.OperationalInsights/workspaces/alertsweu"),
				},
			},
		},
		&ScheduledQueryRulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LogSearchRuleResource.ID == nil {
		t.Fatal("LogSearchRuleResource.ID should not be nil!")
	}
}

func TestScheduledQueryRules_Get(t *testing.T) {
	// From example Get rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewScheduledQueryRulesClient(con,
		"b67f7fec-69fc-4974-9099-a26bd6ffeda3")
	res, err := client.Get(ctx,
		"Rac46PostSwapRG",
		"logalertfoo",
		&ScheduledQueryRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LogSearchRuleResource.ID == nil {
		t.Fatal("LogSearchRuleResource.ID should not be nil!")
	}
}

func TestScheduledQueryRules_Update(t *testing.T) {
	// From example Patch Log Search Rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewScheduledQueryRulesClient(con,
		"subid")
	res, err := client.Update(ctx,
		"my-resource-group",
		"logalertfoo",
		LogSearchRuleResourcePatch{
			Properties: &LogSearchRulePatch{
				Enabled: EnabledTrue.ToPtr(),
			},
		},
		&ScheduledQueryRulesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LogSearchRuleResource.ID == nil {
		t.Fatal("LogSearchRuleResource.ID should not be nil!")
	}
}

func TestScheduledQueryRules_Delete(t *testing.T) {
	// From example Delete rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewScheduledQueryRulesClient(con,
		"b67f7fec-69fc-4974-9099-a26bd6ffeda3")
	_, err := client.Delete(ctx,
		"Rac46PostSwapRG",
		"logalertfoo",
		&ScheduledQueryRulesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestScheduledQueryRules_ListBySubscription(t *testing.T) {
	// From example List rules
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewScheduledQueryRulesClient(con,
		"14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7")
	_, err := client.ListBySubscription(ctx,
		&ScheduledQueryRulesListBySubscriptionOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestScheduledQueryRules_ListByResourceGroup(t *testing.T) {
	// From example List rules
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewScheduledQueryRulesClient(con,
		"14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7")
	_, err := client.ListByResourceGroup(ctx,
		"gigtest",
		&ScheduledQueryRulesListByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestMetricNamespaces_List(t *testing.T) {
	// From example Get Metric Namespaces without filter
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMetricNamespacesClient(con)
	_, err := client.List(ctx,
		"subscriptions/182c901a-129a-4f5d-86e4-cc6b294590a2/resourceGroups/hyr-log/providers/microsoft.insights/components/f1-bill",
		&MetricNamespacesListOptions{StartTime: to.StringPtr("2020-08-31T15:53:00Z")})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVMInsights_GetOnboardingStatus(t *testing.T) {
	// From example Get status for a VM scale set that is actively reporting data
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVMInsightsClient(con)
	res, err := client.GetOnboardingStatus(ctx,
		"subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87/resourceGroups/my-service-cluster/providers/Microsoft.Compute/virtualMachineScaleSets/scale-set-01",
		&VMInsightsGetOnboardingStatusOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VMInsightsOnboardingStatus.ID == nil {
		t.Fatal("VMInsightsOnboardingStatus.ID should not be nil!")
	}

	// From example Get status for a VM that has not yet reported data
	res, err = client.GetOnboardingStatus(ctx,
		"subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87/resourceGroups/vm-resource-group/providers/Microsoft.Compute/virtualMachines/ubuntu-vm",
		&VMInsightsGetOnboardingStatusOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VMInsightsOnboardingStatus.ID == nil {
		t.Fatal("VMInsightsOnboardingStatus.ID should not be nil!")
	}

	// From example Get status for a VM that is actively reporting data
	res, err = client.GetOnboardingStatus(ctx,
		"subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87/resourceGroups/vm-resource-group/providers/Microsoft.Compute/virtualMachines/ubuntu-vm",
		&VMInsightsGetOnboardingStatusOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VMInsightsOnboardingStatus.ID == nil {
		t.Fatal("VMInsightsOnboardingStatus.ID should not be nil!")
	}

	// From example Get status for a resource group that has at least one VM that is actively reporting data
	res, err = client.GetOnboardingStatus(ctx,
		"subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87/resourceGroups/resource-group-with-vms",
		&VMInsightsGetOnboardingStatusOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VMInsightsOnboardingStatus.ID == nil {
		t.Fatal("VMInsightsOnboardingStatus.ID should not be nil!")
	}

	// From example Get status for a subscription that has at least one VM that is actively reporting data
	res, err = client.GetOnboardingStatus(ctx,
		"subscriptions/3d51de47-8d1c-4d24-b42f-bcae075dfa87",
		&VMInsightsGetOnboardingStatusOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VMInsightsOnboardingStatus.ID == nil {
		t.Fatal("VMInsightsOnboardingStatus.ID should not be nil!")
	}
}

func TestPrivateLinkScopes_List(t *testing.T) {
	// From example PrivateLinkScopesList.json
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkScopesClient(con,
		"86dc51d3-92ed-4d7e-947a-775ea79b4919")
	pager := client.List(&PrivateLinkScopesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AzureMonitorPrivateLinkScope.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AzureMonitorPrivateLinkScope.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkScopes_ListByResourceGroup(t *testing.T) {
	// From example PrivateLinkScopeListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkScopesClient(con,
		"86dc51d3-92ed-4d7e-947a-775ea79b4919")
	pager := client.ListByResourceGroup("my-resource-group",
		&PrivateLinkScopesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AzureMonitorPrivateLinkScope.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AzureMonitorPrivateLinkScope.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkScopes_Delete(t *testing.T) {
	// From example PrivateLinkScopesDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkScopesClient(con,
		"86dc51d3-92ed-4d7e-947a-775ea79b4919")
	poller, err := client.BeginDelete(ctx,
		"my-resource-group",
		"my-privatelinkscope",
		&PrivateLinkScopesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkScopes_Get(t *testing.T) {
	// From example PrivateLinkScopeGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkScopesClient(con,
		"86dc51d3-92ed-4d7e-947a-775ea79b4919")
	res, err := client.Get(ctx,
		"my-resource-group",
		"my-privatelinkscope",
		&PrivateLinkScopesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AzureMonitorPrivateLinkScope.ID == nil {
		t.Fatal("AzureMonitorPrivateLinkScope.ID should not be nil!")
	}
}

func TestPrivateLinkScopes_CreateOrUpdate(t *testing.T) {
	// From example PrivateLinkScopeCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkScopesClient(con,
		"86dc51d3-92ed-4d7e-947a-775ea79b4919")
	res, err := client.CreateOrUpdate(ctx,
		"my-resource-group",
		"my-privatelinkscope",
		nil,
		&PrivateLinkScopesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AzureMonitorPrivateLinkScope.ID == nil {
		t.Fatal("AzureMonitorPrivateLinkScope.ID should not be nil!")
	}

	// From example PrivateLinkScopeUpdate
	res, err = client.CreateOrUpdate(ctx,
		"my-resource-group",
		"my-privatelinkscope",
		nil,
		&PrivateLinkScopesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AzureMonitorPrivateLinkScope.ID == nil {
		t.Fatal("AzureMonitorPrivateLinkScope.ID should not be nil!")
	}
}

func TestPrivateLinkScopes_UpdateTags(t *testing.T) {
	// From example PrivateLinkScopeUpdateTagsOnly
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkScopesClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"my-resource-group",
		"my-privatelinkscope",
		nil,
		&PrivateLinkScopesUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AzureMonitorPrivateLinkScope.ID == nil {
		t.Fatal("AzureMonitorPrivateLinkScope.ID should not be nil!")
	}
}

func TestPrivateLinkScopeOperationStatus_Get(t *testing.T) {
	// From example Get specific operation status
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkScopeOperationStatusClient(con,
		"613192d7-503f-477a-9cfe-4efc3ee2bd60")
	res, err := client.Get(ctx,
		"713192d7-503f-477a-9cfe-4efc3ee2bd11",
		"MyResourceGroup",
		&PrivateLinkScopeOperationStatusGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationStatus.ID == nil {
		t.Fatal("OperationStatus.ID should not be nil!")
	}
}

func TestPrivateLinkResources_ListByPrivateLinkScope(t *testing.T) {
	// From example Gets private endpoint connection.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByPrivateLinkScope("MyResourceGroup",
		"MyPrivateLinkScope",
		&PrivateLinkResourcesListByPrivateLinkScopeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateLinkResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateLinkResource.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example Gets private endpoint connection.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"MyPrivateLinkScope",
		"azuremonitor",
		&PrivateLinkResourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkResource.ID == nil {
		t.Fatal("PrivateLinkResource.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example Gets private endpoint connection.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"MyPrivateLinkScope",
		"private-endpoint-connection-name",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example Approve or reject a private endpoint connection with a given name.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"MyResourceGroup",
		"MyPrivateLinkScope",
		"private-endpoint-connection-name",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionStateProperty{
					Description: to.StringPtr("Approved by johndoe@contoso.com"),
					Status:      to.StringPtr("Approved"),
				},
			},
		},
		&PrivateEndpointConnectionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example Deletes a private endpoint connection with a given name.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"MyResourceGroup",
		"MyPrivateLinkScope",
		"private-endpoint-connection-name",
		&PrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_ListByPrivateLinkScope(t *testing.T) {
	// From example Gets list of private endpoint connections on a private link scope.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByPrivateLinkScope("MyResourceGroup",
		"MyPrivateLinkScope",
		&PrivateEndpointConnectionsListByPrivateLinkScopeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateEndpointConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateEndpointConnection.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkScopedResources_Get(t *testing.T) {
	// From example Gets private link scoped resource.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkScopedResourcesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"MyPrivateLinkScope",
		"scoped-resource-name",
		&PrivateLinkScopedResourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ScopedResource.ID == nil {
		t.Fatal("ScopedResource.ID should not be nil!")
	}
}

func TestPrivateLinkScopedResources_CreateOrUpdate(t *testing.T) {
	// From example Update a scoped resource in a private link scope.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkScopedResourcesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"MyResourceGroup",
		"MyPrivateLinkScope",
		"scoped-resource-name",
		ScopedResource{
			Properties: &ScopedResourceProperties{
				LinkedResourceID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/components/my-component"),
			},
		},
		&PrivateLinkScopedResourcesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ScopedResource.ID == nil {
		t.Fatal("ScopedResource.ID should not be nil!")
	}
}

func TestPrivateLinkScopedResources_Delete(t *testing.T) {
	// From example Deletes a scoped resource with a given name.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkScopedResourcesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"MyResourceGroup",
		"MyPrivateLinkScope",
		"scoped-resource-name",
		&PrivateLinkScopedResourcesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkScopedResources_ListByPrivateLinkScope(t *testing.T) {
	// From example Gets list of scoped resources in a private link scope.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkScopedResourcesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByPrivateLinkScope("MyResourceGroup",
		"MyPrivateLinkScope",
		&PrivateLinkScopedResourcesListByPrivateLinkScopeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ScopedResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ScopedResource.ID should not be nil!")
			}
		}
	}
}

func TestActivityLogAlerts_CreateOrUpdate(t *testing.T) {
	// From example Create or update an activity log alert
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewActivityLogAlertsClient(con,
		"187f412d-1758-44d9-b052-169e2564721d")
	res, err := client.CreateOrUpdate(ctx,
		"Default-ActivityLogAlerts",
		"SampleActivityLogAlert",
		ActivityLogAlertResource{
			Resource: Resource{
				Location: to.StringPtr("Global"),
				Tags:     map[string]*string{},
			},
			Properties: &ActivityLogAlert{
				Description: to.StringPtr("Sample activity log alert description"),
				Actions: &ActivityLogAlertActionList{
					ActionGroups: []*ActivityLogAlertActionGroup{
						{
							ActionGroupID: to.StringPtr("/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/Default-ActionGroups/providers/microsoft.insights/actionGroups/SampleActionGroup"),
							WebhookProperties: map[string]*string{
								"sampleWebhookProperty": to.StringPtr("samplePropertyValue"),
							},
						}},
				},
				Condition: &ActivityLogAlertAllOfCondition{
					AllOf: []*ActivityLogAlertLeafCondition{
						{
							Equals: to.StringPtr("Administrative"),
							Field:  to.StringPtr("Category"),
						},
						{
							Equals: to.StringPtr("Error"),
							Field:  to.StringPtr("Level"),
						}},
				},
				Enabled: to.BoolPtr(true),
				Scopes: []*string{
					to.StringPtr("subscriptions/187f412d-1758-44d9-b052-169e2564721d")},
			},
		},
		&ActivityLogAlertsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ActivityLogAlertResource.ID == nil {
		t.Fatal("ActivityLogAlertResource.ID should not be nil!")
	}
}

func TestActivityLogAlerts_Get(t *testing.T) {
	// From example Get an activity log alert
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewActivityLogAlertsClient(con,
		"187f412d-1758-44d9-b052-169e2564721d")
	res, err := client.Get(ctx,
		"Default-ActivityLogAlerts",
		"SampleActivityLogAlert",
		&ActivityLogAlertsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ActivityLogAlertResource.ID == nil {
		t.Fatal("ActivityLogAlertResource.ID should not be nil!")
	}
}

func TestActivityLogAlerts_Delete(t *testing.T) {
	// From example Delete an activity log alert
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewActivityLogAlertsClient(con,
		"187f412d-1758-44d9-b052-169e2564721d")
	_, err := client.Delete(ctx,
		"Default-ActivityLogAlerts",
		"SampleActivityLogAlert",
		&ActivityLogAlertsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestActivityLogAlerts_Update(t *testing.T) {
	// From example Patch an activity log alert
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewActivityLogAlertsClient(con,
		"187f412d-1758-44d9-b052-169e2564721d")
	res, err := client.Update(ctx,
		"Default-ActivityLogAlerts",
		"SampleActivityLogAlert",
		ActivityLogAlertPatchBody{
			Properties: &ActivityLogAlertPatch{
				Enabled: to.BoolPtr(false),
			},
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
				"key2": to.StringPtr("value2"),
			},
		},
		&ActivityLogAlertsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ActivityLogAlertResource.ID == nil {
		t.Fatal("ActivityLogAlertResource.ID should not be nil!")
	}
}

func TestActivityLogAlerts_ListBySubscriptionId(t *testing.T) {
	// From example List activity log alerts
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewActivityLogAlertsClient(con,
		"187f412d-1758-44d9-b052-169e2564721d")
	_, err := client.ListBySubscriptionID(ctx,
		&ActivityLogAlertsListBySubscriptionIDOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestActivityLogAlerts_ListByResourceGroup(t *testing.T) {
	// From example List activity log alerts
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewActivityLogAlertsClient(con,
		"187f412d-1758-44d9-b052-169e2564721d")
	_, err := client.ListByResourceGroup(ctx,
		"Default-ActivityLogAlerts",
		&ActivityLogAlertsListByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDataCollectionEndpoints_ListByResourceGroup(t *testing.T) {
	// From example List data collection endpoints by resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataCollectionEndpointsClient(con,
		"703362b3-f278-4e4b-9179-c76eaf41ffc2")
	pager := client.ListByResourceGroup("myResourceGroup",
		&DataCollectionEndpointsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DataCollectionEndpointResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DataCollectionEndpointResource.ID should not be nil!")
			}
		}
	}
}

func TestDataCollectionEndpoints_ListBySubscription(t *testing.T) {
	// From example List data collection endpoints by subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataCollectionEndpointsClient(con,
		"703362b3-f278-4e4b-9179-c76eaf41ffc2")
	pager := client.ListBySubscription(&DataCollectionEndpointsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DataCollectionEndpointResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DataCollectionEndpointResource.ID should not be nil!")
			}
		}
	}
}

func TestDataCollectionEndpoints_Get(t *testing.T) {
	// From example Get data collection endpoint
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataCollectionEndpointsClient(con,
		"703362b3-f278-4e4b-9179-c76eaf41ffc2")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myCollectionEndpoint",
		&DataCollectionEndpointsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataCollectionEndpointResource.ID == nil {
		t.Fatal("DataCollectionEndpointResource.ID should not be nil!")
	}
}

func TestDataCollectionEndpoints_Create(t *testing.T) {
	// From example Create or update data collection endpoint
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataCollectionEndpointsClient(con,
		"703362b3-f278-4e4b-9179-c76eaf41ffc2")
	res, err := client.Create(ctx,
		"myResourceGroup",
		"myCollectionEndpoint",
		&DataCollectionEndpointsCreateOptions{Body: &DataCollectionEndpointResource{
			Location: to.StringPtr("eastus"),
			Properties: &DataCollectionEndpointResourceProperties{
				DataCollectionEndpoint: DataCollectionEndpoint{
					NetworkACLs: &DataCollectionEndpointNetworkACLs{
						NetworkRuleSet: NetworkRuleSet{
							PublicNetworkAccess: KnownPublicNetworkAccessOptionsEnabled.ToPtr(),
						},
					},
				},
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataCollectionEndpointResource.ID == nil {
		t.Fatal("DataCollectionEndpointResource.ID should not be nil!")
	}
}

func TestDataCollectionEndpoints_Update(t *testing.T) {
	// From example Update data collection endpoint
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataCollectionEndpointsClient(con,
		"703362b3-f278-4e4b-9179-c76eaf41ffc2")
	res, err := client.Update(ctx,
		"myResourceGroup",
		"myCollectionEndpoint",
		&DataCollectionEndpointsUpdateOptions{Body: &ResourceForUpdate{
			Tags: map[string]*string{
				"tag1": to.StringPtr("A"),
				"tag2": to.StringPtr("B"),
				"tag3": to.StringPtr("C"),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataCollectionEndpointResource.ID == nil {
		t.Fatal("DataCollectionEndpointResource.ID should not be nil!")
	}
}

func TestDataCollectionEndpoints_Delete(t *testing.T) {
	// From example Delete data collection endpoint
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataCollectionEndpointsClient(con,
		"703362b3-f278-4e4b-9179-c76eaf41ffc2")
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myCollectionEndpoint",
		&DataCollectionEndpointsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDataCollectionRuleAssociations_ListByResource(t *testing.T) {
	// From example List associations for specified resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataCollectionRuleAssociationsClient(con,
		nil)
	pager := client.ListByResource("subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVm",
		&DataCollectionRuleAssociationsListByResourceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DataCollectionRuleAssociationProxyOnlyResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DataCollectionRuleAssociationProxyOnlyResource.ID should not be nil!")
			}
		}
	}
}

func TestDataCollectionRuleAssociations_ListByRule(t *testing.T) {
	// From example List associations for specified data collection rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataCollectionRuleAssociationsClient(con,
		"703362b3-f278-4e4b-9179-c76eaf41ffc2")
	pager := client.ListByRule("myResourceGroup",
		"myCollectionRule",
		&DataCollectionRuleAssociationsListByRuleOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DataCollectionRuleAssociationProxyOnlyResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DataCollectionRuleAssociationProxyOnlyResource.ID should not be nil!")
			}
		}
	}
}

func TestDataCollectionRuleAssociations_Get(t *testing.T) {
	// From example Get association
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataCollectionRuleAssociationsClient(con,
		nil)
	res, err := client.Get(ctx,
		"subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVm",
		"myAssociation",
		&DataCollectionRuleAssociationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataCollectionRuleAssociationProxyOnlyResource.ID == nil {
		t.Fatal("DataCollectionRuleAssociationProxyOnlyResource.ID should not be nil!")
	}
}

func TestDataCollectionRuleAssociations_Create(t *testing.T) {
	// From example Create or update association
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataCollectionRuleAssociationsClient(con,
		nil)
	res, err := client.Create(ctx,
		"subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVm",
		"myAssociation",
		&DataCollectionRuleAssociationsCreateOptions{Body: &DataCollectionRuleAssociationProxyOnlyResource{
			Properties: &DataCollectionRuleAssociationProxyOnlyResourceProperties{
				DataCollectionRuleAssociation: DataCollectionRuleAssociation{
					DataCollectionRuleID: to.StringPtr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Insights/dataCollectionRules/myCollectionRule"),
				},
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataCollectionRuleAssociationProxyOnlyResource.ID == nil {
		t.Fatal("DataCollectionRuleAssociationProxyOnlyResource.ID should not be nil!")
	}
}

func TestDataCollectionRuleAssociations_Delete(t *testing.T) {
	// From example Delete association
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataCollectionRuleAssociationsClient(con,
		nil)
	_, err := client.Delete(ctx,
		"subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVm",
		"myAssociation",
		&DataCollectionRuleAssociationsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDataCollectionRules_ListByResourceGroup(t *testing.T) {
	// From example List data collection rules by resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataCollectionRulesClient(con,
		"703362b3-f278-4e4b-9179-c76eaf41ffc2")
	pager := client.ListByResourceGroup("myResourceGroup",
		&DataCollectionRulesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DataCollectionRuleResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DataCollectionRuleResource.ID should not be nil!")
			}
		}
	}
}

func TestDataCollectionRules_ListBySubscription(t *testing.T) {
	// From example List data collection rules by subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataCollectionRulesClient(con,
		"703362b3-f278-4e4b-9179-c76eaf41ffc2")
	pager := client.ListBySubscription(&DataCollectionRulesListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DataCollectionRuleResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DataCollectionRuleResource.ID should not be nil!")
			}
		}
	}
}

func TestDataCollectionRules_Get(t *testing.T) {
	// From example Get data collection rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataCollectionRulesClient(con,
		"703362b3-f278-4e4b-9179-c76eaf41ffc2")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myCollectionRule",
		&DataCollectionRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataCollectionRuleResource.ID == nil {
		t.Fatal("DataCollectionRuleResource.ID should not be nil!")
	}
}

func TestDataCollectionRules_Create(t *testing.T) {
	// From example Create or update data collection rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataCollectionRulesClient(con,
		"703362b3-f278-4e4b-9179-c76eaf41ffc2")
	res, err := client.Create(ctx,
		"myResourceGroup",
		"myCollectionRule",
		&DataCollectionRulesCreateOptions{Body: &DataCollectionRuleResource{
			Location: to.StringPtr("eastus"),
			Properties: &DataCollectionRuleResourceProperties{
				DataCollectionRule: DataCollectionRule{
					DataFlows: []*DataFlow{
						{
							Destinations: []*string{
								to.StringPtr("centralWorkspace")},
							Streams: []*KnownDataFlowStreams{
								KnownDataFlowStreamsMicrosoftPerf.ToPtr(),
								KnownDataFlowStreamsMicrosoftSyslog.ToPtr(),
								KnownDataFlowStreamsMicrosoftWindowsEvent.ToPtr()},
						}},
					DataSources: &DataCollectionRuleDataSources{
						DataSourcesSpec: DataSourcesSpec{
							PerformanceCounters: []*PerfCounterDataSource{
								{
									Name: to.StringPtr("cloudTeamCoreCounters"),
									CounterSpecifiers: []*string{
										to.StringPtr("\\Processor(_Total)\\% Processor Time"),
										to.StringPtr("\\Memory\\Committed Bytes"),
										to.StringPtr("\\LogicalDisk(_Total)\\Free Megabytes"),
										to.StringPtr("\\PhysicalDisk(_Total)\\Avg. Disk Queue Length")},
									SamplingFrequencyInSeconds: to.Int32Ptr(15),
									Streams: []*KnownPerfCounterDataSourceStreams{
										KnownPerfCounterDataSourceStreamsMicrosoftPerf.ToPtr()},
								},
								{
									Name: to.StringPtr("appTeamExtraCounters"),
									CounterSpecifiers: []*string{
										to.StringPtr("\\Process(_Total)\\Thread Count")},
									SamplingFrequencyInSeconds: to.Int32Ptr(30),
									Streams: []*KnownPerfCounterDataSourceStreams{
										KnownPerfCounterDataSourceStreamsMicrosoftPerf.ToPtr()},
								}},
							Syslog: []*SyslogDataSource{
								{
									Name: to.StringPtr("cronSyslog"),
									FacilityNames: []*KnownSyslogDataSourceFacilityNames{
										KnownSyslogDataSourceFacilityNamesCron.ToPtr()},
									LogLevels: []*KnownSyslogDataSourceLogLevels{
										KnownSyslogDataSourceLogLevelsDebug.ToPtr(),
										KnownSyslogDataSourceLogLevelsCritical.ToPtr(),
										KnownSyslogDataSourceLogLevelsEmergency.ToPtr()},
									Streams: []*KnownSyslogDataSourceStreams{
										KnownSyslogDataSourceStreamsMicrosoftSyslog.ToPtr()},
								},
								{
									Name: to.StringPtr("syslogBase"),
									FacilityNames: []*KnownSyslogDataSourceFacilityNames{
										KnownSyslogDataSourceFacilityNamesSyslog.ToPtr()},
									LogLevels: []*KnownSyslogDataSourceLogLevels{
										KnownSyslogDataSourceLogLevelsAlert.ToPtr(),
										KnownSyslogDataSourceLogLevelsCritical.ToPtr(),
										KnownSyslogDataSourceLogLevelsEmergency.ToPtr()},
									Streams: []*KnownSyslogDataSourceStreams{
										KnownSyslogDataSourceStreamsMicrosoftSyslog.ToPtr()},
								}},
							WindowsEventLogs: []*WindowsEventLogDataSource{
								{
									Name: to.StringPtr("cloudSecurityTeamEvents"),
									Streams: []*KnownWindowsEventLogDataSourceStreams{
										KnownWindowsEventLogDataSourceStreamsMicrosoftWindowsEvent.ToPtr()},
									XPathQueries: []*string{
										to.StringPtr("Security!")},
								},
								{
									Name: to.StringPtr("appTeam1AppEvents"),
									Streams: []*KnownWindowsEventLogDataSourceStreams{
										KnownWindowsEventLogDataSourceStreamsMicrosoftWindowsEvent.ToPtr()},
									XPathQueries: []*string{
										to.StringPtr("System![System[(Level = 1 or Level = 2 or Level = 3)]]"),
										to.StringPtr("Application!*[System[(Level = 1 or Level = 2 or Level = 3)]]")},
								}},
						},
					},
					Destinations: &DataCollectionRuleDestinations{
						DestinationsSpec: DestinationsSpec{
							LogAnalytics: []*LogAnalyticsDestination{
								{
									Name:                to.StringPtr("centralWorkspace"),
									WorkspaceResourceID: to.StringPtr("/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.OperationalInsights/workspaces/centralTeamWorkspace"),
								}},
						},
					},
				},
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataCollectionRuleResource.ID == nil {
		t.Fatal("DataCollectionRuleResource.ID should not be nil!")
	}
}

func TestDataCollectionRules_Update(t *testing.T) {
	// From example Update data collection rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataCollectionRulesClient(con,
		"703362b3-f278-4e4b-9179-c76eaf41ffc2")
	res, err := client.Update(ctx,
		"myResourceGroup",
		"myCollectionRule",
		&DataCollectionRulesUpdateOptions{Body: &ResourceForUpdate{
			Tags: map[string]*string{
				"tag1": to.StringPtr("A"),
				"tag2": to.StringPtr("B"),
				"tag3": to.StringPtr("C"),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataCollectionRuleResource.ID == nil {
		t.Fatal("DataCollectionRuleResource.ID should not be nil!")
	}
}

func TestDataCollectionRules_Delete(t *testing.T) {
	// From example Delete data collection rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataCollectionRulesClient(con,
		"703362b3-f278-4e4b-9179-c76eaf41ffc2")
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myCollectionRule",
		&DataCollectionRulesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
