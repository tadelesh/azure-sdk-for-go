//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpostgresqlhsc_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/postgresqlhsc/armpostgresqlhsc"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestServerGroups_List(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all the server groups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewServerGroupsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresqlhsc.ServerGroupListResult{
			Value: []*armpostgresqlhsc.ServerGroup{
				{
					Name:     to.Ptr("hsctestsg1"),
					Type:     to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg1"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"additionalProp1": to.Ptr("string"),
					},
					Properties: &armpostgresqlhsc.ServerGroupProperties{
						AdministratorLogin: to.Ptr("citus"),
						AvailabilityZone:   to.Ptr("1"),
						CitusVersion:       to.Ptr(armpostgresqlhsc.CitusVersionNine5),
						DelegatedSubnetArguments: &armpostgresqlhsc.ServerGroupPropertiesDelegatedSubnetArguments{
							SubnetArmResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/test-vnet-subnet"),
						},
						EarliestRestoreTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-14T00:00:37.467Z"); return t }()),
						EnableMx:            to.Ptr(true),
						EnableZfs:           to.Ptr(false),
						PostgresqlVersion:   to.Ptr(armpostgresqlhsc.PostgreSQLVersionTwelve),
						PrivateDNSZoneArguments: &armpostgresqlhsc.ServerGroupPropertiesPrivateDNSZoneArguments{
							PrivateDNSZoneArmResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.Network/privateDnsZones/test-private-dns-zone"),
						},
						ReadReplicas: []*string{
							to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg2")},
						ResourceProviderType: to.Ptr(armpostgresqlhsc.ResourceProviderTypeMeru),
						ServerRoleGroups: []*armpostgresqlhsc.ServerRoleGroup{
							{
								EnableHa:         to.Ptr(true),
								EnablePublicIP:   to.Ptr(true),
								ServerEdition:    to.Ptr(armpostgresqlhsc.ServerEditionMemoryOptimized),
								StorageQuotaInMb: to.Ptr[int64](10000),
								VCores:           to.Ptr[int64](4),
								Name:             to.Ptr(""),
								Role:             to.Ptr(armpostgresqlhsc.ServerRoleCoordinator),
								ServerCount:      to.Ptr[int32](1),
								ServerNames: []*armpostgresqlhsc.ServerNameItem{
									{
										Name:                     to.Ptr("hsctestsg1-c"),
										FullyQualifiedDomainName: to.Ptr("hsctestsg1-c.postgres.database.azure.com"),
									}},
							},
							{
								EnableHa:         to.Ptr(false),
								EnablePublicIP:   to.Ptr(false),
								ServerEdition:    to.Ptr(armpostgresqlhsc.ServerEditionGeneralPurpose),
								StorageQuotaInMb: to.Ptr[int64](10000),
								VCores:           to.Ptr[int64](8),
								Name:             to.Ptr(""),
								Role:             to.Ptr(armpostgresqlhsc.ServerRoleWorker),
								ServerCount:      to.Ptr[int32](3),
								ServerNames: []*armpostgresqlhsc.ServerNameItem{
									{
										Name:                     to.Ptr("hsctestsg1-w0"),
										FullyQualifiedDomainName: to.Ptr("hsctestsg1-w0.postgres.database.azure.com"),
									},
									{
										Name:                     to.Ptr("hsctestsg1-w1"),
										FullyQualifiedDomainName: to.Ptr("hsctestsg1-w1.postgres.database.azure.com"),
									},
									{
										Name:                     to.Ptr("hsctestsg1-w2"),
										FullyQualifiedDomainName: to.Ptr("hsctestsg1-w2.postgres.database.azure.com"),
									}},
							}},
						StandbyAvailabilityZone: to.Ptr("2"),
						State:                   to.Ptr(armpostgresqlhsc.ServerStateReady),
					},
					SystemData: &armpostgresqlhsc.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("hsctestsg2"),
					Type:     to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg2"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"additionalProp2": to.Ptr("string"),
					},
					Properties: &armpostgresqlhsc.ServerGroupProperties{
						AdministratorLogin:   to.Ptr("citus"),
						AvailabilityZone:     to.Ptr("1"),
						CitusVersion:         to.Ptr(armpostgresqlhsc.CitusVersionNine5),
						EarliestRestoreTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-14T00:00:37.467Z"); return t }()),
						EnableMx:             to.Ptr(true),
						EnableZfs:            to.Ptr(false),
						PostgresqlVersion:    to.Ptr(armpostgresqlhsc.PostgreSQLVersionTwelve),
						ResourceProviderType: to.Ptr(armpostgresqlhsc.ResourceProviderTypeMeru),
						ServerRoleGroups: []*armpostgresqlhsc.ServerRoleGroup{
							{
								EnableHa:         to.Ptr(true),
								EnablePublicIP:   to.Ptr(true),
								ServerEdition:    to.Ptr(armpostgresqlhsc.ServerEditionMemoryOptimized),
								StorageQuotaInMb: to.Ptr[int64](10000),
								VCores:           to.Ptr[int64](8),
								Name:             to.Ptr(""),
								Role:             to.Ptr(armpostgresqlhsc.ServerRoleCoordinator),
								ServerCount:      to.Ptr[int32](1),
								ServerNames: []*armpostgresqlhsc.ServerNameItem{
									{
										Name:                     to.Ptr("hsctestsg2-c"),
										FullyQualifiedDomainName: to.Ptr("hsctestsg2-c.postgres.database.azure.com"),
									}},
							},
							{
								EnableHa:         to.Ptr(false),
								EnablePublicIP:   to.Ptr(false),
								ServerEdition:    to.Ptr(armpostgresqlhsc.ServerEditionGeneralPurpose),
								StorageQuotaInMb: to.Ptr[int64](10000),
								VCores:           to.Ptr[int64](4),
								Name:             to.Ptr(""),
								Role:             to.Ptr(armpostgresqlhsc.ServerRoleWorker),
								ServerCount:      to.Ptr[int32](2),
								ServerNames: []*armpostgresqlhsc.ServerNameItem{
									{
										Name:                     to.Ptr("hsctestsg2-w0"),
										FullyQualifiedDomainName: to.Ptr("hsctestsg2-w0.postgres.database.azure.com"),
									},
									{
										Name:                     to.Ptr("hsctestsg2-w1"),
										FullyQualifiedDomainName: to.Ptr("hsctestsg2-w1.postgres.database.azure.com"),
									}},
							}},
						SourceServerGroup:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg1"),
						StandbyAvailabilityZone: to.Ptr("2"),
						State:                   to.Ptr(armpostgresqlhsc.ServerStateReady),
					},
					SystemData: &armpostgresqlhsc.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("hsctestsg3"),
					Type:     to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg3"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"additionalProp3": to.Ptr("string"),
					},
					Properties: &armpostgresqlhsc.ServerGroupProperties{
						AdministratorLogin: to.Ptr("citus"),
						AvailabilityZone:   to.Ptr("1"),
						CitusVersion:       to.Ptr(armpostgresqlhsc.CitusVersionNine5),
						DelegatedSubnetArguments: &armpostgresqlhsc.ServerGroupPropertiesDelegatedSubnetArguments{
							SubnetArmResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/test-vnet-subnet"),
						},
						EarliestRestoreTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-14T00:00:37.467Z"); return t }()),
						EnableMx:            to.Ptr(true),
						EnableZfs:           to.Ptr(false),
						PostgresqlVersion:   to.Ptr(armpostgresqlhsc.PostgreSQLVersionTwelve),
						PrivateDNSZoneArguments: &armpostgresqlhsc.ServerGroupPropertiesPrivateDNSZoneArguments{
							PrivateDNSZoneArmResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.Network/privateDnsZones/test-private-dns-zone"),
						},
						ResourceProviderType: to.Ptr(armpostgresqlhsc.ResourceProviderTypeMeru),
						ServerRoleGroups: []*armpostgresqlhsc.ServerRoleGroup{
							{
								EnableHa:         to.Ptr(true),
								EnablePublicIP:   to.Ptr(true),
								ServerEdition:    to.Ptr(armpostgresqlhsc.ServerEditionMemoryOptimized),
								StorageQuotaInMb: to.Ptr[int64](10000),
								VCores:           to.Ptr[int64](4),
								Name:             to.Ptr(""),
								Role:             to.Ptr(armpostgresqlhsc.ServerRoleCoordinator),
								ServerCount:      to.Ptr[int32](1),
								ServerNames: []*armpostgresqlhsc.ServerNameItem{
									{
										Name:                     to.Ptr("hsctestsg3-c"),
										FullyQualifiedDomainName: to.Ptr("hsctestsg3-c.postgres.database.azure.com"),
									}},
							},
							{
								EnableHa:         to.Ptr(false),
								EnablePublicIP:   to.Ptr(false),
								ServerEdition:    to.Ptr(armpostgresqlhsc.ServerEditionGeneralPurpose),
								StorageQuotaInMb: to.Ptr[int64](10000),
								VCores:           to.Ptr[int64](8),
								Name:             to.Ptr(""),
								Role:             to.Ptr(armpostgresqlhsc.ServerRoleWorker),
								ServerCount:      to.Ptr[int32](3),
								ServerNames: []*armpostgresqlhsc.ServerNameItem{
									{
										Name:                     to.Ptr("hsctestsg3-w0"),
										FullyQualifiedDomainName: to.Ptr("hsctestsg3-w0.postgres.database.azure.com"),
									},
									{
										Name:                     to.Ptr("hsctestsg3-w1"),
										FullyQualifiedDomainName: to.Ptr("hsctestsg3-w1.postgres.database.azure.com"),
									},
									{
										Name:                     to.Ptr("hsctestsg3-w2"),
										FullyQualifiedDomainName: to.Ptr("hsctestsg3-w2.postgres.database.azure.com"),
									}},
							}},
						StandbyAvailabilityZone: to.Ptr("2"),
						State:                   to.Ptr(armpostgresqlhsc.ServerStateReady),
					},
					SystemData: &armpostgresqlhsc.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerGroups_ListByResourceGroup(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List the server groups by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewServerGroupsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByResourceGroup("TestGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresqlhsc.ServerGroupListResult{
			Value: []*armpostgresqlhsc.ServerGroup{
				{
					Name:     to.Ptr("hsctestsg1"),
					Type:     to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg1"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"additionalProp1": to.Ptr("string"),
					},
					Properties: &armpostgresqlhsc.ServerGroupProperties{
						AdministratorLogin: to.Ptr("citus"),
						AvailabilityZone:   to.Ptr("1"),
						CitusVersion:       to.Ptr(armpostgresqlhsc.CitusVersionNine5),
						DelegatedSubnetArguments: &armpostgresqlhsc.ServerGroupPropertiesDelegatedSubnetArguments{
							SubnetArmResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/test-vnet-subnet"),
						},
						EarliestRestoreTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-14T00:00:37.467Z"); return t }()),
						EnableMx:            to.Ptr(true),
						EnableZfs:           to.Ptr(false),
						PostgresqlVersion:   to.Ptr(armpostgresqlhsc.PostgreSQLVersionTwelve),
						PrivateDNSZoneArguments: &armpostgresqlhsc.ServerGroupPropertiesPrivateDNSZoneArguments{
							PrivateDNSZoneArmResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.Network/privateDnsZones/test-private-dns-zone"),
						},
						ResourceProviderType: to.Ptr(armpostgresqlhsc.ResourceProviderTypeMeru),
						ServerRoleGroups: []*armpostgresqlhsc.ServerRoleGroup{
							{
								EnableHa:         to.Ptr(true),
								EnablePublicIP:   to.Ptr(true),
								ServerEdition:    to.Ptr(armpostgresqlhsc.ServerEditionMemoryOptimized),
								StorageQuotaInMb: to.Ptr[int64](10000),
								VCores:           to.Ptr[int64](4),
								Name:             to.Ptr(""),
								Role:             to.Ptr(armpostgresqlhsc.ServerRoleCoordinator),
								ServerCount:      to.Ptr[int32](1),
								ServerNames: []*armpostgresqlhsc.ServerNameItem{
									{
										Name:                     to.Ptr("hsctestsg1-c"),
										FullyQualifiedDomainName: to.Ptr("hsctestsg1-c.postgres.database.azure.com"),
									}},
							},
							{
								EnableHa:         to.Ptr(false),
								EnablePublicIP:   to.Ptr(false),
								ServerEdition:    to.Ptr(armpostgresqlhsc.ServerEditionGeneralPurpose),
								StorageQuotaInMb: to.Ptr[int64](10000),
								VCores:           to.Ptr[int64](8),
								Name:             to.Ptr(""),
								Role:             to.Ptr(armpostgresqlhsc.ServerRoleWorker),
								ServerCount:      to.Ptr[int32](3),
								ServerNames: []*armpostgresqlhsc.ServerNameItem{
									{
										Name:                     to.Ptr("hsctestsg1-w0"),
										FullyQualifiedDomainName: to.Ptr("hsctestsg1-w0.postgres.database.azure.com"),
									},
									{
										Name:                     to.Ptr("hsctestsg1-w1"),
										FullyQualifiedDomainName: to.Ptr("hsctestsg1-w1.postgres.database.azure.com"),
									},
									{
										Name:                     to.Ptr("hsctestsg1-w2"),
										FullyQualifiedDomainName: to.Ptr("hsctestsg1-w2.postgres.database.azure.com"),
									}},
							}},
						StandbyAvailabilityZone: to.Ptr("2"),
						State:                   to.Ptr(armpostgresqlhsc.ServerStateReady),
					},
					SystemData: &armpostgresqlhsc.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("hsctestsg2"),
					Type:     to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg2"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"additionalProp2": to.Ptr("string"),
					},
					Properties: &armpostgresqlhsc.ServerGroupProperties{
						AdministratorLogin:   to.Ptr("citus"),
						AvailabilityZone:     to.Ptr("1"),
						CitusVersion:         to.Ptr(armpostgresqlhsc.CitusVersionNine5),
						EarliestRestoreTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-14T00:00:37.467Z"); return t }()),
						EnableMx:             to.Ptr(true),
						EnableZfs:            to.Ptr(false),
						PostgresqlVersion:    to.Ptr(armpostgresqlhsc.PostgreSQLVersionTwelve),
						ResourceProviderType: to.Ptr(armpostgresqlhsc.ResourceProviderTypeMeru),
						ServerRoleGroups: []*armpostgresqlhsc.ServerRoleGroup{
							{
								EnableHa:         to.Ptr(true),
								EnablePublicIP:   to.Ptr(true),
								ServerEdition:    to.Ptr(armpostgresqlhsc.ServerEditionMemoryOptimized),
								StorageQuotaInMb: to.Ptr[int64](10000),
								VCores:           to.Ptr[int64](8),
								Name:             to.Ptr(""),
								Role:             to.Ptr(armpostgresqlhsc.ServerRoleCoordinator),
								ServerCount:      to.Ptr[int32](1),
								ServerNames: []*armpostgresqlhsc.ServerNameItem{
									{
										Name:                     to.Ptr("hsctestsg2-c"),
										FullyQualifiedDomainName: to.Ptr("hsctestsg2-c.postgres.database.azure.com"),
									}},
							},
							{
								EnableHa:         to.Ptr(false),
								EnablePublicIP:   to.Ptr(false),
								ServerEdition:    to.Ptr(armpostgresqlhsc.ServerEditionGeneralPurpose),
								StorageQuotaInMb: to.Ptr[int64](10000),
								VCores:           to.Ptr[int64](4),
								Name:             to.Ptr(""),
								Role:             to.Ptr(armpostgresqlhsc.ServerRoleWorker),
								ServerCount:      to.Ptr[int32](2),
								ServerNames: []*armpostgresqlhsc.ServerNameItem{
									{
										Name:                     to.Ptr("hsctestsg2-w0"),
										FullyQualifiedDomainName: to.Ptr("hsctestsg2-w0.postgres.database.azure.com"),
									},
									{
										Name:                     to.Ptr("hsctestsg2-w1"),
										FullyQualifiedDomainName: to.Ptr("hsctestsg2-w1.postgres.database.azure.com"),
									}},
							}},
						StandbyAvailabilityZone: to.Ptr("2"),
						State:                   to.Ptr(armpostgresqlhsc.ServerStateReady),
					},
					SystemData: &armpostgresqlhsc.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("hsctestsg3"),
					Type:     to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg3"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"additionalProp3": to.Ptr("string"),
					},
					Properties: &armpostgresqlhsc.ServerGroupProperties{
						AdministratorLogin: to.Ptr("citus"),
						AvailabilityZone:   to.Ptr("1"),
						CitusVersion:       to.Ptr(armpostgresqlhsc.CitusVersionNine5),
						DelegatedSubnetArguments: &armpostgresqlhsc.ServerGroupPropertiesDelegatedSubnetArguments{
							SubnetArmResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/test-vnet-subnet"),
						},
						EarliestRestoreTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-14T00:00:37.467Z"); return t }()),
						EnableMx:            to.Ptr(true),
						EnableZfs:           to.Ptr(false),
						PostgresqlVersion:   to.Ptr(armpostgresqlhsc.PostgreSQLVersionTwelve),
						PrivateDNSZoneArguments: &armpostgresqlhsc.ServerGroupPropertiesPrivateDNSZoneArguments{
							PrivateDNSZoneArmResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.Network/privateDnsZones/test-private-dns-zone"),
						},
						ResourceProviderType: to.Ptr(armpostgresqlhsc.ResourceProviderTypeMeru),
						ServerRoleGroups: []*armpostgresqlhsc.ServerRoleGroup{
							{
								EnableHa:         to.Ptr(true),
								EnablePublicIP:   to.Ptr(true),
								ServerEdition:    to.Ptr(armpostgresqlhsc.ServerEditionMemoryOptimized),
								StorageQuotaInMb: to.Ptr[int64](10000),
								VCores:           to.Ptr[int64](4),
								Name:             to.Ptr(""),
								Role:             to.Ptr(armpostgresqlhsc.ServerRoleCoordinator),
								ServerCount:      to.Ptr[int32](1),
								ServerNames: []*armpostgresqlhsc.ServerNameItem{
									{
										Name:                     to.Ptr("hsctestsg3-c"),
										FullyQualifiedDomainName: to.Ptr("hsctestsg3-c.postgres.database.azure.com"),
									}},
							},
							{
								EnableHa:         to.Ptr(false),
								EnablePublicIP:   to.Ptr(false),
								ServerEdition:    to.Ptr(armpostgresqlhsc.ServerEditionGeneralPurpose),
								StorageQuotaInMb: to.Ptr[int64](10000),
								VCores:           to.Ptr[int64](8),
								Name:             to.Ptr(""),
								Role:             to.Ptr(armpostgresqlhsc.ServerRoleWorker),
								ServerCount:      to.Ptr[int32](3),
								ServerNames: []*armpostgresqlhsc.ServerNameItem{
									{
										Name:                     to.Ptr("hsctestsg3-w0"),
										FullyQualifiedDomainName: to.Ptr("hsctestsg3-w0.postgres.database.azure.com"),
									},
									{
										Name:                     to.Ptr("hsctestsg3-w1"),
										FullyQualifiedDomainName: to.Ptr("hsctestsg3-w1.postgres.database.azure.com"),
									},
									{
										Name:                     to.Ptr("hsctestsg3-w2"),
										FullyQualifiedDomainName: to.Ptr("hsctestsg3-w2.postgres.database.azure.com"),
									}},
							}},
						StandbyAvailabilityZone: to.Ptr("2"),
						State:                   to.Ptr(armpostgresqlhsc.ServerStateReady),
					},
					SystemData: &armpostgresqlhsc.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a new server group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewServerGroupsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestGroup",
		"hsctestsg",
		armpostgresqlhsc.ServerGroup{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"ElasticServer": to.Ptr("1"),
			},
			Properties: &armpostgresqlhsc.ServerGroupProperties{
				AdministratorLogin:         to.Ptr("citus"),
				AdministratorLoginPassword: to.Ptr("password"),
				AvailabilityZone:           to.Ptr("1"),
				BackupRetentionDays:        to.Ptr[int32](35),
				CitusVersion:               to.Ptr(armpostgresqlhsc.CitusVersionNine5),
				DelegatedSubnetArguments: &armpostgresqlhsc.ServerGroupPropertiesDelegatedSubnetArguments{
					SubnetArmResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/test-vnet-subnet"),
				},
				EnableMx:          to.Ptr(true),
				EnableZfs:         to.Ptr(false),
				PostgresqlVersion: to.Ptr(armpostgresqlhsc.PostgreSQLVersionTwelve),
				PrivateDNSZoneArguments: &armpostgresqlhsc.ServerGroupPropertiesPrivateDNSZoneArguments{
					PrivateDNSZoneArmResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.Network/privateDnsZones/test-private-dns-zone"),
				},
				ServerRoleGroups: []*armpostgresqlhsc.ServerRoleGroup{
					{
						EnableHa:         to.Ptr(true),
						ServerEdition:    to.Ptr(armpostgresqlhsc.ServerEditionGeneralPurpose),
						StorageQuotaInMb: to.Ptr[int64](524288),
						VCores:           to.Ptr[int64](4),
						Name:             to.Ptr(""),
						Role:             to.Ptr(armpostgresqlhsc.ServerRoleCoordinator),
						ServerCount:      to.Ptr[int32](1),
					},
					{
						EnableHa:         to.Ptr(false),
						ServerEdition:    to.Ptr(armpostgresqlhsc.ServerEditionMemoryOptimized),
						StorageQuotaInMb: to.Ptr[int64](524288),
						VCores:           to.Ptr[int64](4),
						Name:             to.Ptr(""),
						Role:             to.Ptr(armpostgresqlhsc.ServerRoleWorker),
						ServerCount:      to.Ptr[int32](3),
					}},
				StandbyAvailabilityZone: to.Ptr("2"),
			},
		},
		&armpostgresqlhsc.ServerGroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresqlhsc.ServerGroup{
			Name:       to.Ptr("hsctestsg"),
			Type:       to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2"),
			ID:         to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestResourceGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg"),
			Location:   to.Ptr("westus2"),
			Properties: &armpostgresqlhsc.ServerGroupProperties{},
			SystemData: &armpostgresqlhsc.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupCreatePITR.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a new server group as a point in time restore"},
	})
	client = armpostgresqlhsc.NewServerGroupsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"TestGroup",
		"hsctestsg",
		armpostgresqlhsc.ServerGroup{
			Location: to.Ptr("westus"),
			Properties: &armpostgresqlhsc.ServerGroupProperties{
				CreateMode:              to.Ptr(armpostgresqlhsc.CreateModePointInTimeRestore),
				EnableMx:                to.Ptr(true),
				EnableZfs:               to.Ptr(false),
				PointInTimeUTC:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-14T00:00:37.467Z"); return t }()),
				SourceLocation:          to.Ptr("eastus"),
				SourceResourceGroupName: to.Ptr("SourceGroup"),
				SourceServerGroupName:   to.Ptr("pgtests-source-server-group"),
				SourceSubscriptionID:    to.Ptr("dddddddd-dddd-dddd-dddd-dddddddddddd"),
			},
		},
		&armpostgresqlhsc.ServerGroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupCreatePITR.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupCreatePITR.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresqlhsc.ServerGroup{
			Name:       to.Ptr("hsctestsg"),
			Type:       to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2"),
			ID:         to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestResourceGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg"),
			Location:   to.Ptr("westus2"),
			Properties: &armpostgresqlhsc.ServerGroupProperties{},
			SystemData: &armpostgresqlhsc.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupCreatePITR.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupCreateReadReplica.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a new server group as a read replica"},
	})
	client = armpostgresqlhsc.NewServerGroupsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"TestGroup",
		"hsctestsg",
		armpostgresqlhsc.ServerGroup{
			Location: to.Ptr("westus"),
			Properties: &armpostgresqlhsc.ServerGroupProperties{
				CreateMode:              to.Ptr(armpostgresqlhsc.CreateModeReadReplica),
				SourceLocation:          to.Ptr("eastus"),
				SourceResourceGroupName: to.Ptr("SourceGroup"),
				SourceServerGroupName:   to.Ptr("pgtests-source-server-group"),
				SourceSubscriptionID:    to.Ptr("dddddddd-dddd-dddd-dddd-dddddddddddd"),
			},
		},
		&armpostgresqlhsc.ServerGroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupCreateReadReplica.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupCreateReadReplica.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresqlhsc.ServerGroup{
			Name:       to.Ptr("hsctestsg"),
			Type:       to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2"),
			ID:         to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestResourceGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg"),
			Location:   to.Ptr("westus2"),
			Properties: &armpostgresqlhsc.ServerGroupProperties{},
			SystemData: &armpostgresqlhsc.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupCreateReadReplica.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerGroups_Get(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the server group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewServerGroupsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"TestGroup",
		"hsctestsg1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresqlhsc.ServerGroup{
			Name:     to.Ptr("hsctestsg1"),
			Type:     to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2"),
			ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg1"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"additionalProp1": to.Ptr("string"),
				"additionalProp2": to.Ptr("string"),
				"additionalProp3": to.Ptr("string"),
			},
			Properties: &armpostgresqlhsc.ServerGroupProperties{
				AdministratorLogin: to.Ptr("citus"),
				AvailabilityZone:   to.Ptr("1"),
				CitusVersion:       to.Ptr(armpostgresqlhsc.CitusVersionNine5),
				DelegatedSubnetArguments: &armpostgresqlhsc.ServerGroupPropertiesDelegatedSubnetArguments{
					SubnetArmResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/test-vnet-subnet"),
				},
				EarliestRestoreTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-14T00:00:37.467Z"); return t }()),
				EnableMx:            to.Ptr(true),
				EnableZfs:           to.Ptr(false),
				MaintenanceWindow: &armpostgresqlhsc.MaintenanceWindow{
					CustomWindow: to.Ptr("Disabled"),
					DayOfWeek:    to.Ptr[int32](0),
					StartHour:    to.Ptr[int32](0),
					StartMinute:  to.Ptr[int32](0),
				},
				PostgresqlVersion: to.Ptr(armpostgresqlhsc.PostgreSQLVersionTwelve),
				PrivateDNSZoneArguments: &armpostgresqlhsc.ServerGroupPropertiesPrivateDNSZoneArguments{
					PrivateDNSZoneArmResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.Network/privateDnsZones/test-private-dns-zone"),
				},
				ReadReplicas: []*string{
					to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBForPostgreSQL/serverGroupsv2/hsctestreadreplica-01"),
					to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBForPostgreSQL/serverGroupsv2/hsctestreadreplica-02")},
				ResourceProviderType: to.Ptr(armpostgresqlhsc.ResourceProviderTypeMeru),
				ServerRoleGroups: []*armpostgresqlhsc.ServerRoleGroup{
					{
						EnableHa:         to.Ptr(true),
						EnablePublicIP:   to.Ptr(true),
						ServerEdition:    to.Ptr(armpostgresqlhsc.ServerEditionMemoryOptimized),
						StorageQuotaInMb: to.Ptr[int64](10000),
						VCores:           to.Ptr[int64](4),
						Name:             to.Ptr(""),
						Role:             to.Ptr(armpostgresqlhsc.ServerRoleCoordinator),
						ServerCount:      to.Ptr[int32](1),
						ServerNames: []*armpostgresqlhsc.ServerNameItem{
							{
								Name:                     to.Ptr("hsctestsg1-c"),
								FullyQualifiedDomainName: to.Ptr("hsctestsg1-c.postgres.database.azure.com"),
							}},
					},
					{
						EnableHa:         to.Ptr(false),
						EnablePublicIP:   to.Ptr(false),
						ServerEdition:    to.Ptr(armpostgresqlhsc.ServerEditionGeneralPurpose),
						StorageQuotaInMb: to.Ptr[int64](10000),
						VCores:           to.Ptr[int64](8),
						Name:             to.Ptr(""),
						Role:             to.Ptr(armpostgresqlhsc.ServerRoleWorker),
						ServerCount:      to.Ptr[int32](3),
						ServerNames: []*armpostgresqlhsc.ServerNameItem{
							{
								Name:                     to.Ptr("hsctestsg1-w0"),
								FullyQualifiedDomainName: to.Ptr("hsctestsg1-w0.postgres.database.azure.com"),
							},
							{
								Name:                     to.Ptr("hsctestsg1-w1"),
								FullyQualifiedDomainName: to.Ptr("hsctestsg1-w1.postgres.database.azure.com"),
							},
							{
								Name:                     to.Ptr("hsctestsg1-w2"),
								FullyQualifiedDomainName: to.Ptr("hsctestsg1-w2.postgres.database.azure.com"),
							}},
					}},
				StandbyAvailabilityZone: to.Ptr("2"),
				State:                   to.Ptr(armpostgresqlhsc.ServerStateReady),
			},
			SystemData: &armpostgresqlhsc.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerGroups_Delete(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete the server group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewServerGroupsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestGroup",
		"testservergroup",
		&armpostgresqlhsc.ServerGroupsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupDelete.json: %v", err)
	}
}

func TestServerGroups_Update(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupAddNode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Add new worker nodes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewServerGroupsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"TestGroup",
		"hsctestsg",
		armpostgresqlhsc.ServerGroupForUpdate{
			Location: to.Ptr("westus"),
			Properties: &armpostgresqlhsc.ServerGroupPropertiesForUpdate{
				ServerRoleGroups: []*armpostgresqlhsc.ServerRoleGroup{
					{
						Name:        to.Ptr(""),
						Role:        to.Ptr(armpostgresqlhsc.ServerRoleWorker),
						ServerCount: to.Ptr[int32](10),
					}},
			},
		},
		&armpostgresqlhsc.ServerGroupsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupAddNode.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupAddNode.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresqlhsc.ServerGroup{
			Name:       to.Ptr("hsctestsg"),
			Type:       to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2"),
			ID:         to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestResourceGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg"),
			Location:   to.Ptr("westus2"),
			Properties: &armpostgresqlhsc.ServerGroupProperties{},
			SystemData: &armpostgresqlhsc.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupAddNode.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupScaleCompute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Scale compute"},
	})
	client = armpostgresqlhsc.NewServerGroupsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"TestGroup",
		"hsctestsg",
		armpostgresqlhsc.ServerGroupForUpdate{
			Location: to.Ptr("westus"),
			Properties: &armpostgresqlhsc.ServerGroupPropertiesForUpdate{
				ServerRoleGroups: []*armpostgresqlhsc.ServerRoleGroup{
					{
						VCores: to.Ptr[int64](16),
						Name:   to.Ptr(""),
						Role:   to.Ptr(armpostgresqlhsc.ServerRoleCoordinator),
					}},
			},
		},
		&armpostgresqlhsc.ServerGroupsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupScaleCompute.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupScaleCompute.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresqlhsc.ServerGroup{
			Name:       to.Ptr("hsctestsg"),
			Type:       to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2"),
			ID:         to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestResourceGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg"),
			Location:   to.Ptr("westus2"),
			Properties: &armpostgresqlhsc.ServerGroupProperties{},
			SystemData: &armpostgresqlhsc.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupScaleCompute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupScaleStorage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Scale storage"},
	})
	client = armpostgresqlhsc.NewServerGroupsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"TestGroup",
		"hsctestsg",
		armpostgresqlhsc.ServerGroupForUpdate{
			Location: to.Ptr("westus"),
			Properties: &armpostgresqlhsc.ServerGroupPropertiesForUpdate{
				ServerRoleGroups: []*armpostgresqlhsc.ServerRoleGroup{
					{
						StorageQuotaInMb: to.Ptr[int64](8388608),
						Name:             to.Ptr(""),
						Role:             to.Ptr(armpostgresqlhsc.ServerRoleWorker),
					}},
			},
		},
		&armpostgresqlhsc.ServerGroupsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupScaleStorage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupScaleStorage.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresqlhsc.ServerGroup{
			Name:       to.Ptr("hsctestsg"),
			Type:       to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2"),
			ID:         to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestResourceGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg"),
			Location:   to.Ptr("westus2"),
			Properties: &armpostgresqlhsc.ServerGroupProperties{},
			SystemData: &armpostgresqlhsc.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupScaleStorage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupUpdateMaintenanceWindow.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update customer maintenance window"},
	})
	client = armpostgresqlhsc.NewServerGroupsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"TestGroup",
		"hsctestsg",
		armpostgresqlhsc.ServerGroupForUpdate{
			Properties: &armpostgresqlhsc.ServerGroupPropertiesForUpdate{
				MaintenanceWindow: &armpostgresqlhsc.MaintenanceWindow{
					CustomWindow: to.Ptr("Enabled"),
					DayOfWeek:    to.Ptr[int32](0),
					StartHour:    to.Ptr[int32](8),
					StartMinute:  to.Ptr[int32](0),
				},
			},
		},
		&armpostgresqlhsc.ServerGroupsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupUpdateMaintenanceWindow.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupUpdateMaintenanceWindow.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresqlhsc.ServerGroup{
			Name:       to.Ptr("hsctestsg"),
			Type:       to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2"),
			ID:         to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestResourceGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg"),
			Location:   to.Ptr("westus2"),
			Properties: &armpostgresqlhsc.ServerGroupProperties{},
			SystemData: &armpostgresqlhsc.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupUpdateMaintenanceWindow.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update the server group"},
	})
	client = armpostgresqlhsc.NewServerGroupsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"TestGroup",
		"hsctestsg",
		armpostgresqlhsc.ServerGroupForUpdate{
			Properties: &armpostgresqlhsc.ServerGroupPropertiesForUpdate{
				AdministratorLoginPassword: to.Ptr("secret"),
				BackupRetentionDays:        to.Ptr[int32](30),
				PostgresqlVersion:          to.Ptr(armpostgresqlhsc.PostgreSQLVersionTwelve),
				ServerRoleGroups: []*armpostgresqlhsc.ServerRoleGroup{
					{
						EnableHa:         to.Ptr(false),
						ServerEdition:    to.Ptr(armpostgresqlhsc.ServerEditionGeneralPurpose),
						StorageQuotaInMb: to.Ptr[int64](1048576),
						VCores:           to.Ptr[int64](8),
						Name:             to.Ptr(""),
						Role:             to.Ptr(armpostgresqlhsc.ServerRoleCoordinator),
						ServerCount:      to.Ptr[int32](1),
					},
					{
						EnableHa:         to.Ptr(true),
						ServerEdition:    to.Ptr(armpostgresqlhsc.ServerEditionMemoryOptimized),
						StorageQuotaInMb: to.Ptr[int64](524288),
						VCores:           to.Ptr[int64](4),
						Name:             to.Ptr(""),
						Role:             to.Ptr(armpostgresqlhsc.ServerRoleWorker),
						ServerCount:      to.Ptr[int32](4),
					}},
			},
			Tags: map[string]*string{
				"ElasticServer": to.Ptr("2"),
			},
		},
		&armpostgresqlhsc.ServerGroupsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupUpdate.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresqlhsc.ServerGroup{
			Name:       to.Ptr("hsctestsg"),
			Type:       to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2"),
			ID:         to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestResourceGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg"),
			Location:   to.Ptr("westus2"),
			Properties: &armpostgresqlhsc.ServerGroupProperties{},
			SystemData: &armpostgresqlhsc.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerGroups_Restart(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupRestart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restart all servers in the server group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewServerGroupsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginRestart(ctx,
		"TestGroup",
		"hsctestsg1",
		&armpostgresqlhsc.ServerGroupsClientBeginRestartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupRestart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupRestart.json: %v", err)
	}
}

func TestServerGroups_Start(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupStart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start all servers in the server group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewServerGroupsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginStart(ctx,
		"TestGroup",
		"hsctestsg1",
		&armpostgresqlhsc.ServerGroupsClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupStart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupStart.json: %v", err)
	}
}

func TestServerGroups_Stop(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupStop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop all servers in the server group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewServerGroupsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginStop(ctx,
		"TestGroup",
		"hsctestsg1",
		&armpostgresqlhsc.ServerGroupsClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupStop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGroupStop.json: %v", err)
	}
}

func TestServerGroups_CheckNameAvailability(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check name availability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewServerGroupsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		armpostgresqlhsc.NameAvailabilityRequest{
			Name: to.Ptr("name1"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/CheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresqlhsc.NameAvailability{
			Name:          to.Ptr("name1"),
			Type:          to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2"),
			Message:       to.Ptr(""),
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.NameAvailability) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NameAvailability)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_ListByServerGroup(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerListByServerGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List servers of the server group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByServerGroup("TestGroup",
		"hsctestsg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerListByServerGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresqlhsc.ServerGroupServerListResult{
			Value: []*armpostgresqlhsc.ServerGroupServer{
				{
					Name: to.Ptr("hsctestsg1-c"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/servers"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg1/servers/hsctestsg1-c"),
					Properties: &armpostgresqlhsc.ServerGroupServerProperties{
						EnableHa:                 to.Ptr(true),
						EnablePublicIP:           to.Ptr(true),
						ServerEdition:            to.Ptr(armpostgresqlhsc.ServerEditionMemoryOptimized),
						StorageQuotaInMb:         to.Ptr[int64](10000),
						VCores:                   to.Ptr[int64](4),
						AdministratorLogin:       to.Ptr("citus"),
						AvailabilityZone:         to.Ptr("1"),
						CitusVersion:             to.Ptr(armpostgresqlhsc.CitusVersionNine5),
						FullyQualifiedDomainName: to.Ptr("hsctestsg1-c.postgres.database.azure.com"),
						HaState:                  to.Ptr(armpostgresqlhsc.ServerHaStateHealthy),
						PostgresqlVersion:        to.Ptr(armpostgresqlhsc.PostgreSQLVersionTwelve),
						Role:                     to.Ptr(armpostgresqlhsc.ServerRoleCoordinator),
						StandbyAvailabilityZone:  to.Ptr("2"),
						State:                    to.Ptr(armpostgresqlhsc.ServerStateReady),
					},
					SystemData: &armpostgresqlhsc.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("hsctestsg1-w0"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/servers"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg1/servers/hsctestsg1-w0"),
					Properties: &armpostgresqlhsc.ServerGroupServerProperties{
						EnableHa:                 to.Ptr(false),
						EnablePublicIP:           to.Ptr(false),
						ServerEdition:            to.Ptr(armpostgresqlhsc.ServerEditionMemoryOptimized),
						StorageQuotaInMb:         to.Ptr[int64](10000),
						VCores:                   to.Ptr[int64](4),
						AdministratorLogin:       to.Ptr("citus"),
						AvailabilityZone:         to.Ptr("1"),
						CitusVersion:             to.Ptr(armpostgresqlhsc.CitusVersionNine5),
						FullyQualifiedDomainName: to.Ptr("hsctestsg1-w0.postgres.database.azure.com"),
						HaState:                  to.Ptr(armpostgresqlhsc.ServerHaStateNotEnabled),
						PostgresqlVersion:        to.Ptr(armpostgresqlhsc.PostgreSQLVersionTwelve),
						Role:                     to.Ptr(armpostgresqlhsc.ServerRoleWorker),
						StandbyAvailabilityZone:  to.Ptr(""),
						State:                    to.Ptr(armpostgresqlhsc.ServerStateReady),
					},
					SystemData: &armpostgresqlhsc.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("hsctestsg1-w1"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/servers"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg1/servers/hsctestsg1-w1"),
					Properties: &armpostgresqlhsc.ServerGroupServerProperties{
						EnableHa:                 to.Ptr(false),
						EnablePublicIP:           to.Ptr(false),
						ServerEdition:            to.Ptr(armpostgresqlhsc.ServerEditionMemoryOptimized),
						StorageQuotaInMb:         to.Ptr[int64](10000),
						VCores:                   to.Ptr[int64](4),
						AdministratorLogin:       to.Ptr("citus"),
						AvailabilityZone:         to.Ptr("1"),
						CitusVersion:             to.Ptr(armpostgresqlhsc.CitusVersionNine5),
						FullyQualifiedDomainName: to.Ptr("hsctestsg1-w1.postgres.database.azure.com"),
						HaState:                  to.Ptr(armpostgresqlhsc.ServerHaStateNotEnabled),
						PostgresqlVersion:        to.Ptr(armpostgresqlhsc.PostgreSQLVersionTwelve),
						Role:                     to.Ptr(armpostgresqlhsc.ServerRoleWorker),
						StandbyAvailabilityZone:  to.Ptr(""),
						State:                    to.Ptr(armpostgresqlhsc.ServerStateReady),
					},
					SystemData: &armpostgresqlhsc.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerGroupServerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerGroupServerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerListByServerGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_Get(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the server of server group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"TestGroup",
		"hsctestsg1",
		"hsctestsg1-c",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresqlhsc.ServerGroupServer{
			Name: to.Ptr("hsctestsg1-c"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/servers"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg1/servers/hsctestsg1-c"),
			Properties: &armpostgresqlhsc.ServerGroupServerProperties{
				EnableHa:                 to.Ptr(true),
				EnablePublicIP:           to.Ptr(true),
				ServerEdition:            to.Ptr(armpostgresqlhsc.ServerEditionMemoryOptimized),
				StorageQuotaInMb:         to.Ptr[int64](10000),
				VCores:                   to.Ptr[int64](4),
				AdministratorLogin:       to.Ptr("citus"),
				AvailabilityZone:         to.Ptr("1"),
				CitusVersion:             to.Ptr(armpostgresqlhsc.CitusVersionNine5),
				FullyQualifiedDomainName: to.Ptr("hsctestsg1-c.postgres.database.azure.com"),
				HaState:                  to.Ptr(armpostgresqlhsc.ServerHaStateHealthy),
				PostgresqlVersion:        to.Ptr(armpostgresqlhsc.PostgreSQLVersionTwelve),
				Role:                     to.Ptr(armpostgresqlhsc.ServerRoleCoordinator),
				StandbyAvailabilityZone:  to.Ptr("2"),
				State:                    to.Ptr(armpostgresqlhsc.ServerStateReady),
			},
			SystemData: &armpostgresqlhsc.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerGroupServer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerGroupServer)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ServerGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurations_ListByServer(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ConfigurationListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List configurations of the server that in the server group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewConfigurationsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByServer("TestResourceGroup",
		"hsctestsg",
		"testserver",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ConfigurationListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresqlhsc.ServerConfigurationListResult{
			Value: []*armpostgresqlhsc.ServerConfiguration{
				{
					Name: to.Ptr("application_name"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestResourceGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg/servers/testserver/configurations/application_name"),
					Properties: &armpostgresqlhsc.ServerConfigurationProperties{
						Description:   to.Ptr("Sets the application name to be reported in statistics and logs."),
						AllowedValues: to.Ptr("[A-Za-z0-9._-]*"),
						DataType:      to.Ptr(armpostgresqlhsc.ConfigurationDataType("String")),
						DefaultValue:  to.Ptr(""),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr(""),
					},
					SystemData: &armpostgresqlhsc.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("array_nulls"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestResourceGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg/servers/testserver/configurations/array_nulls"),
					Properties: &armpostgresqlhsc.ServerConfigurationProperties{
						Description:   to.Ptr("Enables input of NULL elements in arrays."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr(armpostgresqlhsc.ConfigurationDataTypeBoolean),
						DefaultValue:  to.Ptr("on"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("on"),
					},
					SystemData: &armpostgresqlhsc.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("autovacuum"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestResourceGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg/servers/testserver/configurations/autovacuum"),
					Properties: &armpostgresqlhsc.ServerConfigurationProperties{
						Description:   to.Ptr("Starts the autovacuum subprocess."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr(armpostgresqlhsc.ConfigurationDataTypeBoolean),
						DefaultValue:  to.Ptr("on"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("on"),
					},
					SystemData: &armpostgresqlhsc.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerConfigurationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ConfigurationListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurations_ListByServerGroup(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ConfigurationListByServerGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List configurations of the server group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewConfigurationsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByServerGroup("TestResourceGroup",
		"hsctestsg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ConfigurationListByServerGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresqlhsc.ServerGroupConfigurationListResult{
			Value: []*armpostgresqlhsc.ServerGroupConfiguration{
				{
					Name: to.Ptr("array_nulls"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestResourceGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg/configurations/array_nulls"),
					Properties: &armpostgresqlhsc.ServerGroupConfigurationProperties{
						Description:   to.Ptr("Enable input of NULL elements in arrays."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr(armpostgresqlhsc.ConfigurationDataTypeBoolean),
						ServerRoleGroupConfigurations: []*armpostgresqlhsc.ServerRoleGroupConfiguration{
							{
								DefaultValue: to.Ptr("on"),
								Role:         to.Ptr(armpostgresqlhsc.ServerRoleCoordinator),
								Source:       to.Ptr("system-default"),
								Value:        to.Ptr("on"),
							},
							{
								DefaultValue: to.Ptr("on"),
								Role:         to.Ptr(armpostgresqlhsc.ServerRoleWorker),
								Source:       to.Ptr("user-override"),
								Value:        to.Ptr("off"),
							}},
					},
					SystemData: &armpostgresqlhsc.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("backslash_quote"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestResourceGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg/configurations/backslash_quote"),
					Properties: &armpostgresqlhsc.ServerGroupConfigurationProperties{
						Description:   to.Ptr("Sets whether \"\\'\" is allowed in string literals."),
						AllowedValues: to.Ptr("safe_encoding,on,off"),
						DataType:      to.Ptr(armpostgresqlhsc.ConfigurationDataTypeEnumeration),
						ServerRoleGroupConfigurations: []*armpostgresqlhsc.ServerRoleGroupConfiguration{
							{
								DefaultValue: to.Ptr("safe_encoding"),
								Role:         to.Ptr(armpostgresqlhsc.ServerRoleCoordinator),
								Source:       to.Ptr("user-override"),
								Value:        to.Ptr("off"),
							},
							{
								DefaultValue: to.Ptr("safe_encoding"),
								Role:         to.Ptr(armpostgresqlhsc.ServerRoleWorker),
								Source:       to.Ptr("system-default"),
								Value:        to.Ptr("safe_encoding"),
							}},
					},
					SystemData: &armpostgresqlhsc.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("work_mem"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestResourceGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg/configurations/work_mem"),
					Properties: &armpostgresqlhsc.ServerGroupConfigurationProperties{
						Description:   to.Ptr("Sets the amount of memory to be used by internal sort operations and hash tables before writing to temporary disk files."),
						AllowedValues: to.Ptr("4096-2097151"),
						DataType:      to.Ptr(armpostgresqlhsc.ConfigurationDataTypeInteger),
						ServerRoleGroupConfigurations: []*armpostgresqlhsc.ServerRoleGroupConfiguration{
							{
								DefaultValue: to.Ptr("158720"),
								Role:         to.Ptr(armpostgresqlhsc.ServerRoleCoordinator),
								Source:       to.Ptr("system-default"),
								Value:        to.Ptr("158720"),
							},
							{
								DefaultValue: to.Ptr("115712"),
								Role:         to.Ptr(armpostgresqlhsc.ServerRoleWorker),
								Source:       to.Ptr("system-default"),
								Value:        to.Ptr("115712"),
							}},
					},
					SystemData: &armpostgresqlhsc.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("client_encoding"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestResourceGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg/configurations/client_encoding"),
					Properties: &armpostgresqlhsc.ServerGroupConfigurationProperties{
						Description:   to.Ptr("Sets the client's character set encoding."),
						AllowedValues: to.Ptr("BIG5,EUC_CN,EUC_JP,EUC_JIS_2004,EUC_KR,EUC_TW,GB18030,GBK,ISO_8859_5,ISO_8859_6,ISO_8859_7,ISO_8859_8,JOHAB,KOI8R,KOI8U,LATIN1,LATIN2,LATIN3,LATIN4,LATIN5,LATIN6,LATIN7,LATIN8,LATIN9,LATIN10,MULE_INTERNAL,SJIS,SHIFT_JIS_2004,SQL_ASCII,UHC,UTF8,WIN866,WIN874,WIN1250,WIN1251,WIN1252,WIN1253,WIN1254,WIN1255,WIN1256,WIN1257,WIN1258"),
						DataType:      to.Ptr(armpostgresqlhsc.ConfigurationDataTypeEnumeration),
						ServerRoleGroupConfigurations: []*armpostgresqlhsc.ServerRoleGroupConfiguration{
							{
								DefaultValue: to.Ptr("sql_ascii"),
								Role:         to.Ptr(armpostgresqlhsc.ServerRoleCoordinator),
								Source:       to.Ptr("user-override"),
								Value:        to.Ptr("ISO_8859_7"),
							},
							{
								DefaultValue: to.Ptr("sql_ascii"),
								Role:         to.Ptr(armpostgresqlhsc.ServerRoleWorker),
								Source:       to.Ptr("user-override"),
								Value:        to.Ptr("ISO_8859_7"),
							}},
					},
					SystemData: &armpostgresqlhsc.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerGroupConfigurationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerGroupConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ConfigurationListByServerGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurations_Update(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ConfigurationUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update single configuration of the server group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewConfigurationsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"TestResourceGroup",
		"hsctestsg",
		"array_nulls",
		armpostgresqlhsc.ServerGroupConfiguration{
			Properties: &armpostgresqlhsc.ServerGroupConfigurationProperties{
				ServerRoleGroupConfigurations: []*armpostgresqlhsc.ServerRoleGroupConfiguration{
					{
						Role:  to.Ptr(armpostgresqlhsc.ServerRoleCoordinator),
						Value: to.Ptr("on"),
					},
					{
						Role:  to.Ptr(armpostgresqlhsc.ServerRoleWorker),
						Value: to.Ptr("off"),
					}},
			},
		},
		&armpostgresqlhsc.ConfigurationsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ConfigurationUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ConfigurationUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresqlhsc.ServerGroupConfiguration{
			Name: to.Ptr("array_nulls"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/configurations"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestResourceGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg/configurations/array_nulls"),
			Properties: &armpostgresqlhsc.ServerGroupConfigurationProperties{
				ServerRoleGroupConfigurations: []*armpostgresqlhsc.ServerRoleGroupConfiguration{
					{
						Role:  to.Ptr(armpostgresqlhsc.ServerRoleCoordinator),
						Value: to.Ptr("on"),
					},
					{
						Role:  to.Ptr(armpostgresqlhsc.ServerRoleWorker),
						Value: to.Ptr("off"),
					}},
			},
			SystemData: &armpostgresqlhsc.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerGroupConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerGroupConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ConfigurationUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurations_Get(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ConfigurationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get single configuration of the server group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewConfigurationsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"TestResourceGroup",
		"hsctestsg",
		"array_nulls",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ConfigurationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresqlhsc.ServerGroupConfiguration{
			Name: to.Ptr("array_nulls"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/configurations"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestResourceGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg/configurations/array_nulls"),
			Properties: &armpostgresqlhsc.ServerGroupConfigurationProperties{
				Description:   to.Ptr("Enable input of NULL elements in arrays."),
				AllowedValues: to.Ptr("on,off"),
				DataType:      to.Ptr(armpostgresqlhsc.ConfigurationDataTypeBoolean),
				ServerRoleGroupConfigurations: []*armpostgresqlhsc.ServerRoleGroupConfiguration{
					{
						DefaultValue: to.Ptr("on"),
						Role:         to.Ptr(armpostgresqlhsc.ServerRoleCoordinator),
						Source:       to.Ptr("system-default"),
						Value:        to.Ptr("on"),
					},
					{
						DefaultValue: to.Ptr("on"),
						Role:         to.Ptr(armpostgresqlhsc.ServerRoleWorker),
						Source:       to.Ptr("user-override"),
						Value:        to.Ptr("off"),
					}},
			},
			SystemData: &armpostgresqlhsc.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerGroupConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerGroupConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/ConfigurationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallRules_CreateOrUpdate(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/FirewallRuleCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a firewall rule of the server group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewFirewallRulesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestGroup",
		"pgtestsvc4",
		"rule1",
		armpostgresqlhsc.FirewallRule{
			Properties: &armpostgresqlhsc.FirewallRuleProperties{
				EndIPAddress:   to.Ptr("255.255.255.255"),
				StartIPAddress: to.Ptr("0.0.0.0"),
			},
		},
		&armpostgresqlhsc.FirewallRulesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/FirewallRuleCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/FirewallRuleCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresqlhsc.FirewallRule{
			Name: to.Ptr("rule1"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/firewallRules"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/pgtestsvc4/firewallRules/rule1"),
			Properties: &armpostgresqlhsc.FirewallRuleProperties{
				EndIPAddress:   to.Ptr("255.255.255.255"),
				StartIPAddress: to.Ptr("0.0.0.0"),
			},
			SystemData: &armpostgresqlhsc.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallRule)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/FirewallRuleCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallRules_Delete(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/FirewallRuleDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete the firewall rule of the server group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewFirewallRulesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestGroup",
		"pgtestsvc4",
		"rule1",
		&armpostgresqlhsc.FirewallRulesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/FirewallRuleDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/FirewallRuleDelete.json: %v", err)
	}
}

func TestFirewallRules_Get(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/FirewallRuleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the firewall rule of the server group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewFirewallRulesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"TestGroup",
		"pgtestsvc4",
		"rule1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/FirewallRuleGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresqlhsc.FirewallRule{
			Name: to.Ptr("rule1"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/firewallRules"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/pgtestsvc4/firewallRules/rule1"),
			Properties: &armpostgresqlhsc.FirewallRuleProperties{
				EndIPAddress:   to.Ptr("255.255.255.255"),
				StartIPAddress: to.Ptr("0.0.0.0"),
			},
			SystemData: &armpostgresqlhsc.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallRule)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/FirewallRuleGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallRules_ListByServerGroup(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/FirewallRuleListByServerGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List firewall rules of the server group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewFirewallRulesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByServerGroup("TestGroup",
		"pgtestsvc4",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/FirewallRuleListByServerGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresqlhsc.FirewallRuleListResult{
			Value: []*armpostgresqlhsc.FirewallRule{
				{
					Name: to.Ptr("rule1"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/firewallRules"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/pgtestsvc4/firewallRules/rule1"),
					Properties: &armpostgresqlhsc.FirewallRuleProperties{
						EndIPAddress:   to.Ptr("255.255.255.255"),
						StartIPAddress: to.Ptr("0.0.0.0"),
					},
					SystemData: &armpostgresqlhsc.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("rule2"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/firewallRules"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/pgtestsvc4/firewallRules/rule2"),
					Properties: &armpostgresqlhsc.FirewallRuleProperties{
						EndIPAddress:   to.Ptr("255.0.0.0"),
						StartIPAddress: to.Ptr("1.0.0.0"),
					},
					SystemData: &armpostgresqlhsc.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FirewallRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FirewallRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/FirewallRuleListByServerGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoles_Create(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/RoleCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RoleCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewRolesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"TestGroup",
		"pgtestsvc4",
		"role1",
		armpostgresqlhsc.Role{
			Properties: &armpostgresqlhsc.RoleProperties{
				Password: to.Ptr("secret"),
			},
		},
		&armpostgresqlhsc.RolesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/RoleCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/RoleCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresqlhsc.Role{
			Name:       to.Ptr("role1"),
			Type:       to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/roles"),
			ID:         to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/pgtestsvc4/roles/role1"),
			Properties: &armpostgresqlhsc.RoleProperties{},
			SystemData: &armpostgresqlhsc.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Role) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Role)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/RoleCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoles_Delete(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/RoleDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RoleDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewRolesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestGroup",
		"pgtestsvc4",
		"role1",
		&armpostgresqlhsc.RolesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/RoleDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/RoleDelete.json: %v", err)
	}
}

func TestRoles_ListByServerGroup(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/RoleListByServerGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RoleList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewRolesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByServerGroup("TestGroup",
		"pgtestsvc4",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/RoleListByServerGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresqlhsc.RoleListResult{
			Value: []*armpostgresqlhsc.Role{
				{
					Name:       to.Ptr("role1"),
					Type:       to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/roles"),
					ID:         to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/pgtestsvc4/roles/role1"),
					Properties: &armpostgresqlhsc.RoleProperties{},
					SystemData: &armpostgresqlhsc.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
					},
				},
				{
					Name:       to.Ptr("role2"),
					Type:       to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/roles"),
					ID:         to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/pgtestsvc4/roles/role2"),
					Properties: &armpostgresqlhsc.RoleProperties{},
					SystemData: &armpostgresqlhsc.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armpostgresqlhsc.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RoleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RoleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/RoleListByServerGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/OperationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all available operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresqlhsc.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/OperationList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresqlhsc.OperationListResult{
			Value: []*armpostgresqlhsc.Operation{
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/read"),
					Display: &armpostgresqlhsc.OperationDisplay{
						Description: to.Ptr("Return the list of server groups or gets the properties for the specified server group."),
						Operation:   to.Ptr("List/Get PostgreSQL Server Groups"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("PostgreSQL Server Group"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/write"),
					Display: &armpostgresqlhsc.OperationDisplay{
						Description: to.Ptr("Creates a server group with the specified parameters or update the properties or tags for the specified server group."),
						Operation:   to.Ptr("Create/Update PostgreSQL Server Group"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("PostgreSQL Server Group"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/delete"),
					Display: &armpostgresqlhsc.OperationDisplay{
						Description: to.Ptr("Deletes an existing server group."),
						Operation:   to.Ptr("Delete PostgreSQL Server Group"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("PostgreSQL Server Grouo"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/servers/read"),
					Display: &armpostgresqlhsc.OperationDisplay{
						Description: to.Ptr("Return the list of servers of server group or gets the properties for the specified server from server group."),
						Operation:   to.Ptr("List/Get PostgreSQL Servers of Server Group"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("PostgreSQL Server"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/servers/configurations/read"),
					Display: &armpostgresqlhsc.OperationDisplay{
						Description: to.Ptr("Return the list of configurations for a server or gets the value for the specified configuration."),
						Operation:   to.Ptr("List/Get Configurations of Server"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("Configurations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/configurations/read"),
					Display: &armpostgresqlhsc.OperationDisplay{
						Description: to.Ptr("Return the list of configurations for a server group or gets the value for the specified configuration."),
						Operation:   to.Ptr("List/Get Configurations of Server Group"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("Configurations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/configurations/write"),
					Display: &armpostgresqlhsc.OperationDisplay{
						Description: to.Ptr("Update an value of configurations."),
						Operation:   to.Ptr("Update Configurations of Server Group"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("Configurations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/firewallRules/read"),
					Display: &armpostgresqlhsc.OperationDisplay{
						Description: to.Ptr("Return the list of firewall rules for a server group or gets the properties for the specified firewall rule."),
						Operation:   to.Ptr("List/Get Firewall Rules"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("Firewall Rules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/firewallRules/write"),
					Display: &armpostgresqlhsc.OperationDisplay{
						Description: to.Ptr("Creates a firewall rule with the specified parameters or update an existing rule."),
						Operation:   to.Ptr("Create/Update Firewall Rule"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("Firewall Rules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/firewallRules/delete"),
					Display: &armpostgresqlhsc.OperationDisplay{
						Description: to.Ptr("Deletes an existing firewall rule."),
						Operation:   to.Ptr("Delete Firewall Rule"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("Firewall Rules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armpostgresqlhsc.OperationDisplay{
						Description: to.Ptr("Return types of metrics that are available for databases"),
						Operation:   to.Ptr("Get database metric definitions"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("Database Metric Definition"),
					},
					Properties: map[string]interface{}{
						"serviceSpecification": map[string]interface{}{
							"metricSpecifications": []interface{}{
								map[string]interface{}{
									"name":               "cpu_percent",
									"aggregationType":    "Average",
									"displayDescription": "CPU percent",
									"displayName":        "CPU percent",
									"fillGapWithZero":    true,
									"unit":               "Percent",
								},
								map[string]interface{}{
									"name":               "memory_percent",
									"aggregationType":    "Average",
									"displayDescription": "Memory percent",
									"displayName":        "Memory percent",
									"fillGapWithZero":    true,
									"unit":               "Percent",
								},
								map[string]interface{}{
									"name":               "io_consumption_percent",
									"aggregationType":    "Average",
									"displayDescription": "IO percent",
									"displayName":        "IO percent",
									"fillGapWithZero":    true,
									"unit":               "Percent",
								},
								map[string]interface{}{
									"name":               "storage_percent",
									"aggregationType":    "Average",
									"displayDescription": "Storage percentage",
									"displayName":        "Storage percentage",
									"unit":               "Percent",
								},
								map[string]interface{}{
									"name":               "storage_used",
									"aggregationType":    "Average",
									"displayDescription": "Storage used",
									"displayName":        "Storage used",
									"unit":               "Bytes",
								},
								map[string]interface{}{
									"name":               "storage_limit",
									"aggregationType":    "Average",
									"displayDescription": "Storage limit",
									"displayName":        "Storage limit",
									"unit":               "Bytes",
								},
								map[string]interface{}{
									"name":               "active_connections",
									"aggregationType":    "Average",
									"displayDescription": "Total active connections",
									"displayName":        "Total active connections",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":               "connections_failed",
									"aggregationType":    "Average",
									"displayDescription": "Total failed connections",
									"displayName":        "Total failed connections",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
							},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armpostgresqlhsc.OperationDisplay{
						Description: to.Ptr("Gets the disagnostic setting for the resource"),
						Operation:   to.Ptr("Read diagnostic setting"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("Database Metric Definition"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/serverGroupsv2/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armpostgresqlhsc.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource"),
						Operation:   to.Ptr("Write diagnostic setting"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("Database Metric Definition"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresqlhsc/resource-manager/Microsoft.DBforPostgreSQL/preview/2020-10-05-privatepreview/examples/OperationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
