//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcontainerinstance_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerinstance/armcontainerinstance"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestContainerGroups_List(t *testing.T) {
	// From example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ContainerGroupsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerinstance.NewContainerGroupsClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerinstance.ContainerGroupListResult{
			Value: []*armcontainerinstance.ContainerGroup{
				{
					Name:     to.Ptr("demo1"),
					Type:     to.Ptr("Microsoft.ContainerInstance/containerGroups"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/demo/providers/Microsoft.ContainerInstance/containerGroups/demo1"),
					Location: to.Ptr("WestUs"),
					Zones: []*string{
						to.Ptr("1")},
					Properties: &armcontainerinstance.ContainerGroupProperties{
						Containers: []*armcontainerinstance.Container{
							{
								Name: to.Ptr("demo1"),
								Properties: &armcontainerinstance.ContainerProperties{
									Command:              []*string{},
									EnvironmentVariables: []*armcontainerinstance.EnvironmentVariable{},
									Image:                to.Ptr("nginx"),
									InstanceView: &armcontainerinstance.ContainerPropertiesInstanceView{
										CurrentState: &armcontainerinstance.ContainerState{
											DetailStatus: to.Ptr(""),
											StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-17T17:27:21Z"); return t }()),
											State:        to.Ptr("Running"),
										},
										Events:       []*armcontainerinstance.Event{},
										RestartCount: to.Ptr[int32](0),
									},
									Ports: []*armcontainerinstance.ContainerPort{
										{
											Port: to.Ptr[int32](80),
										}},
									Resources: &armcontainerinstance.ResourceRequirements{
										Requests: &armcontainerinstance.ResourceRequests{
											CPU:        to.Ptr[float64](1),
											MemoryInGB: to.Ptr[float64](1.5),
										},
									},
									VolumeMounts: []*armcontainerinstance.VolumeMount{
										{
											Name:      to.Ptr("volume1"),
											MountPath: to.Ptr("/mnt/volume1"),
											ReadOnly:  to.Ptr(false),
										}},
								},
							}},
						ImageRegistryCredentials: []*armcontainerinstance.ImageRegistryCredential{
							{
								Server:   to.Ptr("azcloudconsoleregistry.azurecr.io"),
								Username: to.Ptr("azcloudconsoleregistry"),
							}},
						IPAddress: &armcontainerinstance.IPAddress{
							Type: to.Ptr(armcontainerinstance.ContainerGroupIPAddressTypePublic),
							IP:   to.Ptr("10.0.0.1"),
							Ports: []*armcontainerinstance.Port{
								{
									Port:     to.Ptr[int32](80),
									Protocol: to.Ptr(armcontainerinstance.ContainerGroupNetworkProtocolTCP),
								}},
						},
						OSType:            to.Ptr(armcontainerinstance.OperatingSystemTypesLinux),
						ProvisioningState: to.Ptr("Succeeded"),
						Volumes: []*armcontainerinstance.Volume{
							{
								Name: to.Ptr("volume1"),
								AzureFile: &armcontainerinstance.AzureFileVolume{
									ReadOnly:           to.Ptr(false),
									ShareName:          to.Ptr("share1"),
									StorageAccountName: to.Ptr("storage1"),
								},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ContainerGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ContainerGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContainerGroups_ListByResourceGroup(t *testing.T) {
	// From example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ContainerGroupsListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerinstance.NewContainerGroupsClient("subid", cred, &options)
	pager := client.ListByResourceGroup("demo",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerinstance.ContainerGroupListResult{
			Value: []*armcontainerinstance.ContainerGroup{
				{
					Name:     to.Ptr("demo1"),
					Type:     to.Ptr("Microsoft.ContainerInstance/containerGroups"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/demo/providers/Microsoft.ContainerInstance/containerGroups/demo1"),
					Location: to.Ptr("WestUs"),
					Zones: []*string{
						to.Ptr("1")},
					Properties: &armcontainerinstance.ContainerGroupProperties{
						Containers: []*armcontainerinstance.Container{
							{
								Name: to.Ptr("demo1"),
								Properties: &armcontainerinstance.ContainerProperties{
									Command:              []*string{},
									EnvironmentVariables: []*armcontainerinstance.EnvironmentVariable{},
									Image:                to.Ptr("nginx"),
									Ports: []*armcontainerinstance.ContainerPort{
										{
											Port: to.Ptr[int32](80),
										}},
									Resources: &armcontainerinstance.ResourceRequirements{
										Requests: &armcontainerinstance.ResourceRequests{
											CPU:        to.Ptr[float64](1),
											MemoryInGB: to.Ptr[float64](1.5),
										},
									},
									VolumeMounts: []*armcontainerinstance.VolumeMount{
										{
											Name:      to.Ptr("volume1"),
											MountPath: to.Ptr("/mnt/volume1"),
											ReadOnly:  to.Ptr(false),
										}},
								},
							}},
						ImageRegistryCredentials: []*armcontainerinstance.ImageRegistryCredential{
							{
								Server:   to.Ptr("azcloudconsoleregistry.azurecr.io"),
								Username: to.Ptr("azcloudconsoleregistry"),
							}},
						IPAddress: &armcontainerinstance.IPAddress{
							Type: to.Ptr(armcontainerinstance.ContainerGroupIPAddressTypePublic),
							IP:   to.Ptr("10.0.0.1"),
							Ports: []*armcontainerinstance.Port{
								{
									Port:     to.Ptr[int32](80),
									Protocol: to.Ptr(armcontainerinstance.ContainerGroupNetworkProtocolTCP),
								}},
						},
						OSType:            to.Ptr(armcontainerinstance.OperatingSystemTypesLinux),
						ProvisioningState: to.Ptr("Succeeded"),
						Volumes: []*armcontainerinstance.Volume{
							{
								Name: to.Ptr("volume1"),
								AzureFile: &armcontainerinstance.AzureFileVolume{
									ReadOnly:           to.Ptr(false),
									ShareName:          to.Ptr("share1"),
									StorageAccountName: to.Ptr("storage1"),
								},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ContainerGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ContainerGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContainerGroups_Get(t *testing.T) {
	// From example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsGet_Failed.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ContainerGroupsGet_Failed"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerinstance.NewContainerGroupsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"demo",
		"demo1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsGet_Failed.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerinstance.ContainerGroup{
			Name:     to.Ptr("demo1"),
			Type:     to.Ptr("Microsoft.ContainerInstance/containerGroups"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/demo/providers/Microsoft.ContainerInstance/containerGroups/demo1"),
			Location: to.Ptr("WestUs"),
			Properties: &armcontainerinstance.ContainerGroupProperties{
				Containers: []*armcontainerinstance.Container{
					{
						Name: to.Ptr("demo1"),
						Properties: &armcontainerinstance.ContainerProperties{
							Command:              []*string{},
							EnvironmentVariables: []*armcontainerinstance.EnvironmentVariable{},
							Image:                to.Ptr("nginx"),
							InstanceView: &armcontainerinstance.ContainerPropertiesInstanceView{
								CurrentState: &armcontainerinstance.ContainerState{
									DetailStatus: to.Ptr(""),
									StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-08T00:09:10Z"); return t }()),
									State:        to.Ptr("Waiting"),
								},
								Events: []*armcontainerinstance.Event{
									{
										Name:           to.Ptr("Pulling"),
										Type:           to.Ptr("Normal"),
										Count:          to.Ptr[int32](1),
										FirstTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-08T00:09:01Z"); return t }()),
										LastTimestamp:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-08T00:09:01Z"); return t }()),
										Message:        to.Ptr("pulling image \"nginx\""),
									},
									{
										Name:           to.Ptr("Pulled"),
										Type:           to.Ptr("Normal"),
										Count:          to.Ptr[int32](1),
										FirstTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-08T00:09:10Z"); return t }()),
										LastTimestamp:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-08T00:09:10Z"); return t }()),
										Message:        to.Ptr("Successfully pulled image \"nginx\""),
									}},
								RestartCount: to.Ptr[int32](0),
							},
							Ports: []*armcontainerinstance.ContainerPort{
								{
									Port: to.Ptr[int32](80),
								}},
							Resources: &armcontainerinstance.ResourceRequirements{
								Requests: &armcontainerinstance.ResourceRequests{
									CPU:        to.Ptr[float64](1),
									MemoryInGB: to.Ptr[float64](1.5),
								},
							},
							VolumeMounts: []*armcontainerinstance.VolumeMount{
								{
									Name:      to.Ptr("volume1"),
									MountPath: to.Ptr("/mnt/volume1"),
									ReadOnly:  to.Ptr(false),
								}},
						},
					}},
				ImageRegistryCredentials: []*armcontainerinstance.ImageRegistryCredential{
					{
						Server:   to.Ptr("azcloudconsoleregistry.azurecr.io"),
						Username: to.Ptr("azcloudconsoleregistry"),
					}},
				InstanceView: &armcontainerinstance.ContainerGroupPropertiesInstanceView{
					Events: []*armcontainerinstance.Event{
						{
							Name:           to.Ptr("FailedMount"),
							Type:           to.Ptr("Normal"),
							Count:          to.Ptr[int32](1),
							FirstTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-08T00:19:10Z"); return t }()),
							LastTimestamp:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-08T00:19:10Z"); return t }()),
							Message:        to.Ptr("Output: mount error(2): Permission denied"),
						}},
					State: to.Ptr("Pending"),
				},
				IPAddress: &armcontainerinstance.IPAddress{
					Type: to.Ptr(armcontainerinstance.ContainerGroupIPAddressTypePublic),
					IP:   to.Ptr("10.0.0.1"),
					Ports: []*armcontainerinstance.Port{
						{
							Port:     to.Ptr[int32](80),
							Protocol: to.Ptr(armcontainerinstance.ContainerGroupNetworkProtocolTCP),
						}},
				},
				OSType:            to.Ptr(armcontainerinstance.OperatingSystemTypesLinux),
				ProvisioningState: to.Ptr("Succeeded"),
				Volumes: []*armcontainerinstance.Volume{
					{
						Name: to.Ptr("volume1"),
						AzureFile: &armcontainerinstance.AzureFileVolume{
							ReadOnly:           to.Ptr(false),
							ShareName:          to.Ptr("share1"),
							StorageAccountName: to.Ptr("storage1"),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ContainerGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContainerGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsGet_Failed.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsGet_Succeeded.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ContainerGroupsGet_Succeeded"},
	})
	client = armcontainerinstance.NewContainerGroupsClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"demo",
		"demo1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsGet_Succeeded.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerinstance.ContainerGroup{
			Name:     to.Ptr("demo1"),
			Type:     to.Ptr("Microsoft.ContainerInstance/containerGroups"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/demo/providers/Microsoft.ContainerInstance/containerGroups/demo1"),
			Location: to.Ptr("WestUs"),
			Zones: []*string{
				to.Ptr("1")},
			Properties: &armcontainerinstance.ContainerGroupProperties{
				Containers: []*armcontainerinstance.Container{
					{
						Name: to.Ptr("demo1"),
						Properties: &armcontainerinstance.ContainerProperties{
							Command:              []*string{},
							EnvironmentVariables: []*armcontainerinstance.EnvironmentVariable{},
							Image:                to.Ptr("nginx"),
							Ports: []*armcontainerinstance.ContainerPort{
								{
									Port: to.Ptr[int32](80),
								}},
							Resources: &armcontainerinstance.ResourceRequirements{
								Requests: &armcontainerinstance.ResourceRequests{
									CPU:        to.Ptr[float64](1),
									MemoryInGB: to.Ptr[float64](1.5),
								},
							},
							VolumeMounts: []*armcontainerinstance.VolumeMount{
								{
									Name:      to.Ptr("volume1"),
									MountPath: to.Ptr("/mnt/volume1"),
									ReadOnly:  to.Ptr(false),
								}},
						},
					}},
				ImageRegistryCredentials: []*armcontainerinstance.ImageRegistryCredential{
					{
						Server:   to.Ptr("azcloudconsoleregistry.azurecr.io"),
						Username: to.Ptr("azcloudconsoleregistry"),
					}},
				IPAddress: &armcontainerinstance.IPAddress{
					Type: to.Ptr(armcontainerinstance.ContainerGroupIPAddressTypePublic),
					IP:   to.Ptr("10.0.0.1"),
					Ports: []*armcontainerinstance.Port{
						{
							Port:     to.Ptr[int32](80),
							Protocol: to.Ptr(armcontainerinstance.ContainerGroupNetworkProtocolTCP),
						}},
				},
				OSType:            to.Ptr(armcontainerinstance.OperatingSystemTypesLinux),
				ProvisioningState: to.Ptr("Succeeded"),
				Volumes: []*armcontainerinstance.Volume{
					{
						Name: to.Ptr("volume1"),
						AzureFile: &armcontainerinstance.AzureFileVolume{
							ReadOnly:           to.Ptr(false),
							ShareName:          to.Ptr("share1"),
							StorageAccountName: to.Ptr("storage1"),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ContainerGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContainerGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsGet_Succeeded.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContainerGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ContainerGroupsCreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerinstance.NewContainerGroupsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"demo",
		"demo1",
		armcontainerinstance.ContainerGroup{
			Location: to.Ptr("west us"),
			Identity: &armcontainerinstance.ContainerGroupIdentity{
				Type: to.Ptr(armcontainerinstance.ResourceIdentityTypeSystemAssignedUserAssigned),
				UserAssignedIdentities: map[string]*armcontainerinstance.Components10Wh5UdSchemasContainergroupidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-name": {},
				},
			},
			Properties: &armcontainerinstance.ContainerGroupProperties{
				Containers: []*armcontainerinstance.Container{
					{
						Name: to.Ptr("demo1"),
						Properties: &armcontainerinstance.ContainerProperties{
							Command:              []*string{},
							EnvironmentVariables: []*armcontainerinstance.EnvironmentVariable{},
							Image:                to.Ptr("nginx"),
							Ports: []*armcontainerinstance.ContainerPort{
								{
									Port: to.Ptr[int32](80),
								}},
							Resources: &armcontainerinstance.ResourceRequirements{
								Requests: &armcontainerinstance.ResourceRequests{
									CPU: to.Ptr[float64](1),
									Gpu: &armcontainerinstance.GpuResource{
										Count: to.Ptr[int32](1),
										SKU:   to.Ptr(armcontainerinstance.GpuSKUK80),
									},
									MemoryInGB: to.Ptr[float64](1.5),
								},
							},
							VolumeMounts: []*armcontainerinstance.VolumeMount{
								{
									Name:      to.Ptr("volume1"),
									MountPath: to.Ptr("/mnt/volume1"),
									ReadOnly:  to.Ptr(false),
								},
								{
									Name:      to.Ptr("volume2"),
									MountPath: to.Ptr("/mnt/volume2"),
									ReadOnly:  to.Ptr(false),
								},
								{
									Name:      to.Ptr("volume3"),
									MountPath: to.Ptr("/mnt/volume3"),
									ReadOnly:  to.Ptr(true),
								}},
						},
					}},
				Diagnostics: &armcontainerinstance.ContainerGroupDiagnostics{
					LogAnalytics: &armcontainerinstance.LogAnalytics{
						LogType: to.Ptr(armcontainerinstance.LogAnalyticsLogTypeContainerInsights),
						Metadata: map[string]*string{
							"test-key": to.Ptr("test-metadata-value"),
						},
						WorkspaceID:         to.Ptr("workspaceid"),
						WorkspaceKey:        to.Ptr("workspaceKey"),
						WorkspaceResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg/providers/microsoft.operationalinsights/workspaces/workspace"),
					},
				},
				DNSConfig: &armcontainerinstance.DNSConfiguration{
					NameServers: []*string{
						to.Ptr("1.1.1.1")},
					Options:       to.Ptr("ndots:2"),
					SearchDomains: to.Ptr("cluster.local svc.cluster.local"),
				},
				ImageRegistryCredentials: []*armcontainerinstance.ImageRegistryCredential{},
				IPAddress: &armcontainerinstance.IPAddress{
					Type:                    to.Ptr(armcontainerinstance.ContainerGroupIPAddressTypePublic),
					DNSNameLabel:            to.Ptr("dnsnamelabel1"),
					DNSNameLabelReusePolicy: to.Ptr(armcontainerinstance.DNSNameLabelReusePolicyUnsecure),
					Ports: []*armcontainerinstance.Port{
						{
							Port:     to.Ptr[int32](80),
							Protocol: to.Ptr(armcontainerinstance.ContainerGroupNetworkProtocolTCP),
						}},
				},
				OSType: to.Ptr(armcontainerinstance.OperatingSystemTypesLinux),
				SubnetIDs: []*armcontainerinstance.ContainerGroupSubnetID{
					{
						ID: to.Ptr("[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"),
					}},
				Volumes: []*armcontainerinstance.Volume{
					{
						Name: to.Ptr("volume1"),
						AzureFile: &armcontainerinstance.AzureFileVolume{
							ShareName:          to.Ptr("shareName"),
							StorageAccountKey:  to.Ptr("accountKey"),
							StorageAccountName: to.Ptr("accountName"),
						},
					},
					{
						Name:     to.Ptr("volume2"),
						EmptyDir: map[string]interface{}{},
					},
					{
						Name: to.Ptr("volume3"),
						Secret: map[string]*string{
							"secretKey1": to.Ptr("SecretValue1InBase64"),
							"secretKey2": to.Ptr("SecretValue2InBase64"),
						},
					}},
			},
		},
		&armcontainerinstance.ContainerGroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerinstance.ContainerGroup{
			Name:     to.Ptr("demo1"),
			Type:     to.Ptr("Microsoft.ContainerInstance/containerGroups"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/demo/providers/Microsoft.ContainerInstance/containerGroups/demo1"),
			Location: to.Ptr("WestUs"),
			Zones: []*string{
				to.Ptr("1")},
			Properties: &armcontainerinstance.ContainerGroupProperties{
				Containers: []*armcontainerinstance.Container{
					{
						Name: to.Ptr("demo1"),
						Properties: &armcontainerinstance.ContainerProperties{
							Command:              []*string{},
							EnvironmentVariables: []*armcontainerinstance.EnvironmentVariable{},
							Image:                to.Ptr("nginx"),
							Ports: []*armcontainerinstance.ContainerPort{
								{
									Port: to.Ptr[int32](80),
								}},
							Resources: &armcontainerinstance.ResourceRequirements{
								Requests: &armcontainerinstance.ResourceRequests{
									CPU: to.Ptr[float64](1),
									Gpu: &armcontainerinstance.GpuResource{
										Count: to.Ptr[int32](1),
										SKU:   to.Ptr(armcontainerinstance.GpuSKUK80),
									},
									MemoryInGB: to.Ptr[float64](1.5),
								},
							},
							VolumeMounts: []*armcontainerinstance.VolumeMount{
								{
									Name:      to.Ptr("volume1"),
									MountPath: to.Ptr("/mnt/volume1"),
									ReadOnly:  to.Ptr(false),
								},
								{
									Name:      to.Ptr("volume2"),
									MountPath: to.Ptr("/mnt/volume2"),
									ReadOnly:  to.Ptr(false),
								},
								{
									Name:      to.Ptr("volume3"),
									MountPath: to.Ptr("/mnt/volume3"),
									ReadOnly:  to.Ptr(true),
								}},
						},
					}},
				Diagnostics: &armcontainerinstance.ContainerGroupDiagnostics{
					LogAnalytics: &armcontainerinstance.LogAnalytics{
						WorkspaceID:  to.Ptr("workspaceid"),
						WorkspaceKey: to.Ptr(""),
					},
				},
				DNSConfig: &armcontainerinstance.DNSConfiguration{
					NameServers: []*string{
						to.Ptr("1.1.1.1")},
					Options:       to.Ptr("ndots:2"),
					SearchDomains: to.Ptr("cluster.local svc.cluster.local"),
				},
				ImageRegistryCredentials: []*armcontainerinstance.ImageRegistryCredential{},
				IPAddress: &armcontainerinstance.IPAddress{
					Type:                    to.Ptr(armcontainerinstance.ContainerGroupIPAddressTypePublic),
					DNSNameLabel:            to.Ptr("dnsnamelabel1"),
					DNSNameLabelReusePolicy: to.Ptr(armcontainerinstance.DNSNameLabelReusePolicyUnsecure),
					Fqdn:                    to.Ptr("dnsnamelabel1.azure-container.io"),
					IP:                      to.Ptr("10.0.0.1"),
					Ports: []*armcontainerinstance.Port{
						{
							Port:     to.Ptr[int32](80),
							Protocol: to.Ptr(armcontainerinstance.ContainerGroupNetworkProtocolTCP),
						}},
				},
				OSType:            to.Ptr(armcontainerinstance.OperatingSystemTypesLinux),
				ProvisioningState: to.Ptr("Succeeded"),
				Volumes: []*armcontainerinstance.Volume{
					{
						Name: to.Ptr("volume1"),
						AzureFile: &armcontainerinstance.AzureFileVolume{
							ShareName:          to.Ptr("shareName"),
							StorageAccountName: to.Ptr("accountName"),
						},
					},
					{
						Name:     to.Ptr("volume2"),
						EmptyDir: map[string]interface{}{},
					},
					{
						Name:   to.Ptr("volume3"),
						Secret: map[string]*string{},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ContainerGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContainerGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContainerGroups_Update(t *testing.T) {
	// From example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ContainerGroupsUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerinstance.NewContainerGroupsClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"demoResource",
		"demo1",
		armcontainerinstance.Resource{
			Tags: map[string]*string{
				"tag1key": to.Ptr("tag1Value"),
				"tag2key": to.Ptr("tag2Value"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerinstance.ContainerGroup{
			Name:     to.Ptr("demo1"),
			Type:     to.Ptr("Microsoft.ContainerInstance/containerGroups"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/demoResource/providers/Microsoft.ContainerInstance/containerGroups/demo1"),
			Location: to.Ptr("WestUs"),
			Tags: map[string]*string{
				"tag1key": to.Ptr("tag1Value"),
				"tag2key": to.Ptr("tag2Value"),
			},
			Properties: &armcontainerinstance.ContainerGroupProperties{
				Containers: []*armcontainerinstance.Container{
					{
						Name: to.Ptr("demo1"),
						Properties: &armcontainerinstance.ContainerProperties{
							Command:              []*string{},
							EnvironmentVariables: []*armcontainerinstance.EnvironmentVariable{},
							Image:                to.Ptr("nginx"),
							Ports: []*armcontainerinstance.ContainerPort{
								{
									Port: to.Ptr[int32](80),
								}},
							Resources: &armcontainerinstance.ResourceRequirements{
								Requests: &armcontainerinstance.ResourceRequests{
									CPU:        to.Ptr[float64](1),
									MemoryInGB: to.Ptr[float64](1.5),
								},
							},
							VolumeMounts: []*armcontainerinstance.VolumeMount{
								{
									Name:      to.Ptr("volume1"),
									MountPath: to.Ptr("/mnt/volume1"),
									ReadOnly:  to.Ptr(false),
								},
								{
									Name:      to.Ptr("volume2"),
									MountPath: to.Ptr("/mnt/volume2"),
									ReadOnly:  to.Ptr(false),
								},
								{
									Name:      to.Ptr("volume3"),
									MountPath: to.Ptr("/mnt/volume3"),
									ReadOnly:  to.Ptr(true),
								}},
						},
					}},
				ImageRegistryCredentials: []*armcontainerinstance.ImageRegistryCredential{},
				IPAddress: &armcontainerinstance.IPAddress{
					Type:         to.Ptr(armcontainerinstance.ContainerGroupIPAddressTypePublic),
					DNSNameLabel: to.Ptr("dnsnamelabel1"),
					Fqdn:         to.Ptr("dnsnamelabel1.azure-container.io"),
					IP:           to.Ptr("10.0.0.1"),
					Ports: []*armcontainerinstance.Port{
						{
							Port:     to.Ptr[int32](80),
							Protocol: to.Ptr(armcontainerinstance.ContainerGroupNetworkProtocolTCP),
						}},
				},
				OSType:            to.Ptr(armcontainerinstance.OperatingSystemTypesLinux),
				ProvisioningState: to.Ptr("Succeeded"),
				Volumes: []*armcontainerinstance.Volume{
					{
						Name: to.Ptr("volume1"),
						AzureFile: &armcontainerinstance.AzureFileVolume{
							ShareName:          to.Ptr("shareName"),
							StorageAccountName: to.Ptr("accountName"),
						},
					},
					{
						Name:     to.Ptr("volume2"),
						EmptyDir: map[string]interface{}{},
					},
					{
						Name:   to.Ptr("volume3"),
						Secret: map[string]*string{},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ContainerGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContainerGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContainerGroups_Delete(t *testing.T) {
	// From example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ContainerGroupsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerinstance.NewContainerGroupsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"demo",
		"demo1",
		&armcontainerinstance.ContainerGroupsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsDelete.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsDelete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerinstance.ContainerGroup{
			Name:     to.Ptr("demo1"),
			Type:     to.Ptr("Microsoft.ContainerInstance/containerGroups"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/demo/providers/Microsoft.ContainerInstance/containerGroups/demo1"),
			Location: to.Ptr("WestUs"),
			Zones: []*string{
				to.Ptr("1")},
			Properties: &armcontainerinstance.ContainerGroupProperties{
				Containers: []*armcontainerinstance.Container{
					{
						Name: to.Ptr("demo1"),
						Properties: &armcontainerinstance.ContainerProperties{
							Command:              []*string{},
							EnvironmentVariables: []*armcontainerinstance.EnvironmentVariable{},
							Image:                to.Ptr("nginx"),
							Ports: []*armcontainerinstance.ContainerPort{
								{
									Port: to.Ptr[int32](80),
								}},
							Resources: &armcontainerinstance.ResourceRequirements{
								Requests: &armcontainerinstance.ResourceRequests{
									CPU:        to.Ptr[float64](1),
									MemoryInGB: to.Ptr[float64](1.5),
								},
							},
							VolumeMounts: []*armcontainerinstance.VolumeMount{
								{
									Name:      to.Ptr("volume1"),
									MountPath: to.Ptr("/mnt/volume1"),
									ReadOnly:  to.Ptr(false),
								}},
						},
					}},
				ImageRegistryCredentials: []*armcontainerinstance.ImageRegistryCredential{
					{
						Server:   to.Ptr("azcloudconsoleregistry.azurecr.io"),
						Username: to.Ptr("azcloudconsoleregistry"),
					}},
				IPAddress: &armcontainerinstance.IPAddress{
					Type: to.Ptr(armcontainerinstance.ContainerGroupIPAddressTypePublic),
					IP:   to.Ptr("10.0.0.1"),
					Ports: []*armcontainerinstance.Port{
						{
							Port:     to.Ptr[int32](80),
							Protocol: to.Ptr(armcontainerinstance.ContainerGroupNetworkProtocolTCP),
						}},
				},
				OSType:            to.Ptr(armcontainerinstance.OperatingSystemTypesLinux),
				ProvisioningState: to.Ptr("Succeeded"),
				Volumes: []*armcontainerinstance.Volume{
					{
						Name: to.Ptr("volume1"),
						AzureFile: &armcontainerinstance.AzureFileVolume{
							ReadOnly:           to.Ptr(false),
							ShareName:          to.Ptr("share1"),
							StorageAccountName: to.Ptr("storage1"),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ContainerGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContainerGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsDelete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContainerGroups_Restart(t *testing.T) {
	// From example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsRestart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ContainerRestart"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerinstance.NewContainerGroupsClient("subid", cred, &options)
	poller, err := client.BeginRestart(ctx,
		"demo",
		"demo1",
		&armcontainerinstance.ContainerGroupsClientBeginRestartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsRestart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsRestart.json: %v", err)
	}
}

func TestContainerGroups_Stop(t *testing.T) {
	// From example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsStop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ContainerStop"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerinstance.NewContainerGroupsClient("subid", cred, &options)
	_, err := client.Stop(ctx,
		"demo",
		"demo1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsStop.json: %v", err)
	}
}

func TestContainerGroups_Start(t *testing.T) {
	// From example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsStart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ContainerStart"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerinstance.NewContainerGroupsClient("subid", cred, &options)
	poller, err := client.BeginStart(ctx,
		"demo",
		"demo1",
		&armcontainerinstance.ContainerGroupsClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsStart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsStart.json: %v", err)
	}
}

func TestContainerGroups_GetOutboundNetworkDependenciesEndpoints(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestOperations_List(t *testing.T) {
	// From example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/OperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OperationsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerinstance.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/OperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerinstance.OperationListResult{
			Value: []*armcontainerinstance.Operation{
				{
					Name: to.Ptr("Microsoft.ContainerInstance/containerGroups/read"),
					Display: &armcontainerinstance.OperationDisplay{
						Description: to.Ptr("Get all container goups."),
						Operation:   to.Ptr("Get Container Groups"),
						Provider:    to.Ptr("Microsoft Container Instance"),
						Resource:    to.Ptr("Container Group"),
					},
					Origin: to.Ptr(armcontainerinstance.ContainerInstanceOperationsOriginUser),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/OperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocation_ListUsage(t *testing.T) {
	// From example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupUsage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ContainerUsage"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerinstance.NewLocationClient("subid", cred, &options)
	pager := client.ListUsage("westcentralus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupUsage.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerinstance.UsageListResult{
			Value: []*armcontainerinstance.Usage{
				{
					Name: &armcontainerinstance.UsageName{
						LocalizedValue: to.Ptr("Container Groups"),
						Value:          to.Ptr("ContainerGroups"),
					},
					CurrentValue: to.Ptr[int32](1),
					Limit:        to.Ptr[int32](2000),
					Unit:         to.Ptr("Count"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupUsage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocation_ListCachedImages(t *testing.T) {
	// From example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/CachedImagesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CachedImages"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerinstance.NewLocationClient("subid", cred, &options)
	pager := client.ListCachedImages("westcentralus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/CachedImagesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerinstance.CachedImagesListResult{
			Value: []*armcontainerinstance.CachedImages{
				{
					Image:  to.Ptr("ubuntu:16.04"),
					OSType: to.Ptr("Linux"),
				},
				{
					Image:  to.Ptr("alpine:3.6"),
					OSType: to.Ptr("Linux"),
				},
				{
					Image:  to.Ptr("microsoft/nanoserver:10.0.14393.2485"),
					OSType: to.Ptr("Windows"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CachedImagesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CachedImagesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/CachedImagesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocation_ListCapabilities(t *testing.T) {
	// From example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/CapabilitiesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetCapabilities"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerinstance.NewLocationClient("subid", cred, &options)
	pager := client.ListCapabilities("westus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/CapabilitiesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerinstance.CapabilitiesListResult{
			Value: []*armcontainerinstance.Capabilities{
				{
					Capabilities: &armcontainerinstance.CapabilitiesCapabilities{
						MaxCPU:        to.Ptr[float32](4),
						MaxGpuCount:   to.Ptr[float32](4),
						MaxMemoryInGB: to.Ptr[float32](14),
					},
					Gpu:           to.Ptr("K80"),
					IPAddressType: to.Ptr("Public"),
					Location:      to.Ptr("West US"),
					OSType:        to.Ptr("Linux"),
					ResourceType:  to.Ptr("containerGroups"),
				},
				{
					Capabilities: &armcontainerinstance.CapabilitiesCapabilities{
						MaxCPU:        to.Ptr[float32](4),
						MaxGpuCount:   to.Ptr[float32](0),
						MaxMemoryInGB: to.Ptr[float32](14),
					},
					Gpu:           to.Ptr("None"),
					IPAddressType: to.Ptr("Public"),
					Location:      to.Ptr("West US"),
					OSType:        to.Ptr("Windows"),
					ResourceType:  to.Ptr("containerGroups"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CapabilitiesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CapabilitiesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/CapabilitiesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContainers_ListLogs(t *testing.T) {
	// From example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerListLogs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ContainerListLogs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerinstance.NewContainersClient("subid", cred, &options)
	res, err := client.ListLogs(ctx,
		"demo",
		"demo1",
		"container1",
		&armcontainerinstance.ContainersClientListLogsOptions{Tail: to.Ptr[int32](10),
			Timestamps: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerListLogs.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerinstance.Logs{
			Content: to.Ptr("log content"),
		}
		if !reflect.DeepEqual(exampleRes, res.Logs) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Logs)
			t.Fatalf("Mock response is not equal to example response for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerListLogs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContainers_ExecuteCommand(t *testing.T) {
	// From example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerExec.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ContainerExec"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerinstance.NewContainersClient("subid", cred, &options)
	res, err := client.ExecuteCommand(ctx,
		"demo",
		"demo1",
		"container1",
		armcontainerinstance.ContainerExecRequest{
			Command: to.Ptr("/bin/bash"),
			TerminalSize: &armcontainerinstance.ContainerExecRequestTerminalSize{
				Cols: to.Ptr[int32](12),
				Rows: to.Ptr[int32](12),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerExec.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerinstance.ContainerExecResponse{
			Password:     to.Ptr("password"),
			WebSocketURI: to.Ptr("wss://web-socket-uri"),
		}
		if !reflect.DeepEqual(exampleRes, res.ContainerExecResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContainerExecResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerExec.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContainers_Attach(t *testing.T) {
	// From example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerAttach.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ContainerAttach"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerinstance.NewContainersClient("subid", cred, &options)
	res, err := client.Attach(ctx,
		"demo",
		"demo1",
		"container1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerAttach.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerinstance.ContainerAttachResponse{
			Password:     to.Ptr("password"),
			WebSocketURI: to.Ptr("wss://web-socket-uri"),
		}
		if !reflect.DeepEqual(exampleRes, res.ContainerAttachResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContainerAttachResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerAttach.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
