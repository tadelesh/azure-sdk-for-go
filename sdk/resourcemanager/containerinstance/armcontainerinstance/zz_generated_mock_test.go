//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcontainerinstance

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestContainerGroups_List(t *testing.T) {
	// From example ContainerGroupsList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContainerGroupsClient(con,
		"subid")
	pager := client.List(&ContainerGroupsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ContainerGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ContainerGroup.ID should not be nil!")
			}
		}
	}
}

func TestContainerGroups_ListByResourceGroup(t *testing.T) {
	// From example ContainerGroupsListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContainerGroupsClient(con,
		"subid")
	pager := client.ListByResourceGroup("demo",
		&ContainerGroupsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ContainerGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ContainerGroup.ID should not be nil!")
			}
		}
	}
}

func TestContainerGroups_Get(t *testing.T) {
	// From example ContainerGroupsGet_Failed
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContainerGroupsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"demo",
		"demo1",
		&ContainerGroupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ContainerGroup.ID == nil {
		t.Fatal("ContainerGroup.ID should not be nil!")
	}

	// From example ContainerGroupsGet_Succeeded
	res, err = client.Get(ctx,
		"demo",
		"demo1",
		&ContainerGroupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ContainerGroup.ID == nil {
		t.Fatal("ContainerGroup.ID should not be nil!")
	}
}

func TestContainerGroups_CreateOrUpdate(t *testing.T) {
	// From example ContainerGroupsCreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContainerGroupsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"demo",
		"demo1",
		ContainerGroup{
			Resource: Resource{
				Location: to.StringPtr("west us"),
			},
			Identity: &ContainerGroupIdentity{
				Type: ResourceIdentityTypeSystemAssignedUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*Components10Wh5UdSchemasContainergroupidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-name": &Components10Wh5UdSchemasContainergroupidentityPropertiesUserassignedidentitiesAdditionalproperties{},
				},
			},
			Properties: &ContainerGroupProperties{
				Containers: []*Container{
					{
						Name: to.StringPtr("demo1"),
						Properties: &ContainerProperties{
							Command:              []*string{},
							EnvironmentVariables: []*EnvironmentVariable{},
							Image:                to.StringPtr("nginx"),
							Ports: []*ContainerPort{
								{
									Port: to.Int32Ptr(80),
								}},
							Resources: &ResourceRequirements{
								Requests: &ResourceRequests{
									CPU: to.Float64Ptr(1),
									Gpu: &GpuResource{
										Count: to.Int32Ptr(1),
										SKU:   GpuSKUK80.ToPtr(),
									},
									MemoryInGB: to.Float64Ptr(1.5),
								},
							},
							VolumeMounts: []*VolumeMount{
								{
									Name:      to.StringPtr("volume1"),
									MountPath: to.StringPtr("/mnt/volume1"),
									ReadOnly:  to.BoolPtr(false),
								},
								{
									Name:      to.StringPtr("volume2"),
									MountPath: to.StringPtr("/mnt/volume2"),
									ReadOnly:  to.BoolPtr(false),
								},
								{
									Name:      to.StringPtr("volume3"),
									MountPath: to.StringPtr("/mnt/volume3"),
									ReadOnly:  to.BoolPtr(true),
								}},
						},
					}},
				Diagnostics: &ContainerGroupDiagnostics{
					LogAnalytics: &LogAnalytics{
						LogType: LogAnalyticsLogTypeContainerInsights.ToPtr(),
						Metadata: map[string]*string{
							"test-key": to.StringPtr("test-metadata-value"),
						},
						WorkspaceID:         to.StringPtr("workspaceid"),
						WorkspaceKey:        to.StringPtr("workspaceKey"),
						WorkspaceResourceID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg/providers/microsoft.operationalinsights/workspaces/workspace"),
					},
				},
				DNSConfig: &DNSConfiguration{
					NameServers: []*string{
						to.StringPtr("1.1.1.1")},
					Options:       to.StringPtr("ndots:2"),
					SearchDomains: to.StringPtr("cluster.local svc.cluster.local"),
				},
				ImageRegistryCredentials: []*ImageRegistryCredential{},
				IPAddress: &IPAddress{
					Type:         ContainerGroupIPAddressTypePublic.ToPtr(),
					DNSNameLabel: to.StringPtr("dnsnamelabel1"),
					Ports: []*Port{
						{
							Port:     to.Int32Ptr(80),
							Protocol: ContainerGroupNetworkProtocolTCP.ToPtr(),
						}},
				},
				OSType: OperatingSystemTypesLinux.ToPtr(),
				SubnetIDs: []*ContainerGroupSubnetID{
					{
						ID: to.StringPtr("[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"),
					}},
				Volumes: []*Volume{
					{
						Name: to.StringPtr("volume1"),
						AzureFile: &AzureFileVolume{
							ShareName:          to.StringPtr("shareName"),
							StorageAccountKey:  to.StringPtr("accountKey"),
							StorageAccountName: to.StringPtr("accountName"),
						},
					},
					{
						Name:     to.StringPtr("volume2"),
						EmptyDir: map[string]interface{}{},
					},
					{
						Name: to.StringPtr("volume3"),
						Secret: map[string]*string{
							"secretKey1": to.StringPtr("SecretValue1InBase64"),
							"secretKey2": to.StringPtr("SecretValue2InBase64"),
						},
					}},
			},
		},
		&ContainerGroupsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ContainerGroup.ID == nil {
		t.Fatal("ContainerGroup.ID should not be nil!")
	}
}

func TestContainerGroups_Update(t *testing.T) {
	// From example ContainerGroupsUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContainerGroupsClient(con,
		"subid")
	res, err := client.Update(ctx,
		"demoResource",
		"demo1",
		nil,
		&ContainerGroupsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ContainerGroup.ID == nil {
		t.Fatal("ContainerGroup.ID should not be nil!")
	}
}

func TestContainerGroups_Delete(t *testing.T) {
	// From example ContainerGroupsDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContainerGroupsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"demo",
		"demo1",
		&ContainerGroupsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ContainerGroup.ID == nil {
		t.Fatal("ContainerGroup.ID should not be nil!")
	}
}

func TestContainerGroups_Restart(t *testing.T) {
	// From example ContainerRestart
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContainerGroupsClient(con,
		"subid")
	poller, err := client.BeginRestart(ctx,
		"demo",
		"demo1",
		&ContainerGroupsBeginRestartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestContainerGroups_Stop(t *testing.T) {
	// From example ContainerStop
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContainerGroupsClient(con,
		"subid")
	_, err := client.Stop(ctx,
		"demo",
		"demo1",
		&ContainerGroupsStopOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestContainerGroups_Start(t *testing.T) {
	// From example ContainerStart
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContainerGroupsClient(con,
		"subid")
	poller, err := client.BeginStart(ctx,
		"demo",
		"demo1",
		&ContainerGroupsBeginStartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestContainerGroups_GetOutboundNetworkDependenciesEndpoints(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestOperations_List(t *testing.T) {
	// From example OperationsList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestLocation_ListUsage(t *testing.T) {
	// From example ContainerUsage
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLocationClient(con,
		"subid")
	_, err := client.ListUsage(ctx,
		"westcentralus",
		&LocationListUsageOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestLocation_ListCachedImages(t *testing.T) {
	// From example CachedImages
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLocationClient(con,
		"subid")
	pager := client.ListCachedImages("westcentralus",
		&LocationListCachedImagesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestLocation_ListCapabilities(t *testing.T) {
	// From example GetCapabilities
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLocationClient(con,
		"subid")
	pager := client.ListCapabilities("westus",
		&LocationListCapabilitiesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestContainers_ListLogs(t *testing.T) {
	// From example ContainerListLogs
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContainersClient(con,
		"subid")
	_, err := client.ListLogs(ctx,
		"demo",
		"demo1",
		"container1",
		&ContainersListLogsOptions{Tail: to.Int32Ptr(10)})
	if err != nil {
		t.Fatal(err)
	}
}

func TestContainers_ExecuteCommand(t *testing.T) {
	// From example ContainerExec
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContainersClient(con,
		"subid")
	_, err := client.ExecuteCommand(ctx,
		"demo",
		"demo1",
		"container1",
		ContainerExecRequest{
			Command: to.StringPtr("/bin/bash"),
			TerminalSize: &ContainerExecRequestTerminalSize{
				Cols: to.Int32Ptr(12),
				Rows: to.Int32Ptr(12),
			},
		},
		&ContainersExecuteCommandOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestContainers_Attach(t *testing.T) {
	// From example ContainerAttach
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContainersClient(con,
		"subid")
	_, err := client.Attach(ctx,
		"demo",
		"demo1",
		"container1",
		&ContainersAttachOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
