//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcontainerinstance

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// ContainerGroupsClientListByResourceGroupPager provides operations for iterating over paged responses.
type ContainerGroupsClientListByResourceGroupPager struct {
	client    *ContainerGroupsClient
	current   ContainerGroupsClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ContainerGroupsClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ContainerGroupsClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ContainerGroupListResult.NextLink == nil || len(*p.current.ContainerGroupListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ContainerGroupsClientListByResourceGroupPager) NextPage(ctx context.Context) (ContainerGroupsClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ContainerGroupsClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ContainerGroupsClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ContainerGroupsClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ContainerGroupsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return ContainerGroupsClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ContainerGroupsClientListPager provides operations for iterating over paged responses.
type ContainerGroupsClientListPager struct {
	client    *ContainerGroupsClient
	current   ContainerGroupsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ContainerGroupsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ContainerGroupsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ContainerGroupListResult.NextLink == nil || len(*p.current.ContainerGroupListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ContainerGroupsClientListPager) NextPage(ctx context.Context) (ContainerGroupsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ContainerGroupsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ContainerGroupsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ContainerGroupsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ContainerGroupsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ContainerGroupsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// LocationClientListCachedImagesPager provides operations for iterating over paged responses.
type LocationClientListCachedImagesPager struct {
	client    *LocationClient
	current   LocationClientListCachedImagesResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, LocationClientListCachedImagesResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *LocationClientListCachedImagesPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CachedImagesListResult.NextLink == nil || len(*p.current.CachedImagesListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *LocationClientListCachedImagesPager) NextPage(ctx context.Context) (LocationClientListCachedImagesResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return LocationClientListCachedImagesResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return LocationClientListCachedImagesResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return LocationClientListCachedImagesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return LocationClientListCachedImagesResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listCachedImagesHandleResponse(resp)
	if err != nil {
		return LocationClientListCachedImagesResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// LocationClientListCapabilitiesPager provides operations for iterating over paged responses.
type LocationClientListCapabilitiesPager struct {
	client    *LocationClient
	current   LocationClientListCapabilitiesResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, LocationClientListCapabilitiesResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *LocationClientListCapabilitiesPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CapabilitiesListResult.NextLink == nil || len(*p.current.CapabilitiesListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *LocationClientListCapabilitiesPager) NextPage(ctx context.Context) (LocationClientListCapabilitiesResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return LocationClientListCapabilitiesResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return LocationClientListCapabilitiesResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return LocationClientListCapabilitiesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return LocationClientListCapabilitiesResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listCapabilitiesHandleResponse(resp)
	if err != nil {
		return LocationClientListCapabilitiesResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// LocationClientListUsagePager provides operations for iterating over paged responses.
type LocationClientListUsagePager struct {
	client    *LocationClient
	current   LocationClientListUsageResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *LocationClientListUsagePager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *LocationClientListUsagePager) NextPage(ctx context.Context) (LocationClientListUsageResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return LocationClientListUsageResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return LocationClientListUsageResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return LocationClientListUsageResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return LocationClientListUsageResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listUsageHandleResponse(resp)
	if err != nil {
		return LocationClientListUsageResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
