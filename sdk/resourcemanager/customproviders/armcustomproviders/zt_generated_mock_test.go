//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcustomproviders_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/customproviders/armcustomproviders"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/operationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List the custom providers operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomproviders.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/operationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomproviders.ResourceProviderOperationList{
			Value: []*armcustomproviders.ResourceProviderOperation{
				{
					Name: to.Ptr("Microsoft.CustomProviders/resourceProviders/read"),
					Display: &armcustomproviders.ResourceProviderOperationDisplay{
						Description: to.Ptr("List or get the Custom Providers"),
						Operation:   to.Ptr("List Custom Providers"),
						Provider:    to.Ptr("Azure Custom Providers"),
						Resource:    to.Ptr("resourceProviders"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomProviders/resourceProviders/delete"),
					Display: &armcustomproviders.ResourceProviderOperationDisplay{
						Description: to.Ptr("List or get the Custom Providers"),
						Operation:   to.Ptr("List Custom Providers"),
						Provider:    to.Ptr("Azure Custom Providers"),
						Resource:    to.Ptr("resourceProviders"),
					},
				},
				{
					Name: to.Ptr("Microsoft.CustomProviders/resourceProviders/wrte"),
					Display: &armcustomproviders.ResourceProviderOperationDisplay{
						Description: to.Ptr("List or get the Custom Providers"),
						Operation:   to.Ptr("List Custom Providers"),
						Provider:    to.Ptr("Azure Custom Providers"),
						Resource:    to.Ptr("resourceProviders"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceProviderOperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceProviderOperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/operationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomResourceProvider_CreateOrUpdate(t *testing.T) {
	// From example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/createOrUpdateCustomRP.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update the custom resource provider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomproviders.NewCustomResourceProviderClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testRG",
		"newrp",
		armcustomproviders.CustomRPManifest{
			Location: to.Ptr("eastus"),
			Properties: &armcustomproviders.CustomRPManifestProperties{
				Actions: []*armcustomproviders.CustomRPActionRouteDefinition{
					{
						Name:        to.Ptr("TestAction"),
						Endpoint:    to.Ptr("https://mytestendpoint/"),
						RoutingType: to.Ptr(armcustomproviders.ActionRoutingProxy),
					}},
				ResourceTypes: []*armcustomproviders.CustomRPResourceTypeRouteDefinition{
					{
						Name:        to.Ptr("TestResource"),
						Endpoint:    to.Ptr("https://mytestendpoint2/"),
						RoutingType: to.Ptr(armcustomproviders.ResourceTypeRoutingProxyCache),
					}},
			},
		},
		&armcustomproviders.CustomResourceProviderClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/createOrUpdateCustomRP.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/createOrUpdateCustomRP.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomproviders.CustomRPManifest{
			Name:     to.Ptr("newrp"),
			Type:     to.Ptr("Microsoft.CustomProviders/resourceProviders"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG/providers/Microsoft.CustomProviders/resourceProviders/newrp"),
			Location: to.Ptr("East US"),
			Properties: &armcustomproviders.CustomRPManifestProperties{
				Actions: []*armcustomproviders.CustomRPActionRouteDefinition{
					{
						Name:        to.Ptr("TestAction"),
						Endpoint:    to.Ptr("https://mytestendpoint/"),
						RoutingType: to.Ptr(armcustomproviders.ActionRoutingProxy),
					}},
				ProvisioningState: to.Ptr(armcustomproviders.ProvisioningStateSucceeded),
				ResourceTypes: []*armcustomproviders.CustomRPResourceTypeRouteDefinition{
					{
						Name:        to.Ptr("TestResource"),
						Endpoint:    to.Ptr("https://mytestendpoint2/"),
						RoutingType: to.Ptr(armcustomproviders.ResourceTypeRoutingProxyCache),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomRPManifest) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomRPManifest)
			t.Fatalf("Mock response is not equal to example response for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/createOrUpdateCustomRP.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomResourceProvider_Delete(t *testing.T) {
	// From example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/deleteCustomRP.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a custom resource provider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomproviders.NewCustomResourceProviderClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testRG",
		"newrp",
		&armcustomproviders.CustomResourceProviderClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/deleteCustomRP.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/deleteCustomRP.json: %v", err)
	}
}

func TestCustomResourceProvider_Get(t *testing.T) {
	// From example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/getCustomRP.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a custom resource provider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomproviders.NewCustomResourceProviderClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"testRG",
		"newrp",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/getCustomRP.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomproviders.CustomRPManifest{
			Name:     to.Ptr("newrp"),
			Type:     to.Ptr("Microsoft.CustomProviders/resourceProviders"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG/providers/Microsoft.CustomProviders/resourceProviders/newrp"),
			Location: to.Ptr("East US"),
			Properties: &armcustomproviders.CustomRPManifestProperties{
				Actions: []*armcustomproviders.CustomRPActionRouteDefinition{
					{
						Name:        to.Ptr("TestAction"),
						Endpoint:    to.Ptr("https://mytestendpoint/"),
						RoutingType: to.Ptr(armcustomproviders.ActionRoutingProxy),
					}},
				ProvisioningState: to.Ptr(armcustomproviders.ProvisioningStateSucceeded),
				ResourceTypes: []*armcustomproviders.CustomRPResourceTypeRouteDefinition{
					{
						Name:        to.Ptr("TestResource"),
						Endpoint:    to.Ptr("https://mytestendpoint2/"),
						RoutingType: to.Ptr(armcustomproviders.ResourceTypeRoutingProxyCache),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomRPManifest) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomRPManifest)
			t.Fatalf("Mock response is not equal to example response for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/getCustomRP.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomResourceProvider_Update(t *testing.T) {
	// From example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/updateCustomRP.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a custom resource provider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomproviders.NewCustomResourceProviderClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"testRG",
		"newrp",
		armcustomproviders.ResourceProvidersUpdate{
			Tags: map[string]*string{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/updateCustomRP.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomproviders.CustomRPManifest{
			Name:     to.Ptr("newrp"),
			Type:     to.Ptr("Microsoft.CustomProviders/resourceProviders"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG/providers/Microsoft.CustomProviders/resourceProviders/newrp"),
			Location: to.Ptr("East US"),
			Properties: &armcustomproviders.CustomRPManifestProperties{
				Actions: []*armcustomproviders.CustomRPActionRouteDefinition{
					{
						Name:        to.Ptr("TestAction"),
						Endpoint:    to.Ptr("https://mytestendpoint/"),
						RoutingType: to.Ptr(armcustomproviders.ActionRoutingProxy),
					}},
				ProvisioningState: to.Ptr(armcustomproviders.ProvisioningStateSucceeded),
				ResourceTypes: []*armcustomproviders.CustomRPResourceTypeRouteDefinition{
					{
						Name:        to.Ptr("TestResource"),
						Endpoint:    to.Ptr("https://mytestendpoint2/"),
						RoutingType: to.Ptr(armcustomproviders.ResourceTypeRoutingProxyCache),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomRPManifest) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomRPManifest)
			t.Fatalf("Mock response is not equal to example response for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/updateCustomRP.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomResourceProvider_ListByResourceGroup(t *testing.T) {
	// From example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/listCustomRPsByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all custom resource providers on the resourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomproviders.NewCustomResourceProviderClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResourceGroup("testRG",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/listCustomRPsByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomproviders.ListByCustomRPManifest{
			Value: []*armcustomproviders.CustomRPManifest{
				{
					Name:     to.Ptr("newrp1"),
					Type:     to.Ptr("Microsoft.CustomProviders/resourceProviders"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG/providers/Microsoft.CustomProviders/resourceProviders/newrp1"),
					Location: to.Ptr("East US"),
					Properties: &armcustomproviders.CustomRPManifestProperties{
						Actions: []*armcustomproviders.CustomRPActionRouteDefinition{
							{
								Name:        to.Ptr("TestAction"),
								Endpoint:    to.Ptr("https://mytestendpoint/"),
								RoutingType: to.Ptr(armcustomproviders.ActionRoutingProxy),
							}},
						ProvisioningState: to.Ptr(armcustomproviders.ProvisioningStateSucceeded),
						ResourceTypes: []*armcustomproviders.CustomRPResourceTypeRouteDefinition{
							{
								Name:        to.Ptr("TestResource"),
								Endpoint:    to.Ptr("https://mytestendpoint2/"),
								RoutingType: to.Ptr(armcustomproviders.ResourceTypeRoutingProxyCache),
							}},
					},
				},
				{
					Name:     to.Ptr("newrp2"),
					Type:     to.Ptr("Microsoft.CustomProviders/resourceProviders"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG/providers/Microsoft.CustomProviders/resourceProviders/newrp2"),
					Location: to.Ptr("East US"),
					Properties: &armcustomproviders.CustomRPManifestProperties{
						Actions: []*armcustomproviders.CustomRPActionRouteDefinition{
							{
								Name:        to.Ptr("TestAction"),
								Endpoint:    to.Ptr("https://mytestendpoint/"),
								RoutingType: to.Ptr(armcustomproviders.ActionRoutingProxy),
							}},
						ProvisioningState: to.Ptr(armcustomproviders.ProvisioningStateSucceeded),
						ResourceTypes: []*armcustomproviders.CustomRPResourceTypeRouteDefinition{
							{
								Name:        to.Ptr("TestResource"),
								Endpoint:    to.Ptr("https://mytestendpoint2/"),
								RoutingType: to.Ptr(armcustomproviders.ResourceTypeRoutingProxyCache),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListByCustomRPManifest) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListByCustomRPManifest)
			t.Fatalf("Mock response is not equal to example response for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/listCustomRPsByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomResourceProvider_ListBySubscription(t *testing.T) {
	// From example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/listCustomRPsBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all custom resource providers on the subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomproviders.NewCustomResourceProviderClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/listCustomRPsBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomproviders.ListByCustomRPManifest{
			Value: []*armcustomproviders.CustomRPManifest{
				{
					Name:     to.Ptr("newrp1"),
					Type:     to.Ptr("Microsoft.CustomProviders/resourceProviders"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG/providers/Microsoft.CustomProviders/resourceProviders/newrp1"),
					Location: to.Ptr("East US"),
					Properties: &armcustomproviders.CustomRPManifestProperties{
						Actions: []*armcustomproviders.CustomRPActionRouteDefinition{
							{
								Name:        to.Ptr("TestAction"),
								Endpoint:    to.Ptr("https://mytestendpoint/"),
								RoutingType: to.Ptr(armcustomproviders.ActionRoutingProxy),
							}},
						ProvisioningState: to.Ptr(armcustomproviders.ProvisioningStateSucceeded),
						ResourceTypes: []*armcustomproviders.CustomRPResourceTypeRouteDefinition{
							{
								Name:        to.Ptr("TestResource"),
								Endpoint:    to.Ptr("https://mytestendpoint2/"),
								RoutingType: to.Ptr(armcustomproviders.ResourceTypeRoutingProxyCache),
							}},
					},
				},
				{
					Name:     to.Ptr("newrp2"),
					Type:     to.Ptr("Microsoft.CustomProviders/resourceProviders"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG2/providers/Microsoft.CustomProviders/resourceProviders/newrp2"),
					Location: to.Ptr("East US"),
					Properties: &armcustomproviders.CustomRPManifestProperties{
						Actions: []*armcustomproviders.CustomRPActionRouteDefinition{
							{
								Name:        to.Ptr("TestAction"),
								Endpoint:    to.Ptr("https://mytestendpoint/"),
								RoutingType: to.Ptr(armcustomproviders.ActionRoutingProxy),
							}},
						ProvisioningState: to.Ptr(armcustomproviders.ProvisioningStateSucceeded),
						ResourceTypes: []*armcustomproviders.CustomRPResourceTypeRouteDefinition{
							{
								Name:        to.Ptr("TestResource"),
								Endpoint:    to.Ptr("https://mytestendpoint2/"),
								RoutingType: to.Ptr(armcustomproviders.ResourceTypeRoutingProxyCache),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListByCustomRPManifest) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListByCustomRPManifest)
			t.Fatalf("Mock response is not equal to example response for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/listCustomRPsBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssociations_CreateOrUpdate(t *testing.T) {
	// From example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/createOrUpdateAssociation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an association"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomproviders.NewAssociationsClient(cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"scope",
		"associationName",
		armcustomproviders.Association{
			Properties: &armcustomproviders.AssociationProperties{
				TargetResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/appRG/providers/Microsoft.Solutions/applications/applicationName"),
			},
		},
		&armcustomproviders.AssociationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/createOrUpdateAssociation.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/createOrUpdateAssociation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomproviders.Association{
			Name: to.Ptr("associationName"),
			Type: to.Ptr("Microsoft.CustomProviders/associations"),
			ID:   to.Ptr("/scope/providers/Microsoft.CustomProviders/associations/associationName"),
			Properties: &armcustomproviders.AssociationProperties{
				ProvisioningState: to.Ptr(armcustomproviders.ProvisioningStateSucceeded),
				TargetResourceID:  to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/appRG/providers/Microsoft.Solutions/applications/applicationName"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Association) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Association)
			t.Fatalf("Mock response is not equal to example response for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/createOrUpdateAssociation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssociations_Delete(t *testing.T) {
	// From example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/deleteAssociation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an association"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomproviders.NewAssociationsClient(cred, &options)
	poller, err := client.BeginDelete(ctx,
		"scope",
		"associationName",
		&armcustomproviders.AssociationsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/deleteAssociation.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/deleteAssociation.json: %v", err)
	}
}

func TestAssociations_Get(t *testing.T) {
	// From example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/getAssociation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an association"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomproviders.NewAssociationsClient(cred, &options)
	res, err := client.Get(ctx,
		"scope",
		"associationName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/getAssociation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomproviders.Association{
			Name: to.Ptr("associationName"),
			Type: to.Ptr("Microsoft.CustomProviders/associations"),
			ID:   to.Ptr("scope/providers/Microsoft.CustomProviders/associations/associationName"),
			Properties: &armcustomproviders.AssociationProperties{
				ProvisioningState: to.Ptr(armcustomproviders.ProvisioningStateSucceeded),
				TargetResourceID:  to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/appRG/providers/Microsoft.Solutions/applications/applicationName"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Association) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Association)
			t.Fatalf("Mock response is not equal to example response for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/getAssociation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssociations_ListAll(t *testing.T) {
	// From example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/getAllAssociations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all associations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomproviders.NewAssociationsClient(cred, &options)
	pager := client.ListAll("scope",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/getAllAssociations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomproviders.AssociationsList{
			Value: []*armcustomproviders.Association{
				{
					Name: to.Ptr("associationName"),
					Type: to.Ptr("Microsoft.CustomProviders/associations"),
					ID:   to.Ptr("scope/providers/Microsoft.CustomProviders/associations/associationName"),
					Properties: &armcustomproviders.AssociationProperties{
						ProvisioningState: to.Ptr(armcustomproviders.ProvisioningStateSucceeded),
						TargetResourceID:  to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/appRG/providers/Microsoft.Solutions/applications/applicationName"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AssociationsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AssociationsList)
			t.Fatalf("Mock response is not equal to example response for example specification/customproviders/resource-manager/Microsoft.CustomProviders/preview/2018-09-01-preview/examples/getAllAssociations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
