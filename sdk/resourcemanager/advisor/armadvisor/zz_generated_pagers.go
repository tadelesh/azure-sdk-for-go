//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armadvisor

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// ConfigurationsClientListByResourceGroupPager provides operations for iterating over paged responses.
type ConfigurationsClientListByResourceGroupPager struct {
	client    *ConfigurationsClient
	current   ConfigurationsClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ConfigurationsClientListByResourceGroupPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ConfigurationsClientListByResourceGroupPager) NextPage(ctx context.Context) (ConfigurationsClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ConfigurationsClientListByResourceGroupResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ConfigurationsClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ConfigurationsClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ConfigurationsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return ConfigurationsClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ConfigurationsClientListBySubscriptionPager provides operations for iterating over paged responses.
type ConfigurationsClientListBySubscriptionPager struct {
	client    *ConfigurationsClient
	current   ConfigurationsClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ConfigurationsClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ConfigurationsClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ConfigurationListResult.NextLink == nil || len(*p.current.ConfigurationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ConfigurationsClientListBySubscriptionPager) NextPage(ctx context.Context) (ConfigurationsClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ConfigurationsClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ConfigurationsClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ConfigurationsClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ConfigurationsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return ConfigurationsClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationEntityListResult.NextLink == nil || len(*p.current.OperationEntityListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// RecommendationMetadataClientListPager provides operations for iterating over paged responses.
type RecommendationMetadataClientListPager struct {
	client    *RecommendationMetadataClient
	current   RecommendationMetadataClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RecommendationMetadataClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *RecommendationMetadataClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MetadataEntityListResult.NextLink == nil || len(*p.current.MetadataEntityListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *RecommendationMetadataClientListPager) NextPage(ctx context.Context) (RecommendationMetadataClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return RecommendationMetadataClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return RecommendationMetadataClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return RecommendationMetadataClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return RecommendationMetadataClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return RecommendationMetadataClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// RecommendationsClientListPager provides operations for iterating over paged responses.
type RecommendationsClientListPager struct {
	client    *RecommendationsClient
	current   RecommendationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RecommendationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *RecommendationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceRecommendationBaseListResult.NextLink == nil || len(*p.current.ResourceRecommendationBaseListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *RecommendationsClientListPager) NextPage(ctx context.Context) (RecommendationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return RecommendationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return RecommendationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return RecommendationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return RecommendationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return RecommendationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SuppressionsClientListPager provides operations for iterating over paged responses.
type SuppressionsClientListPager struct {
	client    *SuppressionsClient
	current   SuppressionsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SuppressionsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SuppressionsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SuppressionContractListResult.NextLink == nil || len(*p.current.SuppressionContractListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SuppressionsClientListPager) NextPage(ctx context.Context) (SuppressionsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SuppressionsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SuppressionsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SuppressionsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SuppressionsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return SuppressionsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
