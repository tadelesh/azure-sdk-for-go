//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armadvisor

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestRecommendationMetadata_Get(t *testing.T) {
	// From example GetMetadata
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecommendationMetadataClient(con)
	res, err := client.Get(ctx,
		"types",
		&RecommendationMetadataGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MetadataEntity.ID == nil {
		t.Fatal("MetadataEntity.ID should not be nil!")
	}
}

func TestRecommendationMetadata_List(t *testing.T) {
	// From example GetMetadata
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecommendationMetadataClient(con)
	pager := client.List(&RecommendationMetadataListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("MetadataEntity.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("MetadataEntity.ID should not be nil!")
			}
		}
	}
}

func TestConfigurations_ListBySubscription(t *testing.T) {
	// From example GetConfigurations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationsClient(con,
		"subscriptionId")
	pager := client.ListBySubscription(&ConfigurationsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ConfigData.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ConfigData.ID should not be nil!")
			}
		}
	}
}

func TestConfigurations_CreateInSubscription(t *testing.T) {
	// From example PutConfigurations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationsClient(con,
		"subscriptionId")
	res, err := client.CreateInSubscription(ctx,
		ConfigurationNameDefault,
		ConfigData{
			Properties: &ConfigDataProperties{
				Digests: []*DigestConfig{
					{
						Name:                  to.StringPtr("digestConfigName"),
						ActionGroupResourceID: to.StringPtr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/microsoft.insights/actionGroups/actionGroupName"),
						Categories: []*Category{
							CategoryHighAvailability.ToPtr(),
							CategorySecurity.ToPtr(),
							CategoryPerformance.ToPtr(),
							CategoryCost.ToPtr(),
							CategoryOperationalExcellence.ToPtr()},
						Frequency: to.Int32Ptr(30),
						State:     DigestConfigStateActive.ToPtr(),
						Language:  to.StringPtr("en"),
					}},
				Exclude:         to.BoolPtr(true),
				LowCPUThreshold: CPUThresholdFive.ToPtr(),
			},
		},
		&ConfigurationsCreateInSubscriptionOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConfigData.ID == nil {
		t.Fatal("ConfigData.ID should not be nil!")
	}
}

func TestConfigurations_ListByResourceGroup(t *testing.T) {
	// From example GetConfigurations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationsClient(con,
		"subscriptionId")
	_, err := client.ListByResourceGroup(ctx,
		"resourceGroup",
		&ConfigurationsListByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestConfigurations_CreateInResourceGroup(t *testing.T) {
	// From example PutConfigurations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationsClient(con,
		"subscriptionId")
	res, err := client.CreateInResourceGroup(ctx,
		ConfigurationNameDefault,
		"resourceGroup",
		ConfigData{
			Properties: &ConfigDataProperties{
				Digests: []*DigestConfig{
					{
						Name:                  to.StringPtr("digestConfigName"),
						ActionGroupResourceID: to.StringPtr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/microsoft.insights/actionGroups/actionGroupName"),
						Categories: []*Category{
							CategoryHighAvailability.ToPtr(),
							CategorySecurity.ToPtr(),
							CategoryPerformance.ToPtr(),
							CategoryCost.ToPtr(),
							CategoryOperationalExcellence.ToPtr()},
						Frequency: to.Int32Ptr(30),
						State:     DigestConfigStateActive.ToPtr(),
						Language:  to.StringPtr("en"),
					}},
				Exclude:         to.BoolPtr(true),
				LowCPUThreshold: CPUThresholdFive.ToPtr(),
			},
		},
		&ConfigurationsCreateInResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConfigData.ID == nil {
		t.Fatal("ConfigData.ID should not be nil!")
	}
}

func TestRecommendations_Generate(t *testing.T) {
	// From example GenerateRecommendations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecommendationsClient(con,
		"subscriptionId")
	_, err := client.Generate(ctx,
		&RecommendationsGenerateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRecommendations_GetGenerateStatus(t *testing.T) {
	// From example GetGenerateStatus
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecommendationsClient(con,
		"subscriptionId")
	_, err := client.GetGenerateStatus(ctx,
		"operationGUID",
		&RecommendationsGetGenerateStatusOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRecommendations_List(t *testing.T) {
	// From example ListRecommendations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecommendationsClient(con,
		"subscriptionId")
	pager := client.List(&RecommendationsListOptions{Top: to.Int32Ptr(10)})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ResourceRecommendationBase.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ResourceRecommendationBase.ID should not be nil!")
			}
		}
	}
}

func TestRecommendations_Get(t *testing.T) {
	// From example GetRecommendationDetail
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecommendationsClient(con,
		nil)
	res, err := client.Get(ctx,
		"resourceUri",
		"recommendationId",
		&RecommendationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ResourceRecommendationBase.ID == nil {
		t.Fatal("ResourceRecommendationBase.ID should not be nil!")
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestSuppressions_Get(t *testing.T) {
	// From example GetSuppressionDetail
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSuppressionsClient(con,
		nil)
	res, err := client.Get(ctx,
		"resourceUri",
		"recommendationId",
		"suppressionName1",
		&SuppressionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SuppressionContract.ID == nil {
		t.Fatal("SuppressionContract.ID should not be nil!")
	}
}

func TestSuppressions_Create(t *testing.T) {
	// From example CreateSuppression
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSuppressionsClient(con,
		nil)
	res, err := client.Create(ctx,
		"resourceUri",
		"recommendationId",
		"suppressionName1",
		SuppressionContract{
			Properties: &SuppressionProperties{
				TTL: to.StringPtr("07:00:00:00"),
			},
		},
		&SuppressionsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SuppressionContract.ID == nil {
		t.Fatal("SuppressionContract.ID should not be nil!")
	}
}

func TestSuppressions_Delete(t *testing.T) {
	// From example DeleteSuppression
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSuppressionsClient(con,
		nil)
	_, err := client.Delete(ctx,
		"resourceUri",
		"recommendationId",
		"suppressionName1",
		&SuppressionsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSuppressions_List(t *testing.T) {
	// From example ListSuppressions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSuppressionsClient(con,
		"subscriptionId1")
	pager := client.List(&SuppressionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SuppressionContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SuppressionContract.ID should not be nil!")
			}
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
