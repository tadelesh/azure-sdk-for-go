//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armadvisor_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/advisor/armadvisor"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestRecommendationMetadata_Get(t *testing.T) {
	// From example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/GetRecommendationMetadataEntity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetMetadata"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armadvisor.NewRecommendationMetadataClient(cred, &options)
	res, err := client.Get(ctx,
		"types",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/GetRecommendationMetadataEntity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armadvisor.MetadataEntity{
			Name: to.Ptr("recommendationType"),
			Type: to.Ptr("Microsoft.Advisor/metadata"),
			ID:   to.Ptr("providers/Microsoft.Advisor/metadata/recommendationType"),
			Properties: &armadvisor.MetadataEntityProperties{
				ApplicableScenarios: []*armadvisor.Scenario{
					to.Ptr(armadvisor.ScenarioAlerts)},
				DependsOn: []*string{
					to.Ptr("category"),
					to.Ptr("impact")},
				DisplayName: to.Ptr("Recommendation Type"),
				SupportedValues: []*armadvisor.MetadataSupportedValueDetail{
					{
						DisplayName: to.Ptr("Upgrade your SKU or add more instances to ensure fault tolerance"),
						ID:          to.Ptr("6a2b1e70-bd4c-4163-86de-5243d7ac05ee"),
					},
					{
						DisplayName: to.Ptr("Delete ExpressRoute circuits in the provider status of Not Provisioned"),
						ID:          to.Ptr("da6630fb-4286-4996-92a3-a43f5f26dd34"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetadataEntity) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetadataEntity)
			t.Fatalf("Mock response is not equal to example response for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/GetRecommendationMetadataEntity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecommendationMetadata_List(t *testing.T) {
	// From example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/ListRecommendationMetadata.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetMetadata"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armadvisor.NewRecommendationMetadataClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/ListRecommendationMetadata.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armadvisor.MetadataEntityListResult{
			Value: []*armadvisor.MetadataEntity{
				{
					Name: to.Ptr("recommendationType"),
					Type: to.Ptr("Microsoft.Advisor/metadata"),
					ID:   to.Ptr("providers/Microsoft.Advisor/metadata/recommendationType"),
					Properties: &armadvisor.MetadataEntityProperties{
						ApplicableScenarios: []*armadvisor.Scenario{
							to.Ptr(armadvisor.ScenarioAlerts)},
						DependsOn: []*string{
							to.Ptr("category"),
							to.Ptr("impact")},
						DisplayName: to.Ptr("Recommendation Type"),
						SupportedValues: []*armadvisor.MetadataSupportedValueDetail{
							{
								DisplayName: to.Ptr("Upgrade your SKU or add more instances to ensure fault tolerance"),
								ID:          to.Ptr("6a2b1e70-bd4c-4163-86de-5243d7ac05ee"),
							},
							{
								DisplayName: to.Ptr("Delete ExpressRoute circuits in the provider status of Not Provisioned"),
								ID:          to.Ptr("da6630fb-4286-4996-92a3-a43f5f26dd34"),
							}},
					},
				},
				{
					Name: to.Ptr("recommendationCategory"),
					Type: to.Ptr("Microsoft.Advisor/metadata"),
					ID:   to.Ptr("providers/Microsoft.Advisor/metadata/recommendationCategory"),
					Properties: &armadvisor.MetadataEntityProperties{
						ApplicableScenarios: []*armadvisor.Scenario{
							to.Ptr(armadvisor.ScenarioAlerts)},
						DisplayName: to.Ptr("Category"),
						SupportedValues: []*armadvisor.MetadataSupportedValueDetail{
							{
								DisplayName: to.Ptr("Cost"),
								ID:          to.Ptr("Cost"),
							},
							{
								DisplayName: to.Ptr("Performance"),
								ID:          to.Ptr("Performance"),
							}},
					},
				},
				{
					Name: to.Ptr("recommendationImpact"),
					Type: to.Ptr("Microsoft.Advisor/metadata"),
					ID:   to.Ptr("providers/Microsoft.Advisor/metadata/recommendationImpact"),
					Properties: &armadvisor.MetadataEntityProperties{
						DisplayName: to.Ptr("Impact"),
						SupportedValues: []*armadvisor.MetadataSupportedValueDetail{
							{
								DisplayName: to.Ptr("High"),
								ID:          to.Ptr("High"),
							},
							{
								DisplayName: to.Ptr("Medium"),
								ID:          to.Ptr("Medium"),
							},
							{
								DisplayName: to.Ptr("Low"),
								ID:          to.Ptr("Low"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MetadataEntityListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MetadataEntityListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/ListRecommendationMetadata.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurations_ListBySubscription(t *testing.T) {
	// From example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/ListConfigurations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetConfigurations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armadvisor.NewConfigurationsClient("subscriptionId", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/ListConfigurations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armadvisor.ConfigurationListResult{
			Value: []*armadvisor.ConfigData{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Advisor/configurations"),
					ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.Advisor/configurations/default"),
					Properties: &armadvisor.ConfigDataProperties{
						Digests: []*armadvisor.DigestConfig{
							{
								Name:                  to.Ptr("digestConfigName"),
								ActionGroupResourceID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/microsoft.insights/actionGroups/actionGroupName"),
								Categories: []*armadvisor.Category{
									to.Ptr(armadvisor.CategoryHighAvailability),
									to.Ptr(armadvisor.CategorySecurity),
									to.Ptr(armadvisor.CategoryPerformance),
									to.Ptr(armadvisor.CategoryCost),
									to.Ptr(armadvisor.CategoryOperationalExcellence)},
								Frequency: to.Ptr[int32](30),
								State:     to.Ptr(armadvisor.DigestConfigStateActive),
								Language:  to.Ptr("en"),
							}},
						Exclude:         to.Ptr(false),
						LowCPUThreshold: to.Ptr(armadvisor.CPUThresholdFive),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConfigurationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/ListConfigurations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurations_CreateInSubscription(t *testing.T) {
	// From example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/CreateConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutConfigurations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armadvisor.NewConfigurationsClient("subscriptionId", cred, &options)
	res, err := client.CreateInSubscription(ctx,
		armadvisor.ConfigurationNameDefault,
		armadvisor.ConfigData{
			Properties: &armadvisor.ConfigDataProperties{
				Digests: []*armadvisor.DigestConfig{
					{
						Name:                  to.Ptr("digestConfigName"),
						ActionGroupResourceID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/microsoft.insights/actionGroups/actionGroupName"),
						Categories: []*armadvisor.Category{
							to.Ptr(armadvisor.CategoryHighAvailability),
							to.Ptr(armadvisor.CategorySecurity),
							to.Ptr(armadvisor.CategoryPerformance),
							to.Ptr(armadvisor.CategoryCost),
							to.Ptr(armadvisor.CategoryOperationalExcellence)},
						Frequency: to.Ptr[int32](30),
						State:     to.Ptr(armadvisor.DigestConfigStateActive),
						Language:  to.Ptr("en"),
					}},
				Exclude:         to.Ptr(true),
				LowCPUThreshold: to.Ptr(armadvisor.CPUThresholdFive),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/CreateConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armadvisor.ConfigData{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Advisor/configurations"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.Advisor/configurations/default"),
			Properties: &armadvisor.ConfigDataProperties{
				Digests: []*armadvisor.DigestConfig{
					{
						Name:                  to.Ptr("digestConfigName"),
						ActionGroupResourceID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/microsoft.insights/actionGroups/actionGroupName"),
						Categories: []*armadvisor.Category{
							to.Ptr(armadvisor.CategoryHighAvailability),
							to.Ptr(armadvisor.CategorySecurity),
							to.Ptr(armadvisor.CategoryPerformance),
							to.Ptr(armadvisor.CategoryCost),
							to.Ptr(armadvisor.CategoryOperationalExcellence)},
						Frequency: to.Ptr[int32](30),
						State:     to.Ptr(armadvisor.DigestConfigStateActive),
						Language:  to.Ptr("en"),
					}},
				Exclude:         to.Ptr(true),
				LowCPUThreshold: to.Ptr(armadvisor.CPUThresholdFive),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigData) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigData)
			t.Fatalf("Mock response is not equal to example response for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/CreateConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurations_ListByResourceGroup(t *testing.T) {
	// From example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/ListConfigurations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetConfigurations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armadvisor.NewConfigurationsClient("subscriptionId", cred, &options)
	pager := client.ListByResourceGroup("resourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/ListConfigurations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armadvisor.ConfigurationListResult{
			Value: []*armadvisor.ConfigData{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Advisor/configurations"),
					ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.Advisor/configurations/default"),
					Properties: &armadvisor.ConfigDataProperties{
						Digests: []*armadvisor.DigestConfig{
							{
								Name:                  to.Ptr("digestConfigName"),
								ActionGroupResourceID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/microsoft.insights/actionGroups/actionGroupName"),
								Categories: []*armadvisor.Category{
									to.Ptr(armadvisor.CategoryHighAvailability),
									to.Ptr(armadvisor.CategorySecurity),
									to.Ptr(armadvisor.CategoryPerformance),
									to.Ptr(armadvisor.CategoryCost),
									to.Ptr(armadvisor.CategoryOperationalExcellence)},
								Frequency: to.Ptr[int32](30),
								State:     to.Ptr(armadvisor.DigestConfigStateActive),
								Language:  to.Ptr("en"),
							}},
						Exclude:         to.Ptr(false),
						LowCPUThreshold: to.Ptr(armadvisor.CPUThresholdFive),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConfigurationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/ListConfigurations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurations_CreateInResourceGroup(t *testing.T) {
	// From example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/CreateConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutConfigurations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armadvisor.NewConfigurationsClient("subscriptionId", cred, &options)
	res, err := client.CreateInResourceGroup(ctx,
		armadvisor.ConfigurationNameDefault,
		"resourceGroup",
		armadvisor.ConfigData{
			Properties: &armadvisor.ConfigDataProperties{
				Digests: []*armadvisor.DigestConfig{
					{
						Name:                  to.Ptr("digestConfigName"),
						ActionGroupResourceID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/microsoft.insights/actionGroups/actionGroupName"),
						Categories: []*armadvisor.Category{
							to.Ptr(armadvisor.CategoryHighAvailability),
							to.Ptr(armadvisor.CategorySecurity),
							to.Ptr(armadvisor.CategoryPerformance),
							to.Ptr(armadvisor.CategoryCost),
							to.Ptr(armadvisor.CategoryOperationalExcellence)},
						Frequency: to.Ptr[int32](30),
						State:     to.Ptr(armadvisor.DigestConfigStateActive),
						Language:  to.Ptr("en"),
					}},
				Exclude:         to.Ptr(true),
				LowCPUThreshold: to.Ptr(armadvisor.CPUThresholdFive),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/CreateConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armadvisor.ConfigData{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Advisor/configurations"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.Advisor/configurations/default"),
			Properties: &armadvisor.ConfigDataProperties{
				Digests: []*armadvisor.DigestConfig{
					{
						Name:                  to.Ptr("digestConfigName"),
						ActionGroupResourceID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/microsoft.insights/actionGroups/actionGroupName"),
						Categories: []*armadvisor.Category{
							to.Ptr(armadvisor.CategoryHighAvailability),
							to.Ptr(armadvisor.CategorySecurity),
							to.Ptr(armadvisor.CategoryPerformance),
							to.Ptr(armadvisor.CategoryCost),
							to.Ptr(armadvisor.CategoryOperationalExcellence)},
						Frequency: to.Ptr[int32](30),
						State:     to.Ptr(armadvisor.DigestConfigStateActive),
						Language:  to.Ptr("en"),
					}},
				Exclude:         to.Ptr(true),
				LowCPUThreshold: to.Ptr(armadvisor.CPUThresholdFive),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigData) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigData)
			t.Fatalf("Mock response is not equal to example response for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/CreateConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecommendations_Generate(t *testing.T) {
	// From example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/GenerateRecommendations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GenerateRecommendations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armadvisor.NewRecommendationsClient("subscriptionId", cred, &options)
	_, err := client.Generate(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/GenerateRecommendations.json: %v", err)
	}
}

func TestRecommendations_GetGenerateStatus(t *testing.T) {
	// From example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/EmptyResponse.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetGenerateStatus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armadvisor.NewRecommendationsClient("subscriptionId", cred, &options)
	_, err := client.GetGenerateStatus(ctx,
		"operationGUID",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/EmptyResponse.json: %v", err)
	}
}

func TestRecommendations_List(t *testing.T) {
	// From example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/ListRecommendations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListRecommendations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armadvisor.NewRecommendationsClient("subscriptionId", cred, &options)
	pager := client.List(&armadvisor.RecommendationsClientListOptions{Filter: nil,
		Top:       to.Ptr[int32](10),
		SkipToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/ListRecommendations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armadvisor.ResourceRecommendationBaseListResult{
			Value: []*armadvisor.ResourceRecommendationBase{
				{
					Name: to.Ptr("recGUID1"),
					Type: to.Ptr("Microsoft.Advisor/recommendations"),
					ID:   to.Ptr("/resourceUri/providers/Microsoft.Advisor/recommendations/recGUID1"),
					Properties: &armadvisor.RecommendationProperties{
						Description: to.Ptr("After enabling Soft Delete, deleted data transitions to a soft deleted state instead of being permanently deleted. When data is overwritten, a soft deleted snapshot is generated to save the state of the overwritten data. You can configure the amount of time soft deleted data is recoverable before it permanently expires."),
						Actions: []map[string]interface{}{
							{
								"description": "Enable Soft Delete to protect blob data",
								"actionType":  "Document",
								"caption":     "Enable Soft Delete to protect blob data",
								"link":        "https://link1",
								"metadata": map[string]interface{}{
									"id": "/subscriptions/subscriptionId",
								},
							}},
						Category:          to.Ptr(armadvisor.CategoryHighAvailability),
						Impact:            to.Ptr(armadvisor.ImpactMedium),
						ImpactedField:     to.Ptr("Microsoft.Compute/availabilitySets"),
						ImpactedValue:     to.Ptr("armavset"),
						Label:             to.Ptr("Enable Soft Delete"),
						LastUpdated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-24T22:24:43.3216408Z"); return t }()),
						LearnMoreLink:     to.Ptr("https://link2"),
						PotentialBenefits: to.Ptr("Save and recover your data when blobs or blob snapshots are accidentally overwritten or deleted"),
						Remediation: map[string]interface{}{
							"httpMethod": "POST",
							"uri":        "uri",
							"details":    "link to document",
						},
						ResourceMetadata: &armadvisor.ResourceMetadata{
							Action: map[string]interface{}{
								"description": "Enable Soft Delete to protect blob data",
								"actionType":  "Document",
								"caption":     "Enable Soft Delete to protect blob data",
								"link":        "https://link3",
								"metadata": map[string]interface{}{
									"id": "/subscriptions/subscriptionId",
								},
							},
							Plural:     to.Ptr("Availability sets"),
							ResourceID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.Compute/availabilitysets/abc"),
							Singular:   to.Ptr("Availability set"),
						},
						Risk: to.Ptr(armadvisor.RiskWarning),
						ShortDescription: &armadvisor.ShortDescription{
							Problem:  to.Ptr("This availability set is not configured for fault tolerance"),
							Solution: to.Ptr("To ensure high availability add one or more virtual machines to this availability set"),
						},
					},
				},
				{
					Name: to.Ptr("recGUID2"),
					Type: to.Ptr("Microsoft.Advisor/recommendations"),
					ID:   to.Ptr("/resourceUri/providers/Microsoft.Advisor/recommendations/recGUID2"),
					Properties: &armadvisor.RecommendationProperties{
						Description: to.Ptr("Monitoring agent should be installed on your machines."),
						Actions: []map[string]interface{}{
							{
								"description": "Enable Soft Delete to protect blob data",
								"actionType":  "Document",
								"caption":     "Enable Soft Delete to protect blob data",
								"link":        "https://link1",
								"metadata": map[string]interface{}{
									"id": "/subscriptions/subscriptionId",
								},
							}},
						Category:          to.Ptr(armadvisor.CategorySecurity),
						Impact:            to.Ptr(armadvisor.ImpactMedium),
						ImpactedField:     to.Ptr("Microsoft.Compute/virtualMachines"),
						ImpactedValue:     to.Ptr("armavset"),
						Label:             to.Ptr("Enable monitoring agent"),
						LastUpdated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-24T22:24:43.3216408Z"); return t }()),
						LearnMoreLink:     to.Ptr("https://link2"),
						PotentialBenefits: to.Ptr("Protect and monitor machine"),
						ResourceMetadata: &armadvisor.ResourceMetadata{
							Action: map[string]interface{}{
								"description": "Enable Soft Delete to protect blob data",
								"actionType":  "Document",
								"caption":     "Enable Soft Delete to protect blob data",
								"link":        "https://link3",
								"metadata": map[string]interface{}{
									"id": "/subscriptions/subscriptionId",
								},
							},
							Plural:     to.Ptr("Virtual machines"),
							ResourceID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.Compute/virtualMachines/xyz"),
							Singular:   to.Ptr("Virtual machine"),
							Source:     to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.Compute/virtualMachines/xyz/providers/Microsoft.Security/assessments/assessmentGuid"),
						},
						Risk: to.Ptr(armadvisor.RiskWarning),
						ShortDescription: &armadvisor.ShortDescription{
							Problem:  to.Ptr("Monitoring agent is not installed on your machines"),
							Solution: to.Ptr("Monitoring agent should be installed on your machines"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceRecommendationBaseListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceRecommendationBaseListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/ListRecommendations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecommendations_Get(t *testing.T) {
	// From example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/GetRecommendationDetail.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetRecommendationDetail"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armadvisor.NewRecommendationsClient("<subscription-id>", cred, &options)
	res, err := client.Get(ctx,
		"resourceUri",
		"recommendationId",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/GetRecommendationDetail.json: %v", err)
	}
	// Response check
	{
		exampleRes := armadvisor.ResourceRecommendationBase{
			Name: to.Ptr("recommendationId"),
			Type: to.Ptr("Microsoft.Advisor/recommendations"),
			ID:   to.Ptr("/resourceUri/providers/Microsoft.Advisor/recommendations/recommendationId"),
			Properties: &armadvisor.RecommendationProperties{
				Description: to.Ptr("After enabling Soft Delete, deleted data transitions to a soft deleted state instead of being permanently deleted. When data is overwritten, a soft deleted snapshot is generated to save the state of the overwritten data. You can configure the amount of time soft deleted data is recoverable before it permanently expires."),
				Actions: []map[string]interface{}{
					{
						"description": "Enable Soft Delete to protect blob data",
						"actionType":  "Document",
						"caption":     "Enable Soft Delete to protect blob data",
						"link":        "https://link1",
						"metadata": map[string]interface{}{
							"id": "/subscriptions/subscriptionId",
						},
					}},
				Category:          to.Ptr(armadvisor.CategorySecurity),
				Impact:            to.Ptr(armadvisor.ImpactMedium),
				ImpactedField:     to.Ptr("Microsoft.Compute/virtualMachines"),
				ImpactedValue:     to.Ptr("armavset"),
				Label:             to.Ptr("Enable Soft Delete"),
				LastUpdated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-24T22:24:43.3216408Z"); return t }()),
				LearnMoreLink:     to.Ptr("https://link2"),
				PotentialBenefits: to.Ptr("Save and recover your data when blobs or blob snapshots are accidentally overwritten or deleted"),
				Remediation: map[string]interface{}{
					"httpMethod": "POST",
					"uri":        "uri",
					"details":    "link to document",
				},
				ResourceMetadata: &armadvisor.ResourceMetadata{
					Action: map[string]interface{}{
						"description": "Enable Soft Delete to protect blob data",
						"actionType":  "Document",
						"caption":     "Enable Soft Delete to protect blob data",
						"link":        "https://link3",
						"metadata": map[string]interface{}{
							"id": "/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.Compute/virtualMachines/xyz",
						},
					},
					Plural:     to.Ptr("Virtual machines"),
					ResourceID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.Compute/virtualMachines/xyz"),
					Singular:   to.Ptr("Virtual machine"),
					Source:     to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.Compute/virtualMachines/xyz/providers/Microsoft.Security/assessments/assessmentGuid"),
				},
				Risk: to.Ptr(armadvisor.RiskWarning),
				ShortDescription: &armadvisor.ShortDescription{
					Problem:  to.Ptr("Monitoring agent is not installed on your machines"),
					Solution: to.Ptr("Monitoring agent should be installed on your machines"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceRecommendationBase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceRecommendationBase)
			t.Fatalf("Mock response is not equal to example response for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/GetRecommendationDetail.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestSuppressions_Get(t *testing.T) {
	// From example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/GetSuppressionDetail.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetSuppressionDetail"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armadvisor.NewSuppressionsClient("<subscription-id>", cred, &options)
	res, err := client.Get(ctx,
		"resourceUri",
		"recommendationId",
		"suppressionName1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/GetSuppressionDetail.json: %v", err)
	}
	// Response check
	{
		exampleRes := armadvisor.SuppressionContract{
			Name: to.Ptr("suppressionName1"),
			Type: to.Ptr("Microsoft.Advisor/suppressions"),
			ID:   to.Ptr("/resourceUri/providers/Microsoft.Advisor/recommendations/recommendationId/suppressions/suppressionName1"),
			Properties: &armadvisor.SuppressionProperties{
				ExpirationTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-25T22:24:43.3216408Z"); return t }()),
				SuppressionID:       to.Ptr("suppressionId1"),
				TTL:                 to.Ptr("7.00:00:00"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SuppressionContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SuppressionContract)
			t.Fatalf("Mock response is not equal to example response for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/GetSuppressionDetail.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSuppressions_Create(t *testing.T) {
	// From example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/CreateSuppression.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateSuppression"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armadvisor.NewSuppressionsClient("<subscription-id>", cred, &options)
	res, err := client.Create(ctx,
		"resourceUri",
		"recommendationId",
		"suppressionName1",
		armadvisor.SuppressionContract{
			Properties: &armadvisor.SuppressionProperties{
				TTL: to.Ptr("07:00:00:00"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/CreateSuppression.json: %v", err)
	}
	// Response check
	{
		exampleRes := armadvisor.SuppressionContract{
			Name: to.Ptr("suppressionName1"),
			Type: to.Ptr("Microsoft.Advisor/suppressions"),
			ID:   to.Ptr("/resourceUri/providers/Microsoft.Advisor/recommendations/recommendationId/suppressions/suppressionName1"),
			Properties: &armadvisor.SuppressionProperties{
				SuppressionID: to.Ptr("suppressionId"),
				TTL:           to.Ptr("07:00:00:00"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SuppressionContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SuppressionContract)
			t.Fatalf("Mock response is not equal to example response for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/CreateSuppression.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSuppressions_Delete(t *testing.T) {
	// From example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/DeleteSuppression.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteSuppression"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armadvisor.NewSuppressionsClient("<subscription-id>", cred, &options)
	_, err := client.Delete(ctx,
		"resourceUri",
		"recommendationId",
		"suppressionName1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/DeleteSuppression.json: %v", err)
	}
}

func TestSuppressions_List(t *testing.T) {
	// From example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/ListSuppressions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListSuppressions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armadvisor.NewSuppressionsClient("subscriptionId1", cred, &options)
	pager := client.List(&armadvisor.SuppressionsClientListOptions{Top: nil,
		SkipToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/ListSuppressions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armadvisor.SuppressionContractListResult{
			Value: []*armadvisor.SuppressionContract{
				{
					Name: to.Ptr("suppressionName1"),
					Type: to.Ptr("Microsoft.Advisor/suppressions"),
					ID:   to.Ptr("/resourceUri/providers/Microsoft.Advisor/recommendations/recommendationId/suppressions/suppressionName1"),
					Properties: &armadvisor.SuppressionProperties{
						ExpirationTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-24T22:24:43.3216408Z"); return t }()),
						SuppressionID:       to.Ptr("suppressionId1"),
						TTL:                 to.Ptr("7.00:00:00"),
					},
				},
				{
					Name: to.Ptr("suppressionName2"),
					Type: to.Ptr("Microsoft.Advisor/suppressions"),
					ID:   to.Ptr("/resourceUri/providers/Microsoft.Advisor/recommendations/recommendationId/suppressions/suppressionName2"),
					Properties: &armadvisor.SuppressionProperties{
						ExpirationTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-25T22:24:43.3216408Z"); return t }()),
						SuppressionID:       to.Ptr("suppressionId2"),
						TTL:                 to.Ptr("7.00:00:00"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SuppressionContractListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SuppressionContractListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/ListSuppressions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
