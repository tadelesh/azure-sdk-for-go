//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsoftwareplan_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/softwareplan/armsoftwareplan"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/GetAllHybridUseBenefits.json
func ExampleHybridUseBenefitClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}

	ctx := context.Background()
	client := armsoftwareplan.NewHybridUseBenefitClient(cred, nil)
	pager := client.List("<scope>",
		&armsoftwareplan.HybridUseBenefitClientListOptions{Filter: to.Ptr("<filter>")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
			return
		}
		for _, v := range nextResult.Value {
			// TODO: use page item
			_ = v
		}
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/PutHybridUseBenefit.json
func ExampleHybridUseBenefitClient_Create() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}

	ctx := context.Background()
	client := armsoftwareplan.NewHybridUseBenefitClient(cred, nil)
	res, err := client.Create(ctx,
		"<scope>",
		"<plan-id>",
		armsoftwareplan.HybridUseBenefitModel{
			Type: to.Ptr("<type>"),
			SKU: &armsoftwareplan.SKU{
				Name: to.Ptr("<name>"),
			},
		},
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/PatchHybridUseBenefit.json
func ExampleHybridUseBenefitClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}

	ctx := context.Background()
	client := armsoftwareplan.NewHybridUseBenefitClient(cred, nil)
	res, err := client.Update(ctx,
		"<scope>",
		"<plan-id>",
		armsoftwareplan.HybridUseBenefitModel{
			Type: to.Ptr("<type>"),
			SKU: &armsoftwareplan.SKU{
				Name: to.Ptr("<name>"),
			},
		},
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/GetSingleHybridUseBenefit.json
func ExampleHybridUseBenefitClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}

	ctx := context.Background()
	client := armsoftwareplan.NewHybridUseBenefitClient(cred, nil)
	res, err := client.Get(ctx,
		"<scope>",
		"<plan-id>",
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/DeleteHybridUseBenefit.json
func ExampleHybridUseBenefitClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}

	ctx := context.Background()
	client := armsoftwareplan.NewHybridUseBenefitClient(cred, nil)
	_, err = client.Delete(ctx,
		"<scope>",
		"<plan-id>",
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
}
