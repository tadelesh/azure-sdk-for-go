//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsoftwareplan_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/softwareplan/armsoftwareplan"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestSoftwarePlan_Register(t *testing.T) {
	// From example specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/RegisterSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HybridUseBenefitListResult"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsoftwareplan.NewClient("98df3792-7962-4f18-8be2-d5576f122de3 ", cred, &options)
	_, err := client.Register(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/RegisterSubscription.json: %v", err)
	}
}

func TestHybridUseBenefit_List(t *testing.T) {
	// From example specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/GetAllHybridUseBenefits.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HybridUseBenefitListResult"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsoftwareplan.NewHybridUseBenefitClient(cred, &options)
	pager := client.List("subscriptions/{sub-id}/resourceGroups/{rg-name}/providers/Microsoft.Compute/HostGroups/{host-group-name}/hosts/{host-name}",
		&armsoftwareplan.HybridUseBenefitClientListOptions{Filter: to.Ptr("SQL_Server_EE_AHB")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/GetAllHybridUseBenefits.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsoftwareplan.HybridUseBenefitListResult{
			Value: []*armsoftwareplan.HybridUseBenefitModel{
				{
					Name: to.Ptr("SQL_hostGroup_hostName"),
					Type: to.Ptr("Microsoft.SoftwarePlans/hybridUseBenefits"),
					ID:   to.Ptr("/subscriptions/{sub-id}/resourceGroups/{rg-name}/providers/Microsoft.Compute/HostGroups/{host-group-name}/hosts/{host-name}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/SQL_hostGroup_hostName"),
					Etag: to.Ptr[int32](1),
					Properties: &armsoftwareplan.HybridUseBenefitProperties{
						CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-05T21:50:07.846Z"); return t }()),
						LastUpdatedDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-05T21:50:07.846Z"); return t }()),
						ProvisioningState: to.Ptr(armsoftwareplan.ProvisioningStateSucceeded),
					},
					SKU: &armsoftwareplan.SKU{
						Name: to.Ptr("SQL_Server_EE_AHB"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.HybridUseBenefitListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.HybridUseBenefitListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/GetAllHybridUseBenefits.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHybridUseBenefit_Create(t *testing.T) {
	// From example specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/PutHybridUseBenefit.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HybridUseBenefit"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsoftwareplan.NewHybridUseBenefitClient(cred, &options)
	res, err := client.Create(ctx,
		"subscriptions/{sub-id}/resourceGroups/{rg-name}/providers/Microsoft.Compute/HostGroups/{host-group-name}/hosts/{host-name}",
		"94f46eda-45f8-493a-8425-251921463a89",
		armsoftwareplan.HybridUseBenefitModel{
			Type: to.Ptr("Microsoft.SoftwarePlan/hybridUseBenefits"),
			SKU: &armsoftwareplan.SKU{
				Name: to.Ptr("SQL_Server_Perpetual"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/PutHybridUseBenefit.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsoftwareplan.HybridUseBenefitModel{
			Name: to.Ptr("SQL_{hostGroupName}_{hostName}"),
			Type: to.Ptr("Microsoft.SoftwarePlans/hybridUseBenefits"),
			ID:   to.Ptr("/subscriptions/{sub-id}/resourceGroups/{rg-name}/providers/Microsoft.Compute/HostGroups/{host-group-name}/hosts/{host-name}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/SQL_{hostGroupName}_{hostName}"),
			Etag: to.Ptr[int32](1),
			Properties: &armsoftwareplan.HybridUseBenefitProperties{
				CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-05T21:50:07.846Z"); return t }()),
				LastUpdatedDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-05T21:50:07.846Z"); return t }()),
				ProvisioningState: to.Ptr(armsoftwareplan.ProvisioningStateSucceeded),
			},
			SKU: &armsoftwareplan.SKU{
				Name: to.Ptr("SQL_Server_Perpetual"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HybridUseBenefitModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HybridUseBenefitModel)
			t.Fatalf("Mock response is not equal to example response for example specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/PutHybridUseBenefit.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHybridUseBenefit_Update(t *testing.T) {
	// From example specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/PatchHybridUseBenefit.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HybridUseBenefit"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsoftwareplan.NewHybridUseBenefitClient(cred, &options)
	res, err := client.Update(ctx,
		"subscriptions/{sub-id}/resourceGroups/{rg-name}/providers/Microsoft.Compute/HostGroups/{host-group-name}/hosts/{host-name}",
		"94f46eda-45f8-493a-8425-251921463a89",
		armsoftwareplan.HybridUseBenefitModel{
			Type: to.Ptr("Microsoft.SoftwarePlan/hybridUseBenefits"),
			SKU: &armsoftwareplan.SKU{
				Name: to.Ptr("SQLBYOLStandardForADH"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/PatchHybridUseBenefit.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsoftwareplan.HybridUseBenefitModel{
			Name: to.Ptr("SQL_{hostGroupName}_{hostName}"),
			Type: to.Ptr("Microsoft.SoftwarePlans/hybridUseBenefits"),
			ID:   to.Ptr("/subscriptions/{sub-id}/resourceGroups/{rg-name}/providers/Microsoft.Compute/HostGroups/{host-group-name}/hosts/{host-name}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/SQL_{hostGroupName}_{hostName}"),
			Etag: to.Ptr[int32](1),
			Properties: &armsoftwareplan.HybridUseBenefitProperties{
				CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-05T21:50:07.846Z"); return t }()),
				LastUpdatedDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-05T21:50:07.846Z"); return t }()),
				ProvisioningState: to.Ptr(armsoftwareplan.ProvisioningStateSucceeded),
			},
			SKU: &armsoftwareplan.SKU{
				Name: to.Ptr("SQLBYOLStandardForADH"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HybridUseBenefitModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HybridUseBenefitModel)
			t.Fatalf("Mock response is not equal to example response for example specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/PatchHybridUseBenefit.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHybridUseBenefit_Get(t *testing.T) {
	// From example specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/GetSingleHybridUseBenefit.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HybridUseBenefit"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsoftwareplan.NewHybridUseBenefitClient(cred, &options)
	res, err := client.Get(ctx,
		"subscriptions/{sub-id}/resourceGroups/{rg-name}/providers/Microsoft.Compute/HostGroups/{host-group-name}/hosts/{host-name}",
		"94f46eda-45f8-493a-8425-251921463a89",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/GetSingleHybridUseBenefit.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsoftwareplan.HybridUseBenefitModel{
			Name: to.Ptr("SQL_{hostGroupName}_{hostName}"),
			Type: to.Ptr("Microsoft.SoftwarePlans/hybridUseBenefits"),
			ID:   to.Ptr("/subscriptions/{sub-id}/resourceGroups/{rg-name}/providers/Microsoft.Compute/HostGroups/{host-group-name}/hosts/{host-name}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/SQL_{hostGroupName}_{hostName}"),
			Etag: to.Ptr[int32](1),
			Properties: &armsoftwareplan.HybridUseBenefitProperties{
				CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-05T21:50:07.846Z"); return t }()),
				LastUpdatedDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-05T21:50:07.846Z"); return t }()),
				ProvisioningState: to.Ptr(armsoftwareplan.ProvisioningStateSucceeded),
			},
			SKU: &armsoftwareplan.SKU{
				Name: to.Ptr("SQL_Server_EE_AHB"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HybridUseBenefitModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HybridUseBenefitModel)
			t.Fatalf("Mock response is not equal to example response for example specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/GetSingleHybridUseBenefit.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHybridUseBenefit_Delete(t *testing.T) {
	// From example specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/DeleteHybridUseBenefit.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HybridUseBenefit"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsoftwareplan.NewHybridUseBenefitClient(cred, &options)
	_, err := client.Delete(ctx,
		"subscriptions/{sub-id}/resourceGroups/{rg-name}/providers/Microsoft.Compute/HostGroups/{host-group-name}/hosts/{host-name}",
		"94f46eda-45f8-493a-8425-251921463a89",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/DeleteHybridUseBenefit.json: %v", err)
	}
}

func TestHybridUseBenefitRevision_List(t *testing.T) {
	// From example specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/GetHybridUseBenefitRevisions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HybridUseBenefitRevisionsResponse"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsoftwareplan.NewHybridUseBenefitRevisionClient(cred, &options)
	pager := client.List("subscriptions/{sub-id}/resourceGroups/{rg-name}/providers/Microsoft.Compute/HostGroups/{host-group-name}/hosts/{host-name}",
		"94f46eda-45f8-493a-8425-251921463a89",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/GetHybridUseBenefitRevisions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsoftwareplan.HybridUseBenefitListResult{
			Value: []*armsoftwareplan.HybridUseBenefitModel{
				{
					Name: to.Ptr("SQL_{hostGroupName}_{hostName}"),
					Type: to.Ptr("Microsoft.SoftwarePlans/hybridUseBenefits"),
					ID:   to.Ptr("/subscriptions/{sub-id}/resourceGroups/{rg-name}/providers/Microsoft.Compute/HostGroups/{host-group-name}/hosts/{host-name}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/SQL_{hostGroupName}_{hostName}"),
					Etag: to.Ptr[int32](1),
					Properties: &armsoftwareplan.HybridUseBenefitProperties{
						CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-05T21:50:07.846Z"); return t }()),
						LastUpdatedDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-05T21:50:07.846Z"); return t }()),
						ProvisioningState: to.Ptr(armsoftwareplan.ProvisioningStateSucceeded),
					},
					SKU: &armsoftwareplan.SKU{
						Name: to.Ptr("SQL_Server_EE_AHB"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.HybridUseBenefitListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.HybridUseBenefitListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/GetHybridUseBenefitRevisions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/GetOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetOperations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsoftwareplan.NewOperationsClient(cred, &options)
	pager := client.List("subscriptions/{sub-id}/resourceGroups/{rg-name}/providers/Microsoft.Compute/HostGroups/{host-group-name}/hosts/{host-name}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/GetOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsoftwareplan.OperationList{
			Value: []*armsoftwareplan.OperationResponse{
				{
					Name: to.Ptr("Microsoft.SoftwarePlan/hybridUseBenefits/read"),
					Display: &armsoftwareplan.OperationDisplay{
						Description: to.Ptr("Read all hybrid use benefits"),
						Operation:   to.Ptr("Get hybrid use benefit"),
						Provider:    to.Ptr("Microsoft Software Plan"),
						Resource:    to.Ptr("hybridUseBenefits"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SoftwarePlan/hybridUseBenefits/write"),
					Display: &armsoftwareplan.OperationDisplay{
						Description: to.Ptr("Create a hybrid use benefit"),
						Operation:   to.Ptr("Create hybrid use benefit"),
						Provider:    to.Ptr("Microsoft Software Plan"),
						Resource:    to.Ptr("hybridUseBenefits"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SoftwarePlan/hybridUseBenefits/action"),
					Display: &armsoftwareplan.OperationDisplay{
						Description: to.Ptr("Update a hybrid use benefit"),
						Operation:   to.Ptr("Update hybrid use benefit"),
						Provider:    to.Ptr("Microsoft Software Plan"),
						Resource:    to.Ptr("hybridUseBenefits"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SoftwarePlan/hybridUseBenefits/delete"),
					Display: &armsoftwareplan.OperationDisplay{
						Description: to.Ptr("Delete a hybrid use benefit"),
						Operation:   to.Ptr("Delete hybrid use benefit"),
						Provider:    to.Ptr("Microsoft Software Plan"),
						Resource:    to.Ptr("hybridUseBenefits"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SoftwarePlan/hybridUseBenefits/revisions/read"),
					Display: &armsoftwareplan.OperationDisplay{
						Description: to.Ptr("Read all hybrid use benefit revisions"),
						Operation:   to.Ptr("Get hybrid use benefit"),
						Provider:    to.Ptr("Microsoft Software Plan"),
						Resource:    to.Ptr("hybridUseBenefits"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SoftwarePlan/register/action"),
					Display: &armsoftwareplan.OperationDisplay{
						Description: to.Ptr("Registers the SoftwarePlan resource provider and enables the creation of SoftwarePlan resources."),
						Operation:   to.Ptr("Registers the SoftwarePlan Resource Provider."),
						Provider:    to.Ptr("Microsoft Software Plan"),
						Resource:    to.Ptr("SoftwarePlan"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/softwareplan/resource-manager/Microsoft.SoftwarePlan/stable/2019-12-01/examples/GetOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
