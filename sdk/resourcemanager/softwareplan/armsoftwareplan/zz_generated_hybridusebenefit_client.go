//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsoftwareplan

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// HybridUseBenefitClient contains the methods for the HybridUseBenefit group.
// Don't use this type directly, use NewHybridUseBenefitClient() instead.
type HybridUseBenefitClient struct {
	host string
	pl   runtime.Pipeline
}

// NewHybridUseBenefitClient creates a new instance of HybridUseBenefitClient with the specified values.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewHybridUseBenefitClient(credential azcore.TokenCredential, options *arm.ClientOptions) *HybridUseBenefitClient {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := options.Endpoint
	if len(ep) == 0 {
		ep = arm.AzurePublicCloud
	}
	client := &HybridUseBenefitClient{
		host: string(ep),
		pl:   armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options),
	}
	return client
}

// Create - Create a new hybrid use benefit under a given scope
// If the operation fails it returns an *azcore.ResponseError type.
// scope - The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts
// for now
// planID - This is a unique identifier for a plan. Should be a guid.
// body - Request body for creating a hybrid use benefit
// options - HybridUseBenefitClientCreateOptions contains the optional parameters for the HybridUseBenefitClient.Create method.
func (client *HybridUseBenefitClient) Create(ctx context.Context, scope string, planID string, body HybridUseBenefitModel, options *HybridUseBenefitClientCreateOptions) (HybridUseBenefitClientCreateResponse, error) {
	req, err := client.createCreateRequest(ctx, scope, planID, body, options)
	if err != nil {
		return HybridUseBenefitClientCreateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return HybridUseBenefitClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return HybridUseBenefitClientCreateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createHandleResponse(resp)
}

// createCreateRequest creates the Create request.
func (client *HybridUseBenefitClient) createCreateRequest(ctx context.Context, scope string, planID string, body HybridUseBenefitModel, options *HybridUseBenefitClientCreateOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	if planID == "" {
		return nil, errors.New("parameter planID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planId}", url.PathEscape(planID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, body)
}

// createHandleResponse handles the Create response.
func (client *HybridUseBenefitClient) createHandleResponse(resp *http.Response) (HybridUseBenefitClientCreateResponse, error) {
	result := HybridUseBenefitClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HybridUseBenefitModel); err != nil {
		return HybridUseBenefitClientCreateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes a given plan ID
// If the operation fails it returns an *azcore.ResponseError type.
// scope - The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts
// for now
// planID - This is a unique identifier for a plan. Should be a guid.
// options - HybridUseBenefitClientDeleteOptions contains the optional parameters for the HybridUseBenefitClient.Delete method.
func (client *HybridUseBenefitClient) Delete(ctx context.Context, scope string, planID string, options *HybridUseBenefitClientDeleteOptions) (HybridUseBenefitClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, scope, planID, options)
	if err != nil {
		return HybridUseBenefitClientDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return HybridUseBenefitClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return HybridUseBenefitClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return HybridUseBenefitClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *HybridUseBenefitClient) deleteCreateRequest(ctx context.Context, scope string, planID string, options *HybridUseBenefitClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	if planID == "" {
		return nil, errors.New("parameter planID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planId}", url.PathEscape(planID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// Get - Gets a given plan ID
// If the operation fails it returns an *azcore.ResponseError type.
// scope - The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts
// for now
// planID - This is a unique identifier for a plan. Should be a guid.
// options - HybridUseBenefitClientGetOptions contains the optional parameters for the HybridUseBenefitClient.Get method.
func (client *HybridUseBenefitClient) Get(ctx context.Context, scope string, planID string, options *HybridUseBenefitClientGetOptions) (HybridUseBenefitClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, scope, planID, options)
	if err != nil {
		return HybridUseBenefitClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return HybridUseBenefitClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return HybridUseBenefitClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *HybridUseBenefitClient) getCreateRequest(ctx context.Context, scope string, planID string, options *HybridUseBenefitClientGetOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	if planID == "" {
		return nil, errors.New("parameter planID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planId}", url.PathEscape(planID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *HybridUseBenefitClient) getHandleResponse(resp *http.Response) (HybridUseBenefitClientGetResponse, error) {
	result := HybridUseBenefitClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HybridUseBenefitModel); err != nil {
		return HybridUseBenefitClientGetResponse{}, err
	}
	return result, nil
}

// List - Get all hybrid use benefits associated with an ARM resource.
// If the operation fails it returns an *azcore.ResponseError type.
// scope - The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts
// for now
// options - HybridUseBenefitClientListOptions contains the optional parameters for the HybridUseBenefitClient.List method.
func (client *HybridUseBenefitClient) List(scope string, options *HybridUseBenefitClientListOptions) *HybridUseBenefitClientListPager {
	return &HybridUseBenefitClientListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, scope, options)
		},
		advancer: func(ctx context.Context, resp HybridUseBenefitClientListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.HybridUseBenefitListResult.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *HybridUseBenefitClient) listCreateRequest(ctx context.Context, scope string, options *HybridUseBenefitClientListOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-12-01")
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *HybridUseBenefitClient) listHandleResponse(resp *http.Response) (HybridUseBenefitClientListResponse, error) {
	result := HybridUseBenefitClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HybridUseBenefitListResult); err != nil {
		return HybridUseBenefitClientListResponse{}, err
	}
	return result, nil
}

// Update - Updates an existing hybrid use benefit
// If the operation fails it returns an *azcore.ResponseError type.
// scope - The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts
// for now
// planID - This is a unique identifier for a plan. Should be a guid.
// body - Request body for creating a hybrid use benefit
// options - HybridUseBenefitClientUpdateOptions contains the optional parameters for the HybridUseBenefitClient.Update method.
func (client *HybridUseBenefitClient) Update(ctx context.Context, scope string, planID string, body HybridUseBenefitModel, options *HybridUseBenefitClientUpdateOptions) (HybridUseBenefitClientUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, scope, planID, body, options)
	if err != nil {
		return HybridUseBenefitClientUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return HybridUseBenefitClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return HybridUseBenefitClientUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *HybridUseBenefitClient) updateCreateRequest(ctx context.Context, scope string, planID string, body HybridUseBenefitModel, options *HybridUseBenefitClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	if planID == "" {
		return nil, errors.New("parameter planID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planId}", url.PathEscape(planID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, body)
}

// updateHandleResponse handles the Update response.
func (client *HybridUseBenefitClient) updateHandleResponse(resp *http.Response) (HybridUseBenefitClientUpdateResponse, error) {
	result := HybridUseBenefitClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HybridUseBenefitModel); err != nil {
		return HybridUseBenefitClientUpdateResponse{}, err
	}
	return result, nil
}
