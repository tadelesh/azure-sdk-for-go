//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armwindowsesu_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/windowsesu/armwindowsesu"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/windowsesu/resource-manager/Microsoft.WindowsESU/preview/2019-09-16-preview/examples/ListOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListOperations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwindowsesu.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/windowsesu/resource-manager/Microsoft.WindowsESU/preview/2019-09-16-preview/examples/ListOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armwindowsesu.OperationList{
			Value: []*armwindowsesu.Operation{
				{
					Name: to.Ptr("Microsoft.WindowsESU/multipleActivationKeys/Read"),
					Display: &armwindowsesu.OperationDisplay{
						Description: to.Ptr("List MAK keys."),
						Operation:   to.Ptr("List MAK keys"),
						Provider:    to.Ptr("Microsoft Windows Extended Security Updates"),
						Resource:    to.Ptr("multipleActivationKey"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/windowsesu/resource-manager/Microsoft.WindowsESU/preview/2019-09-16-preview/examples/ListOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMultipleActivationKeys_List(t *testing.T) {
	// From example specification/windowsesu/resource-manager/Microsoft.WindowsESU/preview/2019-09-16-preview/examples/ListMultipleActivationKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListMultipleActivationKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwindowsesu.NewMultipleActivationKeysClient("fd3c3665-1729-4b7b-9a38-238e83b0f98b", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/windowsesu/resource-manager/Microsoft.WindowsESU/preview/2019-09-16-preview/examples/ListMultipleActivationKeys.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armwindowsesu.MultipleActivationKeyList{
			Value: []*armwindowsesu.MultipleActivationKey{
				{
					Name:     to.Ptr("server08-key-2019"),
					Type:     to.Ptr("Microsoft.WindowsESU/multipleActivationKeys"),
					ID:       to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/testrg1/providers/Microsoft.WindowsESU/multipleActivationKeys/server08-key-2019"),
					Location: to.Ptr("East US"),
					Properties: &armwindowsesu.MultipleActivationKeyProperties{
						AgreementNumber:       to.Ptr("1a2b45ag"),
						ExpirationDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-21T21:12:26+00:00"); return t }()),
						InstalledServerNumber: to.Ptr[int32](100),
						IsEligible:            to.Ptr(true),
						MultipleActivationKey: to.Ptr("aaaaa-bbbbb-ccccc-ddddd-eeeee"),
						OSType:                to.Ptr(armwindowsesu.OsTypeWindowsServer2008),
						ProvisioningState:     to.Ptr(armwindowsesu.ProvisioningStateSucceeded),
						SupportType:           to.Ptr(armwindowsesu.SupportTypeSupplementalServicing),
					},
				},
				{
					Name:     to.Ptr("server08r2-key-2019"),
					Type:     to.Ptr("Microsoft.WindowsESU/multipleActivationKeys"),
					ID:       to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/testrg1/providers/Microsoft.WindowsESU/multipleActivationKeys/server08r2-key-2019"),
					Location: to.Ptr("East US"),
					Properties: &armwindowsesu.MultipleActivationKeyProperties{
						AgreementNumber:       to.Ptr("1a2b45ag"),
						ExpirationDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T10:33:09+00:00"); return t }()),
						InstalledServerNumber: to.Ptr[int32](100),
						IsEligible:            to.Ptr(true),
						MultipleActivationKey: to.Ptr("aaaaa-bbbbb-ccccc-ddddd-eeeee"),
						OSType:                to.Ptr(armwindowsesu.OsTypeWindowsServer2008R2),
						ProvisioningState:     to.Ptr(armwindowsesu.ProvisioningStateSucceeded),
						SupportType:           to.Ptr(armwindowsesu.SupportTypeSupplementalServicing),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MultipleActivationKeyList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MultipleActivationKeyList)
			t.Fatalf("Mock response is not equal to example response for example specification/windowsesu/resource-manager/Microsoft.WindowsESU/preview/2019-09-16-preview/examples/ListMultipleActivationKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMultipleActivationKeys_ListByResourceGroup(t *testing.T) {
	// From example specification/windowsesu/resource-manager/Microsoft.WindowsESU/preview/2019-09-16-preview/examples/ListMultipleActivationKeysByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListMultipleActivationKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwindowsesu.NewMultipleActivationKeysClient("fd3c3665-1729-4b7b-9a38-238e83b0f98b", cred, &options)
	pager := client.ListByResourceGroup("testrg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/windowsesu/resource-manager/Microsoft.WindowsESU/preview/2019-09-16-preview/examples/ListMultipleActivationKeysByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armwindowsesu.MultipleActivationKeyList{
			Value: []*armwindowsesu.MultipleActivationKey{
				{
					Name:     to.Ptr("server08-key-2019"),
					Type:     to.Ptr("Microsoft.WindowsESU/multipleActivationKeys"),
					ID:       to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/testrg1/providers/Microsoft.WindowsESU/multipleActivationKeys/server08-key-2019"),
					Location: to.Ptr("East US"),
					Properties: &armwindowsesu.MultipleActivationKeyProperties{
						AgreementNumber:       to.Ptr("1a2b45ag"),
						ExpirationDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-21T21:12:26+00:00"); return t }()),
						InstalledServerNumber: to.Ptr[int32](100),
						IsEligible:            to.Ptr(true),
						MultipleActivationKey: to.Ptr("aaaaa-bbbbb-ccccc-ddddd-eeeee"),
						OSType:                to.Ptr(armwindowsesu.OsTypeWindowsServer2008),
						ProvisioningState:     to.Ptr(armwindowsesu.ProvisioningStateSucceeded),
						SupportType:           to.Ptr(armwindowsesu.SupportTypeSupplementalServicing),
					},
				},
				{
					Name:     to.Ptr("server08r2-key-2019"),
					Type:     to.Ptr("Microsoft.WindowsESU/multipleActivationKeys"),
					ID:       to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/testrg1/providers/Microsoft.WindowsESU/multipleActivationKeys/server08r2-key-2019"),
					Location: to.Ptr("East US"),
					Properties: &armwindowsesu.MultipleActivationKeyProperties{
						AgreementNumber:       to.Ptr("1a2b45ag"),
						ExpirationDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T10:33:09+00:00"); return t }()),
						InstalledServerNumber: to.Ptr[int32](100),
						IsEligible:            to.Ptr(true),
						MultipleActivationKey: to.Ptr("aaaaa-bbbbb-ccccc-ddddd-eeeee"),
						OSType:                to.Ptr(armwindowsesu.OsTypeWindowsServer2008R2),
						ProvisioningState:     to.Ptr(armwindowsesu.ProvisioningStateSucceeded),
						SupportType:           to.Ptr(armwindowsesu.SupportTypeSupplementalServicing),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MultipleActivationKeyList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MultipleActivationKeyList)
			t.Fatalf("Mock response is not equal to example response for example specification/windowsesu/resource-manager/Microsoft.WindowsESU/preview/2019-09-16-preview/examples/ListMultipleActivationKeysByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMultipleActivationKeys_Get(t *testing.T) {
	// From example specification/windowsesu/resource-manager/Microsoft.WindowsESU/preview/2019-09-16-preview/examples/GetMultipleActivationKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetMultipleActivationKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwindowsesu.NewMultipleActivationKeysClient("fd3c3665-1729-4b7b-9a38-238e83b0f98b", cred, &options)
	res, err := client.Get(ctx,
		"testgr1",
		"server08-key-2019",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/windowsesu/resource-manager/Microsoft.WindowsESU/preview/2019-09-16-preview/examples/GetMultipleActivationKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armwindowsesu.MultipleActivationKey{
			Name:     to.Ptr("server08-key-2019"),
			Type:     to.Ptr("Microsoft.WindowsESU/multipleActivationKeys"),
			ID:       to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/testgr1/providers/Microsoft.WindowsESU/multipleActivationKeys/server08-key-2019"),
			Location: to.Ptr("East US"),
			Properties: &armwindowsesu.MultipleActivationKeyProperties{
				AgreementNumber:       to.Ptr("1a2b45ag"),
				ExpirationDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-21T21:12:26+00:00"); return t }()),
				InstalledServerNumber: to.Ptr[int32](100),
				IsEligible:            to.Ptr(true),
				MultipleActivationKey: to.Ptr("aaaaa-bbbbb-ccccc-ddddd-eeeee"),
				OSType:                to.Ptr(armwindowsesu.OsTypeWindowsServer2008),
				ProvisioningState:     to.Ptr(armwindowsesu.ProvisioningStateSucceeded),
				SupportType:           to.Ptr(armwindowsesu.SupportTypeSupplementalServicing),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MultipleActivationKey) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MultipleActivationKey)
			t.Fatalf("Mock response is not equal to example response for example specification/windowsesu/resource-manager/Microsoft.WindowsESU/preview/2019-09-16-preview/examples/GetMultipleActivationKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMultipleActivationKeys_Create(t *testing.T) {
	// From example specification/windowsesu/resource-manager/Microsoft.WindowsESU/preview/2019-09-16-preview/examples/CreateMultipleActivationKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateMultipleActivationKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwindowsesu.NewMultipleActivationKeysClient("fd3c3665-1729-4b7b-9a38-238e83b0f98b", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"testgr1",
		"server08-key-2019",
		armwindowsesu.MultipleActivationKey{
			Location: to.Ptr("East US"),
			Properties: &armwindowsesu.MultipleActivationKeyProperties{
				AgreementNumber:       to.Ptr("1a2b45ag"),
				InstalledServerNumber: to.Ptr[int32](100),
				IsEligible:            to.Ptr(true),
				OSType:                to.Ptr(armwindowsesu.OsTypeWindowsServer2008),
				SupportType:           to.Ptr(armwindowsesu.SupportTypeSupplementalServicing),
			},
		},
		&armwindowsesu.MultipleActivationKeysClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/windowsesu/resource-manager/Microsoft.WindowsESU/preview/2019-09-16-preview/examples/CreateMultipleActivationKey.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/windowsesu/resource-manager/Microsoft.WindowsESU/preview/2019-09-16-preview/examples/CreateMultipleActivationKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armwindowsesu.MultipleActivationKey{
			Name:     to.Ptr("server08-key-2019"),
			Type:     to.Ptr("Microsoft.WindowsESU/multipleActivationKeys"),
			ID:       to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/testgr1/providers/Microsoft.WindowsESU/multipleActivationKeys/server08-key-2019"),
			Location: to.Ptr("East US"),
			Properties: &armwindowsesu.MultipleActivationKeyProperties{
				AgreementNumber:       to.Ptr("1a2b45ag"),
				ExpirationDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-21T21:12:26+00:00"); return t }()),
				InstalledServerNumber: to.Ptr[int32](100),
				IsEligible:            to.Ptr(true),
				MultipleActivationKey: to.Ptr("aaaaa-bbbbb-ccccc-ddddd-eeeee"),
				OSType:                to.Ptr(armwindowsesu.OsTypeWindowsServer2008),
				ProvisioningState:     to.Ptr(armwindowsesu.ProvisioningStateSucceeded),
				SupportType:           to.Ptr(armwindowsesu.SupportTypeSupplementalServicing),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MultipleActivationKey) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MultipleActivationKey)
			t.Fatalf("Mock response is not equal to example response for example specification/windowsesu/resource-manager/Microsoft.WindowsESU/preview/2019-09-16-preview/examples/CreateMultipleActivationKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMultipleActivationKeys_Update(t *testing.T) {
	// From example specification/windowsesu/resource-manager/Microsoft.WindowsESU/preview/2019-09-16-preview/examples/UpdateMultipleActivationKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateMultipleActivationKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwindowsesu.NewMultipleActivationKeysClient("fd3c3665-1729-4b7b-9a38-238e83b0f98b", cred, &options)
	res, err := client.Update(ctx,
		"testgr1",
		"server08-key-2019",
		armwindowsesu.MultipleActivationKeyUpdate{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/windowsesu/resource-manager/Microsoft.WindowsESU/preview/2019-09-16-preview/examples/UpdateMultipleActivationKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armwindowsesu.MultipleActivationKey{
			Name:     to.Ptr("server08-key-2019"),
			Type:     to.Ptr("Microsoft.WindowsESU/multipleActivationKeys"),
			ID:       to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/testgr1/providers/Microsoft.WindowsESU/multipleActivationKeys/server08-key-2019"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armwindowsesu.MultipleActivationKeyProperties{
				AgreementNumber:       to.Ptr("1a2b45ag"),
				ExpirationDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-21T21:12:26+00:00"); return t }()),
				InstalledServerNumber: to.Ptr[int32](100),
				IsEligible:            to.Ptr(true),
				MultipleActivationKey: to.Ptr("aaaaa-bbbbb-ccccc-ddddd-eeeee"),
				OSType:                to.Ptr(armwindowsesu.OsTypeWindowsServer2008),
				ProvisioningState:     to.Ptr(armwindowsesu.ProvisioningStateSucceeded),
				SupportType:           to.Ptr(armwindowsesu.SupportTypeSupplementalServicing),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MultipleActivationKey) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MultipleActivationKey)
			t.Fatalf("Mock response is not equal to example response for example specification/windowsesu/resource-manager/Microsoft.WindowsESU/preview/2019-09-16-preview/examples/UpdateMultipleActivationKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMultipleActivationKeys_Delete(t *testing.T) {
	// From example specification/windowsesu/resource-manager/Microsoft.WindowsESU/preview/2019-09-16-preview/examples/DeleteMultipleActivationKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteMultipleActivationKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armwindowsesu.NewMultipleActivationKeysClient("fd3c3665-1729-4b7b-9a38-238e83b0f98b", cred, &options)
	_, err := client.Delete(ctx,
		"testgr1",
		"server08-key-2019",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/windowsesu/resource-manager/Microsoft.WindowsESU/preview/2019-09-16-preview/examples/DeleteMultipleActivationKey.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
