//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armoep_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/oep/armoep"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestLocations_CheckNameAvailability(t *testing.T) {
	// From example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/Locations_CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Locations_CheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoep.NewLocationsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		armoep.CheckNameAvailabilityRequest{
			Name: to.Ptr("sample-name"),
			Type: to.Ptr("Microsoft.OEP/oepResource"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/Locations_CheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoep.CheckNameAvailabilityResponse{
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/Locations_CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEnergyServices_ListByResourceGroup(t *testing.T) {
	// From example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/OepResource_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OepResource_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoep.NewEnergyServicesClient("0000000-0000-0000-0000-000000000001", cred, &options)
	pager := client.ListByResourceGroup("DummyResourceGroupName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/OepResource_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armoep.EnergyServiceList{
			Value: []*armoep.EnergyService{
				{
					Name:     to.Ptr("DummyResourceName"),
					Type:     to.Ptr("Microsoft.OEP/oepResource"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/DummyResourceGroupName/providers/Microsoft.OEP/oepResource/DummyResourceName"),
					Location: to.Ptr("WestUS"),
					Properties: &armoep.EnergyServiceProperties{
						AuthAppID: to.Ptr("sample-id"),
						DataPartitionNames: []*armoep.DataPartitionNames{
							{
								Name: to.Ptr("dataPartition1"),
							},
							{
								Name: to.Ptr("dataPartition2"),
							}},
						ProvisioningState: to.Ptr(armoep.ProvisioningStateSucceeded),
					},
					Tags: map[string]*string{
						"additionalProps1": to.Ptr("additional properties"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EnergyServiceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EnergyServiceList)
			t.Fatalf("Mock response is not equal to example response for example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/OepResource_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEnergyServices_ListBySubscription(t *testing.T) {
	// From example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/OepResource_ListBySubscriptionId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OepResource_ListBySubscriptionId"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoep.NewEnergyServicesClient("0000000-0000-0000-0000-000000000001", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/OepResource_ListBySubscriptionId.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armoep.EnergyServiceList{
			Value: []*armoep.EnergyService{
				{
					Name:     to.Ptr("DummyResourceName"),
					Type:     to.Ptr("Microsoft.OEP/oepResource"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/DummyResourceGroupName/providers/Microsoft.OEP/oepResource/DummyResourceName"),
					Location: to.Ptr("WestUS"),
					Properties: &armoep.EnergyServiceProperties{
						AuthAppID: to.Ptr("sample-id"),
						DataPartitionNames: []*armoep.DataPartitionNames{
							{
								Name: to.Ptr("dataPartition1"),
							},
							{
								Name: to.Ptr("dataPartition2"),
							}},
						ProvisioningState: to.Ptr(armoep.ProvisioningStateSucceeded),
					},
					Tags: map[string]*string{
						"additionalProps1": to.Ptr("additional properties"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EnergyServiceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EnergyServiceList)
			t.Fatalf("Mock response is not equal to example response for example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/OepResource_ListBySubscriptionId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEnergyServices_Get(t *testing.T) {
	// From example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/OepResource_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OepResource_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoep.NewEnergyServicesClient("0000000-0000-0000-0000-000000000001", cred, &options)
	res, err := client.Get(ctx,
		"DummyResourceGroupName",
		"DummyResourceName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/OepResource_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoep.EnergyService{
			Name:     to.Ptr("DummyResourceName"),
			Type:     to.Ptr("Microsoft.OEP/oepResource"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/DummyResourceGroupName/providers/Microsoft.OEP/oepResource/DummyResourceName"),
			Location: to.Ptr("WestUS"),
			Properties: &armoep.EnergyServiceProperties{
				AuthAppID: to.Ptr("sample-id"),
				DataPartitionNames: []*armoep.DataPartitionNames{
					{
						Name: to.Ptr("dataPartition1"),
					},
					{
						Name: to.Ptr("dataPartition2"),
					}},
				ProvisioningState: to.Ptr(armoep.ProvisioningStateSucceeded),
			},
			Tags: map[string]*string{
				"additionalProps1": to.Ptr("additional properties"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EnergyService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EnergyService)
			t.Fatalf("Mock response is not equal to example response for example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/OepResource_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEnergyServices_Create(t *testing.T) {
	// From example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/OepResource_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OepResource_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoep.NewEnergyServicesClient("0000000-0000-0000-0000-000000000001", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"DummyResourceGroupName",
		"DummyResourceName",
		&armoep.EnergyServicesClientBeginCreateOptions{Body: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/OepResource_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/OepResource_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoep.EnergyService{
			Name:     to.Ptr("DummyResourceName"),
			Type:     to.Ptr("Microsoft.OEP/oepResource"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/DummyResourceGroupName/providers/Microsoft.OEP/oepResource/DummyResourceName"),
			Location: to.Ptr("WestUS"),
			Properties: &armoep.EnergyServiceProperties{
				AuthAppID: to.Ptr("sample-id"),
				DataPartitionNames: []*armoep.DataPartitionNames{
					{
						Name: to.Ptr("dataPartition1"),
					},
					{
						Name: to.Ptr("dataPartition2"),
					}},
				ProvisioningState: to.Ptr(armoep.ProvisioningStateSucceeded),
			},
			Tags: map[string]*string{
				"additionalProps1": to.Ptr("additional properties"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EnergyService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EnergyService)
			t.Fatalf("Mock response is not equal to example response for example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/OepResource_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEnergyServices_Update(t *testing.T) {
	// From example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/OepResource_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OepResource_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoep.NewEnergyServicesClient("0000000-0000-0000-0000-000000000001", cred, &options)
	res, err := client.Update(ctx,
		"DummyResourceGroupName",
		"DummyResourceName",
		&armoep.EnergyServicesClientUpdateOptions{Body: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/OepResource_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoep.EnergyService{
			Name:     to.Ptr("DummyResourceName"),
			Type:     to.Ptr("Microsoft.OEP/oepResource"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/DummyResourceGroupName/providers/Microsoft.OEP/oepResource/DummyResourceName"),
			Location: to.Ptr("WestUS"),
			Properties: &armoep.EnergyServiceProperties{
				AuthAppID: to.Ptr("sample-id"),
				DataPartitionNames: []*armoep.DataPartitionNames{
					{
						Name: to.Ptr("dataPartition1"),
					},
					{
						Name: to.Ptr("dataPartition2"),
					}},
				ProvisioningState: to.Ptr(armoep.ProvisioningStateSucceeded),
			},
			Tags: map[string]*string{
				"additionalProps1": to.Ptr("additional properties"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EnergyService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EnergyService)
			t.Fatalf("Mock response is not equal to example response for example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/OepResource_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEnergyServices_Delete(t *testing.T) {
	// From example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/OepResource_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OepResource_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoep.NewEnergyServicesClient("0000000-0000-0000-0000-000000000001", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"DummyResourceGroupName",
		"DummyResourceName",
		&armoep.EnergyServicesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/OepResource_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/OepResource_Delete.json: %v", err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoep.NewOperationsClient(cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/Operations_List.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoep.OperationListResult{
			Value: []*armoep.Operation{
				{
					Name: to.Ptr("Microsoft.OpenEnergyPlatform/register/action"),
					Display: &armoep.OperationDisplay{
						Description: to.Ptr("Register the subscription for Microsoft.OpenEnergyPlatform"),
						Operation:   to.Ptr("Register the Microsoft.OpenEnergyPlatform"),
						Provider:    to.Ptr("Microsoft.OpenEnergyPlatform"),
						Resource:    to.Ptr("Microsoft.OpenEnergyPlatform"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.OpenEnergyPlatform/unregister/action"),
					Display: &armoep.OperationDisplay{
						Description: to.Ptr("Unregister the subscription for Microsoft.OpenEnergyPlatform"),
						Operation:   to.Ptr("Unregister the Microsoft.OpenEnergyPlatform"),
						Provider:    to.Ptr("Microsoft.OpenEnergyPlatform"),
						Resource:    to.Ptr("Microsoft.OpenEnergyPlatform"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.OpenEnergyPlatform/Locations/OperationStatuses/read"),
					Display: &armoep.OperationDisplay{
						Description: to.Ptr("read OperationStatuses"),
						Operation:   to.Ptr("read_OperationStatuses"),
						Provider:    to.Ptr("Microsoft.OpenEnergyPlatform"),
						Resource:    to.Ptr("Locations/OperationStatuses"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.OpenEnergyPlatform/Locations/OperationStatuses/write"),
					Display: &armoep.OperationDisplay{
						Description: to.Ptr("write OperationStatuses"),
						Operation:   to.Ptr("write_OperationStatuses"),
						Provider:    to.Ptr("Microsoft.OpenEnergyPlatform"),
						Resource:    to.Ptr("Locations/OperationStatuses"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.OpenEnergyPlatform/energyServices/read"),
					Display: &armoep.OperationDisplay{
						Description: to.Ptr("Returns list of oep resources.."),
						Operation:   to.Ptr("OepResources_ListByResourceGroup"),
						Provider:    to.Ptr("Microsoft.OpenEnergyPlatform"),
						Resource:    to.Ptr("energyServices"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.OpenEnergyPlatform/energyServices/read"),
					Display: &armoep.OperationDisplay{
						Description: to.Ptr("Lists a collection of oep resources under the given Azure Subscription ID."),
						Operation:   to.Ptr("OepResources_ListBySubscriptionId"),
						Provider:    to.Ptr("Microsoft.OpenEnergyPlatform"),
						Resource:    to.Ptr("energyServices"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.OpenEnergyPlatform/energyServices/read"),
					Display: &armoep.OperationDisplay{
						Description: to.Ptr("Returns oep resource for a given name."),
						Operation:   to.Ptr("OepResources_Get"),
						Provider:    to.Ptr("Microsoft.OpenEnergyPlatform"),
						Resource:    to.Ptr("energyServices"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.OpenEnergyPlatform/energyServices/write"),
					Display: &armoep.OperationDisplay{
						Description: to.Ptr("Method that gets called if subscribed for ResourceCreationBegin trigger."),
						Operation:   to.Ptr("OepResources_Create"),
						Provider:    to.Ptr("Microsoft.OpenEnergyPlatform"),
						Resource:    to.Ptr("energyServices"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.OpenEnergyPlatform/energyServices/delete"),
					Display: &armoep.OperationDisplay{
						Description: to.Ptr("Deletes oep resource"),
						Operation:   to.Ptr("OepResources_Delete"),
						Provider:    to.Ptr("Microsoft.OpenEnergyPlatform"),
						Resource:    to.Ptr("energyServices"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.OpenEnergyPlatform/energyServices/write"),
					Display: &armoep.OperationDisplay{
						Description: to.Ptr("write energyServices"),
						Operation:   to.Ptr("OepResources_Update"),
						Provider:    to.Ptr("Microsoft.OpenEnergyPlatform"),
						Resource:    to.Ptr("energyServices"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.OpenEnergyPlatform/Operations/read"),
					Display: &armoep.OperationDisplay{
						Description: to.Ptr("read Operations"),
						Operation:   to.Ptr("read_Operations"),
						Provider:    to.Ptr("Microsoft.OpenEnergyPlatform"),
						Resource:    to.Ptr("Operations"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.OpenEnergyPlatform/checkNameAvailability/action"),
					Display: &armoep.OperationDisplay{
						Description: to.Ptr("action checkNameAvailability"),
						Operation:   to.Ptr("action_checkNameAvailability"),
						Provider:    to.Ptr("Microsoft.OpenEnergyPlatform"),
						Resource:    to.Ptr("checkNameAvailability"),
					},
					IsDataAction: to.Ptr(false),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2021-06-01-preview/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
