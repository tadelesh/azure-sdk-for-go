//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatadog

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestMarketplaceAgreements_List(t *testing.T) {
	// From example MarketplaceAgreements_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMarketplaceAgreementsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List(&MarketplaceAgreementsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DatadogAgreementResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DatadogAgreementResource.ID should not be nil!")
			}
		}
	}
}

func TestMarketplaceAgreements_CreateOrUpdate(t *testing.T) {
	// From example MarketplaceAgreements_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMarketplaceAgreementsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.CreateOrUpdate(ctx,
		&MarketplaceAgreementsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatadogAgreementResource.ID == nil {
		t.Fatal("DatadogAgreementResource.ID should not be nil!")
	}
}

func TestMonitors_ListApiKeys(t *testing.T) {
	// From example Monitors_ListApiKeys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMonitorsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListAPIKeys("myResourceGroup",
		"myMonitor",
		&MonitorsListAPIKeysOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestMonitors_GetDefaultKey(t *testing.T) {
	// From example Monitors_GetDefaultKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMonitorsClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.GetDefaultKey(ctx,
		"myResourceGroup",
		"myMonitor",
		&MonitorsGetDefaultKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestMonitors_SetDefaultKey(t *testing.T) {
	// From example Monitors_SetDefaultKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMonitorsClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.SetDefaultKey(ctx,
		"myResourceGroup",
		"myMonitor",
		&MonitorsSetDefaultKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestMonitors_ListHosts(t *testing.T) {
	// From example Monitors_ListHosts
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMonitorsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListHosts("myResourceGroup",
		"myMonitor",
		&MonitorsListHostsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestMonitors_ListLinkedResources(t *testing.T) {
	// From example Monitors_ListLinkedResources
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMonitorsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListLinkedResources("myResourceGroup",
		"myMonitor",
		&MonitorsListLinkedResourcesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LinkedResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LinkedResource.ID should not be nil!")
			}
		}
	}
}

func TestMonitors_ListMonitoredResources(t *testing.T) {
	// From example Monitors_ListMonitoredResources
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMonitorsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListMonitoredResources("myResourceGroup",
		"myMonitor",
		&MonitorsListMonitoredResourcesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("MonitoredResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("MonitoredResource.ID should not be nil!")
			}
		}
	}
}

func TestMonitors_List(t *testing.T) {
	// From example Monitors_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMonitorsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List(&MonitorsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DatadogMonitorResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DatadogMonitorResource.ID should not be nil!")
			}
		}
	}
}

func TestMonitors_ListByResourceGroup(t *testing.T) {
	// From example Monitors_ListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMonitorsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListByResourceGroup("myResourceGroup",
		&MonitorsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DatadogMonitorResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DatadogMonitorResource.ID should not be nil!")
			}
		}
	}
}

func TestMonitors_Get(t *testing.T) {
	// From example Monitors_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMonitorsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myMonitor",
		&MonitorsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatadogMonitorResource.ID == nil {
		t.Fatal("DatadogMonitorResource.ID should not be nil!")
	}
}

func TestMonitors_Create(t *testing.T) {
	// From example Monitors_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMonitorsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myMonitor",
		&MonitorsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DatadogMonitorResource.ID == nil {
		t.Fatal("DatadogMonitorResource.ID should not be nil!")
	}
}

func TestMonitors_Update(t *testing.T) {
	// From example Monitors_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMonitorsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myMonitor",
		&MonitorsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DatadogMonitorResource.ID == nil {
		t.Fatal("DatadogMonitorResource.ID should not be nil!")
	}
}

func TestMonitors_Delete(t *testing.T) {
	// From example Monitors_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMonitorsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myMonitor",
		&MonitorsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestMonitors_RefreshSetPasswordLink(t *testing.T) {
	// From example Monitors_RefreshSetPasswordLink
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMonitorsClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.RefreshSetPasswordLink(ctx,
		"myResourceGroup",
		"myMonitor",
		&MonitorsRefreshSetPasswordLinkOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example Operations_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestTagRules_List(t *testing.T) {
	// From example TagRules_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagRulesClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("myResourceGroup",
		"myMonitor",
		&TagRulesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("MonitoringTagRules.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("MonitoringTagRules.ID should not be nil!")
			}
		}
	}
}

func TestTagRules_CreateOrUpdate(t *testing.T) {
	// From example TagRules_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagRulesClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myMonitor",
		"default",
		&TagRulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MonitoringTagRules.ID == nil {
		t.Fatal("MonitoringTagRules.ID should not be nil!")
	}
}

func TestTagRules_Get(t *testing.T) {
	// From example TagRules_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagRulesClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myMonitor",
		"default",
		&TagRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MonitoringTagRules.ID == nil {
		t.Fatal("MonitoringTagRules.ID should not be nil!")
	}
}

func TestSingleSignOnConfigurations_List(t *testing.T) {
	// From example SingleSignOnConfigurations_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSingleSignOnConfigurationsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("myResourceGroup",
		"myMonitor",
		&SingleSignOnConfigurationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DatadogSingleSignOnResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DatadogSingleSignOnResource.ID should not be nil!")
			}
		}
	}
}

func TestSingleSignOnConfigurations_CreateOrUpdate(t *testing.T) {
	// From example SingleSignOnConfigurations_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSingleSignOnConfigurationsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myMonitor",
		"default",
		&SingleSignOnConfigurationsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DatadogSingleSignOnResource.ID == nil {
		t.Fatal("DatadogSingleSignOnResource.ID should not be nil!")
	}
}

func TestSingleSignOnConfigurations_Get(t *testing.T) {
	// From example SingleSignOnConfigurations_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSingleSignOnConfigurationsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myMonitor",
		"default",
		&SingleSignOnConfigurationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatadogSingleSignOnResource.ID == nil {
		t.Fatal("DatadogSingleSignOnResource.ID should not be nil!")
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
