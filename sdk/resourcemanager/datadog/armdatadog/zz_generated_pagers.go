//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatadog

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// MarketplaceAgreementsClientListPager provides operations for iterating over paged responses.
type MarketplaceAgreementsClientListPager struct {
	client    *MarketplaceAgreementsClient
	current   MarketplaceAgreementsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MarketplaceAgreementsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MarketplaceAgreementsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AgreementResourceListResponse.NextLink == nil || len(*p.current.AgreementResourceListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MarketplaceAgreementsClientListPager) NextPage(ctx context.Context) (MarketplaceAgreementsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MarketplaceAgreementsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MarketplaceAgreementsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MarketplaceAgreementsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MarketplaceAgreementsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return MarketplaceAgreementsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// MonitorsClientListAPIKeysPager provides operations for iterating over paged responses.
type MonitorsClientListAPIKeysPager struct {
	client    *MonitorsClient
	current   MonitorsClientListAPIKeysResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsClientListAPIKeysResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MonitorsClientListAPIKeysPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APIKeyListResponse.NextLink == nil || len(*p.current.APIKeyListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MonitorsClientListAPIKeysPager) NextPage(ctx context.Context) (MonitorsClientListAPIKeysResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MonitorsClientListAPIKeysResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MonitorsClientListAPIKeysResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MonitorsClientListAPIKeysResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MonitorsClientListAPIKeysResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listAPIKeysHandleResponse(resp)
	if err != nil {
		return MonitorsClientListAPIKeysResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// MonitorsClientListByResourceGroupPager provides operations for iterating over paged responses.
type MonitorsClientListByResourceGroupPager struct {
	client    *MonitorsClient
	current   MonitorsClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MonitorsClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitorResourceListResponse.NextLink == nil || len(*p.current.MonitorResourceListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MonitorsClientListByResourceGroupPager) NextPage(ctx context.Context) (MonitorsClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MonitorsClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MonitorsClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MonitorsClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MonitorsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return MonitorsClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// MonitorsClientListHostsPager provides operations for iterating over paged responses.
type MonitorsClientListHostsPager struct {
	client    *MonitorsClient
	current   MonitorsClientListHostsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsClientListHostsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MonitorsClientListHostsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.HostListResponse.NextLink == nil || len(*p.current.HostListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MonitorsClientListHostsPager) NextPage(ctx context.Context) (MonitorsClientListHostsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MonitorsClientListHostsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MonitorsClientListHostsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MonitorsClientListHostsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MonitorsClientListHostsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHostsHandleResponse(resp)
	if err != nil {
		return MonitorsClientListHostsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// MonitorsClientListLinkedResourcesPager provides operations for iterating over paged responses.
type MonitorsClientListLinkedResourcesPager struct {
	client    *MonitorsClient
	current   MonitorsClientListLinkedResourcesResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsClientListLinkedResourcesResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MonitorsClientListLinkedResourcesPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LinkedResourceListResponse.NextLink == nil || len(*p.current.LinkedResourceListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MonitorsClientListLinkedResourcesPager) NextPage(ctx context.Context) (MonitorsClientListLinkedResourcesResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MonitorsClientListLinkedResourcesResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MonitorsClientListLinkedResourcesResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MonitorsClientListLinkedResourcesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MonitorsClientListLinkedResourcesResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listLinkedResourcesHandleResponse(resp)
	if err != nil {
		return MonitorsClientListLinkedResourcesResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// MonitorsClientListMonitoredResourcesPager provides operations for iterating over paged responses.
type MonitorsClientListMonitoredResourcesPager struct {
	client    *MonitorsClient
	current   MonitorsClientListMonitoredResourcesResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsClientListMonitoredResourcesResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MonitorsClientListMonitoredResourcesPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitoredResourceListResponse.NextLink == nil || len(*p.current.MonitoredResourceListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MonitorsClientListMonitoredResourcesPager) NextPage(ctx context.Context) (MonitorsClientListMonitoredResourcesResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MonitorsClientListMonitoredResourcesResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MonitorsClientListMonitoredResourcesResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MonitorsClientListMonitoredResourcesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MonitorsClientListMonitoredResourcesResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listMonitoredResourcesHandleResponse(resp)
	if err != nil {
		return MonitorsClientListMonitoredResourcesResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// MonitorsClientListPager provides operations for iterating over paged responses.
type MonitorsClientListPager struct {
	client    *MonitorsClient
	current   MonitorsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MonitorsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitorResourceListResponse.NextLink == nil || len(*p.current.MonitorResourceListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MonitorsClientListPager) NextPage(ctx context.Context) (MonitorsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MonitorsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MonitorsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MonitorsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MonitorsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return MonitorsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SingleSignOnConfigurationsClientListPager provides operations for iterating over paged responses.
type SingleSignOnConfigurationsClientListPager struct {
	client    *SingleSignOnConfigurationsClient
	current   SingleSignOnConfigurationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SingleSignOnConfigurationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SingleSignOnConfigurationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SingleSignOnResourceListResponse.NextLink == nil || len(*p.current.SingleSignOnResourceListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SingleSignOnConfigurationsClientListPager) NextPage(ctx context.Context) (SingleSignOnConfigurationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SingleSignOnConfigurationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SingleSignOnConfigurationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SingleSignOnConfigurationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SingleSignOnConfigurationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return SingleSignOnConfigurationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// TagRulesClientListPager provides operations for iterating over paged responses.
type TagRulesClientListPager struct {
	client    *TagRulesClient
	current   TagRulesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TagRulesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *TagRulesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitoringTagRulesListResponse.NextLink == nil || len(*p.current.MonitoringTagRulesListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *TagRulesClientListPager) NextPage(ctx context.Context) (TagRulesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return TagRulesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return TagRulesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return TagRulesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return TagRulesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return TagRulesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
