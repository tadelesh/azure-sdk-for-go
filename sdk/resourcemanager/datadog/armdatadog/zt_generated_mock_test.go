//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatadog_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datadog/armdatadog"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestMarketplaceAgreements_List(t *testing.T) {
	// From example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/MarketplaceAgreements_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MarketplaceAgreements_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatadog.NewMarketplaceAgreementsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/MarketplaceAgreements_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatadog.AgreementResourceListResponse{
			Value: []*armdatadog.AgreementResource{
				{
					Name: to.Ptr("planid1"),
					Type: to.Ptr("Microsoft.Datadog/agreements"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Datadog/agreements/id1"),
					Properties: &armdatadog.AgreementProperties{
						Accepted:          to.Ptr(false),
						LicenseTextLink:   to.Ptr("test.licenseLink1"),
						Plan:              to.Ptr("planid1"),
						PrivacyPolicyLink: to.Ptr("test.privacyPolicyLink1"),
						Product:           to.Ptr("offid1"),
						Publisher:         to.Ptr("pubid1"),
						RetrieveDatetime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-15T11:33:07.12132Z"); return t }()),
						Signature:         to.Ptr("ASDFSDAFWEFASDGWERLWER"),
					},
				},
				{
					Name: to.Ptr("planid2"),
					Type: to.Ptr("Microsoft.Datadog/agreements"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Datadog/agreements/id2"),
					Properties: &armdatadog.AgreementProperties{
						Accepted:          to.Ptr(false),
						LicenseTextLink:   to.Ptr("test.licenseLin2k"),
						Plan:              to.Ptr("planid2"),
						PrivacyPolicyLink: to.Ptr("test.privacyPolicyLink2"),
						Product:           to.Ptr("offid2"),
						Publisher:         to.Ptr("pubid2"),
						RetrieveDatetime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-14T11:33:07.12132Z"); return t }()),
						Signature:         to.Ptr("ASDFSDAFWEFASDGWERLWER"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AgreementResourceListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AgreementResourceListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/MarketplaceAgreements_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMarketplaceAgreements_CreateOrUpdate(t *testing.T) {
	// From example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/MarketplaceAgreements_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MarketplaceAgreements_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatadog.NewMarketplaceAgreementsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		&armdatadog.MarketplaceAgreementsClientCreateOrUpdateOptions{Body: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/MarketplaceAgreements_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatadog.AgreementResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Datadog/agreements"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Datadog/agreements/default"),
			Properties: &armdatadog.AgreementProperties{
				Accepted:          to.Ptr(true),
				LicenseTextLink:   to.Ptr("test.licenseLink1"),
				Plan:              to.Ptr("planid1"),
				PrivacyPolicyLink: to.Ptr("test.privacyPolicyLink1"),
				Product:           to.Ptr("offid1"),
				Publisher:         to.Ptr("pubid1"),
				RetrieveDatetime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-15T11:33:07.12132Z"); return t }()),
				Signature:         to.Ptr("ASDFSDAFWEFASDGWERLWER"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgreementResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgreementResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/MarketplaceAgreements_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitors_GetDefaultKey(t *testing.T) {
	// From example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/ApiKeys_GetDefaultKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Monitors_GetDefaultKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatadog.NewMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.GetDefaultKey(ctx,
		"myResourceGroup",
		"myMonitor",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/ApiKeys_GetDefaultKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatadog.APIKey{
			Name:      to.Ptr("<API_KEY_NAME>"),
			Created:   to.Ptr("2019-04-05 09:20:30"),
			CreatedBy: to.Ptr("john@example.com"),
			Key:       to.Ptr("1111111111111111aaaaaaaaaaaaaaaa"),
		}
		if !reflect.DeepEqual(exampleRes, res.APIKey) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIKey)
			t.Fatalf("Mock response is not equal to example response for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/ApiKeys_GetDefaultKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitors_SetDefaultKey(t *testing.T) {
	// From example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/ApiKeys_SetDefaultKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Monitors_SetDefaultKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatadog.NewMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.SetDefaultKey(ctx,
		"myResourceGroup",
		"myMonitor",
		&armdatadog.MonitorsClientSetDefaultKeyOptions{Body: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/ApiKeys_SetDefaultKey.json: %v", err)
	}
}

func TestMonitors_ListHosts(t *testing.T) {
	// From example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Hosts_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Monitors_ListHosts"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatadog.NewMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListHosts("myResourceGroup",
		"myMonitor",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Hosts_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatadog.HostListResponse{
			Value: []*armdatadog.Host{
				{
					Name: to.Ptr("vm1"),
					Aliases: []*string{
						to.Ptr("vm1"),
						to.Ptr("65f2dd83-95ae-4f56-b6aa-a5dafc05f4cd")},
					Apps: []*string{
						to.Ptr("ntp"),
						to.Ptr("agent")},
					Meta: &armdatadog.HostMetadata{
						AgentVersion: to.Ptr("7.19.2"),
						InstallMethod: &armdatadog.InstallMethod{
							InstallerVersion: to.Ptr("install_script-1.0.0"),
							Tool:             to.Ptr("install_script"),
							ToolVersion:      to.Ptr("install_script"),
						},
						LogsAgent: &armdatadog.LogsAgent{
							Transport: to.Ptr(""),
						},
					},
				},
				{
					Name: to.Ptr("vm2"),
					Aliases: []*string{
						to.Ptr("vm2"),
						to.Ptr("df631d9a-8178-4580-bf60-c697a5e8df4d")},
					Apps: []*string{
						to.Ptr("infra"),
						to.Ptr("agent")},
					Meta: &armdatadog.HostMetadata{
						AgentVersion: to.Ptr("7.18.1"),
						InstallMethod: &armdatadog.InstallMethod{
							InstallerVersion: to.Ptr("install_script-1.0.0"),
							Tool:             to.Ptr("install_script"),
							ToolVersion:      to.Ptr("install_script"),
						},
						LogsAgent: &armdatadog.LogsAgent{
							Transport: to.Ptr("HTTP"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.HostListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.HostListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Hosts_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitors_ListLinkedResources(t *testing.T) {
	// From example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/LinkedResources_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Monitors_ListLinkedResources"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatadog.NewMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListLinkedResources("myResourceGroup",
		"myMonitor",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/LinkedResources_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatadog.LinkedResourceListResponse{
			Value: []*armdatadog.LinkedResource{
				{
					ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Datadog/monitors/myMonitor"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LinkedResourceListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LinkedResourceListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/LinkedResources_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitors_ListMonitoredResources(t *testing.T) {
	// From example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/MonitoredResources_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Monitors_ListMonitoredResources"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatadog.NewMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListMonitoredResources("myResourceGroup",
		"myMonitor",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/MonitoredResources_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatadog.MonitoredResourceListResponse{
			Value: []*armdatadog.MonitoredResource{
				{
					ID:                     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVault"),
					ReasonForLogsStatus:    to.Ptr("CapturedByRules"),
					ReasonForMetricsStatus: to.Ptr("CapturedByRules"),
					SendingLogs:            to.Ptr(true),
					SendingMetrics:         to.Ptr(true),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MonitoredResourceListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MonitoredResourceListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/MonitoredResources_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitors_List(t *testing.T) {
	// From example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Monitors_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Monitors_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatadog.NewMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Monitors_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatadog.MonitorResourceListResponse{
			Value: []*armdatadog.MonitorResource{
				{
					Name:     to.Ptr("myMonitor"),
					Type:     to.Ptr("Microsoft.Datadog/monitors"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/monitors/myMonitor"),
					Location: to.Ptr("West US"),
					Properties: &armdatadog.MonitorProperties{
						DatadogOrganizationProperties: &armdatadog.OrganizationProperties{
							Name: to.Ptr("myOrg"),
							ID:   to.Ptr("myOrg123"),
						},
						LiftrResourceCategory:   to.Ptr(armdatadog.LiftrResourceCategoriesMonitorLogs),
						LiftrResourcePreference: to.Ptr[int32](1),
						MonitoringStatus:        to.Ptr(armdatadog.MonitoringStatusEnabled),
						ProvisioningState:       to.Ptr(armdatadog.ProvisioningStateSucceeded),
					},
					Tags: map[string]*string{
						"Environment": to.Ptr("Dev"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MonitorResourceListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MonitorResourceListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Monitors_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitors_ListByResourceGroup(t *testing.T) {
	// From example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Monitors_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Monitors_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatadog.NewMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Monitors_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatadog.MonitorResourceListResponse{
			Value: []*armdatadog.MonitorResource{
				{
					Name:     to.Ptr("myMonitor"),
					Type:     to.Ptr("Microsoft.Datadog/monitors"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/monitors/myMonitor"),
					Location: to.Ptr("West US"),
					Properties: &armdatadog.MonitorProperties{
						DatadogOrganizationProperties: &armdatadog.OrganizationProperties{
							Name: to.Ptr("myOrg"),
							ID:   to.Ptr("myOrg123"),
						},
						LiftrResourceCategory:   to.Ptr(armdatadog.LiftrResourceCategoriesMonitorLogs),
						LiftrResourcePreference: to.Ptr[int32](1),
						MonitoringStatus:        to.Ptr(armdatadog.MonitoringStatusEnabled),
						ProvisioningState:       to.Ptr(armdatadog.ProvisioningStateSucceeded),
					},
					Tags: map[string]*string{
						"Environment": to.Ptr("Dev"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MonitorResourceListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MonitorResourceListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Monitors_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitors_Get(t *testing.T) {
	// From example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Monitors_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Monitors_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatadog.NewMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myMonitor",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Monitors_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatadog.MonitorResource{
			Name:     to.Ptr("myMonitor"),
			Type:     to.Ptr("Microsoft.Datadog/monitors"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/monitors/myMonitor"),
			Location: to.Ptr("West US"),
			Properties: &armdatadog.MonitorProperties{
				DatadogOrganizationProperties: &armdatadog.OrganizationProperties{
					Name: to.Ptr("myOrg"),
					ID:   to.Ptr("myOrg123"),
				},
				LiftrResourceCategory:   to.Ptr(armdatadog.LiftrResourceCategoriesMonitorLogs),
				LiftrResourcePreference: to.Ptr[int32](1),
				MonitoringStatus:        to.Ptr(armdatadog.MonitoringStatusEnabled),
				ProvisioningState:       to.Ptr(armdatadog.ProvisioningStateSucceeded),
			},
			Tags: map[string]*string{
				"Environment": to.Ptr("Dev"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitorResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitorResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Monitors_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitors_Create(t *testing.T) {
	// From example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Monitors_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Monitors_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatadog.NewMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myMonitor",
		&armdatadog.MonitorsClientBeginCreateOptions{Body: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Monitors_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Monitors_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatadog.MonitorResource{
			Name:     to.Ptr("myMonitor"),
			Type:     to.Ptr("Microsoft.Datadog/monitors"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/monitors/myMonitor"),
			Location: to.Ptr("West US"),
			Properties: &armdatadog.MonitorProperties{
				DatadogOrganizationProperties: &armdatadog.OrganizationProperties{
					Name: to.Ptr("myOrg"),
					ID:   to.Ptr("myOrg123"),
				},
				LiftrResourceCategory:   to.Ptr(armdatadog.LiftrResourceCategoriesMonitorLogs),
				LiftrResourcePreference: to.Ptr[int32](1),
				MonitoringStatus:        to.Ptr(armdatadog.MonitoringStatusEnabled),
				ProvisioningState:       to.Ptr(armdatadog.ProvisioningStateSucceeded),
			},
			SKU: &armdatadog.ResourceSKU{
				Name: to.Ptr("free_Monthly"),
			},
			Tags: map[string]*string{
				"Environment": to.Ptr("Dev"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitorResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitorResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Monitors_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitors_Update(t *testing.T) {
	// From example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Monitors_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Monitors_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatadog.NewMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myMonitor",
		&armdatadog.MonitorsClientBeginUpdateOptions{Body: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Monitors_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Monitors_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatadog.MonitorResource{
			Name:     to.Ptr("myMonitor"),
			Type:     to.Ptr("Microsoft.Datadog/monitors"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/monitors/myMonitor"),
			Location: to.Ptr("West US"),
			Properties: &armdatadog.MonitorProperties{
				DatadogOrganizationProperties: &armdatadog.OrganizationProperties{
					Name: to.Ptr("myOrg"),
					ID:   to.Ptr("myOrg123"),
				},
				LiftrResourceCategory:   to.Ptr(armdatadog.LiftrResourceCategoriesMonitorLogs),
				LiftrResourcePreference: to.Ptr[int32](1),
				MonitoringStatus:        to.Ptr(armdatadog.MonitoringStatusEnabled),
				ProvisioningState:       to.Ptr(armdatadog.ProvisioningStateSucceeded),
			},
			SKU: &armdatadog.ResourceSKU{
				Name: to.Ptr("free_Monthly"),
			},
			Tags: map[string]*string{
				"Environment": to.Ptr("Dev"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitorResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitorResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Monitors_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitors_Delete(t *testing.T) {
	// From example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Monitors_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Monitors_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatadog.NewMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myMonitor",
		&armdatadog.MonitorsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Monitors_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Monitors_Delete.json: %v", err)
	}
}

func TestMonitors_RefreshSetPasswordLink(t *testing.T) {
	// From example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/RefreshSetPassword_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Monitors_RefreshSetPasswordLink"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatadog.NewMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.RefreshSetPasswordLink(ctx,
		"myResourceGroup",
		"myMonitor",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/RefreshSetPassword_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatadog.SetPasswordLink{
			SetPasswordLink: to.Ptr("https://datadoghq.com/reset_password/tokenvalue123"),
		}
		if !reflect.DeepEqual(exampleRes, res.SetPasswordLink) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SetPasswordLink)
			t.Fatalf("Mock response is not equal to example response for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/RefreshSetPassword_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatadog.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatadog.OperationListResult{
			Value: []*armdatadog.OperationResult{
				{
					Name: to.Ptr("Microsoft.Datadog/monitors/write"),
					Display: &armdatadog.OperationDisplay{
						Description: to.Ptr("Write monitors resource"),
						Operation:   to.Ptr("write"),
						Provider:    to.Ptr("Microsoft.Datadog"),
						Resource:    to.Ptr("monitors"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTagRules_List(t *testing.T) {
	// From example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/TagRules_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TagRules_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatadog.NewTagRulesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myMonitor",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/TagRules_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatadog.MonitoringTagRulesListResponse{
			Value: []*armdatadog.MonitoringTagRules{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Datadog/monitors/tagRules"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Datadog/monitors/myMonitor/tagRules/default"),
					Properties: &armdatadog.MonitoringTagRulesProperties{
						LogRules: &armdatadog.LogRules{
							FilteringTags: []*armdatadog.FilteringTag{
								{
									Name:   to.Ptr("Environment"),
									Action: to.Ptr(armdatadog.TagActionInclude),
									Value:  to.Ptr("Prod"),
								},
								{
									Name:   to.Ptr("Environment"),
									Action: to.Ptr(armdatadog.TagActionExclude),
									Value:  to.Ptr("Dev"),
								}},
							SendAADLogs:          to.Ptr(false),
							SendResourceLogs:     to.Ptr(true),
							SendSubscriptionLogs: to.Ptr(true),
						},
						MetricRules: &armdatadog.MetricRules{
							FilteringTags: []*armdatadog.FilteringTag{},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MonitoringTagRulesListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MonitoringTagRulesListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/TagRules_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTagRules_CreateOrUpdate(t *testing.T) {
	// From example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/TagRules_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TagRules_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatadog.NewTagRulesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myMonitor",
		"default",
		&armdatadog.TagRulesClientCreateOrUpdateOptions{Body: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/TagRules_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatadog.MonitoringTagRules{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Datadog/monitors/tagRules"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Datadog/monitors/myMonitor/tagRules/default"),
			Properties: &armdatadog.MonitoringTagRulesProperties{
				LogRules: &armdatadog.LogRules{
					FilteringTags: []*armdatadog.FilteringTag{
						{
							Name:   to.Ptr("Environment"),
							Action: to.Ptr(armdatadog.TagActionInclude),
							Value:  to.Ptr("Prod"),
						},
						{
							Name:   to.Ptr("Environment"),
							Action: to.Ptr(armdatadog.TagActionExclude),
							Value:  to.Ptr("Dev"),
						}},
					SendAADLogs:          to.Ptr(false),
					SendResourceLogs:     to.Ptr(true),
					SendSubscriptionLogs: to.Ptr(true),
				},
				MetricRules: &armdatadog.MetricRules{
					FilteringTags: []*armdatadog.FilteringTag{},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitoringTagRules) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitoringTagRules)
			t.Fatalf("Mock response is not equal to example response for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/TagRules_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTagRules_Get(t *testing.T) {
	// From example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/TagRules_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TagRules_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatadog.NewTagRulesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myMonitor",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/TagRules_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatadog.MonitoringTagRules{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Datadog/monitors/tagRules"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Datadog/monitors/myMonitor/tagRules/default"),
			Properties: &armdatadog.MonitoringTagRulesProperties{
				LogRules: &armdatadog.LogRules{
					FilteringTags: []*armdatadog.FilteringTag{
						{
							Name:   to.Ptr("Environment"),
							Action: to.Ptr(armdatadog.TagActionInclude),
							Value:  to.Ptr("Prod"),
						},
						{
							Name:   to.Ptr("Environment"),
							Action: to.Ptr(armdatadog.TagActionExclude),
							Value:  to.Ptr("Dev"),
						}},
					SendAADLogs:          to.Ptr(false),
					SendResourceLogs:     to.Ptr(true),
					SendSubscriptionLogs: to.Ptr(true),
				},
				MetricRules: &armdatadog.MetricRules{
					FilteringTags: []*armdatadog.FilteringTag{},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitoringTagRules) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitoringTagRules)
			t.Fatalf("Mock response is not equal to example response for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/TagRules_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSingleSignOnConfigurations_List(t *testing.T) {
	// From example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/SingleSignOnConfigurations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SingleSignOnConfigurations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatadog.NewSingleSignOnConfigurationsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myMonitor",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/SingleSignOnConfigurations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatadog.SingleSignOnResourceListResponse{
			Value: []*armdatadog.SingleSignOnResource{
				{
					Name: to.Ptr("default"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Datadog/monitors/myMonitor/singleSignOnConfigurations/default"),
					Properties: &armdatadog.SingleSignOnProperties{
						EnterpriseAppID:   to.Ptr("00000000-0000-0000-0000-000000000000"),
						SingleSignOnState: to.Ptr(armdatadog.SingleSignOnStatesEnable),
						SingleSignOnURL:   to.Ptr("https://www.datadoghq.com/IAmSomeHash"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SingleSignOnResourceListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SingleSignOnResourceListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/SingleSignOnConfigurations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSingleSignOnConfigurations_CreateOrUpdate(t *testing.T) {
	// From example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/SingleSignOnConfigurations_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SingleSignOnConfigurations_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatadog.NewSingleSignOnConfigurationsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myMonitor",
		"default",
		&armdatadog.SingleSignOnConfigurationsClientBeginCreateOrUpdateOptions{Body: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/SingleSignOnConfigurations_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/SingleSignOnConfigurations_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatadog.SingleSignOnResource{
			Name: to.Ptr("default"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Datadog/monitors/myMonitor/singleSignOnConfigurations/default"),
			Properties: &armdatadog.SingleSignOnProperties{
				EnterpriseAppID:   to.Ptr("00000000-0000-0000-0000-000000000000"),
				SingleSignOnState: to.Ptr(armdatadog.SingleSignOnStatesEnable),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SingleSignOnResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SingleSignOnResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/SingleSignOnConfigurations_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSingleSignOnConfigurations_Get(t *testing.T) {
	// From example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/SingleSignOnConfigurations_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SingleSignOnConfigurations_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatadog.NewSingleSignOnConfigurationsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myMonitor",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/SingleSignOnConfigurations_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatadog.SingleSignOnResource{
			Name: to.Ptr("default"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Datadog/monitors/myMonitor/singleSignOnConfigurations/default"),
			Properties: &armdatadog.SingleSignOnProperties{
				EnterpriseAppID:   to.Ptr("00000000-0000-0000-0000-000000000000"),
				SingleSignOnState: to.Ptr(armdatadog.SingleSignOnStatesEnable),
				SingleSignOnURL:   to.Ptr("https://www.datadoghq.com/IAmSomeHash"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SingleSignOnResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SingleSignOnResource)
			t.Fatalf("Mock response is not equal to example response for example specification/datadog/resource-manager/Microsoft.Datadog/stable/2021-03-01/examples/SingleSignOnConfigurations_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
