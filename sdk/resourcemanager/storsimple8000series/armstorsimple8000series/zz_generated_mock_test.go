//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstorsimple8000series

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	// From example OperationsList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestManagers_List(t *testing.T) {
	// From example ManagersList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.List(ctx,
		&ManagersListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagers_ListByResourceGroup(t *testing.T) {
	// From example ManagersListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListByResourceGroup(ctx,
		"ResourceGroupForSDKTest",
		&ManagersListByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagers_Get(t *testing.T) {
	// From example ManagersGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest2",
		&ManagersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Manager.ID == nil {
		t.Fatal("Manager.ID should not be nil!")
	}
}

func TestManagers_CreateOrUpdate(t *testing.T) {
	// From example ManagersCreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.CreateOrUpdate(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest2",
		Manager{
			Resource: Resource{
				Location: to.StringPtr("westus"),
			},
			Properties: &ManagerProperties{
				CisIntrinsicSettings: &ManagerIntrinsicSettings{
					Type: ManagerTypeGardaV1.ToPtr(),
				},
				SKU: &ManagerSKU{
					Name: to.StringPtr("Standard"),
				},
			},
		},
		&ManagersCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Manager.ID == nil {
		t.Fatal("Manager.ID should not be nil!")
	}
}

func TestManagers_Delete(t *testing.T) {
	// From example ManagersDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.Delete(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest2",
		&ManagersDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagers_Update(t *testing.T) {
	// From example ManagersUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Update(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest2",
		ManagerPatch{
			Tags: map[string]*string{
				"TagName": to.StringPtr("ForSDKTest"),
			},
		},
		&ManagersUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Manager.ID == nil {
		t.Fatal("Manager.ID should not be nil!")
	}
}

func TestManagers_GetDevicePublicEncryptionKey(t *testing.T) {
	// From example ManagersGetDevicePublicEncryptionKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagersClient(con,
		"d3ebfe71-b7a9-4c57-92b9-68a2afde4de5")
	_, err := client.GetDevicePublicEncryptionKey(ctx,
		"sca01forsdktest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&ManagersGetDevicePublicEncryptionKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagers_GetEncryptionSettings(t *testing.T) {
	// From example ManagersGetEncryptionSettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagersClient(con,
		"d3ebfe71-b7a9-4c57-92b9-68a2afde4de5")
	res, err := client.GetEncryptionSettings(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&ManagersGetEncryptionSettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EncryptionSettings.ID == nil {
		t.Fatal("EncryptionSettings.ID should not be nil!")
	}
}

func TestManagers_GetExtendedInfo(t *testing.T) {
	// From example ManagersGetExtendedInfo
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.GetExtendedInfo(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&ManagersGetExtendedInfoOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagerExtendedInfo.ID == nil {
		t.Fatal("ManagerExtendedInfo.ID should not be nil!")
	}
}

func TestManagers_CreateExtendedInfo(t *testing.T) {
	// From example ManagersCreateExtendedInfo
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.CreateExtendedInfo(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest2",
		ManagerExtendedInfo{
			Properties: &ManagerExtendedInfoProperties{
				Algorithm:    to.StringPtr("None"),
				IntegrityKey: to.StringPtr("BIl+RHqO8PZ6DRvuXTTK7g=="),
			},
		},
		&ManagersCreateExtendedInfoOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagerExtendedInfo.ID == nil {
		t.Fatal("ManagerExtendedInfo.ID should not be nil!")
	}
}

func TestManagers_DeleteExtendedInfo(t *testing.T) {
	// From example ManagersDeleteExtendedInfo
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.DeleteExtendedInfo(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest2",
		&ManagersDeleteExtendedInfoOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagers_UpdateExtendedInfo(t *testing.T) {
	// From example ManagersUpdateExtendedInfo
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.UpdateExtendedInfo(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest2",
		"674ab9df-af56-4c5c-a5ca-2bddcf1b781a",
		ManagerExtendedInfo{
			Etag: to.StringPtr("674ab9df-af56-4c5c-a5ca-2bddcf1b781a"),
			Properties: &ManagerExtendedInfoProperties{
				Algorithm:    to.StringPtr("SHA256"),
				IntegrityKey: to.StringPtr("BIl+RHqO8PZ6DRvuXTTK7g=="),
			},
		},
		&ManagersUpdateExtendedInfoOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagerExtendedInfo.ID == nil {
		t.Fatal("ManagerExtendedInfo.ID should not be nil!")
	}
}

func TestManagers_ListFeatureSupportStatus(t *testing.T) {
	// From example ManagersListFeatureSupportStatus
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListFeatureSupportStatus(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&ManagersListFeatureSupportStatusOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagers_GetActivationKey(t *testing.T) {
	// From example ManagersGetActivationKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagersClient(con,
		"d3ebfe71-b7a9-4c57-92b9-68a2afde4de5")
	_, err := client.GetActivationKey(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&ManagersGetActivationKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagers_GetPublicEncryptionKey(t *testing.T) {
	// From example ManagersGetPublicEncryptionKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagersClient(con,
		"d3ebfe71-b7a9-4c57-92b9-68a2afde4de5")
	_, err := client.GetPublicEncryptionKey(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&ManagersGetPublicEncryptionKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagers_ListMetrics(t *testing.T) {
	// From example ManagersListMetrics
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListMetrics(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		"name/value%20eq%20'PrimaryStorageTieredUsed'%20and%20timeGrain%20eq%20'PT1H'%20and%20startTime%20ge%20'2017-06-17T18:30:00Z'%20and%20endTime%20le%20'2017-06-21T18:30:00Z'%20and%20category%20eq%20'CapacityUtilization'",
		&ManagersListMetricsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagers_ListMetricDefinition(t *testing.T) {
	// From example ManagersListMetricDefinition
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListMetricDefinition(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&ManagersListMetricDefinitionOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagers_RegenerateActivationKey(t *testing.T) {
	// From example ManagersRegenerateActivationKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.RegenerateActivationKey(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest2",
		&ManagersRegenerateActivationKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccessControlRecords_ListByManager(t *testing.T) {
	// From example AccessControlRecordsListByManager
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessControlRecordsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListByManager(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&AccessControlRecordsListByManagerOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccessControlRecords_Get(t *testing.T) {
	// From example AccessControlRecordsGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessControlRecordsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"ACRForTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&AccessControlRecordsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AccessControlRecord.ID == nil {
		t.Fatal("AccessControlRecord.ID should not be nil!")
	}
}

func TestAccessControlRecords_CreateOrUpdate(t *testing.T) {
	// From example AccessControlRecordsCreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessControlRecordsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"ACRForTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		AccessControlRecord{
			Properties: &AccessControlRecordProperties{
				InitiatorName: to.StringPtr("iqn.2017-06.com.contoso:ForTest"),
			},
		},
		&AccessControlRecordsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.AccessControlRecord.ID == nil {
		t.Fatal("AccessControlRecord.ID should not be nil!")
	}
}

func TestAccessControlRecords_Delete(t *testing.T) {
	// From example AccessControlRecordsDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessControlRecordsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"ACRForTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&AccessControlRecordsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestAlerts_ListByManager(t *testing.T) {
	// From example AlertsListByManager
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAlertsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.ListByManager("ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&AlertsListByManagerOptions{Filter: to.StringPtr("status%20eq%20'Active'%20and%20appearedOnTime%20ge%20'2017-06-09T18:30:00Z'%20and%20appearedOnTime%20le%20'2017-06-19T18:30:00Z'%20and%20sourceType%20eq%20'Device'%20and%20sourceName%20eq%20'Device05ForSDKTest'")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Alert.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Alert.ID should not be nil!")
			}
		}
	}
}

func TestAlerts_Clear(t *testing.T) {
	// From example AlertsClear
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAlertsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.Clear(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		ClearAlertRequest{
			Alerts: []*string{
				to.StringPtr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.StorSimple/managers/ManagerForSDKTest1/devices/Device05ForSDKTest/alerts/308b5bd2-824b-436f-840e-44bde075ef33")},
		},
		&AlertsClearOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAlerts_SendTestEmail(t *testing.T) {
	// From example AlertsSendTestEmail
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAlertsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.SendTestEmail(ctx,
		"Device05ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		SendTestAlertEmailRequest{
			EmailList: []*string{
				to.StringPtr("testemailid@contoso.com")},
		},
		&AlertsSendTestEmailOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBandwidthSettings_ListByManager(t *testing.T) {
	// From example BandwidthSettingsListByManager
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBandwidthSettingsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListByManager(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&BandwidthSettingsListByManagerOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBandwidthSettings_Get(t *testing.T) {
	// From example BandwidthSettingsGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBandwidthSettingsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"bandwidthSetting1",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&BandwidthSettingsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BandwidthSetting.ID == nil {
		t.Fatal("BandwidthSetting.ID should not be nil!")
	}
}

func TestBandwidthSettings_CreateOrUpdate(t *testing.T) {
	// From example BandwidthSettingsCreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBandwidthSettingsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"BWSForTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		BandwidthSetting{
			Properties: &BandwidthRateSettingProperties{
				Schedules: []*BandwidthSchedule{
					{
						Days: []*DayOfWeek{
							DayOfWeekSaturday.ToPtr(),
							DayOfWeekSunday.ToPtr()},
						RateInMbps: to.Int32Ptr(10),
						Start: &Time{
							Hours:   to.Int32Ptr(10),
							Minutes: to.Int32Ptr(0),
							Seconds: to.Int32Ptr(0),
						},
						Stop: &Time{
							Hours:   to.Int32Ptr(20),
							Minutes: to.Int32Ptr(0),
							Seconds: to.Int32Ptr(0),
						},
					}},
			},
		},
		&BandwidthSettingsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BandwidthSetting.ID == nil {
		t.Fatal("BandwidthSetting.ID should not be nil!")
	}
}

func TestBandwidthSettings_Delete(t *testing.T) {
	// From example BandwidthSettingsDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBandwidthSettingsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"BWSForTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&BandwidthSettingsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestCloudAppliances_ListSupportedConfigurations(t *testing.T) {
	// From example CloudAppliancesListSupportedConfigurations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCloudAppliancesClient(con,
		"d3ebfe71-b7a9-4c57-92b9-68a2afde4de5")
	_, err := client.ListSupportedConfigurations(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&CloudAppliancesListSupportedConfigurationsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCloudAppliances_Provision(t *testing.T) {
	// From example CloudAppliancesProvision
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCloudAppliancesClient(con,
		"d3ebfe71-b7a9-4c57-92b9-68a2afde4de5")
	poller, err := client.BeginProvision(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		CloudAppliance{
			Name:        to.StringPtr("sca07forsdktest"),
			ModelNumber: to.StringPtr("8020"),
			VnetRegion:  to.StringPtr("West US"),
		},
		&CloudAppliancesBeginProvisionOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDevices_Configure(t *testing.T) {
	// From example DevicesConfigure
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginConfigure(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		ConfigureDeviceRequest{
			Properties: &ConfigureDeviceRequestProperties{
				CurrentDeviceName: to.StringPtr("Device001ForSDKTest"),
				FriendlyName:      to.StringPtr("Device001ForSDKTest"),
				NetworkInterfaceData0Settings: &NetworkInterfaceData0Settings{
					ControllerOneIP:  to.StringPtr("10.168.220.228"),
					ControllerZeroIP: to.StringPtr("10.168.220.227"),
				},
				TimeZone: to.StringPtr("Pacific Standard Time"),
			},
		},
		&DevicesBeginConfigureOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDevices_ListByManager(t *testing.T) {
	// From example DevicesListByManager
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListByManager(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&DevicesListByManagerOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDevices_Get(t *testing.T) {
	// From example DevicesGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"Device001ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&DevicesGetOptions{Expand: to.StringPtr("details")})
	if err != nil {
		t.Fatal(err)
	}
	if res.Device.ID == nil {
		t.Fatal("Device.ID should not be nil!")
	}
}

func TestDevices_Delete(t *testing.T) {
	// From example DevicesDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"Device001ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&DevicesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDevices_Update(t *testing.T) {
	// From example DevicesUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Update(ctx,
		"Device001ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		DevicePatch{
			Properties: &DevicePatchProperties{
				DeviceDescription: to.StringPtr("updated device description"),
			},
		},
		&DevicesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Device.ID == nil {
		t.Fatal("Device.ID should not be nil!")
	}
}

func TestDevices_AuthorizeForServiceEncryptionKeyRollover(t *testing.T) {
	// From example DevicesAuthorizeForServiceEncryptionKeyRollover
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.AuthorizeForServiceEncryptionKeyRollover(ctx,
		"Device05ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&DevicesAuthorizeForServiceEncryptionKeyRolloverOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDevices_Deactivate(t *testing.T) {
	// From example DevicesDeactivate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDeactivate(ctx,
		"Device001ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&DevicesBeginDeactivateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDevices_InstallUpdates(t *testing.T) {
	// From example DevicesInstallUpdates
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginInstallUpdates(ctx,
		"sugattdeviceforSDK",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&DevicesBeginInstallUpdatesOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDevices_ListFailoverSets(t *testing.T) {
	// From example DevicesListFailoverSets
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListFailoverSets(ctx,
		"Device05ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&DevicesListFailoverSetsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDevices_ListMetrics(t *testing.T) {
	// From example DevicesListMetrics
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListMetrics(ctx,
		"Device05ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		"name/value%20eq%20'PrimaryStorageTieredUsed'%20and%20timeGrain%20eq%20'PT1H'%20and%20startTime%20ge%20'2017-06-17T18:30:00Z'%20and%20endTime%20le%20'2017-06-21T18:30:00Z'%20and%20category%20eq%20'CapacityUtilization'",
		&DevicesListMetricsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDevices_ListMetricDefinition(t *testing.T) {
	// From example DevicesListMetricDefinition
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListMetricDefinition(ctx,
		"Device05ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&DevicesListMetricDefinitionOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDevices_ScanForUpdates(t *testing.T) {
	// From example DevicesScanForUpdates
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginScanForUpdates(ctx,
		"sugattdeviceforSDK",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&DevicesBeginScanForUpdatesOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDevices_GetUpdateSummary(t *testing.T) {
	// From example DevicesGetUpdateSummary
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.GetUpdateSummary(ctx,
		"sugattdeviceforSDK",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&DevicesGetUpdateSummaryOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Updates.ID == nil {
		t.Fatal("Updates.ID should not be nil!")
	}
}

func TestDevices_Failover(t *testing.T) {
	// From example DevicesFailover
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginFailover(ctx,
		"Device05ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		FailoverRequest{
			TargetDeviceID: to.StringPtr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.StorSimple/managers/ManagerForSDKTest1/devices/jemdeviceforsdk"),
			VolumeContainers: []*string{
				to.StringPtr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.StorSimple/managers/ManagerForSDKTest1/devices/Device05ForSDKTest/volumeContainers/vcforsdktest")},
		},
		&DevicesBeginFailoverOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDevices_ListFailoverTargets(t *testing.T) {
	// From example DevicesListFailoverTargets
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListFailoverTargets(ctx,
		"Device05ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		ListFailoverTargetsRequest{
			VolumeContainers: []*string{
				to.StringPtr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.StorSimple/managers/ManagerForSDKTest1/devices/Device05ForSDKTest/volumeContainers/vcforsdktest")},
		},
		&DevicesListFailoverTargetsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDeviceSettings_GetAlertSettings(t *testing.T) {
	// From example DeviceSettingsGetAlertSettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeviceSettingsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.GetAlertSettings(ctx,
		"Device05ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&DeviceSettingsGetAlertSettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AlertSettings.ID == nil {
		t.Fatal("AlertSettings.ID should not be nil!")
	}
}

func TestDeviceSettings_CreateOrUpdateAlertSettings(t *testing.T) {
	// From example DeviceSettingsCreateOrUpdateAlertSettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeviceSettingsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreateOrUpdateAlertSettings(ctx,
		"Device05ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		AlertSettings{
			Properties: &AlertNotificationProperties{
				AdditionalRecipientEmailList: []*string{},
				AlertNotificationCulture:     to.StringPtr("en-US"),
				EmailNotification:            AlertEmailNotificationStatusEnabled.ToPtr(),
				NotificationToServiceOwners:  AlertEmailNotificationStatusEnabled.ToPtr(),
			},
		},
		&DeviceSettingsBeginCreateOrUpdateAlertSettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.AlertSettings.ID == nil {
		t.Fatal("AlertSettings.ID should not be nil!")
	}
}

func TestDeviceSettings_GetNetworkSettings(t *testing.T) {
	// From example DeviceSettingsGetNetworkSettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeviceSettingsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.GetNetworkSettings(ctx,
		"Device05ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&DeviceSettingsGetNetworkSettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkSettings.ID == nil {
		t.Fatal("NetworkSettings.ID should not be nil!")
	}
}

func TestDeviceSettings_UpdateNetworkSettings(t *testing.T) {
	// From example DeviceSettingsUpdateNetworkSettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeviceSettingsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginUpdateNetworkSettings(ctx,
		"Device05ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		NetworkSettingsPatch{
			Properties: &NetworkSettingsPatchProperties{
				DNSSettings: &DNSSettings{
					PrimaryDNSServer: to.StringPtr("10.171.65.60"),
					SecondaryDNSServers: []*string{
						to.StringPtr("8.8.8.8")},
				},
			},
		},
		&DeviceSettingsBeginUpdateNetworkSettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkSettings.ID == nil {
		t.Fatal("NetworkSettings.ID should not be nil!")
	}
}

func TestDeviceSettings_GetSecuritySettings(t *testing.T) {
	// From example DeviceSettingsGetSecuritySettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeviceSettingsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.GetSecuritySettings(ctx,
		"Device05ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&DeviceSettingsGetSecuritySettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SecuritySettings.ID == nil {
		t.Fatal("SecuritySettings.ID should not be nil!")
	}
}

func TestDeviceSettings_UpdateSecuritySettings(t *testing.T) {
	// From example DeviceSettingsUpdateSecuritySettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeviceSettingsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginUpdateSecuritySettings(ctx,
		"Device05ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		SecuritySettingsPatch{
			Properties: &SecuritySettingsPatchProperties{
				ChapSettings: &ChapSettings{
					InitiatorSecret: &AsymmetricEncryptedSecret{
						EncryptionAlgorithm:      EncryptionAlgorithmRSAESPKCS1V15.ToPtr(),
						EncryptionCertThumbprint: to.StringPtr("A872A2DF196AC7682EE24791E7DE2E2A360F5926"),
						Value:                    to.StringPtr("V/uVfWk5OcXfMC0HvUV89o9+cmF636jBnqhFM1pD/zHhmh8Z1KB5/LhVV3T53uGjIlKL3wjhwg+9NIQrIbYuKhl/r8jSftSSH+WqUnQHTRDWazjPAeMu6ozrL5RYzP1h5mgw7XtidZPaaV9ae/uF1KQPkK6TIARaOTdr8I/BLWUg7WdDrfARNYHnW6ezXek1M9Qhv1sL9fZY+JrGB58LF6D2aC2Xjed4K4Jk6v2T1ieneNV27uIdnt21TajuM7w90UlRiVZJZtq/KdEUfqI28C7VoUdcXluAwzR95Ho8hmyIJDqeW3/Wxymdjv+Rctwqtmcka9i2G85Hj8SVV3g4kA=="),
					},
					InitiatorUser: to.StringPtr("test-initiator-user"),
					TargetSecret: &AsymmetricEncryptedSecret{
						EncryptionAlgorithm:      EncryptionAlgorithmRSAESPKCS1V15.ToPtr(),
						EncryptionCertThumbprint: to.StringPtr("A872A2DF196AC7682EE24791E7DE2E2A360F5926"),
						Value:                    to.StringPtr("OTR4uwVpy+pf0zthnCIAUXurC8NdSh8RpRG5GWL9TSv4WtkVmpeU/U2A4vjkrchfQOzI1x+uooWikWW9txwwQOM+/N3NG44+/dlHoaEe7AxjmItCKhNj8K2RM6D1mb45wicbF/M4uanuXnGXuT+JmZ+1Lcy2k1GXsk67ejplz2K08h37B+oIW85qMUHLdKuuQlAA/fFS+q6qMti3j2Q8Fr+Sh4U76/2AZVkKRtFeqPB1QhC12dFx6TFoZJkMFzdQz4WNvWVelIK2McKNnOiH0/Z5lAXC7164uzReAoTEfqoNU7qqqRrHhsdwWPu6jbeUn8BQnr7A/X6NWvgeax+HGA=="),
					},
					TargetUser: to.StringPtr("test-target-user"),
				},
				DeviceAdminPassword: &AsymmetricEncryptedSecret{
					EncryptionAlgorithm:      EncryptionAlgorithmRSAESPKCS1V15.ToPtr(),
					EncryptionCertThumbprint: to.StringPtr("A872A2DF196AC7682EE24791E7DE2E2A360F5926"),
					Value:                    to.StringPtr("<value>"),
				},
				RemoteManagementSettings: &RemoteManagementSettingsPatch{
					RemoteManagementMode: RemoteManagementModeConfigurationHTTPSAndHTTPEnabled.ToPtr(),
				},
				SnapshotPassword: &AsymmetricEncryptedSecret{
					EncryptionAlgorithm:      EncryptionAlgorithmRSAESPKCS1V15.ToPtr(),
					EncryptionCertThumbprint: to.StringPtr("A872A2DF196AC7682EE24791E7DE2E2A360F5926"),
					Value:                    to.StringPtr("<value>"),
				},
			},
		},
		&DeviceSettingsBeginUpdateSecuritySettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SecuritySettings.ID == nil {
		t.Fatal("SecuritySettings.ID should not be nil!")
	}
}

func TestDeviceSettings_SyncRemotemanagementCertificate(t *testing.T) {
	// From example DeviceSettingsSyncRemotemanagementCertificate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeviceSettingsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginSyncRemotemanagementCertificate(ctx,
		"Device05ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&DeviceSettingsBeginSyncRemotemanagementCertificateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDeviceSettings_GetTimeSettings(t *testing.T) {
	// From example DeviceSettingsGetTimeSettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeviceSettingsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.GetTimeSettings(ctx,
		"Device05ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&DeviceSettingsGetTimeSettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TimeSettings.ID == nil {
		t.Fatal("TimeSettings.ID should not be nil!")
	}
}

func TestDeviceSettings_CreateOrUpdateTimeSettings(t *testing.T) {
	// From example DeviceSettingsCreateOrUpdateTimeSettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeviceSettingsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreateOrUpdateTimeSettings(ctx,
		"Device05ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		TimeSettings{
			Properties: &TimeSettingsProperties{
				PrimaryTimeServer: to.StringPtr("time.windows.com"),
				SecondaryTimeServer: []*string{
					to.StringPtr("8.8.8.8")},
				TimeZone: to.StringPtr("Pacific Standard Time"),
			},
		},
		&DeviceSettingsBeginCreateOrUpdateTimeSettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.TimeSettings.ID == nil {
		t.Fatal("TimeSettings.ID should not be nil!")
	}
}

func TestBackupPolicies_ListByDevice(t *testing.T) {
	// From example BackupPoliciesListByDevice
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupPoliciesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListByDevice(ctx,
		"Device05ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&BackupPoliciesListByDeviceOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackupPolicies_Get(t *testing.T) {
	// From example BackupPoliciesGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupPoliciesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"Device05ForSDKTest",
		"BkUpPolicy01ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&BackupPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BackupPolicy.ID == nil {
		t.Fatal("BackupPolicy.ID should not be nil!")
	}
}

func TestBackupPolicies_CreateOrUpdate(t *testing.T) {
	// From example BackupPoliciesCreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupPoliciesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Device05ForSDKTest",
		"BkUpPolicy01ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		BackupPolicy{
			BaseModel: BaseModel{
				Kind: to.StringPtr("Series8000"),
			},
			Properties: &BackupPolicyProperties{
				VolumeIDs: []*string{
					to.StringPtr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.StorSimple/managers/ManagerForSDKTest1/devices/Device05ForSDKTest/volumeContainers/volumeContainerForSDKTest/volumes/Clonedvolume1"),
					to.StringPtr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.StorSimple/managers/ManagerForSDKTest1/devices/Device05ForSDKTest/volumeContainers/volumeContainerForSDKTest/volumes/volume1")},
			},
		},
		&BackupPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BackupPolicy.ID == nil {
		t.Fatal("BackupPolicy.ID should not be nil!")
	}
}

func TestBackupPolicies_Delete(t *testing.T) {
	// From example BackupPoliciesDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupPoliciesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"Device05ForSDKTest",
		"BkUpPolicy01ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&BackupPoliciesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackupPolicies_BackupNow(t *testing.T) {
	// From example BackupPoliciesBackupNow
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupPoliciesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginBackupNow(ctx,
		"Device05ForSDKTest",
		"BkUpPolicy01ForSDKTest",
		"CloudSnapshot",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&BackupPoliciesBeginBackupNowOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackupSchedules_ListByBackupPolicy(t *testing.T) {
	// From example BackupSchedulesListByBackupPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupSchedulesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListByBackupPolicy(ctx,
		"Device05ForSDKTest",
		"BkUpPolicy01ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&BackupSchedulesListByBackupPolicyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackupSchedules_Get(t *testing.T) {
	// From example BackupSchedulesGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupSchedulesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"Device05ForSDKTest",
		"BkUpPolicy01ForSDKTest",
		"schedule2",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&BackupSchedulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BackupSchedule.ID == nil {
		t.Fatal("BackupSchedule.ID should not be nil!")
	}
}

func TestBackupSchedules_CreateOrUpdate(t *testing.T) {
	// From example BackupSchedulesCreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupSchedulesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Device05ForSDKTest",
		"BkUpPolicy01ForSDKTest",
		"schedule2",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		BackupSchedule{
			BaseModel: BaseModel{
				Kind: to.StringPtr("Series8000"),
			},
			Properties: &BackupScheduleProperties{
				BackupType:     BackupTypeCloudSnapshot.ToPtr(),
				RetentionCount: to.Int64Ptr(1),
				ScheduleRecurrence: &ScheduleRecurrence{
					RecurrenceType:  RecurrenceTypeWeekly.ToPtr(),
					RecurrenceValue: to.Int32Ptr(1),
					WeeklyDaysList: []*DayOfWeek{
						DayOfWeekFriday.ToPtr(),
						DayOfWeekThursday.ToPtr(),
						DayOfWeekMonday.ToPtr()},
				},
				ScheduleStatus: ScheduleStatusEnabled.ToPtr(),
				StartTime:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-24T01:00:00Z"); return t }()),
			},
		},
		&BackupSchedulesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BackupSchedule.ID == nil {
		t.Fatal("BackupSchedule.ID should not be nil!")
	}
}

func TestBackupSchedules_Delete(t *testing.T) {
	// From example BackupSchedulesDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupSchedulesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"Device05ForSDKTest",
		"BkUpPolicy01ForSDKTest",
		"schedule1",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&BackupSchedulesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackups_ListByDevice(t *testing.T) {
	// From example BackupsListByDevice
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.ListByDevice("Device05ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&BackupsListByDeviceOptions{Filter: to.StringPtr("createdTime%20ge%20'2017-06-22T18:30:00Z'%20and%20backupPolicyId%20eq%20'%2Fsubscriptions%2F4385cf00-2d3a-425a-832f-f4285b1c9dce%2FresourceGroups%2FResourceGroupForSDKTest%2Fproviders%2FMicrosoft.StorSimple%2Fmanagers%2FManagerForSDKTest1%2Fdevices%2FDevice05ForSDKTest%2FbackupPolicies%2FBkUpPolicy01ForSDKTest'")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Backup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Backup.ID should not be nil!")
			}
		}
	}
}

func TestBackups_Delete(t *testing.T) {
	// From example BackupsDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"Device05ForSDKTest",
		"880e1774-94a8-4f3e-85e6-a61e6b94a8b7",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&BackupsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackups_Clone(t *testing.T) {
	// From example BackupsClone
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginClone(ctx,
		"Device05ForSDKTest",
		"880e1774-94a8-4f3e-85e6-a61e6b94a8b7",
		"7e115577-4a3b-4921-bfd4-ee5a1b9bcbb5_0000000000000000",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		CloneRequest{
			BackupElement: &BackupElement{
				ElementID:         to.StringPtr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.StorSimple/managers/ManagerForSDKTest1/devices/Device05ForSDKTest/backups/880e1774-94a8-4f3e-85e6-a61e6b94a8b7/elements/7e115577-4a3b-4921-bfd4-ee5a1b9bcbb5_0000000000000000"),
				ElementName:       to.StringPtr("7e115577-4a3b-4921-bfd4-ee5a1b9bcbb5_0000000000000000"),
				ElementType:       to.StringPtr("managers/devices/backups/elements"),
				SizeInBytes:       to.Int64Ptr(10737418240),
				VolumeContainerID: to.StringPtr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.StorSimple/managers/ManagerForSDKTest1/devices/Device05ForSDKTest/volumeContainers/volumeContainerForSDKTest"),
				VolumeName:        to.StringPtr("Clonedvolume1"),
				VolumeType:        VolumeTypeTiered.ToPtr(),
			},
			TargetAccessControlRecordIDs: []*string{
				to.StringPtr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.StorSimple/managers/ManagerForSDKTest1/accessControlRecords/ACR2")},
			TargetDeviceID:   to.StringPtr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.StorSimple/managers/ManagerForSDKTest1/devices/Device05ForSDKTest"),
			TargetVolumeName: to.StringPtr("ClonedClonedvolume1"),
		},
		&BackupsBeginCloneOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackups_Restore(t *testing.T) {
	// From example BackupsRestore
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginRestore(ctx,
		"Device05ForSDKTest",
		"880e1774-94a8-4f3e-85e6-a61e6b94a8b7",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&BackupsBeginRestoreOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestHardwareComponentGroups_ListByDevice(t *testing.T) {
	// From example HardwareComponentGroupsListByDevice
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHardwareComponentGroupsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListByDevice(ctx,
		"Device05ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&HardwareComponentGroupsListByDeviceOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestHardwareComponentGroups_ChangeControllerPowerState(t *testing.T) {
	// From example HardwareComponentGroupsChangeControllerPowerState
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHardwareComponentGroupsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginChangeControllerPowerState(ctx,
		"Device05ForSDKTest",
		"Controller0Components",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		ControllerPowerStateChangeRequest{
			Properties: &ControllerPowerStateChangeRequestProperties{
				Action:           ControllerPowerStateActionStart.ToPtr(),
				ActiveController: ControllerIDController0.ToPtr(),
				Controller0State: ControllerStatusOk.ToPtr(),
				Controller1State: ControllerStatusNotPresent.ToPtr(),
			},
		},
		&HardwareComponentGroupsBeginChangeControllerPowerStateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestJobs_ListByDevice(t *testing.T) {
	// From example JobsListByDevice
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.ListByDevice("Device05ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&JobsListByDeviceOptions{Filter: to.StringPtr("jobType%20eq%20'ManualBackup'")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Job.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Job.ID should not be nil!")
			}
		}
	}
}

func TestJobs_Get(t *testing.T) {
	// From example JobsGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"d3ebfe71-b7a9-4c57-92b9-68a2afde4de5")
	res, err := client.Get(ctx,
		"sca07forsdktest",
		"70a29339-de6d-48e8-b24f-e25ee6769a00",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&JobsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Job.ID == nil {
		t.Fatal("Job.ID should not be nil!")
	}
}

func TestJobs_Cancel(t *testing.T) {
	// From example JobsCancel
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCancel(ctx,
		"Device05ForSDKTest",
		"993db21d-101b-41af-9e12-f593d78b99e9",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&JobsBeginCancelOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestJobs_ListByManager(t *testing.T) {
	// From example JobsListByManager
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.ListByManager("ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&JobsListByManagerOptions{Filter: to.StringPtr("jobType%20eq%20'FailoverVolumeContainers'")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Job.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Job.ID should not be nil!")
			}
		}
	}
}

func TestVolumeContainers_ListByDevice(t *testing.T) {
	// From example VolumeContainersListByDevice
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumeContainersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListByDevice(ctx,
		"Device05ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&VolumeContainersListByDeviceOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVolumeContainers_Get(t *testing.T) {
	// From example VolumeContainersGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumeContainersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"Device05ForSDKTest",
		"VolumeContainerForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&VolumeContainersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VolumeContainer.ID == nil {
		t.Fatal("VolumeContainer.ID should not be nil!")
	}
}

func TestVolumeContainers_CreateOrUpdate(t *testing.T) {
	// From example VolumeContainersCreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumeContainersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Device05ForSDKTest",
		"VolumeContainerForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		VolumeContainer{
			Properties: &VolumeContainerProperties{
				BandwidthSettingID: to.StringPtr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.StorSimple/managers/ManagerForSDKTest1/bandwidthSettings/bandwidthSetting1"),
				EncryptionKey: &AsymmetricEncryptedSecret{
					EncryptionAlgorithm:      EncryptionAlgorithmRSAESPKCS1V15.ToPtr(),
					EncryptionCertThumbprint: to.StringPtr("A872A2DF196AC7682EE24791E7DE2E2A360F5926"),
					Value:                    to.StringPtr("R//pyVLx/fn58ia098JiLgZB5RY7fVT+6o8a4fmsvjy+ls2UgJphMf25XVqEQCZnsp/5uxteN1M/9ArPIICdhM7M1+b/Ur7kJ0FH0ktxfk7CrPWWJLI4q20LZoduJGI56lREav1VpuLdqw5F9fRcq7zbfgPQ3B/SD0mfumNRiV+AnwbC6msfavIuWrhVDl9iSzEPE+zU06/kpsexnrS81yYT2QlVVUbvpY4F3zfH8TQPpAROTbv2pld6JO4eGOrZ5O1iOr6XCg2TY2W/jf+Ev4z5tqC9VWXE5kh65gjBfpWN0bDWXKekqEhor2crHAxZi4dybdY8Ok1MDWd1CSU8kw=="),
				},
				StorageAccountCredentialID: to.StringPtr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.StorSimple/managers/ManagerForSDKTest1/storageAccountCredentials/safortestrecording"),
			},
		},
		&VolumeContainersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VolumeContainer.ID == nil {
		t.Fatal("VolumeContainer.ID should not be nil!")
	}
}

func TestVolumeContainers_Delete(t *testing.T) {
	// From example VolumeContainersDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumeContainersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"Device05ForSDKTest",
		"VolumeContainerForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&VolumeContainersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVolumeContainers_ListMetrics(t *testing.T) {
	// From example VolumeContainersListMetrics
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumeContainersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListMetrics(ctx,
		"Device05ForSDKTest",
		"vcForOdataFilterTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		"name/value%20eq%20'CloudConsumedStorage'%20and%20timeGrain%20eq%20'PT1M'%20and%20startTime%20ge%20'2017-06-17T18:30:00Z'%20and%20endTime%20le%20'2017-06-21T18:30:00Z'%20and%20category%20eq%20'CapacityUtilization'",
		&VolumeContainersListMetricsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVolumeContainers_ListMetricDefinition(t *testing.T) {
	// From example VolumeContainersListMetricDefinition
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumeContainersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListMetricDefinition(ctx,
		"Device05ForSDKTest",
		"vcForOdataFilterTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&VolumeContainersListMetricDefinitionOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVolumes_ListByVolumeContainer(t *testing.T) {
	// From example VolumesListByVolumeContainer
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListByVolumeContainer(ctx,
		"Device05ForSDKTest",
		"volumeContainerForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&VolumesListByVolumeContainerOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVolumes_Get(t *testing.T) {
	// From example VolumesGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"Device05ForSDKTest",
		"VolumeContainerForSDKTest",
		"Volume1ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&VolumesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Volume.ID == nil {
		t.Fatal("Volume.ID should not be nil!")
	}
}

func TestVolumes_CreateOrUpdate(t *testing.T) {
	// From example VolumesCreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Device05ForSDKTest",
		"VolumeContainerForSDKTest",
		"Volume1ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		Volume{
			Properties: &VolumeProperties{
				AccessControlRecordIDs: []*string{
					to.StringPtr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.StorSimple/managers/ManagerForSDKTest1/accessControlRecords/ACR2")},
				MonitoringStatus: MonitoringStatusEnabled.ToPtr(),
				SizeInBytes:      to.Int64Ptr(5368709120),
				VolumeStatus:     VolumeStatusOffline.ToPtr(),
				VolumeType:       VolumeTypeTiered.ToPtr(),
			},
		},
		&VolumesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Volume.ID == nil {
		t.Fatal("Volume.ID should not be nil!")
	}
}

func TestVolumes_Delete(t *testing.T) {
	// From example VolumesDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"Device05ForSDKTest",
		"VolumeContainerForSDKTest",
		"Volume1ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&VolumesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVolumes_ListMetrics(t *testing.T) {
	// From example VolumesListMetrics
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListMetrics(ctx,
		"Device05ForSDKTest",
		"vcForOdataFilterTest",
		"CloneVolForSDKTest890836587",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		"name/value%20eq%20'PrimaryStorageTieredUsed'%20and%20timeGrain%20eq%20'PT1H'%20and%20startTime%20ge%20'2017-06-17T18:30:00Z'%20and%20endTime%20le%20'2017-06-21T18:30:00Z'%20and%20category%20eq%20'CapacityUtilization'",
		&VolumesListMetricsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVolumes_ListMetricDefinition(t *testing.T) {
	// From example VolumesListMetricDefinition
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListMetricDefinition(ctx,
		"Device05ForSDKTest",
		"vcForOdataFilterTest",
		"CloneVolForSDKTest890836587",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&VolumesListMetricDefinitionOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVolumes_ListByDevice(t *testing.T) {
	// From example VolumesListByDevice
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVolumesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListByDevice(ctx,
		"Device05ForSDKTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&VolumesListByDeviceOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestStorageAccountCredentials_ListByManager(t *testing.T) {
	// From example StorageAccountCredentialsListByManager
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageAccountCredentialsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListByManager(ctx,
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&StorageAccountCredentialsListByManagerOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestStorageAccountCredentials_Get(t *testing.T) {
	// From example StorageAccountCredentialsGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageAccountCredentialsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"SACForTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&StorageAccountCredentialsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StorageAccountCredential.ID == nil {
		t.Fatal("StorageAccountCredential.ID should not be nil!")
	}
}

func TestStorageAccountCredentials_CreateOrUpdate(t *testing.T) {
	// From example StorageAccountCredentialsCreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageAccountCredentialsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"SACForTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		StorageAccountCredential{
			Properties: &StorageAccountCredentialProperties{
				AccessKey: &AsymmetricEncryptedSecret{
					EncryptionAlgorithm:      EncryptionAlgorithmRSAESPKCS1V15.ToPtr(),
					EncryptionCertThumbprint: to.StringPtr("A872A2DF196AC7682EE24791E7DE2E2A360F5926"),
					Value:                    to.StringPtr("ATuJSkmrFk4h8r1jrZ4nd3nthLSddcguEO5QLO/NECUtTuB9kL4dNv3/jC4WOvFkeVr3x1UvfhlIeMmJBF1SMr6hR1JzD0xNU/TtQqUeXN7V3jk7I+2l67P9StuHWR6OMd3XOLwvznxOEQtEWpweDiobZU1ZiY03WafcGZFpV5j6tEoHeopoZ1J/GhPtkYmx+TqxzUN6qnir5rP3NSYiZciImP/qu8U9yUV/xpVRv39KvFc2Yr5SpKpMMRUj55XW10UnPer63M6KovF8X9Wi/fNnrZAs1Esl5XddZETGrW/e5B++VMJ6w0Q/uvPR+UBwrOU0804l0SzwdIe3qVVd0Q=="),
				},
				EndPoint:  to.StringPtr("blob.core.windows.net"),
				SSLStatus: SSLStatusEnabled.ToPtr(),
			},
		},
		&StorageAccountCredentialsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.StorageAccountCredential.ID == nil {
		t.Fatal("StorageAccountCredential.ID should not be nil!")
	}
}

func TestStorageAccountCredentials_Delete(t *testing.T) {
	// From example StorageAccountCredentialsDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageAccountCredentialsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"SACForTest",
		"ResourceGroupForSDKTest",
		"ManagerForSDKTest1",
		&StorageAccountCredentialsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
