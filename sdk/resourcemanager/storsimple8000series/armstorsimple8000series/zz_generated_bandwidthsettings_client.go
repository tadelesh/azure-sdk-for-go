//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstorsimple8000series

import (
	"context"
	"errors"
	"net/http"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// BandwidthSettingsClient contains the methods for the BandwidthSettings group.
// Don't use this type directly, use NewBandwidthSettingsClient() instead.
type BandwidthSettingsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewBandwidthSettingsClient creates a new instance of BandwidthSettingsClient with the specified values.
func NewBandwidthSettingsClient(con *arm.Connection, subscriptionID string) *BandwidthSettingsClient {
	return &BandwidthSettingsClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version), subscriptionID: subscriptionID}
}

// BeginCreateOrUpdate - Creates or updates the bandwidth setting
// If the operation fails it returns a generic error.
func (client *BandwidthSettingsClient) BeginCreateOrUpdate(ctx context.Context, bandwidthSettingName string, resourceGroupName string, managerName string, parameters BandwidthSetting, options *BandwidthSettingsBeginCreateOrUpdateOptions) (BandwidthSettingsCreateOrUpdatePollerResponse, error) {
	resp, err := client.createOrUpdate(ctx, bandwidthSettingName, resourceGroupName, managerName, parameters, options)
	if err != nil {
		return BandwidthSettingsCreateOrUpdatePollerResponse{}, err
	}
	result := BandwidthSettingsCreateOrUpdatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("BandwidthSettingsClient.CreateOrUpdate", "", resp, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return BandwidthSettingsCreateOrUpdatePollerResponse{}, err
	}
	result.Poller = &BandwidthSettingsCreateOrUpdatePoller{
		pt: pt,
	}
	return result, nil
}

// CreateOrUpdate - Creates or updates the bandwidth setting
// If the operation fails it returns a generic error.
func (client *BandwidthSettingsClient) createOrUpdate(ctx context.Context, bandwidthSettingName string, resourceGroupName string, managerName string, parameters BandwidthSetting, options *BandwidthSettingsBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, bandwidthSettingName, resourceGroupName, managerName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *BandwidthSettingsClient) createOrUpdateCreateRequest(ctx context.Context, bandwidthSettingName string, resourceGroupName string, managerName string, parameters BandwidthSetting, options *BandwidthSettingsBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/bandwidthSettings/{bandwidthSettingName}"
	if bandwidthSettingName == "" {
		return nil, errors.New("parameter bandwidthSettingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{bandwidthSettingName}", bandwidthSettingName)
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *BandwidthSettingsClient) createOrUpdateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// BeginDelete - Deletes the bandwidth setting
// If the operation fails it returns a generic error.
func (client *BandwidthSettingsClient) BeginDelete(ctx context.Context, bandwidthSettingName string, resourceGroupName string, managerName string, options *BandwidthSettingsBeginDeleteOptions) (BandwidthSettingsDeletePollerResponse, error) {
	resp, err := client.deleteOperation(ctx, bandwidthSettingName, resourceGroupName, managerName, options)
	if err != nil {
		return BandwidthSettingsDeletePollerResponse{}, err
	}
	result := BandwidthSettingsDeletePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("BandwidthSettingsClient.Delete", "", resp, client.pl, client.deleteHandleError)
	if err != nil {
		return BandwidthSettingsDeletePollerResponse{}, err
	}
	result.Poller = &BandwidthSettingsDeletePoller{
		pt: pt,
	}
	return result, nil
}

// Delete - Deletes the bandwidth setting
// If the operation fails it returns a generic error.
func (client *BandwidthSettingsClient) deleteOperation(ctx context.Context, bandwidthSettingName string, resourceGroupName string, managerName string, options *BandwidthSettingsBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, bandwidthSettingName, resourceGroupName, managerName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *BandwidthSettingsClient) deleteCreateRequest(ctx context.Context, bandwidthSettingName string, resourceGroupName string, managerName string, options *BandwidthSettingsBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/bandwidthSettings/{bandwidthSettingName}"
	if bandwidthSettingName == "" {
		return nil, errors.New("parameter bandwidthSettingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{bandwidthSettingName}", bandwidthSettingName)
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *BandwidthSettingsClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// Get - Returns the properties of the specified bandwidth setting name.
// If the operation fails it returns a generic error.
func (client *BandwidthSettingsClient) Get(ctx context.Context, bandwidthSettingName string, resourceGroupName string, managerName string, options *BandwidthSettingsGetOptions) (BandwidthSettingsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, bandwidthSettingName, resourceGroupName, managerName, options)
	if err != nil {
		return BandwidthSettingsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return BandwidthSettingsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return BandwidthSettingsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *BandwidthSettingsClient) getCreateRequest(ctx context.Context, bandwidthSettingName string, resourceGroupName string, managerName string, options *BandwidthSettingsGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/bandwidthSettings/{bandwidthSettingName}"
	if bandwidthSettingName == "" {
		return nil, errors.New("parameter bandwidthSettingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{bandwidthSettingName}", bandwidthSettingName)
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *BandwidthSettingsClient) getHandleResponse(resp *http.Response) (BandwidthSettingsGetResponse, error) {
	result := BandwidthSettingsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BandwidthSetting); err != nil {
		return BandwidthSettingsGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *BandwidthSettingsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// ListByManager - Retrieves all the bandwidth setting in a manager.
// If the operation fails it returns a generic error.
func (client *BandwidthSettingsClient) ListByManager(ctx context.Context, resourceGroupName string, managerName string, options *BandwidthSettingsListByManagerOptions) (BandwidthSettingsListByManagerResponse, error) {
	req, err := client.listByManagerCreateRequest(ctx, resourceGroupName, managerName, options)
	if err != nil {
		return BandwidthSettingsListByManagerResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return BandwidthSettingsListByManagerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return BandwidthSettingsListByManagerResponse{}, client.listByManagerHandleError(resp)
	}
	return client.listByManagerHandleResponse(resp)
}

// listByManagerCreateRequest creates the ListByManager request.
func (client *BandwidthSettingsClient) listByManagerCreateRequest(ctx context.Context, resourceGroupName string, managerName string, options *BandwidthSettingsListByManagerOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/bandwidthSettings"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByManagerHandleResponse handles the ListByManager response.
func (client *BandwidthSettingsClient) listByManagerHandleResponse(resp *http.Response) (BandwidthSettingsListByManagerResponse, error) {
	result := BandwidthSettingsListByManagerResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BandwidthSettingList); err != nil {
		return BandwidthSettingsListByManagerResponse{}, err
	}
	return result, nil
}

// listByManagerHandleError handles the ListByManager error response.
func (client *BandwidthSettingsClient) listByManagerHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}
