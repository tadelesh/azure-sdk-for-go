//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstorsimple8000series

import (
	"context"
	"errors"
	"net/http"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// DeviceSettingsClient contains the methods for the DeviceSettings group.
// Don't use this type directly, use NewDeviceSettingsClient() instead.
type DeviceSettingsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewDeviceSettingsClient creates a new instance of DeviceSettingsClient with the specified values.
func NewDeviceSettingsClient(con *arm.Connection, subscriptionID string) *DeviceSettingsClient {
	return &DeviceSettingsClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version), subscriptionID: subscriptionID}
}

// BeginCreateOrUpdateAlertSettings - Creates or updates the alert settings of the specified device.
// If the operation fails it returns a generic error.
func (client *DeviceSettingsClient) BeginCreateOrUpdateAlertSettings(ctx context.Context, deviceName string, resourceGroupName string, managerName string, parameters AlertSettings, options *DeviceSettingsBeginCreateOrUpdateAlertSettingsOptions) (DeviceSettingsCreateOrUpdateAlertSettingsPollerResponse, error) {
	resp, err := client.createOrUpdateAlertSettings(ctx, deviceName, resourceGroupName, managerName, parameters, options)
	if err != nil {
		return DeviceSettingsCreateOrUpdateAlertSettingsPollerResponse{}, err
	}
	result := DeviceSettingsCreateOrUpdateAlertSettingsPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("DeviceSettingsClient.CreateOrUpdateAlertSettings", "", resp, client.pl, client.createOrUpdateAlertSettingsHandleError)
	if err != nil {
		return DeviceSettingsCreateOrUpdateAlertSettingsPollerResponse{}, err
	}
	result.Poller = &DeviceSettingsCreateOrUpdateAlertSettingsPoller{
		pt: pt,
	}
	return result, nil
}

// CreateOrUpdateAlertSettings - Creates or updates the alert settings of the specified device.
// If the operation fails it returns a generic error.
func (client *DeviceSettingsClient) createOrUpdateAlertSettings(ctx context.Context, deviceName string, resourceGroupName string, managerName string, parameters AlertSettings, options *DeviceSettingsBeginCreateOrUpdateAlertSettingsOptions) (*http.Response, error) {
	req, err := client.createOrUpdateAlertSettingsCreateRequest(ctx, deviceName, resourceGroupName, managerName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.createOrUpdateAlertSettingsHandleError(resp)
	}
	return resp, nil
}

// createOrUpdateAlertSettingsCreateRequest creates the CreateOrUpdateAlertSettings request.
func (client *DeviceSettingsClient) createOrUpdateAlertSettingsCreateRequest(ctx context.Context, deviceName string, resourceGroupName string, managerName string, parameters AlertSettings, options *DeviceSettingsBeginCreateOrUpdateAlertSettingsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/alertSettings/default"
	if deviceName == "" {
		return nil, errors.New("parameter deviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceName}", deviceName)
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// createOrUpdateAlertSettingsHandleError handles the CreateOrUpdateAlertSettings error response.
func (client *DeviceSettingsClient) createOrUpdateAlertSettingsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// BeginCreateOrUpdateTimeSettings - Creates or updates the time settings of the specified device.
// If the operation fails it returns a generic error.
func (client *DeviceSettingsClient) BeginCreateOrUpdateTimeSettings(ctx context.Context, deviceName string, resourceGroupName string, managerName string, parameters TimeSettings, options *DeviceSettingsBeginCreateOrUpdateTimeSettingsOptions) (DeviceSettingsCreateOrUpdateTimeSettingsPollerResponse, error) {
	resp, err := client.createOrUpdateTimeSettings(ctx, deviceName, resourceGroupName, managerName, parameters, options)
	if err != nil {
		return DeviceSettingsCreateOrUpdateTimeSettingsPollerResponse{}, err
	}
	result := DeviceSettingsCreateOrUpdateTimeSettingsPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("DeviceSettingsClient.CreateOrUpdateTimeSettings", "", resp, client.pl, client.createOrUpdateTimeSettingsHandleError)
	if err != nil {
		return DeviceSettingsCreateOrUpdateTimeSettingsPollerResponse{}, err
	}
	result.Poller = &DeviceSettingsCreateOrUpdateTimeSettingsPoller{
		pt: pt,
	}
	return result, nil
}

// CreateOrUpdateTimeSettings - Creates or updates the time settings of the specified device.
// If the operation fails it returns a generic error.
func (client *DeviceSettingsClient) createOrUpdateTimeSettings(ctx context.Context, deviceName string, resourceGroupName string, managerName string, parameters TimeSettings, options *DeviceSettingsBeginCreateOrUpdateTimeSettingsOptions) (*http.Response, error) {
	req, err := client.createOrUpdateTimeSettingsCreateRequest(ctx, deviceName, resourceGroupName, managerName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.createOrUpdateTimeSettingsHandleError(resp)
	}
	return resp, nil
}

// createOrUpdateTimeSettingsCreateRequest creates the CreateOrUpdateTimeSettings request.
func (client *DeviceSettingsClient) createOrUpdateTimeSettingsCreateRequest(ctx context.Context, deviceName string, resourceGroupName string, managerName string, parameters TimeSettings, options *DeviceSettingsBeginCreateOrUpdateTimeSettingsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/timeSettings/default"
	if deviceName == "" {
		return nil, errors.New("parameter deviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceName}", deviceName)
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// createOrUpdateTimeSettingsHandleError handles the CreateOrUpdateTimeSettings error response.
func (client *DeviceSettingsClient) createOrUpdateTimeSettingsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// GetAlertSettings - Gets the alert settings of the specified device.
// If the operation fails it returns a generic error.
func (client *DeviceSettingsClient) GetAlertSettings(ctx context.Context, deviceName string, resourceGroupName string, managerName string, options *DeviceSettingsGetAlertSettingsOptions) (DeviceSettingsGetAlertSettingsResponse, error) {
	req, err := client.getAlertSettingsCreateRequest(ctx, deviceName, resourceGroupName, managerName, options)
	if err != nil {
		return DeviceSettingsGetAlertSettingsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DeviceSettingsGetAlertSettingsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DeviceSettingsGetAlertSettingsResponse{}, client.getAlertSettingsHandleError(resp)
	}
	return client.getAlertSettingsHandleResponse(resp)
}

// getAlertSettingsCreateRequest creates the GetAlertSettings request.
func (client *DeviceSettingsClient) getAlertSettingsCreateRequest(ctx context.Context, deviceName string, resourceGroupName string, managerName string, options *DeviceSettingsGetAlertSettingsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/alertSettings/default"
	if deviceName == "" {
		return nil, errors.New("parameter deviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceName}", deviceName)
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getAlertSettingsHandleResponse handles the GetAlertSettings response.
func (client *DeviceSettingsClient) getAlertSettingsHandleResponse(resp *http.Response) (DeviceSettingsGetAlertSettingsResponse, error) {
	result := DeviceSettingsGetAlertSettingsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AlertSettings); err != nil {
		return DeviceSettingsGetAlertSettingsResponse{}, err
	}
	return result, nil
}

// getAlertSettingsHandleError handles the GetAlertSettings error response.
func (client *DeviceSettingsClient) getAlertSettingsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// GetNetworkSettings - Gets the network settings of the specified device.
// If the operation fails it returns a generic error.
func (client *DeviceSettingsClient) GetNetworkSettings(ctx context.Context, deviceName string, resourceGroupName string, managerName string, options *DeviceSettingsGetNetworkSettingsOptions) (DeviceSettingsGetNetworkSettingsResponse, error) {
	req, err := client.getNetworkSettingsCreateRequest(ctx, deviceName, resourceGroupName, managerName, options)
	if err != nil {
		return DeviceSettingsGetNetworkSettingsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DeviceSettingsGetNetworkSettingsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DeviceSettingsGetNetworkSettingsResponse{}, client.getNetworkSettingsHandleError(resp)
	}
	return client.getNetworkSettingsHandleResponse(resp)
}

// getNetworkSettingsCreateRequest creates the GetNetworkSettings request.
func (client *DeviceSettingsClient) getNetworkSettingsCreateRequest(ctx context.Context, deviceName string, resourceGroupName string, managerName string, options *DeviceSettingsGetNetworkSettingsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/networkSettings/default"
	if deviceName == "" {
		return nil, errors.New("parameter deviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceName}", deviceName)
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getNetworkSettingsHandleResponse handles the GetNetworkSettings response.
func (client *DeviceSettingsClient) getNetworkSettingsHandleResponse(resp *http.Response) (DeviceSettingsGetNetworkSettingsResponse, error) {
	result := DeviceSettingsGetNetworkSettingsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.NetworkSettings); err != nil {
		return DeviceSettingsGetNetworkSettingsResponse{}, err
	}
	return result, nil
}

// getNetworkSettingsHandleError handles the GetNetworkSettings error response.
func (client *DeviceSettingsClient) getNetworkSettingsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// GetSecuritySettings - Returns the Security properties of the specified device name.
// If the operation fails it returns a generic error.
func (client *DeviceSettingsClient) GetSecuritySettings(ctx context.Context, deviceName string, resourceGroupName string, managerName string, options *DeviceSettingsGetSecuritySettingsOptions) (DeviceSettingsGetSecuritySettingsResponse, error) {
	req, err := client.getSecuritySettingsCreateRequest(ctx, deviceName, resourceGroupName, managerName, options)
	if err != nil {
		return DeviceSettingsGetSecuritySettingsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DeviceSettingsGetSecuritySettingsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DeviceSettingsGetSecuritySettingsResponse{}, client.getSecuritySettingsHandleError(resp)
	}
	return client.getSecuritySettingsHandleResponse(resp)
}

// getSecuritySettingsCreateRequest creates the GetSecuritySettings request.
func (client *DeviceSettingsClient) getSecuritySettingsCreateRequest(ctx context.Context, deviceName string, resourceGroupName string, managerName string, options *DeviceSettingsGetSecuritySettingsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/securitySettings/default"
	if deviceName == "" {
		return nil, errors.New("parameter deviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceName}", deviceName)
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getSecuritySettingsHandleResponse handles the GetSecuritySettings response.
func (client *DeviceSettingsClient) getSecuritySettingsHandleResponse(resp *http.Response) (DeviceSettingsGetSecuritySettingsResponse, error) {
	result := DeviceSettingsGetSecuritySettingsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SecuritySettings); err != nil {
		return DeviceSettingsGetSecuritySettingsResponse{}, err
	}
	return result, nil
}

// getSecuritySettingsHandleError handles the GetSecuritySettings error response.
func (client *DeviceSettingsClient) getSecuritySettingsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// GetTimeSettings - Gets the time settings of the specified device.
// If the operation fails it returns a generic error.
func (client *DeviceSettingsClient) GetTimeSettings(ctx context.Context, deviceName string, resourceGroupName string, managerName string, options *DeviceSettingsGetTimeSettingsOptions) (DeviceSettingsGetTimeSettingsResponse, error) {
	req, err := client.getTimeSettingsCreateRequest(ctx, deviceName, resourceGroupName, managerName, options)
	if err != nil {
		return DeviceSettingsGetTimeSettingsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DeviceSettingsGetTimeSettingsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DeviceSettingsGetTimeSettingsResponse{}, client.getTimeSettingsHandleError(resp)
	}
	return client.getTimeSettingsHandleResponse(resp)
}

// getTimeSettingsCreateRequest creates the GetTimeSettings request.
func (client *DeviceSettingsClient) getTimeSettingsCreateRequest(ctx context.Context, deviceName string, resourceGroupName string, managerName string, options *DeviceSettingsGetTimeSettingsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/timeSettings/default"
	if deviceName == "" {
		return nil, errors.New("parameter deviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceName}", deviceName)
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getTimeSettingsHandleResponse handles the GetTimeSettings response.
func (client *DeviceSettingsClient) getTimeSettingsHandleResponse(resp *http.Response) (DeviceSettingsGetTimeSettingsResponse, error) {
	result := DeviceSettingsGetTimeSettingsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.TimeSettings); err != nil {
		return DeviceSettingsGetTimeSettingsResponse{}, err
	}
	return result, nil
}

// getTimeSettingsHandleError handles the GetTimeSettings error response.
func (client *DeviceSettingsClient) getTimeSettingsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// BeginSyncRemotemanagementCertificate - sync Remote management Certificate between appliance and Service
// If the operation fails it returns a generic error.
func (client *DeviceSettingsClient) BeginSyncRemotemanagementCertificate(ctx context.Context, deviceName string, resourceGroupName string, managerName string, options *DeviceSettingsBeginSyncRemotemanagementCertificateOptions) (DeviceSettingsSyncRemotemanagementCertificatePollerResponse, error) {
	resp, err := client.syncRemotemanagementCertificate(ctx, deviceName, resourceGroupName, managerName, options)
	if err != nil {
		return DeviceSettingsSyncRemotemanagementCertificatePollerResponse{}, err
	}
	result := DeviceSettingsSyncRemotemanagementCertificatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("DeviceSettingsClient.SyncRemotemanagementCertificate", "", resp, client.pl, client.syncRemotemanagementCertificateHandleError)
	if err != nil {
		return DeviceSettingsSyncRemotemanagementCertificatePollerResponse{}, err
	}
	result.Poller = &DeviceSettingsSyncRemotemanagementCertificatePoller{
		pt: pt,
	}
	return result, nil
}

// SyncRemotemanagementCertificate - sync Remote management Certificate between appliance and Service
// If the operation fails it returns a generic error.
func (client *DeviceSettingsClient) syncRemotemanagementCertificate(ctx context.Context, deviceName string, resourceGroupName string, managerName string, options *DeviceSettingsBeginSyncRemotemanagementCertificateOptions) (*http.Response, error) {
	req, err := client.syncRemotemanagementCertificateCreateRequest(ctx, deviceName, resourceGroupName, managerName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.syncRemotemanagementCertificateHandleError(resp)
	}
	return resp, nil
}

// syncRemotemanagementCertificateCreateRequest creates the SyncRemotemanagementCertificate request.
func (client *DeviceSettingsClient) syncRemotemanagementCertificateCreateRequest(ctx context.Context, deviceName string, resourceGroupName string, managerName string, options *DeviceSettingsBeginSyncRemotemanagementCertificateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/securitySettings/default/syncRemoteManagementCertificate"
	if deviceName == "" {
		return nil, errors.New("parameter deviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceName}", deviceName)
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// syncRemotemanagementCertificateHandleError handles the SyncRemotemanagementCertificate error response.
func (client *DeviceSettingsClient) syncRemotemanagementCertificateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// BeginUpdateNetworkSettings - Updates the network settings on the specified device.
// If the operation fails it returns a generic error.
func (client *DeviceSettingsClient) BeginUpdateNetworkSettings(ctx context.Context, deviceName string, resourceGroupName string, managerName string, parameters NetworkSettingsPatch, options *DeviceSettingsBeginUpdateNetworkSettingsOptions) (DeviceSettingsUpdateNetworkSettingsPollerResponse, error) {
	resp, err := client.updateNetworkSettings(ctx, deviceName, resourceGroupName, managerName, parameters, options)
	if err != nil {
		return DeviceSettingsUpdateNetworkSettingsPollerResponse{}, err
	}
	result := DeviceSettingsUpdateNetworkSettingsPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("DeviceSettingsClient.UpdateNetworkSettings", "", resp, client.pl, client.updateNetworkSettingsHandleError)
	if err != nil {
		return DeviceSettingsUpdateNetworkSettingsPollerResponse{}, err
	}
	result.Poller = &DeviceSettingsUpdateNetworkSettingsPoller{
		pt: pt,
	}
	return result, nil
}

// UpdateNetworkSettings - Updates the network settings on the specified device.
// If the operation fails it returns a generic error.
func (client *DeviceSettingsClient) updateNetworkSettings(ctx context.Context, deviceName string, resourceGroupName string, managerName string, parameters NetworkSettingsPatch, options *DeviceSettingsBeginUpdateNetworkSettingsOptions) (*http.Response, error) {
	req, err := client.updateNetworkSettingsCreateRequest(ctx, deviceName, resourceGroupName, managerName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.updateNetworkSettingsHandleError(resp)
	}
	return resp, nil
}

// updateNetworkSettingsCreateRequest creates the UpdateNetworkSettings request.
func (client *DeviceSettingsClient) updateNetworkSettingsCreateRequest(ctx context.Context, deviceName string, resourceGroupName string, managerName string, parameters NetworkSettingsPatch, options *DeviceSettingsBeginUpdateNetworkSettingsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/networkSettings/default"
	if deviceName == "" {
		return nil, errors.New("parameter deviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceName}", deviceName)
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// updateNetworkSettingsHandleError handles the UpdateNetworkSettings error response.
func (client *DeviceSettingsClient) updateNetworkSettingsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// BeginUpdateSecuritySettings - Patch Security properties of the specified device name.
// If the operation fails it returns a generic error.
func (client *DeviceSettingsClient) BeginUpdateSecuritySettings(ctx context.Context, deviceName string, resourceGroupName string, managerName string, parameters SecuritySettingsPatch, options *DeviceSettingsBeginUpdateSecuritySettingsOptions) (DeviceSettingsUpdateSecuritySettingsPollerResponse, error) {
	resp, err := client.updateSecuritySettings(ctx, deviceName, resourceGroupName, managerName, parameters, options)
	if err != nil {
		return DeviceSettingsUpdateSecuritySettingsPollerResponse{}, err
	}
	result := DeviceSettingsUpdateSecuritySettingsPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("DeviceSettingsClient.UpdateSecuritySettings", "", resp, client.pl, client.updateSecuritySettingsHandleError)
	if err != nil {
		return DeviceSettingsUpdateSecuritySettingsPollerResponse{}, err
	}
	result.Poller = &DeviceSettingsUpdateSecuritySettingsPoller{
		pt: pt,
	}
	return result, nil
}

// UpdateSecuritySettings - Patch Security properties of the specified device name.
// If the operation fails it returns a generic error.
func (client *DeviceSettingsClient) updateSecuritySettings(ctx context.Context, deviceName string, resourceGroupName string, managerName string, parameters SecuritySettingsPatch, options *DeviceSettingsBeginUpdateSecuritySettingsOptions) (*http.Response, error) {
	req, err := client.updateSecuritySettingsCreateRequest(ctx, deviceName, resourceGroupName, managerName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.updateSecuritySettingsHandleError(resp)
	}
	return resp, nil
}

// updateSecuritySettingsCreateRequest creates the UpdateSecuritySettings request.
func (client *DeviceSettingsClient) updateSecuritySettingsCreateRequest(ctx context.Context, deviceName string, resourceGroupName string, managerName string, parameters SecuritySettingsPatch, options *DeviceSettingsBeginUpdateSecuritySettingsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/securitySettings/default"
	if deviceName == "" {
		return nil, errors.New("parameter deviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceName}", deviceName)
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// updateSecuritySettingsHandleError handles the UpdateSecuritySettings error response.
func (client *DeviceSettingsClient) updateSecuritySettingsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}
