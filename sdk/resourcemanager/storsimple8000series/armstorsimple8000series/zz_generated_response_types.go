//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstorsimple8000series

import (
	"context"
	"net/http"
	"time"

	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
)

// AccessControlRecordsCreateOrUpdatePollerResponse contains the response from method AccessControlRecords.CreateOrUpdate.
type AccessControlRecordsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AccessControlRecordsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l AccessControlRecordsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AccessControlRecordsCreateOrUpdateResponse, error) {
	respType := AccessControlRecordsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.AccessControlRecord)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AccessControlRecordsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *AccessControlRecordsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *AccessControlRecordsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AccessControlRecordsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &AccessControlRecordsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AccessControlRecordsCreateOrUpdateResponse contains the response from method AccessControlRecords.CreateOrUpdate.
type AccessControlRecordsCreateOrUpdateResponse struct {
	AccessControlRecordsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccessControlRecordsCreateOrUpdateResult contains the result from method AccessControlRecords.CreateOrUpdate.
type AccessControlRecordsCreateOrUpdateResult struct {
	AccessControlRecord
}

// AccessControlRecordsDeletePollerResponse contains the response from method AccessControlRecords.Delete.
type AccessControlRecordsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AccessControlRecordsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l AccessControlRecordsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AccessControlRecordsDeleteResponse, error) {
	respType := AccessControlRecordsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AccessControlRecordsDeletePollerResponse from the provided client and resume token.
func (l *AccessControlRecordsDeletePollerResponse) Resume(ctx context.Context, client *AccessControlRecordsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AccessControlRecordsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &AccessControlRecordsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AccessControlRecordsDeleteResponse contains the response from method AccessControlRecords.Delete.
type AccessControlRecordsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccessControlRecordsGetResponse contains the response from method AccessControlRecords.Get.
type AccessControlRecordsGetResponse struct {
	AccessControlRecordsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccessControlRecordsGetResult contains the result from method AccessControlRecords.Get.
type AccessControlRecordsGetResult struct {
	AccessControlRecord
}

// AccessControlRecordsListByManagerResponse contains the response from method AccessControlRecords.ListByManager.
type AccessControlRecordsListByManagerResponse struct {
	AccessControlRecordsListByManagerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccessControlRecordsListByManagerResult contains the result from method AccessControlRecords.ListByManager.
type AccessControlRecordsListByManagerResult struct {
	AccessControlRecordList
}

// AlertsClearResponse contains the response from method Alerts.Clear.
type AlertsClearResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AlertsListByManagerResponse contains the response from method Alerts.ListByManager.
type AlertsListByManagerResponse struct {
	AlertsListByManagerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AlertsListByManagerResult contains the result from method Alerts.ListByManager.
type AlertsListByManagerResult struct {
	AlertList
}

// AlertsSendTestEmailResponse contains the response from method Alerts.SendTestEmail.
type AlertsSendTestEmailResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BackupPoliciesBackupNowPollerResponse contains the response from method BackupPolicies.BackupNow.
type BackupPoliciesBackupNowPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BackupPoliciesBackupNowPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l BackupPoliciesBackupNowPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BackupPoliciesBackupNowResponse, error) {
	respType := BackupPoliciesBackupNowResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a BackupPoliciesBackupNowPollerResponse from the provided client and resume token.
func (l *BackupPoliciesBackupNowPollerResponse) Resume(ctx context.Context, client *BackupPoliciesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BackupPoliciesClient.BackupNow", token, client.pl, client.backupNowHandleError)
	if err != nil {
		return err
	}
	poller := &BackupPoliciesBackupNowPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// BackupPoliciesBackupNowResponse contains the response from method BackupPolicies.BackupNow.
type BackupPoliciesBackupNowResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BackupPoliciesCreateOrUpdatePollerResponse contains the response from method BackupPolicies.CreateOrUpdate.
type BackupPoliciesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BackupPoliciesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l BackupPoliciesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BackupPoliciesCreateOrUpdateResponse, error) {
	respType := BackupPoliciesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.BackupPolicy)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a BackupPoliciesCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *BackupPoliciesCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *BackupPoliciesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BackupPoliciesClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &BackupPoliciesCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// BackupPoliciesCreateOrUpdateResponse contains the response from method BackupPolicies.CreateOrUpdate.
type BackupPoliciesCreateOrUpdateResponse struct {
	BackupPoliciesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BackupPoliciesCreateOrUpdateResult contains the result from method BackupPolicies.CreateOrUpdate.
type BackupPoliciesCreateOrUpdateResult struct {
	BackupPolicy
}

// BackupPoliciesDeletePollerResponse contains the response from method BackupPolicies.Delete.
type BackupPoliciesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BackupPoliciesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l BackupPoliciesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BackupPoliciesDeleteResponse, error) {
	respType := BackupPoliciesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a BackupPoliciesDeletePollerResponse from the provided client and resume token.
func (l *BackupPoliciesDeletePollerResponse) Resume(ctx context.Context, client *BackupPoliciesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BackupPoliciesClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &BackupPoliciesDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// BackupPoliciesDeleteResponse contains the response from method BackupPolicies.Delete.
type BackupPoliciesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BackupPoliciesGetResponse contains the response from method BackupPolicies.Get.
type BackupPoliciesGetResponse struct {
	BackupPoliciesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BackupPoliciesGetResult contains the result from method BackupPolicies.Get.
type BackupPoliciesGetResult struct {
	BackupPolicy
}

// BackupPoliciesListByDeviceResponse contains the response from method BackupPolicies.ListByDevice.
type BackupPoliciesListByDeviceResponse struct {
	BackupPoliciesListByDeviceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BackupPoliciesListByDeviceResult contains the result from method BackupPolicies.ListByDevice.
type BackupPoliciesListByDeviceResult struct {
	BackupPolicyList
}

// BackupSchedulesCreateOrUpdatePollerResponse contains the response from method BackupSchedules.CreateOrUpdate.
type BackupSchedulesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BackupSchedulesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l BackupSchedulesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BackupSchedulesCreateOrUpdateResponse, error) {
	respType := BackupSchedulesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.BackupSchedule)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a BackupSchedulesCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *BackupSchedulesCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *BackupSchedulesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BackupSchedulesClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &BackupSchedulesCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// BackupSchedulesCreateOrUpdateResponse contains the response from method BackupSchedules.CreateOrUpdate.
type BackupSchedulesCreateOrUpdateResponse struct {
	BackupSchedulesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BackupSchedulesCreateOrUpdateResult contains the result from method BackupSchedules.CreateOrUpdate.
type BackupSchedulesCreateOrUpdateResult struct {
	BackupSchedule
}

// BackupSchedulesDeletePollerResponse contains the response from method BackupSchedules.Delete.
type BackupSchedulesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BackupSchedulesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l BackupSchedulesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BackupSchedulesDeleteResponse, error) {
	respType := BackupSchedulesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a BackupSchedulesDeletePollerResponse from the provided client and resume token.
func (l *BackupSchedulesDeletePollerResponse) Resume(ctx context.Context, client *BackupSchedulesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BackupSchedulesClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &BackupSchedulesDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// BackupSchedulesDeleteResponse contains the response from method BackupSchedules.Delete.
type BackupSchedulesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BackupSchedulesGetResponse contains the response from method BackupSchedules.Get.
type BackupSchedulesGetResponse struct {
	BackupSchedulesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BackupSchedulesGetResult contains the result from method BackupSchedules.Get.
type BackupSchedulesGetResult struct {
	BackupSchedule
}

// BackupSchedulesListByBackupPolicyResponse contains the response from method BackupSchedules.ListByBackupPolicy.
type BackupSchedulesListByBackupPolicyResponse struct {
	BackupSchedulesListByBackupPolicyResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BackupSchedulesListByBackupPolicyResult contains the result from method BackupSchedules.ListByBackupPolicy.
type BackupSchedulesListByBackupPolicyResult struct {
	BackupScheduleList
}

// BackupsClonePollerResponse contains the response from method Backups.Clone.
type BackupsClonePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BackupsClonePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l BackupsClonePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BackupsCloneResponse, error) {
	respType := BackupsCloneResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a BackupsClonePollerResponse from the provided client and resume token.
func (l *BackupsClonePollerResponse) Resume(ctx context.Context, client *BackupsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BackupsClient.Clone", token, client.pl, client.cloneHandleError)
	if err != nil {
		return err
	}
	poller := &BackupsClonePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// BackupsCloneResponse contains the response from method Backups.Clone.
type BackupsCloneResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BackupsDeletePollerResponse contains the response from method Backups.Delete.
type BackupsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BackupsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l BackupsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BackupsDeleteResponse, error) {
	respType := BackupsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a BackupsDeletePollerResponse from the provided client and resume token.
func (l *BackupsDeletePollerResponse) Resume(ctx context.Context, client *BackupsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BackupsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &BackupsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// BackupsDeleteResponse contains the response from method Backups.Delete.
type BackupsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BackupsListByDeviceResponse contains the response from method Backups.ListByDevice.
type BackupsListByDeviceResponse struct {
	BackupsListByDeviceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BackupsListByDeviceResult contains the result from method Backups.ListByDevice.
type BackupsListByDeviceResult struct {
	BackupList
}

// BackupsRestorePollerResponse contains the response from method Backups.Restore.
type BackupsRestorePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BackupsRestorePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l BackupsRestorePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BackupsRestoreResponse, error) {
	respType := BackupsRestoreResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a BackupsRestorePollerResponse from the provided client and resume token.
func (l *BackupsRestorePollerResponse) Resume(ctx context.Context, client *BackupsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BackupsClient.Restore", token, client.pl, client.restoreHandleError)
	if err != nil {
		return err
	}
	poller := &BackupsRestorePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// BackupsRestoreResponse contains the response from method Backups.Restore.
type BackupsRestoreResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BandwidthSettingsCreateOrUpdatePollerResponse contains the response from method BandwidthSettings.CreateOrUpdate.
type BandwidthSettingsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BandwidthSettingsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l BandwidthSettingsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BandwidthSettingsCreateOrUpdateResponse, error) {
	respType := BandwidthSettingsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.BandwidthSetting)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a BandwidthSettingsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *BandwidthSettingsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *BandwidthSettingsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BandwidthSettingsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &BandwidthSettingsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// BandwidthSettingsCreateOrUpdateResponse contains the response from method BandwidthSettings.CreateOrUpdate.
type BandwidthSettingsCreateOrUpdateResponse struct {
	BandwidthSettingsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BandwidthSettingsCreateOrUpdateResult contains the result from method BandwidthSettings.CreateOrUpdate.
type BandwidthSettingsCreateOrUpdateResult struct {
	BandwidthSetting
}

// BandwidthSettingsDeletePollerResponse contains the response from method BandwidthSettings.Delete.
type BandwidthSettingsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BandwidthSettingsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l BandwidthSettingsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BandwidthSettingsDeleteResponse, error) {
	respType := BandwidthSettingsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a BandwidthSettingsDeletePollerResponse from the provided client and resume token.
func (l *BandwidthSettingsDeletePollerResponse) Resume(ctx context.Context, client *BandwidthSettingsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BandwidthSettingsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &BandwidthSettingsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// BandwidthSettingsDeleteResponse contains the response from method BandwidthSettings.Delete.
type BandwidthSettingsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BandwidthSettingsGetResponse contains the response from method BandwidthSettings.Get.
type BandwidthSettingsGetResponse struct {
	BandwidthSettingsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BandwidthSettingsGetResult contains the result from method BandwidthSettings.Get.
type BandwidthSettingsGetResult struct {
	BandwidthSetting
}

// BandwidthSettingsListByManagerResponse contains the response from method BandwidthSettings.ListByManager.
type BandwidthSettingsListByManagerResponse struct {
	BandwidthSettingsListByManagerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BandwidthSettingsListByManagerResult contains the result from method BandwidthSettings.ListByManager.
type BandwidthSettingsListByManagerResult struct {
	BandwidthSettingList
}

// CloudAppliancesListSupportedConfigurationsResponse contains the response from method CloudAppliances.ListSupportedConfigurations.
type CloudAppliancesListSupportedConfigurationsResponse struct {
	CloudAppliancesListSupportedConfigurationsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CloudAppliancesListSupportedConfigurationsResult contains the result from method CloudAppliances.ListSupportedConfigurations.
type CloudAppliancesListSupportedConfigurationsResult struct {
	CloudApplianceConfigurationList
}

// CloudAppliancesProvisionPollerResponse contains the response from method CloudAppliances.Provision.
type CloudAppliancesProvisionPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CloudAppliancesProvisionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l CloudAppliancesProvisionPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CloudAppliancesProvisionResponse, error) {
	respType := CloudAppliancesProvisionResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CloudAppliancesProvisionPollerResponse from the provided client and resume token.
func (l *CloudAppliancesProvisionPollerResponse) Resume(ctx context.Context, client *CloudAppliancesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CloudAppliancesClient.Provision", token, client.pl, client.provisionHandleError)
	if err != nil {
		return err
	}
	poller := &CloudAppliancesProvisionPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CloudAppliancesProvisionResponse contains the response from method CloudAppliances.Provision.
type CloudAppliancesProvisionResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeviceSettingsCreateOrUpdateAlertSettingsPollerResponse contains the response from method DeviceSettings.CreateOrUpdateAlertSettings.
type DeviceSettingsCreateOrUpdateAlertSettingsPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DeviceSettingsCreateOrUpdateAlertSettingsPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DeviceSettingsCreateOrUpdateAlertSettingsPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DeviceSettingsCreateOrUpdateAlertSettingsResponse, error) {
	respType := DeviceSettingsCreateOrUpdateAlertSettingsResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.AlertSettings)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DeviceSettingsCreateOrUpdateAlertSettingsPollerResponse from the provided client and resume token.
func (l *DeviceSettingsCreateOrUpdateAlertSettingsPollerResponse) Resume(ctx context.Context, client *DeviceSettingsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DeviceSettingsClient.CreateOrUpdateAlertSettings", token, client.pl, client.createOrUpdateAlertSettingsHandleError)
	if err != nil {
		return err
	}
	poller := &DeviceSettingsCreateOrUpdateAlertSettingsPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DeviceSettingsCreateOrUpdateAlertSettingsResponse contains the response from method DeviceSettings.CreateOrUpdateAlertSettings.
type DeviceSettingsCreateOrUpdateAlertSettingsResponse struct {
	DeviceSettingsCreateOrUpdateAlertSettingsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeviceSettingsCreateOrUpdateAlertSettingsResult contains the result from method DeviceSettings.CreateOrUpdateAlertSettings.
type DeviceSettingsCreateOrUpdateAlertSettingsResult struct {
	AlertSettings
}

// DeviceSettingsCreateOrUpdateTimeSettingsPollerResponse contains the response from method DeviceSettings.CreateOrUpdateTimeSettings.
type DeviceSettingsCreateOrUpdateTimeSettingsPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DeviceSettingsCreateOrUpdateTimeSettingsPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DeviceSettingsCreateOrUpdateTimeSettingsPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DeviceSettingsCreateOrUpdateTimeSettingsResponse, error) {
	respType := DeviceSettingsCreateOrUpdateTimeSettingsResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.TimeSettings)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DeviceSettingsCreateOrUpdateTimeSettingsPollerResponse from the provided client and resume token.
func (l *DeviceSettingsCreateOrUpdateTimeSettingsPollerResponse) Resume(ctx context.Context, client *DeviceSettingsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DeviceSettingsClient.CreateOrUpdateTimeSettings", token, client.pl, client.createOrUpdateTimeSettingsHandleError)
	if err != nil {
		return err
	}
	poller := &DeviceSettingsCreateOrUpdateTimeSettingsPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DeviceSettingsCreateOrUpdateTimeSettingsResponse contains the response from method DeviceSettings.CreateOrUpdateTimeSettings.
type DeviceSettingsCreateOrUpdateTimeSettingsResponse struct {
	DeviceSettingsCreateOrUpdateTimeSettingsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeviceSettingsCreateOrUpdateTimeSettingsResult contains the result from method DeviceSettings.CreateOrUpdateTimeSettings.
type DeviceSettingsCreateOrUpdateTimeSettingsResult struct {
	TimeSettings
}

// DeviceSettingsGetAlertSettingsResponse contains the response from method DeviceSettings.GetAlertSettings.
type DeviceSettingsGetAlertSettingsResponse struct {
	DeviceSettingsGetAlertSettingsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeviceSettingsGetAlertSettingsResult contains the result from method DeviceSettings.GetAlertSettings.
type DeviceSettingsGetAlertSettingsResult struct {
	AlertSettings
}

// DeviceSettingsGetNetworkSettingsResponse contains the response from method DeviceSettings.GetNetworkSettings.
type DeviceSettingsGetNetworkSettingsResponse struct {
	DeviceSettingsGetNetworkSettingsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeviceSettingsGetNetworkSettingsResult contains the result from method DeviceSettings.GetNetworkSettings.
type DeviceSettingsGetNetworkSettingsResult struct {
	NetworkSettings
}

// DeviceSettingsGetSecuritySettingsResponse contains the response from method DeviceSettings.GetSecuritySettings.
type DeviceSettingsGetSecuritySettingsResponse struct {
	DeviceSettingsGetSecuritySettingsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeviceSettingsGetSecuritySettingsResult contains the result from method DeviceSettings.GetSecuritySettings.
type DeviceSettingsGetSecuritySettingsResult struct {
	SecuritySettings
}

// DeviceSettingsGetTimeSettingsResponse contains the response from method DeviceSettings.GetTimeSettings.
type DeviceSettingsGetTimeSettingsResponse struct {
	DeviceSettingsGetTimeSettingsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeviceSettingsGetTimeSettingsResult contains the result from method DeviceSettings.GetTimeSettings.
type DeviceSettingsGetTimeSettingsResult struct {
	TimeSettings
}

// DeviceSettingsSyncRemotemanagementCertificatePollerResponse contains the response from method DeviceSettings.SyncRemotemanagementCertificate.
type DeviceSettingsSyncRemotemanagementCertificatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DeviceSettingsSyncRemotemanagementCertificatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DeviceSettingsSyncRemotemanagementCertificatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DeviceSettingsSyncRemotemanagementCertificateResponse, error) {
	respType := DeviceSettingsSyncRemotemanagementCertificateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DeviceSettingsSyncRemotemanagementCertificatePollerResponse from the provided client and resume token.
func (l *DeviceSettingsSyncRemotemanagementCertificatePollerResponse) Resume(ctx context.Context, client *DeviceSettingsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DeviceSettingsClient.SyncRemotemanagementCertificate", token, client.pl, client.syncRemotemanagementCertificateHandleError)
	if err != nil {
		return err
	}
	poller := &DeviceSettingsSyncRemotemanagementCertificatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DeviceSettingsSyncRemotemanagementCertificateResponse contains the response from method DeviceSettings.SyncRemotemanagementCertificate.
type DeviceSettingsSyncRemotemanagementCertificateResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeviceSettingsUpdateNetworkSettingsPollerResponse contains the response from method DeviceSettings.UpdateNetworkSettings.
type DeviceSettingsUpdateNetworkSettingsPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DeviceSettingsUpdateNetworkSettingsPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DeviceSettingsUpdateNetworkSettingsPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DeviceSettingsUpdateNetworkSettingsResponse, error) {
	respType := DeviceSettingsUpdateNetworkSettingsResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.NetworkSettings)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DeviceSettingsUpdateNetworkSettingsPollerResponse from the provided client and resume token.
func (l *DeviceSettingsUpdateNetworkSettingsPollerResponse) Resume(ctx context.Context, client *DeviceSettingsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DeviceSettingsClient.UpdateNetworkSettings", token, client.pl, client.updateNetworkSettingsHandleError)
	if err != nil {
		return err
	}
	poller := &DeviceSettingsUpdateNetworkSettingsPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DeviceSettingsUpdateNetworkSettingsResponse contains the response from method DeviceSettings.UpdateNetworkSettings.
type DeviceSettingsUpdateNetworkSettingsResponse struct {
	DeviceSettingsUpdateNetworkSettingsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeviceSettingsUpdateNetworkSettingsResult contains the result from method DeviceSettings.UpdateNetworkSettings.
type DeviceSettingsUpdateNetworkSettingsResult struct {
	NetworkSettings
}

// DeviceSettingsUpdateSecuritySettingsPollerResponse contains the response from method DeviceSettings.UpdateSecuritySettings.
type DeviceSettingsUpdateSecuritySettingsPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DeviceSettingsUpdateSecuritySettingsPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DeviceSettingsUpdateSecuritySettingsPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DeviceSettingsUpdateSecuritySettingsResponse, error) {
	respType := DeviceSettingsUpdateSecuritySettingsResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.SecuritySettings)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DeviceSettingsUpdateSecuritySettingsPollerResponse from the provided client and resume token.
func (l *DeviceSettingsUpdateSecuritySettingsPollerResponse) Resume(ctx context.Context, client *DeviceSettingsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DeviceSettingsClient.UpdateSecuritySettings", token, client.pl, client.updateSecuritySettingsHandleError)
	if err != nil {
		return err
	}
	poller := &DeviceSettingsUpdateSecuritySettingsPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DeviceSettingsUpdateSecuritySettingsResponse contains the response from method DeviceSettings.UpdateSecuritySettings.
type DeviceSettingsUpdateSecuritySettingsResponse struct {
	DeviceSettingsUpdateSecuritySettingsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeviceSettingsUpdateSecuritySettingsResult contains the result from method DeviceSettings.UpdateSecuritySettings.
type DeviceSettingsUpdateSecuritySettingsResult struct {
	SecuritySettings
}

// DevicesAuthorizeForServiceEncryptionKeyRolloverResponse contains the response from method Devices.AuthorizeForServiceEncryptionKeyRollover.
type DevicesAuthorizeForServiceEncryptionKeyRolloverResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DevicesConfigurePollerResponse contains the response from method Devices.Configure.
type DevicesConfigurePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DevicesConfigurePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DevicesConfigurePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DevicesConfigureResponse, error) {
	respType := DevicesConfigureResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DevicesConfigurePollerResponse from the provided client and resume token.
func (l *DevicesConfigurePollerResponse) Resume(ctx context.Context, client *DevicesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DevicesClient.Configure", token, client.pl, client.configureHandleError)
	if err != nil {
		return err
	}
	poller := &DevicesConfigurePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DevicesConfigureResponse contains the response from method Devices.Configure.
type DevicesConfigureResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DevicesDeactivatePollerResponse contains the response from method Devices.Deactivate.
type DevicesDeactivatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DevicesDeactivatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DevicesDeactivatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DevicesDeactivateResponse, error) {
	respType := DevicesDeactivateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DevicesDeactivatePollerResponse from the provided client and resume token.
func (l *DevicesDeactivatePollerResponse) Resume(ctx context.Context, client *DevicesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DevicesClient.Deactivate", token, client.pl, client.deactivateHandleError)
	if err != nil {
		return err
	}
	poller := &DevicesDeactivatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DevicesDeactivateResponse contains the response from method Devices.Deactivate.
type DevicesDeactivateResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DevicesDeletePollerResponse contains the response from method Devices.Delete.
type DevicesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DevicesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DevicesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DevicesDeleteResponse, error) {
	respType := DevicesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DevicesDeletePollerResponse from the provided client and resume token.
func (l *DevicesDeletePollerResponse) Resume(ctx context.Context, client *DevicesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DevicesClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &DevicesDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DevicesDeleteResponse contains the response from method Devices.Delete.
type DevicesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DevicesFailoverPollerResponse contains the response from method Devices.Failover.
type DevicesFailoverPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DevicesFailoverPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DevicesFailoverPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DevicesFailoverResponse, error) {
	respType := DevicesFailoverResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DevicesFailoverPollerResponse from the provided client and resume token.
func (l *DevicesFailoverPollerResponse) Resume(ctx context.Context, client *DevicesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DevicesClient.Failover", token, client.pl, client.failoverHandleError)
	if err != nil {
		return err
	}
	poller := &DevicesFailoverPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DevicesFailoverResponse contains the response from method Devices.Failover.
type DevicesFailoverResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DevicesGetResponse contains the response from method Devices.Get.
type DevicesGetResponse struct {
	DevicesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DevicesGetResult contains the result from method Devices.Get.
type DevicesGetResult struct {
	Device
}

// DevicesGetUpdateSummaryResponse contains the response from method Devices.GetUpdateSummary.
type DevicesGetUpdateSummaryResponse struct {
	DevicesGetUpdateSummaryResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DevicesGetUpdateSummaryResult contains the result from method Devices.GetUpdateSummary.
type DevicesGetUpdateSummaryResult struct {
	Updates
}

// DevicesInstallUpdatesPollerResponse contains the response from method Devices.InstallUpdates.
type DevicesInstallUpdatesPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DevicesInstallUpdatesPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DevicesInstallUpdatesPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DevicesInstallUpdatesResponse, error) {
	respType := DevicesInstallUpdatesResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DevicesInstallUpdatesPollerResponse from the provided client and resume token.
func (l *DevicesInstallUpdatesPollerResponse) Resume(ctx context.Context, client *DevicesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DevicesClient.InstallUpdates", token, client.pl, client.installUpdatesHandleError)
	if err != nil {
		return err
	}
	poller := &DevicesInstallUpdatesPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DevicesInstallUpdatesResponse contains the response from method Devices.InstallUpdates.
type DevicesInstallUpdatesResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DevicesListByManagerResponse contains the response from method Devices.ListByManager.
type DevicesListByManagerResponse struct {
	DevicesListByManagerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DevicesListByManagerResult contains the result from method Devices.ListByManager.
type DevicesListByManagerResult struct {
	DeviceList
}

// DevicesListFailoverSetsResponse contains the response from method Devices.ListFailoverSets.
type DevicesListFailoverSetsResponse struct {
	DevicesListFailoverSetsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DevicesListFailoverSetsResult contains the result from method Devices.ListFailoverSets.
type DevicesListFailoverSetsResult struct {
	FailoverSetsList
}

// DevicesListFailoverTargetsResponse contains the response from method Devices.ListFailoverTargets.
type DevicesListFailoverTargetsResponse struct {
	DevicesListFailoverTargetsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DevicesListFailoverTargetsResult contains the result from method Devices.ListFailoverTargets.
type DevicesListFailoverTargetsResult struct {
	FailoverTargetsList
}

// DevicesListMetricDefinitionResponse contains the response from method Devices.ListMetricDefinition.
type DevicesListMetricDefinitionResponse struct {
	DevicesListMetricDefinitionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DevicesListMetricDefinitionResult contains the result from method Devices.ListMetricDefinition.
type DevicesListMetricDefinitionResult struct {
	MetricDefinitionList
}

// DevicesListMetricsResponse contains the response from method Devices.ListMetrics.
type DevicesListMetricsResponse struct {
	DevicesListMetricsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DevicesListMetricsResult contains the result from method Devices.ListMetrics.
type DevicesListMetricsResult struct {
	MetricList
}

// DevicesScanForUpdatesPollerResponse contains the response from method Devices.ScanForUpdates.
type DevicesScanForUpdatesPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DevicesScanForUpdatesPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DevicesScanForUpdatesPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DevicesScanForUpdatesResponse, error) {
	respType := DevicesScanForUpdatesResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DevicesScanForUpdatesPollerResponse from the provided client and resume token.
func (l *DevicesScanForUpdatesPollerResponse) Resume(ctx context.Context, client *DevicesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DevicesClient.ScanForUpdates", token, client.pl, client.scanForUpdatesHandleError)
	if err != nil {
		return err
	}
	poller := &DevicesScanForUpdatesPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DevicesScanForUpdatesResponse contains the response from method Devices.ScanForUpdates.
type DevicesScanForUpdatesResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DevicesUpdateResponse contains the response from method Devices.Update.
type DevicesUpdateResponse struct {
	DevicesUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DevicesUpdateResult contains the result from method Devices.Update.
type DevicesUpdateResult struct {
	Device
}

// HardwareComponentGroupsChangeControllerPowerStatePollerResponse contains the response from method HardwareComponentGroups.ChangeControllerPowerState.
type HardwareComponentGroupsChangeControllerPowerStatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *HardwareComponentGroupsChangeControllerPowerStatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l HardwareComponentGroupsChangeControllerPowerStatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (HardwareComponentGroupsChangeControllerPowerStateResponse, error) {
	respType := HardwareComponentGroupsChangeControllerPowerStateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a HardwareComponentGroupsChangeControllerPowerStatePollerResponse from the provided client and resume token.
func (l *HardwareComponentGroupsChangeControllerPowerStatePollerResponse) Resume(ctx context.Context, client *HardwareComponentGroupsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("HardwareComponentGroupsClient.ChangeControllerPowerState", token, client.pl, client.changeControllerPowerStateHandleError)
	if err != nil {
		return err
	}
	poller := &HardwareComponentGroupsChangeControllerPowerStatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// HardwareComponentGroupsChangeControllerPowerStateResponse contains the response from method HardwareComponentGroups.ChangeControllerPowerState.
type HardwareComponentGroupsChangeControllerPowerStateResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// HardwareComponentGroupsListByDeviceResponse contains the response from method HardwareComponentGroups.ListByDevice.
type HardwareComponentGroupsListByDeviceResponse struct {
	HardwareComponentGroupsListByDeviceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// HardwareComponentGroupsListByDeviceResult contains the result from method HardwareComponentGroups.ListByDevice.
type HardwareComponentGroupsListByDeviceResult struct {
	HardwareComponentGroupList
}

// JobsCancelPollerResponse contains the response from method Jobs.Cancel.
type JobsCancelPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *JobsCancelPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l JobsCancelPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (JobsCancelResponse, error) {
	respType := JobsCancelResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a JobsCancelPollerResponse from the provided client and resume token.
func (l *JobsCancelPollerResponse) Resume(ctx context.Context, client *JobsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("JobsClient.Cancel", token, client.pl, client.cancelHandleError)
	if err != nil {
		return err
	}
	poller := &JobsCancelPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// JobsCancelResponse contains the response from method Jobs.Cancel.
type JobsCancelResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsGetResponse contains the response from method Jobs.Get.
type JobsGetResponse struct {
	JobsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsGetResult contains the result from method Jobs.Get.
type JobsGetResult struct {
	Job
}

// JobsListByDeviceResponse contains the response from method Jobs.ListByDevice.
type JobsListByDeviceResponse struct {
	JobsListByDeviceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsListByDeviceResult contains the result from method Jobs.ListByDevice.
type JobsListByDeviceResult struct {
	JobList
}

// JobsListByManagerResponse contains the response from method Jobs.ListByManager.
type JobsListByManagerResponse struct {
	JobsListByManagerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsListByManagerResult contains the result from method Jobs.ListByManager.
type JobsListByManagerResult struct {
	JobList
}

// ManagersCreateExtendedInfoResponse contains the response from method Managers.CreateExtendedInfo.
type ManagersCreateExtendedInfoResponse struct {
	ManagersCreateExtendedInfoResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ManagersCreateExtendedInfoResult contains the result from method Managers.CreateExtendedInfo.
type ManagersCreateExtendedInfoResult struct {
	ManagerExtendedInfo
}

// ManagersCreateOrUpdateResponse contains the response from method Managers.CreateOrUpdate.
type ManagersCreateOrUpdateResponse struct {
	ManagersCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ManagersCreateOrUpdateResult contains the result from method Managers.CreateOrUpdate.
type ManagersCreateOrUpdateResult struct {
	Manager
}

// ManagersDeleteExtendedInfoResponse contains the response from method Managers.DeleteExtendedInfo.
type ManagersDeleteExtendedInfoResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ManagersDeleteResponse contains the response from method Managers.Delete.
type ManagersDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ManagersGetActivationKeyResponse contains the response from method Managers.GetActivationKey.
type ManagersGetActivationKeyResponse struct {
	ManagersGetActivationKeyResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ManagersGetActivationKeyResult contains the result from method Managers.GetActivationKey.
type ManagersGetActivationKeyResult struct {
	Key
}

// ManagersGetDevicePublicEncryptionKeyResponse contains the response from method Managers.GetDevicePublicEncryptionKey.
type ManagersGetDevicePublicEncryptionKeyResponse struct {
	ManagersGetDevicePublicEncryptionKeyResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ManagersGetDevicePublicEncryptionKeyResult contains the result from method Managers.GetDevicePublicEncryptionKey.
type ManagersGetDevicePublicEncryptionKeyResult struct {
	PublicKey
}

// ManagersGetEncryptionSettingsResponse contains the response from method Managers.GetEncryptionSettings.
type ManagersGetEncryptionSettingsResponse struct {
	ManagersGetEncryptionSettingsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ManagersGetEncryptionSettingsResult contains the result from method Managers.GetEncryptionSettings.
type ManagersGetEncryptionSettingsResult struct {
	EncryptionSettings
}

// ManagersGetExtendedInfoResponse contains the response from method Managers.GetExtendedInfo.
type ManagersGetExtendedInfoResponse struct {
	ManagersGetExtendedInfoResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ManagersGetExtendedInfoResult contains the result from method Managers.GetExtendedInfo.
type ManagersGetExtendedInfoResult struct {
	ManagerExtendedInfo
}

// ManagersGetPublicEncryptionKeyResponse contains the response from method Managers.GetPublicEncryptionKey.
type ManagersGetPublicEncryptionKeyResponse struct {
	ManagersGetPublicEncryptionKeyResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ManagersGetPublicEncryptionKeyResult contains the result from method Managers.GetPublicEncryptionKey.
type ManagersGetPublicEncryptionKeyResult struct {
	SymmetricEncryptedSecret
}

// ManagersGetResponse contains the response from method Managers.Get.
type ManagersGetResponse struct {
	ManagersGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ManagersGetResult contains the result from method Managers.Get.
type ManagersGetResult struct {
	Manager
}

// ManagersListByResourceGroupResponse contains the response from method Managers.ListByResourceGroup.
type ManagersListByResourceGroupResponse struct {
	ManagersListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ManagersListByResourceGroupResult contains the result from method Managers.ListByResourceGroup.
type ManagersListByResourceGroupResult struct {
	ManagerList
}

// ManagersListFeatureSupportStatusResponse contains the response from method Managers.ListFeatureSupportStatus.
type ManagersListFeatureSupportStatusResponse struct {
	ManagersListFeatureSupportStatusResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ManagersListFeatureSupportStatusResult contains the result from method Managers.ListFeatureSupportStatus.
type ManagersListFeatureSupportStatusResult struct {
	FeatureList
}

// ManagersListMetricDefinitionResponse contains the response from method Managers.ListMetricDefinition.
type ManagersListMetricDefinitionResponse struct {
	ManagersListMetricDefinitionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ManagersListMetricDefinitionResult contains the result from method Managers.ListMetricDefinition.
type ManagersListMetricDefinitionResult struct {
	MetricDefinitionList
}

// ManagersListMetricsResponse contains the response from method Managers.ListMetrics.
type ManagersListMetricsResponse struct {
	ManagersListMetricsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ManagersListMetricsResult contains the result from method Managers.ListMetrics.
type ManagersListMetricsResult struct {
	MetricList
}

// ManagersListResponse contains the response from method Managers.List.
type ManagersListResponse struct {
	ManagersListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ManagersListResult contains the result from method Managers.List.
type ManagersListResult struct {
	ManagerList
}

// ManagersRegenerateActivationKeyResponse contains the response from method Managers.RegenerateActivationKey.
type ManagersRegenerateActivationKeyResponse struct {
	ManagersRegenerateActivationKeyResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ManagersRegenerateActivationKeyResult contains the result from method Managers.RegenerateActivationKey.
type ManagersRegenerateActivationKeyResult struct {
	Key
}

// ManagersUpdateExtendedInfoResponse contains the response from method Managers.UpdateExtendedInfo.
type ManagersUpdateExtendedInfoResponse struct {
	ManagersUpdateExtendedInfoResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ManagersUpdateExtendedInfoResult contains the result from method Managers.UpdateExtendedInfo.
type ManagersUpdateExtendedInfoResult struct {
	ManagerExtendedInfo
}

// ManagersUpdateResponse contains the response from method Managers.Update.
type ManagersUpdateResponse struct {
	ManagersUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ManagersUpdateResult contains the result from method Managers.Update.
type ManagersUpdateResult struct {
	Manager
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	AvailableProviderOperationList
}

// StorageAccountCredentialsCreateOrUpdatePollerResponse contains the response from method StorageAccountCredentials.CreateOrUpdate.
type StorageAccountCredentialsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *StorageAccountCredentialsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l StorageAccountCredentialsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (StorageAccountCredentialsCreateOrUpdateResponse, error) {
	respType := StorageAccountCredentialsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.StorageAccountCredential)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a StorageAccountCredentialsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *StorageAccountCredentialsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *StorageAccountCredentialsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("StorageAccountCredentialsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &StorageAccountCredentialsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// StorageAccountCredentialsCreateOrUpdateResponse contains the response from method StorageAccountCredentials.CreateOrUpdate.
type StorageAccountCredentialsCreateOrUpdateResponse struct {
	StorageAccountCredentialsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StorageAccountCredentialsCreateOrUpdateResult contains the result from method StorageAccountCredentials.CreateOrUpdate.
type StorageAccountCredentialsCreateOrUpdateResult struct {
	StorageAccountCredential
}

// StorageAccountCredentialsDeletePollerResponse contains the response from method StorageAccountCredentials.Delete.
type StorageAccountCredentialsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *StorageAccountCredentialsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l StorageAccountCredentialsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (StorageAccountCredentialsDeleteResponse, error) {
	respType := StorageAccountCredentialsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a StorageAccountCredentialsDeletePollerResponse from the provided client and resume token.
func (l *StorageAccountCredentialsDeletePollerResponse) Resume(ctx context.Context, client *StorageAccountCredentialsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("StorageAccountCredentialsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &StorageAccountCredentialsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// StorageAccountCredentialsDeleteResponse contains the response from method StorageAccountCredentials.Delete.
type StorageAccountCredentialsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StorageAccountCredentialsGetResponse contains the response from method StorageAccountCredentials.Get.
type StorageAccountCredentialsGetResponse struct {
	StorageAccountCredentialsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StorageAccountCredentialsGetResult contains the result from method StorageAccountCredentials.Get.
type StorageAccountCredentialsGetResult struct {
	StorageAccountCredential
}

// StorageAccountCredentialsListByManagerResponse contains the response from method StorageAccountCredentials.ListByManager.
type StorageAccountCredentialsListByManagerResponse struct {
	StorageAccountCredentialsListByManagerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StorageAccountCredentialsListByManagerResult contains the result from method StorageAccountCredentials.ListByManager.
type StorageAccountCredentialsListByManagerResult struct {
	StorageAccountCredentialList
}

// VolumeContainersCreateOrUpdatePollerResponse contains the response from method VolumeContainers.CreateOrUpdate.
type VolumeContainersCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VolumeContainersCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VolumeContainersCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VolumeContainersCreateOrUpdateResponse, error) {
	respType := VolumeContainersCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.VolumeContainer)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a VolumeContainersCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *VolumeContainersCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *VolumeContainersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("VolumeContainersClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &VolumeContainersCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// VolumeContainersCreateOrUpdateResponse contains the response from method VolumeContainers.CreateOrUpdate.
type VolumeContainersCreateOrUpdateResponse struct {
	VolumeContainersCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VolumeContainersCreateOrUpdateResult contains the result from method VolumeContainers.CreateOrUpdate.
type VolumeContainersCreateOrUpdateResult struct {
	VolumeContainer
}

// VolumeContainersDeletePollerResponse contains the response from method VolumeContainers.Delete.
type VolumeContainersDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VolumeContainersDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VolumeContainersDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VolumeContainersDeleteResponse, error) {
	respType := VolumeContainersDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a VolumeContainersDeletePollerResponse from the provided client and resume token.
func (l *VolumeContainersDeletePollerResponse) Resume(ctx context.Context, client *VolumeContainersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("VolumeContainersClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &VolumeContainersDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// VolumeContainersDeleteResponse contains the response from method VolumeContainers.Delete.
type VolumeContainersDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VolumeContainersGetResponse contains the response from method VolumeContainers.Get.
type VolumeContainersGetResponse struct {
	VolumeContainersGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VolumeContainersGetResult contains the result from method VolumeContainers.Get.
type VolumeContainersGetResult struct {
	VolumeContainer
}

// VolumeContainersListByDeviceResponse contains the response from method VolumeContainers.ListByDevice.
type VolumeContainersListByDeviceResponse struct {
	VolumeContainersListByDeviceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VolumeContainersListByDeviceResult contains the result from method VolumeContainers.ListByDevice.
type VolumeContainersListByDeviceResult struct {
	VolumeContainerList
}

// VolumeContainersListMetricDefinitionResponse contains the response from method VolumeContainers.ListMetricDefinition.
type VolumeContainersListMetricDefinitionResponse struct {
	VolumeContainersListMetricDefinitionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VolumeContainersListMetricDefinitionResult contains the result from method VolumeContainers.ListMetricDefinition.
type VolumeContainersListMetricDefinitionResult struct {
	MetricDefinitionList
}

// VolumeContainersListMetricsResponse contains the response from method VolumeContainers.ListMetrics.
type VolumeContainersListMetricsResponse struct {
	VolumeContainersListMetricsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VolumeContainersListMetricsResult contains the result from method VolumeContainers.ListMetrics.
type VolumeContainersListMetricsResult struct {
	MetricList
}

// VolumesCreateOrUpdatePollerResponse contains the response from method Volumes.CreateOrUpdate.
type VolumesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VolumesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VolumesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VolumesCreateOrUpdateResponse, error) {
	respType := VolumesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Volume)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a VolumesCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *VolumesCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *VolumesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("VolumesClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &VolumesCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// VolumesCreateOrUpdateResponse contains the response from method Volumes.CreateOrUpdate.
type VolumesCreateOrUpdateResponse struct {
	VolumesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VolumesCreateOrUpdateResult contains the result from method Volumes.CreateOrUpdate.
type VolumesCreateOrUpdateResult struct {
	Volume
}

// VolumesDeletePollerResponse contains the response from method Volumes.Delete.
type VolumesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VolumesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VolumesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VolumesDeleteResponse, error) {
	respType := VolumesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a VolumesDeletePollerResponse from the provided client and resume token.
func (l *VolumesDeletePollerResponse) Resume(ctx context.Context, client *VolumesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("VolumesClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &VolumesDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// VolumesDeleteResponse contains the response from method Volumes.Delete.
type VolumesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VolumesGetResponse contains the response from method Volumes.Get.
type VolumesGetResponse struct {
	VolumesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VolumesGetResult contains the result from method Volumes.Get.
type VolumesGetResult struct {
	Volume
}

// VolumesListByDeviceResponse contains the response from method Volumes.ListByDevice.
type VolumesListByDeviceResponse struct {
	VolumesListByDeviceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VolumesListByDeviceResult contains the result from method Volumes.ListByDevice.
type VolumesListByDeviceResult struct {
	VolumeList
}

// VolumesListByVolumeContainerResponse contains the response from method Volumes.ListByVolumeContainer.
type VolumesListByVolumeContainerResponse struct {
	VolumesListByVolumeContainerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VolumesListByVolumeContainerResult contains the result from method Volumes.ListByVolumeContainer.
type VolumesListByVolumeContainerResult struct {
	VolumeList
}

// VolumesListMetricDefinitionResponse contains the response from method Volumes.ListMetricDefinition.
type VolumesListMetricDefinitionResponse struct {
	VolumesListMetricDefinitionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VolumesListMetricDefinitionResult contains the result from method Volumes.ListMetricDefinition.
type VolumesListMetricDefinitionResult struct {
	MetricDefinitionList
}

// VolumesListMetricsResponse contains the response from method Volumes.ListMetrics.
type VolumesListMetricsResponse struct {
	VolumesListMetricsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VolumesListMetricsResult contains the result from method Volumes.ListMetrics.
type VolumesListMetricsResult struct {
	MetricList
}
