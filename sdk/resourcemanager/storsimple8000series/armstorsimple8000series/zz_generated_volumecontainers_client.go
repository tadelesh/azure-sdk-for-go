//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstorsimple8000series

import (
	"context"
	"errors"
	"net/http"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// VolumeContainersClient contains the methods for the VolumeContainers group.
// Don't use this type directly, use NewVolumeContainersClient() instead.
type VolumeContainersClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewVolumeContainersClient creates a new instance of VolumeContainersClient with the specified values.
func NewVolumeContainersClient(con *arm.Connection, subscriptionID string) *VolumeContainersClient {
	return &VolumeContainersClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version), subscriptionID: subscriptionID}
}

// BeginCreateOrUpdate - Creates or updates the volume container.
// If the operation fails it returns a generic error.
func (client *VolumeContainersClient) BeginCreateOrUpdate(ctx context.Context, deviceName string, volumeContainerName string, resourceGroupName string, managerName string, parameters VolumeContainer, options *VolumeContainersBeginCreateOrUpdateOptions) (VolumeContainersCreateOrUpdatePollerResponse, error) {
	resp, err := client.createOrUpdate(ctx, deviceName, volumeContainerName, resourceGroupName, managerName, parameters, options)
	if err != nil {
		return VolumeContainersCreateOrUpdatePollerResponse{}, err
	}
	result := VolumeContainersCreateOrUpdatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("VolumeContainersClient.CreateOrUpdate", "", resp, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return VolumeContainersCreateOrUpdatePollerResponse{}, err
	}
	result.Poller = &VolumeContainersCreateOrUpdatePoller{
		pt: pt,
	}
	return result, nil
}

// CreateOrUpdate - Creates or updates the volume container.
// If the operation fails it returns a generic error.
func (client *VolumeContainersClient) createOrUpdate(ctx context.Context, deviceName string, volumeContainerName string, resourceGroupName string, managerName string, parameters VolumeContainer, options *VolumeContainersBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, deviceName, volumeContainerName, resourceGroupName, managerName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *VolumeContainersClient) createOrUpdateCreateRequest(ctx context.Context, deviceName string, volumeContainerName string, resourceGroupName string, managerName string, parameters VolumeContainer, options *VolumeContainersBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}"
	if deviceName == "" {
		return nil, errors.New("parameter deviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceName}", deviceName)
	if volumeContainerName == "" {
		return nil, errors.New("parameter volumeContainerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{volumeContainerName}", volumeContainerName)
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *VolumeContainersClient) createOrUpdateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// BeginDelete - Deletes the volume container.
// If the operation fails it returns a generic error.
func (client *VolumeContainersClient) BeginDelete(ctx context.Context, deviceName string, volumeContainerName string, resourceGroupName string, managerName string, options *VolumeContainersBeginDeleteOptions) (VolumeContainersDeletePollerResponse, error) {
	resp, err := client.deleteOperation(ctx, deviceName, volumeContainerName, resourceGroupName, managerName, options)
	if err != nil {
		return VolumeContainersDeletePollerResponse{}, err
	}
	result := VolumeContainersDeletePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("VolumeContainersClient.Delete", "", resp, client.pl, client.deleteHandleError)
	if err != nil {
		return VolumeContainersDeletePollerResponse{}, err
	}
	result.Poller = &VolumeContainersDeletePoller{
		pt: pt,
	}
	return result, nil
}

// Delete - Deletes the volume container.
// If the operation fails it returns a generic error.
func (client *VolumeContainersClient) deleteOperation(ctx context.Context, deviceName string, volumeContainerName string, resourceGroupName string, managerName string, options *VolumeContainersBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, deviceName, volumeContainerName, resourceGroupName, managerName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *VolumeContainersClient) deleteCreateRequest(ctx context.Context, deviceName string, volumeContainerName string, resourceGroupName string, managerName string, options *VolumeContainersBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}"
	if deviceName == "" {
		return nil, errors.New("parameter deviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceName}", deviceName)
	if volumeContainerName == "" {
		return nil, errors.New("parameter volumeContainerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{volumeContainerName}", volumeContainerName)
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *VolumeContainersClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// Get - Gets the properties of the specified volume container name.
// If the operation fails it returns a generic error.
func (client *VolumeContainersClient) Get(ctx context.Context, deviceName string, volumeContainerName string, resourceGroupName string, managerName string, options *VolumeContainersGetOptions) (VolumeContainersGetResponse, error) {
	req, err := client.getCreateRequest(ctx, deviceName, volumeContainerName, resourceGroupName, managerName, options)
	if err != nil {
		return VolumeContainersGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return VolumeContainersGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return VolumeContainersGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *VolumeContainersClient) getCreateRequest(ctx context.Context, deviceName string, volumeContainerName string, resourceGroupName string, managerName string, options *VolumeContainersGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}"
	if deviceName == "" {
		return nil, errors.New("parameter deviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceName}", deviceName)
	if volumeContainerName == "" {
		return nil, errors.New("parameter volumeContainerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{volumeContainerName}", volumeContainerName)
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *VolumeContainersClient) getHandleResponse(resp *http.Response) (VolumeContainersGetResponse, error) {
	result := VolumeContainersGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.VolumeContainer); err != nil {
		return VolumeContainersGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *VolumeContainersClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// ListByDevice - Gets all the volume containers in a device.
// If the operation fails it returns a generic error.
func (client *VolumeContainersClient) ListByDevice(ctx context.Context, deviceName string, resourceGroupName string, managerName string, options *VolumeContainersListByDeviceOptions) (VolumeContainersListByDeviceResponse, error) {
	req, err := client.listByDeviceCreateRequest(ctx, deviceName, resourceGroupName, managerName, options)
	if err != nil {
		return VolumeContainersListByDeviceResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return VolumeContainersListByDeviceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return VolumeContainersListByDeviceResponse{}, client.listByDeviceHandleError(resp)
	}
	return client.listByDeviceHandleResponse(resp)
}

// listByDeviceCreateRequest creates the ListByDevice request.
func (client *VolumeContainersClient) listByDeviceCreateRequest(ctx context.Context, deviceName string, resourceGroupName string, managerName string, options *VolumeContainersListByDeviceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers"
	if deviceName == "" {
		return nil, errors.New("parameter deviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceName}", deviceName)
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByDeviceHandleResponse handles the ListByDevice response.
func (client *VolumeContainersClient) listByDeviceHandleResponse(resp *http.Response) (VolumeContainersListByDeviceResponse, error) {
	result := VolumeContainersListByDeviceResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.VolumeContainerList); err != nil {
		return VolumeContainersListByDeviceResponse{}, err
	}
	return result, nil
}

// listByDeviceHandleError handles the ListByDevice error response.
func (client *VolumeContainersClient) listByDeviceHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// ListMetricDefinition - Gets the metric definitions for the specified volume container.
// If the operation fails it returns a generic error.
func (client *VolumeContainersClient) ListMetricDefinition(ctx context.Context, deviceName string, volumeContainerName string, resourceGroupName string, managerName string, options *VolumeContainersListMetricDefinitionOptions) (VolumeContainersListMetricDefinitionResponse, error) {
	req, err := client.listMetricDefinitionCreateRequest(ctx, deviceName, volumeContainerName, resourceGroupName, managerName, options)
	if err != nil {
		return VolumeContainersListMetricDefinitionResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return VolumeContainersListMetricDefinitionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return VolumeContainersListMetricDefinitionResponse{}, client.listMetricDefinitionHandleError(resp)
	}
	return client.listMetricDefinitionHandleResponse(resp)
}

// listMetricDefinitionCreateRequest creates the ListMetricDefinition request.
func (client *VolumeContainersClient) listMetricDefinitionCreateRequest(ctx context.Context, deviceName string, volumeContainerName string, resourceGroupName string, managerName string, options *VolumeContainersListMetricDefinitionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/metricsDefinitions"
	if deviceName == "" {
		return nil, errors.New("parameter deviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceName}", deviceName)
	if volumeContainerName == "" {
		return nil, errors.New("parameter volumeContainerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{volumeContainerName}", volumeContainerName)
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listMetricDefinitionHandleResponse handles the ListMetricDefinition response.
func (client *VolumeContainersClient) listMetricDefinitionHandleResponse(resp *http.Response) (VolumeContainersListMetricDefinitionResponse, error) {
	result := VolumeContainersListMetricDefinitionResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.MetricDefinitionList); err != nil {
		return VolumeContainersListMetricDefinitionResponse{}, err
	}
	return result, nil
}

// listMetricDefinitionHandleError handles the ListMetricDefinition error response.
func (client *VolumeContainersClient) listMetricDefinitionHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// ListMetrics - Gets the metrics for the specified volume container.
// If the operation fails it returns a generic error.
func (client *VolumeContainersClient) ListMetrics(ctx context.Context, deviceName string, volumeContainerName string, resourceGroupName string, managerName string, filter string, options *VolumeContainersListMetricsOptions) (VolumeContainersListMetricsResponse, error) {
	req, err := client.listMetricsCreateRequest(ctx, deviceName, volumeContainerName, resourceGroupName, managerName, filter, options)
	if err != nil {
		return VolumeContainersListMetricsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return VolumeContainersListMetricsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return VolumeContainersListMetricsResponse{}, client.listMetricsHandleError(resp)
	}
	return client.listMetricsHandleResponse(resp)
}

// listMetricsCreateRequest creates the ListMetrics request.
func (client *VolumeContainersClient) listMetricsCreateRequest(ctx context.Context, deviceName string, volumeContainerName string, resourceGroupName string, managerName string, filter string, options *VolumeContainersListMetricsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/metrics"
	if deviceName == "" {
		return nil, errors.New("parameter deviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceName}", deviceName)
	if volumeContainerName == "" {
		return nil, errors.New("parameter volumeContainerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{volumeContainerName}", volumeContainerName)
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	reqQP.Set("$filter", filter)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listMetricsHandleResponse handles the ListMetrics response.
func (client *VolumeContainersClient) listMetricsHandleResponse(resp *http.Response) (VolumeContainersListMetricsResponse, error) {
	result := VolumeContainersListMetricsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.MetricList); err != nil {
		return VolumeContainersListMetricsResponse{}, err
	}
	return result, nil
}

// listMetricsHandleError handles the ListMetrics error response.
func (client *VolumeContainersClient) listMetricsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}
