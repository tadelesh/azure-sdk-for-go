//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstorsimple8000series

import (
	"context"
	"errors"
	"net/http"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// CloudAppliancesClient contains the methods for the CloudAppliances group.
// Don't use this type directly, use NewCloudAppliancesClient() instead.
type CloudAppliancesClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewCloudAppliancesClient creates a new instance of CloudAppliancesClient with the specified values.
func NewCloudAppliancesClient(con *arm.Connection, subscriptionID string) *CloudAppliancesClient {
	return &CloudAppliancesClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version), subscriptionID: subscriptionID}
}

// ListSupportedConfigurations - Lists supported cloud appliance models and supported configurations.
// If the operation fails it returns a generic error.
func (client *CloudAppliancesClient) ListSupportedConfigurations(ctx context.Context, resourceGroupName string, managerName string, options *CloudAppliancesListSupportedConfigurationsOptions) (CloudAppliancesListSupportedConfigurationsResponse, error) {
	req, err := client.listSupportedConfigurationsCreateRequest(ctx, resourceGroupName, managerName, options)
	if err != nil {
		return CloudAppliancesListSupportedConfigurationsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CloudAppliancesListSupportedConfigurationsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CloudAppliancesListSupportedConfigurationsResponse{}, client.listSupportedConfigurationsHandleError(resp)
	}
	return client.listSupportedConfigurationsHandleResponse(resp)
}

// listSupportedConfigurationsCreateRequest creates the ListSupportedConfigurations request.
func (client *CloudAppliancesClient) listSupportedConfigurationsCreateRequest(ctx context.Context, resourceGroupName string, managerName string, options *CloudAppliancesListSupportedConfigurationsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/cloudApplianceConfigurations"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listSupportedConfigurationsHandleResponse handles the ListSupportedConfigurations response.
func (client *CloudAppliancesClient) listSupportedConfigurationsHandleResponse(resp *http.Response) (CloudAppliancesListSupportedConfigurationsResponse, error) {
	result := CloudAppliancesListSupportedConfigurationsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.CloudApplianceConfigurationList); err != nil {
		return CloudAppliancesListSupportedConfigurationsResponse{}, err
	}
	return result, nil
}

// listSupportedConfigurationsHandleError handles the ListSupportedConfigurations error response.
func (client *CloudAppliancesClient) listSupportedConfigurationsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// BeginProvision - Provisions cloud appliance.
// If the operation fails it returns a generic error.
func (client *CloudAppliancesClient) BeginProvision(ctx context.Context, resourceGroupName string, managerName string, parameters CloudAppliance, options *CloudAppliancesBeginProvisionOptions) (CloudAppliancesProvisionPollerResponse, error) {
	resp, err := client.provision(ctx, resourceGroupName, managerName, parameters, options)
	if err != nil {
		return CloudAppliancesProvisionPollerResponse{}, err
	}
	result := CloudAppliancesProvisionPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("CloudAppliancesClient.Provision", "", resp, client.pl, client.provisionHandleError)
	if err != nil {
		return CloudAppliancesProvisionPollerResponse{}, err
	}
	result.Poller = &CloudAppliancesProvisionPoller{
		pt: pt,
	}
	return result, nil
}

// Provision - Provisions cloud appliance.
// If the operation fails it returns a generic error.
func (client *CloudAppliancesClient) provision(ctx context.Context, resourceGroupName string, managerName string, parameters CloudAppliance, options *CloudAppliancesBeginProvisionOptions) (*http.Response, error) {
	req, err := client.provisionCreateRequest(ctx, resourceGroupName, managerName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.provisionHandleError(resp)
	}
	return resp, nil
}

// provisionCreateRequest creates the Provision request.
func (client *CloudAppliancesClient) provisionCreateRequest(ctx context.Context, resourceGroupName string, managerName string, parameters CloudAppliance, options *CloudAppliancesBeginProvisionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/provisionCloudAppliance"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, runtime.MarshalAsJSON(req, parameters)
}

// provisionHandleError handles the Provision error response.
func (client *CloudAppliancesClient) provisionHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}
