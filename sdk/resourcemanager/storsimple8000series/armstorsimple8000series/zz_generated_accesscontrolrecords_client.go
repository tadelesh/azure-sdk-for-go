//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstorsimple8000series

import (
	"context"
	"errors"
	"net/http"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// AccessControlRecordsClient contains the methods for the AccessControlRecords group.
// Don't use this type directly, use NewAccessControlRecordsClient() instead.
type AccessControlRecordsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewAccessControlRecordsClient creates a new instance of AccessControlRecordsClient with the specified values.
func NewAccessControlRecordsClient(con *arm.Connection, subscriptionID string) *AccessControlRecordsClient {
	return &AccessControlRecordsClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version), subscriptionID: subscriptionID}
}

// BeginCreateOrUpdate - Creates or Updates an access control record.
// If the operation fails it returns a generic error.
func (client *AccessControlRecordsClient) BeginCreateOrUpdate(ctx context.Context, accessControlRecordName string, resourceGroupName string, managerName string, parameters AccessControlRecord, options *AccessControlRecordsBeginCreateOrUpdateOptions) (AccessControlRecordsCreateOrUpdatePollerResponse, error) {
	resp, err := client.createOrUpdate(ctx, accessControlRecordName, resourceGroupName, managerName, parameters, options)
	if err != nil {
		return AccessControlRecordsCreateOrUpdatePollerResponse{}, err
	}
	result := AccessControlRecordsCreateOrUpdatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("AccessControlRecordsClient.CreateOrUpdate", "", resp, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return AccessControlRecordsCreateOrUpdatePollerResponse{}, err
	}
	result.Poller = &AccessControlRecordsCreateOrUpdatePoller{
		pt: pt,
	}
	return result, nil
}

// CreateOrUpdate - Creates or Updates an access control record.
// If the operation fails it returns a generic error.
func (client *AccessControlRecordsClient) createOrUpdate(ctx context.Context, accessControlRecordName string, resourceGroupName string, managerName string, parameters AccessControlRecord, options *AccessControlRecordsBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, accessControlRecordName, resourceGroupName, managerName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *AccessControlRecordsClient) createOrUpdateCreateRequest(ctx context.Context, accessControlRecordName string, resourceGroupName string, managerName string, parameters AccessControlRecord, options *AccessControlRecordsBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/accessControlRecords/{accessControlRecordName}"
	if accessControlRecordName == "" {
		return nil, errors.New("parameter accessControlRecordName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accessControlRecordName}", accessControlRecordName)
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *AccessControlRecordsClient) createOrUpdateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// BeginDelete - Deletes the access control record.
// If the operation fails it returns a generic error.
func (client *AccessControlRecordsClient) BeginDelete(ctx context.Context, accessControlRecordName string, resourceGroupName string, managerName string, options *AccessControlRecordsBeginDeleteOptions) (AccessControlRecordsDeletePollerResponse, error) {
	resp, err := client.deleteOperation(ctx, accessControlRecordName, resourceGroupName, managerName, options)
	if err != nil {
		return AccessControlRecordsDeletePollerResponse{}, err
	}
	result := AccessControlRecordsDeletePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("AccessControlRecordsClient.Delete", "", resp, client.pl, client.deleteHandleError)
	if err != nil {
		return AccessControlRecordsDeletePollerResponse{}, err
	}
	result.Poller = &AccessControlRecordsDeletePoller{
		pt: pt,
	}
	return result, nil
}

// Delete - Deletes the access control record.
// If the operation fails it returns a generic error.
func (client *AccessControlRecordsClient) deleteOperation(ctx context.Context, accessControlRecordName string, resourceGroupName string, managerName string, options *AccessControlRecordsBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, accessControlRecordName, resourceGroupName, managerName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *AccessControlRecordsClient) deleteCreateRequest(ctx context.Context, accessControlRecordName string, resourceGroupName string, managerName string, options *AccessControlRecordsBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/accessControlRecords/{accessControlRecordName}"
	if accessControlRecordName == "" {
		return nil, errors.New("parameter accessControlRecordName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accessControlRecordName}", accessControlRecordName)
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *AccessControlRecordsClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// Get - Returns the properties of the specified access control record name.
// If the operation fails it returns a generic error.
func (client *AccessControlRecordsClient) Get(ctx context.Context, accessControlRecordName string, resourceGroupName string, managerName string, options *AccessControlRecordsGetOptions) (AccessControlRecordsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, accessControlRecordName, resourceGroupName, managerName, options)
	if err != nil {
		return AccessControlRecordsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AccessControlRecordsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return AccessControlRecordsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *AccessControlRecordsClient) getCreateRequest(ctx context.Context, accessControlRecordName string, resourceGroupName string, managerName string, options *AccessControlRecordsGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/accessControlRecords/{accessControlRecordName}"
	if accessControlRecordName == "" {
		return nil, errors.New("parameter accessControlRecordName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accessControlRecordName}", accessControlRecordName)
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AccessControlRecordsClient) getHandleResponse(resp *http.Response) (AccessControlRecordsGetResponse, error) {
	result := AccessControlRecordsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AccessControlRecord); err != nil {
		return AccessControlRecordsGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *AccessControlRecordsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// ListByManager - Retrieves all the access control records in a manager.
// If the operation fails it returns a generic error.
func (client *AccessControlRecordsClient) ListByManager(ctx context.Context, resourceGroupName string, managerName string, options *AccessControlRecordsListByManagerOptions) (AccessControlRecordsListByManagerResponse, error) {
	req, err := client.listByManagerCreateRequest(ctx, resourceGroupName, managerName, options)
	if err != nil {
		return AccessControlRecordsListByManagerResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AccessControlRecordsListByManagerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return AccessControlRecordsListByManagerResponse{}, client.listByManagerHandleError(resp)
	}
	return client.listByManagerHandleResponse(resp)
}

// listByManagerCreateRequest creates the ListByManager request.
func (client *AccessControlRecordsClient) listByManagerCreateRequest(ctx context.Context, resourceGroupName string, managerName string, options *AccessControlRecordsListByManagerOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/accessControlRecords"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", client.subscriptionID)
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", resourceGroupName)
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", managerName)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByManagerHandleResponse handles the ListByManager response.
func (client *AccessControlRecordsClient) listByManagerHandleResponse(resp *http.Response) (AccessControlRecordsListByManagerResponse, error) {
	result := AccessControlRecordsListByManagerResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AccessControlRecordList); err != nil {
		return AccessControlRecordsListByManagerResponse{}, err
	}
	return result, nil
}

// listByManagerHandleError handles the ListByManager error response.
func (client *AccessControlRecordsClient) listByManagerHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}
