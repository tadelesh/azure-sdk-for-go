//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcdn_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cdn/armcdn"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestAFDProfiles_ListResourceUsage(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDProfiles_ListResourceUsage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDProfiles_ListResourceUsage"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDProfilesClient("subid", cred, &options)
	pager := client.ListResourceUsage("RG",
		"profile1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDProfiles_ListResourceUsage.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.UsagesListResult{
			Value: []*armcdn.Usage{
				{
					Name: &armcdn.UsageName{
						LocalizedValue: to.Ptr("afdEndpoint"),
						Value:          to.Ptr("afdEndpoint"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/afdendpoints/endpoint1"),
					Limit:        to.Ptr[int64](25),
					Unit:         to.Ptr(armcdn.UsageUnitCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsagesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsagesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDProfiles_ListResourceUsage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAFDProfiles_CheckHostNameAvailability(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDProfiles_CheckHostNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDProfiles_CheckHostNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDProfilesClient("subid", cred, &options)
	res, err := client.CheckHostNameAvailability(ctx,
		"RG",
		"profile1",
		armcdn.CheckHostNameAvailabilityInput{
			HostName: to.Ptr("www.someDomain.net"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDProfiles_CheckHostNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.CheckNameAvailabilityOutput{
			Message:       to.Ptr("The hostname 'www.someDomain.net' is already owned by another profile."),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr("Conflict"),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityOutput) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityOutput)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDProfiles_CheckHostNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAFDCustomDomains_ListByProfile(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDCustomDomains_ListByProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDCustomDomains_ListByProfile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDCustomDomainsClient("subid", cred, &options)
	pager := client.ListByProfile("RG",
		"profile1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDCustomDomains_ListByProfile.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.AFDDomainListResult{
			Value: []*armcdn.AFDDomain{
				{
					Name: to.Ptr("domain1"),
					Type: to.Ptr("Microsoft.Cdn/Profiles/CustomDomains"),
					ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/domains/domain1"),
					Properties: &armcdn.AFDDomainProperties{
						AzureDNSZone: &armcdn.ResourceReference{
							ID: to.Ptr(""),
						},
						TLSSettings: &armcdn.AFDDomainHTTPSParameters{
							CertificateType:   to.Ptr(armcdn.AfdCertificateTypeManagedCertificate),
							MinimumTLSVersion: to.Ptr(armcdn.AfdMinimumTLSVersionTLS12),
							Secret: &armcdn.ResourceReference{
								ID: to.Ptr(""),
							},
						},
						DeploymentStatus:      to.Ptr(armcdn.DeploymentStatusNotStarted),
						ProvisioningState:     to.Ptr(armcdn.AfdProvisioningStateSucceeded),
						DomainValidationState: to.Ptr(armcdn.DomainValidationStatePending),
						HostName:              to.Ptr("www.contoso.com"),
						ValidationProperties: &armcdn.DomainValidationProperties{
							ExpirationDate:  to.Ptr("2009-06-15T13:45:43.0000000Z"),
							ValidationToken: to.Ptr("8c9912db-c615-4eeb-8465"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AFDDomainListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AFDDomainListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDCustomDomains_ListByProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAFDCustomDomains_Get(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDCustomDomains_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDCustomDomains_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDCustomDomainsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"RG",
		"profile1",
		"domain1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDCustomDomains_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.AFDDomain{
			Name: to.Ptr("domain1"),
			Type: to.Ptr("Microsoft.Cdn/Profiles/CustomDomains"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/domains/domain1"),
			Properties: &armcdn.AFDDomainProperties{
				AzureDNSZone: &armcdn.ResourceReference{
					ID: to.Ptr(""),
				},
				TLSSettings: &armcdn.AFDDomainHTTPSParameters{
					CertificateType:   to.Ptr(armcdn.AfdCertificateTypeManagedCertificate),
					MinimumTLSVersion: to.Ptr(armcdn.AfdMinimumTLSVersionTLS12),
					Secret: &armcdn.ResourceReference{
						ID: to.Ptr(""),
					},
				},
				DeploymentStatus:      to.Ptr(armcdn.DeploymentStatusNotStarted),
				ProvisioningState:     to.Ptr(armcdn.AfdProvisioningStateSucceeded),
				DomainValidationState: to.Ptr(armcdn.DomainValidationStatePending),
				HostName:              to.Ptr("www.contoso.com"),
				ValidationProperties: &armcdn.DomainValidationProperties{
					ExpirationDate:  to.Ptr("2009-06-15T13:45:43.0000000Z"),
					ValidationToken: to.Ptr("8c9912db-c615-4eeb-8465"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AFDDomain) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AFDDomain)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDCustomDomains_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAFDCustomDomains_Create(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDCustomDomains_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDCustomDomains_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDCustomDomainsClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"RG",
		"profile1",
		"domain1",
		armcdn.AFDDomain{
			Properties: &armcdn.AFDDomainProperties{
				AzureDNSZone: &armcdn.ResourceReference{
					ID: to.Ptr(""),
				},
				TLSSettings: &armcdn.AFDDomainHTTPSParameters{
					CertificateType:   to.Ptr(armcdn.AfdCertificateTypeManagedCertificate),
					MinimumTLSVersion: to.Ptr(armcdn.AfdMinimumTLSVersionTLS12),
				},
				HostName: to.Ptr("www.someDomain.net"),
			},
		},
		&armcdn.AFDCustomDomainsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDCustomDomains_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDCustomDomains_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.AFDDomain{
			Name: to.Ptr("domain1"),
			Type: to.Ptr("Microsoft.Cdn/Profiles/CustomDomains"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/domains/domain1"),
			Properties: &armcdn.AFDDomainProperties{
				AzureDNSZone: &armcdn.ResourceReference{
					ID: to.Ptr(""),
				},
				TLSSettings: &armcdn.AFDDomainHTTPSParameters{
					CertificateType:   to.Ptr(armcdn.AfdCertificateTypeManagedCertificate),
					MinimumTLSVersion: to.Ptr(armcdn.AfdMinimumTLSVersionTLS12),
					Secret: &armcdn.ResourceReference{
						ID: to.Ptr(""),
					},
				},
				DeploymentStatus:      to.Ptr(armcdn.DeploymentStatusNotStarted),
				ProvisioningState:     to.Ptr(armcdn.AfdProvisioningStateSucceeded),
				DomainValidationState: to.Ptr(armcdn.DomainValidationStateSubmitting),
				HostName:              to.Ptr("www.contoso.com"),
				ValidationProperties: &armcdn.DomainValidationProperties{
					ExpirationDate:  to.Ptr(""),
					ValidationToken: to.Ptr(""),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AFDDomain) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AFDDomain)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDCustomDomains_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAFDCustomDomains_Update(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDCustomDomains_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDCustomDomains_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDCustomDomainsClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"RG",
		"profile1",
		"domain1",
		armcdn.AFDDomainUpdateParameters{
			Properties: &armcdn.AFDDomainUpdatePropertiesParameters{
				AzureDNSZone: &armcdn.ResourceReference{
					ID: to.Ptr(""),
				},
				TLSSettings: &armcdn.AFDDomainHTTPSParameters{
					CertificateType:   to.Ptr(armcdn.AfdCertificateTypeCustomerCertificate),
					MinimumTLSVersion: to.Ptr(armcdn.AfdMinimumTLSVersionTLS12),
				},
			},
		},
		&armcdn.AFDCustomDomainsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDCustomDomains_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDCustomDomains_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.AFDDomain{
			Name: to.Ptr("domain1"),
			Type: to.Ptr("Microsoft.Cdn/Profiles/CustomDomains"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/domains/domain1"),
			Properties: &armcdn.AFDDomainProperties{
				AzureDNSZone: &armcdn.ResourceReference{
					ID: to.Ptr(""),
				},
				TLSSettings: &armcdn.AFDDomainHTTPSParameters{
					CertificateType:   to.Ptr(armcdn.AfdCertificateTypeManagedCertificate),
					MinimumTLSVersion: to.Ptr(armcdn.AfdMinimumTLSVersionTLS12),
					Secret: &armcdn.ResourceReference{
						ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/secrets/mysecert"),
					},
				},
				DeploymentStatus:      to.Ptr(armcdn.DeploymentStatusNotStarted),
				ProvisioningState:     to.Ptr(armcdn.AfdProvisioningStateSucceeded),
				DomainValidationState: to.Ptr(armcdn.DomainValidationStateApproved),
				HostName:              to.Ptr("www.contoso.com"),
				ValidationProperties: &armcdn.DomainValidationProperties{
					ExpirationDate:  to.Ptr("2009-06-15T13:45:43.0000000Z"),
					ValidationToken: to.Ptr("8c9912db-c615-4eeb-8465"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AFDDomain) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AFDDomain)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDCustomDomains_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAFDCustomDomains_Delete(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDCustomDomains_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDCustomDomains_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDCustomDomainsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"RG",
		"profile1",
		"domain1",
		&armcdn.AFDCustomDomainsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDCustomDomains_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDCustomDomains_Delete.json: %v", err)
	}
}

func TestAFDCustomDomains_RefreshValidationToken(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDCustomDomains_RefreshValidationToken.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDCustomDomains_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDCustomDomainsClient("subid", cred, &options)
	poller, err := client.BeginRefreshValidationToken(ctx,
		"RG",
		"profile1",
		"domain1",
		&armcdn.AFDCustomDomainsClientBeginRefreshValidationTokenOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDCustomDomains_RefreshValidationToken.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDCustomDomains_RefreshValidationToken.json: %v", err)
	}
}

func TestAFDEndpoints_ListByProfile(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_ListByProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDEndpoints_ListByProfile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDEndpointsClient("subid", cred, &options)
	pager := client.ListByProfile("RG",
		"profile1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_ListByProfile.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.AFDEndpointListResult{
			Value: []*armcdn.AFDEndpoint{
				{
					Name:     to.Ptr("endpoint1"),
					Type:     to.Ptr("Microsoft.Cdn/profiles/afdendpoints"),
					ID:       to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/afdendpoints/endpoint1"),
					Location: to.Ptr("CentralUs"),
					Tags:     map[string]*string{},
					Properties: &armcdn.AFDEndpointProperties{
						EnabledState:      to.Ptr(armcdn.EnabledStateEnabled),
						DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusSucceeded),
						ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
						HostName:          to.Ptr("endpoint1.azureedge.net"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AFDEndpointListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AFDEndpointListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_ListByProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAFDEndpoints_Get(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDEndpoints_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDEndpointsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"RG",
		"profile1",
		"endpoint1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.AFDEndpoint{
			Name:     to.Ptr("endpoint1"),
			Type:     to.Ptr("Microsoft.Cdn/profiles/afdendpoints"),
			ID:       to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/afdendpoints/endpoint1"),
			Location: to.Ptr("CentralUs"),
			Tags:     map[string]*string{},
			Properties: &armcdn.AFDEndpointProperties{
				EnabledState:      to.Ptr(armcdn.EnabledStateEnabled),
				DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusSucceeded),
				ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
				HostName:          to.Ptr("endpoint1.azureedge.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AFDEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AFDEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAFDEndpoints_Create(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDEndpoints_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDEndpointsClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"RG",
		"profile1",
		"endpoint1",
		armcdn.AFDEndpoint{
			Location: to.Ptr("CentralUs"),
			Tags:     map[string]*string{},
			Properties: &armcdn.AFDEndpointProperties{
				EnabledState: to.Ptr(armcdn.EnabledStateEnabled),
			},
		},
		&armcdn.AFDEndpointsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.AFDEndpoint{
			Name:     to.Ptr("endpoint1"),
			Type:     to.Ptr("Microsoft.Cdn/profiles/afdEndpoints"),
			ID:       to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/afdEndpoints/endpoint1"),
			Location: to.Ptr("CentralUs"),
			Tags:     map[string]*string{},
			Properties: &armcdn.AFDEndpointProperties{
				EnabledState:      to.Ptr(armcdn.EnabledStateEnabled),
				DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusNotStarted),
				ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
				HostName:          to.Ptr("endpoint1.azureedge.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AFDEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AFDEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAFDEndpoints_Update(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDEndpoints_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDEndpointsClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"RG",
		"profile1",
		"endpoint1",
		armcdn.AFDEndpointUpdateParameters{
			Properties: &armcdn.AFDEndpointPropertiesUpdateParameters{
				EnabledState: to.Ptr(armcdn.EnabledStateEnabled),
			},
			Tags: map[string]*string{},
		},
		&armcdn.AFDEndpointsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.AFDEndpoint{
			Name:     to.Ptr("endpoint1"),
			Type:     to.Ptr("Microsoft.Cdn/profiles/afdendpoints"),
			ID:       to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/afdendpoints/endpoint1"),
			Location: to.Ptr("WestCentralUs"),
			Tags:     map[string]*string{},
			Properties: &armcdn.AFDEndpointProperties{
				EnabledState:      to.Ptr(armcdn.EnabledStateEnabled),
				DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusInProgress),
				ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
				HostName:          to.Ptr("endpoint1.azureedge.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AFDEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AFDEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAFDEndpoints_Delete(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDEndpoints_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDEndpointsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"RG",
		"profile1",
		"endpoint1",
		&armcdn.AFDEndpointsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_Delete.json: %v", err)
	}
}

func TestAFDEndpoints_PurgeContent(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_PurgeContent.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDEndpoints_PurgeContent"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDEndpointsClient("subid", cred, &options)
	poller, err := client.BeginPurgeContent(ctx,
		"RG",
		"profile1",
		"endpoint1",
		armcdn.AfdPurgeParameters{
			ContentPaths: []*string{
				to.Ptr("/folder1")},
			Domains: []*string{
				to.Ptr("endpoint1.azureedge.net")},
		},
		&armcdn.AFDEndpointsClientBeginPurgeContentOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_PurgeContent.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_PurgeContent.json: %v", err)
	}
}

func TestAFDEndpoints_ListResourceUsage(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_ListResourceUsage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDEndpoints_ListResourceUsage"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDEndpointsClient("subid", cred, &options)
	pager := client.ListResourceUsage("RG",
		"profile1",
		"endpoint1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_ListResourceUsage.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.UsagesListResult{
			Value: []*armcdn.Usage{
				{
					Name: &armcdn.UsageName{
						LocalizedValue: to.Ptr("route"),
						Value:          to.Ptr("route"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/afdendpoints/endpoint1/routes/route1"),
					Limit:        to.Ptr[int64](25),
					Unit:         to.Ptr(armcdn.UsageUnitCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsagesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsagesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_ListResourceUsage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAFDEndpoints_ValidateCustomDomain(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_ValidateCustomDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Endpoints_ValidateCustomDomain"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDEndpointsClient("subid", cred, &options)
	res, err := client.ValidateCustomDomain(ctx,
		"RG",
		"profile1",
		"endpoint1",
		armcdn.ValidateCustomDomainInput{
			HostName: to.Ptr("www.someDomain.com"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_ValidateCustomDomain.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.ValidateCustomDomainOutput{
			CustomDomainValidated: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.ValidateCustomDomainOutput) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ValidateCustomDomainOutput)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDEndpoints_ValidateCustomDomain.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAFDOriginGroups_ListByProfile(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOriginGroups_ListByProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDOriginGroups_ListByProfile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDOriginGroupsClient("subid", cred, &options)
	pager := client.ListByProfile("RG",
		"profile1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOriginGroups_ListByProfile.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.AFDOriginGroupListResult{
			Value: []*armcdn.AFDOriginGroup{
				{
					Name: to.Ptr("origingroup1"),
					Type: to.Ptr("Microsoft.Cdn/profiles/origingroups"),
					ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/origingroups/origingroup1"),
					Properties: &armcdn.AFDOriginGroupProperties{
						HealthProbeSettings: &armcdn.HealthProbeParameters{
							ProbeIntervalInSeconds: to.Ptr[int32](10),
							ProbePath:              to.Ptr("/path1"),
							ProbeProtocol:          to.Ptr(armcdn.ProbeProtocolHTTP),
							ProbeRequestType:       to.Ptr(armcdn.HealthProbeRequestTypeHEAD),
						},
						LoadBalancingSettings: &armcdn.LoadBalancingSettingsParameters{
							AdditionalLatencyInMilliseconds: to.Ptr[int32](1000),
							SampleSize:                      to.Ptr[int32](3),
							SuccessfulSamplesRequired:       to.Ptr[int32](3),
						},
						TrafficRestorationTimeToHealedOrNewEndpointsInMinutes: to.Ptr[int32](5),
						DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusNotStarted),
						ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AFDOriginGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AFDOriginGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOriginGroups_ListByProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAFDOriginGroups_Get(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOriginGroups_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDOriginGroups_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDOriginGroupsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"RG",
		"profile1",
		"origingroup1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOriginGroups_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.AFDOriginGroup{
			Name: to.Ptr("origingroup1"),
			Type: to.Ptr("Microsoft.Cdn/profiles/origingroups"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/origingroups/origingroup1"),
			Properties: &armcdn.AFDOriginGroupProperties{
				HealthProbeSettings: &armcdn.HealthProbeParameters{
					ProbeIntervalInSeconds: to.Ptr[int32](10),
					ProbePath:              to.Ptr("/path1"),
					ProbeProtocol:          to.Ptr(armcdn.ProbeProtocolHTTP),
					ProbeRequestType:       to.Ptr(armcdn.HealthProbeRequestTypeHEAD),
				},
				LoadBalancingSettings: &armcdn.LoadBalancingSettingsParameters{
					AdditionalLatencyInMilliseconds: to.Ptr[int32](1000),
					SampleSize:                      to.Ptr[int32](3),
					SuccessfulSamplesRequired:       to.Ptr[int32](3),
				},
				TrafficRestorationTimeToHealedOrNewEndpointsInMinutes: to.Ptr[int32](5),
				DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusNotStarted),
				ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AFDOriginGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AFDOriginGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOriginGroups_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAFDOriginGroups_Create(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOriginGroups_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDOriginGroups_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDOriginGroupsClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"RG",
		"profile1",
		"origingroup1",
		armcdn.AFDOriginGroup{
			Properties: &armcdn.AFDOriginGroupProperties{
				HealthProbeSettings: &armcdn.HealthProbeParameters{
					ProbeIntervalInSeconds: to.Ptr[int32](10),
					ProbePath:              to.Ptr("/path2"),
					ProbeProtocol:          to.Ptr(armcdn.ProbeProtocolNotSet),
					ProbeRequestType:       to.Ptr(armcdn.HealthProbeRequestTypeNotSet),
				},
				LoadBalancingSettings: &armcdn.LoadBalancingSettingsParameters{
					AdditionalLatencyInMilliseconds: to.Ptr[int32](1000),
					SampleSize:                      to.Ptr[int32](3),
					SuccessfulSamplesRequired:       to.Ptr[int32](3),
				},
				TrafficRestorationTimeToHealedOrNewEndpointsInMinutes: to.Ptr[int32](5),
			},
		},
		&armcdn.AFDOriginGroupsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOriginGroups_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOriginGroups_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.AFDOriginGroup{
			Name: to.Ptr("origingroup1"),
			Type: to.Ptr("Microsoft.Cdn/profiles/origingroups"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/origingroups/origingroup1"),
			Properties: &armcdn.AFDOriginGroupProperties{
				HealthProbeSettings: &armcdn.HealthProbeParameters{
					ProbeIntervalInSeconds: to.Ptr[int32](10),
					ProbePath:              to.Ptr("/path1"),
					ProbeProtocol:          to.Ptr(armcdn.ProbeProtocolHTTP),
					ProbeRequestType:       to.Ptr(armcdn.HealthProbeRequestTypeHEAD),
				},
				LoadBalancingSettings: &armcdn.LoadBalancingSettingsParameters{
					AdditionalLatencyInMilliseconds: to.Ptr[int32](1000),
					SampleSize:                      to.Ptr[int32](3),
					SuccessfulSamplesRequired:       to.Ptr[int32](3),
				},
				TrafficRestorationTimeToHealedOrNewEndpointsInMinutes: to.Ptr[int32](5),
				DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusNotStarted),
				ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AFDOriginGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AFDOriginGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOriginGroups_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAFDOriginGroups_Update(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOriginGroups_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDOriginGroups_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDOriginGroupsClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"RG",
		"profile1",
		"origingroup1",
		armcdn.AFDOriginGroupUpdateParameters{
			Properties: &armcdn.AFDOriginGroupUpdatePropertiesParameters{
				HealthProbeSettings: &armcdn.HealthProbeParameters{
					ProbeIntervalInSeconds: to.Ptr[int32](10),
					ProbePath:              to.Ptr("/path2"),
					ProbeProtocol:          to.Ptr(armcdn.ProbeProtocolNotSet),
					ProbeRequestType:       to.Ptr(armcdn.HealthProbeRequestTypeNotSet),
				},
				LoadBalancingSettings: &armcdn.LoadBalancingSettingsParameters{
					AdditionalLatencyInMilliseconds: to.Ptr[int32](1000),
					SampleSize:                      to.Ptr[int32](3),
					SuccessfulSamplesRequired:       to.Ptr[int32](3),
				},
				TrafficRestorationTimeToHealedOrNewEndpointsInMinutes: to.Ptr[int32](5),
			},
		},
		&armcdn.AFDOriginGroupsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOriginGroups_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOriginGroups_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.AFDOriginGroup{
			Name: to.Ptr("origingroup1"),
			Type: to.Ptr("Microsoft.Cdn/profiles/origingroups"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/origingroups/origingroup1"),
			Properties: &armcdn.AFDOriginGroupProperties{
				HealthProbeSettings: &armcdn.HealthProbeParameters{
					ProbeIntervalInSeconds: to.Ptr[int32](10),
					ProbePath:              to.Ptr("/path1"),
					ProbeProtocol:          to.Ptr(armcdn.ProbeProtocolHTTP),
					ProbeRequestType:       to.Ptr(armcdn.HealthProbeRequestTypeHEAD),
				},
				LoadBalancingSettings: &armcdn.LoadBalancingSettingsParameters{
					AdditionalLatencyInMilliseconds: to.Ptr[int32](1000),
					SampleSize:                      to.Ptr[int32](3),
					SuccessfulSamplesRequired:       to.Ptr[int32](3),
				},
				TrafficRestorationTimeToHealedOrNewEndpointsInMinutes: to.Ptr[int32](5),
				DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusNotStarted),
				ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AFDOriginGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AFDOriginGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOriginGroups_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAFDOriginGroups_Delete(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOriginGroups_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDOriginGroups_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDOriginGroupsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"RG",
		"profile1",
		"origingroup1",
		&armcdn.AFDOriginGroupsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOriginGroups_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOriginGroups_Delete.json: %v", err)
	}
}

func TestAFDOriginGroups_ListResourceUsage(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOriginGroups_ListResourceUsage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDOriginGroups_ListResourceUsage"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDOriginGroupsClient("subid", cred, &options)
	pager := client.ListResourceUsage("RG",
		"profile1",
		"origingroup1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOriginGroups_ListResourceUsage.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.UsagesListResult{
			Value: []*armcdn.Usage{
				{
					Name: &armcdn.UsageName{
						LocalizedValue: to.Ptr("origin"),
						Value:          to.Ptr("origin"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/origingroups/origingroup1/origins/origin1"),
					Limit:        to.Ptr[int64](25),
					Unit:         to.Ptr(armcdn.UsageUnitCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsagesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsagesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOriginGroups_ListResourceUsage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAFDOrigins_ListByOriginGroup(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOrigins_ListByOriginGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDOrigins_ListByOriginGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDOriginsClient("subid", cred, &options)
	pager := client.ListByOriginGroup("RG",
		"profile1",
		"origingroup1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOrigins_ListByOriginGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.AFDOriginListResult{
			Value: []*armcdn.AFDOrigin{
				{
					Name: to.Ptr("origin1"),
					Type: to.Ptr("Microsoft.Cdn/profiles/origingroups/origins"),
					ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/origingroups/origingroup1/origins/origin1"),
					Properties: &armcdn.AFDOriginProperties{
						EnabledState:      to.Ptr(armcdn.EnabledStateEnabled),
						HostName:          to.Ptr("host1.blob.core.windows.net"),
						HTTPPort:          to.Ptr[int32](80),
						HTTPSPort:         to.Ptr[int32](443),
						OriginHostHeader:  to.Ptr("host1.foo.com"),
						DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusNotStarted),
						ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AFDOriginListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AFDOriginListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOrigins_ListByOriginGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAFDOrigins_Get(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOrigins_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDOrigins_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDOriginsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"RG",
		"profile1",
		"origingroup1",
		"origin1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOrigins_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.AFDOrigin{
			Name: to.Ptr("origin1"),
			Type: to.Ptr("Microsoft.Cdn/profiles/origingroups/origins"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/origingroups/origingroup1/origins/origin1"),
			Properties: &armcdn.AFDOriginProperties{
				EnabledState:      to.Ptr(armcdn.EnabledStateEnabled),
				HostName:          to.Ptr("host1.blob.core.windows.net"),
				HTTPPort:          to.Ptr[int32](80),
				HTTPSPort:         to.Ptr[int32](443),
				OriginHostHeader:  to.Ptr("host1.foo.com"),
				DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusNotStarted),
				ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AFDOrigin) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AFDOrigin)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOrigins_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAFDOrigins_Create(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOrigins_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDOrigins_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDOriginsClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"RG",
		"profile1",
		"origingroup1",
		"origin1",
		armcdn.AFDOrigin{
			Properties: &armcdn.AFDOriginProperties{
				EnabledState:     to.Ptr(armcdn.EnabledStateEnabled),
				HostName:         to.Ptr("host1.blob.core.windows.net"),
				HTTPPort:         to.Ptr[int32](80),
				HTTPSPort:        to.Ptr[int32](443),
				OriginHostHeader: to.Ptr("host1.foo.com"),
			},
		},
		&armcdn.AFDOriginsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOrigins_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOrigins_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.AFDOrigin{
			Name: to.Ptr("origin1"),
			Type: to.Ptr("Microsoft.Cdn/profiles/origingroups/origins"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/origingroups/origingroup1/origins/origin1"),
			Properties: &armcdn.AFDOriginProperties{
				EnabledState:      to.Ptr(armcdn.EnabledStateEnabled),
				HostName:          to.Ptr("host1.blob.core.windows.net"),
				HTTPPort:          to.Ptr[int32](80),
				HTTPSPort:         to.Ptr[int32](443),
				OriginHostHeader:  to.Ptr("host1.foo.com"),
				DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusNotStarted),
				ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AFDOrigin) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AFDOrigin)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOrigins_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAFDOrigins_Update(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOrigins_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDOrigins_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDOriginsClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"RG",
		"profile1",
		"origingroup1",
		"origin1",
		armcdn.AFDOriginUpdateParameters{
			Properties: &armcdn.AFDOriginUpdatePropertiesParameters{
				EnabledState: to.Ptr(armcdn.EnabledStateEnabled),
				HostName:     to.Ptr("host1.blob.core.windows.net"),
				HTTPPort:     to.Ptr[int32](80),
				HTTPSPort:    to.Ptr[int32](443),
			},
		},
		&armcdn.AFDOriginsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOrigins_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOrigins_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.AFDOrigin{
			Name: to.Ptr("origin1"),
			Type: to.Ptr("Microsoft.Cdn/profiles/origingroups/origins"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/origingroups/origingroup1/origins/origin1"),
			Properties: &armcdn.AFDOriginProperties{
				EnabledState:      to.Ptr(armcdn.EnabledStateEnabled),
				HostName:          to.Ptr("host1.blob.core.windows.net"),
				HTTPPort:          to.Ptr[int32](80),
				HTTPSPort:         to.Ptr[int32](443),
				OriginHostHeader:  to.Ptr("host1.foo.com"),
				DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusNotStarted),
				ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AFDOrigin) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AFDOrigin)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOrigins_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAFDOrigins_Delete(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOrigins_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AFDOrigins_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewAFDOriginsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"RG",
		"profile1",
		"origingroup1",
		"origin1",
		&armcdn.AFDOriginsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOrigins_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/AFDOrigins_Delete.json: %v", err)
	}
}

func TestRoutes_ListByEndpoint(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Routes_ListByEndpoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Routes_ListByEndpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewRoutesClient("subid", cred, &options)
	pager := client.ListByEndpoint("RG",
		"profile1",
		"endpoint1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Routes_ListByEndpoint.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.RouteListResult{
			Value: []*armcdn.Route{
				{
					Name: to.Ptr("route1"),
					Type: to.Ptr("Microsoft.Cdn/profiles/afdendpoints/routes"),
					ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/afdendpoints/endpoint1/routes/route1"),
					Properties: &armcdn.RouteProperties{
						DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusSucceeded),
						ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
						CacheConfiguration: &armcdn.AfdRouteCacheConfiguration{
							CompressionSettings: map[string]interface{}{
								"contentTypesToCompress": []interface{}{
									"text/html",
									"application/octet-stream",
								},
								"isCompressionEnabled": true,
							},
							QueryStringCachingBehavior: to.Ptr(armcdn.AfdQueryStringCachingBehaviorIgnoreQueryString),
						},
						CustomDomains: []*armcdn.ActivatedResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/customDomains/domain1"),
							}},
						EnabledState:        to.Ptr(armcdn.EnabledStateEnabled),
						ForwardingProtocol:  to.Ptr(armcdn.ForwardingProtocolMatchRequest),
						HTTPSRedirect:       to.Ptr(armcdn.HTTPSRedirectEnabled),
						LinkToDefaultDomain: to.Ptr(armcdn.LinkToDefaultDomainEnabled),
						OriginGroup: &armcdn.ResourceReference{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/originGroups/originGroup1"),
						},
						PatternsToMatch: []*string{
							to.Ptr("/*")},
						RuleSets: []*armcdn.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/ruleSets/ruleSet1"),
							}},
						SupportedProtocols: []*armcdn.AFDEndpointProtocols{
							to.Ptr(armcdn.AFDEndpointProtocolsHTTPS),
							to.Ptr(armcdn.AFDEndpointProtocolsHTTP)},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RouteListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RouteListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Routes_ListByEndpoint.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoutes_Get(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Routes_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Routes_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewRoutesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"RG",
		"profile1",
		"endpoint1",
		"route1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Routes_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.Route{
			Name: to.Ptr("route1"),
			Type: to.Ptr("Microsoft.Cdn/profiles/afdendpoints/routes"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/afdendpoints/endpoint1/routes/route1"),
			Properties: &armcdn.RouteProperties{
				DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusSucceeded),
				ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
				CacheConfiguration: &armcdn.AfdRouteCacheConfiguration{
					CompressionSettings: map[string]interface{}{
						"contentTypesToCompress": []interface{}{
							"text/html",
							"application/octet-stream",
						},
						"isCompressionEnabled": true,
					},
					QueryStringCachingBehavior: to.Ptr(armcdn.AfdQueryStringCachingBehaviorIgnoreQueryString),
				},
				CustomDomains: []*armcdn.ActivatedResourceReference{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/customDomains/domain1"),
					}},
				EnabledState:        to.Ptr(armcdn.EnabledStateEnabled),
				ForwardingProtocol:  to.Ptr(armcdn.ForwardingProtocolMatchRequest),
				HTTPSRedirect:       to.Ptr(armcdn.HTTPSRedirectEnabled),
				LinkToDefaultDomain: to.Ptr(armcdn.LinkToDefaultDomainEnabled),
				OriginGroup: &armcdn.ResourceReference{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/originGroups/originGroup1"),
				},
				PatternsToMatch: []*string{
					to.Ptr("/*")},
				RuleSets: []*armcdn.ResourceReference{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/ruleSets/ruleSet1"),
					}},
				SupportedProtocols: []*armcdn.AFDEndpointProtocols{
					to.Ptr(armcdn.AFDEndpointProtocolsHTTPS),
					to.Ptr(armcdn.AFDEndpointProtocolsHTTP)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Route) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Route)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Routes_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoutes_Create(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Routes_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Routes_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewRoutesClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"RG",
		"profile1",
		"endpoint1",
		"route1",
		armcdn.Route{
			Properties: &armcdn.RouteProperties{
				CacheConfiguration: &armcdn.AfdRouteCacheConfiguration{
					CompressionSettings: map[string]interface{}{
						"contentTypesToCompress": []interface{}{
							"text/html",
							"application/octet-stream",
						},
						"isCompressionEnabled": true,
					},
					QueryParameters:            to.Ptr("querystring=test"),
					QueryStringCachingBehavior: to.Ptr(armcdn.AfdQueryStringCachingBehaviorIgnoreSpecifiedQueryStrings),
				},
				CustomDomains: []*armcdn.ActivatedResourceReference{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/customDomains/domain1"),
					}},
				EnabledState:        to.Ptr(armcdn.EnabledStateEnabled),
				ForwardingProtocol:  to.Ptr(armcdn.ForwardingProtocolMatchRequest),
				HTTPSRedirect:       to.Ptr(armcdn.HTTPSRedirectEnabled),
				LinkToDefaultDomain: to.Ptr(armcdn.LinkToDefaultDomainEnabled),
				OriginGroup: &armcdn.ResourceReference{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/originGroups/originGroup1"),
				},
				PatternsToMatch: []*string{
					to.Ptr("/*")},
				RuleSets: []*armcdn.ResourceReference{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/ruleSets/ruleSet1"),
					}},
				SupportedProtocols: []*armcdn.AFDEndpointProtocols{
					to.Ptr(armcdn.AFDEndpointProtocolsHTTPS),
					to.Ptr(armcdn.AFDEndpointProtocolsHTTP)},
			},
		},
		&armcdn.RoutesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Routes_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Routes_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.Route{
			Name: to.Ptr("route1"),
			Type: to.Ptr("Microsoft.Cdn/profiles/afdendpoints/routes"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/afdendpoints/endpoint1/routes/route1"),
			Properties: &armcdn.RouteProperties{
				DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusNotStarted),
				ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
				CacheConfiguration: &armcdn.AfdRouteCacheConfiguration{
					CompressionSettings: map[string]interface{}{
						"contentTypesToCompress": []interface{}{
							"text/html",
							"application/octet-stream",
						},
						"isCompressionEnabled": true,
					},
					QueryParameters:            to.Ptr("querystring=test"),
					QueryStringCachingBehavior: to.Ptr(armcdn.AfdQueryStringCachingBehaviorIgnoreSpecifiedQueryStrings),
				},
				CustomDomains: []*armcdn.ActivatedResourceReference{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/customDomains/domain1"),
					}},
				EnabledState:        to.Ptr(armcdn.EnabledStateEnabled),
				ForwardingProtocol:  to.Ptr(armcdn.ForwardingProtocolMatchRequest),
				HTTPSRedirect:       to.Ptr(armcdn.HTTPSRedirectEnabled),
				LinkToDefaultDomain: to.Ptr(armcdn.LinkToDefaultDomainEnabled),
				OriginGroup: &armcdn.ResourceReference{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/originGroups/originGroup1"),
				},
				PatternsToMatch: []*string{
					to.Ptr("/*")},
				RuleSets: []*armcdn.ResourceReference{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/ruleSets/ruleSet1"),
					}},
				SupportedProtocols: []*armcdn.AFDEndpointProtocols{
					to.Ptr(armcdn.AFDEndpointProtocolsHTTPS),
					to.Ptr(armcdn.AFDEndpointProtocolsHTTP)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Route) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Route)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Routes_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoutes_Update(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Routes_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Routes_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewRoutesClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"RG",
		"profile1",
		"endpoint1",
		"route1",
		armcdn.RouteUpdateParameters{
			Properties: &armcdn.RouteUpdatePropertiesParameters{
				CacheConfiguration: &armcdn.AfdRouteCacheConfiguration{
					CompressionSettings: map[string]interface{}{
						"contentTypesToCompress": []interface{}{
							"text/html",
							"application/octet-stream",
						},
						"isCompressionEnabled": true,
					},
					QueryStringCachingBehavior: to.Ptr(armcdn.AfdQueryStringCachingBehaviorIgnoreQueryString),
				},
				CustomDomains: []*armcdn.ActivatedResourceReference{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/customDomains/domain1"),
					}},
				EnabledState:        to.Ptr(armcdn.EnabledStateEnabled),
				ForwardingProtocol:  to.Ptr(armcdn.ForwardingProtocolMatchRequest),
				HTTPSRedirect:       to.Ptr(armcdn.HTTPSRedirectEnabled),
				LinkToDefaultDomain: to.Ptr(armcdn.LinkToDefaultDomainEnabled),
				OriginGroup: &armcdn.ResourceReference{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/originGroups/originGroup1"),
				},
				PatternsToMatch: []*string{
					to.Ptr("/*")},
				RuleSets: []*armcdn.ResourceReference{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/ruleSets/ruleSet1"),
					}},
				SupportedProtocols: []*armcdn.AFDEndpointProtocols{
					to.Ptr(armcdn.AFDEndpointProtocolsHTTPS),
					to.Ptr(armcdn.AFDEndpointProtocolsHTTP)},
			},
		},
		&armcdn.RoutesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Routes_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Routes_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.Route{
			Name: to.Ptr("route1"),
			Type: to.Ptr("Microsoft.Cdn/profiles/afdendpoints/routes"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/afdendpoints/endpoint1/routes/route1"),
			Properties: &armcdn.RouteProperties{
				DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusNotStarted),
				ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
				CacheConfiguration: &armcdn.AfdRouteCacheConfiguration{
					CompressionSettings: map[string]interface{}{
						"contentTypesToCompress": []interface{}{
							"text/html",
							"application/octet-stream",
						},
						"isCompressionEnabled": true,
					},
					QueryStringCachingBehavior: to.Ptr(armcdn.AfdQueryStringCachingBehaviorIgnoreQueryString),
				},
				CustomDomains: []*armcdn.ActivatedResourceReference{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/customDomains/domain1"),
					}},
				EnabledState:        to.Ptr(armcdn.EnabledStateEnabled),
				ForwardingProtocol:  to.Ptr(armcdn.ForwardingProtocolMatchRequest),
				HTTPSRedirect:       to.Ptr(armcdn.HTTPSRedirectEnabled),
				LinkToDefaultDomain: to.Ptr(armcdn.LinkToDefaultDomainEnabled),
				OriginGroup: &armcdn.ResourceReference{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/originGroups/originGroup1"),
				},
				PatternsToMatch: []*string{
					to.Ptr("/*")},
				RuleSets: []*armcdn.ResourceReference{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/ruleSets/ruleSet1"),
					}},
				SupportedProtocols: []*armcdn.AFDEndpointProtocols{
					to.Ptr(armcdn.AFDEndpointProtocolsHTTPS),
					to.Ptr(armcdn.AFDEndpointProtocolsHTTP)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Route) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Route)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Routes_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoutes_Delete(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Routes_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Routes_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewRoutesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"RG",
		"profile1",
		"endpoint1",
		"route1",
		&armcdn.RoutesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Routes_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Routes_Delete.json: %v", err)
	}
}

func TestRuleSets_ListByProfile(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/RuleSets_ListByProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RuleSets_ListByProfile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewRuleSetsClient("subid", cred, &options)
	pager := client.ListByProfile("RG",
		"profile1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/RuleSets_ListByProfile.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.RuleSetListResult{
			Value: []*armcdn.RuleSet{
				{
					Name: to.Ptr("ruleSet1"),
					Type: to.Ptr("Microsoft.Cdn/profiles/rulesets"),
					ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/rulesets/ruleSet1"),
					Properties: &armcdn.RuleSetProperties{
						DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusNotStarted),
						ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RuleSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RuleSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/RuleSets_ListByProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRuleSets_Get(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/RuleSets_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RuleSets_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewRuleSetsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"RG",
		"profile1",
		"ruleSet1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/RuleSets_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.RuleSet{
			Name: to.Ptr("ruleSet1"),
			Type: to.Ptr("Microsoft.Cdn/profiles/rulesets"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/rulesets/ruleSet1"),
			Properties: &armcdn.RuleSetProperties{
				DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusNotStarted),
				ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RuleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RuleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/RuleSets_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRuleSets_Create(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/RuleSets_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RuleSets_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewRuleSetsClient("subid", cred, &options)
	res, err := client.Create(ctx,
		"RG",
		"profile1",
		"ruleSet1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/RuleSets_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.RuleSet{
			Name: to.Ptr("ruleSet1"),
			Type: to.Ptr("Microsoft.Cdn/profiles/rulesets"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/rulesets/ruleSet1"),
			Properties: &armcdn.RuleSetProperties{
				DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusNotStarted),
				ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RuleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RuleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/RuleSets_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRuleSets_Delete(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/RuleSets_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RuleSets_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewRuleSetsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"RG",
		"profile1",
		"ruleSet1",
		&armcdn.RuleSetsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/RuleSets_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/RuleSets_Delete.json: %v", err)
	}
}

func TestRuleSets_ListResourceUsage(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/RuleSets_ListResourceUsage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RuleSets_ListResourceUsage"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewRuleSetsClient("subid", cred, &options)
	pager := client.ListResourceUsage("RG",
		"profile1",
		"ruleSet1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/RuleSets_ListResourceUsage.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.UsagesListResult{
			Value: []*armcdn.Usage{
				{
					Name: &armcdn.UsageName{
						LocalizedValue: to.Ptr("rule"),
						Value:          to.Ptr("rule"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/ruleSets/ruleSet1/rules/rule1"),
					Limit:        to.Ptr[int64](25),
					Unit:         to.Ptr(armcdn.UsageUnitCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsagesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsagesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/RuleSets_ListResourceUsage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRules_ListByRuleSet(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Rules_ListByRuleSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Rules_ListByRuleSet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewRulesClient("subid", cred, &options)
	pager := client.ListByRuleSet("RG",
		"profile1",
		"ruleSet1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Rules_ListByRuleSet.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.RuleListResult{
			Value: []*armcdn.Rule{
				{
					Name: to.Ptr("rule1"),
					Type: to.Ptr("Microsoft.Cdn/profiles/ruleSets/rules"),
					ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/ruleSets/ruleSet1/rules/rule1"),
					Properties: &armcdn.RuleProperties{
						Actions: []armcdn.DeliveryRuleActionAutoGeneratedClassification{
							&armcdn.DeliveryRuleResponseHeaderAction{
								Name: to.Ptr(armcdn.DeliveryRuleActionModifyResponseHeader),
								Parameters: &armcdn.HeaderActionParameters{
									HeaderAction: to.Ptr(armcdn.HeaderActionOverwrite),
									HeaderName:   to.Ptr("X-CDN"),
									TypeName:     to.Ptr(armcdn.HeaderActionParametersTypeNameDeliveryRuleHeaderActionParameters),
									Value:        to.Ptr("MSFT"),
								},
							}},
						Conditions: []armcdn.DeliveryRuleConditionClassification{
							&armcdn.DeliveryRuleRequestMethodCondition{
								Name: to.Ptr(armcdn.MatchVariableRequestMethod),
								Parameters: &armcdn.RequestMethodMatchConditionParameters{
									MatchValues: []*armcdn.RequestMethodMatchConditionParametersMatchValuesItem{
										to.Ptr(armcdn.RequestMethodMatchConditionParametersMatchValuesItemGET)},
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armcdn.RequestMethodOperatorEqual),
									Transforms:      []*armcdn.Transform{},
									TypeName:        to.Ptr(armcdn.RequestMethodMatchConditionParametersTypeNameDeliveryRuleRequestMethodConditionParameters),
								},
							}},
						Order: to.Ptr[int32](1),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Rules_ListByRuleSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRules_Get(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Rules_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Rules_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewRulesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"RG",
		"profile1",
		"ruleSet1",
		"rule1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Rules_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.Rule{
			Name: to.Ptr("rule1"),
			Type: to.Ptr("Microsoft.Cdn/profiles/ruleSets/rules"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/ruleSets/ruleSet1/rules/rule1"),
			Properties: &armcdn.RuleProperties{
				Actions: []armcdn.DeliveryRuleActionAutoGeneratedClassification{
					&armcdn.DeliveryRuleResponseHeaderAction{
						Name: to.Ptr(armcdn.DeliveryRuleActionModifyResponseHeader),
						Parameters: &armcdn.HeaderActionParameters{
							HeaderAction: to.Ptr(armcdn.HeaderActionOverwrite),
							HeaderName:   to.Ptr("X-CDN"),
							TypeName:     to.Ptr(armcdn.HeaderActionParametersTypeNameDeliveryRuleHeaderActionParameters),
							Value:        to.Ptr("MSFT"),
						},
					}},
				Conditions: []armcdn.DeliveryRuleConditionClassification{
					&armcdn.DeliveryRuleRequestMethodCondition{
						Name: to.Ptr(armcdn.MatchVariableRequestMethod),
						Parameters: &armcdn.RequestMethodMatchConditionParameters{
							MatchValues: []*armcdn.RequestMethodMatchConditionParametersMatchValuesItem{
								to.Ptr(armcdn.RequestMethodMatchConditionParametersMatchValuesItemGET)},
							NegateCondition: to.Ptr(false),
							Operator:        to.Ptr(armcdn.RequestMethodOperatorEqual),
							Transforms:      []*armcdn.Transform{},
							TypeName:        to.Ptr(armcdn.RequestMethodMatchConditionParametersTypeNameDeliveryRuleRequestMethodConditionParameters),
						},
					}},
				Order: to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Rule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Rule)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Rules_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRules_Create(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Rules_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Rules_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewRulesClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"RG",
		"profile1",
		"ruleSet1",
		"rule1",
		armcdn.Rule{
			Properties: &armcdn.RuleProperties{
				Actions: []armcdn.DeliveryRuleActionAutoGeneratedClassification{
					&armcdn.DeliveryRuleResponseHeaderAction{
						Name: to.Ptr(armcdn.DeliveryRuleActionModifyResponseHeader),
						Parameters: &armcdn.HeaderActionParameters{
							HeaderAction: to.Ptr(armcdn.HeaderActionOverwrite),
							HeaderName:   to.Ptr("X-CDN"),
							TypeName:     to.Ptr(armcdn.HeaderActionParametersTypeNameDeliveryRuleHeaderActionParameters),
							Value:        to.Ptr("MSFT"),
						},
					}},
				Conditions: []armcdn.DeliveryRuleConditionClassification{
					&armcdn.DeliveryRuleRequestMethodCondition{
						Name: to.Ptr(armcdn.MatchVariableRequestMethod),
						Parameters: &armcdn.RequestMethodMatchConditionParameters{
							MatchValues: []*armcdn.RequestMethodMatchConditionParametersMatchValuesItem{
								to.Ptr(armcdn.RequestMethodMatchConditionParametersMatchValuesItemGET)},
							NegateCondition: to.Ptr(false),
							Operator:        to.Ptr(armcdn.RequestMethodOperatorEqual),
							TypeName:        to.Ptr(armcdn.RequestMethodMatchConditionParametersTypeNameDeliveryRuleRequestMethodConditionParameters),
						},
					}},
				Order: to.Ptr[int32](1),
			},
		},
		&armcdn.RulesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Rules_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Rules_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.Rule{
			Name: to.Ptr("rule1"),
			Type: to.Ptr("Microsoft.Cdn/profiles/ruleSets/rules"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/ruleSets/ruleSet1/rules/rule1"),
			Properties: &armcdn.RuleProperties{
				Actions: []armcdn.DeliveryRuleActionAutoGeneratedClassification{
					&armcdn.DeliveryRuleResponseHeaderAction{
						Name: to.Ptr(armcdn.DeliveryRuleActionModifyResponseHeader),
						Parameters: &armcdn.HeaderActionParameters{
							HeaderAction: to.Ptr(armcdn.HeaderActionOverwrite),
							HeaderName:   to.Ptr("X-CDN"),
							TypeName:     to.Ptr(armcdn.HeaderActionParametersTypeNameDeliveryRuleHeaderActionParameters),
							Value:        to.Ptr("MSFT"),
						},
					}},
				Conditions: []armcdn.DeliveryRuleConditionClassification{
					&armcdn.DeliveryRuleRequestMethodCondition{
						Name: to.Ptr(armcdn.MatchVariableRequestMethod),
						Parameters: &armcdn.RequestMethodMatchConditionParameters{
							MatchValues: []*armcdn.RequestMethodMatchConditionParametersMatchValuesItem{
								to.Ptr(armcdn.RequestMethodMatchConditionParametersMatchValuesItemGET)},
							NegateCondition: to.Ptr(false),
							Operator:        to.Ptr(armcdn.RequestMethodOperatorEqual),
							Transforms:      []*armcdn.Transform{},
							TypeName:        to.Ptr(armcdn.RequestMethodMatchConditionParametersTypeNameDeliveryRuleRequestMethodConditionParameters),
						},
					}},
				Order: to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Rule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Rule)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Rules_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRules_Update(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Rules_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Rules_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewRulesClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"RG",
		"profile1",
		"ruleSet1",
		"rule1",
		armcdn.RuleUpdateParameters{
			Properties: &armcdn.RuleUpdatePropertiesParameters{
				Actions: []armcdn.DeliveryRuleActionAutoGeneratedClassification{
					&armcdn.DeliveryRuleResponseHeaderAction{
						Name: to.Ptr(armcdn.DeliveryRuleActionModifyResponseHeader),
						Parameters: &armcdn.HeaderActionParameters{
							HeaderAction: to.Ptr(armcdn.HeaderActionOverwrite),
							HeaderName:   to.Ptr("X-CDN"),
							TypeName:     to.Ptr(armcdn.HeaderActionParametersTypeNameDeliveryRuleHeaderActionParameters),
							Value:        to.Ptr("MSFT"),
						},
					}},
				Order: to.Ptr[int32](1),
			},
		},
		&armcdn.RulesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Rules_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Rules_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.Rule{
			Name: to.Ptr("rule1"),
			Type: to.Ptr("Microsoft.Cdn/profiles/ruleSets/rules"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/ruleSets/ruleSet1/rules/rule1"),
			Properties: &armcdn.RuleProperties{
				Actions: []armcdn.DeliveryRuleActionAutoGeneratedClassification{
					&armcdn.DeliveryRuleResponseHeaderAction{
						Name: to.Ptr(armcdn.DeliveryRuleActionModifyResponseHeader),
						Parameters: &armcdn.HeaderActionParameters{
							HeaderAction: to.Ptr(armcdn.HeaderActionOverwrite),
							HeaderName:   to.Ptr("X-CDN"),
							TypeName:     to.Ptr(armcdn.HeaderActionParametersTypeNameDeliveryRuleHeaderActionParameters),
							Value:        to.Ptr("MSFT"),
						},
					}},
				Conditions: []armcdn.DeliveryRuleConditionClassification{
					&armcdn.DeliveryRuleRequestMethodCondition{
						Name: to.Ptr(armcdn.MatchVariableRequestMethod),
						Parameters: &armcdn.RequestMethodMatchConditionParameters{
							MatchValues: []*armcdn.RequestMethodMatchConditionParametersMatchValuesItem{
								to.Ptr(armcdn.RequestMethodMatchConditionParametersMatchValuesItemGET)},
							NegateCondition: to.Ptr(false),
							Operator:        to.Ptr(armcdn.RequestMethodOperatorEqual),
							Transforms:      []*armcdn.Transform{},
							TypeName:        to.Ptr(armcdn.RequestMethodMatchConditionParametersTypeNameDeliveryRuleRequestMethodConditionParameters),
						},
					}},
				Order: to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Rule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Rule)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Rules_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRules_Delete(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Rules_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Rules_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewRulesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"RG",
		"profile1",
		"ruleSet1",
		"rule1",
		&armcdn.RulesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Rules_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Rules_Delete.json: %v", err)
	}
}

func TestSecurityPolicies_ListByProfile(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/SecurityPolicies_ListByProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SecurityPolicies_ListByProfile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewSecurityPoliciesClient("subid", cred, &options)
	pager := client.ListByProfile("RG",
		"profile1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/SecurityPolicies_ListByProfile.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.SecurityPolicyListResult{
			Value: []*armcdn.SecurityPolicy{
				{
					Name: to.Ptr("securityPolicy1"),
					Type: to.Ptr("Microsoft.Cdn/profiles/securityPolicies"),
					ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/securityPolicies/securityPolicy1"),
					Properties: &armcdn.SecurityPolicyProperties{
						DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusSucceeded),
						ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
						Parameters: &armcdn.SecurityPolicyWebApplicationFirewallParameters{
							Type: to.Ptr(armcdn.SecurityPolicyTypeWebApplicationFirewall),
							Associations: []*armcdn.SecurityPolicyWebApplicationFirewallAssociation{
								{
									Domains: []*armcdn.ActivatedResourceReference{
										{
											ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/afddomains/testdomain1"),
										},
										{
											ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/afddomains/testdomain2"),
										}},
									PatternsToMatch: []*string{
										to.Ptr("/*")},
								}},
							WafPolicy: &armcdn.ResourceReference{
								ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Network/frontdoorwebapplicationfirewallpolicies/wafTest"),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SecurityPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SecurityPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/SecurityPolicies_ListByProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityPolicies_Get(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/SecurityPolicies_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SecurityPolicies_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewSecurityPoliciesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"RG",
		"profile1",
		"securityPolicy1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/SecurityPolicies_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.SecurityPolicy{
			Name: to.Ptr("securityPolicy1"),
			Type: to.Ptr("Microsoft.Cdn/profiles/securityPolicies"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/securityPolicies/securityPolicy1"),
			Properties: &armcdn.SecurityPolicyProperties{
				DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusSucceeded),
				ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
				Parameters: &armcdn.SecurityPolicyWebApplicationFirewallParameters{
					Type: to.Ptr(armcdn.SecurityPolicyTypeWebApplicationFirewall),
					Associations: []*armcdn.SecurityPolicyWebApplicationFirewallAssociation{
						{
							Domains: []*armcdn.ActivatedResourceReference{
								{
									ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/afddomains/testdomain1"),
								},
								{
									ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/afddomains/testdomain2"),
								}},
							PatternsToMatch: []*string{
								to.Ptr("/*")},
						}},
					WafPolicy: &armcdn.ResourceReference{
						ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Network/frontdoorwebapplicationfirewallpolicies/wafTest"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SecurityPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SecurityPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/SecurityPolicies_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityPolicies_Create(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/SecurityPolicies_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SecurityPolicies_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewSecurityPoliciesClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"RG",
		"profile1",
		"securityPolicy1",
		armcdn.SecurityPolicy{
			Properties: &armcdn.SecurityPolicyProperties{
				Parameters: &armcdn.SecurityPolicyWebApplicationFirewallParameters{
					Type: to.Ptr(armcdn.SecurityPolicyTypeWebApplicationFirewall),
					Associations: []*armcdn.SecurityPolicyWebApplicationFirewallAssociation{
						{
							Domains: []*armcdn.ActivatedResourceReference{
								{
									ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/afddomains/testdomain1"),
								},
								{
									ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/afddomains/testdomain2"),
								}},
							PatternsToMatch: []*string{
								to.Ptr("/*")},
						}},
					WafPolicy: &armcdn.ResourceReference{
						ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Network/frontdoorwebapplicationfirewallpolicies/wafTest"),
					},
				},
			},
		},
		&armcdn.SecurityPoliciesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/SecurityPolicies_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/SecurityPolicies_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.SecurityPolicy{
			Name: to.Ptr("securityPolicy1"),
			Type: to.Ptr("Microsoft.Cdn/profiles/securityPolicies"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/securityPolicies/securityPolicy1"),
			Properties: &armcdn.SecurityPolicyProperties{
				DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusSucceeded),
				ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
				Parameters: &armcdn.SecurityPolicyWebApplicationFirewallParameters{
					Type: to.Ptr(armcdn.SecurityPolicyTypeWebApplicationFirewall),
					Associations: []*armcdn.SecurityPolicyWebApplicationFirewallAssociation{
						{
							Domains: []*armcdn.ActivatedResourceReference{
								{
									ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/afddomains/testdomain1"),
								},
								{
									ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/afddomains/testdomain2"),
								}},
							PatternsToMatch: []*string{
								to.Ptr("/*")},
						}},
					WafPolicy: &armcdn.ResourceReference{
						ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Network/frontdoorwebapplicationfirewallpolicies/wafTest"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SecurityPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SecurityPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/SecurityPolicies_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityPolicies_Patch(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/SecurityPolicies_Patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SecurityPolicies_Patch"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewSecurityPoliciesClient("subid", cred, &options)
	poller, err := client.BeginPatch(ctx,
		"RG",
		"profile1",
		"securityPolicy1",
		armcdn.SecurityPolicyUpdateParameters{
			Properties: &armcdn.SecurityPolicyUpdateProperties{
				Parameters: &armcdn.SecurityPolicyWebApplicationFirewallParameters{
					Type: to.Ptr(armcdn.SecurityPolicyTypeWebApplicationFirewall),
					Associations: []*armcdn.SecurityPolicyWebApplicationFirewallAssociation{
						{
							Domains: []*armcdn.ActivatedResourceReference{
								{
									ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/afddomains/testdomain1"),
								},
								{
									ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/afddomains/testdomain2"),
								}},
							PatternsToMatch: []*string{
								to.Ptr("/*")},
						}},
					WafPolicy: &armcdn.ResourceReference{
						ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Network/frontdoorwebapplicationfirewallpolicies/wafTest"),
					},
				},
			},
		},
		&armcdn.SecurityPoliciesClientBeginPatchOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/SecurityPolicies_Patch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/SecurityPolicies_Patch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.SecurityPolicy{
			Name: to.Ptr("securityPolicy1"),
			Type: to.Ptr("Microsoft.Cdn/profiles/securityPolicies"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/securityPolicies/securityPolicy1"),
			Properties: &armcdn.SecurityPolicyProperties{
				DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusSucceeded),
				ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
				Parameters: &armcdn.SecurityPolicyWebApplicationFirewallParameters{
					Type: to.Ptr(armcdn.SecurityPolicyTypeWebApplicationFirewall),
					Associations: []*armcdn.SecurityPolicyWebApplicationFirewallAssociation{
						{
							Domains: []*armcdn.ActivatedResourceReference{
								{
									ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/afddomains/testdomain1"),
								},
								{
									ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/afddomains/testdomain2"),
								}},
							PatternsToMatch: []*string{
								to.Ptr("/*")},
						}},
					WafPolicy: &armcdn.ResourceReference{
						ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Network/frontdoorwebapplicationfirewallpolicies/wafTest"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SecurityPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SecurityPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/SecurityPolicies_Patch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityPolicies_Delete(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/SecurityPolicies_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SecurityPolicies_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewSecurityPoliciesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"RG",
		"profile1",
		"securityPolicy1",
		&armcdn.SecurityPoliciesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/SecurityPolicies_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/SecurityPolicies_Delete.json: %v", err)
	}
}

func TestSecrets_ListByProfile(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Secrets_ListByProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Secrets_ListByProfile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewSecretsClient("subid", cred, &options)
	pager := client.ListByProfile("RG",
		"profile1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Secrets_ListByProfile.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.SecretListResult{
			Value: []*armcdn.Secret{
				{
					Name: to.Ptr("secret1"),
					Type: to.Ptr("Microsoft.Cdn/profiles/secrets"),
					ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/secrets/secret1"),
					Properties: &armcdn.SecretProperties{
						DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusNotStarted),
						ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
						Parameters: &armcdn.CustomerCertificateParameters{
							Type:                 to.Ptr(armcdn.SecretTypeCustomerCertificate),
							CertificateAuthority: to.Ptr("Symantec"),
							ExpirationDate:       to.Ptr("2025-01-01T00:00:00-00:00"),
							SecretSource: &armcdn.ResourceReference{
								ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.KeyVault/vaults/keyvaultname/secrets/certificatename"),
							},
							SecretVersion: to.Ptr("abcdef1234578900abcdef1234567890"),
							Subject:       to.Ptr("*.contoso.com"),
							SubjectAlternativeNames: []*string{
								to.Ptr("foo.contoso.com"),
								to.Ptr("www3.foo.contoso.com")},
							Thumbprint:       to.Ptr("ABCDEF1234567890ABCDEF1234567890ABCDEF12"),
							UseLatestVersion: to.Ptr(true),
						},
					},
				},
				{
					Name: to.Ptr("69f05517-6aaf-4a1e-a96d-f8c02f66c756-test12-afdx-test-domains-azfdtest-xyz"),
					Type: to.Ptr("Microsoft.Cdn/profiles/secrets"),
					ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/secrets/autogenerated_secret_name"),
					Properties: &armcdn.SecretProperties{
						DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusInProgress),
						ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
						Parameters: &armcdn.ManagedCertificateParameters{
							Type:           to.Ptr(armcdn.SecretTypeManagedCertificate),
							ExpirationDate: to.Ptr("2025-01-01T00:00:00-00:00"),
							Subject:        to.Ptr("bar.contoso.com"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SecretListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SecretListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Secrets_ListByProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecrets_Get(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Secrets_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Secrets_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewSecretsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"RG",
		"profile1",
		"secret1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Secrets_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.Secret{
			Name: to.Ptr("secret1"),
			Type: to.Ptr("Microsoft.Cdn/profiles/secrets"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/secrets/secret1"),
			Properties: &armcdn.SecretProperties{
				DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusNotStarted),
				ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
				Parameters: &armcdn.CustomerCertificateParameters{
					Type:                 to.Ptr(armcdn.SecretTypeCustomerCertificate),
					CertificateAuthority: to.Ptr("Symantec"),
					ExpirationDate:       to.Ptr("2025-01-01T00:00:00-00:00"),
					SecretSource: &armcdn.ResourceReference{
						ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.KeyVault/vaults/keyvaultname/secrets/certificatename"),
					},
					SecretVersion: to.Ptr("abcdef1234578900abcdef1234567890"),
					Subject:       to.Ptr("*.contoso.com"),
					SubjectAlternativeNames: []*string{
						to.Ptr("foo.contoso.com"),
						to.Ptr("www3.foo.contoso.com")},
					Thumbprint:       to.Ptr("ABCDEF1234567890ABCDEF1234567890ABCDEF12"),
					UseLatestVersion: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Secret) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Secret)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Secrets_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecrets_Create(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Secrets_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Secrets_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewSecretsClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"RG",
		"profile1",
		"secret1",
		armcdn.Secret{
			Properties: &armcdn.SecretProperties{
				Parameters: &armcdn.CustomerCertificateParameters{
					Type: to.Ptr(armcdn.SecretTypeCustomerCertificate),
					SecretSource: &armcdn.ResourceReference{
						ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.KeyVault/vault/kvName/secrets/certificatename"),
					},
					SecretVersion:    to.Ptr("abcdef1234578900abcdef1234567890"),
					UseLatestVersion: to.Ptr(false),
				},
			},
		},
		&armcdn.SecretsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Secrets_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Secrets_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.Secret{
			Name: to.Ptr("secret1"),
			Type: to.Ptr("Microsoft.Cdn/profiles/secrets"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/secrets/secret1"),
			Properties: &armcdn.SecretProperties{
				DeploymentStatus:  to.Ptr(armcdn.DeploymentStatusNotStarted),
				ProvisioningState: to.Ptr(armcdn.AfdProvisioningStateSucceeded),
				Parameters: &armcdn.CustomerCertificateParameters{
					Type:                 to.Ptr(armcdn.SecretTypeCustomerCertificate),
					CertificateAuthority: to.Ptr("Symantec"),
					ExpirationDate:       to.Ptr("2025-01-01T00:00:00-00:00"),
					SecretSource: &armcdn.ResourceReference{
						ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.KeyVault/vaults/keyvaultname/secrets/certificatename"),
					},
					SecretVersion: to.Ptr("abcdef1234578900abcdef1234567890"),
					Subject:       to.Ptr("*.contoso.com"),
					SubjectAlternativeNames: []*string{
						to.Ptr("foo.contoso.com"),
						to.Ptr("www3.foo.contoso.com")},
					Thumbprint:       to.Ptr("ABCDEF1234567890ABCDEF1234567890ABCDEF12"),
					UseLatestVersion: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Secret) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Secret)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Secrets_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecrets_Delete(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Secrets_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Secrets_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewSecretsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"RG",
		"profile1",
		"secret1",
		&armcdn.SecretsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Secrets_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Secrets_Delete.json: %v", err)
	}
}

func TestValidate_Secret(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Validate_Secret.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Validate_Secret"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewValidateClient("subid", cred, &options)
	res, err := client.Secret(ctx,
		armcdn.ValidateSecretInput{
			SecretSource: &armcdn.ResourceReference{
				ID: to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.KeyVault/vault/kvName/certificate/certName"),
			},
			SecretType: to.Ptr(armcdn.SecretTypeCustomerCertificate),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Validate_Secret.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.ValidateSecretOutput{
			Status: to.Ptr(armcdn.StatusValid),
		}
		if !reflect.DeepEqual(exampleRes, res.ValidateSecretOutput) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ValidateSecretOutput)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Validate_Secret.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLogAnalytics_GetLogAnalyticsMetrics(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/LogAnalytics_GetLogAnalyticsMetrics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LogAnalytics_GetLogAnalyticsMetrics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewLogAnalyticsClient("subid", cred, &options)
	res, err := client.GetLogAnalyticsMetrics(ctx,
		"RG",
		"profile1",
		[]armcdn.LogMetric{
			armcdn.LogMetricClientRequestCount},
		func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T04:30:00.000Z"); return t }(),
		func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T05:00:00.000Z"); return t }(),
		armcdn.LogMetricsGranularityPT5M,
		[]string{
			"customdomain1.azurecdn.net",
			"customdomain2.azurecdn.net"},
		[]string{
			"https"},
		&armcdn.LogAnalyticsClientGetLogAnalyticsMetricsOptions{GroupBy: []armcdn.LogMetricsGroupBy{
			armcdn.LogMetricsGroupByProtocol},
			Continents:       []string{},
			CountryOrRegions: []string{},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/LogAnalytics_GetLogAnalyticsMetrics.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.MetricsResponse{
			DateTimeBegin: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T12:30:27.554+08:00"); return t }()),
			DateTimeEnd:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T13:00:27.554+08:00"); return t }()),
			Granularity:   to.Ptr(armcdn.MetricsResponseGranularityPT5M),
			Series: []*armcdn.MetricsResponseSeriesItem{
				{
					Data: []*armcdn.Components1Gs0LlpSchemasMetricsresponsePropertiesSeriesItemsPropertiesDataItems{
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T04:35:00+00:00"); return t }()),
							Value:    to.Ptr[float32](4250),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T04:40:00+00:00"); return t }()),
							Value:    to.Ptr[float32](3120),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T04:45:00+00:00"); return t }()),
							Value:    to.Ptr[float32](2221),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T04:50:00+00:00"); return t }()),
							Value:    to.Ptr[float32](2466),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T04:55:00+00:00"); return t }()),
							Value:    to.Ptr[float32](2654),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T05:00:00+00:00"); return t }()),
							Value:    to.Ptr[float32](3565),
						}},
					Groups: []*armcdn.MetricsResponseSeriesPropertiesItemsItem{
						{
							Name:  to.Ptr("protocol"),
							Value: to.Ptr("https"),
						}},
					Metric: to.Ptr("clientRequestCount"),
					Unit:   to.Ptr(armcdn.MetricsResponseSeriesItemUnitCount),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.MetricsResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetricsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/LogAnalytics_GetLogAnalyticsMetrics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLogAnalytics_GetLogAnalyticsRankings(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/LogAnalytics_GetLogAnalyticsRankings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LogAnalytics_GetLogAnalyticsRankings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewLogAnalyticsClient("subid", cred, &options)
	res, err := client.GetLogAnalyticsRankings(ctx,
		"RG",
		"profile1",
		[]armcdn.LogRanking{
			armcdn.LogRankingURL},
		[]armcdn.LogRankingMetric{
			armcdn.LogRankingMetricClientRequestCount},
		5,
		func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T06:49:27.554Z"); return t }(),
		func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T09:49:27.554Z"); return t }(),
		&armcdn.LogAnalyticsClientGetLogAnalyticsRankingsOptions{CustomDomains: []string{}})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/LogAnalytics_GetLogAnalyticsRankings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.RankingsResponse{
			DateTimeBegin: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T14:49:27.554+08:00"); return t }()),
			DateTimeEnd:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T17:49:27.554+08:00"); return t }()),
			Tables: []*armcdn.RankingsResponseTablesItem{
				{
					Data: []*armcdn.RankingsResponseTablesPropertiesItemsItem{
						{
							Name: to.Ptr("https://testdomain.com/favicon.png"),
							Metrics: []*armcdn.RankingsResponseTablesPropertiesItemsMetricsItem{
								{
									Metric:     to.Ptr("clientRequestCount"),
									Percentage: to.Ptr[float32](8.28133862733976),
									Value:      to.Ptr[int64](2336),
								}},
						},
						{
							Name: to.Ptr("https://testdomain.com/js/app.js"),
							Metrics: []*armcdn.RankingsResponseTablesPropertiesItemsMetricsItem{
								{
									Metric:     to.Ptr("clientRequestCount"),
									Percentage: to.Ptr[float32](7.586500283607488),
									Value:      to.Ptr[int64](2140),
								}},
						},
						{
							Name: to.Ptr("https://testdomain.com/js/lang/en.js"),
							Metrics: []*armcdn.RankingsResponseTablesPropertiesItemsMetricsItem{
								{
									Metric:     to.Ptr("clientRequestCount"),
									Percentage: to.Ptr[float32](5.445263754963131),
									Value:      to.Ptr[int64](1536),
								}},
						},
						{
							Name: to.Ptr("https://testdomain.com/js/lib.js"),
							Metrics: []*armcdn.RankingsResponseTablesPropertiesItemsMetricsItem{
								{
									Metric:     to.Ptr("clientRequestCount"),
									Percentage: to.Ptr[float32](5.246738513896767),
									Value:      to.Ptr[int64](1480),
								}},
						},
						{
							Name: to.Ptr("https://cdn.exam.net/css/lib.css"),
							Metrics: []*armcdn.RankingsResponseTablesPropertiesItemsMetricsItem{
								{
									Metric:     to.Ptr("clientRequestCount"),
									Percentage: to.Ptr[float32](5.147475893363584),
									Value:      to.Ptr[int64](1452),
								}},
						}},
					Ranking: to.Ptr("url"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.RankingsResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RankingsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/LogAnalytics_GetLogAnalyticsRankings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLogAnalytics_GetLogAnalyticsLocations(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/LogAnalytics_GetLogAnalyticsLocations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LogAnalytics_GetLogAnalyticsLocations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewLogAnalyticsClient("subid", cred, &options)
	res, err := client.GetLogAnalyticsLocations(ctx,
		"RG",
		"profile1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/LogAnalytics_GetLogAnalyticsLocations.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.ContinentsResponse{
			Continents: []*armcdn.ContinentsResponseContinentsItem{
				{
					ID: to.Ptr("africa"),
				},
				{
					ID: to.Ptr("antarctica"),
				},
				{
					ID: to.Ptr("asia"),
				},
				{
					ID: to.Ptr("europe"),
				},
				{
					ID: to.Ptr("northAmerica"),
				},
				{
					ID: to.Ptr("oceania"),
				},
				{
					ID: to.Ptr("southAmerica"),
				}},
			CountryOrRegions: []*armcdn.ContinentsResponseCountryOrRegionsItem{
				{
					ContinentID: to.Ptr("africa"),
					ID:          to.Ptr("dz"),
				},
				{
					ContinentID: to.Ptr("africa"),
					ID:          to.Ptr("ao"),
				},
				{
					ContinentID: to.Ptr("africa"),
					ID:          to.Ptr("bw"),
				},
				{
					ContinentID: to.Ptr("africa"),
					ID:          to.Ptr("bi"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ContinentsResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContinentsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/LogAnalytics_GetLogAnalyticsLocations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLogAnalytics_GetLogAnalyticsResources(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/LogAnalytics_GetLogAnalyticsResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LogAnalytics_GetLogAnalyticsResources"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewLogAnalyticsClient("subid", cred, &options)
	res, err := client.GetLogAnalyticsResources(ctx,
		"RG",
		"profile1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/LogAnalytics_GetLogAnalyticsResources.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.ResourcesResponse{
			CustomDomains: []*armcdn.ResourcesResponseCustomDomainsItem{
				{
					Name:    to.Ptr("customdomain1.azurecdn.net"),
					History: to.Ptr(true),
					ID:      to.Ptr("customdomain1.azurecdn.net"),
				},
				{
					Name:    to.Ptr("customdomain2.azurecdn.net"),
					History: to.Ptr(true),
					ID:      to.Ptr("customdomain2.azurecdn.net"),
				},
				{
					Name:    to.Ptr("customdomain3.azurecdn.net"),
					History: to.Ptr(true),
					ID:      to.Ptr("customdomain3.azurecdn.net"),
				}},
			Endpoints: []*armcdn.ResourcesResponseEndpointsItem{
				{
					Name: to.Ptr("endpoint1.azureedge.net"),
					CustomDomains: []*armcdn.ResourcesResponseEndpointsPropertiesItemsItem{
						{
							Name:       to.Ptr("customdomain1.azurecdn.net"),
							EndpointID: to.Ptr("enbdpiont1"),
							History:    to.Ptr(true),
							ID:         to.Ptr("customdomain1.azurecdn.net"),
						},
						{
							Name:    to.Ptr("customdomain2.azurecdn.net"),
							History: to.Ptr(true),
							ID:      to.Ptr("customdomain2.azurecdn.net"),
						}},
					History: to.Ptr(false),
					ID:      to.Ptr("endpoint1"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourcesResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourcesResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/LogAnalytics_GetLogAnalyticsResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLogAnalytics_GetWafLogAnalyticsMetrics(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/LogAnalytics_GetWafLogAnalyticsMetrics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LogAnalytics_GetWafLogAnalyticsMetrics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewLogAnalyticsClient("subid", cred, &options)
	res, err := client.GetWafLogAnalyticsMetrics(ctx,
		"RG",
		"profile1",
		[]armcdn.WafMetric{
			armcdn.WafMetricClientRequestCount},
		func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T06:49:27.554Z"); return t }(),
		func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T09:49:27.554Z"); return t }(),
		armcdn.WafGranularityPT5M,
		&armcdn.LogAnalyticsClientGetWafLogAnalyticsMetricsOptions{Actions: []armcdn.WafAction{
			armcdn.WafActionBlock,
			armcdn.WafActionLog},
			GroupBy:   []armcdn.WafRankingGroupBy{},
			RuleTypes: []armcdn.WafRuleType{},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/LogAnalytics_GetWafLogAnalyticsMetrics.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.WafMetricsResponse{
			DateTimeBegin: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T14:30:27.554+08:00"); return t }()),
			DateTimeEnd:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T17:00:27.554+08:00"); return t }()),
			Granularity:   to.Ptr(armcdn.WafMetricsResponseGranularityPT5M),
			Series: []*armcdn.WafMetricsResponseSeriesItem{
				{
					Data: []*armcdn.Components18OrqelSchemasWafmetricsresponsePropertiesSeriesItemsPropertiesDataItems{
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T07:05:00+00:00"); return t }()),
							Value:    to.Ptr[float32](2),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T07:10:00+00:00"); return t }()),
							Value:    to.Ptr[float32](32),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T07:15:00+00:00"); return t }()),
							Value:    to.Ptr[float32](31),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T07:20:00+00:00"); return t }()),
							Value:    to.Ptr[float32](63),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T07:25:00+00:00"); return t }()),
							Value:    to.Ptr[float32](50),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T07:30:00+00:00"); return t }()),
							Value:    to.Ptr[float32](12),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T07:35:00+00:00"); return t }()),
							Value:    to.Ptr[float32](8),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T07:40:00+00:00"); return t }()),
							Value:    to.Ptr[float32](21),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T07:45:00+00:00"); return t }()),
							Value:    to.Ptr[float32](30),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T07:50:00+00:00"); return t }()),
							Value:    to.Ptr[float32](18),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T07:55:00+00:00"); return t }()),
							Value:    to.Ptr[float32](28),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T08:00:00+00:00"); return t }()),
							Value:    to.Ptr[float32](3),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T08:05:00+00:00"); return t }()),
							Value:    to.Ptr[float32](58),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T08:10:00+00:00"); return t }()),
							Value:    to.Ptr[float32](42),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T08:15:00+00:00"); return t }()),
							Value:    to.Ptr[float32](17),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T08:20:00+00:00"); return t }()),
							Value:    to.Ptr[float32](21),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T08:25:00+00:00"); return t }()),
							Value:    to.Ptr[float32](41),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T08:30:00+00:00"); return t }()),
							Value:    to.Ptr[float32](8),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T08:35:00+00:00"); return t }()),
							Value:    to.Ptr[float32](15),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T08:40:00+00:00"); return t }()),
							Value:    to.Ptr[float32](25),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T08:45:00+00:00"); return t }()),
							Value:    to.Ptr[float32](13),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T08:50:00+00:00"); return t }()),
							Value:    to.Ptr[float32](17),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T08:55:00+00:00"); return t }()),
							Value:    to.Ptr[float32](29),
						},
						{
							DateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T09:00:00+00:00"); return t }()),
							Value:    to.Ptr[float32](17),
						}},
					Groups: []*armcdn.WafMetricsResponseSeriesPropertiesItemsItem{},
					Metric: to.Ptr("clientRequestCount"),
					Unit:   to.Ptr(armcdn.WafMetricsResponseSeriesItemUnitCount),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.WafMetricsResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WafMetricsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/LogAnalytics_GetWafLogAnalyticsMetrics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLogAnalytics_GetWafLogAnalyticsRankings(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/LogAnalytics_GetWafLogAnalyticsRankings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LogAnalytics_GetWafLogAnalyticsRankings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewLogAnalyticsClient("subid", cred, &options)
	res, err := client.GetWafLogAnalyticsRankings(ctx,
		"RG",
		"profile1",
		[]armcdn.WafMetric{
			armcdn.WafMetricClientRequestCount},
		func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T06:49:27.554Z"); return t }(),
		func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T09:49:27.554Z"); return t }(),
		5,
		[]armcdn.WafRankingType{
			armcdn.WafRankingTypeRuleID},
		&armcdn.LogAnalyticsClientGetWafLogAnalyticsRankingsOptions{Actions: []armcdn.WafAction{},
			RuleTypes: []armcdn.WafRuleType{},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/LogAnalytics_GetWafLogAnalyticsRankings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.WafRankingsResponse{
			Data: []*armcdn.WafRankingsResponseDataItem{
				{
					GroupValues: []*string{
						to.Ptr("BlockRateLimit")},
					Metrics: []*armcdn.ComponentsKpo1PjSchemasWafrankingsresponsePropertiesDataItemsPropertiesMetricsItems{
						{
							Metric:     to.Ptr("clientRequestCount"),
							Percentage: to.Ptr[float64](0),
							Value:      to.Ptr[int64](1268),
						}},
				}},
			DateTimeBegin: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T14:49:27.554+08:00"); return t }()),
			DateTimeEnd:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-04T17:49:27.554+08:00"); return t }()),
			Groups: []*string{
				to.Ptr("ruleId")},
		}
		if !reflect.DeepEqual(exampleRes, res.WafRankingsResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WafRankingsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/LogAnalytics_GetWafLogAnalyticsRankings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProfiles_List(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profiles_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewProfilesClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.ProfileListResult{
			Value: []*armcdn.Profile{
				{
					Name:     to.Ptr("profile1"),
					Type:     to.Ptr("Microsoft.Cdn/profiles"),
					ID:       to.Ptr("/subscriptions/subid/resourcegroups/RG1/providers/Microsoft.Cdn/profiles/profile1"),
					Location: to.Ptr("WestCentralUs"),
					Tags:     map[string]*string{},
					Kind:     to.Ptr("frontdoor"),
					Properties: &armcdn.ProfileProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						ResourceState:     to.Ptr(armcdn.ProfileResourceStateActive),
					},
					SKU: &armcdn.SKU{
						Name: to.Ptr(armcdn.SKUNamePremiumAzureFrontDoor),
					},
				},
				{
					Name:     to.Ptr("profile2"),
					Type:     to.Ptr("Microsoft.Cdn/profiles"),
					ID:       to.Ptr("/subscriptions/subid/resourcegroups/RG1/providers/Microsoft.Cdn/profiles/profile2"),
					Location: to.Ptr("WestCentralUs"),
					Tags:     map[string]*string{},
					Kind:     to.Ptr("frontdoor"),
					Properties: &armcdn.ProfileProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						ResourceState:     to.Ptr(armcdn.ProfileResourceStateActive),
					},
					SKU: &armcdn.SKU{
						Name: to.Ptr(armcdn.SKUNamePremiumAzureFrontDoor),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProfileListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProfileListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProfiles_ListByResourceGroup(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profiles_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewProfilesClient("subid", cred, &options)
	pager := client.ListByResourceGroup("RG",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.ProfileListResult{
			Value: []*armcdn.Profile{
				{
					Name:     to.Ptr("profile1"),
					Type:     to.Ptr("Microsoft.Cdn/profiles"),
					ID:       to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1"),
					Location: to.Ptr("WestCentralUs"),
					Tags:     map[string]*string{},
					Kind:     to.Ptr("frontdoor"),
					Properties: &armcdn.ProfileProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						ResourceState:     to.Ptr(armcdn.ProfileResourceStateActive),
					},
					SKU: &armcdn.SKU{
						Name: to.Ptr(armcdn.SKUNamePremiumAzureFrontDoor),
					},
				},
				{
					Name:     to.Ptr("profile2"),
					Type:     to.Ptr("Microsoft.Cdn/profiles"),
					ID:       to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile2"),
					Location: to.Ptr("WestCentralUs"),
					Tags:     map[string]*string{},
					Kind:     to.Ptr("frontdoor"),
					Properties: &armcdn.ProfileProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						ResourceState:     to.Ptr(armcdn.ProfileResourceStateActive),
					},
					SKU: &armcdn.SKU{
						Name: to.Ptr(armcdn.SKUNamePremiumAzureFrontDoor),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProfileListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProfileListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProfiles_Get(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profiles_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewProfilesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"RG",
		"profile1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.Profile{
			Name:     to.Ptr("profile1"),
			Type:     to.Ptr("Microsoft.Cdn/profiles"),
			ID:       to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1"),
			Location: to.Ptr("WestCentralUs"),
			Tags:     map[string]*string{},
			Kind:     to.Ptr("frontdoor"),
			Properties: &armcdn.ProfileProperties{
				ProvisioningState: to.Ptr("Succeeded"),
				ResourceState:     to.Ptr(armcdn.ProfileResourceStateActive),
			},
			SKU: &armcdn.SKU{
				Name: to.Ptr(armcdn.SKUNamePremiumAzureFrontDoor),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProfiles_Create(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profiles_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewProfilesClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"RG",
		"profile1",
		armcdn.Profile{
			Location: to.Ptr("WestCentralUs"),
			SKU: &armcdn.SKU{
				Name: to.Ptr(armcdn.SKUNamePremiumAzureFrontDoor),
			},
		},
		&armcdn.ProfilesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.Profile{
			Name:     to.Ptr("profile1"),
			Type:     to.Ptr("Microsoft.Cdn/profiles"),
			ID:       to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1"),
			Location: to.Ptr("WestCentralUs"),
			Tags:     map[string]*string{},
			Kind:     to.Ptr("frontdoor"),
			Properties: &armcdn.ProfileProperties{
				ProvisioningState: to.Ptr("Succeeded"),
				ResourceState:     to.Ptr(armcdn.ProfileResourceStateCreating),
			},
			SKU: &armcdn.SKU{
				Name: to.Ptr(armcdn.SKUNamePremiumAzureFrontDoor),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProfiles_Update(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profiles_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewProfilesClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"RG",
		"profile1",
		armcdn.ProfileUpdateParameters{
			Tags: map[string]*string{
				"additionalProperties": to.Ptr("Tag1"),
			},
		},
		&armcdn.ProfilesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.Profile{
			Name:     to.Ptr("profile1"),
			Type:     to.Ptr("Microsoft.Cdn/profiles"),
			ID:       to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1"),
			Location: to.Ptr("WestCentralUs"),
			Tags: map[string]*string{
				"additionalProperties": to.Ptr("Tag1"),
			},
			Kind: to.Ptr("frontdoor"),
			Properties: &armcdn.ProfileProperties{
				ProvisioningState: to.Ptr("Succeeded"),
				ResourceState:     to.Ptr(armcdn.ProfileResourceStateActive),
			},
			SKU: &armcdn.SKU{
				Name: to.Ptr(armcdn.SKUNamePremiumAzureFrontDoor),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProfiles_Delete(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profiles_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewProfilesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"RG",
		"profile1",
		&armcdn.ProfilesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_Delete.json: %v", err)
	}
}

func TestProfiles_ListSupportedOptimizationTypes(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_ListSupportedOptimizationTypes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profiles_ListSupportedOptimizationTypes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewProfilesClient("subid", cred, &options)
	res, err := client.ListSupportedOptimizationTypes(ctx,
		"RG",
		"profile1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_ListSupportedOptimizationTypes.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.SupportedOptimizationTypesListResult{
			SupportedOptimizationTypes: []*armcdn.OptimizationType{
				to.Ptr(armcdn.OptimizationTypeGeneralWebDelivery),
				to.Ptr(armcdn.OptimizationTypeDynamicSiteAcceleration)},
		}
		if !reflect.DeepEqual(exampleRes, res.SupportedOptimizationTypesListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SupportedOptimizationTypesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_ListSupportedOptimizationTypes.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProfiles_ListResourceUsage(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_ListResourceUsage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profiles_ListResourceUsage"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewProfilesClient("subid", cred, &options)
	pager := client.ListResourceUsage("RG",
		"profile1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_ListResourceUsage.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.ResourceUsageListResult{
			Value: []*armcdn.ResourceUsage{
				{
					CurrentValue: to.Ptr[int32](0),
					Limit:        to.Ptr[int32](25),
					ResourceType: to.Ptr("endpoint"),
					Unit:         to.Ptr("count"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceUsageListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceUsageListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Profiles_ListResourceUsage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEndpoints_ListByProfile(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_ListByProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Endpoints_ListByProfile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewEndpointsClient("subid", cred, &options)
	pager := client.ListByProfile("RG",
		"profile1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_ListByProfile.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.EndpointListResult{
			Value: []*armcdn.Endpoint{
				{
					Name:     to.Ptr("endpoint1"),
					Type:     to.Ptr("Microsoft.Cdn/profiles/endpoints"),
					ID:       to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1"),
					Location: to.Ptr("CentralUs"),
					Tags:     map[string]*string{},
					Properties: &armcdn.EndpointProperties{
						ContentTypesToCompress: []*string{},
						DefaultOriginGroup: &armcdn.ResourceReference{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/originGroups/originGroup1"),
						},
						GeoFilters:                 []*armcdn.GeoFilter{},
						IsCompressionEnabled:       to.Ptr(false),
						IsHTTPAllowed:              to.Ptr(true),
						IsHTTPSAllowed:             to.Ptr(true),
						OptimizationType:           to.Ptr(armcdn.OptimizationTypeDynamicSiteAcceleration),
						OriginHostHeader:           to.Ptr("www.bing.com"),
						ProbePath:                  to.Ptr("/image"),
						QueryStringCachingBehavior: to.Ptr(armcdn.QueryStringCachingBehaviorNotSet),
						CustomDomains: []*armcdn.CustomDomain{
							{
								Name: to.Ptr("www-someDomain-net"),
								Properties: &armcdn.CustomDomainProperties{
									HostName: to.Ptr("www.someDomain.Net"),
								},
							}},
						HostName: to.Ptr("endpoint1.azureedge.net"),
						OriginGroups: []*armcdn.DeepCreatedOriginGroup{
							{
								Name: to.Ptr("originGroup1"),
								Properties: &armcdn.DeepCreatedOriginGroupProperties{
									HealthProbeSettings: &armcdn.HealthProbeParameters{
										ProbeIntervalInSeconds: to.Ptr[int32](120),
										ProbePath:              to.Ptr("/health.aspx"),
										ProbeProtocol:          to.Ptr(armcdn.ProbeProtocolHTTP),
										ProbeRequestType:       to.Ptr(armcdn.HealthProbeRequestTypeGET),
									},
									Origins: []*armcdn.ResourceReference{
										{
											ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/origins/www-bing-com"),
										}},
									ResponseBasedOriginErrorDetectionSettings: &armcdn.ResponseBasedOriginErrorDetectionParameters{
										ResponseBasedDetectedErrorTypes:          to.Ptr(armcdn.ResponseBasedDetectedErrorTypesTCPErrorsOnly),
										ResponseBasedFailoverThresholdPercentage: to.Ptr[int32](10),
									},
								},
							}},
						Origins: []*armcdn.DeepCreatedOrigin{
							{
								Name: to.Ptr("www-bing-com"),
								Properties: &armcdn.DeepCreatedOriginProperties{
									Enabled:          to.Ptr(true),
									HostName:         to.Ptr("www.bing.com"),
									HTTPPort:         to.Ptr[int32](80),
									HTTPSPort:        to.Ptr[int32](443),
									OriginHostHeader: to.Ptr("www.someDomain2.net"),
									Priority:         to.Ptr[int32](2),
									Weight:           to.Ptr[int32](50),
								},
							}},
						ProvisioningState: to.Ptr("Succeeded"),
						ResourceState:     to.Ptr(armcdn.EndpointResourceStateRunning),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EndpointListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EndpointListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_ListByProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEndpoints_Get(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Endpoints_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewEndpointsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"RG",
		"profile1",
		"endpoint1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.Endpoint{
			Name:     to.Ptr("endpoint1"),
			Type:     to.Ptr("Microsoft.Cdn/profiles/endpoints"),
			ID:       to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1"),
			Location: to.Ptr("CentralUs"),
			Tags:     map[string]*string{},
			Properties: &armcdn.EndpointProperties{
				ContentTypesToCompress: []*string{},
				DefaultOriginGroup: &armcdn.ResourceReference{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/originGroups/originGroup1"),
				},
				GeoFilters:                 []*armcdn.GeoFilter{},
				IsCompressionEnabled:       to.Ptr(false),
				IsHTTPAllowed:              to.Ptr(true),
				IsHTTPSAllowed:             to.Ptr(true),
				OptimizationType:           to.Ptr(armcdn.OptimizationTypeDynamicSiteAcceleration),
				OriginHostHeader:           to.Ptr("www.bing.com"),
				ProbePath:                  to.Ptr("/image"),
				QueryStringCachingBehavior: to.Ptr(armcdn.QueryStringCachingBehaviorNotSet),
				CustomDomains: []*armcdn.CustomDomain{
					{
						Name: to.Ptr("www-someDomain-net"),
						Properties: &armcdn.CustomDomainProperties{
							HostName: to.Ptr("www.someDomain.Net"),
						},
					}},
				HostName: to.Ptr("endpoint1.azureedge.net"),
				OriginGroups: []*armcdn.DeepCreatedOriginGroup{
					{
						Name: to.Ptr("originGroup1"),
						Properties: &armcdn.DeepCreatedOriginGroupProperties{
							HealthProbeSettings: &armcdn.HealthProbeParameters{
								ProbeIntervalInSeconds: to.Ptr[int32](120),
								ProbePath:              to.Ptr("/health.aspx"),
								ProbeProtocol:          to.Ptr(armcdn.ProbeProtocolHTTP),
								ProbeRequestType:       to.Ptr(armcdn.HealthProbeRequestTypeGET),
							},
							Origins: []*armcdn.ResourceReference{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/origins/www-bing-com"),
								}},
						},
					}},
				Origins: []*armcdn.DeepCreatedOrigin{
					{
						Name: to.Ptr("www-bing-com"),
						Properties: &armcdn.DeepCreatedOriginProperties{
							Enabled:          to.Ptr(true),
							HostName:         to.Ptr("www.bing.com"),
							HTTPPort:         to.Ptr[int32](80),
							HTTPSPort:        to.Ptr[int32](443),
							OriginHostHeader: to.Ptr("www.someDomain2.net"),
							Priority:         to.Ptr[int32](2),
							Weight:           to.Ptr[int32](50),
						},
					}},
				ProvisioningState: to.Ptr("Succeeded"),
				ResourceState:     to.Ptr(armcdn.EndpointResourceStateRunning),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Endpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Endpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEndpoints_Create(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Endpoints_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewEndpointsClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"RG",
		"profile1",
		"endpoint1",
		armcdn.Endpoint{
			Location: to.Ptr("WestUs"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armcdn.EndpointProperties{
				ContentTypesToCompress: []*string{
					to.Ptr("text/html"),
					to.Ptr("application/octet-stream")},
				DefaultOriginGroup: &armcdn.ResourceReference{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/originGroups/originGroup1"),
				},
				DeliveryPolicy: &armcdn.EndpointPropertiesUpdateParametersDeliveryPolicy{
					Description: to.Ptr("Test description for a policy."),
					Rules: []*armcdn.DeliveryRule{
						{
							Name: to.Ptr("rule1"),
							Actions: []armcdn.DeliveryRuleActionAutoGeneratedClassification{
								&armcdn.DeliveryRuleCacheExpirationAction{
									Name: to.Ptr(armcdn.DeliveryRuleActionCacheExpiration),
									Parameters: &armcdn.CacheExpirationActionParameters{
										CacheBehavior: to.Ptr(armcdn.CacheBehaviorOverride),
										CacheDuration: to.Ptr("10:10:09"),
										CacheType:     to.Ptr(armcdn.CacheTypeAll),
										TypeName:      to.Ptr(armcdn.CacheExpirationActionParametersTypeNameDeliveryRuleCacheExpirationActionParameters),
									},
								},
								&armcdn.DeliveryRuleResponseHeaderAction{
									Name: to.Ptr(armcdn.DeliveryRuleActionModifyResponseHeader),
									Parameters: &armcdn.HeaderActionParameters{
										HeaderAction: to.Ptr(armcdn.HeaderActionOverwrite),
										HeaderName:   to.Ptr("Access-Control-Allow-Origin"),
										TypeName:     to.Ptr(armcdn.HeaderActionParametersTypeNameDeliveryRuleHeaderActionParameters),
										Value:        to.Ptr("*"),
									},
								},
								&armcdn.DeliveryRuleRequestHeaderAction{
									Name: to.Ptr(armcdn.DeliveryRuleActionModifyRequestHeader),
									Parameters: &armcdn.HeaderActionParameters{
										HeaderAction: to.Ptr(armcdn.HeaderActionOverwrite),
										HeaderName:   to.Ptr("Accept-Encoding"),
										TypeName:     to.Ptr(armcdn.HeaderActionParametersTypeNameDeliveryRuleHeaderActionParameters),
										Value:        to.Ptr("gzip"),
									},
								}},
							Conditions: []armcdn.DeliveryRuleConditionClassification{
								&armcdn.DeliveryRuleRemoteAddressCondition{
									Name: to.Ptr(armcdn.MatchVariableRemoteAddress),
									Parameters: &armcdn.RemoteAddressMatchConditionParameters{
										MatchValues: []*string{
											to.Ptr("192.168.1.0/24"),
											to.Ptr("10.0.0.0/24")},
										NegateCondition: to.Ptr(true),
										Operator:        to.Ptr(armcdn.RemoteAddressOperatorIPMatch),
										TypeName:        to.Ptr(armcdn.RemoteAddressMatchConditionParametersTypeNameDeliveryRuleRemoteAddressConditionParameters),
									},
								}},
							Order: to.Ptr[int32](1),
						}},
				},
				IsCompressionEnabled:       to.Ptr(true),
				IsHTTPAllowed:              to.Ptr(true),
				IsHTTPSAllowed:             to.Ptr(true),
				OriginHostHeader:           to.Ptr("www.bing.com"),
				OriginPath:                 to.Ptr("/photos"),
				QueryStringCachingBehavior: to.Ptr(armcdn.QueryStringCachingBehaviorBypassCaching),
				OriginGroups: []*armcdn.DeepCreatedOriginGroup{
					{
						Name: to.Ptr("originGroup1"),
						Properties: &armcdn.DeepCreatedOriginGroupProperties{
							HealthProbeSettings: &armcdn.HealthProbeParameters{
								ProbeIntervalInSeconds: to.Ptr[int32](120),
								ProbePath:              to.Ptr("/health.aspx"),
								ProbeProtocol:          to.Ptr(armcdn.ProbeProtocolHTTP),
								ProbeRequestType:       to.Ptr(armcdn.HealthProbeRequestTypeGET),
							},
							Origins: []*armcdn.ResourceReference{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/origins/origin1"),
								},
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/origins/origin2"),
								}},
							ResponseBasedOriginErrorDetectionSettings: &armcdn.ResponseBasedOriginErrorDetectionParameters{
								ResponseBasedDetectedErrorTypes:          to.Ptr(armcdn.ResponseBasedDetectedErrorTypesTCPErrorsOnly),
								ResponseBasedFailoverThresholdPercentage: to.Ptr[int32](10),
							},
						},
					}},
				Origins: []*armcdn.DeepCreatedOrigin{
					{
						Name: to.Ptr("origin1"),
						Properties: &armcdn.DeepCreatedOriginProperties{
							Enabled:          to.Ptr(true),
							HostName:         to.Ptr("www.someDomain1.net"),
							HTTPPort:         to.Ptr[int32](80),
							HTTPSPort:        to.Ptr[int32](443),
							OriginHostHeader: to.Ptr("www.someDomain1.net"),
							Priority:         to.Ptr[int32](1),
							Weight:           to.Ptr[int32](50),
						},
					},
					{
						Name: to.Ptr("origin2"),
						Properties: &armcdn.DeepCreatedOriginProperties{
							Enabled:          to.Ptr(true),
							HostName:         to.Ptr("www.someDomain2.net"),
							HTTPPort:         to.Ptr[int32](80),
							HTTPSPort:        to.Ptr[int32](443),
							OriginHostHeader: to.Ptr("www.someDomain2.net"),
							Priority:         to.Ptr[int32](2),
							Weight:           to.Ptr[int32](50),
						},
					}},
			},
		},
		&armcdn.EndpointsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.Endpoint{
			Name:     to.Ptr("endpoint4899"),
			Type:     to.Ptr("Microsoft.Cdn/profiles/endpoints"),
			ID:       to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1"),
			Location: to.Ptr("WestUs"),
			Tags: map[string]*string{
				"kay1": to.Ptr("value1"),
			},
			Properties: &armcdn.EndpointProperties{
				ContentTypesToCompress: []*string{
					to.Ptr("text/html"),
					to.Ptr("application/octet-stream")},
				DefaultOriginGroup: &armcdn.ResourceReference{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/originGroups/originGroup1"),
				},
				DeliveryPolicy: &armcdn.EndpointPropertiesUpdateParametersDeliveryPolicy{
					Description: to.Ptr("Test description for a policy."),
					Rules: []*armcdn.DeliveryRule{
						{
							Name: to.Ptr("rule1"),
							Actions: []armcdn.DeliveryRuleActionAutoGeneratedClassification{
								&armcdn.DeliveryRuleCacheExpirationAction{
									Name: to.Ptr(armcdn.DeliveryRuleActionCacheExpiration),
									Parameters: &armcdn.CacheExpirationActionParameters{
										CacheBehavior: to.Ptr(armcdn.CacheBehaviorOverride),
										CacheDuration: to.Ptr("10:10:09"),
										CacheType:     to.Ptr(armcdn.CacheTypeAll),
										TypeName:      to.Ptr(armcdn.CacheExpirationActionParametersTypeNameDeliveryRuleCacheExpirationActionParameters),
									},
								},
								&armcdn.DeliveryRuleResponseHeaderAction{
									Name: to.Ptr(armcdn.DeliveryRuleActionModifyResponseHeader),
									Parameters: &armcdn.HeaderActionParameters{
										HeaderAction: to.Ptr(armcdn.HeaderActionOverwrite),
										HeaderName:   to.Ptr("Access-Control-Allow-Origin"),
										TypeName:     to.Ptr(armcdn.HeaderActionParametersTypeNameDeliveryRuleHeaderActionParameters),
										Value:        to.Ptr("*"),
									},
								},
								&armcdn.DeliveryRuleRequestHeaderAction{
									Name: to.Ptr(armcdn.DeliveryRuleActionModifyRequestHeader),
									Parameters: &armcdn.HeaderActionParameters{
										HeaderAction: to.Ptr(armcdn.HeaderActionOverwrite),
										HeaderName:   to.Ptr("Accept-Encoding"),
										TypeName:     to.Ptr(armcdn.HeaderActionParametersTypeNameDeliveryRuleHeaderActionParameters),
										Value:        to.Ptr("gzip"),
									},
								}},
							Conditions: []armcdn.DeliveryRuleConditionClassification{
								&armcdn.DeliveryRuleRemoteAddressCondition{
									Name: to.Ptr(armcdn.MatchVariableRemoteAddress),
									Parameters: &armcdn.RemoteAddressMatchConditionParameters{
										MatchValues: []*string{
											to.Ptr("192.168.1.0/24"),
											to.Ptr("10.0.0.0/24")},
										NegateCondition: to.Ptr(true),
										Operator:        to.Ptr(armcdn.RemoteAddressOperatorIPMatch),
										Transforms:      []*armcdn.Transform{},
										TypeName:        to.Ptr(armcdn.RemoteAddressMatchConditionParametersTypeNameDeliveryRuleRemoteAddressConditionParameters),
									},
								}},
							Order: to.Ptr[int32](1),
						}},
				},
				GeoFilters:                 []*armcdn.GeoFilter{},
				IsCompressionEnabled:       to.Ptr(true),
				IsHTTPAllowed:              to.Ptr(true),
				IsHTTPSAllowed:             to.Ptr(true),
				OriginHostHeader:           to.Ptr("www.bing.com"),
				OriginPath:                 to.Ptr("/photos"),
				QueryStringCachingBehavior: to.Ptr(armcdn.QueryStringCachingBehaviorBypassCaching),
				HostName:                   to.Ptr("endpoint4899.azureedge-test.net"),
				OriginGroups: []*armcdn.DeepCreatedOriginGroup{
					{
						Name: to.Ptr("originGroup1"),
						Properties: &armcdn.DeepCreatedOriginGroupProperties{
							HealthProbeSettings: &armcdn.HealthProbeParameters{
								ProbeIntervalInSeconds: to.Ptr[int32](120),
								ProbePath:              to.Ptr("/health.aspx"),
								ProbeProtocol:          to.Ptr(armcdn.ProbeProtocolHTTP),
								ProbeRequestType:       to.Ptr(armcdn.HealthProbeRequestTypeGET),
							},
							Origins: []*armcdn.ResourceReference{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/origins/origin1"),
								},
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/origins/origin2"),
								}},
							ResponseBasedOriginErrorDetectionSettings: &armcdn.ResponseBasedOriginErrorDetectionParameters{
								ResponseBasedDetectedErrorTypes:          to.Ptr(armcdn.ResponseBasedDetectedErrorTypesTCPErrorsOnly),
								ResponseBasedFailoverThresholdPercentage: to.Ptr[int32](10),
							},
						},
					}},
				Origins: []*armcdn.DeepCreatedOrigin{
					{
						Name: to.Ptr("origin1"),
						Properties: &armcdn.DeepCreatedOriginProperties{
							Enabled:          to.Ptr(true),
							HostName:         to.Ptr("www.someDomain1.net"),
							HTTPPort:         to.Ptr[int32](80),
							HTTPSPort:        to.Ptr[int32](443),
							OriginHostHeader: to.Ptr("www.someDomain1.net"),
							Priority:         to.Ptr[int32](1),
							Weight:           to.Ptr[int32](50),
						},
					},
					{
						Name: to.Ptr("origin2"),
						Properties: &armcdn.DeepCreatedOriginProperties{
							Enabled:          to.Ptr(true),
							HostName:         to.Ptr("www.someDomain2.net"),
							HTTPPort:         to.Ptr[int32](80),
							HTTPSPort:        to.Ptr[int32](443),
							OriginHostHeader: to.Ptr("www.someDomain2.net"),
							Priority:         to.Ptr[int32](2),
							Weight:           to.Ptr[int32](50),
						},
					}},
				ProvisioningState: to.Ptr("Succeeded"),
				ResourceState:     to.Ptr(armcdn.EndpointResourceStateCreating),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Endpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Endpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEndpoints_Update(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Endpoints_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewEndpointsClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"RG",
		"profile1",
		"endpoint1",
		armcdn.EndpointUpdateParameters{
			Tags: map[string]*string{
				"additionalProperties": to.Ptr("Tag1"),
			},
		},
		&armcdn.EndpointsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.Endpoint{
			Name:     to.Ptr("endpoint1"),
			Type:     to.Ptr("Microsoft.Cdn/profiles/endpoints"),
			ID:       to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1"),
			Location: to.Ptr("WestCentralUs"),
			Tags: map[string]*string{
				"additionalProperties": to.Ptr("Tag1"),
			},
			Properties: &armcdn.EndpointProperties{
				ContentTypesToCompress: []*string{},
				DefaultOriginGroup: &armcdn.ResourceReference{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/originGroups/originGroup1"),
				},
				GeoFilters:                 []*armcdn.GeoFilter{},
				IsCompressionEnabled:       to.Ptr(false),
				IsHTTPAllowed:              to.Ptr(true),
				IsHTTPSAllowed:             to.Ptr(true),
				QueryStringCachingBehavior: to.Ptr(armcdn.QueryStringCachingBehaviorIgnoreQueryString),
				HostName:                   to.Ptr("endpoint1.azureedge.net"),
				OriginGroups: []*armcdn.DeepCreatedOriginGroup{
					{
						Name: to.Ptr("originGroup1"),
						Properties: &armcdn.DeepCreatedOriginGroupProperties{
							HealthProbeSettings: &armcdn.HealthProbeParameters{
								ProbeIntervalInSeconds: to.Ptr[int32](120),
								ProbePath:              to.Ptr("/health.aspx"),
								ProbeProtocol:          to.Ptr(armcdn.ProbeProtocolHTTP),
								ProbeRequestType:       to.Ptr(armcdn.HealthProbeRequestTypeGET),
							},
							Origins: []*armcdn.ResourceReference{
								{
									ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/origins/www-bing-com"),
								}},
						},
					}},
				Origins: []*armcdn.DeepCreatedOrigin{
					{
						Name: to.Ptr("www-bing-com"),
						Properties: &armcdn.DeepCreatedOriginProperties{
							Enabled:          to.Ptr(true),
							HostName:         to.Ptr("www.bing.com"),
							HTTPPort:         to.Ptr[int32](80),
							HTTPSPort:        to.Ptr[int32](443),
							OriginHostHeader: to.Ptr("www.someDomain2.net"),
							Priority:         to.Ptr[int32](2),
							Weight:           to.Ptr[int32](50),
						},
					}},
				ProvisioningState: to.Ptr("Succeeded"),
				ResourceState:     to.Ptr(armcdn.EndpointResourceStateCreating),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Endpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Endpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEndpoints_Delete(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Endpoints_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewEndpointsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"RG",
		"profile1",
		"endpoint1",
		&armcdn.EndpointsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Delete.json: %v", err)
	}
}

func TestEndpoints_Start(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Start.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Endpoints_Start"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewEndpointsClient("subid", cred, &options)
	poller, err := client.BeginStart(ctx,
		"RG",
		"profile1",
		"endpoint1",
		&armcdn.EndpointsClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Start.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Start.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.Endpoint{
			Name:     to.Ptr("endpoint4899"),
			Type:     to.Ptr("Microsoft.Cdn/profiles/endpoints"),
			ID:       to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1"),
			Location: to.Ptr("WestUs"),
			Tags: map[string]*string{
				"kay1": to.Ptr("value1"),
			},
			Properties: &armcdn.EndpointProperties{
				ContentTypesToCompress:     []*string{},
				GeoFilters:                 []*armcdn.GeoFilter{},
				IsCompressionEnabled:       to.Ptr(false),
				IsHTTPAllowed:              to.Ptr(true),
				IsHTTPSAllowed:             to.Ptr(true),
				OptimizationType:           to.Ptr(armcdn.OptimizationTypeDynamicSiteAcceleration),
				OriginHostHeader:           to.Ptr("www.bing.com"),
				ProbePath:                  to.Ptr("/image"),
				QueryStringCachingBehavior: to.Ptr(armcdn.QueryStringCachingBehaviorNotSet),
				HostName:                   to.Ptr("endpoint1.azureedge.net"),
				Origins: []*armcdn.DeepCreatedOrigin{
					{
						Name: to.Ptr("www-bing-com"),
						Properties: &armcdn.DeepCreatedOriginProperties{
							HostName:  to.Ptr("www.bing.com"),
							HTTPPort:  to.Ptr[int32](80),
							HTTPSPort: to.Ptr[int32](443),
						},
					}},
				ProvisioningState: to.Ptr("Succeeded"),
				ResourceState:     to.Ptr(armcdn.EndpointResourceStateStarting),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Endpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Endpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Start.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEndpoints_Stop(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Stop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Endpoints_Stop"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewEndpointsClient("subid", cred, &options)
	poller, err := client.BeginStop(ctx,
		"RG",
		"profile1",
		"endpoint1",
		&armcdn.EndpointsClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Stop.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Stop.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.Endpoint{
			Name:     to.Ptr("endpoint4899"),
			Type:     to.Ptr("Microsoft.Cdn/profiles/endpoints"),
			ID:       to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1"),
			Location: to.Ptr("WestUs"),
			Tags: map[string]*string{
				"kay1": to.Ptr("value1"),
			},
			Properties: &armcdn.EndpointProperties{
				ContentTypesToCompress:     []*string{},
				GeoFilters:                 []*armcdn.GeoFilter{},
				IsCompressionEnabled:       to.Ptr(false),
				IsHTTPAllowed:              to.Ptr(true),
				IsHTTPSAllowed:             to.Ptr(true),
				OptimizationType:           to.Ptr(armcdn.OptimizationTypeDynamicSiteAcceleration),
				OriginHostHeader:           to.Ptr("www.bing.com"),
				ProbePath:                  to.Ptr("/image"),
				QueryStringCachingBehavior: to.Ptr(armcdn.QueryStringCachingBehaviorNotSet),
				HostName:                   to.Ptr("endpoint1.azureedge.net"),
				Origins: []*armcdn.DeepCreatedOrigin{
					{
						Name: to.Ptr("www-bing-com"),
						Properties: &armcdn.DeepCreatedOriginProperties{
							HostName:  to.Ptr("www.bing.com"),
							HTTPPort:  to.Ptr[int32](80),
							HTTPSPort: to.Ptr[int32](443),
						},
					}},
				ProvisioningState: to.Ptr("Succeeded"),
				ResourceState:     to.Ptr(armcdn.EndpointResourceStateStopping),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Endpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Endpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Stop.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEndpoints_PurgeContent(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_PurgeContent.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Endpoints_PurgeContent"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewEndpointsClient("subid", cred, &options)
	poller, err := client.BeginPurgeContent(ctx,
		"RG",
		"profile1",
		"endpoint1",
		armcdn.PurgeParameters{
			ContentPaths: []*string{
				to.Ptr("/folder1")},
		},
		&armcdn.EndpointsClientBeginPurgeContentOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_PurgeContent.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_PurgeContent.json: %v", err)
	}
}

func TestEndpoints_LoadContent(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_LoadContent.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Endpoints_LoadContent"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewEndpointsClient("subid", cred, &options)
	poller, err := client.BeginLoadContent(ctx,
		"RG",
		"profile1",
		"endpoint1",
		armcdn.LoadParameters{
			ContentPaths: []*string{
				to.Ptr("/folder1")},
		},
		&armcdn.EndpointsClientBeginLoadContentOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_LoadContent.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_LoadContent.json: %v", err)
	}
}

func TestEndpoints_ValidateCustomDomain(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_ValidateCustomDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Endpoints_ValidateCustomDomain"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewEndpointsClient("subid", cred, &options)
	res, err := client.ValidateCustomDomain(ctx,
		"RG",
		"profile1",
		"endpoint1",
		armcdn.ValidateCustomDomainInput{
			HostName: to.Ptr("www.someDomain.com"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_ValidateCustomDomain.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.ValidateCustomDomainOutput{
			CustomDomainValidated: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.ValidateCustomDomainOutput) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ValidateCustomDomainOutput)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_ValidateCustomDomain.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEndpoints_ListResourceUsage(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_ListResourceUsage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Endpoints_ListResourceUsage"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewEndpointsClient("subid", cred, &options)
	pager := client.ListResourceUsage("RG",
		"profile1",
		"endpoint1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_ListResourceUsage.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.ResourceUsageListResult{
			Value: []*armcdn.ResourceUsage{
				{
					CurrentValue: to.Ptr[int32](1),
					Limit:        to.Ptr[int32](20),
					ResourceType: to.Ptr("customdomain"),
					Unit:         to.Ptr("count"),
				},
				{
					CurrentValue: to.Ptr[int32](0),
					Limit:        to.Ptr[int32](25),
					ResourceType: to.Ptr("geofilter"),
					Unit:         to.Ptr("count"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceUsageListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceUsageListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_ListResourceUsage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOrigins_ListByEndpoint(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Origins_ListByEndpoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Origins_ListByEndpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewOriginsClient("subid", cred, &options)
	pager := client.ListByEndpoint("RG",
		"profile1",
		"endpoint1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Origins_ListByEndpoint.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.OriginListResult{
			Value: []*armcdn.Origin{
				{
					Name: to.Ptr("www-someDomain-net"),
					Type: to.Ptr("Microsoft.Cdn/profiles/endpoints/origins"),
					ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/origins/www-someDomain-net"),
					Properties: &armcdn.OriginProperties{
						Enabled:                    to.Ptr(true),
						HostName:                   to.Ptr("www.someDomain.net"),
						OriginHostHeader:           to.Ptr("www.someDomain.net"),
						Priority:                   to.Ptr[int32](1),
						PrivateLinkAlias:           to.Ptr("APPSERVER.d84e61f0-0870-4d24-9746-7438fa0019d1.westus2.azure.privatelinkservice"),
						PrivateLinkApprovalMessage: to.Ptr("Please approve the connection request for this Private Link"),
						Weight:                     to.Ptr[int32](50),
						PrivateEndpointStatus:      to.Ptr(armcdn.PrivateEndpointStatusPending),
						ProvisioningState:          to.Ptr("Succeeded"),
						ResourceState:              to.Ptr(armcdn.OriginResourceStateActive),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OriginListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OriginListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Origins_ListByEndpoint.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOrigins_Get(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Origins_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Origins_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewOriginsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"RG",
		"profile1",
		"endpoint1",
		"www-someDomain-net",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Origins_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.Origin{
			Name: to.Ptr("www-someDomain-net"),
			Type: to.Ptr("Microsoft.Cdn/profiles/endpoints/origins"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/origins/www-someDomain-net"),
			Properties: &armcdn.OriginProperties{
				Enabled:                    to.Ptr(true),
				HostName:                   to.Ptr("www.someDomain.net"),
				OriginHostHeader:           to.Ptr("www.someDomain.net"),
				Priority:                   to.Ptr[int32](1),
				PrivateLinkAlias:           to.Ptr("APPSERVER.d84e61f0-0870-4d24-9746-7438fa0019d1.westus2.azure.privatelinkservice"),
				PrivateLinkApprovalMessage: to.Ptr("Please approve the connection request for this Private Link"),
				Weight:                     to.Ptr[int32](50),
				PrivateEndpointStatus:      to.Ptr(armcdn.PrivateEndpointStatusPending),
				ProvisioningState:          to.Ptr("Succeeded"),
				ResourceState:              to.Ptr(armcdn.OriginResourceStateActive),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Origin) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Origin)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Origins_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOrigins_Create(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Origins_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Origins_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewOriginsClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"RG",
		"profile1",
		"endpoint1",
		"www-someDomain-net",
		armcdn.Origin{
			Properties: &armcdn.OriginProperties{
				Enabled:                    to.Ptr(true),
				HostName:                   to.Ptr("www.someDomain.net"),
				HTTPPort:                   to.Ptr[int32](80),
				HTTPSPort:                  to.Ptr[int32](443),
				OriginHostHeader:           to.Ptr("www.someDomain.net"),
				Priority:                   to.Ptr[int32](1),
				PrivateLinkApprovalMessage: to.Ptr("Please approve the connection request for this Private Link"),
				PrivateLinkLocation:        to.Ptr("eastus"),
				PrivateLinkResourceID:      to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.Network/privateLinkServices/pls1"),
				Weight:                     to.Ptr[int32](50),
			},
		},
		&armcdn.OriginsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Origins_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Origins_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.Origin{
			Name: to.Ptr("www-someDomain-net"),
			Type: to.Ptr("Microsoft.Cdn/profiles/endpoints/origins"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/origins/www-someDomain-net"),
			Properties: &armcdn.OriginProperties{
				Enabled:                    to.Ptr(true),
				HostName:                   to.Ptr("www.someDomain.net"),
				HTTPPort:                   to.Ptr[int32](80),
				HTTPSPort:                  to.Ptr[int32](443),
				OriginHostHeader:           to.Ptr("www.someDomain.net"),
				Priority:                   to.Ptr[int32](1),
				PrivateLinkApprovalMessage: to.Ptr("Please approve the connection request for this Private Link"),
				PrivateLinkLocation:        to.Ptr("eastus"),
				PrivateLinkResourceID:      to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.Network/privateLinkServices/pls1"),
				Weight:                     to.Ptr[int32](50),
				PrivateEndpointStatus:      to.Ptr(armcdn.PrivateEndpointStatusPending),
				ProvisioningState:          to.Ptr("Succeeded"),
				ResourceState:              to.Ptr(armcdn.OriginResourceStateActive),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Origin) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Origin)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Origins_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOrigins_Update(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Origins_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Origins_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewOriginsClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"RG",
		"profile1",
		"endpoint1",
		"www-someDomain-net",
		armcdn.OriginUpdateParameters{
			Properties: &armcdn.OriginUpdatePropertiesParameters{
				Enabled:          to.Ptr(true),
				HTTPPort:         to.Ptr[int32](42),
				HTTPSPort:        to.Ptr[int32](43),
				OriginHostHeader: to.Ptr("www.someDomain2.net"),
				Priority:         to.Ptr[int32](1),
				PrivateLinkAlias: to.Ptr("APPSERVER.d84e61f0-0870-4d24-9746-7438fa0019d1.westus2.azure.privatelinkservice"),
				Weight:           to.Ptr[int32](50),
			},
		},
		&armcdn.OriginsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Origins_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Origins_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.Origin{
			Name: to.Ptr("www-someDomain-net"),
			Type: to.Ptr("Microsoft.Cdn/profiles/endpoints/origins"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/origins/www-someDomain-net"),
			Properties: &armcdn.OriginProperties{
				Enabled:                    to.Ptr(true),
				HostName:                   to.Ptr("www.someDomain.net"),
				HTTPPort:                   to.Ptr[int32](42),
				HTTPSPort:                  to.Ptr[int32](43),
				OriginHostHeader:           to.Ptr("www.someDomain2.net"),
				Priority:                   to.Ptr[int32](1),
				PrivateLinkAlias:           to.Ptr("APPSERVER.d84e61f0-0870-4d24-9746-7438fa0019d1.westus2.azure.privatelinkservice"),
				PrivateLinkApprovalMessage: to.Ptr("Please approve the connection request for this Private Link"),
				Weight:                     to.Ptr[int32](50),
				PrivateEndpointStatus:      to.Ptr(armcdn.PrivateEndpointStatusPending),
				ProvisioningState:          to.Ptr("Succeeded"),
				ResourceState:              to.Ptr(armcdn.OriginResourceStateActive),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Origin) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Origin)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Origins_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOrigins_Delete(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Origins_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Origins_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewOriginsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"RG",
		"profile1",
		"endpoint1",
		"origin1",
		&armcdn.OriginsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Origins_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Origins_Delete.json: %v", err)
	}
}

func TestOriginGroups_ListByEndpoint(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/OriginGroups_ListByEndpoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OriginsGroups_ListByEndpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewOriginGroupsClient("subid", cred, &options)
	pager := client.ListByEndpoint("RG",
		"profile1",
		"endpoint1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/OriginGroups_ListByEndpoint.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.OriginGroupListResult{
			Value: []*armcdn.OriginGroup{
				{
					Name: to.Ptr("origingroup1"),
					Type: to.Ptr("Microsoft.Cdn/profiles/endpoints/origingroups"),
					ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/originGroups/originGroup1"),
					Properties: &armcdn.OriginGroupProperties{
						HealthProbeSettings: &armcdn.HealthProbeParameters{
							ProbeIntervalInSeconds: to.Ptr[int32](120),
							ProbePath:              to.Ptr("/health.aspx"),
							ProbeProtocol:          to.Ptr(armcdn.ProbeProtocolHTTP),
							ProbeRequestType:       to.Ptr(armcdn.HealthProbeRequestTypeGET),
						},
						Origins: []*armcdn.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/origins/origin1"),
							}},
						ResponseBasedOriginErrorDetectionSettings: &armcdn.ResponseBasedOriginErrorDetectionParameters{
							ResponseBasedDetectedErrorTypes:          to.Ptr(armcdn.ResponseBasedDetectedErrorTypesTCPErrorsOnly),
							ResponseBasedFailoverThresholdPercentage: to.Ptr[int32](10),
						},
						ProvisioningState: to.Ptr("Succeeded"),
						ResourceState:     to.Ptr(armcdn.OriginGroupResourceStateActive),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OriginGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OriginGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/OriginGroups_ListByEndpoint.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOriginGroups_Get(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/OriginGroups_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OriginGroups_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewOriginGroupsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"RG",
		"profile1",
		"endpoint1",
		"originGroup1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/OriginGroups_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.OriginGroup{
			Name: to.Ptr("origingroup1"),
			Type: to.Ptr("Microsoft.Cdn/profiles/endpoints/origingroups"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/originGroups/originGroup1"),
			Properties: &armcdn.OriginGroupProperties{
				HealthProbeSettings: &armcdn.HealthProbeParameters{
					ProbeIntervalInSeconds: to.Ptr[int32](120),
					ProbePath:              to.Ptr("/health.aspx"),
					ProbeProtocol:          to.Ptr(armcdn.ProbeProtocolHTTP),
					ProbeRequestType:       to.Ptr(armcdn.HealthProbeRequestTypeGET),
				},
				Origins: []*armcdn.ResourceReference{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/origins/origin1"),
					}},
				ResponseBasedOriginErrorDetectionSettings: &armcdn.ResponseBasedOriginErrorDetectionParameters{
					HTTPErrorRanges: []*armcdn.HTTPErrorRangeParameters{
						{
							Begin: to.Ptr[int32](500),
							End:   to.Ptr[int32](505),
						}},
					ResponseBasedDetectedErrorTypes:          to.Ptr(armcdn.ResponseBasedDetectedErrorTypesTCPAndHTTPErrors),
					ResponseBasedFailoverThresholdPercentage: to.Ptr[int32](10),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				ResourceState:     to.Ptr(armcdn.OriginGroupResourceStateActive),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OriginGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OriginGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/OriginGroups_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOriginGroups_Create(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/OriginGroups_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OriginGroups_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewOriginGroupsClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"RG",
		"profile1",
		"endpoint1",
		"origingroup1",
		armcdn.OriginGroup{
			Properties: &armcdn.OriginGroupProperties{
				HealthProbeSettings: &armcdn.HealthProbeParameters{
					ProbeIntervalInSeconds: to.Ptr[int32](120),
					ProbePath:              to.Ptr("/health.aspx"),
					ProbeProtocol:          to.Ptr(armcdn.ProbeProtocolHTTP),
					ProbeRequestType:       to.Ptr(armcdn.HealthProbeRequestTypeGET),
				},
				Origins: []*armcdn.ResourceReference{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/origins/origin1"),
					}},
				ResponseBasedOriginErrorDetectionSettings: &armcdn.ResponseBasedOriginErrorDetectionParameters{
					ResponseBasedDetectedErrorTypes:          to.Ptr(armcdn.ResponseBasedDetectedErrorTypesTCPErrorsOnly),
					ResponseBasedFailoverThresholdPercentage: to.Ptr[int32](10),
				},
			},
		},
		&armcdn.OriginGroupsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/OriginGroups_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/OriginGroups_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.OriginGroup{
			Name: to.Ptr("origingroup1"),
			Type: to.Ptr("Microsoft.Cdn/profiles/endpoints/origingroups"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/originGroups/originGroup1"),
			Properties: &armcdn.OriginGroupProperties{
				HealthProbeSettings: &armcdn.HealthProbeParameters{
					ProbeIntervalInSeconds: to.Ptr[int32](120),
					ProbePath:              to.Ptr("/health.aspx"),
					ProbeProtocol:          to.Ptr(armcdn.ProbeProtocolHTTP),
					ProbeRequestType:       to.Ptr(armcdn.HealthProbeRequestTypeGET),
				},
				Origins: []*armcdn.ResourceReference{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/origins/origin1"),
					}},
				ResponseBasedOriginErrorDetectionSettings: &armcdn.ResponseBasedOriginErrorDetectionParameters{
					ResponseBasedDetectedErrorTypes:          to.Ptr(armcdn.ResponseBasedDetectedErrorTypesTCPErrorsOnly),
					ResponseBasedFailoverThresholdPercentage: to.Ptr[int32](10),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				ResourceState:     to.Ptr(armcdn.OriginGroupResourceStateActive),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OriginGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OriginGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/OriginGroups_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOriginGroups_Update(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/OriginGroups_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OriginGroups_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewOriginGroupsClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"RG",
		"profile1",
		"endpoint1",
		"originGroup1",
		armcdn.OriginGroupUpdateParameters{
			Properties: &armcdn.OriginGroupUpdatePropertiesParameters{
				HealthProbeSettings: &armcdn.HealthProbeParameters{
					ProbeIntervalInSeconds: to.Ptr[int32](120),
					ProbePath:              to.Ptr("/health.aspx"),
					ProbeProtocol:          to.Ptr(armcdn.ProbeProtocolHTTP),
					ProbeRequestType:       to.Ptr(armcdn.HealthProbeRequestTypeGET),
				},
				Origins: []*armcdn.ResourceReference{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/origins/origin2"),
					}},
			},
		},
		&armcdn.OriginGroupsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/OriginGroups_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/OriginGroups_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.OriginGroup{
			Name: to.Ptr("www-someDomain-net"),
			Type: to.Ptr("Microsoft.Cdn/profiles/endpoints/origins"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/origins/www-someDomain-net"),
			Properties: &armcdn.OriginGroupProperties{
				HealthProbeSettings: &armcdn.HealthProbeParameters{
					ProbeIntervalInSeconds: to.Ptr[int32](120),
					ProbePath:              to.Ptr("/health.aspx"),
					ProbeProtocol:          to.Ptr(armcdn.ProbeProtocolHTTP),
					ProbeRequestType:       to.Ptr(armcdn.HealthProbeRequestTypeGET),
				},
				Origins: []*armcdn.ResourceReference{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/origins/origin2"),
					}},
				ProvisioningState: to.Ptr("Succeeded"),
				ResourceState:     to.Ptr(armcdn.OriginGroupResourceStateActive),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OriginGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OriginGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/OriginGroups_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOriginGroups_Delete(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/OriginGroups_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OriginGroups_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewOriginGroupsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"RG",
		"profile1",
		"endpoint1",
		"originGroup1",
		&armcdn.OriginGroupsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/OriginGroups_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/OriginGroups_Delete.json: %v", err)
	}
}

func TestCustomDomains_ListByEndpoint(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/CustomDomains_ListByEndpoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomDomains_ListByEndpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewCustomDomainsClient("subid", cred, &options)
	pager := client.ListByEndpoint("RG",
		"profile1",
		"endpoint1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/CustomDomains_ListByEndpoint.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.CustomDomainListResult{
			Value: []*armcdn.CustomDomain{
				{
					Name: to.Ptr("www-someDomain-net"),
					Type: to.Ptr("Microsoft.Cdn/profiles/endpoints/customdomains"),
					ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/customdomains/www-someDomain-net"),
					Properties: &armcdn.CustomDomainProperties{
						CustomHTTPSProvisioningState:    to.Ptr(armcdn.CustomHTTPSProvisioningStateDisabled),
						CustomHTTPSProvisioningSubstate: to.Ptr(armcdn.CustomHTTPSProvisioningSubstate("None")),
						HostName:                        to.Ptr("www.someDomain.net"),
						ProvisioningState:               to.Ptr("Succeeded"),
						ResourceState:                   to.Ptr(armcdn.CustomDomainResourceStateActive),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CustomDomainListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CustomDomainListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/CustomDomains_ListByEndpoint.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomDomains_Get(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/CustomDomains_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomDomains_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewCustomDomainsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"RG",
		"profile1",
		"endpoint1",
		"www-someDomain-net",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/CustomDomains_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.CustomDomain{
			Name: to.Ptr("www-someDomain-net"),
			Type: to.Ptr("Microsoft.Cdn/profiles/endpoints/customdomains"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/customdomains/www-someDomain-net"),
			Properties: &armcdn.CustomDomainProperties{
				CustomHTTPSProvisioningState:    to.Ptr(armcdn.CustomHTTPSProvisioningStateDisabled),
				CustomHTTPSProvisioningSubstate: to.Ptr(armcdn.CustomHTTPSProvisioningSubstate("None")),
				HostName:                        to.Ptr("www.someDomain.net"),
				ProvisioningState:               to.Ptr("Succeeded"),
				ResourceState:                   to.Ptr(armcdn.CustomDomainResourceStateActive),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomDomain) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomDomain)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/CustomDomains_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomDomains_Create(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/CustomDomains_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomDomains_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewCustomDomainsClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"RG",
		"profile1",
		"endpoint1",
		"www-someDomain-net",
		armcdn.CustomDomainParameters{
			Properties: &armcdn.CustomDomainPropertiesParameters{
				HostName: to.Ptr("www.someDomain.net"),
			},
		},
		&armcdn.CustomDomainsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/CustomDomains_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/CustomDomains_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.CustomDomain{
			Name: to.Ptr("www-someDomain-net"),
			Type: to.Ptr("Microsoft.Cdn/profiles/endpoints/customdomains"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1/customdomains/www-someDomain-net"),
			Properties: &armcdn.CustomDomainProperties{
				CustomHTTPSProvisioningState:    to.Ptr(armcdn.CustomHTTPSProvisioningStateEnabling),
				CustomHTTPSProvisioningSubstate: to.Ptr(armcdn.CustomHTTPSProvisioningSubstatePendingDomainControlValidationREquestApproval),
				HostName:                        to.Ptr("www.someDomain.net"),
				ProvisioningState:               to.Ptr("Succeeded"),
				ResourceState:                   to.Ptr(armcdn.CustomDomainResourceStateActive),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomDomain) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomDomain)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/CustomDomains_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomDomains_Delete(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/CustomDomains_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomDomains_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewCustomDomainsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"RG",
		"profile1",
		"endpoint1",
		"www-someDomain-net",
		&armcdn.CustomDomainsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/CustomDomains_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/CustomDomains_Delete.json: %v", err)
	}
}

func TestCdnManagementClient_CheckNameAvailability(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewManagementClient("<subscription-id>", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		armcdn.CheckNameAvailabilityInput{
			Name: to.Ptr("sampleName"),
			Type: to.Ptr(armcdn.ResourceTypeMicrosoftCdnProfilesEndpoints),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/CheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.CheckNameAvailabilityOutput{
			Message:       to.Ptr("Name not available"),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr("Name is already in use"),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityOutput) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityOutput)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCdnManagementClient_CheckNameAvailabilityWithSubscription(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/CheckNameAvailabilityWithSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CheckNameAvailabilityWithSubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewManagementClient("subid", cred, &options)
	res, err := client.CheckNameAvailabilityWithSubscription(ctx,
		armcdn.CheckNameAvailabilityInput{
			Name: to.Ptr("sampleName"),
			Type: to.Ptr(armcdn.ResourceTypeMicrosoftCdnProfilesEndpoints),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/CheckNameAvailabilityWithSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.CheckNameAvailabilityOutput{
			Message:       to.Ptr("Name not available"),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr("Name is already in use"),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityOutput) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityOutput)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/CheckNameAvailabilityWithSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCdnManagementClient_ValidateProbe(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/ValidateProbe.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ValidateProbe"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewManagementClient("subid", cred, &options)
	res, err := client.ValidateProbe(ctx,
		armcdn.ValidateProbeInput{
			ProbeURL: to.Ptr("https://www.bing.com/image"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/ValidateProbe.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.ValidateProbeOutput{
			ErrorCode: to.Ptr("None"),
			IsValid:   to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.ValidateProbeOutput) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ValidateProbeOutput)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/ValidateProbe.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceUsage_List(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/ResourceUsage_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResourceUsage_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewResourceUsageClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/ResourceUsage_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.ResourceUsageListResult{
			Value: []*armcdn.ResourceUsage{
				{
					CurrentValue: to.Ptr[int32](31),
					Limit:        to.Ptr[int32](200),
					ResourceType: to.Ptr("profile"),
					Unit:         to.Ptr("count"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceUsageListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceUsageListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/ResourceUsage_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.OperationsListResult{
			Value: []*armcdn.Operation{
				{
					Name: to.Ptr("Microsoft.Cdn/register/action"),
					Display: &armcdn.OperationDisplay{
						Operation: to.Ptr("Registers the Microsoft.Cdn Resource Provider"),
						Provider:  to.Ptr("Microsoft.Cdn"),
						Resource:  to.Ptr("Microsoft.Cdn Resource Provider"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Cdn/edgenodes/read"),
					Display: &armcdn.OperationDisplay{
						Operation: to.Ptr("read"),
						Provider:  to.Ptr("Microsoft.Cdn"),
						Resource:  to.Ptr("EdgeNode"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Cdn/edgenodes/write"),
					Display: &armcdn.OperationDisplay{
						Operation: to.Ptr("write"),
						Provider:  to.Ptr("Microsoft.Cdn"),
						Resource:  to.Ptr("EdgeNode"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Cdn/edgenodes/delete"),
					Display: &armcdn.OperationDisplay{
						Operation: to.Ptr("delete"),
						Provider:  to.Ptr("Microsoft.Cdn"),
						Resource:  to.Ptr("EdgeNode"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Cdn/profiles/read"),
					Display: &armcdn.OperationDisplay{
						Operation: to.Ptr("read"),
						Provider:  to.Ptr("Microsoft.Cdn"),
						Resource:  to.Ptr("Profile"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Cdn/profiles/write"),
					Display: &armcdn.OperationDisplay{
						Operation: to.Ptr("write"),
						Provider:  to.Ptr("Microsoft.Cdn"),
						Resource:  to.Ptr("Profile"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Cdn/operationresults/profileresults/write"),
					Display: &armcdn.OperationDisplay{
						Operation: to.Ptr("write"),
						Provider:  to.Ptr("Microsoft.Cdn"),
						Resource:  to.Ptr("Profile"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Cdn/operationresults/profileresults/delete"),
					Display: &armcdn.OperationDisplay{
						Operation: to.Ptr("delete"),
						Provider:  to.Ptr("Microsoft.Cdn"),
						Resource:  to.Ptr("Profile"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Cdn/operationresults/profileresults/CheckResourceUsage/action"),
					Display: &armcdn.OperationDisplay{
						Operation: to.Ptr("CheckResourceUsage"),
						Provider:  to.Ptr("Microsoft.Cdn"),
						Resource:  to.Ptr("Profile"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Cdn/operationresults/profileresults/GenerateSsoUri/action"),
					Display: &armcdn.OperationDisplay{
						Operation: to.Ptr("GenerateSsoUri"),
						Provider:  to.Ptr("Microsoft.Cdn"),
						Resource:  to.Ptr("Profile"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEdgeNodes_List(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/EdgeNodes_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EdgeNodes_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewEdgeNodesClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/EdgeNodes_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.EdgenodeResult{
			Value: []*armcdn.EdgeNode{
				{
					Name: to.Ptr("Standard_Verizon"),
					Type: to.Ptr("Microsoft.Cdn/edgenodes"),
					ID:   to.Ptr("/providers/Microsoft.Cdn/edgenodes/Standard_Verizon"),
					Properties: &armcdn.EdgeNodeProperties{
						IPAddressGroups: []*armcdn.IPAddressGroup{
							{
								DeliveryRegion: to.Ptr("All"),
								IPv4Addresses: []*armcdn.CidrIPAddress{
									{
										BaseIPAddress: to.Ptr("192.229.176.0"),
										PrefixLength:  to.Ptr[int32](24),
									},
									{
										BaseIPAddress: to.Ptr("180.240.184.128"),
										PrefixLength:  to.Ptr[int32](25),
									},
									{
										BaseIPAddress: to.Ptr("152.195.27.0"),
										PrefixLength:  to.Ptr[int32](24),
									}},
								IPv6Addresses: []*armcdn.CidrIPAddress{
									{
										BaseIPAddress: to.Ptr("2606:2800:60f2::"),
										PrefixLength:  to.Ptr[int32](48),
									},
									{
										BaseIPAddress: to.Ptr("2606:2800:700c::"),
										PrefixLength:  to.Ptr[int32](48),
									}},
							}},
					},
				},
				{
					Name: to.Ptr("Premium_Verizon"),
					Type: to.Ptr("Microsoft.Cdn/edgenodes"),
					ID:   to.Ptr("/providers/Microsoft.Cdn/edgenodes/Premium_Verizon"),
					Properties: &armcdn.EdgeNodeProperties{
						IPAddressGroups: []*armcdn.IPAddressGroup{
							{
								DeliveryRegion: to.Ptr("All"),
								IPv4Addresses: []*armcdn.CidrIPAddress{
									{
										BaseIPAddress: to.Ptr("192.229.176.0"),
										PrefixLength:  to.Ptr[int32](24),
									},
									{
										BaseIPAddress: to.Ptr("152.195.27.0"),
										PrefixLength:  to.Ptr[int32](24),
									}},
								IPv6Addresses: []*armcdn.CidrIPAddress{
									{
										BaseIPAddress: to.Ptr("2606:2800:60f2::"),
										PrefixLength:  to.Ptr[int32](48),
									},
									{
										BaseIPAddress: to.Ptr("2606:2800:700c::"),
										PrefixLength:  to.Ptr[int32](48),
									}},
							}},
					},
				},
				{
					Name: to.Ptr("Custom_Verizon"),
					Type: to.Ptr("Microsoft.Cdn/edgenodes"),
					ID:   to.Ptr("/providers/Microsoft.Cdn/edgenodes/Custom_Verizon"),
					Properties: &armcdn.EdgeNodeProperties{
						IPAddressGroups: []*armcdn.IPAddressGroup{
							{
								DeliveryRegion: to.Ptr("All"),
								IPv4Addresses: []*armcdn.CidrIPAddress{
									{
										BaseIPAddress: to.Ptr("192.229.176.0"),
										PrefixLength:  to.Ptr[int32](24),
									},
									{
										BaseIPAddress: to.Ptr("2606:2800:420b::"),
										PrefixLength:  to.Ptr[int32](48),
									},
									{
										BaseIPAddress: to.Ptr("2606:2800:700c::"),
										PrefixLength:  to.Ptr[int32](48),
									}},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EdgenodeResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EdgenodeResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/EdgeNodes_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPolicies_List(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/WafListPolicies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Policies in a Resource Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewPoliciesClient("subid", cred, &options)
	pager := client.List("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/WafListPolicies.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.WebApplicationFirewallPolicyList{
			Value: []*armcdn.WebApplicationFirewallPolicy{
				{
					Name:     to.Ptr("MicrosoftCdnWafPolicy"),
					Type:     to.Ptr("Microsoft.Cdn/cdnwebapplicationfirewallpolicies"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cdn/CdnWebApplicationFirewallPolicies/MicrosoftCdnWafPolicy"),
					Location: to.Ptr("WestUs"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armcdn.WebApplicationFirewallPolicyProperties{
						CustomRules: &armcdn.CustomRuleList{
							Rules: []*armcdn.CustomRule{
								{
									Name:         to.Ptr("CustomRule1"),
									Action:       to.Ptr(armcdn.ActionTypeBlock),
									EnabledState: to.Ptr(armcdn.CustomRuleEnabledStateEnabled),
									MatchConditions: []*armcdn.MatchCondition{
										{
											MatchValue: []*string{
												to.Ptr("CH")},
											MatchVariable:   to.Ptr(armcdn.WafMatchVariableRemoteAddr),
											NegateCondition: to.Ptr(false),
											Operator:        to.Ptr(armcdn.OperatorGeoMatch),
											Transforms:      []*armcdn.TransformType{},
										},
										{
											MatchValue: []*string{
												to.Ptr("windows")},
											MatchVariable:   to.Ptr(armcdn.WafMatchVariableRequestHeader),
											NegateCondition: to.Ptr(false),
											Operator:        to.Ptr(armcdn.OperatorContains),
											Selector:        to.Ptr("UserAgent"),
											Transforms:      []*armcdn.TransformType{},
										},
										{
											MatchValue: []*string{
												to.Ptr("<?php"),
												to.Ptr("?>")},
											MatchVariable:   to.Ptr(armcdn.WafMatchVariableQueryString),
											NegateCondition: to.Ptr(false),
											Operator:        to.Ptr(armcdn.OperatorContains),
											Selector:        to.Ptr("search"),
											Transforms: []*armcdn.TransformType{
												to.Ptr(armcdn.TransformTypeURLDecode),
												to.Ptr(armcdn.TransformTypeLowercase)},
										}},
									Priority: to.Ptr[int32](2),
								}},
						},
						EndpointLinks: []*armcdn.LinkedEndpoint{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cdn/profiles/profile1/endpoints/testEndpoint1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cdn/profiles/profile1/endpoints/testEndpoint2"),
							}},
						ManagedRules: &armcdn.ManagedRuleSetList{
							ManagedRuleSets: []*armcdn.ManagedRuleSet{
								{
									RuleGroupOverrides: []*armcdn.ManagedRuleGroupOverride{
										{
											RuleGroupName: to.Ptr("Group1"),
											Rules: []*armcdn.ManagedRuleOverride{
												{
													Action:       to.Ptr(armcdn.ActionTypeRedirect),
													EnabledState: to.Ptr(armcdn.ManagedRuleEnabledStateEnabled),
													RuleID:       to.Ptr("GROUP1-0001"),
												},
												{
													EnabledState: to.Ptr(armcdn.ManagedRuleEnabledStateDisabled),
													RuleID:       to.Ptr("GROUP1-0002"),
												}},
										}},
									RuleSetType:    to.Ptr("DefaultRuleSet"),
									RuleSetVersion: to.Ptr("preview-1.0"),
								}},
						},
						PolicySettings: &armcdn.PolicySettings{
							DefaultCustomBlockResponseBody:       to.Ptr("PGh0bWw+CjxoZWFkZXI+PHRpdGxlPkhlbGxvPC90aXRsZT48L2hlYWRlcj4KPGJvZHk+CkhlbGxvIHdvcmxkCjwvYm9keT4KPC9odG1sPg=="),
							DefaultCustomBlockResponseStatusCode: to.Ptr(armcdn.PolicySettingsDefaultCustomBlockResponseStatusCode(429)),
							DefaultRedirectURL:                   to.Ptr("http://www.bing.com"),
							EnabledState:                         to.Ptr(armcdn.PolicyEnabledStateEnabled),
							Mode:                                 to.Ptr(armcdn.PolicyModePrevention),
						},
						ProvisioningState: to.Ptr(armcdn.ProvisioningStateSucceeded),
						RateLimitRules: &armcdn.RateLimitRuleList{
							Rules: []*armcdn.RateLimitRule{
								{
									Name:         to.Ptr("RateLimitRule1"),
									Action:       to.Ptr(armcdn.ActionTypeBlock),
									EnabledState: to.Ptr(armcdn.CustomRuleEnabledStateEnabled),
									MatchConditions: []*armcdn.MatchCondition{
										{
											MatchValue: []*string{
												to.Ptr("192.168.1.0/24"),
												to.Ptr("10.0.0.0/24")},
											MatchVariable:   to.Ptr(armcdn.WafMatchVariableRemoteAddr),
											NegateCondition: to.Ptr(false),
											Operator:        to.Ptr(armcdn.OperatorIPMatch),
											Transforms:      []*armcdn.TransformType{},
										}},
									Priority:                   to.Ptr[int32](1),
									RateLimitDurationInMinutes: to.Ptr[int32](0),
									RateLimitThreshold:         to.Ptr[int32](1000),
								}},
						},
						ResourceState: to.Ptr(armcdn.PolicyResourceStateEnabled),
					},
					SKU: &armcdn.SKU{
						Name: to.Ptr(armcdn.SKUNameStandardMicrosoft),
					},
				},
				{
					Name:     to.Ptr("VerizonStandardCdnWafPolicy"),
					Type:     to.Ptr("Microsoft.Cdn/cdnwebapplicationfirewallpolicies"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cdn/CdnWebApplicationFirewallPolicies/VerizonStandardCdnWafPolicy"),
					Location: to.Ptr("WestUs"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armcdn.WebApplicationFirewallPolicyProperties{
						CustomRules: &armcdn.CustomRuleList{
							Rules: []*armcdn.CustomRule{
								{
									Name:         to.Ptr("CustomRule1"),
									Action:       to.Ptr(armcdn.ActionTypeBlock),
									EnabledState: to.Ptr(armcdn.CustomRuleEnabledStateEnabled),
									MatchConditions: []*armcdn.MatchCondition{
										{
											MatchValue: []*string{
												to.Ptr("CH")},
											MatchVariable:   to.Ptr(armcdn.WafMatchVariableRemoteAddr),
											NegateCondition: to.Ptr(false),
											Operator:        to.Ptr(armcdn.OperatorGeoMatch),
											Transforms:      []*armcdn.TransformType{},
										},
										{
											MatchValue: []*string{
												to.Ptr("windows")},
											MatchVariable:   to.Ptr(armcdn.WafMatchVariableRequestHeader),
											NegateCondition: to.Ptr(false),
											Operator:        to.Ptr(armcdn.OperatorContains),
											Selector:        to.Ptr("UserAgent"),
										},
										{
											MatchValue: []*string{
												to.Ptr("<?php"),
												to.Ptr("?>")},
											MatchVariable:   to.Ptr(armcdn.WafMatchVariableQueryString),
											NegateCondition: to.Ptr(false),
											Operator:        to.Ptr(armcdn.OperatorContains),
											Selector:        to.Ptr("search"),
											Transforms: []*armcdn.TransformType{
												to.Ptr(armcdn.TransformTypeURLDecode),
												to.Ptr(armcdn.TransformTypeLowercase)},
										}},
									Priority: to.Ptr[int32](2),
								}},
						},
						EndpointLinks: []*armcdn.LinkedEndpoint{
							{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cdn/profiles/profile1/endpoints/testEndpoint3"),
							}},
						ManagedRules: &armcdn.ManagedRuleSetList{
							ManagedRuleSets: []*armcdn.ManagedRuleSet{
								{
									RuleGroupOverrides: []*armcdn.ManagedRuleGroupOverride{
										{
											RuleGroupName: to.Ptr("XSS"),
											Rules: []*armcdn.ManagedRuleOverride{
												{
													Action:       to.Ptr(armcdn.ActionTypeRedirect),
													EnabledState: to.Ptr(armcdn.ManagedRuleEnabledStateEnabled),
													RuleID:       to.Ptr("XSS-0001"),
												},
												{
													EnabledState: to.Ptr(armcdn.ManagedRuleEnabledStateDisabled),
													RuleID:       to.Ptr("XSS-0002"),
												}},
										}},
									RuleSetType:    to.Ptr("ECRS"),
									RuleSetVersion: to.Ptr("2018-11-2"),
								}},
						},
						PolicySettings: &armcdn.PolicySettings{
							DefaultCustomBlockResponseBody:       to.Ptr("PGh0bWw+CjxoZWFkZXI+PHRpdGxlPkhlbGxvPC90aXRsZT48L2hlYWRlcj4KPGJvZHk+CkhlbGxvIHdvcmxkCjwvYm9keT4KPC9odG1sPg=="),
							DefaultCustomBlockResponseStatusCode: to.Ptr(armcdn.PolicySettingsDefaultCustomBlockResponseStatusCode(429)),
							DefaultRedirectURL:                   to.Ptr("http://www.bing.com"),
							EnabledState:                         to.Ptr(armcdn.PolicyEnabledStateEnabled),
							Mode:                                 to.Ptr(armcdn.PolicyModePrevention),
						},
						ProvisioningState: to.Ptr(armcdn.ProvisioningStateSucceeded),
						RateLimitRules: &armcdn.RateLimitRuleList{
							Rules: []*armcdn.RateLimitRule{
								{
									Name:         to.Ptr("RateLimitRule1"),
									Action:       to.Ptr(armcdn.ActionTypeBlock),
									EnabledState: to.Ptr(armcdn.CustomRuleEnabledStateEnabled),
									MatchConditions: []*armcdn.MatchCondition{
										{
											MatchValue: []*string{
												to.Ptr("192.168.1.0/24"),
												to.Ptr("10.0.0.0/24")},
											MatchVariable:   to.Ptr(armcdn.WafMatchVariableRemoteAddr),
											NegateCondition: to.Ptr(false),
											Operator:        to.Ptr(armcdn.OperatorIPMatch),
											Transforms:      []*armcdn.TransformType{},
										}},
									Priority:                   to.Ptr[int32](1),
									RateLimitDurationInMinutes: to.Ptr[int32](0),
									RateLimitThreshold:         to.Ptr[int32](1000),
								}},
						},
						ResourceState: to.Ptr(armcdn.PolicyResourceStateEnabled),
					},
					SKU: &armcdn.SKU{
						Name: to.Ptr(armcdn.SKUNameStandardVerizon),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WebApplicationFirewallPolicyList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WebApplicationFirewallPolicyList)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/WafListPolicies.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPolicies_Get(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/WafPolicyGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewPoliciesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"MicrosoftCdnWafPolicy",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/WafPolicyGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.WebApplicationFirewallPolicy{
			Name:     to.Ptr("MicrosoftCdnWafPolicy"),
			Type:     to.Ptr("Microsoft.Cdn/cdnwebapplicationfirewallpolicies"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cdn/CdnWebApplicationFirewallPolicies/MicrosoftCdnWafPolicy"),
			Location: to.Ptr("WestUs"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armcdn.WebApplicationFirewallPolicyProperties{
				CustomRules: &armcdn.CustomRuleList{
					Rules: []*armcdn.CustomRule{
						{
							Name:         to.Ptr("CustomRule1"),
							Action:       to.Ptr(armcdn.ActionTypeBlock),
							EnabledState: to.Ptr(armcdn.CustomRuleEnabledStateEnabled),
							MatchConditions: []*armcdn.MatchCondition{
								{
									MatchValue: []*string{
										to.Ptr("CH")},
									MatchVariable:   to.Ptr(armcdn.WafMatchVariableRemoteAddr),
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armcdn.OperatorGeoMatch),
									Transforms:      []*armcdn.TransformType{},
								},
								{
									MatchValue: []*string{
										to.Ptr("windows")},
									MatchVariable:   to.Ptr(armcdn.WafMatchVariableRequestHeader),
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armcdn.OperatorContains),
									Selector:        to.Ptr("UserAgent"),
									Transforms:      []*armcdn.TransformType{},
								},
								{
									MatchValue: []*string{
										to.Ptr("<?php"),
										to.Ptr("?>")},
									MatchVariable:   to.Ptr(armcdn.WafMatchVariableQueryString),
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armcdn.OperatorContains),
									Selector:        to.Ptr("search"),
									Transforms: []*armcdn.TransformType{
										to.Ptr(armcdn.TransformTypeURLDecode),
										to.Ptr(armcdn.TransformTypeLowercase)},
								}},
							Priority: to.Ptr[int32](2),
						}},
				},
				EndpointLinks: []*armcdn.LinkedEndpoint{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cdn/profiles/profile1/endpoints/testEndpoint1"),
					},
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cdn/profiles/profile1/endpoints/testEndpoint2"),
					}},
				ManagedRules: &armcdn.ManagedRuleSetList{
					ManagedRuleSets: []*armcdn.ManagedRuleSet{
						{
							RuleGroupOverrides: []*armcdn.ManagedRuleGroupOverride{
								{
									RuleGroupName: to.Ptr("Group1"),
									Rules: []*armcdn.ManagedRuleOverride{
										{
											Action:       to.Ptr(armcdn.ActionTypeRedirect),
											EnabledState: to.Ptr(armcdn.ManagedRuleEnabledStateEnabled),
											RuleID:       to.Ptr("GROUP1-0001"),
										},
										{
											EnabledState: to.Ptr(armcdn.ManagedRuleEnabledStateDisabled),
											RuleID:       to.Ptr("GROUP1-0002"),
										}},
								}},
							RuleSetType:    to.Ptr("DefaultRuleSet"),
							RuleSetVersion: to.Ptr("preview-1.0"),
						}},
				},
				PolicySettings: &armcdn.PolicySettings{
					DefaultCustomBlockResponseBody:       to.Ptr("PGh0bWw+CjxoZWFkZXI+PHRpdGxlPkhlbGxvPC90aXRsZT48L2hlYWRlcj4KPGJvZHk+CkhlbGxvIHdvcmxkCjwvYm9keT4KPC9odG1sPg=="),
					DefaultCustomBlockResponseStatusCode: to.Ptr(armcdn.PolicySettingsDefaultCustomBlockResponseStatusCode(429)),
					DefaultRedirectURL:                   to.Ptr("http://www.bing.com"),
					EnabledState:                         to.Ptr(armcdn.PolicyEnabledStateEnabled),
					Mode:                                 to.Ptr(armcdn.PolicyModePrevention),
				},
				ProvisioningState: to.Ptr(armcdn.ProvisioningStateSucceeded),
				RateLimitRules: &armcdn.RateLimitRuleList{
					Rules: []*armcdn.RateLimitRule{
						{
							Name:         to.Ptr("RateLimitRule1"),
							Action:       to.Ptr(armcdn.ActionTypeBlock),
							EnabledState: to.Ptr(armcdn.CustomRuleEnabledStateEnabled),
							MatchConditions: []*armcdn.MatchCondition{
								{
									MatchValue: []*string{
										to.Ptr("192.168.1.0/24"),
										to.Ptr("10.0.0.0/24")},
									MatchVariable:   to.Ptr(armcdn.WafMatchVariableRemoteAddr),
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armcdn.OperatorIPMatch),
									Transforms:      []*armcdn.TransformType{},
								}},
							Priority:                   to.Ptr[int32](1),
							RateLimitDurationInMinutes: to.Ptr[int32](0),
							RateLimitThreshold:         to.Ptr[int32](1000),
						}},
				},
				ResourceState: to.Ptr(armcdn.PolicyResourceStateEnabled),
			},
			SKU: &armcdn.SKU{
				Name: to.Ptr(armcdn.SKUNameStandardMicrosoft),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WebApplicationFirewallPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WebApplicationFirewallPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/WafPolicyGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/WafPolicyCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates specific policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewPoliciesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"MicrosoftCdnWafPolicy",
		armcdn.WebApplicationFirewallPolicy{
			Location: to.Ptr("WestUs"),
			Properties: &armcdn.WebApplicationFirewallPolicyProperties{
				CustomRules: &armcdn.CustomRuleList{
					Rules: []*armcdn.CustomRule{
						{
							Name:         to.Ptr("CustomRule1"),
							Action:       to.Ptr(armcdn.ActionTypeBlock),
							EnabledState: to.Ptr(armcdn.CustomRuleEnabledStateEnabled),
							MatchConditions: []*armcdn.MatchCondition{
								{
									MatchValue: []*string{
										to.Ptr("CH")},
									MatchVariable:   to.Ptr(armcdn.WafMatchVariableRemoteAddr),
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armcdn.OperatorGeoMatch),
									Transforms:      []*armcdn.TransformType{},
								},
								{
									MatchValue: []*string{
										to.Ptr("windows")},
									MatchVariable:   to.Ptr(armcdn.WafMatchVariableRequestHeader),
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armcdn.OperatorContains),
									Selector:        to.Ptr("UserAgent"),
									Transforms:      []*armcdn.TransformType{},
								},
								{
									MatchValue: []*string{
										to.Ptr("<?php"),
										to.Ptr("?>")},
									MatchVariable:   to.Ptr(armcdn.WafMatchVariableQueryString),
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armcdn.OperatorContains),
									Selector:        to.Ptr("search"),
									Transforms: []*armcdn.TransformType{
										to.Ptr(armcdn.TransformTypeURLDecode),
										to.Ptr(armcdn.TransformTypeLowercase)},
								}},
							Priority: to.Ptr[int32](2),
						}},
				},
				ManagedRules: &armcdn.ManagedRuleSetList{
					ManagedRuleSets: []*armcdn.ManagedRuleSet{
						{
							RuleGroupOverrides: []*armcdn.ManagedRuleGroupOverride{
								{
									RuleGroupName: to.Ptr("Group1"),
									Rules: []*armcdn.ManagedRuleOverride{
										{
											Action:       to.Ptr(armcdn.ActionTypeRedirect),
											EnabledState: to.Ptr(armcdn.ManagedRuleEnabledStateEnabled),
											RuleID:       to.Ptr("GROUP1-0001"),
										},
										{
											EnabledState: to.Ptr(armcdn.ManagedRuleEnabledStateDisabled),
											RuleID:       to.Ptr("GROUP1-0002"),
										}},
								}},
							RuleSetType:    to.Ptr("DefaultRuleSet"),
							RuleSetVersion: to.Ptr("preview-1.0"),
						}},
				},
				PolicySettings: &armcdn.PolicySettings{
					DefaultCustomBlockResponseBody:       to.Ptr("PGh0bWw+CjxoZWFkZXI+PHRpdGxlPkhlbGxvPC90aXRsZT48L2hlYWRlcj4KPGJvZHk+CkhlbGxvIHdvcmxkCjwvYm9keT4KPC9odG1sPg=="),
					DefaultCustomBlockResponseStatusCode: to.Ptr(armcdn.PolicySettingsDefaultCustomBlockResponseStatusCode(200)),
					DefaultRedirectURL:                   to.Ptr("http://www.bing.com"),
				},
				RateLimitRules: &armcdn.RateLimitRuleList{
					Rules: []*armcdn.RateLimitRule{
						{
							Name:         to.Ptr("RateLimitRule1"),
							Action:       to.Ptr(armcdn.ActionTypeBlock),
							EnabledState: to.Ptr(armcdn.CustomRuleEnabledStateEnabled),
							MatchConditions: []*armcdn.MatchCondition{
								{
									MatchValue: []*string{
										to.Ptr("192.168.1.0/24"),
										to.Ptr("10.0.0.0/24")},
									MatchVariable:   to.Ptr(armcdn.WafMatchVariableRemoteAddr),
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armcdn.OperatorIPMatch),
									Transforms:      []*armcdn.TransformType{},
								}},
							Priority:                   to.Ptr[int32](1),
							RateLimitDurationInMinutes: to.Ptr[int32](0),
							RateLimitThreshold:         to.Ptr[int32](1000),
						}},
				},
			},
			SKU: &armcdn.SKU{
				Name: to.Ptr(armcdn.SKUNameStandardMicrosoft),
			},
		},
		&armcdn.PoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/WafPolicyCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/WafPolicyCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.WebApplicationFirewallPolicy{
			Name:     to.Ptr("MicrosoftCdnWafPolicy"),
			Type:     to.Ptr("Microsoft.Cdn/cdnwebapplicationfirewallpolicies"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cdn/CdnWebApplicationFirewallPolicies/MicrosoftCdnWafPolicy"),
			Location: to.Ptr("WestUs"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armcdn.WebApplicationFirewallPolicyProperties{
				CustomRules: &armcdn.CustomRuleList{
					Rules: []*armcdn.CustomRule{
						{
							Name:         to.Ptr("CustomRule1"),
							Action:       to.Ptr(armcdn.ActionTypeBlock),
							EnabledState: to.Ptr(armcdn.CustomRuleEnabledStateEnabled),
							MatchConditions: []*armcdn.MatchCondition{
								{
									MatchValue: []*string{
										to.Ptr("CH")},
									MatchVariable:   to.Ptr(armcdn.WafMatchVariableRemoteAddr),
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armcdn.OperatorGeoMatch),
									Transforms:      []*armcdn.TransformType{},
								},
								{
									MatchValue: []*string{
										to.Ptr("windows")},
									MatchVariable:   to.Ptr(armcdn.WafMatchVariableRequestHeader),
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armcdn.OperatorContains),
									Selector:        to.Ptr("UserAgent"),
									Transforms:      []*armcdn.TransformType{},
								},
								{
									MatchValue: []*string{
										to.Ptr("<?php"),
										to.Ptr("?>")},
									MatchVariable:   to.Ptr(armcdn.WafMatchVariableQueryString),
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armcdn.OperatorContains),
									Selector:        to.Ptr("search"),
									Transforms: []*armcdn.TransformType{
										to.Ptr(armcdn.TransformTypeURLDecode),
										to.Ptr(armcdn.TransformTypeLowercase)},
								}},
							Priority: to.Ptr[int32](2),
						}},
				},
				EndpointLinks: []*armcdn.LinkedEndpoint{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cdn/profiles/profile1/endpoints/testEndpoint1"),
					},
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cdn/profiles/profile1/endpoints/testEndpoint2"),
					}},
				ManagedRules: &armcdn.ManagedRuleSetList{
					ManagedRuleSets: []*armcdn.ManagedRuleSet{
						{
							RuleGroupOverrides: []*armcdn.ManagedRuleGroupOverride{
								{
									RuleGroupName: to.Ptr("Group1"),
									Rules: []*armcdn.ManagedRuleOverride{
										{
											Action:       to.Ptr(armcdn.ActionTypeRedirect),
											EnabledState: to.Ptr(armcdn.ManagedRuleEnabledStateEnabled),
											RuleID:       to.Ptr("GROUP1-0001"),
										},
										{
											EnabledState: to.Ptr(armcdn.ManagedRuleEnabledStateDisabled),
											RuleID:       to.Ptr("GROUP1-0002"),
										}},
								}},
							RuleSetType:    to.Ptr("DefaultRuleSet"),
							RuleSetVersion: to.Ptr("preview-1.0"),
						}},
				},
				PolicySettings: &armcdn.PolicySettings{
					DefaultCustomBlockResponseBody:       to.Ptr("PGh0bWw+CjxoZWFkZXI+PHRpdGxlPkhlbGxvPC90aXRsZT48L2hlYWRlcj4KPGJvZHk+CkhlbGxvIHdvcmxkCjwvYm9keT4KPC9odG1sPg=="),
					DefaultCustomBlockResponseStatusCode: to.Ptr(armcdn.PolicySettingsDefaultCustomBlockResponseStatusCode(200)),
					DefaultRedirectURL:                   to.Ptr("http://www.bing.com"),
					EnabledState:                         to.Ptr(armcdn.PolicyEnabledStateEnabled),
					Mode:                                 to.Ptr(armcdn.PolicyModePrevention),
				},
				ProvisioningState: to.Ptr(armcdn.ProvisioningStateSucceeded),
				RateLimitRules: &armcdn.RateLimitRuleList{
					Rules: []*armcdn.RateLimitRule{
						{
							Name:         to.Ptr("RateLimitRule1"),
							Action:       to.Ptr(armcdn.ActionTypeBlock),
							EnabledState: to.Ptr(armcdn.CustomRuleEnabledStateEnabled),
							MatchConditions: []*armcdn.MatchCondition{
								{
									MatchValue: []*string{
										to.Ptr("192.168.1.0/24"),
										to.Ptr("10.0.0.0/24")},
									MatchVariable:   to.Ptr(armcdn.WafMatchVariableRemoteAddr),
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armcdn.OperatorIPMatch),
									Transforms:      []*armcdn.TransformType{},
								}},
							Priority:                   to.Ptr[int32](1),
							RateLimitDurationInMinutes: to.Ptr[int32](0),
							RateLimitThreshold:         to.Ptr[int32](1000),
						}},
				},
				ResourceState: to.Ptr(armcdn.PolicyResourceStateEnabled),
			},
			SKU: &armcdn.SKU{
				Name: to.Ptr(armcdn.SKUNameStandardMicrosoft),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WebApplicationFirewallPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WebApplicationFirewallPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/WafPolicyCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPolicies_Update(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/WafPatchPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates specific policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewPoliciesClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"MicrosoftCdnWafPolicy",
		armcdn.WebApplicationFirewallPolicyPatchParameters{
			Tags: map[string]*string{
				"foo": to.Ptr("bar"),
			},
		},
		&armcdn.PoliciesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/WafPatchPolicy.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/WafPatchPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcdn.WebApplicationFirewallPolicy{
			Name:     to.Ptr("MicrosoftCdnWafPolicy"),
			Type:     to.Ptr("Microsoft.Cdn/cdnwebapplicationfirewallpolicies"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cdn/CdnWebApplicationFirewallPolicies/MicrosoftCdnWafPolicy"),
			Location: to.Ptr("WestUs"),
			Tags: map[string]*string{
				"foo": to.Ptr("bar"),
			},
			Properties: &armcdn.WebApplicationFirewallPolicyProperties{
				CustomRules: &armcdn.CustomRuleList{
					Rules: []*armcdn.CustomRule{
						{
							Name:         to.Ptr("CustomRule1"),
							Action:       to.Ptr(armcdn.ActionTypeBlock),
							EnabledState: to.Ptr(armcdn.CustomRuleEnabledStateEnabled),
							MatchConditions: []*armcdn.MatchCondition{
								{
									MatchValue: []*string{
										to.Ptr("CH")},
									MatchVariable:   to.Ptr(armcdn.WafMatchVariableRemoteAddr),
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armcdn.OperatorGeoMatch),
									Transforms:      []*armcdn.TransformType{},
								},
								{
									MatchValue: []*string{
										to.Ptr("windows")},
									MatchVariable:   to.Ptr(armcdn.WafMatchVariableRequestHeader),
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armcdn.OperatorContains),
									Selector:        to.Ptr("UserAgent"),
									Transforms:      []*armcdn.TransformType{},
								},
								{
									MatchValue: []*string{
										to.Ptr("<?php"),
										to.Ptr("?>")},
									MatchVariable:   to.Ptr(armcdn.WafMatchVariableQueryString),
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armcdn.OperatorContains),
									Selector:        to.Ptr("search"),
									Transforms: []*armcdn.TransformType{
										to.Ptr(armcdn.TransformTypeURLDecode),
										to.Ptr(armcdn.TransformTypeLowercase)},
								}},
							Priority: to.Ptr[int32](2),
						}},
				},
				EndpointLinks: []*armcdn.LinkedEndpoint{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cdn/profiles/profile1/endpoints/testEndpoint1"),
					},
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cdn/profiles/profile1/endpoints/testEndpoint2"),
					}},
				ManagedRules: &armcdn.ManagedRuleSetList{
					ManagedRuleSets: []*armcdn.ManagedRuleSet{
						{
							RuleGroupOverrides: []*armcdn.ManagedRuleGroupOverride{
								{
									RuleGroupName: to.Ptr("Group1"),
									Rules: []*armcdn.ManagedRuleOverride{
										{
											Action:       to.Ptr(armcdn.ActionTypeRedirect),
											EnabledState: to.Ptr(armcdn.ManagedRuleEnabledStateEnabled),
											RuleID:       to.Ptr("GROUP1-0001"),
										},
										{
											EnabledState: to.Ptr(armcdn.ManagedRuleEnabledStateDisabled),
											RuleID:       to.Ptr("GROUP1-0002"),
										}},
								}},
							RuleSetType:    to.Ptr("DefaultRuleSet"),
							RuleSetVersion: to.Ptr("preview-1.0"),
						}},
				},
				PolicySettings: &armcdn.PolicySettings{
					DefaultCustomBlockResponseBody:       to.Ptr("PGh0bWw+CjxoZWFkZXI+PHRpdGxlPkhlbGxvPC90aXRsZT48L2hlYWRlcj4KPGJvZHk+CkhlbGxvIHdvcmxkCjwvYm9keT4KPC9odG1sPg=="),
					DefaultCustomBlockResponseStatusCode: to.Ptr(armcdn.PolicySettingsDefaultCustomBlockResponseStatusCode(403)),
					DefaultRedirectURL:                   to.Ptr("http://www.bing.com"),
					EnabledState:                         to.Ptr(armcdn.PolicyEnabledStateEnabled),
					Mode:                                 to.Ptr(armcdn.PolicyModePrevention),
				},
				ProvisioningState: to.Ptr(armcdn.ProvisioningStateSucceeded),
				RateLimitRules: &armcdn.RateLimitRuleList{
					Rules: []*armcdn.RateLimitRule{
						{
							Name:         to.Ptr("RateLimitRule1"),
							Action:       to.Ptr(armcdn.ActionTypeBlock),
							EnabledState: to.Ptr(armcdn.CustomRuleEnabledStateEnabled),
							MatchConditions: []*armcdn.MatchCondition{
								{
									MatchValue: []*string{
										to.Ptr("192.168.1.0/24"),
										to.Ptr("10.0.0.0/24")},
									MatchVariable:   to.Ptr(armcdn.WafMatchVariableRemoteAddr),
									NegateCondition: to.Ptr(false),
									Operator:        to.Ptr(armcdn.OperatorIPMatch),
									Transforms:      []*armcdn.TransformType{},
								}},
							Priority:                   to.Ptr[int32](1),
							RateLimitDurationInMinutes: to.Ptr[int32](0),
							RateLimitThreshold:         to.Ptr[int32](1000),
						}},
				},
				ResourceState: to.Ptr(armcdn.PolicyResourceStateEnabled),
			},
			SKU: &armcdn.SKU{
				Name: to.Ptr(armcdn.SKUNameStandardMicrosoft),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WebApplicationFirewallPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WebApplicationFirewallPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/WafPatchPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPolicies_Delete(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/WafPolicyDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete protection policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewPoliciesClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"Policy1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/WafPolicyDelete.json: %v", err)
	}
}

func TestManagedRuleSets_List(t *testing.T) {
	// From example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/WafListManagedRuleSets.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Policies in a Resource Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcdn.NewManagedRuleSetsClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/WafListManagedRuleSets.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcdn.ManagedRuleSetDefinitionList{
			Value: []*armcdn.ManagedRuleSetDefinition{
				{
					Name: to.Ptr("DefaultRuleSet_1.0"),
					Type: to.Ptr("Microsoft.Cdn/cdnwebapplicationfirewallmanagedrulesets"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Cdn/CdnWebApplicationFirewallManagedRuleSets"),
					Properties: &armcdn.ManagedRuleSetDefinitionProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						RuleGroups: []*armcdn.ManagedRuleGroupDefinition{
							{
								Description:   to.Ptr("Description for rule group 1."),
								RuleGroupName: to.Ptr("Group1"),
								Rules: []*armcdn.ManagedRuleDefinition{
									{
										Description: to.Ptr("Generic managed web application firewall rule."),
										RuleID:      to.Ptr("GROUP1-0001"),
									},
									{
										Description: to.Ptr("Generic managed web application firewall rule."),
										RuleID:      to.Ptr("GROUP1-0002"),
									}},
							},
							{
								Description:   to.Ptr("Description for rule group 2."),
								RuleGroupName: to.Ptr("Group2"),
								Rules: []*armcdn.ManagedRuleDefinition{
									{
										Description: to.Ptr("Generic managed web application firewall rule."),
										RuleID:      to.Ptr("GROUP2-0001"),
									}},
							}},
						RuleSetType:    to.Ptr("DefaultRuleSet"),
						RuleSetVersion: to.Ptr("preview-1.0"),
					},
					SKU: &armcdn.SKU{
						Name: to.Ptr(armcdn.SKUNameStandardMicrosoft),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedRuleSetDefinitionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedRuleSetDefinitionList)
			t.Fatalf("Mock response is not equal to example response for example specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/WafListManagedRuleSets.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
