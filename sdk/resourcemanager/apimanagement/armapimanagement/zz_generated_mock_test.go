//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armapimanagement

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestApi_ListByService(t *testing.T) {
	// From example ApiManagementListApis
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&APIListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("APIContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("APIContract.ID should not be nil!")
			}
		}
	}
}

func TestApi_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadApi
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		&APIGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApi_Get(t *testing.T) {
	// From example ApiManagementGetApiContract
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		&APIGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.APIContract.ID == nil {
		t.Fatal("APIContract.ID should not be nil!")
	}

	// From example ApiManagementGetApiRevisionContract
	res, err = client.Get(ctx,
		"rg1",
		"apimService1",
		"echo-api;rev=3",
		&APIGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.APIContract.ID == nil {
		t.Fatal("APIContract.ID should not be nil!")
	}
}

func TestApi_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateApi
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"tempgroup",
		APICreateOrUpdateParameter{
			Properties: &APICreateOrUpdateProperties{
				APIContractProperties: APIContractProperties{
					APIEntityBaseContract: APIEntityBaseContract{
						Description: to.StringPtr("apidescription5200"),
						AuthenticationSettings: &AuthenticationSettingsContract{
							OAuth2: &OAuth2AuthenticationSettingsContract{
								AuthorizationServerID: to.StringPtr("authorizationServerId2283"),
								Scope:                 to.StringPtr("oauth2scope2580"),
							},
						},
						SubscriptionKeyParameterNames: &SubscriptionKeyParameterNamesContract{
							Header: to.StringPtr("header4520"),
							Query:  to.StringPtr("query3037"),
						},
					},
					Path:        to.StringPtr("newapiPath"),
					DisplayName: to.StringPtr("apiname1463"),
					Protocols: []*Protocol{
						ProtocolHTTPS.ToPtr(),
						ProtocolHTTP.ToPtr()},
					ServiceURL: to.StringPtr("http://newechoapi.cloudapp.net/api"),
				},
			},
		},
		&APIBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIContract.ID == nil {
		t.Fatal("APIContract.ID should not be nil!")
	}

	// From example ApiManagementCreateApiClone
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"echo-api2",
		APICreateOrUpdateParameter{
			Properties: &APICreateOrUpdateProperties{
				APIContractProperties: APIContractProperties{
					APIEntityBaseContract: APIEntityBaseContract{
						Description:          to.StringPtr("Copy of Existing Echo Api including Operations."),
						IsCurrent:            to.BoolPtr(true),
						SubscriptionRequired: to.BoolPtr(true),
					},
					Path:        to.StringPtr("echo2"),
					DisplayName: to.StringPtr("Echo API2"),
					Protocols: []*Protocol{
						ProtocolHTTP.ToPtr(),
						ProtocolHTTPS.ToPtr()},
					ServiceURL:  to.StringPtr("http://echoapi.cloudapp.net/api"),
					SourceAPIID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/58a4aeac497000007d040001"),
				},
			},
		},
		&APIBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIContract.ID == nil {
		t.Fatal("APIContract.ID should not be nil!")
	}

	// From example ApiManagementCreateApiNewVersionUsingExistingApi
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"echoapiv3",
		APICreateOrUpdateParameter{
			Properties: &APICreateOrUpdateProperties{
				APIContractProperties: APIContractProperties{
					APIEntityBaseContract: APIEntityBaseContract{
						Description:          to.StringPtr("Create Echo API into a new Version using Existing Version Set and Copy all Operations."),
						APIVersion:           to.StringPtr("v4"),
						APIVersionSetID:      to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apiVersionSets/aa9c59e6-c0cd-4258-9356-9ca7d2f0b458"),
						IsCurrent:            to.BoolPtr(true),
						SubscriptionRequired: to.BoolPtr(true),
					},
					Path:        to.StringPtr("echo2"),
					DisplayName: to.StringPtr("Echo API2"),
					Protocols: []*Protocol{
						ProtocolHTTP.ToPtr(),
						ProtocolHTTPS.ToPtr()},
					ServiceURL:  to.StringPtr("http://echoapi.cloudapp.net/api"),
					SourceAPIID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/echoPath"),
				},
			},
		},
		&APIBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIContract.ID == nil {
		t.Fatal("APIContract.ID should not be nil!")
	}

	// From example ApiManagementCreateApiRevisionFromExistingApi
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"echo-api;rev=3",
		APICreateOrUpdateParameter{
			Properties: &APICreateOrUpdateProperties{
				APIContractProperties: APIContractProperties{
					APIEntityBaseContract: APIEntityBaseContract{
						APIRevisionDescription: to.StringPtr("Creating a Revision of an existing API"),
					},
					Path:        to.StringPtr("echo"),
					ServiceURL:  to.StringPtr("http://echoapi.cloudapp.net/apiv3"),
					SourceAPIID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/echo-api"),
				},
			},
		},
		&APIBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIContract.ID == nil {
		t.Fatal("APIContract.ID should not be nil!")
	}

	// From example ApiManagementCreateApiUsingImportOverrideServiceUrl
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"apidocs",
		APICreateOrUpdateParameter{
			Properties: &APICreateOrUpdateProperties{
				APIContractProperties: APIContractProperties{
					Path:       to.StringPtr("petstoreapi123"),
					ServiceURL: to.StringPtr("http://petstore.swagger.wordnik.com/api"),
				},
				Format: ContentFormatWadlXML.ToPtr(),
				Value:  to.StringPtr("http://apimpimportviaurl.azurewebsites.net/api/apidocs/"),
			},
		},
		&APIBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIContract.ID == nil {
		t.Fatal("APIContract.ID should not be nil!")
	}

	// From example ApiManagementCreateApiUsingOai3Import
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"petstore",
		APICreateOrUpdateParameter{
			Properties: &APICreateOrUpdateProperties{
				APIContractProperties: APIContractProperties{
					Path: to.StringPtr("petstore"),
				},
				Format: ContentFormatOpenapiLink.ToPtr(),
				Value:  to.StringPtr("https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml"),
			},
		},
		&APIBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIContract.ID == nil {
		t.Fatal("APIContract.ID should not be nil!")
	}

	// From example ApiManagementCreateApiUsingSwaggerImport
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"petstore",
		APICreateOrUpdateParameter{
			Properties: &APICreateOrUpdateProperties{
				APIContractProperties: APIContractProperties{
					Path: to.StringPtr("petstore"),
				},
				Format: ContentFormatSwaggerLinkJSON.ToPtr(),
				Value:  to.StringPtr("http://petstore.swagger.io/v2/swagger.json"),
			},
		},
		&APIBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIContract.ID == nil {
		t.Fatal("APIContract.ID should not be nil!")
	}

	// From example ApiManagementCreateApiUsingWadlImport
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"petstore",
		APICreateOrUpdateParameter{
			Properties: &APICreateOrUpdateProperties{
				APIContractProperties: APIContractProperties{
					Path: to.StringPtr("collector"),
				},
				Format: ContentFormatWadlLinkJSON.ToPtr(),
				Value:  to.StringPtr("https://developer.cisco.com/media/wae-release-6-2-api-reference/wae-collector-rest-api/application.wadl"),
			},
		},
		&APIBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIContract.ID == nil {
		t.Fatal("APIContract.ID should not be nil!")
	}

	// From example ApiManagementCreateApiWithOpenIdConnect
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"tempgroup",
		APICreateOrUpdateParameter{
			Properties: &APICreateOrUpdateProperties{
				APIContractProperties: APIContractProperties{
					APIEntityBaseContract: APIEntityBaseContract{
						Description: to.StringPtr("This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters."),
						AuthenticationSettings: &AuthenticationSettingsContract{
							Openid: &OpenIDAuthenticationSettingsContract{
								BearerTokenSendingMethods: []*BearerTokenSendingMethods{
									BearerTokenSendingMethodsAuthorizationHeader.ToPtr()},
								OpenidProviderID: to.StringPtr("testopenid"),
							},
						},
						SubscriptionKeyParameterNames: &SubscriptionKeyParameterNamesContract{
							Header: to.StringPtr("Ocp-Apim-Subscription-Key"),
							Query:  to.StringPtr("subscription-key"),
						},
					},
					Path:        to.StringPtr("petstore"),
					DisplayName: to.StringPtr("Swagger Petstore"),
					Protocols: []*Protocol{
						ProtocolHTTPS.ToPtr()},
					ServiceURL: to.StringPtr("http://petstore.swagger.io/v2"),
				},
			},
		},
		&APIBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIContract.ID == nil {
		t.Fatal("APIContract.ID should not be nil!")
	}

	// From example ApiManagementCreateGraphQLApi
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"tempgroup",
		APICreateOrUpdateParameter{
			Properties: &APICreateOrUpdateProperties{
				APIContractProperties: APIContractProperties{
					APIEntityBaseContract: APIEntityBaseContract{
						APIType:     APITypeGraphql.ToPtr(),
						Description: to.StringPtr("apidescription5200"),
					},
					Path:        to.StringPtr("graphql-api"),
					DisplayName: to.StringPtr("apiname1463"),
					Protocols: []*Protocol{
						ProtocolHTTP.ToPtr(),
						ProtocolHTTPS.ToPtr()},
					ServiceURL: to.StringPtr("https://api.spacex.land/graphql"),
				},
			},
		},
		&APIBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIContract.ID == nil {
		t.Fatal("APIContract.ID should not be nil!")
	}

	// From example ApiManagementCreateSoapPassThroughApiUsingWsdlImport
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"soapApi",
		APICreateOrUpdateParameter{
			Properties: &APICreateOrUpdateProperties{
				APIContractProperties: APIContractProperties{
					Path: to.StringPtr("currency"),
				},
				Format:      ContentFormatWsdlLink.ToPtr(),
				SoapAPIType: SoapAPITypeSoapPassThrough.ToPtr(),
				Value:       to.StringPtr("http://www.webservicex.net/CurrencyConvertor.asmx?WSDL"),
				WsdlSelector: &APICreateOrUpdatePropertiesWsdlSelector{
					WsdlEndpointName: to.StringPtr("CurrencyConvertorSoap"),
					WsdlServiceName:  to.StringPtr("CurrencyConvertor"),
				},
			},
		},
		&APIBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIContract.ID == nil {
		t.Fatal("APIContract.ID should not be nil!")
	}

	// From example ApiManagementCreateSoapToRestApiUsingWsdlImport
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"soapApi",
		APICreateOrUpdateParameter{
			Properties: &APICreateOrUpdateProperties{
				APIContractProperties: APIContractProperties{
					Path: to.StringPtr("currency"),
				},
				Format: ContentFormatWsdlLink.ToPtr(),
				Value:  to.StringPtr("http://www.webservicex.net/CurrencyConvertor.asmx?WSDL"),
				WsdlSelector: &APICreateOrUpdatePropertiesWsdlSelector{
					WsdlEndpointName: to.StringPtr("CurrencyConvertorSoap"),
					WsdlServiceName:  to.StringPtr("CurrencyConvertor"),
				},
			},
		},
		&APIBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIContract.ID == nil {
		t.Fatal("APIContract.ID should not be nil!")
	}

	// From example ApiManagementCreateWebSocketApi
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"tempgroup",
		APICreateOrUpdateParameter{
			Properties: &APICreateOrUpdateProperties{
				APIContractProperties: APIContractProperties{
					APIEntityBaseContract: APIEntityBaseContract{
						APIType:     APITypeWebsocket.ToPtr(),
						Description: to.StringPtr("apidescription5200"),
					},
					Path:        to.StringPtr("newapiPath"),
					DisplayName: to.StringPtr("apiname1463"),
					Protocols: []*Protocol{
						ProtocolWss.ToPtr(),
						ProtocolWs.ToPtr()},
					ServiceURL: to.StringPtr("wss://echo.websocket.org"),
				},
			},
		},
		&APIBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIContract.ID == nil {
		t.Fatal("APIContract.ID should not be nil!")
	}
}

func TestApi_Update(t *testing.T) {
	// From example ApiManagementUpdateApi
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"echo-api",
		"*",
		APIUpdateContract{
			Properties: &APIContractUpdateProperties{
				Path:        to.StringPtr("newecho"),
				DisplayName: to.StringPtr("Echo API New"),
				ServiceURL:  to.StringPtr("http://echoapi.cloudapp.net/api2"),
			},
		},
		&APIUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.APIContract.ID == nil {
		t.Fatal("APIContract.ID should not be nil!")
	}
}

func TestApi_Delete(t *testing.T) {
	// From example ApiManagementDeleteApi
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"echo-api",
		"*",
		&APIDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApi_ListByTags(t *testing.T) {
	// From example ApiManagementListApisByTags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIClient(con,
		"subid")
	pager := client.ListByTags("rg1",
		"apimService1",
		&APIListByTagsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestApiRevision_ListByService(t *testing.T) {
	// From example ApiManagementListApiRevisions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIRevisionClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		&APIRevisionListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestApiRelease_ListByService(t *testing.T) {
	// From example ApiManagementListApiReleases
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIReleaseClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		"a1",
		&APIReleaseListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("APIReleaseContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("APIReleaseContract.ID should not be nil!")
			}
		}
	}
}

func TestApiRelease_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadApiRelease
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIReleaseClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"a1",
		"5a7cb545298324c53224a799",
		&APIReleaseGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiRelease_Get(t *testing.T) {
	// From example ApiManagementGetApiRelease
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIReleaseClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"a1",
		"5a7cb545298324c53224a799",
		&APIReleaseGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.APIReleaseContract.ID == nil {
		t.Fatal("APIReleaseContract.ID should not be nil!")
	}
}

func TestApiRelease_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateApiRelease
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIReleaseClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"a1",
		"testrev",
		APIReleaseContract{
			Properties: &APIReleaseContractProperties{
				APIID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/a1"),
				Notes: to.StringPtr("yahooagain"),
			},
		},
		&APIReleaseCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.APIReleaseContract.ID == nil {
		t.Fatal("APIReleaseContract.ID should not be nil!")
	}
}

func TestApiRelease_Update(t *testing.T) {
	// From example ApiManagementUpdateApiRelease
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIReleaseClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"a1",
		"testrev",
		"*",
		APIReleaseContract{
			Properties: &APIReleaseContractProperties{
				APIID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/a1"),
				Notes: to.StringPtr("yahooagain"),
			},
		},
		&APIReleaseUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.APIReleaseContract.ID == nil {
		t.Fatal("APIReleaseContract.ID should not be nil!")
	}
}

func TestApiRelease_Delete(t *testing.T) {
	// From example ApiManagementDeleteApiRelease
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIReleaseClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"5a5fcc09124a7fa9b89f2f1d",
		"testrev",
		"*",
		&APIReleaseDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiOperation_ListByApi(t *testing.T) {
	// From example ApiManagementListApiOperations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIOperationClient(con,
		"subid")
	pager := client.ListByAPI("rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		&APIOperationListByAPIOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("OperationContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("OperationContract.ID should not be nil!")
			}
		}
	}
}

func TestApiOperation_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadApiOperation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIOperationClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		"57d2ef278aa04f0ad01d6cdc",
		&APIOperationGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiOperation_Get(t *testing.T) {
	// From example ApiManagementGetApiOperation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIOperationClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		"57d2ef278aa04f0ad01d6cdc",
		&APIOperationGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationContract.ID == nil {
		t.Fatal("OperationContract.ID should not be nil!")
	}

	// From example ApiManagementGetApiOperationPetStore
	res, err = client.Get(ctx,
		"rg1",
		"apimService1",
		"swagger-petstore",
		"loginUser",
		&APIOperationGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationContract.ID == nil {
		t.Fatal("OperationContract.ID should not be nil!")
	}
}

func TestApiOperation_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateApiOperation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIOperationClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"PetStoreTemplate2",
		"newoperations",
		OperationContract{
			Properties: &OperationContractProperties{
				OperationEntityBaseContract: OperationEntityBaseContract{
					Description:        to.StringPtr("This can only be done by the logged in user."),
					TemplateParameters: []*ParameterContract{},
					Request: &RequestContract{
						Description:     to.StringPtr("Created user object"),
						Headers:         []*ParameterContract{},
						QueryParameters: []*ParameterContract{},
						Representations: []*RepresentationContract{
							{
								ContentType: to.StringPtr("application/json"),
								SchemaID:    to.StringPtr("592f6c1d0af5840ca8897f0c"),
								TypeName:    to.StringPtr("User"),
							}},
					},
					Responses: []*ResponseContract{
						{
							Description: to.StringPtr("successful operation"),
							Headers:     []*ParameterContract{},
							Representations: []*RepresentationContract{
								{
									ContentType: to.StringPtr("application/xml"),
								},
								{
									ContentType: to.StringPtr("application/json"),
								}},
							StatusCode: to.Int32Ptr(200),
						}},
				},
				Method:      to.StringPtr("POST"),
				DisplayName: to.StringPtr("createUser2"),
				URLTemplate: to.StringPtr("/user1"),
			},
		},
		&APIOperationCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationContract.ID == nil {
		t.Fatal("OperationContract.ID should not be nil!")
	}
}

func TestApiOperation_Update(t *testing.T) {
	// From example ApiManagementUpdateApiOperation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIOperationClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"echo-api",
		"operationId",
		"*",
		OperationUpdateContract{
			Properties: &OperationUpdateContractProperties{
				OperationEntityBaseContract: OperationEntityBaseContract{
					TemplateParameters: []*ParameterContract{},
					Request: &RequestContract{
						QueryParameters: []*ParameterContract{
							{
								Name:         to.StringPtr("param1"),
								Type:         to.StringPtr("string"),
								Description:  to.StringPtr("A sample parameter that is required and has a default value of \"sample\"."),
								DefaultValue: to.StringPtr("sample"),
								Required:     to.BoolPtr(true),
								Values: []*string{
									to.StringPtr("sample")},
							}},
					},
					Responses: []*ResponseContract{
						{
							Description:     to.StringPtr("Returned in all cases."),
							Headers:         []*ParameterContract{},
							Representations: []*RepresentationContract{},
							StatusCode:      to.Int32Ptr(200),
						},
						{
							Description:     to.StringPtr("Server Error."),
							Headers:         []*ParameterContract{},
							Representations: []*RepresentationContract{},
							StatusCode:      to.Int32Ptr(500),
						}},
				},
				Method:      to.StringPtr("GET"),
				DisplayName: to.StringPtr("Retrieve resource"),
				URLTemplate: to.StringPtr("/resource"),
			},
		},
		&APIOperationUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationContract.ID == nil {
		t.Fatal("OperationContract.ID should not be nil!")
	}
}

func TestApiOperation_Delete(t *testing.T) {
	// From example ApiManagementDeleteApiOperation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIOperationClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		"57d2ef278aa04f0ad01d6cdc",
		"*",
		&APIOperationDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiOperationPolicy_ListByOperation(t *testing.T) {
	// From example ApiManagementListApiOperationPolicies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIOperationPolicyClient(con,
		"subid")
	_, err := client.ListByOperation(ctx,
		"rg1",
		"apimService1",
		"599e2953193c3c0bd0b3e2fa",
		"599e29ab193c3c0bd0b3e2fb",
		&APIOperationPolicyListByOperationOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiOperationPolicy_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadApiOperationPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIOperationPolicyClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"5600b539c53f5b0062040001",
		"5600b53ac53f5b0062080006",
		PolicyIDNamePolicy,
		&APIOperationPolicyGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiOperationPolicy_Get(t *testing.T) {
	// From example ApiManagementGetApiOperationPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIOperationPolicyClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"5600b539c53f5b0062040001",
		"5600b53ac53f5b0062080006",
		PolicyIDNamePolicy,
		&APIOperationPolicyGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PolicyContract.ID == nil {
		t.Fatal("PolicyContract.ID should not be nil!")
	}
}

func TestApiOperationPolicy_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateApiOperationPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIOperationPolicyClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"5600b57e7e8880006a040001",
		"5600b57e7e8880006a080001",
		PolicyIDNamePolicy,
		PolicyContract{
			Properties: &PolicyContractProperties{
				Format: PolicyContentFormatXML.ToPtr(),
				Value:  to.StringPtr("<policies> <inbound /> <backend>    <forward-request />  </backend>  <outbound /></policies>"),
			},
		},
		&APIOperationPolicyCreateOrUpdateOptions{IfMatch: to.StringPtr("*")})
	if err != nil {
		t.Fatal(err)
	}
	if res.PolicyContract.ID == nil {
		t.Fatal("PolicyContract.ID should not be nil!")
	}
}

func TestApiOperationPolicy_Delete(t *testing.T) {
	// From example ApiManagementDeleteApiOperationPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIOperationPolicyClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"testapi",
		"testoperation",
		PolicyIDNamePolicy,
		"*",
		&APIOperationPolicyDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTag_ListByOperation(t *testing.T) {
	// From example ApiManagementListApiOperationTags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagClient(con,
		"subid")
	pager := client.ListByOperation("rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		"57d2ef278aa04f0888cba3f6",
		&TagListByOperationOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("TagContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("TagContract.ID should not be nil!")
			}
		}
	}
}

func TestTag_GetEntityStateByOperation(t *testing.T) {
	// From example ApiManagementHeadApiOperationTag
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagClient(con,
		"subid")
	_, err := client.GetEntityStateByOperation(ctx,
		"rg1",
		"apimService1",
		"59d6bb8f1f7fab13dc67ec9b",
		"59d6bb8f1f7fab13dc67ec9a",
		"59306a29e4bbd510dc24e5f9",
		&TagGetEntityStateByOperationOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTag_GetByOperation(t *testing.T) {
	// From example ApiManagementGetApiOperationTag
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagClient(con,
		"subid")
	res, err := client.GetByOperation(ctx,
		"rg1",
		"apimService1",
		"59d6bb8f1f7fab13dc67ec9b",
		"59d6bb8f1f7fab13dc67ec9a",
		"59306a29e4bbd510dc24e5f9",
		&TagGetByOperationOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TagContract.ID == nil {
		t.Fatal("TagContract.ID should not be nil!")
	}
}

func TestTag_AssignToOperation(t *testing.T) {
	// From example ApiManagementCreateApiOperationTag
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagClient(con,
		"subid")
	res, err := client.AssignToOperation(ctx,
		"rg1",
		"apimService1",
		"5931a75ae4bbd512a88c680b",
		"5931a75ae4bbd512a88c680a",
		"tagId1",
		&TagAssignToOperationOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TagContract.ID == nil {
		t.Fatal("TagContract.ID should not be nil!")
	}
}

func TestTag_DetachFromOperation(t *testing.T) {
	// From example ApiManagementDeleteApiOperationTag
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagClient(con,
		"subid")
	_, err := client.DetachFromOperation(ctx,
		"rg1",
		"apimService1",
		"59d5b28d1f7fab116c282650",
		"59d5b28d1f7fab116c282651",
		"59d5b28e1f7fab116402044e",
		&TagDetachFromOperationOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTag_ListByApi(t *testing.T) {
	// From example ApiManagementListApiTags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagClient(con,
		"subid")
	pager := client.ListByAPI("rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		&TagListByAPIOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("TagContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("TagContract.ID should not be nil!")
			}
		}
	}
}

func TestTag_GetEntityStateByApi(t *testing.T) {
	// From example ApiManagementHeadApiTag
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagClient(con,
		"subid")
	_, err := client.GetEntityStateByAPI(ctx,
		"rg1",
		"apimService1",
		"59d6bb8f1f7fab13dc67ec9b",
		"59306a29e4bbd510dc24e5f9",
		&TagGetEntityStateByAPIOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTag_GetByApi(t *testing.T) {
	// From example ApiManagementGetApiTag
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagClient(con,
		"subid")
	res, err := client.GetByAPI(ctx,
		"rg1",
		"apimService1",
		"59d6bb8f1f7fab13dc67ec9b",
		"59306a29e4bbd510dc24e5f9",
		&TagGetByAPIOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TagContract.ID == nil {
		t.Fatal("TagContract.ID should not be nil!")
	}
}

func TestTag_AssignToApi(t *testing.T) {
	// From example ApiManagementCreateApiTag
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagClient(con,
		"subid")
	res, err := client.AssignToAPI(ctx,
		"rg1",
		"apimService1",
		"5931a75ae4bbd512a88c680b",
		"tagId1",
		&TagAssignToAPIOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TagContract.ID == nil {
		t.Fatal("TagContract.ID should not be nil!")
	}
}

func TestTag_DetachFromApi(t *testing.T) {
	// From example ApiManagementDeleteApiTag
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagClient(con,
		"subid")
	_, err := client.DetachFromAPI(ctx,
		"rg1",
		"apimService1",
		"59d5b28d1f7fab116c282650",
		"59d5b28e1f7fab116402044e",
		&TagDetachFromAPIOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTag_ListByProduct(t *testing.T) {
	// From example ApiManagementListProductTags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagClient(con,
		"subid")
	pager := client.ListByProduct("rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f1",
		&TagListByProductOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("TagContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("TagContract.ID should not be nil!")
			}
		}
	}
}

func TestTag_GetEntityStateByProduct(t *testing.T) {
	// From example ApiManagementHeadProductTag
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagClient(con,
		"subid")
	_, err := client.GetEntityStateByProduct(ctx,
		"rg1",
		"apimService1",
		"59306a29e4bbd510dc24e5f8",
		"59306a29e4bbd510dc24e5f9",
		&TagGetEntityStateByProductOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTag_GetByProduct(t *testing.T) {
	// From example ApiManagementGetProductTag
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagClient(con,
		"subid")
	res, err := client.GetByProduct(ctx,
		"rg1",
		"apimService1",
		"59d6bb8f1f7fab13dc67ec9b",
		"59306a29e4bbd510dc24e5f9",
		&TagGetByProductOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TagContract.ID == nil {
		t.Fatal("TagContract.ID should not be nil!")
	}
}

func TestTag_AssignToProduct(t *testing.T) {
	// From example ApiManagementCreateProductTag
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagClient(con,
		"subid")
	res, err := client.AssignToProduct(ctx,
		"rg1",
		"apimService1",
		"5931a75ae4bbd512a88c680b",
		"tagId1",
		&TagAssignToProductOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TagContract.ID == nil {
		t.Fatal("TagContract.ID should not be nil!")
	}
}

func TestTag_DetachFromProduct(t *testing.T) {
	// From example ApiManagementDeleteProductTag
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagClient(con,
		"subid")
	_, err := client.DetachFromProduct(ctx,
		"rg1",
		"apimService1",
		"59d5b28d1f7fab116c282650",
		"59d5b28e1f7fab116402044e",
		&TagDetachFromProductOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTag_ListByService(t *testing.T) {
	// From example ApiManagementListTags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&TagListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("TagContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("TagContract.ID should not be nil!")
			}
		}
	}
}

func TestTag_GetEntityState(t *testing.T) {
	// From example ApiManagementHeadTag
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagClient(con,
		"subid")
	_, err := client.GetEntityState(ctx,
		"rg1",
		"apimService1",
		"59306a29e4bbd510dc24e5f9",
		&TagGetEntityStateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTag_Get(t *testing.T) {
	// From example ApiManagementGetTag
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"59306a29e4bbd510dc24e5f9",
		&TagGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TagContract.ID == nil {
		t.Fatal("TagContract.ID should not be nil!")
	}
}

func TestTag_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateTag
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"tagId1",
		TagCreateUpdateParameters{
			Properties: &TagContractProperties{
				DisplayName: to.StringPtr("tag1"),
			},
		},
		&TagCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TagContract.ID == nil {
		t.Fatal("TagContract.ID should not be nil!")
	}
}

func TestTag_Update(t *testing.T) {
	// From example ApiManagementUpdateTag
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"temptag",
		"*",
		TagCreateUpdateParameters{
			Properties: &TagContractProperties{
				DisplayName: to.StringPtr("temp tag"),
			},
		},
		&TagUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TagContract.ID == nil {
		t.Fatal("TagContract.ID should not be nil!")
	}
}

func TestTag_Delete(t *testing.T) {
	// From example ApiManagementDeleteTag
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"tagId1",
		"*",
		&TagDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiProduct_ListByApis(t *testing.T) {
	// From example ApiManagementListApiProducts
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIProductClient(con,
		"subid")
	pager := client.ListByApis("rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		&APIProductListByApisOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ProductContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ProductContract.ID should not be nil!")
			}
		}
	}
}

func TestApiPolicy_ListByApi(t *testing.T) {
	// From example ApiManagementListApiPolicies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIPolicyClient(con,
		"subid")
	_, err := client.ListByAPI(ctx,
		"rg1",
		"apimService1",
		"5600b59475ff190048040001",
		&APIPolicyListByAPIOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiPolicy_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadApiPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIPolicyClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		PolicyIDNamePolicy,
		&APIPolicyGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiPolicy_Get(t *testing.T) {
	// From example ApiManagementGetApiPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIPolicyClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"5600b59475ff190048040001",
		PolicyIDNamePolicy,
		&APIPolicyGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PolicyContract.ID == nil {
		t.Fatal("PolicyContract.ID should not be nil!")
	}
}

func TestApiPolicy_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateApiPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIPolicyClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"5600b57e7e8880006a040001",
		PolicyIDNamePolicy,
		PolicyContract{
			Properties: &PolicyContractProperties{
				Format: PolicyContentFormatXML.ToPtr(),
				Value:  to.StringPtr("<policies> <inbound /> <backend>    <forward-request />  </backend>  <outbound /></policies>"),
			},
		},
		&APIPolicyCreateOrUpdateOptions{IfMatch: to.StringPtr("*")})
	if err != nil {
		t.Fatal(err)
	}
	if res.PolicyContract.ID == nil {
		t.Fatal("PolicyContract.ID should not be nil!")
	}

	// From example ApiManagementCreateApiPolicyNonXmlEncoded
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"5600b57e7e8880006a040001",
		PolicyIDNamePolicy,
		PolicyContract{
			Properties: &PolicyContractProperties{
				Format: PolicyContentFormatRawxml.ToPtr(),
				Value:  to.StringPtr("<policies>\r\n     <inbound>\r\n     <base />\r\n  <set-header name=\"newvalue\" exists-action=\"override\">\r\n   <value>\"@(context.Request.Headers.FirstOrDefault(h => h.Ke==\"Via\"))\" </value>\r\n    </set-header>\r\n  </inbound>\r\n      </policies>"),
			},
		},
		&APIPolicyCreateOrUpdateOptions{IfMatch: to.StringPtr("*")})
	if err != nil {
		t.Fatal(err)
	}
	if res.PolicyContract.ID == nil {
		t.Fatal("PolicyContract.ID should not be nil!")
	}
}

func TestApiPolicy_Delete(t *testing.T) {
	// From example ApiManagementDeleteApiPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIPolicyClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"loggerId",
		PolicyIDNamePolicy,
		"*",
		&APIPolicyDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiSchema_ListByApi(t *testing.T) {
	// From example ApiManagementListApiSchemas
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPISchemaClient(con,
		"subid")
	pager := client.ListByAPI("rg1",
		"apimService1",
		"59d5b28d1f7fab116c282650",
		&APISchemaListByAPIOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SchemaContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SchemaContract.ID should not be nil!")
			}
		}
	}
}

func TestApiSchema_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadApiSchema
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPISchemaClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"ec12520d-9d48-4e7b-8f39-698ca2ac63f1",
		&APISchemaGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiSchema_Get(t *testing.T) {
	// From example ApiManagementGetApiSchema
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPISchemaClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"59d6bb8f1f7fab13dc67ec9b",
		"ec12520d-9d48-4e7b-8f39-698ca2ac63f1",
		&APISchemaGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SchemaContract.ID == nil {
		t.Fatal("SchemaContract.ID should not be nil!")
	}
}

func TestApiSchema_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateApiSchema
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPISchemaClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"59d6bb8f1f7fab13dc67ec9b",
		"ec12520d-9d48-4e7b-8f39-698ca2ac63f1",
		SchemaContract{
			Properties: &SchemaContractProperties{
				ContentType: to.StringPtr("application/vnd.ms-azure-apim.xsd+xml"),
				Document: &SchemaDocumentProperties{
					Value: to.StringPtr("<s:schema elementFormDefault=\"qualified\" targetNamespace=\"http://ws.cdyne.com/WeatherWS/\" xmlns:tns=\"http://ws.cdyne.com/WeatherWS/\" xmlns:s=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://schemas.xmlsoap.org/wsdl/soap12/\" xmlns:mime=\"http://schemas.xmlsoap.org/wsdl/mime/\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" xmlns:tm=\"http://microsoft.com/wsdl/mime/textMatching/\" xmlns:http=\"http://schemas.xmlsoap.org/wsdl/http/\" xmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:apim-wsdltns=\"http://ws.cdyne.com/WeatherWS/\">\r\n  <s:element name=\"GetWeatherInformation\">\r\n    <s:complexType />\r\n  </s:element>\r\n  <s:element name=\"GetWeatherInformationResponse\">\r\n    <s:complexType>\r\n      <s:sequence>\r\n        <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"GetWeatherInformationResult\" type=\"tns:ArrayOfWeatherDescription\" />\r\n      </s:sequence>\r\n    </s:complexType>\r\n  </s:element>\r\n  <s:complexType name=\"ArrayOfWeatherDescription\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"WeatherDescription\" type=\"tns:WeatherDescription\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:complexType name=\"WeatherDescription\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"WeatherID\" type=\"s:short\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Description\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"PictureURL\" type=\"s:string\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:element name=\"GetCityForecastByZIP\">\r\n    <s:complexType>\r\n      <s:sequence>\r\n        <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"ZIP\" type=\"s:string\" />\r\n      </s:sequence>\r\n    </s:complexType>\r\n  </s:element>\r\n  <s:element name=\"GetCityForecastByZIPResponse\">\r\n    <s:complexType>\r\n      <s:sequence>\r\n        <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"GetCityForecastByZIPResult\" type=\"tns:ForecastReturn\" />\r\n      </s:sequence>\r\n    </s:complexType>\r\n  </s:element>\r\n  <s:complexType name=\"ForecastReturn\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"Success\" type=\"s:boolean\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"ResponseText\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"State\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"City\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"WeatherStationCity\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"ForecastResult\" type=\"tns:ArrayOfForecast\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:complexType name=\"ArrayOfForecast\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Forecast\" nillable=\"true\" type=\"tns:Forecast\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:complexType name=\"Forecast\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"Date\" type=\"s:dateTime\" />\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"WeatherID\" type=\"s:short\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Desciption\" type=\"s:string\" />\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"Temperatures\" type=\"tns:temp\" />\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"ProbabilityOfPrecipiation\" type=\"tns:POP\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:complexType name=\"temp\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"MorningLow\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"DaytimeHigh\" type=\"s:string\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:complexType name=\"POP\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Nighttime\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Daytime\" type=\"s:string\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:element name=\"GetCityWeatherByZIP\">\r\n    <s:complexType>\r\n      <s:sequence>\r\n        <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"ZIP\" type=\"s:string\" />\r\n      </s:sequence>\r\n    </s:complexType>\r\n  </s:element>\r\n  <s:element name=\"GetCityWeatherByZIPResponse\">\r\n    <s:complexType>\r\n      <s:sequence>\r\n        <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"GetCityWeatherByZIPResult\" type=\"tns:WeatherReturn\" />\r\n      </s:sequence>\r\n    </s:complexType>\r\n  </s:element>\r\n  <s:complexType name=\"WeatherReturn\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"Success\" type=\"s:boolean\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"ResponseText\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"State\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"City\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"WeatherStationCity\" type=\"s:string\" />\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"WeatherID\" type=\"s:short\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Description\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Temperature\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"RelativeHumidity\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Wind\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Pressure\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Visibility\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"WindChill\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Remarks\" type=\"s:string\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:element name=\"ArrayOfWeatherDescription\" nillable=\"true\" type=\"tns:ArrayOfWeatherDescription\" />\r\n  <s:element name=\"ForecastReturn\" nillable=\"true\" type=\"tns:ForecastReturn\" />\r\n  <s:element name=\"WeatherReturn\" type=\"tns:WeatherReturn\" />\r\n</s:schema>"),
				},
			},
		},
		&APISchemaBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SchemaContract.ID == nil {
		t.Fatal("SchemaContract.ID should not be nil!")
	}
}

func TestApiSchema_Delete(t *testing.T) {
	// From example ApiManagementDeleteApiSchema
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPISchemaClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"59d5b28d1f7fab116c282650",
		"59d5b28e1f7fab116402044e",
		"*",
		&APISchemaDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiDiagnostic_ListByService(t *testing.T) {
	// From example ApiManagementListApiDiagnostics
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIDiagnosticClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		"echo-api",
		&APIDiagnosticListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DiagnosticContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DiagnosticContract.ID should not be nil!")
			}
		}
	}
}

func TestApiDiagnostic_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadApiDiagnostic
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIDiagnosticClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"applicationinsights",
		&APIDiagnosticGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiDiagnostic_Get(t *testing.T) {
	// From example ApiManagementGetApiDiagnostic
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIDiagnosticClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"applicationinsights",
		&APIDiagnosticGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticContract.ID == nil {
		t.Fatal("DiagnosticContract.ID should not be nil!")
	}
}

func TestApiDiagnostic_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateApiDiagnostic
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIDiagnosticClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"applicationinsights",
		DiagnosticContract{
			Properties: &DiagnosticContractProperties{
				AlwaysLog: AlwaysLogAllErrors.ToPtr(),
				Backend: &PipelineDiagnosticSettings{
					Response: &HTTPMessageDiagnostic{
						Body: &BodyDiagnosticSettings{
							Bytes: to.Int32Ptr(512),
						},
						Headers: []*string{
							to.StringPtr("Content-type")},
					},
					Request: &HTTPMessageDiagnostic{
						Body: &BodyDiagnosticSettings{
							Bytes: to.Int32Ptr(512),
						},
						Headers: []*string{
							to.StringPtr("Content-type")},
					},
				},
				Frontend: &PipelineDiagnosticSettings{
					Response: &HTTPMessageDiagnostic{
						Body: &BodyDiagnosticSettings{
							Bytes: to.Int32Ptr(512),
						},
						Headers: []*string{
							to.StringPtr("Content-type")},
					},
					Request: &HTTPMessageDiagnostic{
						Body: &BodyDiagnosticSettings{
							Bytes: to.Int32Ptr(512),
						},
						Headers: []*string{
							to.StringPtr("Content-type")},
					},
				},
				LoggerID: to.StringPtr("/loggers/applicationinsights"),
				Sampling: &SamplingSettings{
					Percentage:   to.Float64Ptr(50),
					SamplingType: SamplingTypeFixed.ToPtr(),
				},
			},
		},
		&APIDiagnosticCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticContract.ID == nil {
		t.Fatal("DiagnosticContract.ID should not be nil!")
	}
}

func TestApiDiagnostic_Update(t *testing.T) {
	// From example ApiManagementUpdateApiDiagnostic
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIDiagnosticClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"echo-api",
		"applicationinsights",
		"*",
		DiagnosticContract{
			Properties: &DiagnosticContractProperties{
				AlwaysLog: AlwaysLogAllErrors.ToPtr(),
				Backend: &PipelineDiagnosticSettings{
					Response: &HTTPMessageDiagnostic{
						Body: &BodyDiagnosticSettings{
							Bytes: to.Int32Ptr(512),
						},
						Headers: []*string{
							to.StringPtr("Content-type")},
					},
					Request: &HTTPMessageDiagnostic{
						Body: &BodyDiagnosticSettings{
							Bytes: to.Int32Ptr(512),
						},
						Headers: []*string{
							to.StringPtr("Content-type")},
					},
				},
				Frontend: &PipelineDiagnosticSettings{
					Response: &HTTPMessageDiagnostic{
						Body: &BodyDiagnosticSettings{
							Bytes: to.Int32Ptr(512),
						},
						Headers: []*string{
							to.StringPtr("Content-type")},
					},
					Request: &HTTPMessageDiagnostic{
						Body: &BodyDiagnosticSettings{
							Bytes: to.Int32Ptr(512),
						},
						Headers: []*string{
							to.StringPtr("Content-type")},
					},
				},
				LoggerID: to.StringPtr("/loggers/applicationinsights"),
				Sampling: &SamplingSettings{
					Percentage:   to.Float64Ptr(50),
					SamplingType: SamplingTypeFixed.ToPtr(),
				},
			},
		},
		&APIDiagnosticUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticContract.ID == nil {
		t.Fatal("DiagnosticContract.ID should not be nil!")
	}
}

func TestApiDiagnostic_Delete(t *testing.T) {
	// From example ApiManagementDeleteApiDiagnostic
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIDiagnosticClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"applicationinsights",
		"*",
		&APIDiagnosticDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiIssue_ListByService(t *testing.T) {
	// From example ApiManagementListApiIssues
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIIssueClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		&APIIssueListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IssueContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IssueContract.ID should not be nil!")
			}
		}
	}
}

func TestApiIssue_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadApiIssue
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIIssueClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		"57d2ef278aa04f0ad01d6cdc",
		&APIIssueGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiIssue_Get(t *testing.T) {
	// From example ApiManagementGetApiIssue
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIIssueClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		"57d2ef278aa04f0ad01d6cdc",
		&APIIssueGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IssueContract.ID == nil {
		t.Fatal("IssueContract.ID should not be nil!")
	}
}

func TestApiIssue_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateApiIssue
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIIssueClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"57d2ef278aa04f0ad01d6cdc",
		IssueContract{
			Properties: &IssueContractProperties{
				IssueContractBaseProperties: IssueContractBaseProperties{
					CreatedDate: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T22:21:20.467Z"); return t }()),
					State:       StateOpen.ToPtr(),
				},
				Description: to.StringPtr("New API issue description"),
				Title:       to.StringPtr("New API issue"),
				UserID:      to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/1"),
			},
		},
		&APIIssueCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IssueContract.ID == nil {
		t.Fatal("IssueContract.ID should not be nil!")
	}
}

func TestApiIssue_Update(t *testing.T) {
	// From example ApiManagementUpdateApiIssue
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIIssueClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"57d2ef278aa04f0ad01d6cdc",
		"*",
		IssueUpdateContract{
			Properties: &IssueUpdateContractProperties{
				IssueContractBaseProperties: IssueContractBaseProperties{
					State: StateClosed.ToPtr(),
				},
			},
		},
		&APIIssueUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IssueContract.ID == nil {
		t.Fatal("IssueContract.ID should not be nil!")
	}
}

func TestApiIssue_Delete(t *testing.T) {
	// From example ApiManagementDeleteApiIssue
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIIssueClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"57d2ef278aa04f0ad01d6cdc",
		"*",
		&APIIssueDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiIssueComment_ListByService(t *testing.T) {
	// From example ApiManagementListApiIssueComments
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIIssueCommentClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"57d2ef278aa04f0ad01d6cdc",
		&APIIssueCommentListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IssueCommentContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IssueCommentContract.ID should not be nil!")
			}
		}
	}
}

func TestApiIssueComment_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadApiIssueComment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIIssueCommentClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		"57d2ef278aa04f0ad01d6cdc",
		"599e29ab193c3c0bd0b3e2fb",
		&APIIssueCommentGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiIssueComment_Get(t *testing.T) {
	// From example ApiManagementGetApiIssueComment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIIssueCommentClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		"57d2ef278aa04f0ad01d6cdc",
		"599e29ab193c3c0bd0b3e2fb",
		&APIIssueCommentGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IssueCommentContract.ID == nil {
		t.Fatal("IssueCommentContract.ID should not be nil!")
	}
}

func TestApiIssueComment_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateApiIssueComment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIIssueCommentClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"57d2ef278aa04f0ad01d6cdc",
		"599e29ab193c3c0bd0b3e2fb",
		IssueCommentContract{
			Properties: &IssueCommentContractProperties{
				CreatedDate: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T22:21:20.467Z"); return t }()),
				Text:        to.StringPtr("Issue comment."),
				UserID:      to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/1"),
			},
		},
		&APIIssueCommentCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IssueCommentContract.ID == nil {
		t.Fatal("IssueCommentContract.ID should not be nil!")
	}
}

func TestApiIssueComment_Delete(t *testing.T) {
	// From example ApiManagementDeleteApiIssueComment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIIssueCommentClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"57d2ef278aa04f0ad01d6cdc",
		"599e29ab193c3c0bd0b3e2fb",
		"*",
		&APIIssueCommentDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiIssueAttachment_ListByService(t *testing.T) {
	// From example ApiManagementListApiIssueAttachments
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIIssueAttachmentClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"57d2ef278aa04f0ad01d6cdc",
		&APIIssueAttachmentListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IssueAttachmentContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IssueAttachmentContract.ID should not be nil!")
			}
		}
	}
}

func TestApiIssueAttachment_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadApiIssueAttachment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIIssueAttachmentClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		"57d2ef278aa04f0ad01d6cdc",
		"57d2ef278aa04f0888cba3f3",
		&APIIssueAttachmentGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiIssueAttachment_Get(t *testing.T) {
	// From example ApiManagementGetApiIssueAttachment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIIssueAttachmentClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		"57d2ef278aa04f0ad01d6cdc",
		"57d2ef278aa04f0888cba3f3",
		&APIIssueAttachmentGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IssueAttachmentContract.ID == nil {
		t.Fatal("IssueAttachmentContract.ID should not be nil!")
	}
}

func TestApiIssueAttachment_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateApiIssueAttachment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIIssueAttachmentClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"57d2ef278aa04f0ad01d6cdc",
		"57d2ef278aa04f0888cba3f3",
		IssueAttachmentContract{
			Properties: &IssueAttachmentContractProperties{
				Content:       to.StringPtr("IEJhc2U2NA=="),
				ContentFormat: to.StringPtr("image/jpeg"),
				Title:         to.StringPtr("Issue attachment."),
			},
		},
		&APIIssueAttachmentCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IssueAttachmentContract.ID == nil {
		t.Fatal("IssueAttachmentContract.ID should not be nil!")
	}
}

func TestApiIssueAttachment_Delete(t *testing.T) {
	// From example ApiManagementDeleteApiIssueAttachment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIIssueAttachmentClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"57d2ef278aa04f0ad01d6cdc",
		"57d2ef278aa04f0888cba3f3",
		"*",
		&APIIssueAttachmentDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiTagDescription_ListByService(t *testing.T) {
	// From example ApiManagementListApiTagDescriptions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPITagDescriptionClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		&APITagDescriptionListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("TagDescriptionContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("TagDescriptionContract.ID should not be nil!")
			}
		}
	}
}

func TestApiTagDescription_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadApiTagDescription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPITagDescriptionClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"59d6bb8f1f7fab13dc67ec9b",
		"59306a29e4bbd510dc24e5f9",
		&APITagDescriptionGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiTagDescription_Get(t *testing.T) {
	// From example ApiManagementGetApiTagDescription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPITagDescriptionClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"59d6bb8f1f7fab13dc67ec9b",
		"59306a29e4bbd510dc24e5f9",
		&APITagDescriptionGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TagDescriptionContract.ID == nil {
		t.Fatal("TagDescriptionContract.ID should not be nil!")
	}
}

func TestApiTagDescription_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateApiTagDescription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPITagDescriptionClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"5931a75ae4bbd512a88c680b",
		"tagId1",
		TagDescriptionCreateParameters{
			Properties: &TagDescriptionBaseProperties{
				Description:             to.StringPtr("Some description that will be displayed for operation's tag if the tag is assigned to operation of the API"),
				ExternalDocsDescription: to.StringPtr("Description of the external docs resource"),
				ExternalDocsURL:         to.StringPtr("http://some.url/additionaldoc"),
			},
		},
		&APITagDescriptionCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TagDescriptionContract.ID == nil {
		t.Fatal("TagDescriptionContract.ID should not be nil!")
	}
}

func TestApiTagDescription_Delete(t *testing.T) {
	// From example ApiManagementDeleteApiTagDescription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPITagDescriptionClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"59d5b28d1f7fab116c282650",
		"59d5b28e1f7fab116402044e",
		"*",
		&APITagDescriptionDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperation_ListByTags(t *testing.T) {
	// From example ApiManagementListApiOperationsByTags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationClient(con,
		"subid")
	pager := client.ListByTags("rg1",
		"apimService1",
		"a1",
		&OperationListByTagsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestApiExport_Get(t *testing.T) {
	// From example ApiManagementGetApiExportInOpenApi2dot0
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIExportClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"echo-api",
		ExportFormatSwagger,
		ExportAPITrue,
		&APIExportGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.APIExportResult.ID == nil {
		t.Fatal("APIExportResult.ID should not be nil!")
	}

	// From example ApiManagementGetApiExportInOpenApi3dot0
	res, err = client.Get(ctx,
		"rg1",
		"apimService1",
		"aid9676",
		ExportFormatOpenapi,
		ExportAPITrue,
		&APIExportGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.APIExportResult.ID == nil {
		t.Fatal("APIExportResult.ID should not be nil!")
	}
}

func TestApiVersionSet_ListByService(t *testing.T) {
	// From example ApiManagementListApiVersionSets
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIVersionSetClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&APIVersionSetListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("APIVersionSetContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("APIVersionSetContract.ID should not be nil!")
			}
		}
	}
}

func TestApiVersionSet_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadApiVersionSet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIVersionSetClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"vs1",
		&APIVersionSetGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiVersionSet_Get(t *testing.T) {
	// From example ApiManagementGetApiVersionSet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIVersionSetClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"vs1",
		&APIVersionSetGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.APIVersionSetContract.ID == nil {
		t.Fatal("APIVersionSetContract.ID should not be nil!")
	}
}

func TestApiVersionSet_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateApiVersionSet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIVersionSetClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"api1",
		APIVersionSetContract{
			Properties: &APIVersionSetContractProperties{
				APIVersionSetEntityBase: APIVersionSetEntityBase{
					Description: to.StringPtr("Version configuration"),
				},
				DisplayName:      to.StringPtr("api set 1"),
				VersioningScheme: VersioningSchemeSegment.ToPtr(),
			},
		},
		&APIVersionSetCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.APIVersionSetContract.ID == nil {
		t.Fatal("APIVersionSetContract.ID should not be nil!")
	}
}

func TestApiVersionSet_Update(t *testing.T) {
	// From example ApiManagementUpdateApiVersionSet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIVersionSetClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"vs1",
		"*",
		APIVersionSetUpdateParameters{
			Properties: &APIVersionSetUpdateParametersProperties{
				APIVersionSetEntityBase: APIVersionSetEntityBase{
					Description: to.StringPtr("Version configuration"),
				},
				DisplayName:      to.StringPtr("api set 1"),
				VersioningScheme: VersioningSchemeSegment.ToPtr(),
			},
		},
		&APIVersionSetUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.APIVersionSetContract.ID == nil {
		t.Fatal("APIVersionSetContract.ID should not be nil!")
	}
}

func TestApiVersionSet_Delete(t *testing.T) {
	// From example ApiManagementDeleteApiVersionSet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIVersionSetClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"a1",
		"*",
		&APIVersionSetDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAuthorizationServer_ListByService(t *testing.T) {
	// From example ApiManagementListAuthorizationServers
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAuthorizationServerClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&AuthorizationServerListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AuthorizationServerContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AuthorizationServerContract.ID should not be nil!")
			}
		}
	}
}

func TestAuthorizationServer_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadAuthorizationServer
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAuthorizationServerClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"newauthServer2",
		&AuthorizationServerGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAuthorizationServer_Get(t *testing.T) {
	// From example ApiManagementGetAuthorizationServer
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAuthorizationServerClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"newauthServer2",
		&AuthorizationServerGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AuthorizationServerContract.ID == nil {
		t.Fatal("AuthorizationServerContract.ID should not be nil!")
	}
}

func TestAuthorizationServer_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateAuthorizationServer
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAuthorizationServerClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"newauthServer",
		AuthorizationServerContract{
			Properties: &AuthorizationServerContractProperties{
				AuthorizationServerContractBaseProperties: AuthorizationServerContractBaseProperties{
					Description: to.StringPtr("test server"),
					AuthorizationMethods: []*AuthorizationMethod{
						AuthorizationMethodGET.ToPtr()},
					BearerTokenSendingMethods: []*BearerTokenSendingMethod{
						BearerTokenSendingMethodAuthorizationHeader.ToPtr()},
					DefaultScope:          to.StringPtr("read write"),
					ResourceOwnerPassword: to.StringPtr("pwd"),
					ResourceOwnerUsername: to.StringPtr("un"),
					SupportState:          to.BoolPtr(true),
					TokenEndpoint:         to.StringPtr("https://www.contoso.com/oauth2/token"),
				},
				AuthorizationEndpoint:      to.StringPtr("https://www.contoso.com/oauth2/auth"),
				ClientID:                   to.StringPtr("1"),
				ClientRegistrationEndpoint: to.StringPtr("https://www.contoso.com/apps"),
				ClientSecret:               to.StringPtr("2"),
				DisplayName:                to.StringPtr("test2"),
				GrantTypes: []*GrantType{
					GrantTypeAuthorizationCode.ToPtr(),
					GrantTypeImplicit.ToPtr()},
			},
		},
		&AuthorizationServerCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AuthorizationServerContract.ID == nil {
		t.Fatal("AuthorizationServerContract.ID should not be nil!")
	}
}

func TestAuthorizationServer_Update(t *testing.T) {
	// From example ApiManagementUpdateAuthorizationServer
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAuthorizationServerClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"newauthServer",
		"*",
		AuthorizationServerUpdateContract{
			Properties: &AuthorizationServerUpdateContractProperties{
				ClientID:     to.StringPtr("update"),
				ClientSecret: to.StringPtr("updated"),
			},
		},
		&AuthorizationServerUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AuthorizationServerContract.ID == nil {
		t.Fatal("AuthorizationServerContract.ID should not be nil!")
	}
}

func TestAuthorizationServer_Delete(t *testing.T) {
	// From example ApiManagementDeleteAuthorizationServer
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAuthorizationServerClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"newauthServer2",
		"*",
		&AuthorizationServerDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAuthorizationServer_ListSecrets(t *testing.T) {
	// From example ApiManagementAuthorizationServerListSecrets
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAuthorizationServerClient(con,
		"subid")
	_, err := client.ListSecrets(ctx,
		"rg1",
		"apimService1",
		"newauthServer2",
		&AuthorizationServerListSecretsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackend_ListByService(t *testing.T) {
	// From example ApiManagementListBackends
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackendClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&BackendListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("BackendContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("BackendContract.ID should not be nil!")
			}
		}
	}
}

func TestBackend_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadBackend
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackendClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"sfbackend",
		&BackendGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackend_Get(t *testing.T) {
	// From example ApiManagementGetBackend
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackendClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"sfbackend",
		&BackendGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BackendContract.ID == nil {
		t.Fatal("BackendContract.ID should not be nil!")
	}
}

func TestBackend_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateBackendProxyBackend
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackendClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"proxybackend",
		BackendContract{
			Properties: &BackendContractProperties{
				BackendBaseParameters: BackendBaseParameters{
					Description: to.StringPtr("description5308"),
					Credentials: &BackendCredentialsContract{
						Authorization: &BackendAuthorizationHeaderCredentials{
							Parameter: to.StringPtr("opensesma"),
							Scheme:    to.StringPtr("Basic"),
						},
						Header: map[string][]*string{
							"x-my-1": []*string{
								to.StringPtr("val1"),
								to.StringPtr("val2")},
						},
						Query: map[string][]*string{
							"sv": []*string{
								to.StringPtr("xx"),
								to.StringPtr("bb"),
								to.StringPtr("cc")},
						},
					},
					Proxy: &BackendProxyContract{
						Password: to.StringPtr("<password>"),
						URL:      to.StringPtr("http://192.168.1.1:8080"),
						Username: to.StringPtr("Contoso\\admin"),
					},
					TLS: &BackendTLSProperties{
						ValidateCertificateChain: to.BoolPtr(true),
						ValidateCertificateName:  to.BoolPtr(true),
					},
				},
				URL:      to.StringPtr("https://backendname2644/"),
				Protocol: BackendProtocolHTTP.ToPtr(),
			},
		},
		&BackendCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BackendContract.ID == nil {
		t.Fatal("BackendContract.ID should not be nil!")
	}

	// From example ApiManagementCreateBackendServiceFabric
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"sfbackend",
		BackendContract{
			Properties: &BackendContractProperties{
				BackendBaseParameters: BackendBaseParameters{
					Description: to.StringPtr("Service Fabric Test App 1"),
					Properties: &BackendProperties{
						ServiceFabricCluster: &BackendServiceFabricClusterProperties{
							ClientCertificateID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/cert1"),
							ManagementEndpoints: []*string{
								to.StringPtr("https://somecluster.com")},
							MaxPartitionResolutionRetries: to.Int32Ptr(5),
							ServerX509Names: []*X509CertificateName{
								{
									Name:                        to.StringPtr("ServerCommonName1"),
									IssuerCertificateThumbprint: to.StringPtr("IssuerCertificateThumbprint1"),
								}},
						},
					},
				},
				URL:      to.StringPtr("fabric:/mytestapp/mytestservice"),
				Protocol: BackendProtocolHTTP.ToPtr(),
			},
		},
		&BackendCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BackendContract.ID == nil {
		t.Fatal("BackendContract.ID should not be nil!")
	}
}

func TestBackend_Update(t *testing.T) {
	// From example ApiManagementUpdateBackend
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackendClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"proxybackend",
		"*",
		BackendUpdateParameters{
			Properties: &BackendUpdateParameterProperties{
				BackendBaseParameters: BackendBaseParameters{
					Description: to.StringPtr("description5308"),
					TLS: &BackendTLSProperties{
						ValidateCertificateChain: to.BoolPtr(false),
						ValidateCertificateName:  to.BoolPtr(true),
					},
				},
			},
		},
		&BackendUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BackendContract.ID == nil {
		t.Fatal("BackendContract.ID should not be nil!")
	}
}

func TestBackend_Delete(t *testing.T) {
	// From example ApiManagementDeleteBackend
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackendClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"sfbackend",
		"*",
		&BackendDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackend_Reconnect(t *testing.T) {
	// From example ApiManagementBackendReconnect
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackendClient(con,
		"subid")
	_, err := client.Reconnect(ctx,
		"rg1",
		"apimService1",
		"proxybackend",
		&BackendReconnectOptions{Parameters: &BackendReconnectContract{
			Properties: &BackendReconnectProperties{
				After: to.StringPtr("PT3S"),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCache_ListByService(t *testing.T) {
	// From example ApiManagementListCaches
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCacheClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&CacheListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("CacheContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("CacheContract.ID should not be nil!")
			}
		}
	}
}

func TestCache_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadCache
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCacheClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"default",
		&CacheGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCache_Get(t *testing.T) {
	// From example ApiManagementGetCache
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCacheClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"c1",
		&CacheGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CacheContract.ID == nil {
		t.Fatal("CacheContract.ID should not be nil!")
	}
}

func TestCache_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateCache
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCacheClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"c1",
		CacheContract{
			Properties: &CacheContractProperties{
				Description:      to.StringPtr("Redis cache instances in West India"),
				ConnectionString: to.StringPtr("apim.redis.cache.windows.net:6380,password=xc,ssl=True,abortConnect=False"),
				ResourceID:       to.StringPtr("https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redis/apimservice1"),
				UseFromLocation:  to.StringPtr("default"),
			},
		},
		&CacheCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CacheContract.ID == nil {
		t.Fatal("CacheContract.ID should not be nil!")
	}
}

func TestCache_Update(t *testing.T) {
	// From example ApiManagementUpdateCache
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCacheClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"c1",
		"*",
		CacheUpdateParameters{
			Properties: &CacheUpdateProperties{
				UseFromLocation: to.StringPtr("westindia"),
			},
		},
		&CacheUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CacheContract.ID == nil {
		t.Fatal("CacheContract.ID should not be nil!")
	}
}

func TestCache_Delete(t *testing.T) {
	// From example ApiManagementDeleteCache
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCacheClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"southindia",
		"*",
		&CacheDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCertificate_ListByService(t *testing.T) {
	// From example ApiManagementListCertificates
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificateClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&CertificateListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("CertificateContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("CertificateContract.ID should not be nil!")
			}
		}
	}
}

func TestCertificate_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadCertificate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificateClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"templateCert1",
		&CertificateGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCertificate_Get(t *testing.T) {
	// From example ApiManagementGetCertificate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificateClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"templateCert1",
		&CertificateGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CertificateContract.ID == nil {
		t.Fatal("CertificateContract.ID should not be nil!")
	}

	// From example ApiManagementGetCertificateWithKeyVault
	res, err = client.Get(ctx,
		"rg1",
		"apimService1",
		"templateCertkv",
		&CertificateGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CertificateContract.ID == nil {
		t.Fatal("CertificateContract.ID should not be nil!")
	}
}

func TestCertificate_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateCertificate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificateClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"tempcert",
		CertificateCreateOrUpdateParameters{
			Properties: &CertificateCreateOrUpdateProperties{
				Data:     to.StringPtr("****************Base 64 Encoded Certificate *******************************"),
				Password: to.StringPtr("****Certificate Password******"),
			},
		},
		&CertificateCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CertificateContract.ID == nil {
		t.Fatal("CertificateContract.ID should not be nil!")
	}

	// From example ApiManagementCreateCertificateWithKeyVault
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"templateCertkv",
		CertificateCreateOrUpdateParameters{
			Properties: &CertificateCreateOrUpdateProperties{
				KeyVault: &KeyVaultContractCreateProperties{
					IdentityClientID: to.StringPtr("ceaa6b06-c00f-43ef-99ac-f53d1fe876a0"),
					SecretIdentifier: to.StringPtr("https://rpbvtkeyvaultintegration.vault-int.azure-int.net/secrets/msitestingCert"),
				},
			},
		},
		&CertificateCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CertificateContract.ID == nil {
		t.Fatal("CertificateContract.ID should not be nil!")
	}
}

func TestCertificate_Delete(t *testing.T) {
	// From example ApiManagementDeleteCertificate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificateClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"tempcert",
		"*",
		&CertificateDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCertificate_RefreshSecret(t *testing.T) {
	// From example ApiManagementRefreshCertificate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificateClient(con,
		"subid")
	res, err := client.RefreshSecret(ctx,
		"rg1",
		"apimService1",
		"templateCertkv",
		&CertificateRefreshSecretOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CertificateContract.ID == nil {
		t.Fatal("CertificateContract.ID should not be nil!")
	}
}

func TestContentType_ListByService(t *testing.T) {
	// From example ApiManagementListContentTypes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContentTypeClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&ContentTypeListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ContentTypeContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ContentTypeContract.ID should not be nil!")
			}
		}
	}
}

func TestContentType_Get(t *testing.T) {
	// From example ApiManagementGetContentType
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContentTypeClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"page",
		&ContentTypeGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ContentTypeContract.ID == nil {
		t.Fatal("ContentTypeContract.ID should not be nil!")
	}
}

func TestContentType_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateContentType
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContentTypeClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"page",
		&ContentTypeCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ContentTypeContract.ID == nil {
		t.Fatal("ContentTypeContract.ID should not be nil!")
	}
}

func TestContentType_Delete(t *testing.T) {
	// From example ApiManagementDeleteContentType
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContentTypeClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"page",
		"*",
		&ContentTypeDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestContentItem_ListByService(t *testing.T) {
	// From example ApiManagementListContentTypeContentItems
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContentItemClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		"page",
		&ContentItemListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ContentItemContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ContentItemContract.ID should not be nil!")
			}
		}
	}
}

func TestContentItem_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadContentTypeContentItem
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContentItemClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"page",
		"4e3cf6a5-574a-ba08-1f23-2e7a38faa6d8",
		&ContentItemGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestContentItem_Get(t *testing.T) {
	// From example ApiManagementGetContentTypeContentItem
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContentItemClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"page",
		"4e3cf6a5-574a-ba08-1f23-2e7a38faa6d8",
		&ContentItemGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ContentItemContract.ID == nil {
		t.Fatal("ContentItemContract.ID should not be nil!")
	}
}

func TestContentItem_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateContentTypeContentItem
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContentItemClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"page",
		"4e3cf6a5-574a-ba08-1f23-2e7a38faa6d8",
		&ContentItemCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ContentItemContract.ID == nil {
		t.Fatal("ContentItemContract.ID should not be nil!")
	}
}

func TestContentItem_Delete(t *testing.T) {
	// From example ApiManagementDeleteContentTypeContentItem
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContentItemClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"page",
		"4e3cf6a5-574a-ba08-1f23-2e7a38faa6d8",
		"*",
		&ContentItemDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDeletedServices_ListBySubscription(t *testing.T) {
	// From example ApiManagementDeletedServicesListBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeletedServicesClient(con,
		"subid")
	pager := client.ListBySubscription(&DeletedServicesListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DeletedServiceContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DeletedServiceContract.ID should not be nil!")
			}
		}
	}
}

func TestDeletedServices_GetByName(t *testing.T) {
	// From example ApiManagementGetDeletedServiceByName
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeletedServicesClient(con,
		"subid")
	res, err := client.GetByName(ctx,
		"apimService3",
		"westus",
		&DeletedServicesGetByNameOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DeletedServiceContract.ID == nil {
		t.Fatal("DeletedServiceContract.ID should not be nil!")
	}
}

func TestDeletedServices_Purge(t *testing.T) {
	// From example ApiManagementDeletedServicesPurge
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeletedServicesClient(con,
		"subid")
	poller, err := client.BeginPurge(ctx,
		"apimService3",
		"westus",
		&DeletedServicesBeginPurgeOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DeletedServiceContract.ID == nil {
		t.Fatal("DeletedServiceContract.ID should not be nil!")
	}
}

func TestApiManagementOperations_List(t *testing.T) {
	// From example ApiManagementListOperations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIManagementOperationsClient(con)
	pager := client.List(&APIManagementOperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestApiManagementServiceSkus_ListAvailableServiceSkus(t *testing.T) {
	// From example ApiManagementListSKUs-Consumption
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIManagementServiceSKUsClient(con,
		"subid")
	pager := client.ListAvailableServiceSKUs("rg1",
		"apimService1",
		&APIManagementServiceSKUsListAvailableServiceSKUsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}

	// From example ApiManagementListSKUs-Dedicated
	pager = client.ListAvailableServiceSKUs("rg1",
		"apimService1",
		&APIManagementServiceSKUsListAvailableServiceSKUsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestApiManagementService_Restore(t *testing.T) {
	// From example ApiManagementRestoreService
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIManagementServiceClient(con,
		"subid")
	poller, err := client.BeginRestore(ctx,
		"rg1",
		"apimService1",
		APIManagementServiceBackupRestoreParameters{
			AccessKey:      to.StringPtr("**************************************************"),
			AccessType:     AccessTypeAccessKey.ToPtr(),
			BackupName:     to.StringPtr("apimService1backup_2017_03_19"),
			ContainerName:  to.StringPtr("backupContainer"),
			StorageAccount: to.StringPtr("teststorageaccount"),
		},
		&APIManagementServiceBeginRestoreOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIManagementServiceResource.ID == nil {
		t.Fatal("APIManagementServiceResource.ID should not be nil!")
	}
}

func TestApiManagementService_Backup(t *testing.T) {
	// From example ApiManagementBackupWithAccessKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIManagementServiceClient(con,
		"subid")
	poller, err := client.BeginBackup(ctx,
		"rg1",
		"apimService1",
		APIManagementServiceBackupRestoreParameters{
			AccessKey:      to.StringPtr("**************************************************"),
			AccessType:     AccessTypeAccessKey.ToPtr(),
			BackupName:     to.StringPtr("apimService1backup_2017_03_19"),
			ContainerName:  to.StringPtr("backupContainer"),
			StorageAccount: to.StringPtr("teststorageaccount"),
		},
		&APIManagementServiceBeginBackupOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIManagementServiceResource.ID == nil {
		t.Fatal("APIManagementServiceResource.ID should not be nil!")
	}

	// From example ApiManagementBackupWithSystemManagedIdentity
	poller, err = client.BeginBackup(ctx,
		"rg1",
		"apimService1",
		APIManagementServiceBackupRestoreParameters{
			AccessType:     AccessTypeSystemAssignedManagedIdentity.ToPtr(),
			BackupName:     to.StringPtr("backup5"),
			ContainerName:  to.StringPtr("apim-backups"),
			StorageAccount: to.StringPtr("contosorpstorage"),
		},
		&APIManagementServiceBeginBackupOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIManagementServiceResource.ID == nil {
		t.Fatal("APIManagementServiceResource.ID should not be nil!")
	}

	// From example ApiManagementBackupWithUserAssignedManagedIdentity
	poller, err = client.BeginBackup(ctx,
		"rg1",
		"apimService1",
		APIManagementServiceBackupRestoreParameters{
			AccessType:     AccessTypeUserAssignedManagedIdentity.ToPtr(),
			BackupName:     to.StringPtr("backup5"),
			ClientID:       to.StringPtr("XXXXX-a154-4830-XXXX-46a12da1a1e2"),
			ContainerName:  to.StringPtr("apim-backups"),
			StorageAccount: to.StringPtr("contosorpstorage"),
		},
		&APIManagementServiceBeginBackupOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIManagementServiceResource.ID == nil {
		t.Fatal("APIManagementServiceResource.ID should not be nil!")
	}
}

func TestApiManagementService_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateMultiRegionServiceWithCustomHostname
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIManagementServiceClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		APIManagementServiceResource{
			ApimResource: ApimResource{
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
					"tag2": to.StringPtr("value2"),
					"tag3": to.StringPtr("value3"),
				},
			},
			Location: to.StringPtr("West US"),
			Properties: &APIManagementServiceProperties{
				APIManagementServiceBaseProperties: APIManagementServiceBaseProperties{
					AdditionalLocations: []*AdditionalLocation{
						{
							DisableGateway: to.BoolPtr(true),
							Location:       to.StringPtr("East US"),
							SKU: &APIManagementServiceSKUProperties{
								Name:     SKUTypePremium.ToPtr(),
								Capacity: to.Int32Ptr(1),
							},
						}},
					APIVersionConstraint: &APIVersionConstraint{
						MinAPIVersion: to.StringPtr("2019-01-01"),
					},
					HostnameConfigurations: []*HostnameConfiguration{
						{
							Type:                HostnameTypeProxy.ToPtr(),
							CertificatePassword: to.StringPtr("Password"),
							DefaultSSLBinding:   to.BoolPtr(true),
							EncodedCertificate:  to.StringPtr("****** Base 64 Encoded Certificate ************"),
							HostName:            to.StringPtr("gateway1.msitesting.net"),
						},
						{
							Type:                HostnameTypeManagement.ToPtr(),
							CertificatePassword: to.StringPtr("Password"),
							EncodedCertificate:  to.StringPtr("****** Base 64 Encoded Certificate ************"),
							HostName:            to.StringPtr("mgmt.msitesting.net"),
						},
						{
							Type:                HostnameTypePortal.ToPtr(),
							CertificatePassword: to.StringPtr("Password"),
							EncodedCertificate:  to.StringPtr("****** Base 64 Encoded Certificate ************"),
							HostName:            to.StringPtr("portal1.msitesting.net"),
						}},
					VirtualNetworkType: VirtualNetworkTypeNone.ToPtr(),
				},
				PublisherEmail: to.StringPtr("apim@autorestsdk.com"),
				PublisherName:  to.StringPtr("autorestsdk"),
			},
			SKU: &APIManagementServiceSKUProperties{
				Name:     SKUTypePremium.ToPtr(),
				Capacity: to.Int32Ptr(1),
			},
		},
		&APIManagementServiceBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIManagementServiceResource.ID == nil {
		t.Fatal("APIManagementServiceResource.ID should not be nil!")
	}

	// From example ApiManagementCreateService
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		APIManagementServiceResource{
			ApimResource: ApimResource{
				Tags: map[string]*string{
					"Name": to.StringPtr("Contoso"),
					"Test": to.StringPtr("User"),
				},
			},
			Location: to.StringPtr("South Central US"),
			Properties: &APIManagementServiceProperties{
				PublisherEmail: to.StringPtr("foo@contoso.com"),
				PublisherName:  to.StringPtr("foo"),
			},
			SKU: &APIManagementServiceSKUProperties{
				Name:     SKUTypeDeveloper.ToPtr(),
				Capacity: to.Int32Ptr(1),
			},
		},
		&APIManagementServiceBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIManagementServiceResource.ID == nil {
		t.Fatal("APIManagementServiceResource.ID should not be nil!")
	}

	// From example ApiManagementCreateServiceHavingMsi
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		APIManagementServiceResource{
			ApimResource: ApimResource{
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
					"tag2": to.StringPtr("value2"),
					"tag3": to.StringPtr("value3"),
				},
			},
			Identity: &APIManagementServiceIdentity{
				Type: ApimIdentityTypeSystemAssigned.ToPtr(),
			},
			Location: to.StringPtr("West US"),
			Properties: &APIManagementServiceProperties{
				PublisherEmail: to.StringPtr("apim@autorestsdk.com"),
				PublisherName:  to.StringPtr("autorestsdk"),
			},
			SKU: &APIManagementServiceSKUProperties{
				Name:     SKUTypeConsumption.ToPtr(),
				Capacity: to.Int32Ptr(0),
			},
		},
		&APIManagementServiceBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIManagementServiceResource.ID == nil {
		t.Fatal("APIManagementServiceResource.ID should not be nil!")
	}

	// From example ApiManagementCreateServiceInVnetWithPublicIP
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		APIManagementServiceResource{
			ApimResource: ApimResource{
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
					"tag2": to.StringPtr("value2"),
					"tag3": to.StringPtr("value3"),
				},
			},
			Location: to.StringPtr("East US 2 EUAP"),
			Properties: &APIManagementServiceProperties{
				APIManagementServiceBaseProperties: APIManagementServiceBaseProperties{
					PublicIPAddressID: to.StringPtr("/subscriptions/subid/resourceGroups/rgName/providers/Microsoft.Network/publicIPAddresses/apimazvnet"),
					VirtualNetworkConfiguration: &VirtualNetworkConfiguration{
						SubnetResourceID: to.StringPtr("/subscriptions/subid/resourceGroups/rgName/providers/Microsoft.Network/virtualNetworks/apimcus/subnets/tenant"),
					},
					VirtualNetworkType: VirtualNetworkTypeExternal.ToPtr(),
				},
				PublisherEmail: to.StringPtr("apim@autorestsdk.com"),
				PublisherName:  to.StringPtr("autorestsdk"),
			},
			SKU: &APIManagementServiceSKUProperties{
				Name:     SKUTypePremium.ToPtr(),
				Capacity: to.Int32Ptr(2),
			},
			Zones: []*string{
				to.StringPtr("1"),
				to.StringPtr("2")},
		},
		&APIManagementServiceBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIManagementServiceResource.ID == nil {
		t.Fatal("APIManagementServiceResource.ID should not be nil!")
	}

	// From example ApiManagementCreateServiceInZones
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		APIManagementServiceResource{
			ApimResource: ApimResource{
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
					"tag2": to.StringPtr("value2"),
					"tag3": to.StringPtr("value3"),
				},
			},
			Location: to.StringPtr("North europe"),
			Properties: &APIManagementServiceProperties{
				PublisherEmail: to.StringPtr("apim@autorestsdk.com"),
				PublisherName:  to.StringPtr("autorestsdk"),
			},
			SKU: &APIManagementServiceSKUProperties{
				Name:     SKUTypePremium.ToPtr(),
				Capacity: to.Int32Ptr(2),
			},
			Zones: []*string{
				to.StringPtr("1"),
				to.StringPtr("2")},
		},
		&APIManagementServiceBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIManagementServiceResource.ID == nil {
		t.Fatal("APIManagementServiceResource.ID should not be nil!")
	}

	// From example ApiManagementCreateServiceWithCustomHostnameKeyVault
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		APIManagementServiceResource{
			ApimResource: ApimResource{
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
					"tag2": to.StringPtr("value2"),
					"tag3": to.StringPtr("value3"),
				},
			},
			Identity: &APIManagementServiceIdentity{
				Type: ApimIdentityTypeUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*UserIdentityProperties{
					"/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": &UserIdentityProperties{},
				},
			},
			Location: to.StringPtr("North Europe"),
			Properties: &APIManagementServiceProperties{
				APIManagementServiceBaseProperties: APIManagementServiceBaseProperties{
					APIVersionConstraint: &APIVersionConstraint{
						MinAPIVersion: to.StringPtr("2019-01-01"),
					},
					HostnameConfigurations: []*HostnameConfiguration{
						{
							Type:              HostnameTypeProxy.ToPtr(),
							DefaultSSLBinding: to.BoolPtr(true),
							HostName:          to.StringPtr("gateway1.msitesting.net"),
							IdentityClientID:  to.StringPtr("329419bc-adec-4dce-9568-25a6d486e468"),
							KeyVaultID:        to.StringPtr("https://rpbvtkeyvaultintegration.vault.azure.net/secrets/msitestingCert"),
						},
						{
							Type:             HostnameTypeManagement.ToPtr(),
							HostName:         to.StringPtr("mgmt.msitesting.net"),
							IdentityClientID: to.StringPtr("329419bc-adec-4dce-9568-25a6d486e468"),
							KeyVaultID:       to.StringPtr("https://rpbvtkeyvaultintegration.vault.azure.net/secrets/msitestingCert"),
						},
						{
							Type:             HostnameTypePortal.ToPtr(),
							HostName:         to.StringPtr("portal1.msitesting.net"),
							IdentityClientID: to.StringPtr("329419bc-adec-4dce-9568-25a6d486e468"),
							KeyVaultID:       to.StringPtr("https://rpbvtkeyvaultintegration.vault.azure.net/secrets/msitestingCert"),
						}},
					VirtualNetworkType: VirtualNetworkTypeNone.ToPtr(),
				},
				PublisherEmail: to.StringPtr("apim@autorestsdk.com"),
				PublisherName:  to.StringPtr("autorestsdk"),
			},
			SKU: &APIManagementServiceSKUProperties{
				Name:     SKUTypePremium.ToPtr(),
				Capacity: to.Int32Ptr(1),
			},
		},
		&APIManagementServiceBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIManagementServiceResource.ID == nil {
		t.Fatal("APIManagementServiceResource.ID should not be nil!")
	}

	// From example ApiManagementCreateServiceWithSystemCertificates
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		APIManagementServiceResource{
			ApimResource: ApimResource{
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
					"tag2": to.StringPtr("value2"),
					"tag3": to.StringPtr("value3"),
				},
			},
			Location: to.StringPtr("Central US"),
			Properties: &APIManagementServiceProperties{
				APIManagementServiceBaseProperties: APIManagementServiceBaseProperties{
					Certificates: []*CertificateConfiguration{
						{
							CertificatePassword: to.StringPtr("Password"),
							EncodedCertificate:  to.StringPtr("*******Base64 encoded Certificate******************"),
							StoreName:           CertificateConfigurationStoreNameCertificateAuthority.ToPtr(),
						}},
				},
				PublisherEmail: to.StringPtr("apim@autorestsdk.com"),
				PublisherName:  to.StringPtr("autorestsdk"),
			},
			SKU: &APIManagementServiceSKUProperties{
				Name:     SKUTypeBasic.ToPtr(),
				Capacity: to.Int32Ptr(1),
			},
		},
		&APIManagementServiceBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIManagementServiceResource.ID == nil {
		t.Fatal("APIManagementServiceResource.ID should not be nil!")
	}

	// From example ApiManagementCreateServiceWithUserAssignedIdentity
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		APIManagementServiceResource{
			ApimResource: ApimResource{
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
					"tag2": to.StringPtr("value2"),
					"tag3": to.StringPtr("value3"),
				},
			},
			Identity: &APIManagementServiceIdentity{
				Type: ApimIdentityTypeUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*UserIdentityProperties{
					"/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/apimService1": &UserIdentityProperties{},
				},
			},
			Location: to.StringPtr("West US"),
			Properties: &APIManagementServiceProperties{
				PublisherEmail: to.StringPtr("apim@autorestsdk.com"),
				PublisherName:  to.StringPtr("autorestsdk"),
			},
			SKU: &APIManagementServiceSKUProperties{
				Name:     SKUTypeConsumption.ToPtr(),
				Capacity: to.Int32Ptr(0),
			},
		},
		&APIManagementServiceBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIManagementServiceResource.ID == nil {
		t.Fatal("APIManagementServiceResource.ID should not be nil!")
	}

	// From example ApiManagementUndelete
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		APIManagementServiceResource{
			Location: to.StringPtr("South Central US"),
			Properties: &APIManagementServiceProperties{
				APIManagementServiceBaseProperties: APIManagementServiceBaseProperties{
					Restore: to.BoolPtr(true),
				},
				PublisherEmail: to.StringPtr("foo@contoso.com"),
				PublisherName:  to.StringPtr("foo"),
			},
			SKU: &APIManagementServiceSKUProperties{
				Name:     SKUTypeDeveloper.ToPtr(),
				Capacity: to.Int32Ptr(1),
			},
		},
		&APIManagementServiceBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIManagementServiceResource.ID == nil {
		t.Fatal("APIManagementServiceResource.ID should not be nil!")
	}
}

func TestApiManagementService_Update(t *testing.T) {
	// From example ApiManagementUpdateServiceDisableTls10
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIManagementServiceClient(con,
		"subid")
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"apimService1",
		APIManagementServiceUpdateParameters{
			Properties: &APIManagementServiceUpdateProperties{
				APIManagementServiceBaseProperties: APIManagementServiceBaseProperties{
					CustomProperties: map[string]*string{
						"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10": to.StringPtr("false"),
					},
				},
			},
		},
		&APIManagementServiceBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIManagementServiceResource.ID == nil {
		t.Fatal("APIManagementServiceResource.ID should not be nil!")
	}

	// From example ApiManagementUpdateServicePublisherDetails
	poller, err = client.BeginUpdate(ctx,
		"rg1",
		"apimService1",
		APIManagementServiceUpdateParameters{
			Properties: &APIManagementServiceUpdateProperties{
				PublisherEmail: to.StringPtr("foobar@live.com"),
				PublisherName:  to.StringPtr("Contoso Vnext"),
			},
		},
		&APIManagementServiceBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIManagementServiceResource.ID == nil {
		t.Fatal("APIManagementServiceResource.ID should not be nil!")
	}

	// From example ApiManagementUpdateServiceToNewVnetAndAvailabilityZones
	poller, err = client.BeginUpdate(ctx,
		"rg1",
		"apimService1",
		APIManagementServiceUpdateParameters{
			Properties: &APIManagementServiceUpdateProperties{
				APIManagementServiceBaseProperties: APIManagementServiceBaseProperties{
					PublicIPAddressID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/apimService1ip"),
					VirtualNetworkConfiguration: &VirtualNetworkConfiguration{
						SubnetResourceID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/apimService1v2/subnets/default"),
					},
					VirtualNetworkType: VirtualNetworkTypeExternal.ToPtr(),
				},
			},
			SKU: &APIManagementServiceSKUProperties{
				Name:     SKUTypePremium.ToPtr(),
				Capacity: to.Int32Ptr(2),
			},
			Zones: []*string{
				to.StringPtr("1"),
				to.StringPtr("2")},
		},
		&APIManagementServiceBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIManagementServiceResource.ID == nil {
		t.Fatal("APIManagementServiceResource.ID should not be nil!")
	}
}

func TestApiManagementService_Get(t *testing.T) {
	// From example ApiManagementServiceGetMultiRegionInternalVnet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIManagementServiceClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		&APIManagementServiceGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.APIManagementServiceResource.ID == nil {
		t.Fatal("APIManagementServiceResource.ID should not be nil!")
	}

	// From example ApiManagementServiceGetService
	res, err = client.Get(ctx,
		"rg1",
		"apimService1",
		&APIManagementServiceGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.APIManagementServiceResource.ID == nil {
		t.Fatal("APIManagementServiceResource.ID should not be nil!")
	}

	// From example ApiManagementServiceGetServiceHavingMsi
	res, err = client.Get(ctx,
		"rg1",
		"apimService1",
		&APIManagementServiceGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.APIManagementServiceResource.ID == nil {
		t.Fatal("APIManagementServiceResource.ID should not be nil!")
	}
}

func TestApiManagementService_Delete(t *testing.T) {
	// From example ApiManagementServiceDeleteService
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIManagementServiceClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"apimService1",
		&APIManagementServiceBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIManagementServiceResource.ID == nil {
		t.Fatal("APIManagementServiceResource.ID should not be nil!")
	}
}

func TestApiManagementService_ListByResourceGroup(t *testing.T) {
	// From example ApiManagementListServiceBySubscriptionAndResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIManagementServiceClient(con,
		"subid")
	pager := client.ListByResourceGroup("rg1",
		&APIManagementServiceListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("APIManagementServiceResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("APIManagementServiceResource.ID should not be nil!")
			}
		}
	}
}

func TestApiManagementService_List(t *testing.T) {
	// From example ApiManagementListServiceBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIManagementServiceClient(con,
		"subid")
	pager := client.List(&APIManagementServiceListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("APIManagementServiceResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("APIManagementServiceResource.ID should not be nil!")
			}
		}
	}
}

func TestApiManagementService_GetSsoToken(t *testing.T) {
	// From example ApiManagementServiceGetSsoToken
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIManagementServiceClient(con,
		"subid")
	_, err := client.GetSsoToken(ctx,
		"rg1",
		"apimService1",
		&APIManagementServiceGetSsoTokenOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiManagementService_CheckNameAvailability(t *testing.T) {
	// From example ApiManagementServiceCheckNameAvailability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIManagementServiceClient(con,
		"subid")
	_, err := client.CheckNameAvailability(ctx,
		APIManagementServiceCheckNameAvailabilityParameters{
			Name: to.StringPtr("apimService1"),
		},
		&APIManagementServiceCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiManagementService_GetDomainOwnershipIdentifier(t *testing.T) {
	// From example ApiManagementServiceGetDomainOwnershipIdentifier
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIManagementServiceClient(con,
		"subid")
	_, err := client.GetDomainOwnershipIdentifier(ctx,
		&APIManagementServiceGetDomainOwnershipIdentifierOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApiManagementService_ApplyNetworkConfigurationUpdates(t *testing.T) {
	// From example ApiManagementApplyNetworkConfigurationUpdates
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIManagementServiceClient(con,
		"subid")
	poller, err := client.BeginApplyNetworkConfigurationUpdates(ctx,
		"rg1",
		"apimService1",
		&APIManagementServiceBeginApplyNetworkConfigurationUpdatesOptions{Parameters: &APIManagementServiceApplyNetworkConfigurationParameters{
			Location: to.StringPtr("west us"),
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.APIManagementServiceResource.ID == nil {
		t.Fatal("APIManagementServiceResource.ID should not be nil!")
	}
}

func TestDiagnostic_ListByService(t *testing.T) {
	// From example ApiManagementListDiagnostics
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&DiagnosticListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DiagnosticContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DiagnosticContract.ID should not be nil!")
			}
		}
	}
}

func TestDiagnostic_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadDiagnostic
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"applicationinsights",
		&DiagnosticGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDiagnostic_Get(t *testing.T) {
	// From example ApiManagementGetDiagnostic
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"applicationinsights",
		&DiagnosticGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticContract.ID == nil {
		t.Fatal("DiagnosticContract.ID should not be nil!")
	}
}

func TestDiagnostic_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateDiagnostic
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"applicationinsights",
		DiagnosticContract{
			Properties: &DiagnosticContractProperties{
				AlwaysLog: AlwaysLogAllErrors.ToPtr(),
				Backend: &PipelineDiagnosticSettings{
					Response: &HTTPMessageDiagnostic{
						Body: &BodyDiagnosticSettings{
							Bytes: to.Int32Ptr(512),
						},
						Headers: []*string{
							to.StringPtr("Content-type")},
					},
					Request: &HTTPMessageDiagnostic{
						Body: &BodyDiagnosticSettings{
							Bytes: to.Int32Ptr(512),
						},
						Headers: []*string{
							to.StringPtr("Content-type")},
					},
				},
				Frontend: &PipelineDiagnosticSettings{
					Response: &HTTPMessageDiagnostic{
						Body: &BodyDiagnosticSettings{
							Bytes: to.Int32Ptr(512),
						},
						Headers: []*string{
							to.StringPtr("Content-type")},
					},
					Request: &HTTPMessageDiagnostic{
						Body: &BodyDiagnosticSettings{
							Bytes: to.Int32Ptr(512),
						},
						Headers: []*string{
							to.StringPtr("Content-type")},
					},
				},
				LoggerID: to.StringPtr("/loggers/azuremonitor"),
				Sampling: &SamplingSettings{
					Percentage:   to.Float64Ptr(50),
					SamplingType: SamplingTypeFixed.ToPtr(),
				},
			},
		},
		&DiagnosticCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticContract.ID == nil {
		t.Fatal("DiagnosticContract.ID should not be nil!")
	}
}

func TestDiagnostic_Update(t *testing.T) {
	// From example ApiManagementUpdateDiagnostic
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"applicationinsights",
		"*",
		DiagnosticContract{
			Properties: &DiagnosticContractProperties{
				AlwaysLog: AlwaysLogAllErrors.ToPtr(),
				Backend: &PipelineDiagnosticSettings{
					Response: &HTTPMessageDiagnostic{
						Body: &BodyDiagnosticSettings{
							Bytes: to.Int32Ptr(512),
						},
						Headers: []*string{
							to.StringPtr("Content-type")},
					},
					Request: &HTTPMessageDiagnostic{
						Body: &BodyDiagnosticSettings{
							Bytes: to.Int32Ptr(512),
						},
						Headers: []*string{
							to.StringPtr("Content-type")},
					},
				},
				Frontend: &PipelineDiagnosticSettings{
					Response: &HTTPMessageDiagnostic{
						Body: &BodyDiagnosticSettings{
							Bytes: to.Int32Ptr(512),
						},
						Headers: []*string{
							to.StringPtr("Content-type")},
					},
					Request: &HTTPMessageDiagnostic{
						Body: &BodyDiagnosticSettings{
							Bytes: to.Int32Ptr(512),
						},
						Headers: []*string{
							to.StringPtr("Content-type")},
					},
				},
				LoggerID: to.StringPtr("/loggers/applicationinsights"),
				Sampling: &SamplingSettings{
					Percentage:   to.Float64Ptr(50),
					SamplingType: SamplingTypeFixed.ToPtr(),
				},
			},
		},
		&DiagnosticUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticContract.ID == nil {
		t.Fatal("DiagnosticContract.ID should not be nil!")
	}
}

func TestDiagnostic_Delete(t *testing.T) {
	// From example ApiManagementDeleteDiagnostic
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"applicationinsights",
		"*",
		&DiagnosticDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestEmailTemplate_ListByService(t *testing.T) {
	// From example ApiManagementListTemplates
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEmailTemplateClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&EmailTemplateListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EmailTemplateContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EmailTemplateContract.ID should not be nil!")
			}
		}
	}
}

func TestEmailTemplate_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadEmailTemplate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEmailTemplateClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		TemplateNameNewIssueNotificationMessage,
		&EmailTemplateGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestEmailTemplate_Get(t *testing.T) {
	// From example ApiManagementGetTemplate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEmailTemplateClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		TemplateNameNewIssueNotificationMessage,
		&EmailTemplateGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EmailTemplateContract.ID == nil {
		t.Fatal("EmailTemplateContract.ID should not be nil!")
	}
}

func TestEmailTemplate_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateTemplate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEmailTemplateClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		TemplateNameNewIssueNotificationMessage,
		EmailTemplateUpdateParameters{
			Properties: &EmailTemplateUpdateParameterProperties{
				Subject: to.StringPtr("Your request for $IssueName was successfully received."),
			},
		},
		&EmailTemplateCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EmailTemplateContract.ID == nil {
		t.Fatal("EmailTemplateContract.ID should not be nil!")
	}
}

func TestEmailTemplate_Update(t *testing.T) {
	// From example ApiManagementUpdateTemplate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEmailTemplateClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		TemplateNameNewIssueNotificationMessage,
		"*",
		EmailTemplateUpdateParameters{
			Properties: &EmailTemplateUpdateParameterProperties{
				Body:    to.StringPtr("<!DOCTYPE html >\r\n<html>\r\n  <head />\r\n  <body>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Dear $DevFirstName $DevLastName,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n          We are happy to let you know that your request to publish the $AppName application in the gallery has been approved. Your application has been published and can be viewed <a href=\"http://$DevPortalUrl/Applications/Details/$AppId\">here</a>.\r\n        </p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Best,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">The $OrganizationName API Team</p>\r\n  </body>\r\n</html>"),
				Subject: to.StringPtr("Your request $IssueName was received"),
			},
		},
		&EmailTemplateUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EmailTemplateContract.ID == nil {
		t.Fatal("EmailTemplateContract.ID should not be nil!")
	}
}

func TestEmailTemplate_Delete(t *testing.T) {
	// From example ApiManagementDeleteTemplate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEmailTemplateClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		TemplateNameNewIssueNotificationMessage,
		"*",
		&EmailTemplateDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGateway_ListByService(t *testing.T) {
	// From example ApiManagementListGateways
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&GatewayListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("GatewayContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("GatewayContract.ID should not be nil!")
			}
		}
	}
}

func TestGateway_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadGateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"mygateway",
		&GatewayGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGateway_Get(t *testing.T) {
	// From example ApiManagementGetGateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"gw1",
		&GatewayGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GatewayContract.ID == nil {
		t.Fatal("GatewayContract.ID should not be nil!")
	}
}

func TestGateway_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateGateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"gw1",
		GatewayContract{
			Properties: &GatewayContractProperties{
				Description: to.StringPtr("my gateway 1"),
				LocationData: &ResourceLocationDataContract{
					Name: to.StringPtr("my location"),
				},
			},
		},
		&GatewayCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GatewayContract.ID == nil {
		t.Fatal("GatewayContract.ID should not be nil!")
	}
}

func TestGateway_Update(t *testing.T) {
	// From example ApiManagementUpdateGateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"*",
		GatewayContract{
			Properties: &GatewayContractProperties{
				Description: to.StringPtr("my gateway 1"),
				LocationData: &ResourceLocationDataContract{
					Name: to.StringPtr("my location"),
				},
			},
		},
		&GatewayUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GatewayContract.ID == nil {
		t.Fatal("GatewayContract.ID should not be nil!")
	}
}

func TestGateway_Delete(t *testing.T) {
	// From example ApiManagementDeleteGateway
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"*",
		&GatewayDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGateway_ListKeys(t *testing.T) {
	// From example ApiManagementGatewayListKeys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayClient(con,
		"subid")
	_, err := client.ListKeys(ctx,
		"rg1",
		"apimService1",
		"gw1",
		&GatewayListKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGateway_RegenerateKey(t *testing.T) {
	// From example ApiManagementGatewayRegenerateKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayClient(con,
		"subid")
	_, err := client.RegenerateKey(ctx,
		"rg1",
		"apimService1",
		"gwId",
		GatewayKeyRegenerationRequestContract{
			KeyType: KeyTypePrimary.ToPtr(),
		},
		&GatewayRegenerateKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGateway_GenerateToken(t *testing.T) {
	// From example ApiManagementGatewayGenerateToken
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayClient(con,
		"subid")
	_, err := client.GenerateToken(ctx,
		"rg1",
		"apimService1",
		"gw1",
		GatewayTokenRequestContract{
			Expiry:  to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-21T00:44:24.2845269Z"); return t }()),
			KeyType: KeyTypePrimary.ToPtr(),
		},
		&GatewayGenerateTokenOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGatewayHostnameConfiguration_ListByService(t *testing.T) {
	// From example ApiManagementListGatewayHostnameConfigurations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayHostnameConfigurationClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		"gw1",
		&GatewayHostnameConfigurationListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("GatewayHostnameConfigurationContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("GatewayHostnameConfigurationContract.ID should not be nil!")
			}
		}
	}
}

func TestGatewayHostnameConfiguration_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadGatewayHostnameConfiguration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayHostnameConfigurationClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"default",
		&GatewayHostnameConfigurationGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGatewayHostnameConfiguration_Get(t *testing.T) {
	// From example ApiManagementGetGatewayHostnameConfiguration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayHostnameConfigurationClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"default",
		&GatewayHostnameConfigurationGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GatewayHostnameConfigurationContract.ID == nil {
		t.Fatal("GatewayHostnameConfigurationContract.ID should not be nil!")
	}
}

func TestGatewayHostnameConfiguration_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateGatewayHostnameConfiguration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayHostnameConfigurationClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"default",
		GatewayHostnameConfigurationContract{
			Properties: &GatewayHostnameConfigurationContractProperties{
				CertificateID:              to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/cert1"),
				Hostname:                   to.StringPtr("*"),
				HTTP2Enabled:               to.BoolPtr(true),
				NegotiateClientCertificate: to.BoolPtr(false),
				Tls10Enabled:               to.BoolPtr(false),
				Tls11Enabled:               to.BoolPtr(false),
			},
		},
		&GatewayHostnameConfigurationCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GatewayHostnameConfigurationContract.ID == nil {
		t.Fatal("GatewayHostnameConfigurationContract.ID should not be nil!")
	}
}

func TestGatewayHostnameConfiguration_Delete(t *testing.T) {
	// From example ApiManagementDeleteGatewayHostnameConfiguration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayHostnameConfigurationClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"default",
		"*",
		&GatewayHostnameConfigurationDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGatewayApi_ListByService(t *testing.T) {
	// From example ApiManagementListGatewayApis
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayAPIClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		"gw1",
		&GatewayAPIListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("APIContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("APIContract.ID should not be nil!")
			}
		}
	}
}

func TestGatewayApi_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadGatewayApi
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayAPIClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"api1",
		&GatewayAPIGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGatewayApi_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateGatewayApi
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayAPIClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"echo-api",
		&GatewayAPICreateOrUpdateOptions{Parameters: &AssociationContract{
			Properties: &AssociationContractProperties{
				ProvisioningState: to.StringPtr("created"),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.APIContract.ID == nil {
		t.Fatal("APIContract.ID should not be nil!")
	}
}

func TestGatewayApi_Delete(t *testing.T) {
	// From example ApiManagementDeleteGatewayApi
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayAPIClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"echo-api",
		&GatewayAPIDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGatewayCertificateAuthority_ListByService(t *testing.T) {
	// From example ApiManagementListGatewaycertificateAuthorities
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayCertificateAuthorityClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		"gw1",
		&GatewayCertificateAuthorityListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("GatewayCertificateAuthorityContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("GatewayCertificateAuthorityContract.ID should not be nil!")
			}
		}
	}
}

func TestGatewayCertificateAuthority_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadGatewayCertificateAuthority
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayCertificateAuthorityClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"cert1",
		&GatewayCertificateAuthorityGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGatewayCertificateAuthority_Get(t *testing.T) {
	// From example ApiManagementGetGatewayCertificateAuthority
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayCertificateAuthorityClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"cert1",
		&GatewayCertificateAuthorityGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GatewayCertificateAuthorityContract.ID == nil {
		t.Fatal("GatewayCertificateAuthorityContract.ID should not be nil!")
	}
}

func TestGatewayCertificateAuthority_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateGatewayCertificateAuthority
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayCertificateAuthorityClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"cert1",
		GatewayCertificateAuthorityContract{
			Properties: &GatewayCertificateAuthorityContractProperties{
				IsTrusted: to.BoolPtr(false),
			},
		},
		&GatewayCertificateAuthorityCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GatewayCertificateAuthorityContract.ID == nil {
		t.Fatal("GatewayCertificateAuthorityContract.ID should not be nil!")
	}
}

func TestGatewayCertificateAuthority_Delete(t *testing.T) {
	// From example ApiManagementDeleteGatewayCertificateAuthority
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewayCertificateAuthorityClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"default",
		"*",
		&GatewayCertificateAuthorityDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGroup_ListByService(t *testing.T) {
	// From example ApiManagementListGroups
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGroupClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&GroupListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("GroupContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("GroupContract.ID should not be nil!")
			}
		}
	}
}

func TestGroup_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGroupClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"59306a29e4bbd510dc24e5f9",
		&GroupGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGroup_Get(t *testing.T) {
	// From example ApiManagementGetGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGroupClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"59306a29e4bbd510dc24e5f9",
		&GroupGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GroupContract.ID == nil {
		t.Fatal("GroupContract.ID should not be nil!")
	}
}

func TestGroup_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGroupClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"tempgroup",
		GroupCreateParameters{
			Properties: &GroupCreateParametersProperties{
				DisplayName: to.StringPtr("temp group"),
			},
		},
		&GroupCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GroupContract.ID == nil {
		t.Fatal("GroupContract.ID should not be nil!")
	}

	// From example ApiManagementCreateGroupExternal
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"aadGroup",
		GroupCreateParameters{
			Properties: &GroupCreateParametersProperties{
				Type:        GroupTypeExternal.ToPtr(),
				Description: to.StringPtr("new group to test"),
				DisplayName: to.StringPtr("NewGroup (samiraad.onmicrosoft.com)"),
				ExternalID:  to.StringPtr("aad://samiraad.onmicrosoft.com/groups/83cf2753-5831-4675-bc0e-2f8dc067c58d"),
			},
		},
		&GroupCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GroupContract.ID == nil {
		t.Fatal("GroupContract.ID should not be nil!")
	}
}

func TestGroup_Update(t *testing.T) {
	// From example ApiManagementUpdateGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGroupClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"tempgroup",
		"*",
		GroupUpdateParameters{
			Properties: &GroupUpdateParametersProperties{
				DisplayName: to.StringPtr("temp group"),
			},
		},
		&GroupUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GroupContract.ID == nil {
		t.Fatal("GroupContract.ID should not be nil!")
	}
}

func TestGroup_Delete(t *testing.T) {
	// From example ApiManagementDeleteGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGroupClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"aadGroup",
		"*",
		&GroupDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGroupUser_List(t *testing.T) {
	// From example ApiManagementListGroupUsers
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGroupUserClient(con,
		"subid")
	pager := client.List("rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		&GroupUserListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UserContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UserContract.ID should not be nil!")
			}
		}
	}
}

func TestGroupUser_CheckEntityExists(t *testing.T) {
	// From example ApiManagementHeadGroupUser
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGroupUserClient(con,
		"subid")
	_, err := client.CheckEntityExists(ctx,
		"rg1",
		"apimService1",
		"59306a29e4bbd510dc24e5f9",
		"5931a75ae4bbd512a88c680b",
		&GroupUserCheckEntityExistsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGroupUser_Create(t *testing.T) {
	// From example ApiManagementCreateGroupUser
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGroupUserClient(con,
		"subid")
	res, err := client.Create(ctx,
		"rg1",
		"apimService1",
		"tempgroup",
		"59307d350af58404d8a26300",
		&GroupUserCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.UserContract.ID == nil {
		t.Fatal("UserContract.ID should not be nil!")
	}
}

func TestGroupUser_Delete(t *testing.T) {
	// From example ApiManagementDeleteGroupUser
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGroupUserClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"templategroup",
		"59307d350af58404d8a26300",
		&GroupUserDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIdentityProvider_ListByService(t *testing.T) {
	// From example ApiManagementListIdentityProviders
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIdentityProviderClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&IdentityProviderListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IdentityProviderContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IdentityProviderContract.ID should not be nil!")
			}
		}
	}
}

func TestIdentityProvider_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadIdentityProvider
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIdentityProviderClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		IdentityProviderTypeAADB2C,
		&IdentityProviderGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIdentityProvider_Get(t *testing.T) {
	// From example ApiManagementGetIdentityProvider
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIdentityProviderClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		IdentityProviderTypeAADB2C,
		&IdentityProviderGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IdentityProviderContract.ID == nil {
		t.Fatal("IdentityProviderContract.ID should not be nil!")
	}
}

func TestIdentityProvider_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateIdentityProvider
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIdentityProviderClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		IdentityProviderTypeFacebook,
		IdentityProviderCreateContract{
			Properties: &IdentityProviderCreateContractProperties{
				ClientID:     to.StringPtr("facebookid"),
				ClientSecret: to.StringPtr("facebookapplicationsecret"),
			},
		},
		&IdentityProviderCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IdentityProviderContract.ID == nil {
		t.Fatal("IdentityProviderContract.ID should not be nil!")
	}
}

func TestIdentityProvider_Update(t *testing.T) {
	// From example ApiManagementUpdateIdentityProvider
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIdentityProviderClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		IdentityProviderTypeFacebook,
		"*",
		IdentityProviderUpdateParameters{
			Properties: &IdentityProviderUpdateProperties{
				ClientID:     to.StringPtr("updatedfacebookid"),
				ClientSecret: to.StringPtr("updatedfacebooksecret"),
			},
		},
		&IdentityProviderUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IdentityProviderContract.ID == nil {
		t.Fatal("IdentityProviderContract.ID should not be nil!")
	}
}

func TestIdentityProvider_Delete(t *testing.T) {
	// From example ApiManagementDeleteIdentityProvider
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIdentityProviderClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		IdentityProviderTypeAAD,
		"*",
		&IdentityProviderDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIdentityProvider_ListSecrets(t *testing.T) {
	// From example ApiManagementIdentityProviderListSecrets
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIdentityProviderClient(con,
		"subid")
	_, err := client.ListSecrets(ctx,
		"rg1",
		"apimService1",
		IdentityProviderTypeAADB2C,
		&IdentityProviderListSecretsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIssue_ListByService(t *testing.T) {
	// From example ApiManagementListIssues
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIssueClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&IssueListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IssueContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IssueContract.ID should not be nil!")
			}
		}
	}
}

func TestIssue_Get(t *testing.T) {
	// From example ApiManagementGetIssue
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIssueClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"57d2ef278aa04f0ad01d6cdc",
		&IssueGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IssueContract.ID == nil {
		t.Fatal("IssueContract.ID should not be nil!")
	}
}

func TestLogger_ListByService(t *testing.T) {
	// From example ApiManagementListLoggers
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoggerClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&LoggerListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LoggerContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LoggerContract.ID should not be nil!")
			}
		}
	}
}

func TestLogger_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadLogger
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoggerClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"templateLogger",
		&LoggerGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestLogger_Get(t *testing.T) {
	// From example ApiManagementGetLogger
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoggerClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"templateLogger",
		&LoggerGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LoggerContract.ID == nil {
		t.Fatal("LoggerContract.ID should not be nil!")
	}
}

func TestLogger_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateAILogger
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoggerClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"loggerId",
		LoggerContract{
			Properties: &LoggerContractProperties{
				Description: to.StringPtr("adding a new logger"),
				Credentials: map[string]*string{
					"instrumentationKey": to.StringPtr("11................a1"),
				},
				LoggerType: LoggerTypeApplicationInsights.ToPtr(),
			},
		},
		&LoggerCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LoggerContract.ID == nil {
		t.Fatal("LoggerContract.ID should not be nil!")
	}

	// From example ApiManagementCreateEHLogger
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"eh1",
		LoggerContract{
			Properties: &LoggerContractProperties{
				Description: to.StringPtr("adding a new logger"),
				Credentials: map[string]*string{
					"name":             to.StringPtr("hydraeventhub"),
					"connectionString": to.StringPtr("Endpoint=sb://hydraeventhub-ns.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=********="),
				},
				LoggerType: LoggerTypeAzureEventHub.ToPtr(),
			},
		},
		&LoggerCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LoggerContract.ID == nil {
		t.Fatal("LoggerContract.ID should not be nil!")
	}
}

func TestLogger_Update(t *testing.T) {
	// From example ApiManagementUpdateLogger
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoggerClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"eh1",
		"*",
		LoggerUpdateContract{
			Properties: &LoggerUpdateParameters{
				Description: to.StringPtr("updating description"),
				LoggerType:  LoggerTypeAzureEventHub.ToPtr(),
			},
		},
		&LoggerUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LoggerContract.ID == nil {
		t.Fatal("LoggerContract.ID should not be nil!")
	}
}

func TestLogger_Delete(t *testing.T) {
	// From example ApiManagementDeleteLogger
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLoggerClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"loggerId",
		"*",
		&LoggerDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNamedValue_ListByService(t *testing.T) {
	// From example ApiManagementListNamedValues
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamedValueClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&NamedValueListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NamedValueContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NamedValueContract.ID should not be nil!")
			}
		}
	}
}

func TestNamedValue_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadNamedValue
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamedValueClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"testarmTemplateproperties2",
		&NamedValueGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNamedValue_Get(t *testing.T) {
	// From example ApiManagementGetNamedValue
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamedValueClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"testarmTemplateproperties2",
		&NamedValueGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NamedValueContract.ID == nil {
		t.Fatal("NamedValueContract.ID should not be nil!")
	}

	// From example ApiManagementGetNamedValueWithKeyVault
	res, err = client.Get(ctx,
		"rg1",
		"apimService1",
		"testprop6",
		&NamedValueGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NamedValueContract.ID == nil {
		t.Fatal("NamedValueContract.ID should not be nil!")
	}
}

func TestNamedValue_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateNamedValue
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamedValueClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"testprop2",
		NamedValueCreateContract{
			Properties: &NamedValueCreateContractProperties{
				NamedValueEntityBaseParameters: NamedValueEntityBaseParameters{
					Secret: to.BoolPtr(false),
					Tags: []*string{
						to.StringPtr("foo"),
						to.StringPtr("bar")},
				},
				DisplayName: to.StringPtr("prop3name"),
				Value:       to.StringPtr("propValue"),
			},
		},
		&NamedValueBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.NamedValueContract.ID == nil {
		t.Fatal("NamedValueContract.ID should not be nil!")
	}

	// From example ApiManagementCreateNamedValueWithKeyVault
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"testprop6",
		NamedValueCreateContract{
			Properties: &NamedValueCreateContractProperties{
				NamedValueEntityBaseParameters: NamedValueEntityBaseParameters{
					Secret: to.BoolPtr(true),
					Tags: []*string{
						to.StringPtr("foo"),
						to.StringPtr("bar")},
				},
				DisplayName: to.StringPtr("prop6namekv"),
				KeyVault: &KeyVaultContractCreateProperties{
					IdentityClientID: to.StringPtr("ceaa6b06-c00f-43ef-99ac-f53d1fe876a0"),
					SecretIdentifier: to.StringPtr("https://contoso.vault.azure.net/secrets/aadSecret"),
				},
			},
		},
		&NamedValueBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.NamedValueContract.ID == nil {
		t.Fatal("NamedValueContract.ID should not be nil!")
	}
}

func TestNamedValue_Update(t *testing.T) {
	// From example ApiManagementUpdateNamedValue
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamedValueClient(con,
		"subid")
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"apimService1",
		"testprop2",
		"*",
		NamedValueUpdateParameters{
			Properties: &NamedValueUpdateParameterProperties{
				NamedValueEntityBaseParameters: NamedValueEntityBaseParameters{
					Secret: to.BoolPtr(false),
					Tags: []*string{
						to.StringPtr("foo"),
						to.StringPtr("bar2")},
				},
				DisplayName: to.StringPtr("prop3name"),
				Value:       to.StringPtr("propValue"),
			},
		},
		&NamedValueBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.NamedValueContract.ID == nil {
		t.Fatal("NamedValueContract.ID should not be nil!")
	}
}

func TestNamedValue_Delete(t *testing.T) {
	// From example ApiManagementDeleteNamedValue
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamedValueClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"testprop2",
		"*",
		&NamedValueDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNamedValue_ListValue(t *testing.T) {
	// From example ApiManagementNamedValueListValue
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamedValueClient(con,
		"subid")
	_, err := client.ListValue(ctx,
		"rg1",
		"apimService1",
		"testarmTemplateproperties2",
		&NamedValueListValueOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNamedValue_RefreshSecret(t *testing.T) {
	// From example ApiManagementRefreshNamedValue
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamedValueClient(con,
		"subid")
	poller, err := client.BeginRefreshSecret(ctx,
		"rg1",
		"apimService1",
		"testprop2",
		&NamedValueBeginRefreshSecretOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.NamedValueContract.ID == nil {
		t.Fatal("NamedValueContract.ID should not be nil!")
	}
}

func TestNetworkStatus_ListByService(t *testing.T) {
	// From example ApiManagementServiceGetNetworkStatus
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkStatusClient(con,
		"subid")
	_, err := client.ListByService(ctx,
		"rg1",
		"apimService1",
		&NetworkStatusListByServiceOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNetworkStatus_ListByLocation(t *testing.T) {
	// From example ApiManagementServiceGetNetworkStatusByLocation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNetworkStatusClient(con,
		"subid")
	_, err := client.ListByLocation(ctx,
		"rg1",
		"apimService1",
		"North Central US",
		&NetworkStatusListByLocationOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNotification_ListByService(t *testing.T) {
	// From example ApiManagementListNotifications
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&NotificationListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NotificationContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NotificationContract.ID should not be nil!")
			}
		}
	}
}

func TestNotification_Get(t *testing.T) {
	// From example ApiManagementGetNotification
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		NotificationNameRequestPublisherNotificationMessage,
		&NotificationGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NotificationContract.ID == nil {
		t.Fatal("NotificationContract.ID should not be nil!")
	}
}

func TestNotification_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateNotification
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		NotificationNameRequestPublisherNotificationMessage,
		&NotificationCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NotificationContract.ID == nil {
		t.Fatal("NotificationContract.ID should not be nil!")
	}
}

func TestNotificationRecipientUser_ListByNotification(t *testing.T) {
	// From example ApiManagementListNotificationRecipientUsers
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationRecipientUserClient(con,
		"subid")
	_, err := client.ListByNotification(ctx,
		"rg1",
		"apimService1",
		NotificationNameRequestPublisherNotificationMessage,
		&NotificationRecipientUserListByNotificationOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNotificationRecipientUser_CheckEntityExists(t *testing.T) {
	// From example ApiManagementHeadNotificationRecipientUser
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationRecipientUserClient(con,
		"subid")
	_, err := client.CheckEntityExists(ctx,
		"rg1",
		"apimService1",
		NotificationNameRequestPublisherNotificationMessage,
		"576823d0a40f7e74ec07d642",
		&NotificationRecipientUserCheckEntityExistsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNotificationRecipientUser_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateNotificationRecipientUser
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationRecipientUserClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		NotificationNameRequestPublisherNotificationMessage,
		"576823d0a40f7e74ec07d642",
		&NotificationRecipientUserCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecipientUserContract.ID == nil {
		t.Fatal("RecipientUserContract.ID should not be nil!")
	}
}

func TestNotificationRecipientUser_Delete(t *testing.T) {
	// From example ApiManagementDeleteNotificationRecipientUser
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationRecipientUserClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		NotificationNameRequestPublisherNotificationMessage,
		"576823d0a40f7e74ec07d642",
		&NotificationRecipientUserDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNotificationRecipientEmail_ListByNotification(t *testing.T) {
	// From example ApiManagementListNotificationRecipientEmails
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationRecipientEmailClient(con,
		"subid")
	_, err := client.ListByNotification(ctx,
		"rg1",
		"apimService1",
		NotificationNameRequestPublisherNotificationMessage,
		&NotificationRecipientEmailListByNotificationOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNotificationRecipientEmail_CheckEntityExists(t *testing.T) {
	// From example ApiManagementHeadNotificationRecipientEmail
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationRecipientEmailClient(con,
		"subid")
	_, err := client.CheckEntityExists(ctx,
		"rg1",
		"apimService1",
		NotificationNameRequestPublisherNotificationMessage,
		"contoso@live.com",
		&NotificationRecipientEmailCheckEntityExistsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNotificationRecipientEmail_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateNotificationRecipientEmail
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationRecipientEmailClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		NotificationNameRequestPublisherNotificationMessage,
		"foobar@live.com",
		&NotificationRecipientEmailCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecipientEmailContract.ID == nil {
		t.Fatal("RecipientEmailContract.ID should not be nil!")
	}
}

func TestNotificationRecipientEmail_Delete(t *testing.T) {
	// From example ApiManagementDeleteNotificationRecipientEmail
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationRecipientEmailClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		NotificationNameRequestPublisherNotificationMessage,
		"contoso@live.com",
		&NotificationRecipientEmailDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOpenIdConnectProvider_ListByService(t *testing.T) {
	// From example ApiManagementListOpenIdConnectProviders
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOpenIDConnectProviderClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&OpenIDConnectProviderListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("OpenidConnectProviderContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("OpenidConnectProviderContract.ID should not be nil!")
			}
		}
	}
}

func TestOpenIdConnectProvider_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadOpenIdConnectProvider
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOpenIDConnectProviderClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"templateOpenIdConnect2",
		&OpenIDConnectProviderGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOpenIdConnectProvider_Get(t *testing.T) {
	// From example ApiManagementGetOpenIdConnectProvider
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOpenIDConnectProviderClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"templateOpenIdConnect2",
		&OpenIDConnectProviderGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.OpenidConnectProviderContract.ID == nil {
		t.Fatal("OpenidConnectProviderContract.ID should not be nil!")
	}
}

func TestOpenIdConnectProvider_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateOpenIdConnectProvider
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOpenIDConnectProviderClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"templateOpenIdConnect3",
		OpenidConnectProviderContract{
			Properties: &OpenidConnectProviderContractProperties{
				ClientID:         to.StringPtr("oidprovidertemplate3"),
				ClientSecret:     to.StringPtr("x"),
				DisplayName:      to.StringPtr("templateoidprovider3"),
				MetadataEndpoint: to.StringPtr("https://oidprovider-template3.net"),
			},
		},
		&OpenIDConnectProviderCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.OpenidConnectProviderContract.ID == nil {
		t.Fatal("OpenidConnectProviderContract.ID should not be nil!")
	}
}

func TestOpenIdConnectProvider_Update(t *testing.T) {
	// From example ApiManagementUpdateOpenIdConnectProvider
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOpenIDConnectProviderClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"templateOpenIdConnect2",
		"*",
		OpenidConnectProviderUpdateContract{
			Properties: &OpenidConnectProviderUpdateContractProperties{
				ClientSecret: to.StringPtr("updatedsecret"),
			},
		},
		&OpenIDConnectProviderUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.OpenidConnectProviderContract.ID == nil {
		t.Fatal("OpenidConnectProviderContract.ID should not be nil!")
	}
}

func TestOpenIdConnectProvider_Delete(t *testing.T) {
	// From example ApiManagementDeleteOpenIdConnectProvider
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOpenIDConnectProviderClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"templateOpenIdConnect3",
		"*",
		&OpenIDConnectProviderDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOpenIdConnectProvider_ListSecrets(t *testing.T) {
	// From example ApiManagementOpenidConnectProviderListSecrets
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOpenIDConnectProviderClient(con,
		"subid")
	_, err := client.ListSecrets(ctx,
		"rg1",
		"apimService1",
		"templateOpenIdConnect2",
		&OpenIDConnectProviderListSecretsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOutboundNetworkDependenciesEndpoints_ListByService(t *testing.T) {
	// From example ApiManagementServiceGetOutboundNetworkDependenciesEndpoints
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOutboundNetworkDependenciesEndpointsClient(con,
		"subid")
	_, err := client.ListByService(ctx,
		"rg1",
		"apimService1",
		&OutboundNetworkDependenciesEndpointsListByServiceOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPolicy_ListByService(t *testing.T) {
	// From example ApiManagementListPolicies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPolicyClient(con,
		"subid")
	_, err := client.ListByService(ctx,
		"rg1",
		"apimService1",
		&PolicyListByServiceOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPolicy_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPolicyClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		PolicyIDNamePolicy,
		&PolicyGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPolicy_Get(t *testing.T) {
	// From example ApiManagementGetPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPolicyClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		PolicyIDNamePolicy,
		&PolicyGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PolicyContract.ID == nil {
		t.Fatal("PolicyContract.ID should not be nil!")
	}

	// From example ApiManagementGetPolicyFormat
	res, err = client.Get(ctx,
		"rg1",
		"apimService1",
		PolicyIDNamePolicy,
		&PolicyGetOptions{Format: PolicyExportFormatRawxml.ToPtr()})
	if err != nil {
		t.Fatal(err)
	}
	if res.PolicyContract.ID == nil {
		t.Fatal("PolicyContract.ID should not be nil!")
	}
}

func TestPolicy_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreatePolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPolicyClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		PolicyIDNamePolicy,
		PolicyContract{
			Properties: &PolicyContractProperties{
				Format: PolicyContentFormatXML.ToPtr(),
				Value:  to.StringPtr("<policies>\r\n  <inbound />\r\n  <backend>\r\n    <forward-request />\r\n  </backend>\r\n  <outbound />\r\n</policies>"),
			},
		},
		&PolicyCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PolicyContract.ID == nil {
		t.Fatal("PolicyContract.ID should not be nil!")
	}
}

func TestPolicy_Delete(t *testing.T) {
	// From example ApiManagementDeletePolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPolicyClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		PolicyIDNamePolicy,
		"*",
		&PolicyDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPolicyDescription_ListByService(t *testing.T) {
	// From example ApiManagementListPolicyDescriptions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPolicyDescriptionClient(con,
		"subid")
	_, err := client.ListByService(ctx,
		"rg1",
		"apimService1",
		&PolicyDescriptionListByServiceOptions{Scope: PolicyScopeContractAPI.ToPtr()})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPortalRevision_ListByService(t *testing.T) {
	// From example ApiManagementListPortalRevisions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPortalRevisionClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&PortalRevisionListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PortalRevisionContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PortalRevisionContract.ID should not be nil!")
			}
		}
	}
}

func TestPortalRevision_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadPortalRevision
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPortalRevisionClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"20201112101010",
		&PortalRevisionGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPortalRevision_Get(t *testing.T) {
	// From example ApiManagementGetPortalRevision
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPortalRevisionClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"20201112101010",
		&PortalRevisionGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PortalRevisionContract.ID == nil {
		t.Fatal("PortalRevisionContract.ID should not be nil!")
	}
}

func TestPortalRevision_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreatePortalRevision
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPortalRevisionClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"20201112101010",
		PortalRevisionContract{
			Properties: &PortalRevisionContractProperties{
				Description: to.StringPtr("portal revision 1"),
				IsCurrent:   to.BoolPtr(true),
			},
		},
		&PortalRevisionBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PortalRevisionContract.ID == nil {
		t.Fatal("PortalRevisionContract.ID should not be nil!")
	}
}

func TestPortalRevision_Update(t *testing.T) {
	// From example ApiManagementUpdatePortalRevision
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPortalRevisionClient(con,
		"subid")
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"apimService1",
		"20201112101010",
		"*",
		PortalRevisionContract{
			Properties: &PortalRevisionContractProperties{
				Description: to.StringPtr("portal revision update"),
				IsCurrent:   to.BoolPtr(true),
			},
		},
		&PortalRevisionBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PortalRevisionContract.ID == nil {
		t.Fatal("PortalRevisionContract.ID should not be nil!")
	}
}

func TestPortalSettings_ListByService(t *testing.T) {
	// From example ApiManagementListPortalSettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPortalSettingsClient(con,
		"subid")
	_, err := client.ListByService(ctx,
		"rg1",
		"apimService1",
		&PortalSettingsListByServiceOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSignInSettings_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadSignInSettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignInSettingsClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		&SignInSettingsGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSignInSettings_Get(t *testing.T) {
	// From example ApiManagementPortalSettingsGetSignIn
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignInSettingsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		&SignInSettingsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PortalSigninSettings.ID == nil {
		t.Fatal("PortalSigninSettings.ID should not be nil!")
	}
}

func TestSignInSettings_Update(t *testing.T) {
	// From example ApiManagementPortalSettingsUpdateSignIn
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignInSettingsClient(con,
		"subid")
	_, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"*",
		PortalSigninSettings{
			Properties: &PortalSigninSettingProperties{
				Enabled: to.BoolPtr(true),
			},
		},
		&SignInSettingsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSignInSettings_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementPortalSettingsUpdateSignIn
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignInSettingsClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		PortalSigninSettings{
			Properties: &PortalSigninSettingProperties{
				Enabled: to.BoolPtr(true),
			},
		},
		&SignInSettingsCreateOrUpdateOptions{IfMatch: to.StringPtr("*")})
	if err != nil {
		t.Fatal(err)
	}
	if res.PortalSigninSettings.ID == nil {
		t.Fatal("PortalSigninSettings.ID should not be nil!")
	}
}

func TestSignUpSettings_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadSignUpSettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignUpSettingsClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		&SignUpSettingsGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSignUpSettings_Get(t *testing.T) {
	// From example ApiManagementPortalSettingsGetSignUp
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignUpSettingsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		&SignUpSettingsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PortalSignupSettings.ID == nil {
		t.Fatal("PortalSignupSettings.ID should not be nil!")
	}
}

func TestSignUpSettings_Update(t *testing.T) {
	// From example ApiManagementPortalSettingsUpdateSignUp
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignUpSettingsClient(con,
		"subid")
	_, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"*",
		PortalSignupSettings{
			Properties: &PortalSignupSettingsProperties{
				Enabled: to.BoolPtr(true),
				TermsOfService: &TermsOfServiceProperties{
					ConsentRequired: to.BoolPtr(true),
					Enabled:         to.BoolPtr(true),
					Text:            to.StringPtr("Terms of service text."),
				},
			},
		},
		&SignUpSettingsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSignUpSettings_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementPortalSettingsUpdateSignUp
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignUpSettingsClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		PortalSignupSettings{
			Properties: &PortalSignupSettingsProperties{
				Enabled: to.BoolPtr(true),
				TermsOfService: &TermsOfServiceProperties{
					ConsentRequired: to.BoolPtr(true),
					Enabled:         to.BoolPtr(true),
					Text:            to.StringPtr("Terms of service text."),
				},
			},
		},
		&SignUpSettingsCreateOrUpdateOptions{IfMatch: to.StringPtr("*")})
	if err != nil {
		t.Fatal(err)
	}
	if res.PortalSignupSettings.ID == nil {
		t.Fatal("PortalSignupSettings.ID should not be nil!")
	}
}

func TestDelegationSettings_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadDelegationSettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDelegationSettingsClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		&DelegationSettingsGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDelegationSettings_Get(t *testing.T) {
	// From example ApiManagementPortalSettingsGetDelegation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDelegationSettingsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		&DelegationSettingsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PortalDelegationSettings.ID == nil {
		t.Fatal("PortalDelegationSettings.ID should not be nil!")
	}
}

func TestDelegationSettings_Update(t *testing.T) {
	// From example ApiManagementPortalSettingsUpdateDelegation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDelegationSettingsClient(con,
		"subid")
	_, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"*",
		PortalDelegationSettings{
			Properties: &PortalDelegationSettingsProperties{
				Subscriptions: &SubscriptionsDelegationSettingsProperties{
					Enabled: to.BoolPtr(true),
				},
				URL: to.StringPtr("http://contoso.com/delegation"),
				UserRegistration: &RegistrationDelegationSettingsProperties{
					Enabled: to.BoolPtr(true),
				},
				ValidationKey: to.StringPtr("<validationKey>"),
			},
		},
		&DelegationSettingsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDelegationSettings_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementPortalSettingsUpdateDelegation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDelegationSettingsClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		PortalDelegationSettings{
			Properties: &PortalDelegationSettingsProperties{
				Subscriptions: &SubscriptionsDelegationSettingsProperties{
					Enabled: to.BoolPtr(true),
				},
				URL: to.StringPtr("http://contoso.com/delegation"),
				UserRegistration: &RegistrationDelegationSettingsProperties{
					Enabled: to.BoolPtr(true),
				},
				ValidationKey: to.StringPtr("<validationKey>"),
			},
		},
		&DelegationSettingsCreateOrUpdateOptions{IfMatch: to.StringPtr("*")})
	if err != nil {
		t.Fatal(err)
	}
	if res.PortalDelegationSettings.ID == nil {
		t.Fatal("PortalDelegationSettings.ID should not be nil!")
	}
}

func TestDelegationSettings_ListSecrets(t *testing.T) {
	// From example ApiManagementListSecretsPortalSettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDelegationSettingsClient(con,
		"subid")
	_, err := client.ListSecrets(ctx,
		"rg1",
		"apimService1",
		&DelegationSettingsListSecretsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnection_ListByService(t *testing.T) {
	// From example ApiManagementListPrivateEndpointConnections
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionClient(con,
		"subid")
	_, err := client.ListByService(ctx,
		"rg1",
		"apimService1",
		&PrivateEndpointConnectionListByServiceOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnection_GetByName(t *testing.T) {
	// From example ApiManagementGetPrivateEndpointConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionClient(con,
		"subid")
	res, err := client.GetByName(ctx,
		"rg1",
		"apimService1",
		"privateEndpointConnectionName",
		&PrivateEndpointConnectionGetByNameOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnection_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementApproveOrRejectPrivateEndpointConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"privateEndpointConnectionName",
		PrivateEndpointConnectionRequest{
			ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/privateEndpointConnections/connectionName"),
			Properties: &PrivateEndpointConnectionRequestProperties{
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionState{
					Description: to.StringPtr("The Private Endpoint Connection is approved."),
					Status:      PrivateEndpointServiceConnectionStatusApproved.ToPtr(),
				},
			},
		},
		&PrivateEndpointConnectionBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnection_Delete(t *testing.T) {
	// From example ApiManagementDeletePrivateEndpointConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"apimService1",
		"privateEndpointConnectionName",
		&PrivateEndpointConnectionBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnection_ListPrivateLinkResources(t *testing.T) {
	// From example ApiManagementListPrivateLinkGroupResources
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionClient(con,
		"subid")
	_, err := client.ListPrivateLinkResources(ctx,
		"rg1",
		"apimService1",
		&PrivateEndpointConnectionListPrivateLinkResourcesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnection_GetPrivateLinkResource(t *testing.T) {
	// From example ApiManagementGetPrivateLinkGroupResource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionClient(con,
		"subid")
	res, err := client.GetPrivateLinkResource(ctx,
		"rg1",
		"apimService1",
		"privateLinkSubResourceName",
		&PrivateEndpointConnectionGetPrivateLinkResourceOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkResource.ID == nil {
		t.Fatal("PrivateLinkResource.ID should not be nil!")
	}
}

func TestProduct_ListByService(t *testing.T) {
	// From example ApiManagementListProducts
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&ProductListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ProductContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ProductContract.ID should not be nil!")
			}
		}
	}
}

func TestProduct_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadProduct
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"unlimited",
		&ProductGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestProduct_Get(t *testing.T) {
	// From example ApiManagementGetProduct
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"unlimited",
		&ProductGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ProductContract.ID == nil {
		t.Fatal("ProductContract.ID should not be nil!")
	}
}

func TestProduct_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateProduct
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"testproduct",
		ProductContract{
			Properties: &ProductContractProperties{
				DisplayName: to.StringPtr("Test Template ProductName 4"),
			},
		},
		&ProductCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ProductContract.ID == nil {
		t.Fatal("ProductContract.ID should not be nil!")
	}
}

func TestProduct_Update(t *testing.T) {
	// From example ApiManagementUpdateProduct
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"testproduct",
		"*",
		ProductUpdateParameters{
			Properties: &ProductUpdateProperties{
				DisplayName: to.StringPtr("Test Template ProductName 4"),
			},
		},
		&ProductUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ProductContract.ID == nil {
		t.Fatal("ProductContract.ID should not be nil!")
	}
}

func TestProduct_Delete(t *testing.T) {
	// From example ApiManagementDeleteProduct
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"testproduct",
		"*",
		&ProductDeleteOptions{DeleteSubscriptions: to.BoolPtr(true)})
	if err != nil {
		t.Fatal(err)
	}
}

func TestProduct_ListByTags(t *testing.T) {
	// From example ApiManagementListProductsByTags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductClient(con,
		"subid")
	pager := client.ListByTags("rg1",
		"apimService1",
		&ProductListByTagsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestProductApi_ListByProduct(t *testing.T) {
	// From example ApiManagementListProductApis
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductAPIClient(con,
		"subid")
	pager := client.ListByProduct("rg1",
		"apimService1",
		"5768181ea40f7eb6c49f6ac7",
		&ProductAPIListByProductOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("APIContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("APIContract.ID should not be nil!")
			}
		}
	}
}

func TestProductApi_CheckEntityExists(t *testing.T) {
	// From example ApiManagementHeadProductApi
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductAPIClient(con,
		"subid")
	_, err := client.CheckEntityExists(ctx,
		"rg1",
		"apimService1",
		"5931a75ae4bbd512a88c680b",
		"59306a29e4bbd510dc24e5f9",
		&ProductAPICheckEntityExistsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestProductApi_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateProductApi
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductAPIClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"testproduct",
		"echo-api",
		&ProductAPICreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.APIContract.ID == nil {
		t.Fatal("APIContract.ID should not be nil!")
	}
}

func TestProductApi_Delete(t *testing.T) {
	// From example ApiManagementDeleteProductApi
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductAPIClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"testproduct",
		"echo-api",
		&ProductAPIDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestProductGroup_ListByProduct(t *testing.T) {
	// From example ApiManagementListProductGroups
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductGroupClient(con,
		"subid")
	pager := client.ListByProduct("rg1",
		"apimService1",
		"5600b57e7e8880006a060002",
		&ProductGroupListByProductOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("GroupContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("GroupContract.ID should not be nil!")
			}
		}
	}
}

func TestProductGroup_CheckEntityExists(t *testing.T) {
	// From example ApiManagementHeadProductGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductGroupClient(con,
		"subid")
	_, err := client.CheckEntityExists(ctx,
		"rg1",
		"apimService1",
		"5931a75ae4bbd512a88c680b",
		"59306a29e4bbd510dc24e5f9",
		&ProductGroupCheckEntityExistsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestProductGroup_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateProductGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductGroupClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"testproduct",
		"templateGroup",
		&ProductGroupCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GroupContract.ID == nil {
		t.Fatal("GroupContract.ID should not be nil!")
	}
}

func TestProductGroup_Delete(t *testing.T) {
	// From example ApiManagementDeleteProductGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductGroupClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"testproduct",
		"templateGroup",
		&ProductGroupDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestProductSubscriptions_List(t *testing.T) {
	// From example ApiManagementListProductSubscriptions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductSubscriptionsClient(con,
		"subid")
	pager := client.List("rg1",
		"apimService1",
		"5600b57e7e8880006a060002",
		&ProductSubscriptionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SubscriptionContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SubscriptionContract.ID should not be nil!")
			}
		}
	}
}

func TestProductPolicy_ListByProduct(t *testing.T) {
	// From example ApiManagementListProductPolicies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductPolicyClient(con,
		"subid")
	_, err := client.ListByProduct(ctx,
		"rg1",
		"apimService1",
		"armTemplateProduct4",
		&ProductPolicyListByProductOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestProductPolicy_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadProductPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductPolicyClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"unlimited",
		PolicyIDNamePolicy,
		&ProductPolicyGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestProductPolicy_Get(t *testing.T) {
	// From example ApiManagementGetProductPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductPolicyClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"kjoshiarmTemplateProduct4",
		PolicyIDNamePolicy,
		&ProductPolicyGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PolicyContract.ID == nil {
		t.Fatal("PolicyContract.ID should not be nil!")
	}
}

func TestProductPolicy_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateProductPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductPolicyClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"5702e97e5157a50f48dce801",
		PolicyIDNamePolicy,
		PolicyContract{
			Properties: &PolicyContractProperties{
				Format: PolicyContentFormatXML.ToPtr(),
				Value:  to.StringPtr("<policies>\r\n  <inbound>\r\n    <rate-limit calls=\"{{call-count}}\" renewal-period=\"15\"></rate-limit>\r\n    <log-to-eventhub logger-id=\"16\">\r\n                      @( string.Join(\",\", DateTime.UtcNow, context.Deployment.ServiceName, context.RequestId, context.Request.IpAddress, context.Operation.Name) ) \r\n                  </log-to-eventhub>\r\n    <quota-by-key calls=\"40\" counter-key=\"cc\" renewal-period=\"3600\" increment-count=\"@(context.Request.Method == &quot;POST&quot; ? 1:2)\" />\r\n    <base />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n</policies>"),
			},
		},
		&ProductPolicyCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PolicyContract.ID == nil {
		t.Fatal("PolicyContract.ID should not be nil!")
	}
}

func TestProductPolicy_Delete(t *testing.T) {
	// From example ApiManagementDeleteProductPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductPolicyClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"testproduct",
		PolicyIDNamePolicy,
		"*",
		&ProductPolicyDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestQuotaByCounterKeys_ListByService(t *testing.T) {
	// From example ApiManagementGetQuotaCounterKeys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQuotaByCounterKeysClient(con,
		"subid")
	_, err := client.ListByService(ctx,
		"rg1",
		"apimService1",
		"ba",
		&QuotaByCounterKeysListByServiceOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestQuotaByCounterKeys_Update(t *testing.T) {
	// From example ApiManagementUpdateQuotaCounterKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQuotaByCounterKeysClient(con,
		"subid")
	_, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"ba",
		QuotaCounterValueUpdateContract{
			Properties: &QuotaCounterValueContractProperties{
				CallsCount:    to.Int32Ptr(0),
				KbTransferred: to.Float64Ptr(2.5630078125),
			},
		},
		&QuotaByCounterKeysUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestQuotaByPeriodKeys_Get(t *testing.T) {
	// From example ApiManagementGetQuotaCounterKeysByQuotaPeriod
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQuotaByPeriodKeysClient(con,
		"subid")
	_, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"ba",
		"0_P3Y6M4DT12H30M5S",
		&QuotaByPeriodKeysGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestQuotaByPeriodKeys_Update(t *testing.T) {
	// From example ApiManagementUpdateQuotaCounterKeyByQuotaPeriod
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQuotaByPeriodKeysClient(con,
		"subid")
	_, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"ba",
		"0_P3Y6M4DT12H30M5S",
		QuotaCounterValueUpdateContract{
			Properties: &QuotaCounterValueContractProperties{
				CallsCount:    to.Int32Ptr(0),
				KbTransferred: to.Float64Ptr(0),
			},
		},
		&QuotaByPeriodKeysUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRegion_ListByService(t *testing.T) {
	// From example ApiManagementListRegions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegionClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&RegionListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestReports_ListByApi(t *testing.T) {
	// From example ApiManagementGetReportsByApi
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReportsClient(con,
		"subid")
	pager := client.ListByAPI("rg1",
		"apimService1",
		"timestamp ge datetime'2017-06-01T00:00:00' and timestamp le datetime'2017-06-04T00:00:00'",
		&ReportsListByAPIOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestReports_ListByUser(t *testing.T) {
	// From example ApiManagementGetReportsByUser
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReportsClient(con,
		"subid")
	pager := client.ListByUser("rg1",
		"apimService1",
		"timestamp ge datetime'2017-06-01T00:00:00' and timestamp le datetime'2017-06-04T00:00:00'",
		&ReportsListByUserOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestReports_ListByOperation(t *testing.T) {
	// From example ApiManagementGetReportsByOperation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReportsClient(con,
		"subid")
	pager := client.ListByOperation("rg1",
		"apimService1",
		"timestamp ge datetime'2017-06-01T00:00:00' and timestamp le datetime'2017-06-04T00:00:00'",
		&ReportsListByOperationOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestReports_ListByProduct(t *testing.T) {
	// From example ApiManagementGetReportsByProduct
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReportsClient(con,
		"subid")
	pager := client.ListByProduct("rg1",
		"apimService1",
		"timestamp ge datetime'2017-06-01T00:00:00' and timestamp le datetime'2017-06-04T00:00:00'",
		&ReportsListByProductOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestReports_ListByGeo(t *testing.T) {
	// From example ApiManagementGetReportsByGeo
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReportsClient(con,
		"subid")
	pager := client.ListByGeo("rg1",
		"apimService1",
		"timestamp ge datetime'2017-06-01T00:00:00' and timestamp le datetime'2017-06-04T00:00:00'",
		&ReportsListByGeoOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestReports_ListBySubscription(t *testing.T) {
	// From example ApiManagementGetReportsBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReportsClient(con,
		"subid")
	pager := client.ListBySubscription("rg1",
		"apimService1",
		"timestamp ge datetime'2017-06-01T00:00:00' and timestamp le datetime'2017-06-04T00:00:00'",
		&ReportsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestReports_ListByTime(t *testing.T) {
	// From example ApiManagementGetReportsByTime
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReportsClient(con,
		"subid")
	pager := client.ListByTime("rg1",
		"apimService1",
		"timestamp ge datetime'2017-06-01T00:00:00' and timestamp le datetime'2017-06-04T00:00:00'",
		"PT15M",
		&ReportsListByTimeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestReports_ListByRequest(t *testing.T) {
	// From example ApiManagementGetReportsByRequest
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReportsClient(con,
		"subid")
	_, err := client.ListByRequest(ctx,
		"rg1",
		"apimService1",
		"timestamp ge datetime'2017-06-01T00:00:00' and timestamp le datetime'2017-06-04T00:00:00'",
		&ReportsListByRequestOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTenantSettings_ListByService(t *testing.T) {
	// From example ApiManagementListTenantSettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTenantSettingsClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&TenantSettingsListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("TenantSettingsContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("TenantSettingsContract.ID should not be nil!")
			}
		}
	}
}

func TestTenantSettings_Get(t *testing.T) {
	// From example ApiManagementGetTenantSettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTenantSettingsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		SettingsTypeNamePublic,
		&TenantSettingsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TenantSettingsContract.ID == nil {
		t.Fatal("TenantSettingsContract.ID should not be nil!")
	}
}

func TestApiManagementSkus_List(t *testing.T) {
	// From example Lists all available Resource SKUs
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIManagementSKUsClient(con,
		"subid")
	pager := client.List(&APIManagementSKUsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestSubscription_List(t *testing.T) {
	// From example ApiManagementListSubscriptions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSubscriptionClient(con,
		"subid")
	pager := client.List("rg1",
		"apimService1",
		&SubscriptionListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SubscriptionContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SubscriptionContract.ID should not be nil!")
			}
		}
	}
}

func TestSubscription_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadSubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSubscriptionClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"5931a769d8d14f0ad8ce13b8",
		&SubscriptionGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSubscription_Get(t *testing.T) {
	// From example ApiManagementGetSubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSubscriptionClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"5931a769d8d14f0ad8ce13b8",
		&SubscriptionGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SubscriptionContract.ID == nil {
		t.Fatal("SubscriptionContract.ID should not be nil!")
	}
}

func TestSubscription_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateSubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSubscriptionClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"testsub",
		SubscriptionCreateParameters{
			Properties: &SubscriptionCreateParameterProperties{
				DisplayName: to.StringPtr("testsub"),
				OwnerID:     to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/57127d485157a511ace86ae7"),
				Scope:       to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/5600b59475ff190048060002"),
			},
		},
		&SubscriptionCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SubscriptionContract.ID == nil {
		t.Fatal("SubscriptionContract.ID should not be nil!")
	}
}

func TestSubscription_Update(t *testing.T) {
	// From example ApiManagementUpdateSubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSubscriptionClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"testsub",
		"*",
		SubscriptionUpdateParameters{
			Properties: &SubscriptionUpdateParameterProperties{
				DisplayName: to.StringPtr("testsub"),
			},
		},
		&SubscriptionUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SubscriptionContract.ID == nil {
		t.Fatal("SubscriptionContract.ID should not be nil!")
	}
}

func TestSubscription_Delete(t *testing.T) {
	// From example ApiManagementDeleteSubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSubscriptionClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"testsub",
		"*",
		&SubscriptionDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSubscription_RegeneratePrimaryKey(t *testing.T) {
	// From example ApiManagementSubscriptionRegeneratePrimaryKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSubscriptionClient(con,
		"subid")
	_, err := client.RegeneratePrimaryKey(ctx,
		"rg1",
		"apimService1",
		"testsub",
		&SubscriptionRegeneratePrimaryKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSubscription_RegenerateSecondaryKey(t *testing.T) {
	// From example ApiManagementSubscriptionRegenerateSecondaryKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSubscriptionClient(con,
		"subid")
	_, err := client.RegenerateSecondaryKey(ctx,
		"rg1",
		"apimService1",
		"testsub",
		&SubscriptionRegenerateSecondaryKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSubscription_ListSecrets(t *testing.T) {
	// From example ApiManagementSubscriptionListSecrets
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSubscriptionClient(con,
		"subid")
	_, err := client.ListSecrets(ctx,
		"rg1",
		"apimService1",
		"5931a769d8d14f0ad8ce13b8",
		&SubscriptionListSecretsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTagResource_ListByService(t *testing.T) {
	// From example ApiManagementListTagResources
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagResourceClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&TagResourceListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestTenantAccess_ListByService(t *testing.T) {
	// From example ApiManagementListTenantAccess
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTenantAccessClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&TenantAccessListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AccessInformationContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AccessInformationContract.ID should not be nil!")
			}
		}
	}
}

func TestTenantAccess_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadTenantAccess
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTenantAccessClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		AccessIDNameAccess,
		&TenantAccessGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTenantAccess_Get(t *testing.T) {
	// From example ApiManagementGetTenantAccess
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTenantAccessClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		AccessIDNameAccess,
		&TenantAccessGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AccessInformationContract.ID == nil {
		t.Fatal("AccessInformationContract.ID should not be nil!")
	}

	// From example ApiManagementGetTenantGitAccess
	res, err = client.Get(ctx,
		"rg1",
		"apimService1",
		AccessIDNameGitAccess,
		&TenantAccessGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AccessInformationContract.ID == nil {
		t.Fatal("AccessInformationContract.ID should not be nil!")
	}
}

func TestTenantAccess_Create(t *testing.T) {
	// From example ApiManagementCreateTenantAccess
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTenantAccessClient(con,
		"subid")
	res, err := client.Create(ctx,
		"rg1",
		"apimService1",
		AccessIDNameAccess,
		"*",
		AccessInformationCreateParameters{
			Properties: &AccessInformationCreateParameterProperties{
				Enabled: to.BoolPtr(true),
			},
		},
		&TenantAccessCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AccessInformationContract.ID == nil {
		t.Fatal("AccessInformationContract.ID should not be nil!")
	}
}

func TestTenantAccess_Update(t *testing.T) {
	// From example ApiManagementUpdateTenantAccess
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTenantAccessClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		AccessIDNameAccess,
		"*",
		AccessInformationUpdateParameters{
			Properties: &AccessInformationUpdateParameterProperties{
				Enabled: to.BoolPtr(true),
			},
		},
		&TenantAccessUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AccessInformationContract.ID == nil {
		t.Fatal("AccessInformationContract.ID should not be nil!")
	}
}

func TestTenantAccess_RegeneratePrimaryKey(t *testing.T) {
	// From example ApiManagementTenantAccessRegenerateKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTenantAccessClient(con,
		"subid")
	_, err := client.RegeneratePrimaryKey(ctx,
		"rg1",
		"apimService1",
		AccessIDNameAccess,
		&TenantAccessRegeneratePrimaryKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTenantAccess_RegenerateSecondaryKey(t *testing.T) {
	// From example ApiManagementTenantAccessRegenerateKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTenantAccessClient(con,
		"subid")
	_, err := client.RegenerateSecondaryKey(ctx,
		"rg1",
		"apimService1",
		AccessIDNameAccess,
		&TenantAccessRegenerateSecondaryKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTenantAccess_ListSecrets(t *testing.T) {
	// From example ApiManagementListSecretsTenantAccess
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTenantAccessClient(con,
		"subid")
	res, err := client.ListSecrets(ctx,
		"rg1",
		"apimService1",
		AccessIDNameAccess,
		&TenantAccessListSecretsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AccessInformationSecretsContract.ID == nil {
		t.Fatal("AccessInformationSecretsContract.ID should not be nil!")
	}
}

func TestTenantAccessGit_RegeneratePrimaryKey(t *testing.T) {
	// From example ApiManagementTenantAccessRegenerateKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTenantAccessGitClient(con,
		"subid")
	_, err := client.RegeneratePrimaryKey(ctx,
		"rg1",
		"apimService1",
		AccessIDNameAccess,
		&TenantAccessGitRegeneratePrimaryKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTenantAccessGit_RegenerateSecondaryKey(t *testing.T) {
	// From example ApiManagementTenantAccessRegenerateKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTenantAccessGitClient(con,
		"subid")
	_, err := client.RegenerateSecondaryKey(ctx,
		"rg1",
		"apimService1",
		AccessIDNameAccess,
		&TenantAccessGitRegenerateSecondaryKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTenantConfiguration_Deploy(t *testing.T) {
	// From example ApiManagementTenantConfigurationDeploy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTenantConfigurationClient(con,
		"subid")
	poller, err := client.BeginDeploy(ctx,
		"rg1",
		"apimService1",
		ConfigurationIDNameConfiguration,
		DeployConfigurationParameters{
			Properties: &DeployConfigurationParameterProperties{
				Branch: to.StringPtr("master"),
			},
		},
		&TenantConfigurationBeginDeployOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationResultContract.ID == nil {
		t.Fatal("OperationResultContract.ID should not be nil!")
	}
}

func TestTenantConfiguration_Save(t *testing.T) {
	// From example ApiManagementTenantConfigurationSave
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTenantConfigurationClient(con,
		"subid")
	poller, err := client.BeginSave(ctx,
		"rg1",
		"apimService1",
		ConfigurationIDNameConfiguration,
		SaveConfigurationParameter{
			Properties: &SaveConfigurationParameterProperties{
				Branch: to.StringPtr("master"),
			},
		},
		&TenantConfigurationBeginSaveOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationResultContract.ID == nil {
		t.Fatal("OperationResultContract.ID should not be nil!")
	}
}

func TestTenantConfiguration_Validate(t *testing.T) {
	// From example ApiManagementTenantConfigurationValidate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTenantConfigurationClient(con,
		"subid")
	poller, err := client.BeginValidate(ctx,
		"rg1",
		"apimService1",
		ConfigurationIDNameConfiguration,
		DeployConfigurationParameters{
			Properties: &DeployConfigurationParameterProperties{
				Branch: to.StringPtr("master"),
			},
		},
		&TenantConfigurationBeginValidateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationResultContract.ID == nil {
		t.Fatal("OperationResultContract.ID should not be nil!")
	}
}

func TestTenantConfiguration_GetSyncState(t *testing.T) {
	// From example ApiManagementTenantAccessSyncState
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTenantConfigurationClient(con,
		"subid")
	res, err := client.GetSyncState(ctx,
		"rg1",
		"apimService1",
		ConfigurationIDNameConfiguration,
		&TenantConfigurationGetSyncStateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TenantConfigurationSyncStateContract.ID == nil {
		t.Fatal("TenantConfigurationSyncStateContract.ID should not be nil!")
	}
}

func TestUser_ListByService(t *testing.T) {
	// From example ApiManagementListUsers
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUserClient(con,
		"subid")
	pager := client.ListByService("rg1",
		"apimService1",
		&UserListByServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UserContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UserContract.ID should not be nil!")
			}
		}
	}
}

func TestUser_GetEntityTag(t *testing.T) {
	// From example ApiManagementHeadUser
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUserClient(con,
		"subid")
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"5931a75ae4bbd512a88c680b",
		&UserGetEntityTagOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestUser_Get(t *testing.T) {
	// From example ApiManagementGetUser
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUserClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"5931a75ae4bbd512a88c680b",
		&UserGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.UserContract.ID == nil {
		t.Fatal("UserContract.ID should not be nil!")
	}
}

func TestUser_CreateOrUpdate(t *testing.T) {
	// From example ApiManagementCreateUser
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUserClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"5931a75ae4bbd512288c680b",
		UserCreateParameters{
			Properties: &UserCreateParameterProperties{
				Confirmation: ConfirmationSignup.ToPtr(),
				Email:        to.StringPtr("foobar@outlook.com"),
				FirstName:    to.StringPtr("foo"),
				LastName:     to.StringPtr("bar"),
			},
		},
		&UserCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.UserContract.ID == nil {
		t.Fatal("UserContract.ID should not be nil!")
	}
}

func TestUser_Update(t *testing.T) {
	// From example ApiManagementUpdateUser
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUserClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"5931a75ae4bbd512a88c680b",
		"*",
		UserUpdateParameters{
			Properties: &UserUpdateParametersProperties{
				Email:     to.StringPtr("foobar@outlook.com"),
				FirstName: to.StringPtr("foo"),
				LastName:  to.StringPtr("bar"),
			},
		},
		&UserUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.UserContract.ID == nil {
		t.Fatal("UserContract.ID should not be nil!")
	}
}

func TestUser_Delete(t *testing.T) {
	// From example ApiManagementDeleteUser
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUserClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"5931a75ae4bbd512288c680b",
		"*",
		&UserDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestUser_GenerateSsoUrl(t *testing.T) {
	// From example ApiManagementUserGenerateSsoUrl
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUserClient(con,
		"subid")
	_, err := client.GenerateSsoURL(ctx,
		"rg1",
		"apimService1",
		"57127d485157a511ace86ae7",
		&UserGenerateSsoURLOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestUser_GetSharedAccessToken(t *testing.T) {
	// From example ApiManagementUserToken
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUserClient(con,
		"subid")
	_, err := client.GetSharedAccessToken(ctx,
		"rg1",
		"apimService1",
		"userId1718",
		UserTokenParameters{
			Properties: &UserTokenParameterProperties{
				Expiry:  to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-21T00:44:24.2845269Z"); return t }()),
				KeyType: KeyTypePrimary.ToPtr(),
			},
		},
		&UserGetSharedAccessTokenOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestUserGroup_List(t *testing.T) {
	// From example ApiManagementListUserGroups
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUserGroupClient(con,
		"subid")
	pager := client.List("rg1",
		"apimService1",
		"57681833a40f7eb6c49f6acf",
		&UserGroupListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("GroupContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("GroupContract.ID should not be nil!")
			}
		}
	}
}

func TestUserSubscription_List(t *testing.T) {
	// From example ApiManagementListUserSubscriptions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUserSubscriptionClient(con,
		"subid")
	pager := client.List("rg1",
		"apimService1",
		"57681833a40f7eb6c49f6acf",
		&UserSubscriptionListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SubscriptionContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SubscriptionContract.ID should not be nil!")
			}
		}
	}
}

func TestUserSubscription_Get(t *testing.T) {
	// From example ApiManagementGetUserSubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUserSubscriptionClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"1",
		"5fa9b096f3df14003c070001",
		&UserSubscriptionGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SubscriptionContract.ID == nil {
		t.Fatal("SubscriptionContract.ID should not be nil!")
	}
}

func TestUserIdentities_List(t *testing.T) {
	// From example ApiManagementListUserIdentities
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUserIdentitiesClient(con,
		"subid")
	pager := client.List("rg1",
		"apimService1",
		"57f2af53bb17172280f44057",
		&UserIdentitiesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UserIdentityContract.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UserIdentityContract.ID should not be nil!")
			}
		}
	}
}

func TestUserConfirmationPassword_Send(t *testing.T) {
	// From example ApiManagementUserConfirmationPasswordSend
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUserConfirmationPasswordClient(con,
		"subid")
	_, err := client.Send(ctx,
		"rg1",
		"apimService1",
		"57127d485157a511ace86ae7",
		&UserConfirmationPasswordSendOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func Test_PerformConnectivityCheckAsync(t *testing.T) {
	// From example HTTP Connectivity Check
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAPIManagementClientClient(con,
		"subid")
	poller, err := client.BeginPerformConnectivityCheckAsync(ctx,
		"rg1",
		"apimService1",
		ConnectivityCheckRequest{
			Destination: &ConnectivityCheckRequestDestination{
				Address: to.StringPtr("https://microsoft.com"),
				Port:    to.Int64Ptr(3306),
			},
			ProtocolConfiguration: &ConnectivityCheckRequestProtocolConfiguration{
				HTTPConfiguration: &ConnectivityCheckRequestProtocolConfigurationHTTPConfiguration{
					Method: MethodGET.ToPtr(),
					Headers: []*HTTPHeader{
						{
							Name:  to.StringPtr("Authorization"),
							Value: to.StringPtr("Bearer myPreciousToken"),
						}},
					ValidStatusCodes: []*int64{
						to.Int64Ptr(200),
						to.Int64Ptr(204)},
				},
			},
			Source: &ConnectivityCheckRequestSource{
				Region: to.StringPtr("northeurope"),
			},
			Protocol: ConnectivityCheckProtocolHTTPS.ToPtr(),
		},
		&APIManagementClientBeginPerformConnectivityCheckAsyncOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}

	// From example TCP Connectivity Check
	poller, err = client.BeginPerformConnectivityCheckAsync(ctx,
		"rg1",
		"apimService1",
		ConnectivityCheckRequest{
			Destination: &ConnectivityCheckRequestDestination{
				Address: to.StringPtr("8.8.8.8"),
				Port:    to.Int64Ptr(53),
			},
			PreferredIPVersion: PreferredIPVersionIPv4.ToPtr(),
			Source: &ConnectivityCheckRequestSource{
				Region: to.StringPtr("northeurope"),
			},
		},
		&APIManagementClientBeginPerformConnectivityCheckAsyncOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
