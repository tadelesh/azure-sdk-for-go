//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armapimanagement_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/apimanagement/armapimanagement"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestAPI_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApis.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListApis"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.APIClientListByServiceOptions{Filter: nil,
			Top:                 nil,
			Skip:                nil,
			Tags:                nil,
			ExpandAPIVersionSet: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApis.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.APICollection{
			Count: to.Ptr[int64](4),
			Value: []*armapimanagement.APIContract{
				{
					Name: to.Ptr("a1"),
					Type: to.Ptr("Microsoft.ApiManagement/service/apis"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/a1"),
					Properties: &armapimanagement.APIContractProperties{
						APIRevision:     to.Ptr("1"),
						APIVersionSetID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apiVersionSets/c48f96c9-1385-4e2d-b410-5ab591ce0fc4"),
						IsCurrent:       to.Ptr(true),
						Path:            to.Ptr("api1"),
						DisplayName:     to.Ptr("api1"),
						Protocols: []*armapimanagement.Protocol{
							to.Ptr(armapimanagement.ProtocolHTTPS)},
						ServiceURL: to.Ptr("http://echoapi.cloudapp.net/api"),
					},
				},
				{
					Name: to.Ptr("5a73933b8f27f7cc82a2d533"),
					Type: to.Ptr("Microsoft.ApiManagement/service/apis"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/5a73933b8f27f7cc82a2d533"),
					Properties: &armapimanagement.APIContractProperties{
						APIRevision:     to.Ptr("1"),
						APIVersion:      to.Ptr("v1"),
						APIVersionSetID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apiVersionSets/c48f96c9-1385-4e2d-b410-5ab591ce0fc4"),
						IsCurrent:       to.Ptr(true),
						Path:            to.Ptr("api1"),
						DisplayName:     to.Ptr("api1"),
						Protocols: []*armapimanagement.Protocol{
							to.Ptr(armapimanagement.ProtocolHTTPS)},
						ServiceURL: to.Ptr("http://echoapi.cloudapp.net/api"),
					},
				},
				{
					Name: to.Ptr("echo-api"),
					Type: to.Ptr("Microsoft.ApiManagement/service/apis"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/echo-api"),
					Properties: &armapimanagement.APIContractProperties{
						APIRevision: to.Ptr("1"),
						IsCurrent:   to.Ptr(true),
						Path:        to.Ptr("echo"),
						DisplayName: to.Ptr("Echo API"),
						Protocols: []*armapimanagement.Protocol{
							to.Ptr(armapimanagement.ProtocolHTTPS)},
						ServiceURL: to.Ptr("http://echoapi.cloudapp.net/api"),
					},
				},
				{
					Name: to.Ptr("5a7390baa5816a110435aee0"),
					Type: to.Ptr("Microsoft.ApiManagement/service/apis"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/5a7390baa5816a110435aee0"),
					Properties: &armapimanagement.APIContractProperties{
						Description: to.Ptr("A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification"),
						APIRevision: to.Ptr("1"),
						IsCurrent:   to.Ptr(true),
						Path:        to.Ptr("vvv"),
						DisplayName: to.Ptr("Swagger Petstore Extensive"),
						Protocols: []*armapimanagement.Protocol{
							to.Ptr(armapimanagement.ProtocolHTTPS)},
						ServiceURL: to.Ptr("http://petstore.swagger.wordnik.com/api"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.APICollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.APICollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApis.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPI_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApi.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadApi"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApi.json: %v", err)
	}
}

func TestAPI_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiContract.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetApiContract"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiContract.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIContract{
			Name: to.Ptr("57d1f7558aa04f15146d9d8a"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/57d1f7558aa04f15146d9d8a"),
			Properties: &armapimanagement.APIContractProperties{
				APIType:     to.Ptr(armapimanagement.APITypeSoap),
				APIRevision: to.Ptr("1"),
				IsCurrent:   to.Ptr(true),
				IsOnline:    to.Ptr(true),
				SubscriptionKeyParameterNames: &armapimanagement.SubscriptionKeyParameterNamesContract{
					Header: to.Ptr("Ocp-Apim-Subscription-Key"),
					Query:  to.Ptr("subscription-key"),
				},
				Path:        to.Ptr("schulte"),
				DisplayName: to.Ptr("Service"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolHTTPS)},
				ServiceURL: to.Ptr("https://api.plexonline.com/DataSource/Service.asmx"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiContract.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiRevision.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetApiRevisionContract"},
	})
	client = armapimanagement.NewAPIClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"apimService1",
		"echo-api;rev=3",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiRevision.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIContract{
			Name: to.Ptr("echo-api;rev=3"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/echo-api;rev=3"),
			Properties: &armapimanagement.APIContractProperties{
				APIRevision:            to.Ptr("3"),
				APIRevisionDescription: to.Ptr("fixed bug in contract"),
				SubscriptionKeyParameterNames: &armapimanagement.SubscriptionKeyParameterNamesContract{
					Header: to.Ptr("Ocp-Apim-Subscription-Key"),
					Query:  to.Ptr("subscription-key"),
				},
				Path:        to.Ptr("schulte"),
				DisplayName: to.Ptr("Service"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolHTTPS)},
				ServiceURL: to.Ptr("https://api.plexonline.com/DataSource/Service.asmx"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiRevision.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPI_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApi.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateApi"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"tempgroup",
		armapimanagement.APICreateOrUpdateParameter{
			Properties: &armapimanagement.APICreateOrUpdateProperties{
				Description: to.Ptr("apidescription5200"),
				AuthenticationSettings: &armapimanagement.AuthenticationSettingsContract{
					OAuth2: &armapimanagement.OAuth2AuthenticationSettingsContract{
						AuthorizationServerID: to.Ptr("authorizationServerId2283"),
						Scope:                 to.Ptr("oauth2scope2580"),
					},
				},
				SubscriptionKeyParameterNames: &armapimanagement.SubscriptionKeyParameterNamesContract{
					Header: to.Ptr("header4520"),
					Query:  to.Ptr("query3037"),
				},
				Path:        to.Ptr("newapiPath"),
				DisplayName: to.Ptr("apiname1463"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolHTTPS),
					to.Ptr(armapimanagement.ProtocolHTTP)},
				ServiceURL: to.Ptr("http://newechoapi.cloudapp.net/api"),
			},
		},
		&armapimanagement.APIClientBeginCreateOrUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApi.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApi.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIContract{
			Name: to.Ptr("apiid9419"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/apiid9419"),
			Properties: &armapimanagement.APIContractProperties{
				Description: to.Ptr("apidescription5200"),
				APIRevision: to.Ptr("1"),
				AuthenticationSettings: &armapimanagement.AuthenticationSettingsContract{
					OAuth2: &armapimanagement.OAuth2AuthenticationSettingsContract{
						AuthorizationServerID: to.Ptr("authorizationServerId2283"),
						Scope:                 to.Ptr("oauth2scope2580"),
					},
				},
				IsCurrent: to.Ptr(true),
				IsOnline:  to.Ptr(true),
				SubscriptionKeyParameterNames: &armapimanagement.SubscriptionKeyParameterNamesContract{
					Header: to.Ptr("header4520"),
					Query:  to.Ptr("query3037"),
				},
				Path:        to.Ptr("newapiPath"),
				DisplayName: to.Ptr("apiname1463"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolHTTP),
					to.Ptr(armapimanagement.ProtocolHTTPS)},
				ServiceURL: to.Ptr("http://newechoapi.cloudapp.net/api"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApi.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiClone.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateApiClone"},
	})
	client = armapimanagement.NewAPIClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"echo-api2",
		armapimanagement.APICreateOrUpdateParameter{
			Properties: &armapimanagement.APICreateOrUpdateProperties{
				Description:          to.Ptr("Copy of Existing Echo Api including Operations."),
				IsCurrent:            to.Ptr(true),
				SubscriptionRequired: to.Ptr(true),
				Path:                 to.Ptr("echo2"),
				DisplayName:          to.Ptr("Echo API2"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolHTTP),
					to.Ptr(armapimanagement.ProtocolHTTPS)},
				ServiceURL:  to.Ptr("http://echoapi.cloudapp.net/api"),
				SourceAPIID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/58a4aeac497000007d040001"),
			},
		},
		&armapimanagement.APIClientBeginCreateOrUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiClone.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiClone.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIContract{
			Name: to.Ptr("echoapi2"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/echoapi2"),
			Properties: &armapimanagement.APIContractProperties{
				Description: to.Ptr("Copy of Existing Echo Api including Operations."),
				APIRevision: to.Ptr("1"),
				IsCurrent:   to.Ptr(true),
				SubscriptionKeyParameterNames: &armapimanagement.SubscriptionKeyParameterNamesContract{
					Header: to.Ptr("Ocp-Apim-Subscription-Key"),
					Query:  to.Ptr("subscription-key"),
				},
				SubscriptionRequired: to.Ptr(true),
				Path:                 to.Ptr("echo2"),
				DisplayName:          to.Ptr("Echo API2"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolHTTP),
					to.Ptr(armapimanagement.ProtocolHTTPS)},
				ServiceURL: to.Ptr("http://echoapi.cloudapp.net/api"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiClone.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiNewVersionUsingExistingApi.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateApiNewVersionUsingExistingApi"},
	})
	client = armapimanagement.NewAPIClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"echoapiv3",
		armapimanagement.APICreateOrUpdateParameter{
			Properties: &armapimanagement.APICreateOrUpdateProperties{
				Description:          to.Ptr("Create Echo API into a new Version using Existing Version Set and Copy all Operations."),
				APIVersion:           to.Ptr("v4"),
				APIVersionSetID:      to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apiVersionSets/aa9c59e6-c0cd-4258-9356-9ca7d2f0b458"),
				IsCurrent:            to.Ptr(true),
				SubscriptionRequired: to.Ptr(true),
				Path:                 to.Ptr("echo2"),
				DisplayName:          to.Ptr("Echo API2"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolHTTP),
					to.Ptr(armapimanagement.ProtocolHTTPS)},
				ServiceURL:  to.Ptr("http://echoapi.cloudapp.net/api"),
				SourceAPIID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/echoPath"),
			},
		},
		&armapimanagement.APIClientBeginCreateOrUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiNewVersionUsingExistingApi.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiNewVersionUsingExistingApi.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIContract{
			Name: to.Ptr("echoapiv3"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/echoapiv3"),
			Properties: &armapimanagement.APIContractProperties{
				Description:     to.Ptr("Create Echo API into a new Version using Existing Version Set and Copy all Operations."),
				APIRevision:     to.Ptr("1"),
				APIVersion:      to.Ptr("v4"),
				APIVersionSetID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apiVersionSets/aa9c59e6-c0cd-4258-9356-9ca7d2f0b458"),
				IsCurrent:       to.Ptr(true),
				SubscriptionKeyParameterNames: &armapimanagement.SubscriptionKeyParameterNamesContract{
					Header: to.Ptr("Ocp-Apim-Subscription-Key"),
					Query:  to.Ptr("subscription-key"),
				},
				SubscriptionRequired: to.Ptr(true),
				Path:                 to.Ptr("echo2"),
				APIVersionSet: &armapimanagement.APIVersionSetContractDetails{
					Name:             to.Ptr("Echo API2"),
					ID:               to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apiVersionSets/aa9c59e6-c0cd-4258-9356-9ca7d2f0b458"),
					VersioningScheme: to.Ptr(armapimanagement.APIVersionSetContractDetailsVersioningSchemeSegment),
				},
				DisplayName: to.Ptr("Echo API2"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolHTTP),
					to.Ptr(armapimanagement.ProtocolHTTPS)},
				ServiceURL: to.Ptr("http://echoapi.cloudapp.net/api"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiNewVersionUsingExistingApi.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiRevisionFromExistingApi.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateApiRevisionFromExistingApi"},
	})
	client = armapimanagement.NewAPIClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"echo-api;rev=3",
		armapimanagement.APICreateOrUpdateParameter{
			Properties: &armapimanagement.APICreateOrUpdateProperties{
				APIRevisionDescription: to.Ptr("Creating a Revision of an existing API"),
				Path:                   to.Ptr("echo"),
				ServiceURL:             to.Ptr("http://echoapi.cloudapp.net/apiv3"),
				SourceAPIID:            to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/echo-api"),
			},
		},
		&armapimanagement.APIClientBeginCreateOrUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiRevisionFromExistingApi.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiRevisionFromExistingApi.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIContract{
			Name: to.Ptr("echo-api;rev=3"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/echo-api;rev=3"),
			Properties: &armapimanagement.APIContractProperties{
				APIRevision:            to.Ptr("3"),
				APIRevisionDescription: to.Ptr("Creating a Revision of an existing API"),
				SubscriptionKeyParameterNames: &armapimanagement.SubscriptionKeyParameterNamesContract{
					Header: to.Ptr("Ocp-Apim-Subscription-Key"),
					Query:  to.Ptr("subscription-key"),
				},
				SubscriptionRequired: to.Ptr(true),
				Path:                 to.Ptr("echo"),
				DisplayName:          to.Ptr("Echo API"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolHTTPS)},
				ServiceURL: to.Ptr("http://echoapi.cloudapp.net/apiv3"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiRevisionFromExistingApi.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiUsingImportOverrideServiceUrl.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateApiUsingImportOverrideServiceUrl"},
	})
	client = armapimanagement.NewAPIClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"apidocs",
		armapimanagement.APICreateOrUpdateParameter{
			Properties: &armapimanagement.APICreateOrUpdateProperties{
				Path:       to.Ptr("petstoreapi123"),
				ServiceURL: to.Ptr("http://petstore.swagger.wordnik.com/api"),
				Format:     to.Ptr(armapimanagement.ContentFormat("swagger-link")),
				Value:      to.Ptr("http://apimpimportviaurl.azurewebsites.net/api/apidocs/"),
			},
		},
		&armapimanagement.APIClientBeginCreateOrUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiUsingImportOverrideServiceUrl.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiUsingImportOverrideServiceUrl.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIContract{
			Name: to.Ptr("apidocs"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/apidocs"),
			Properties: &armapimanagement.APIContractProperties{
				Description: to.Ptr("This is a sample server Petstore server.  You can find out more about Swagger \n    at <a href=\"http://swagger.wordnik.com\">http://swagger.wordnik.com</a> or on irc.freenode.net, #swagger.  For this sample,\n    you can use the api key \"special-key\" to test the authorization filters"),
				APIRevision: to.Ptr("1"),
				IsCurrent:   to.Ptr(true),
				SubscriptionKeyParameterNames: &armapimanagement.SubscriptionKeyParameterNamesContract{
					Header: to.Ptr("Ocp-Apim-Subscription-Key"),
					Query:  to.Ptr("subscription-key"),
				},
				Path:        to.Ptr("petstoreapi123"),
				DisplayName: to.Ptr("Swagger Sample App"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolHTTPS)},
				ServiceURL: to.Ptr("http://petstore.swagger.wordnik.com/api"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiUsingImportOverrideServiceUrl.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiUsingOai3Import.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateApiUsingOai3Import"},
	})
	client = armapimanagement.NewAPIClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"petstore",
		armapimanagement.APICreateOrUpdateParameter{
			Properties: &armapimanagement.APICreateOrUpdateProperties{
				Path:   to.Ptr("petstore"),
				Format: to.Ptr(armapimanagement.ContentFormatOpenapiLink),
				Value:  to.Ptr("https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml"),
			},
		},
		&armapimanagement.APIClientBeginCreateOrUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiUsingOai3Import.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiUsingOai3Import.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIContract{
			Name: to.Ptr("petstoreapi"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/petstoreapi"),
			Properties: &armapimanagement.APIContractProperties{
				APIRevision: to.Ptr("1"),
				IsCurrent:   to.Ptr(true),
				SubscriptionKeyParameterNames: &armapimanagement.SubscriptionKeyParameterNamesContract{
					Header: to.Ptr("Ocp-Apim-Subscription-Key"),
					Query:  to.Ptr("subscription-key"),
				},
				Path:        to.Ptr("petstore"),
				DisplayName: to.Ptr("Swagger Petstore"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolHTTPS)},
				ServiceURL: to.Ptr("http://petstore.swagger.io/v1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiUsingOai3Import.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiUsingSwaggerImport.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateApiUsingSwaggerImport"},
	})
	client = armapimanagement.NewAPIClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"petstore",
		armapimanagement.APICreateOrUpdateParameter{
			Properties: &armapimanagement.APICreateOrUpdateProperties{
				Path:   to.Ptr("petstore"),
				Format: to.Ptr(armapimanagement.ContentFormatSwaggerLinkJSON),
				Value:  to.Ptr("http://petstore.swagger.io/v2/swagger.json"),
			},
		},
		&armapimanagement.APIClientBeginCreateOrUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiUsingSwaggerImport.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiUsingSwaggerImport.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIContract{
			Name: to.Ptr("petstoreapi"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/petstoreapi"),
			Properties: &armapimanagement.APIContractProperties{
				Description: to.Ptr("This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters."),
				APIRevision: to.Ptr("1"),
				IsCurrent:   to.Ptr(true),
				SubscriptionKeyParameterNames: &armapimanagement.SubscriptionKeyParameterNamesContract{
					Header: to.Ptr("Ocp-Apim-Subscription-Key"),
					Query:  to.Ptr("subscription-key"),
				},
				Path:        to.Ptr("petstore"),
				DisplayName: to.Ptr("Swagger Petstore"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolHTTP)},
				ServiceURL: to.Ptr("http://petstore.swagger.io/v2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiUsingSwaggerImport.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiUsingWadlImport.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateApiUsingWadlImport"},
	})
	client = armapimanagement.NewAPIClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"petstore",
		armapimanagement.APICreateOrUpdateParameter{
			Properties: &armapimanagement.APICreateOrUpdateProperties{
				Path:   to.Ptr("collector"),
				Format: to.Ptr(armapimanagement.ContentFormatWadlLinkJSON),
				Value:  to.Ptr("https://developer.cisco.com/media/wae-release-6-2-api-reference/wae-collector-rest-api/application.wadl"),
			},
		},
		&armapimanagement.APIClientBeginCreateOrUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiUsingWadlImport.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiUsingWadlImport.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIContract{
			Name: to.Ptr("collectorwadl"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/collectorwadl"),
			Properties: &armapimanagement.APIContractProperties{
				Description: to.Ptr(""),
				APIRevision: to.Ptr("1"),
				IsCurrent:   to.Ptr(true),
				SubscriptionKeyParameterNames: &armapimanagement.SubscriptionKeyParameterNamesContract{
					Header: to.Ptr("Ocp-Apim-Subscription-Key"),
					Query:  to.Ptr("subscription-key"),
				},
				Path:        to.Ptr("collector"),
				DisplayName: to.Ptr("http://localhost:8080/collector-northbound"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolHTTPS)},
				ServiceURL: to.Ptr("http://localhost:8080/collector-northbound"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiUsingWadlImport.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiWithOpenIdConnect.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateApiWithOpenIdConnect"},
	})
	client = armapimanagement.NewAPIClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"tempgroup",
		armapimanagement.APICreateOrUpdateParameter{
			Properties: &armapimanagement.APICreateOrUpdateProperties{
				Description: to.Ptr("This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters."),
				AuthenticationSettings: &armapimanagement.AuthenticationSettingsContract{
					Openid: &armapimanagement.OpenIDAuthenticationSettingsContract{
						BearerTokenSendingMethods: []*armapimanagement.BearerTokenSendingMethods{
							to.Ptr(armapimanagement.BearerTokenSendingMethodsAuthorizationHeader)},
						OpenidProviderID: to.Ptr("testopenid"),
					},
				},
				SubscriptionKeyParameterNames: &armapimanagement.SubscriptionKeyParameterNamesContract{
					Header: to.Ptr("Ocp-Apim-Subscription-Key"),
					Query:  to.Ptr("subscription-key"),
				},
				Path:        to.Ptr("petstore"),
				DisplayName: to.Ptr("Swagger Petstore"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolHTTPS)},
				ServiceURL: to.Ptr("http://petstore.swagger.io/v2"),
			},
		},
		&armapimanagement.APIClientBeginCreateOrUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiWithOpenIdConnect.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiWithOpenIdConnect.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIContract{
			Name: to.Ptr("58da4c4ccdae970a08121230"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/58da4c4ccdae970a08121230"),
			Properties: &armapimanagement.APIContractProperties{
				Description: to.Ptr("This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters."),
				APIRevision: to.Ptr("1"),
				AuthenticationSettings: &armapimanagement.AuthenticationSettingsContract{
					Openid: &armapimanagement.OpenIDAuthenticationSettingsContract{
						BearerTokenSendingMethods: []*armapimanagement.BearerTokenSendingMethods{
							to.Ptr(armapimanagement.BearerTokenSendingMethodsAuthorizationHeader)},
						OpenidProviderID: to.Ptr("testopenid"),
					},
				},
				IsCurrent: to.Ptr(true),
				SubscriptionKeyParameterNames: &armapimanagement.SubscriptionKeyParameterNamesContract{
					Header: to.Ptr("Ocp-Apim-Subscription-Key"),
					Query:  to.Ptr("subscription-key"),
				},
				Path:        to.Ptr("petstore"),
				DisplayName: to.Ptr("Swagger Petstore"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolHTTPS)},
				ServiceURL: to.Ptr("http://petstore.swagger.io/v2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiWithOpenIdConnect.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGraphQLApi.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateGraphQLApi"},
	})
	client = armapimanagement.NewAPIClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"tempgroup",
		armapimanagement.APICreateOrUpdateParameter{
			Properties: &armapimanagement.APICreateOrUpdateProperties{
				APIType:     to.Ptr(armapimanagement.APITypeGraphql),
				Description: to.Ptr("apidescription5200"),
				Path:        to.Ptr("graphql-api"),
				DisplayName: to.Ptr("apiname1463"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolHTTP),
					to.Ptr(armapimanagement.ProtocolHTTPS)},
				ServiceURL: to.Ptr("https://api.spacex.land/graphql"),
			},
		},
		&armapimanagement.APIClientBeginCreateOrUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGraphQLApi.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGraphQLApi.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIContract{
			Name: to.Ptr("apiid9419"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/apiid9419"),
			Properties: &armapimanagement.APIContractProperties{
				APIType:     to.Ptr(armapimanagement.APITypeGraphql),
				Description: to.Ptr("apidescription5200"),
				APIRevision: to.Ptr("1"),
				IsCurrent:   to.Ptr(true),
				IsOnline:    to.Ptr(true),
				Path:        to.Ptr("graphql-api"),
				DisplayName: to.Ptr("apiname1463"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolHTTP),
					to.Ptr(armapimanagement.ProtocolHTTPS)},
				ServiceURL: to.Ptr("https://api.spacex.land/graphql"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGraphQLApi.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateSoapPassThroughApiUsingWsdlImport.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateSoapPassThroughApiUsingWsdlImport"},
	})
	client = armapimanagement.NewAPIClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"soapApi",
		armapimanagement.APICreateOrUpdateParameter{
			Properties: &armapimanagement.APICreateOrUpdateProperties{
				Path:        to.Ptr("currency"),
				Format:      to.Ptr(armapimanagement.ContentFormatWsdlLink),
				SoapAPIType: to.Ptr(armapimanagement.SoapAPITypeSoapPassThrough),
				Value:       to.Ptr("http://www.webservicex.net/CurrencyConvertor.asmx?WSDL"),
				WsdlSelector: &armapimanagement.APICreateOrUpdatePropertiesWsdlSelector{
					WsdlEndpointName: to.Ptr("CurrencyConvertorSoap"),
					WsdlServiceName:  to.Ptr("CurrencyConvertor"),
				},
			},
		},
		&armapimanagement.APIClientBeginCreateOrUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateSoapPassThroughApiUsingWsdlImport.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateSoapPassThroughApiUsingWsdlImport.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIContract{
			Name: to.Ptr("soapApi"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/soapApi"),
			Properties: &armapimanagement.APIContractProperties{
				APIType:     to.Ptr(armapimanagement.APITypeSoap),
				APIRevision: to.Ptr("1"),
				IsCurrent:   to.Ptr(true),
				SubscriptionKeyParameterNames: &armapimanagement.SubscriptionKeyParameterNamesContract{
					Header: to.Ptr("Ocp-Apim-Subscription-Key"),
					Query:  to.Ptr("subscription-key"),
				},
				Path:        to.Ptr("currency"),
				DisplayName: to.Ptr("CurrencyConvertor"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolHTTPS)},
				ServiceURL: to.Ptr("http://www.webservicex.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateSoapPassThroughApiUsingWsdlImport.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateSoapToRestApiUsingWsdlImport.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateSoapToRestApiUsingWsdlImport"},
	})
	client = armapimanagement.NewAPIClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"soapApi",
		armapimanagement.APICreateOrUpdateParameter{
			Properties: &armapimanagement.APICreateOrUpdateProperties{
				Path:   to.Ptr("currency"),
				Format: to.Ptr(armapimanagement.ContentFormatWsdlLink),
				Value:  to.Ptr("http://www.webservicex.net/CurrencyConvertor.asmx?WSDL"),
				WsdlSelector: &armapimanagement.APICreateOrUpdatePropertiesWsdlSelector{
					WsdlEndpointName: to.Ptr("CurrencyConvertorSoap"),
					WsdlServiceName:  to.Ptr("CurrencyConvertor"),
				},
			},
		},
		&armapimanagement.APIClientBeginCreateOrUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateSoapToRestApiUsingWsdlImport.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateSoapToRestApiUsingWsdlImport.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIContract{
			Name: to.Ptr("soapApi"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/soapApi"),
			Properties: &armapimanagement.APIContractProperties{
				APIRevision: to.Ptr("1"),
				IsCurrent:   to.Ptr(true),
				SubscriptionKeyParameterNames: &armapimanagement.SubscriptionKeyParameterNamesContract{
					Header: to.Ptr("Ocp-Apim-Subscription-Key"),
					Query:  to.Ptr("subscription-key"),
				},
				Path:        to.Ptr("currency"),
				DisplayName: to.Ptr("CurrencyConvertor"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolHTTPS)},
				ServiceURL: to.Ptr("http://www.webservicex.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateSoapToRestApiUsingWsdlImport.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateWebsocketApi.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateWebSocketApi"},
	})
	client = armapimanagement.NewAPIClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"tempgroup",
		armapimanagement.APICreateOrUpdateParameter{
			Properties: &armapimanagement.APICreateOrUpdateProperties{
				APIType:     to.Ptr(armapimanagement.APITypeWebsocket),
				Description: to.Ptr("apidescription5200"),
				Path:        to.Ptr("newapiPath"),
				DisplayName: to.Ptr("apiname1463"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolWss),
					to.Ptr(armapimanagement.ProtocolWs)},
				ServiceURL: to.Ptr("wss://echo.websocket.org"),
			},
		},
		&armapimanagement.APIClientBeginCreateOrUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateWebsocketApi.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateWebsocketApi.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIContract{
			Name: to.Ptr("apiid9419"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/apiid9419"),
			Properties: &armapimanagement.APIContractProperties{
				APIType:     to.Ptr(armapimanagement.APITypeWebsocket),
				Description: to.Ptr("apidescription5200"),
				APIRevision: to.Ptr("1"),
				IsCurrent:   to.Ptr(true),
				IsOnline:    to.Ptr(true),
				Path:        to.Ptr("newapiPath"),
				DisplayName: to.Ptr("apiname1463"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolWs),
					to.Ptr(armapimanagement.ProtocolWss)},
				ServiceURL: to.Ptr("wss://echo.websocket.org"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateWebsocketApi.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPI_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateApi.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateApi"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"echo-api",
		"*",
		armapimanagement.APIUpdateContract{
			Properties: &armapimanagement.APIContractUpdateProperties{
				Path:        to.Ptr("newecho"),
				DisplayName: to.Ptr("Echo API New"),
				ServiceURL:  to.Ptr("http://echoapi.cloudapp.net/api2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateApi.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIContract{
			Name: to.Ptr("echo-api"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/echo-api"),
			Properties: &armapimanagement.APIContractProperties{
				APIRevision: to.Ptr("1"),
				IsCurrent:   to.Ptr(true),
				IsOnline:    to.Ptr(true),
				SubscriptionKeyParameterNames: &armapimanagement.SubscriptionKeyParameterNamesContract{
					Header: to.Ptr("Ocp-Apim-Subscription-Key"),
					Query:  to.Ptr("subscription-key"),
				},
				Path:        to.Ptr("newecho"),
				DisplayName: to.Ptr("Echo API New"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolHTTPS)},
				ServiceURL: to.Ptr("http://echoapi.cloudapp.net/api2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateApi.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPI_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApi.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteApi"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"echo-api",
		"*",
		&armapimanagement.APIClientDeleteOptions{DeleteRevisions: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApi.json: %v", err)
	}
}

func TestAPI_ListByTags(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApisByTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListApisByTags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIClient("subid", cred, &options)
	pager := client.ListByTags("rg1",
		"apimService1",
		&armapimanagement.APIClientListByTagsOptions{Filter: nil,
			Top:                  nil,
			Skip:                 nil,
			IncludeNotTaggedApis: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApisByTags.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.TagResourceCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.TagResourceContract{
				{
					API: &armapimanagement.APITagResourceContractProperties{
						APIRevision: to.Ptr("1"),
						IsCurrent:   to.Ptr(true),
						Name:        to.Ptr("Echo API"),
						Path:        to.Ptr("echo"),
						ID:          to.Ptr("/apis/echo-api"),
						ServiceURL:  to.Ptr("http://echoapi.cloudapp.net/api"),
					},
					Tag: &armapimanagement.TagResourceContractProperties{
						Name: to.Ptr("awesomeTag"),
						ID:   to.Ptr("/tags/apitag123"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TagResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TagResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApisByTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIRevision_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiRevisions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListApiRevisions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIRevisionClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		&armapimanagement.APIRevisionClientListByServiceOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiRevisions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.APIRevisionCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.APIRevisionContract{
				{
					APIID:           to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/a1;rev=1"),
					APIRevision:     to.Ptr("1"),
					CreatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T22:21:20.467Z"); return t }()),
					IsCurrent:       to.Ptr(true),
					IsOnline:        to.Ptr(true),
					UpdatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T22:21:20.467Z"); return t }()),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.APIRevisionCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.APIRevisionCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiRevisions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIRelease_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiReleases.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListApiReleases"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIReleaseClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		"a1",
		&armapimanagement.APIReleaseClientListByServiceOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiReleases.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.APIReleaseCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.APIReleaseContract{
				{
					Name: to.Ptr("5a7cb545298324c53224a799"),
					Type: to.Ptr("Microsoft.ApiManagement/service/apis/releases"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/a1/releases/5a7cb545298324c53224a799"),
					Properties: &armapimanagement.APIReleaseContractProperties{
						CreatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-08T20:38:29.173Z"); return t }()),
						Notes:           to.Ptr("yahoo"),
						UpdatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-08T20:38:29.173Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.APIReleaseCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.APIReleaseCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiReleases.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIRelease_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiRelease.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadApiRelease"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIReleaseClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"a1",
		"5a7cb545298324c53224a799",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiRelease.json: %v", err)
	}
}

func TestAPIRelease_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiRelease.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetApiRelease"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIReleaseClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"a1",
		"5a7cb545298324c53224a799",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiRelease.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIReleaseContract{
			Name: to.Ptr("5a7cb545298324c53224a799"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/releases"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/a1/releases/5a7cb545298324c53224a799"),
			Properties: &armapimanagement.APIReleaseContractProperties{
				APIID:           to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/a1"),
				CreatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-08T20:38:29.173Z"); return t }()),
				Notes:           to.Ptr("yahoo"),
				UpdatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-08T20:38:29.173Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIReleaseContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIReleaseContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiRelease.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIRelease_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiRelease.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateApiRelease"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIReleaseClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"a1",
		"testrev",
		armapimanagement.APIReleaseContract{
			Properties: &armapimanagement.APIReleaseContractProperties{
				APIID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/a1"),
				Notes: to.Ptr("yahooagain"),
			},
		},
		&armapimanagement.APIReleaseClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiRelease.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIReleaseContract{
			Name: to.Ptr("testrev"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/releases"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/a1/releases/testrev"),
			Properties: &armapimanagement.APIReleaseContractProperties{
				APIID:           to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/a1"),
				CreatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-08T20:52:00.65Z"); return t }()),
				Notes:           to.Ptr("yahooagain"),
				UpdatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-08T20:52:00.65Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIReleaseContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIReleaseContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiRelease.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIRelease_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateApiRelease.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateApiRelease"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIReleaseClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"a1",
		"testrev",
		"*",
		armapimanagement.APIReleaseContract{
			Properties: &armapimanagement.APIReleaseContractProperties{
				APIID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/a1"),
				Notes: to.Ptr("yahooagain"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateApiRelease.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIReleaseContract{
			Name: to.Ptr("testrev"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/releases"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/a1/releases/testrev"),
			Properties: &armapimanagement.APIReleaseContractProperties{
				APIID:           to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/a1"),
				CreatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-08T20:38:29.173Z"); return t }()),
				Notes:           to.Ptr("yahoo"),
				UpdatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-08T20:38:29.173Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIReleaseContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIReleaseContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateApiRelease.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIRelease_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiRelease.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteApiRelease"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIReleaseClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"5a5fcc09124a7fa9b89f2f1d",
		"testrev",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiRelease.json: %v", err)
	}
}

func TestAPIOperation_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadApiOperation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIOperationClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		"57d2ef278aa04f0ad01d6cdc",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiOperation.json: %v", err)
	}
}

func TestAPIOperation_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetApiOperation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIOperationClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		"57d2ef278aa04f0ad01d6cdc",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiOperation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.OperationContract{
			Name: to.Ptr("57d2ef278aa04f0ad01d6cdc"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/operations"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/57d2ef278aa04f0888cba3f3/operations/57d2ef278aa04f0ad01d6cdc"),
			Properties: &armapimanagement.OperationContractProperties{
				TemplateParameters: []*armapimanagement.ParameterContract{},
				Request: &armapimanagement.RequestContract{
					Description:     to.Ptr("IFazioService_CancelOrder_InputMessage"),
					Headers:         []*armapimanagement.ParameterContract{},
					QueryParameters: []*armapimanagement.ParameterContract{},
					Representations: []*armapimanagement.RepresentationContract{
						{
							ContentType: to.Ptr("text/xml"),
							SchemaID:    to.Ptr("6980a395-f08b-4a59-8295-1440cbd909b8"),
							TypeName:    to.Ptr("CancelOrder"),
						}},
				},
				Responses: []*armapimanagement.ResponseContract{
					{
						Description: to.Ptr("IFazioService_CancelOrder_OutputMessage"),
						Headers:     []*armapimanagement.ParameterContract{},
						Representations: []*armapimanagement.RepresentationContract{
							{
								ContentType: to.Ptr("text/xml"),
								SchemaID:    to.Ptr("6980a395-f08b-4a59-8295-1440cbd909b8"),
								TypeName:    to.Ptr("CancelOrderResponse"),
							}},
						StatusCode: to.Ptr[int32](200),
					}},
				Method:      to.Ptr("POST"),
				DisplayName: to.Ptr("CancelOrder"),
				URLTemplate: to.Ptr("/?soapAction=http://tempuri.org/IFazioService/CancelOrder"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiOperation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiOperationPetStore.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetApiOperationPetStore"},
	})
	client = armapimanagement.NewAPIOperationClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"apimService1",
		"swagger-petstore",
		"loginUser",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiOperationPetStore.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.OperationContract{
			Name: to.Ptr("loginUser"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/operations"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/swagger-petstore/operations/loginUser"),
			Properties: &armapimanagement.OperationContractProperties{
				Description: to.Ptr(""),
				TemplateParameters: []*armapimanagement.ParameterContract{
					{
						Name:        to.Ptr("username"),
						Type:        to.Ptr("string"),
						Description: to.Ptr("The user name for login"),
						Required:    to.Ptr(true),
						Values:      []*string{},
					},
					{
						Name:        to.Ptr("password"),
						Type:        to.Ptr("string"),
						Description: to.Ptr("The password for login in clear text"),
						Required:    to.Ptr(true),
						Values:      []*string{},
					}},
				Request: &armapimanagement.RequestContract{
					Headers:         []*armapimanagement.ParameterContract{},
					QueryParameters: []*armapimanagement.ParameterContract{},
					Representations: []*armapimanagement.RepresentationContract{},
				},
				Responses: []*armapimanagement.ResponseContract{
					{
						Description: to.Ptr("successful operation"),
						Headers: []*armapimanagement.ParameterContract{
							{
								Name:        to.Ptr("X-Rate-Limit"),
								Type:        to.Ptr("integer"),
								Description: to.Ptr("calls per hour allowed by the user"),
								Values:      []*string{},
							},
							{
								Name:        to.Ptr("X-Expires-After"),
								Type:        to.Ptr("string"),
								Description: to.Ptr("date in UTC when token expires"),
								Values:      []*string{},
							}},
						Representations: []*armapimanagement.RepresentationContract{
							{
								ContentType: to.Ptr("application/xml"),
								SchemaID:    to.Ptr("5ba91a35f373b513a0bf31c6"),
								TypeName:    to.Ptr("UserLoginGet200ApplicationXmlResponse"),
							},
							{
								ContentType: to.Ptr("application/json"),
								SchemaID:    to.Ptr("5ba91a35f373b513a0bf31c6"),
								TypeName:    to.Ptr("UserLoginGet200ApplicationJsonResponse"),
							}},
						StatusCode: to.Ptr[int32](200),
					},
					{
						Description: to.Ptr("Invalid username/password supplied"),
						Headers:     []*armapimanagement.ParameterContract{},
						Representations: []*armapimanagement.RepresentationContract{
							{
								ContentType: to.Ptr("application/xml"),
							},
							{
								ContentType: to.Ptr("application/json"),
							}},
						StatusCode: to.Ptr[int32](400),
					}},
				Method:      to.Ptr("GET"),
				DisplayName: to.Ptr("Logs user into the system"),
				URLTemplate: to.Ptr("/user/login?username={username}&password={password}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiOperationPetStore.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIOperation_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateApiOperation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIOperationClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"PetStoreTemplate2",
		"newoperations",
		armapimanagement.OperationContract{
			Properties: &armapimanagement.OperationContractProperties{
				Description:        to.Ptr("This can only be done by the logged in user."),
				TemplateParameters: []*armapimanagement.ParameterContract{},
				Request: &armapimanagement.RequestContract{
					Description:     to.Ptr("Created user object"),
					Headers:         []*armapimanagement.ParameterContract{},
					QueryParameters: []*armapimanagement.ParameterContract{},
					Representations: []*armapimanagement.RepresentationContract{
						{
							ContentType: to.Ptr("application/json"),
							SchemaID:    to.Ptr("592f6c1d0af5840ca8897f0c"),
							TypeName:    to.Ptr("User"),
						}},
				},
				Responses: []*armapimanagement.ResponseContract{
					{
						Description: to.Ptr("successful operation"),
						Headers:     []*armapimanagement.ParameterContract{},
						Representations: []*armapimanagement.RepresentationContract{
							{
								ContentType: to.Ptr("application/xml"),
							},
							{
								ContentType: to.Ptr("application/json"),
							}},
						StatusCode: to.Ptr[int32](200),
					}},
				Method:      to.Ptr("POST"),
				DisplayName: to.Ptr("createUser2"),
				URLTemplate: to.Ptr("/user1"),
			},
		},
		&armapimanagement.APIOperationClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiOperation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.OperationContract{
			Name: to.Ptr("newoperations"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/operations"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/PetStoreTemplate2/operations/newoperations"),
			Properties: &armapimanagement.OperationContractProperties{
				Description:        to.Ptr("This can only be done by the logged in user."),
				TemplateParameters: []*armapimanagement.ParameterContract{},
				Request: &armapimanagement.RequestContract{
					Description:     to.Ptr("Created user object"),
					Headers:         []*armapimanagement.ParameterContract{},
					QueryParameters: []*armapimanagement.ParameterContract{},
					Representations: []*armapimanagement.RepresentationContract{
						{
							ContentType: to.Ptr("application/json"),
							SchemaID:    to.Ptr("592f6c1d0af5840ca8897f0c"),
							TypeName:    to.Ptr("User"),
						}},
				},
				Responses: []*armapimanagement.ResponseContract{
					{
						Description: to.Ptr("successful operation"),
						Headers:     []*armapimanagement.ParameterContract{},
						Representations: []*armapimanagement.RepresentationContract{
							{
								ContentType: to.Ptr("application/xml"),
							},
							{
								ContentType: to.Ptr("application/json"),
							}},
						StatusCode: to.Ptr[int32](200),
					}},
				Method:      to.Ptr("POST"),
				DisplayName: to.Ptr("createUser2"),
				URLTemplate: to.Ptr("/user1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiOperation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIOperation_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateApiOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateApiOperation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIOperationClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"echo-api",
		"operationId",
		"*",
		armapimanagement.OperationUpdateContract{
			Properties: &armapimanagement.OperationUpdateContractProperties{
				TemplateParameters: []*armapimanagement.ParameterContract{},
				Request: &armapimanagement.RequestContract{
					QueryParameters: []*armapimanagement.ParameterContract{
						{
							Name:         to.Ptr("param1"),
							Type:         to.Ptr("string"),
							Description:  to.Ptr("A sample parameter that is required and has a default value of \"sample\"."),
							DefaultValue: to.Ptr("sample"),
							Required:     to.Ptr(true),
							Values: []*string{
								to.Ptr("sample")},
						}},
				},
				Responses: []*armapimanagement.ResponseContract{
					{
						Description:     to.Ptr("Returned in all cases."),
						Headers:         []*armapimanagement.ParameterContract{},
						Representations: []*armapimanagement.RepresentationContract{},
						StatusCode:      to.Ptr[int32](200),
					},
					{
						Description:     to.Ptr("Server Error."),
						Headers:         []*armapimanagement.ParameterContract{},
						Representations: []*armapimanagement.RepresentationContract{},
						StatusCode:      to.Ptr[int32](500),
					}},
				Method:      to.Ptr("GET"),
				DisplayName: to.Ptr("Retrieve resource"),
				URLTemplate: to.Ptr("/resource"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateApiOperation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.OperationContract{
			Name: to.Ptr("57d2ef278aa04f0ad01d6cdc"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/operations"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/57d2ef278aa04f0888cba3f3/operations/57d2ef278aa04f0ad01d6cdc"),
			Properties: &armapimanagement.OperationContractProperties{
				TemplateParameters: []*armapimanagement.ParameterContract{},
				Request: &armapimanagement.RequestContract{
					Description:     to.Ptr("IFazioService_CancelOrder_InputMessage"),
					Headers:         []*armapimanagement.ParameterContract{},
					QueryParameters: []*armapimanagement.ParameterContract{},
					Representations: []*armapimanagement.RepresentationContract{
						{
							ContentType: to.Ptr("text/xml"),
							SchemaID:    to.Ptr("6980a395-f08b-4a59-8295-1440cbd909b8"),
							TypeName:    to.Ptr("CancelOrder"),
						}},
				},
				Responses: []*armapimanagement.ResponseContract{
					{
						Description: to.Ptr("IFazioService_CancelOrder_OutputMessage"),
						Headers:     []*armapimanagement.ParameterContract{},
						Representations: []*armapimanagement.RepresentationContract{
							{
								ContentType: to.Ptr("text/xml"),
								SchemaID:    to.Ptr("6980a395-f08b-4a59-8295-1440cbd909b8"),
								TypeName:    to.Ptr("CancelOrderResponse"),
							}},
						StatusCode: to.Ptr[int32](200),
					}},
				Method:      to.Ptr("POST"),
				DisplayName: to.Ptr("CancelOrder"),
				URLTemplate: to.Ptr("/?soapAction=http://tempuri.org/IFazioService/CancelOrder"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateApiOperation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIOperation_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteApiOperation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIOperationClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		"57d2ef278aa04f0ad01d6cdc",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiOperation.json: %v", err)
	}
}

func TestAPIOperationPolicy_ListByOperation(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiOperationPolicies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListApiOperationPolicies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIOperationPolicyClient("subid", cred, &options)
	res, err := client.ListByOperation(ctx,
		"rg1",
		"apimService1",
		"599e2953193c3c0bd0b3e2fa",
		"599e29ab193c3c0bd0b3e2fb",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiOperationPolicies.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PolicyCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.PolicyContract{
				{
					Name: to.Ptr("policy"),
					Type: to.Ptr("Microsoft.ApiManagement/service/apis/operations/policies"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/599e2953193c3c0bd0b3e2fa/operations/599e29ab193c3c0bd0b3e2fb/policies/policy"),
					Properties: &armapimanagement.PolicyContractProperties{
						Value: to.Ptr("<!--\r\n    IMPORTANT:\r\n    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.\r\n    - Only the <forward-request> policy element can appear within the <backend> section element.\r\n    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.\r\n    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.\r\n    - To add a policy position the cursor at the desired insertion point and click on the round button associated with the policy.\r\n    - To remove a policy, delete the corresponding policy statement from the policy document.\r\n    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.\r\n    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.\r\n    - Policies are applied in the order of their appearance, from the top down.\r\n-->\r\n<policies>\r\n  <inbound>\r\n    <validate-jwt header-name=\"dd\">\r\n      <required-claims>\r\n        <claim name=\"bla\" separator=\"\">\r\n          <value>xxx</value>\r\n        </claim>\r\n      </required-claims>\r\n    </validate-jwt>\r\n    <base />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n</policies>"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PolicyCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PolicyCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiOperationPolicies.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIOperationPolicy_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiOperationPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadApiOperationPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIOperationPolicyClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"5600b539c53f5b0062040001",
		"5600b53ac53f5b0062080006",
		armapimanagement.PolicyIDNamePolicy,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiOperationPolicy.json: %v", err)
	}
}

func TestAPIOperationPolicy_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiOperationPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetApiOperationPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIOperationPolicyClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"5600b539c53f5b0062040001",
		"5600b53ac53f5b0062080006",
		armapimanagement.PolicyIDNamePolicy,
		&armapimanagement.APIOperationPolicyClientGetOptions{Format: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiOperationPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PolicyContract{
			Name: to.Ptr("policy"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/operations/policies"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/5600b539c53f5b0062040001/operations/5600b53ac53f5b0062080006/policies/policy"),
			Properties: &armapimanagement.PolicyContractProperties{
				Value: to.Ptr("<policies>\r\n  <inbound>\r\n    <base />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n    <set-header name=\"X-My-Sample\" exists-action=\"override\">\r\n      <value>This is a sample</value>\r\n      <!-- for multiple headers with the same name add additional value elements -->\r\n    </set-header>\r\n    <jsonp callback-parameter-name=\"ProcessResponse\" />\r\n  </outbound>\r\n</policies>"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PolicyContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PolicyContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiOperationPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIOperationPolicy_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiOperationPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateApiOperationPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIOperationPolicyClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"5600b57e7e8880006a040001",
		"5600b57e7e8880006a080001",
		armapimanagement.PolicyIDNamePolicy,
		armapimanagement.PolicyContract{
			Properties: &armapimanagement.PolicyContractProperties{
				Format: to.Ptr(armapimanagement.PolicyContentFormatXML),
				Value:  to.Ptr("<policies> <inbound /> <backend>    <forward-request />  </backend>  <outbound /></policies>"),
			},
		},
		&armapimanagement.APIOperationPolicyClientCreateOrUpdateOptions{IfMatch: to.Ptr("*")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiOperationPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PolicyContract{
			Name: to.Ptr("policy"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/operations/policies"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/5600b57e7e8880006a040001/operations/5600b57e7e8880006a080001/policies/policy"),
			Properties: &armapimanagement.PolicyContractProperties{
				Value: to.Ptr("<policies>\r\n  <inbound />\r\n  <backend>\r\n    <forward-request />\r\n  </backend>\r\n  <outbound />\r\n</policies>"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PolicyContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PolicyContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiOperationPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIOperationPolicy_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiOperationPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteApiOperationPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIOperationPolicyClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"testapi",
		"testoperation",
		armapimanagement.PolicyIDNamePolicy,
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiOperationPolicy.json: %v", err)
	}
}

func TestTag_ListByOperation(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiOperationTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListApiOperationTags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTagClient("subid", cred, &options)
	pager := client.ListByOperation("rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		"57d2ef278aa04f0888cba3f6",
		&armapimanagement.TagClientListByOperationOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiOperationTags.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.TagCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.TagContract{
				{
					Name: to.Ptr("5600b539c53f5b0062060002"),
					Type: to.Ptr("Microsoft.ApiManagement/service/tags"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/tags/5600b539c53f5b0062060002"),
					Properties: &armapimanagement.TagContractProperties{
						DisplayName: to.Ptr("tag1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TagCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TagCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiOperationTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTag_GetEntityStateByOperation(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiOperationTag.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadApiOperationTag"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTagClient("subid", cred, &options)
	_, err := client.GetEntityStateByOperation(ctx,
		"rg1",
		"apimService1",
		"59d6bb8f1f7fab13dc67ec9b",
		"59d6bb8f1f7fab13dc67ec9a",
		"59306a29e4bbd510dc24e5f9",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiOperationTag.json: %v", err)
	}
}

func TestTag_GetByOperation(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiOperationTag.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetApiOperationTag"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTagClient("subid", cred, &options)
	res, err := client.GetByOperation(ctx,
		"rg1",
		"apimService1",
		"59d6bb8f1f7fab13dc67ec9b",
		"59d6bb8f1f7fab13dc67ec9a",
		"59306a29e4bbd510dc24e5f9",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiOperationTag.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.TagContract{
			Name: to.Ptr("59306a29e4bbd510dc24e5f9"),
			Type: to.Ptr("Microsoft.ApiManagement/service/tags"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/tags/59306a29e4bbd510dc24e5f9"),
			Properties: &armapimanagement.TagContractProperties{
				DisplayName: to.Ptr("tag1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TagContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TagContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiOperationTag.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTag_AssignToOperation(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiOperationTag.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateApiOperationTag"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTagClient("subid", cred, &options)
	res, err := client.AssignToOperation(ctx,
		"rg1",
		"apimService1",
		"5931a75ae4bbd512a88c680b",
		"5931a75ae4bbd512a88c680a",
		"tagId1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiOperationTag.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.TagContract{
			Name: to.Ptr("tagId1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/tags"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/tags/tagId1"),
			Properties: &armapimanagement.TagContractProperties{
				DisplayName: to.Ptr("tag1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TagContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TagContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiOperationTag.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTag_DetachFromOperation(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiOperationTag.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteApiOperationTag"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTagClient("subid", cred, &options)
	_, err := client.DetachFromOperation(ctx,
		"rg1",
		"apimService1",
		"59d5b28d1f7fab116c282650",
		"59d5b28d1f7fab116c282651",
		"59d5b28e1f7fab116402044e",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiOperationTag.json: %v", err)
	}
}

func TestTag_ListByProduct(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListProductTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListProductTags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTagClient("subid", cred, &options)
	pager := client.ListByProduct("rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f1",
		&armapimanagement.TagClientListByProductOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListProductTags.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.TagCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.TagContract{
				{
					Name: to.Ptr("5600b539c53f5b0062060002"),
					Type: to.Ptr("Microsoft.ApiManagement/service/tags"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/tags/5600b539c53f5b0062060002"),
					Properties: &armapimanagement.TagContractProperties{
						DisplayName: to.Ptr("tag1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TagCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TagCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListProductTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTag_GetEntityStateByProduct(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadProductTag.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadProductTag"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTagClient("subid", cred, &options)
	_, err := client.GetEntityStateByProduct(ctx,
		"rg1",
		"apimService1",
		"59306a29e4bbd510dc24e5f8",
		"59306a29e4bbd510dc24e5f9",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadProductTag.json: %v", err)
	}
}

func TestTag_GetByProduct(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetProductTag.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetProductTag"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTagClient("subid", cred, &options)
	res, err := client.GetByProduct(ctx,
		"rg1",
		"apimService1",
		"59d6bb8f1f7fab13dc67ec9b",
		"59306a29e4bbd510dc24e5f9",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetProductTag.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.TagContract{
			Name: to.Ptr("59306a29e4bbd510dc24e5f9"),
			Type: to.Ptr("Microsoft.ApiManagement/service/tags"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/tags/59306a29e4bbd510dc24e5f9"),
			Properties: &armapimanagement.TagContractProperties{
				DisplayName: to.Ptr("tag1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TagContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TagContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetProductTag.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTag_AssignToProduct(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateProductTag.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateProductTag"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTagClient("subid", cred, &options)
	res, err := client.AssignToProduct(ctx,
		"rg1",
		"apimService1",
		"5931a75ae4bbd512a88c680b",
		"tagId1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateProductTag.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.TagContract{
			Name: to.Ptr("tagId1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/tags"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/tags/tagId1"),
			Properties: &armapimanagement.TagContractProperties{
				DisplayName: to.Ptr("tag1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TagContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TagContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateProductTag.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTag_DetachFromProduct(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteProductTag.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteProductTag"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTagClient("subid", cred, &options)
	_, err := client.DetachFromProduct(ctx,
		"rg1",
		"apimService1",
		"59d5b28d1f7fab116c282650",
		"59d5b28e1f7fab116402044e",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteProductTag.json: %v", err)
	}
}

func TestTag_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListTags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTagClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.TagClientListByServiceOptions{Filter: nil,
			Top:   nil,
			Skip:  nil,
			Scope: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListTags.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.TagCollection{
			Count: to.Ptr[int64](2),
			Value: []*armapimanagement.TagContract{
				{
					Name: to.Ptr("5600b59375ff190048020001"),
					Type: to.Ptr("Microsoft.ApiManagement/service/tags"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/tags/5600b59375ff190048020001"),
					Properties: &armapimanagement.TagContractProperties{
						DisplayName: to.Ptr("tag1"),
					},
				},
				{
					Name: to.Ptr("5600b59375ff190048020002"),
					Type: to.Ptr("Microsoft.ApiManagement/service/tags"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/tags/5600b59375ff190048020002"),
					Properties: &armapimanagement.TagContractProperties{
						DisplayName: to.Ptr("tag2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TagCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TagCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTag_GetEntityState(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadTag.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadTag"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTagClient("subid", cred, &options)
	_, err := client.GetEntityState(ctx,
		"rg1",
		"apimService1",
		"59306a29e4bbd510dc24e5f9",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadTag.json: %v", err)
	}
}

func TestTag_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetTag.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetTag"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTagClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"59306a29e4bbd510dc24e5f9",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetTag.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.TagContract{
			Name: to.Ptr("59306a29e4bbd510dc24e5f9"),
			Type: to.Ptr("Microsoft.ApiManagement/service/tags"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/tags/59306a29e4bbd510dc24e5f9"),
			Properties: &armapimanagement.TagContractProperties{
				DisplayName: to.Ptr("tag1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TagContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TagContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetTag.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTag_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateTag.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateTag"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTagClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"tagId1",
		armapimanagement.TagCreateUpdateParameters{
			Properties: &armapimanagement.TagContractProperties{
				DisplayName: to.Ptr("tag1"),
			},
		},
		&armapimanagement.TagClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateTag.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.TagContract{
			Name: to.Ptr("tagId1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/tags"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/tags/tagId1"),
			Properties: &armapimanagement.TagContractProperties{
				DisplayName: to.Ptr("tag1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TagContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TagContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateTag.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTag_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateTag.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateTag"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTagClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"temptag",
		"*",
		armapimanagement.TagCreateUpdateParameters{
			Properties: &armapimanagement.TagContractProperties{
				DisplayName: to.Ptr("temp tag"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateTag.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.TagContract{
			Name: to.Ptr("temptag"),
			Type: to.Ptr("Microsoft.ApiManagement/service/tags"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/tags/temptag"),
			Properties: &armapimanagement.TagContractProperties{
				DisplayName: to.Ptr("tag1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TagContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TagContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateTag.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTag_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteTag.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteTag"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTagClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"tagId1",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteTag.json: %v", err)
	}
}

func TestAPIProduct_ListByApis(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiProducts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListApiProducts"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIProductClient("subid", cred, &options)
	pager := client.ListByApis("rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		&armapimanagement.APIProductClientListByApisOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiProducts.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.ProductCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.ProductContract{
				{
					Name: to.Ptr("5600b539c53f5b0062060002"),
					Type: to.Ptr("Microsoft.ApiManagement/service/apis/products"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/5600b539c53f5b0062060002"),
					Properties: &armapimanagement.ProductContractProperties{
						Description:          to.Ptr("Subscribers have completely unlimited access to the API. Administrator approval is required."),
						ApprovalRequired:     to.Ptr(true),
						State:                to.Ptr(armapimanagement.ProductStatePublished),
						SubscriptionRequired: to.Ptr(true),
						SubscriptionsLimit:   to.Ptr[int32](1),
						DisplayName:          to.Ptr("Unlimited"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProductCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProductCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiProducts.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIPolicy_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadApiPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIPolicyClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		armapimanagement.PolicyIDNamePolicy,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiPolicy.json: %v", err)
	}
}

func TestAPIPolicy_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetApiPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIPolicyClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"5600b59475ff190048040001",
		armapimanagement.PolicyIDNamePolicy,
		&armapimanagement.APIPolicyClientGetOptions{Format: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PolicyContract{
			Name: to.Ptr("policy"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/policies"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/5600b59475ff190048040001/policies/policy"),
			Properties: &armapimanagement.PolicyContractProperties{
				Value: to.Ptr("<!--\r\n    IMPORTANT:\r\n    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.\r\n    - Only the <forward-request> policy element can appear within the <backend> section element.\r\n    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.\r\n    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.\r\n    - To add a policy position the cursor at the desired insertion point and click on the round button associated with the policy.\r\n    - To remove a policy, delete the corresponding policy statement from the policy document.\r\n    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.\r\n    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.\r\n    - Policies are applied in the order of their appearance, from the top down.\r\n-->\r\n<policies>\r\n  <inbound>\r\n    <quota-by-key calls=\"5\" bandwidth=\"2\" renewal-period=\"&#x9;P3Y6M4DT12H30M5S\" counter-key=\"ba\" />\r\n    <base />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <log-to-eventhub logger-id=\"apimService1\" partition-key=\"@(context.Subscription.Id)\">\r\n@{\r\n	Random Random = new Random();\r\n				const string Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \";                \r\n                return string.Join(\",\", DateTime.UtcNow, new string(\r\n                    Enumerable.Repeat(Chars, Random.Next(2150400))\r\n                              .Select(s =&gt; s[Random.Next(s.Length)])\r\n                              .ToArray()));\r\n          }                           \r\n                        </log-to-eventhub>\r\n    <base />\r\n  </outbound>\r\n</policies>"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PolicyContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PolicyContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIPolicy_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateApiPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIPolicyClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"5600b57e7e8880006a040001",
		armapimanagement.PolicyIDNamePolicy,
		armapimanagement.PolicyContract{
			Properties: &armapimanagement.PolicyContractProperties{
				Format: to.Ptr(armapimanagement.PolicyContentFormatXML),
				Value:  to.Ptr("<policies> <inbound /> <backend>    <forward-request />  </backend>  <outbound /></policies>"),
			},
		},
		&armapimanagement.APIPolicyClientCreateOrUpdateOptions{IfMatch: to.Ptr("*")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PolicyContract{
			Name: to.Ptr("policy"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/policies"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/5600b57e7e8880006a040001/policies/policy"),
			Properties: &armapimanagement.PolicyContractProperties{
				Value: to.Ptr("<policies>\r\n  <inbound />\r\n  <backend>\r\n    <forward-request />\r\n  </backend>\r\n  <outbound />\r\n</policies>"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PolicyContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PolicyContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiPolicyNonXmlEncoded.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateApiPolicyNonXmlEncoded"},
	})
	client = armapimanagement.NewAPIPolicyClient("subid", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"5600b57e7e8880006a040001",
		armapimanagement.PolicyIDNamePolicy,
		armapimanagement.PolicyContract{
			Properties: &armapimanagement.PolicyContractProperties{
				Format: to.Ptr(armapimanagement.PolicyContentFormatRawxml),
				Value:  to.Ptr("<policies>\r\n     <inbound>\r\n     <base />\r\n  <set-header name=\"newvalue\" exists-action=\"override\">\r\n   <value>\"@(context.Request.Headers.FirstOrDefault(h => h.Ke==\"Via\"))\" </value>\r\n    </set-header>\r\n  </inbound>\r\n      </policies>"),
			},
		},
		&armapimanagement.APIPolicyClientCreateOrUpdateOptions{IfMatch: to.Ptr("*")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiPolicyNonXmlEncoded.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PolicyContract{
			Name: to.Ptr("policy"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/operations/policies"),
			ID:   to.Ptr("/subscriptions/4c1a3bc6-89f9-46fe-a175-5d8984b25095/resourcegroups/Api-DF-West-US/providers/Microsoft.ApiManagement/service/samirmsiservice2/apis/echo-api/operations/create-resource/policies/policy"),
			Properties: &armapimanagement.PolicyContractProperties{
				Value: to.Ptr("<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-header name=\"newvalue\" exists-action=\"override\">\r\n      <value>\"@(context.Request.Headers.FirstOrDefault(h =&gt; h.Ke==\"Via\"))\" </value>\r\n    </set-header>\r\n  </inbound>\r\n</policies>"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PolicyContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PolicyContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiPolicyNonXmlEncoded.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIPolicy_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteApiPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIPolicyClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"loggerId",
		armapimanagement.PolicyIDNamePolicy,
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiPolicy.json: %v", err)
	}
}

func TestAPISchema_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiSchema.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadApiSchema"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPISchemaClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"ec12520d-9d48-4e7b-8f39-698ca2ac63f1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiSchema.json: %v", err)
	}
}

func TestAPISchema_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiSchema.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetApiSchema"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPISchemaClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"59d6bb8f1f7fab13dc67ec9b",
		"ec12520d-9d48-4e7b-8f39-698ca2ac63f1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiSchema.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.SchemaContract{
			Name: to.Ptr("ec12520d-9d48-4e7b-8f39-698ca2ac63f1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/schemas"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/59d6bb8f1f7fab13dc67ec9b/schemas/ec12520d-9d48-4e7b-8f39-698ca2ac63f1"),
			Properties: &armapimanagement.SchemaContractProperties{
				ContentType: to.Ptr("application/vnd.ms-azure-apim.xsd+xml"),
				Document: &armapimanagement.SchemaDocumentProperties{
					Value: to.Ptr("<s:schema elementFormDefault=\"qualified\" targetNamespace=\"http://ws.cdyne.com/WeatherWS/\" xmlns:tns=\"http://ws.cdyne.com/WeatherWS/\" xmlns:s=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://schemas.xmlsoap.org/wsdl/soap12/\" xmlns:mime=\"http://schemas.xmlsoap.org/wsdl/mime/\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" xmlns:tm=\"http://microsoft.com/wsdl/mime/textMatching/\" xmlns:http=\"http://schemas.xmlsoap.org/wsdl/http/\" xmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:apim-wsdltns=\"http://ws.cdyne.com/WeatherWS/\">\r\n  <s:element name=\"GetWeatherInformation\">\r\n    <s:complexType />\r\n  </s:element>\r\n  <s:element name=\"GetWeatherInformationResponse\">\r\n    <s:complexType>\r\n      <s:sequence>\r\n        <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"GetWeatherInformationResult\" type=\"tns:ArrayOfWeatherDescription\" />\r\n      </s:sequence>\r\n    </s:complexType>\r\n  </s:element>\r\n  <s:complexType name=\"ArrayOfWeatherDescription\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"WeatherDescription\" type=\"tns:WeatherDescription\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:complexType name=\"WeatherDescription\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"WeatherID\" type=\"s:short\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Description\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"PictureURL\" type=\"s:string\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:element name=\"GetCityForecastByZIP\">\r\n    <s:complexType>\r\n      <s:sequence>\r\n        <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"ZIP\" type=\"s:string\" />\r\n      </s:sequence>\r\n    </s:complexType>\r\n  </s:element>\r\n  <s:element name=\"GetCityForecastByZIPResponse\">\r\n    <s:complexType>\r\n      <s:sequence>\r\n        <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"GetCityForecastByZIPResult\" type=\"tns:ForecastReturn\" />\r\n      </s:sequence>\r\n    </s:complexType>\r\n  </s:element>\r\n  <s:complexType name=\"ForecastReturn\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"Success\" type=\"s:boolean\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"ResponseText\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"State\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"City\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"WeatherStationCity\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"ForecastResult\" type=\"tns:ArrayOfForecast\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:complexType name=\"ArrayOfForecast\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Forecast\" nillable=\"true\" type=\"tns:Forecast\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:complexType name=\"Forecast\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"Date\" type=\"s:dateTime\" />\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"WeatherID\" type=\"s:short\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Desciption\" type=\"s:string\" />\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"Temperatures\" type=\"tns:temp\" />\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"ProbabilityOfPrecipiation\" type=\"tns:POP\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:complexType name=\"temp\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"MorningLow\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"DaytimeHigh\" type=\"s:string\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:complexType name=\"POP\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Nighttime\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Daytime\" type=\"s:string\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:element name=\"GetCityWeatherByZIP\">\r\n    <s:complexType>\r\n      <s:sequence>\r\n        <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"ZIP\" type=\"s:string\" />\r\n      </s:sequence>\r\n    </s:complexType>\r\n  </s:element>\r\n  <s:element name=\"GetCityWeatherByZIPResponse\">\r\n    <s:complexType>\r\n      <s:sequence>\r\n        <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"GetCityWeatherByZIPResult\" type=\"tns:WeatherReturn\" />\r\n      </s:sequence>\r\n    </s:complexType>\r\n  </s:element>\r\n  <s:complexType name=\"WeatherReturn\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"Success\" type=\"s:boolean\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"ResponseText\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"State\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"City\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"WeatherStationCity\" type=\"s:string\" />\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"WeatherID\" type=\"s:short\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Description\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Temperature\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"RelativeHumidity\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Wind\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Pressure\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Visibility\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"WindChill\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Remarks\" type=\"s:string\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:element name=\"ArrayOfWeatherDescription\" nillable=\"true\" type=\"tns:ArrayOfWeatherDescription\" />\r\n  <s:element name=\"ForecastReturn\" nillable=\"true\" type=\"tns:ForecastReturn\" />\r\n  <s:element name=\"WeatherReturn\" type=\"tns:WeatherReturn\" />\r\n</s:schema>"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SchemaContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SchemaContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiSchema.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPISchema_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiSchema.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateApiSchema"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPISchemaClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"59d6bb8f1f7fab13dc67ec9b",
		"ec12520d-9d48-4e7b-8f39-698ca2ac63f1",
		armapimanagement.SchemaContract{
			Properties: &armapimanagement.SchemaContractProperties{
				ContentType: to.Ptr("application/vnd.ms-azure-apim.xsd+xml"),
				Document: &armapimanagement.SchemaDocumentProperties{
					Value: to.Ptr("<s:schema elementFormDefault=\"qualified\" targetNamespace=\"http://ws.cdyne.com/WeatherWS/\" xmlns:tns=\"http://ws.cdyne.com/WeatherWS/\" xmlns:s=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://schemas.xmlsoap.org/wsdl/soap12/\" xmlns:mime=\"http://schemas.xmlsoap.org/wsdl/mime/\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" xmlns:tm=\"http://microsoft.com/wsdl/mime/textMatching/\" xmlns:http=\"http://schemas.xmlsoap.org/wsdl/http/\" xmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:apim-wsdltns=\"http://ws.cdyne.com/WeatherWS/\">\r\n  <s:element name=\"GetWeatherInformation\">\r\n    <s:complexType />\r\n  </s:element>\r\n  <s:element name=\"GetWeatherInformationResponse\">\r\n    <s:complexType>\r\n      <s:sequence>\r\n        <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"GetWeatherInformationResult\" type=\"tns:ArrayOfWeatherDescription\" />\r\n      </s:sequence>\r\n    </s:complexType>\r\n  </s:element>\r\n  <s:complexType name=\"ArrayOfWeatherDescription\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"WeatherDescription\" type=\"tns:WeatherDescription\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:complexType name=\"WeatherDescription\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"WeatherID\" type=\"s:short\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Description\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"PictureURL\" type=\"s:string\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:element name=\"GetCityForecastByZIP\">\r\n    <s:complexType>\r\n      <s:sequence>\r\n        <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"ZIP\" type=\"s:string\" />\r\n      </s:sequence>\r\n    </s:complexType>\r\n  </s:element>\r\n  <s:element name=\"GetCityForecastByZIPResponse\">\r\n    <s:complexType>\r\n      <s:sequence>\r\n        <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"GetCityForecastByZIPResult\" type=\"tns:ForecastReturn\" />\r\n      </s:sequence>\r\n    </s:complexType>\r\n  </s:element>\r\n  <s:complexType name=\"ForecastReturn\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"Success\" type=\"s:boolean\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"ResponseText\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"State\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"City\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"WeatherStationCity\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"ForecastResult\" type=\"tns:ArrayOfForecast\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:complexType name=\"ArrayOfForecast\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Forecast\" nillable=\"true\" type=\"tns:Forecast\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:complexType name=\"Forecast\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"Date\" type=\"s:dateTime\" />\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"WeatherID\" type=\"s:short\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Desciption\" type=\"s:string\" />\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"Temperatures\" type=\"tns:temp\" />\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"ProbabilityOfPrecipiation\" type=\"tns:POP\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:complexType name=\"temp\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"MorningLow\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"DaytimeHigh\" type=\"s:string\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:complexType name=\"POP\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Nighttime\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Daytime\" type=\"s:string\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:element name=\"GetCityWeatherByZIP\">\r\n    <s:complexType>\r\n      <s:sequence>\r\n        <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"ZIP\" type=\"s:string\" />\r\n      </s:sequence>\r\n    </s:complexType>\r\n  </s:element>\r\n  <s:element name=\"GetCityWeatherByZIPResponse\">\r\n    <s:complexType>\r\n      <s:sequence>\r\n        <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"GetCityWeatherByZIPResult\" type=\"tns:WeatherReturn\" />\r\n      </s:sequence>\r\n    </s:complexType>\r\n  </s:element>\r\n  <s:complexType name=\"WeatherReturn\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"Success\" type=\"s:boolean\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"ResponseText\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"State\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"City\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"WeatherStationCity\" type=\"s:string\" />\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"WeatherID\" type=\"s:short\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Description\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Temperature\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"RelativeHumidity\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Wind\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Pressure\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Visibility\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"WindChill\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Remarks\" type=\"s:string\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:element name=\"ArrayOfWeatherDescription\" nillable=\"true\" type=\"tns:ArrayOfWeatherDescription\" />\r\n  <s:element name=\"ForecastReturn\" nillable=\"true\" type=\"tns:ForecastReturn\" />\r\n  <s:element name=\"WeatherReturn\" type=\"tns:WeatherReturn\" />\r\n</s:schema>"),
				},
			},
		},
		&armapimanagement.APISchemaClientBeginCreateOrUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiSchema.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiSchema.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.SchemaContract{
			Name: to.Ptr("ec12520d-9d48-4e7b-8f39-698ca2ac63f1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/schemas"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/59d6bb8f1f7fab13dc67ec9b/schemas/ec12520d-9d48-4e7b-8f39-698ca2ac63f1"),
			Properties: &armapimanagement.SchemaContractProperties{
				ContentType: to.Ptr("application/vnd.ms-azure-apim.xsd+xml"),
				Document: &armapimanagement.SchemaDocumentProperties{
					Value: to.Ptr("<s:schema elementFormDefault=\"qualified\" targetNamespace=\"http://ws.cdyne.com/WeatherWS/\" xmlns:tns=\"http://ws.cdyne.com/WeatherWS/\" xmlns:s=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://schemas.xmlsoap.org/wsdl/soap12/\" xmlns:mime=\"http://schemas.xmlsoap.org/wsdl/mime/\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" xmlns:tm=\"http://microsoft.com/wsdl/mime/textMatching/\" xmlns:http=\"http://schemas.xmlsoap.org/wsdl/http/\" xmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:apim-wsdltns=\"http://ws.cdyne.com/WeatherWS/\">\r\n  <s:element name=\"GetWeatherInformation\">\r\n    <s:complexType />\r\n  </s:element>\r\n  <s:element name=\"GetWeatherInformationResponse\">\r\n    <s:complexType>\r\n      <s:sequence>\r\n        <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"GetWeatherInformationResult\" type=\"tns:ArrayOfWeatherDescription\" />\r\n      </s:sequence>\r\n    </s:complexType>\r\n  </s:element>\r\n  <s:complexType name=\"ArrayOfWeatherDescription\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"WeatherDescription\" type=\"tns:WeatherDescription\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:complexType name=\"WeatherDescription\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"WeatherID\" type=\"s:short\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Description\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"PictureURL\" type=\"s:string\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:element name=\"GetCityForecastByZIP\">\r\n    <s:complexType>\r\n      <s:sequence>\r\n        <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"ZIP\" type=\"s:string\" />\r\n      </s:sequence>\r\n    </s:complexType>\r\n  </s:element>\r\n  <s:element name=\"GetCityForecastByZIPResponse\">\r\n    <s:complexType>\r\n      <s:sequence>\r\n        <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"GetCityForecastByZIPResult\" type=\"tns:ForecastReturn\" />\r\n      </s:sequence>\r\n    </s:complexType>\r\n  </s:element>\r\n  <s:complexType name=\"ForecastReturn\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"Success\" type=\"s:boolean\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"ResponseText\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"State\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"City\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"WeatherStationCity\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"ForecastResult\" type=\"tns:ArrayOfForecast\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:complexType name=\"ArrayOfForecast\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Forecast\" nillable=\"true\" type=\"tns:Forecast\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:complexType name=\"Forecast\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"Date\" type=\"s:dateTime\" />\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"WeatherID\" type=\"s:short\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Desciption\" type=\"s:string\" />\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"Temperatures\" type=\"tns:temp\" />\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"ProbabilityOfPrecipiation\" type=\"tns:POP\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:complexType name=\"temp\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"MorningLow\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"DaytimeHigh\" type=\"s:string\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:complexType name=\"POP\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Nighttime\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Daytime\" type=\"s:string\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:element name=\"GetCityWeatherByZIP\">\r\n    <s:complexType>\r\n      <s:sequence>\r\n        <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"ZIP\" type=\"s:string\" />\r\n      </s:sequence>\r\n    </s:complexType>\r\n  </s:element>\r\n  <s:element name=\"GetCityWeatherByZIPResponse\">\r\n    <s:complexType>\r\n      <s:sequence>\r\n        <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"GetCityWeatherByZIPResult\" type=\"tns:WeatherReturn\" />\r\n      </s:sequence>\r\n    </s:complexType>\r\n  </s:element>\r\n  <s:complexType name=\"WeatherReturn\">\r\n    <s:sequence>\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"Success\" type=\"s:boolean\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"ResponseText\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"State\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"City\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"WeatherStationCity\" type=\"s:string\" />\r\n      <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"WeatherID\" type=\"s:short\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Description\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Temperature\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"RelativeHumidity\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Wind\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Pressure\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Visibility\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"WindChill\" type=\"s:string\" />\r\n      <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"Remarks\" type=\"s:string\" />\r\n    </s:sequence>\r\n  </s:complexType>\r\n  <s:element name=\"ArrayOfWeatherDescription\" nillable=\"true\" type=\"tns:ArrayOfWeatherDescription\" />\r\n  <s:element name=\"ForecastReturn\" nillable=\"true\" type=\"tns:ForecastReturn\" />\r\n  <s:element name=\"WeatherReturn\" type=\"tns:WeatherReturn\" />\r\n</s:schema>"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SchemaContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SchemaContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiSchema.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPISchema_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiSchema.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteApiSchema"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPISchemaClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"59d5b28d1f7fab116c282650",
		"59d5b28e1f7fab116402044e",
		"*",
		&armapimanagement.APISchemaClientDeleteOptions{Force: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiSchema.json: %v", err)
	}
}

func TestAPIDiagnostic_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiDiagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListApiDiagnostics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIDiagnosticClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		"echo-api",
		&armapimanagement.APIDiagnosticClientListByServiceOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiDiagnostics.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.DiagnosticCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.DiagnosticContract{
				{
					Name: to.Ptr("applicationinsights"),
					Type: to.Ptr("Microsoft.ApiManagement/service/apis/diagnostics"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/echo-api/diagnostics/applicationinsights"),
					Properties: &armapimanagement.DiagnosticContractProperties{
						AlwaysLog: to.Ptr(armapimanagement.AlwaysLogAllErrors),
						Backend: &armapimanagement.PipelineDiagnosticSettings{
							Response: &armapimanagement.HTTPMessageDiagnostic{
								Body: &armapimanagement.BodyDiagnosticSettings{
									Bytes: to.Ptr[int32](100),
								},
								Headers: []*string{},
							},
							Request: &armapimanagement.HTTPMessageDiagnostic{
								Body: &armapimanagement.BodyDiagnosticSettings{
									Bytes: to.Ptr[int32](100),
								},
								Headers: []*string{},
							},
						},
						Frontend: &armapimanagement.PipelineDiagnosticSettings{
							Response: &armapimanagement.HTTPMessageDiagnostic{
								Body: &armapimanagement.BodyDiagnosticSettings{
									Bytes: to.Ptr[int32](100),
								},
								Headers: []*string{},
							},
							Request: &armapimanagement.HTTPMessageDiagnostic{
								Body: &armapimanagement.BodyDiagnosticSettings{
									Bytes: to.Ptr[int32](100),
								},
								Headers: []*string{},
							},
						},
						HTTPCorrelationProtocol: to.Ptr(armapimanagement.HTTPCorrelationProtocolLegacy),
						LogClientIP:             to.Ptr(true),
						LoggerID:                to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/loggers/aisamplingtest"),
						Sampling: &armapimanagement.SamplingSettings{
							Percentage:   to.Ptr[float64](100),
							SamplingType: to.Ptr(armapimanagement.SamplingTypeFixed),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiagnosticCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiagnosticCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiDiagnostics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIDiagnostic_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiDiagnostic.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadApiDiagnostic"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIDiagnosticClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"applicationinsights",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiDiagnostic.json: %v", err)
	}
}

func TestAPIDiagnostic_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiDiagnostic.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetApiDiagnostic"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIDiagnosticClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"applicationinsights",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiDiagnostic.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.DiagnosticContract{
			Name: to.Ptr("applicationinsights"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/diagnostics"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/echo-api/diagnostics/applicationinsights"),
			Properties: &armapimanagement.DiagnosticContractProperties{
				AlwaysLog: to.Ptr(armapimanagement.AlwaysLogAllErrors),
				Backend: &armapimanagement.PipelineDiagnosticSettings{
					Response: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](100),
						},
						Headers: []*string{},
					},
					Request: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](100),
						},
						Headers: []*string{},
					},
				},
				Frontend: &armapimanagement.PipelineDiagnosticSettings{
					Response: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](100),
						},
						Headers: []*string{},
					},
					Request: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](100),
						},
						Headers: []*string{},
					},
				},
				HTTPCorrelationProtocol: to.Ptr(armapimanagement.HTTPCorrelationProtocolLegacy),
				LogClientIP:             to.Ptr(true),
				LoggerID:                to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/loggers/aisamplingtest"),
				Sampling: &armapimanagement.SamplingSettings{
					Percentage:   to.Ptr[float64](100),
					SamplingType: to.Ptr(armapimanagement.SamplingTypeFixed),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiDiagnostic.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIDiagnostic_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiDiagnostic.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateApiDiagnostic"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIDiagnosticClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"applicationinsights",
		armapimanagement.DiagnosticContract{
			Properties: &armapimanagement.DiagnosticContractProperties{
				AlwaysLog: to.Ptr(armapimanagement.AlwaysLogAllErrors),
				Backend: &armapimanagement.PipelineDiagnosticSettings{
					Response: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
					Request: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
				},
				Frontend: &armapimanagement.PipelineDiagnosticSettings{
					Response: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
					Request: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
				},
				LoggerID: to.Ptr("/loggers/applicationinsights"),
				Sampling: &armapimanagement.SamplingSettings{
					Percentage:   to.Ptr[float64](50),
					SamplingType: to.Ptr(armapimanagement.SamplingTypeFixed),
				},
			},
		},
		&armapimanagement.APIDiagnosticClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiDiagnostic.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.DiagnosticContract{
			Name: to.Ptr("applicationinsights"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/diagnostics"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/57d1f7558aa04f15146d9d8a/diagnostics/applicationinsights"),
			Properties: &armapimanagement.DiagnosticContractProperties{
				AlwaysLog: to.Ptr(armapimanagement.AlwaysLogAllErrors),
				Backend: &armapimanagement.PipelineDiagnosticSettings{
					Response: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
					Request: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
				},
				Frontend: &armapimanagement.PipelineDiagnosticSettings{
					Response: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
					Request: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
				},
				LoggerID: to.Ptr("/loggers/applicationinsights"),
				Sampling: &armapimanagement.SamplingSettings{
					Percentage:   to.Ptr[float64](50),
					SamplingType: to.Ptr(armapimanagement.SamplingTypeFixed),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiDiagnostic.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIDiagnostic_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateApiDiagnostic.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateApiDiagnostic"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIDiagnosticClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"echo-api",
		"applicationinsights",
		"*",
		armapimanagement.DiagnosticContract{
			Properties: &armapimanagement.DiagnosticContractProperties{
				AlwaysLog: to.Ptr(armapimanagement.AlwaysLogAllErrors),
				Backend: &armapimanagement.PipelineDiagnosticSettings{
					Response: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
					Request: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
				},
				Frontend: &armapimanagement.PipelineDiagnosticSettings{
					Response: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
					Request: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
				},
				LoggerID: to.Ptr("/loggers/applicationinsights"),
				Sampling: &armapimanagement.SamplingSettings{
					Percentage:   to.Ptr[float64](50),
					SamplingType: to.Ptr(armapimanagement.SamplingTypeFixed),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateApiDiagnostic.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.DiagnosticContract{
			Name: to.Ptr("applicationinsights"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/diagnostics"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/echo-api/diagnostics/applicationinsights"),
			Properties: &armapimanagement.DiagnosticContractProperties{
				AlwaysLog: to.Ptr(armapimanagement.AlwaysLogAllErrors),
				Backend: &armapimanagement.PipelineDiagnosticSettings{
					Response: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](100),
						},
						Headers: []*string{},
					},
					Request: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](100),
						},
						Headers: []*string{},
					},
				},
				Frontend: &armapimanagement.PipelineDiagnosticSettings{
					Response: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](100),
						},
						Headers: []*string{},
					},
					Request: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](100),
						},
						Headers: []*string{},
					},
				},
				HTTPCorrelationProtocol: to.Ptr(armapimanagement.HTTPCorrelationProtocolLegacy),
				LogClientIP:             to.Ptr(true),
				LoggerID:                to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/loggers/aisamplingtest"),
				Sampling: &armapimanagement.SamplingSettings{
					Percentage:   to.Ptr[float64](100),
					SamplingType: to.Ptr(armapimanagement.SamplingTypeFixed),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateApiDiagnostic.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIDiagnostic_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiDiagnostic.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteApiDiagnostic"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIDiagnosticClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"applicationinsights",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiDiagnostic.json: %v", err)
	}
}

func TestAPIIssue_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiIssues.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListApiIssues"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIIssueClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		&armapimanagement.APIIssueClientListByServiceOptions{Filter: nil,
			ExpandCommentsAttachments: nil,
			Top:                       nil,
			Skip:                      nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiIssues.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.IssueCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.IssueContract{
				{
					Name: to.Ptr("57d2ef278aa04f0ad01d6cdc"),
					Type: to.Ptr("Microsoft.ApiManagement/service/apis/issues"),
					ID:   to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/57d1f7558aa04f15146d9d8a/issues/57d2ef278aa04f0ad01d6cdc"),
					Properties: &armapimanagement.IssueContractProperties{
						APIID:       to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/57d1f7558aa04f15146d9d8a"),
						CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T22:21:20.467Z"); return t }()),
						State:       to.Ptr(armapimanagement.StateOpen),
						Description: to.Ptr("New API issue description"),
						Title:       to.Ptr("New API issue"),
						UserID:      to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IssueCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IssueCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiIssues.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIIssue_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiIssue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadApiIssue"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIIssueClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		"57d2ef278aa04f0ad01d6cdc",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiIssue.json: %v", err)
	}
}

func TestAPIIssue_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiIssue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetApiIssue"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIIssueClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		"57d2ef278aa04f0ad01d6cdc",
		&armapimanagement.APIIssueClientGetOptions{ExpandCommentsAttachments: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiIssue.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.IssueContract{
			Name: to.Ptr("57d2ef278aa04f0ad01d6cdc"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/issues"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/57d1f7558aa04f15146d9d8a/issues/57d2ef278aa04f0ad01d6cdc"),
			Properties: &armapimanagement.IssueContractProperties{
				APIID:       to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/57d1f7558aa04f15146d9d8a"),
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T22:21:20.467Z"); return t }()),
				State:       to.Ptr(armapimanagement.StateOpen),
				Description: to.Ptr("New API issue description"),
				Title:       to.Ptr("New API issue"),
				UserID:      to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IssueContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IssueContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiIssue.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIIssue_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiIssue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateApiIssue"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIIssueClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"57d2ef278aa04f0ad01d6cdc",
		armapimanagement.IssueContract{
			Properties: &armapimanagement.IssueContractProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T22:21:20.467Z"); return t }()),
				State:       to.Ptr(armapimanagement.StateOpen),
				Description: to.Ptr("New API issue description"),
				Title:       to.Ptr("New API issue"),
				UserID:      to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/1"),
			},
		},
		&armapimanagement.APIIssueClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiIssue.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.IssueContract{
			Name: to.Ptr("57d2ef278aa04f0ad01d6cdc"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/issues"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/57d1f7558aa04f15146d9d8a/issues/57d2ef278aa04f0ad01d6cdc"),
			Properties: &armapimanagement.IssueContractProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T22:21:20.467Z"); return t }()),
				State:       to.Ptr(armapimanagement.StateOpen),
				Description: to.Ptr("New API issue description"),
				Title:       to.Ptr("New API issue"),
				UserID:      to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IssueContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IssueContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiIssue.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIIssue_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateApiIssue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateApiIssue"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIIssueClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"57d2ef278aa04f0ad01d6cdc",
		"*",
		armapimanagement.IssueUpdateContract{
			Properties: &armapimanagement.IssueUpdateContractProperties{
				State: to.Ptr(armapimanagement.StateClosed),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateApiIssue.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.IssueContract{
			Name: to.Ptr("57d2ef278aa04f0ad01d6cdc"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/issues"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/57d1f7558aa04f15146d9d8a/issues/57d2ef278aa04f0ad01d6cdc"),
			Properties: &armapimanagement.IssueContractProperties{
				APIID:       to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/57d1f7558aa04f15146d9d8a"),
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T22:21:20.467Z"); return t }()),
				State:       to.Ptr(armapimanagement.StateOpen),
				Description: to.Ptr("New API issue description"),
				Title:       to.Ptr("New API issue"),
				UserID:      to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IssueContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IssueContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateApiIssue.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIIssue_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiIssue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteApiIssue"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIIssueClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"57d2ef278aa04f0ad01d6cdc",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiIssue.json: %v", err)
	}
}

func TestAPIIssueComment_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiIssueComments.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListApiIssueComments"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIIssueCommentClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"57d2ef278aa04f0ad01d6cdc",
		&armapimanagement.APIIssueCommentClientListByServiceOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiIssueComments.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.IssueCommentCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.IssueCommentContract{
				{
					Name: to.Ptr("599e29ab193c3c0bd0b3e2fb"),
					Type: to.Ptr("Microsoft.ApiManagement/service/apis/issues/comments"),
					ID:   to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/57d1f7558aa04f15146d9d8a/issues/57d2ef278aa04f0ad01d6cdc/comments/599e29ab193c3c0bd0b3e2fb"),
					Properties: &armapimanagement.IssueCommentContractProperties{
						CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T22:21:20.467Z"); return t }()),
						Text:        to.Ptr("Issue comment."),
						UserID:      to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IssueCommentCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IssueCommentCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiIssueComments.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIIssueComment_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiIssueComment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadApiIssueComment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIIssueCommentClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		"57d2ef278aa04f0ad01d6cdc",
		"599e29ab193c3c0bd0b3e2fb",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiIssueComment.json: %v", err)
	}
}

func TestAPIIssueComment_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiIssueComment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetApiIssueComment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIIssueCommentClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		"57d2ef278aa04f0ad01d6cdc",
		"599e29ab193c3c0bd0b3e2fb",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiIssueComment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.IssueCommentContract{
			Name: to.Ptr("599e29ab193c3c0bd0b3e2fb"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/issues/comments"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/57d1f7558aa04f15146d9d8a/issues/57d2ef278aa04f0ad01d6cdc/comments/599e29ab193c3c0bd0b3e2fb"),
			Properties: &armapimanagement.IssueCommentContractProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T22:21:20.467Z"); return t }()),
				Text:        to.Ptr("Issue comment."),
				UserID:      to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IssueCommentContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IssueCommentContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiIssueComment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIIssueComment_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiIssueComment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateApiIssueComment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIIssueCommentClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"57d2ef278aa04f0ad01d6cdc",
		"599e29ab193c3c0bd0b3e2fb",
		armapimanagement.IssueCommentContract{
			Properties: &armapimanagement.IssueCommentContractProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T22:21:20.467Z"); return t }()),
				Text:        to.Ptr("Issue comment."),
				UserID:      to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/1"),
			},
		},
		&armapimanagement.APIIssueCommentClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiIssueComment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.IssueCommentContract{
			Name: to.Ptr("599e29ab193c3c0bd0b3e2fb"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/issues/comments"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/57d1f7558aa04f15146d9d8a/issues/57d2ef278aa04f0ad01d6cdc/comments/599e29ab193c3c0bd0b3e2fb"),
			Properties: &armapimanagement.IssueCommentContractProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T22:21:20.467Z"); return t }()),
				Text:        to.Ptr("Issue comment."),
				UserID:      to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IssueCommentContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IssueCommentContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiIssueComment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIIssueComment_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiIssueComment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteApiIssueComment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIIssueCommentClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"57d2ef278aa04f0ad01d6cdc",
		"599e29ab193c3c0bd0b3e2fb",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiIssueComment.json: %v", err)
	}
}

func TestAPIIssueAttachment_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiIssueAttachments.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListApiIssueAttachments"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIIssueAttachmentClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"57d2ef278aa04f0ad01d6cdc",
		&armapimanagement.APIIssueAttachmentClientListByServiceOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiIssueAttachments.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.IssueAttachmentCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.IssueAttachmentContract{
				{
					Name: to.Ptr("57d2ef278aa04f0888cba3f3"),
					Type: to.Ptr("Microsoft.ApiManagement/service/apis/issues/attachments"),
					ID:   to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/57d1f7558aa04f15146d9d8a/issues/57d2ef278aa04f0ad01d6cdc/attachments/57d2ef278aa04f0888cba3f3"),
					Properties: &armapimanagement.IssueAttachmentContractProperties{
						Content:       to.Ptr("https://.../image.jpg"),
						ContentFormat: to.Ptr("link"),
						Title:         to.Ptr("Issue attachment."),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IssueAttachmentCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IssueAttachmentCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiIssueAttachments.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIIssueAttachment_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiIssueAttachment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadApiIssueAttachment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIIssueAttachmentClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		"57d2ef278aa04f0ad01d6cdc",
		"57d2ef278aa04f0888cba3f3",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiIssueAttachment.json: %v", err)
	}
}

func TestAPIIssueAttachment_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiIssueAttachment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetApiIssueAttachment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIIssueAttachmentClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		"57d2ef278aa04f0ad01d6cdc",
		"57d2ef278aa04f0888cba3f3",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiIssueAttachment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.IssueAttachmentContract{
			Name: to.Ptr("57d2ef278aa04f0888cba3f3"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/issues/attachments"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/57d1f7558aa04f15146d9d8a/issues/57d2ef278aa04f0ad01d6cdc/attachments/57d2ef278aa04f0888cba3f3"),
			Properties: &armapimanagement.IssueAttachmentContractProperties{
				Content:       to.Ptr("https://.../image.jpg"),
				ContentFormat: to.Ptr("link"),
				Title:         to.Ptr("Issue attachment."),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IssueAttachmentContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IssueAttachmentContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiIssueAttachment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIIssueAttachment_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiIssueAttachment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateApiIssueAttachment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIIssueAttachmentClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"57d2ef278aa04f0ad01d6cdc",
		"57d2ef278aa04f0888cba3f3",
		armapimanagement.IssueAttachmentContract{
			Properties: &armapimanagement.IssueAttachmentContractProperties{
				Content:       to.Ptr("IEJhc2U2NA=="),
				ContentFormat: to.Ptr("image/jpeg"),
				Title:         to.Ptr("Issue attachment."),
			},
		},
		&armapimanagement.APIIssueAttachmentClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiIssueAttachment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.IssueAttachmentContract{
			Name: to.Ptr("57d2ef278aa04f0888cba3f3"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/issues/attachments"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/57d1f7558aa04f15146d9d8a/issues/57d2ef278aa04f0ad01d6cdc/attachments/57d2ef278aa04f0888cba3f3"),
			Properties: &armapimanagement.IssueAttachmentContractProperties{
				Content:       to.Ptr("https://.../image.jpg"),
				ContentFormat: to.Ptr("link"),
				Title:         to.Ptr("Issue attachment."),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IssueAttachmentContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IssueAttachmentContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiIssueAttachment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIIssueAttachment_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiIssueAttachment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteApiIssueAttachment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIIssueAttachmentClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"57d1f7558aa04f15146d9d8a",
		"57d2ef278aa04f0ad01d6cdc",
		"57d2ef278aa04f0888cba3f3",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiIssueAttachment.json: %v", err)
	}
}

func TestAPITagDescription_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiTagDescriptions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListApiTagDescriptions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPITagDescriptionClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		&armapimanagement.APITagDescriptionClientListByServiceOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiTagDescriptions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.TagDescriptionCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.TagDescriptionContract{
				{
					Name: to.Ptr("5600b539c53f5b0062060002"),
					Type: to.Ptr("Microsoft.ApiManagement/service/tags"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/tagDescriptions/5600b539c53f5b0062060002"),
					Properties: &armapimanagement.TagDescriptionContractProperties{
						ExternalDocsDescription: to.Ptr("some additional info"),
						ExternalDocsURL:         to.Ptr("http://some_url.com"),
						DisplayName:             to.Ptr("tag1"),
						TagID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/tags/5600b539c53f5b0062060002"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TagDescriptionCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TagDescriptionCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiTagDescriptions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPITagDescription_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiTagDescription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadApiTagDescription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPITagDescriptionClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"59d6bb8f1f7fab13dc67ec9b",
		"59306a29e4bbd510dc24e5f9",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiTagDescription.json: %v", err)
	}
}

func TestAPITagDescription_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiTagDescription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetApiTagDescription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPITagDescriptionClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"59d6bb8f1f7fab13dc67ec9b",
		"59306a29e4bbd510dc24e5f9",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiTagDescription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.TagDescriptionContract{
			Name: to.Ptr("59306a29e4bbd510dc24e5f9"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/tagDescriptions"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/59d6bb8f1f7fab13dc67ec9b/tagDescriptions/59306a29e4bbd510dc24e5f9"),
			Properties: &armapimanagement.TagDescriptionContractProperties{
				ExternalDocsDescription: to.Ptr("some additional info"),
				ExternalDocsURL:         to.Ptr("http://some_url.com"),
				DisplayName:             to.Ptr("tag1"),
				TagID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/tags/59306a29e4bbd510dc24e5f9"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TagDescriptionContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TagDescriptionContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiTagDescription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPITagDescription_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiTagDescription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateApiTagDescription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPITagDescriptionClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"5931a75ae4bbd512a88c680b",
		"tagId1",
		armapimanagement.TagDescriptionCreateParameters{
			Properties: &armapimanagement.TagDescriptionBaseProperties{
				Description:             to.Ptr("Some description that will be displayed for operation's tag if the tag is assigned to operation of the API"),
				ExternalDocsDescription: to.Ptr("Description of the external docs resource"),
				ExternalDocsURL:         to.Ptr("http://some.url/additionaldoc"),
			},
		},
		&armapimanagement.APITagDescriptionClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiTagDescription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.TagDescriptionContract{
			Name: to.Ptr("tagId1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis/tagDescriptions"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/5931a75ae4bbd512a88c680b/tagDescriptions/tagId1"),
			Properties: &armapimanagement.TagDescriptionContractProperties{
				Description:             to.Ptr("Some description that will be displayed for operation's tag if the tag is assigned to operation of the API"),
				ExternalDocsDescription: to.Ptr("some additional info"),
				ExternalDocsURL:         to.Ptr("http://some_url.com"),
				DisplayName:             to.Ptr("tag1"),
				TagID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/tags/tagId1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TagDescriptionContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TagDescriptionContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiTagDescription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPITagDescription_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiTagDescription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteApiTagDescription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPITagDescriptionClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"59d5b28d1f7fab116c282650",
		"59d5b28e1f7fab116402044e",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiTagDescription.json: %v", err)
	}
}

func TestOperation_ListByTags(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiOperationsByTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListApiOperationsByTags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewOperationClient("subid", cred, &options)
	pager := client.ListByTags("rg1",
		"apimService1",
		"a1",
		&armapimanagement.OperationClientListByTagsOptions{Filter: nil,
			Top:                        nil,
			Skip:                       nil,
			IncludeNotTaggedOperations: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiOperationsByTags.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.TagResourceCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.TagResourceContract{
				{
					Operation: &armapimanagement.OperationTagResourceContractProperties{
						Name:        to.Ptr("Create resource"),
						Method:      to.Ptr("POST"),
						Description: to.Ptr("A demonstration of a POST call based on the echo backend above. The request body is expected to contain JSON-formatted data (see example below). A policy is used to automatically transform any request sent in JSON directly to XML. In a real-world scenario this could be used to enable modern clients to speak to a legacy backend."),
						APIName:     to.Ptr("Echo API"),
						APIRevision: to.Ptr("1"),
						ID:          to.Ptr("/apis/echo-api/operations/create-resource"),
						URLTemplate: to.Ptr("/resource"),
					},
					Tag: &armapimanagement.TagResourceContractProperties{
						Name: to.Ptr("awesomeTag"),
						ID:   to.Ptr("/tags/apitag123"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TagResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TagResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiOperationsByTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIExport_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiExportInOpenApi2dot0.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetApiExportInOpenApi2dot0"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIExportClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"echo-api",
		armapimanagement.ExportFormatSwagger,
		armapimanagement.ExportAPITrue,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiExportInOpenApi2dot0.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIExportResult{
			ExportResultFormat: to.Ptr(armapimanagement.ExportResultFormatSwagger),
			ID:                 to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/echo-api"),
			Value: &armapimanagement.APIExportResultValue{
				Link: to.Ptr("https://apimgmtstkjpszxxxxxxx.blob.core.windows.net/api-export/Swagger Petstore Extensive.json?sv=2015-07-08&sr=b&sig=mxhLsFuOonu8EXIjyFPV%2FnDra0qTIoip7N7MuU%2BTFsA%3D&se=2019-04-10T22:41:31Z&sp=r"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIExportResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIExportResult)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiExportInOpenApi2dot0.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiExportInOpenApi3dot0.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetApiExportInOpenApi3dot0"},
	})
	client = armapimanagement.NewAPIExportClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"apimService1",
		"aid9676",
		armapimanagement.ExportFormatOpenapi,
		armapimanagement.ExportAPITrue,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiExportInOpenApi3dot0.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIExportResult{
			ExportResultFormat: to.Ptr(armapimanagement.ExportResultFormatOpenAPI),
			ID:                 to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/aid9676"),
			Value: &armapimanagement.APIExportResultValue{
				Link: to.Ptr("https: //apimgmtstkjpszxxxxxxx.blob.core.windows.net/api-export/Swagger Petstore.yaml?sv=2015-07-08&sr=b&sig=qqtR1y5iTbz5P7USBduqB5vriIU4gmiGqe0lKVV8j9k%3D&se=2019-04-10T22:40:57Z&sp=r"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIExportResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIExportResult)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiExportInOpenApi3dot0.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIVersionSet_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiVersionSets.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListApiVersionSets"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIVersionSetClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.APIVersionSetClientListByServiceOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiVersionSets.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.APIVersionSetCollection{
			Count: to.Ptr[int64](2),
			Value: []*armapimanagement.APIVersionSetContract{
				{
					Name: to.Ptr("vs1"),
					Type: to.Ptr("Microsoft.ApiManagement/service/api-version-sets"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apiVersionSets/vs1"),
					Properties: &armapimanagement.APIVersionSetContractProperties{
						Description:      to.Ptr("Version configuration"),
						DisplayName:      to.Ptr("api set 1"),
						VersioningScheme: to.Ptr(armapimanagement.VersioningSchemeSegment),
					},
				},
				{
					Name: to.Ptr("vs2"),
					Type: to.Ptr("Microsoft.ApiManagement/service/api-version-sets"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apiVersionSets/vs2"),
					Properties: &armapimanagement.APIVersionSetContractProperties{
						Description:      to.Ptr("Version configuration 2"),
						DisplayName:      to.Ptr("api set 2"),
						VersioningScheme: to.Ptr(armapimanagement.VersioningSchemeQuery),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.APIVersionSetCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.APIVersionSetCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListApiVersionSets.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIVersionSet_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiVersionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadApiVersionSet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIVersionSetClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"vs1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadApiVersionSet.json: %v", err)
	}
}

func TestAPIVersionSet_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiVersionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetApiVersionSet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIVersionSetClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"vs1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiVersionSet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIVersionSetContract{
			Name: to.Ptr("vs1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/api-version-sets"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apiVersionSets/vs1"),
			Properties: &armapimanagement.APIVersionSetContractProperties{
				Description:      to.Ptr("Version configuration"),
				DisplayName:      to.Ptr("Version Set 1"),
				VersioningScheme: to.Ptr(armapimanagement.VersioningSchemeSegment),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIVersionSetContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIVersionSetContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetApiVersionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIVersionSet_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiVersionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateApiVersionSet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIVersionSetClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"api1",
		armapimanagement.APIVersionSetContract{
			Properties: &armapimanagement.APIVersionSetContractProperties{
				Description:      to.Ptr("Version configuration"),
				DisplayName:      to.Ptr("api set 1"),
				VersioningScheme: to.Ptr(armapimanagement.VersioningSchemeSegment),
			},
		},
		&armapimanagement.APIVersionSetClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiVersionSet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIVersionSetContract{
			Name: to.Ptr("api1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/api-version-sets"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apiVersionSets/api1"),
			Properties: &armapimanagement.APIVersionSetContractProperties{
				Description:      to.Ptr("Version configuration"),
				DisplayName:      to.Ptr("api set 1"),
				VersioningScheme: to.Ptr(armapimanagement.VersioningSchemeSegment),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIVersionSetContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIVersionSetContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateApiVersionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIVersionSet_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateApiVersionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateApiVersionSet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIVersionSetClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"vs1",
		"*",
		armapimanagement.APIVersionSetUpdateParameters{
			Properties: &armapimanagement.APIVersionSetUpdateParametersProperties{
				Description:      to.Ptr("Version configuration"),
				DisplayName:      to.Ptr("api set 1"),
				VersioningScheme: to.Ptr(armapimanagement.VersioningSchemeSegment),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateApiVersionSet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIVersionSetContract{
			Name: to.Ptr("vs1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/api-version-sets"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apiVersionSets/vs1"),
			Properties: &armapimanagement.APIVersionSetContractProperties{
				Description:      to.Ptr("Version configuration"),
				DisplayName:      to.Ptr("api set 1"),
				VersioningScheme: to.Ptr(armapimanagement.VersioningSchemeSegment),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIVersionSetContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIVersionSetContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateApiVersionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIVersionSet_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiVersionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteApiVersionSet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAPIVersionSetClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"a1",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteApiVersionSet.json: %v", err)
	}
}

func TestAuthorizationServer_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListAuthorizationServers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListAuthorizationServers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAuthorizationServerClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.AuthorizationServerClientListByServiceOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListAuthorizationServers.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.AuthorizationServerCollection{
			Value: []*armapimanagement.AuthorizationServerContract{
				{
					Name: to.Ptr("newauthServer"),
					Type: to.Ptr("Microsoft.ApiManagement/service/authorizationServers"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/authorizationServers/newauthServer"),
					Properties: &armapimanagement.AuthorizationServerContractProperties{
						Description: to.Ptr("test server"),
						AuthorizationMethods: []*armapimanagement.AuthorizationMethod{
							to.Ptr(armapimanagement.AuthorizationMethodGET)},
						BearerTokenSendingMethods: []*armapimanagement.BearerTokenSendingMethod{
							to.Ptr(armapimanagement.BearerTokenSendingMethodAuthorizationHeader)},
						DefaultScope:               to.Ptr("read write"),
						ResourceOwnerPassword:      to.Ptr("pwd"),
						ResourceOwnerUsername:      to.Ptr("un"),
						SupportState:               to.Ptr(true),
						TokenEndpoint:              to.Ptr("https://www.contoso.com/oauth2/token"),
						AuthorizationEndpoint:      to.Ptr("https://www.contoso.com/oauth2/auth"),
						ClientID:                   to.Ptr("1"),
						ClientRegistrationEndpoint: to.Ptr("https://www.contoso.com/apps"),
						DisplayName:                to.Ptr("test2"),
						GrantTypes: []*armapimanagement.GrantType{
							to.Ptr(armapimanagement.GrantTypeAuthorizationCode),
							to.Ptr(armapimanagement.GrantTypeImplicit)},
					},
				},
				{
					Name: to.Ptr("newauthServer2"),
					Type: to.Ptr("Microsoft.ApiManagement/service/authorizationServers"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/authorizationServers/newauthServer2"),
					Properties: &armapimanagement.AuthorizationServerContractProperties{
						Description: to.Ptr("test server"),
						AuthorizationMethods: []*armapimanagement.AuthorizationMethod{
							to.Ptr(armapimanagement.AuthorizationMethodGET)},
						BearerTokenSendingMethods: []*armapimanagement.BearerTokenSendingMethod{
							to.Ptr(armapimanagement.BearerTokenSendingMethodAuthorizationHeader)},
						ClientAuthenticationMethod: []*armapimanagement.ClientAuthenticationMethod{
							to.Ptr(armapimanagement.ClientAuthenticationMethodBasic)},
						DefaultScope:               to.Ptr("read write"),
						ResourceOwnerPassword:      to.Ptr("pwd"),
						ResourceOwnerUsername:      to.Ptr("un"),
						SupportState:               to.Ptr(true),
						TokenEndpoint:              to.Ptr("https://www.contoso.com/oauth2/token"),
						AuthorizationEndpoint:      to.Ptr("https://www.contoso.com/oauth2/auth"),
						ClientID:                   to.Ptr("1"),
						ClientRegistrationEndpoint: to.Ptr("https://www.contoso.com/apps"),
						DisplayName:                to.Ptr("test3"),
						GrantTypes: []*armapimanagement.GrantType{
							to.Ptr(armapimanagement.GrantTypeAuthorizationCode),
							to.Ptr(armapimanagement.GrantTypeImplicit)},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AuthorizationServerCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AuthorizationServerCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListAuthorizationServers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAuthorizationServer_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadAuthorizationServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadAuthorizationServer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAuthorizationServerClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"newauthServer2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadAuthorizationServer.json: %v", err)
	}
}

func TestAuthorizationServer_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetAuthorizationServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetAuthorizationServer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAuthorizationServerClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"newauthServer2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetAuthorizationServer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.AuthorizationServerContract{
			Name: to.Ptr("newauthServer2"),
			Type: to.Ptr("Microsoft.ApiManagement/service/authorizationServers"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/authorizationServers/newauthServer2"),
			Properties: &armapimanagement.AuthorizationServerContractProperties{
				Description: to.Ptr("test server"),
				AuthorizationMethods: []*armapimanagement.AuthorizationMethod{
					to.Ptr(armapimanagement.AuthorizationMethodGET)},
				BearerTokenSendingMethods: []*armapimanagement.BearerTokenSendingMethod{
					to.Ptr(armapimanagement.BearerTokenSendingMethodAuthorizationHeader)},
				ClientAuthenticationMethod: []*armapimanagement.ClientAuthenticationMethod{
					to.Ptr(armapimanagement.ClientAuthenticationMethodBasic)},
				DefaultScope:               to.Ptr("read write"),
				ResourceOwnerPassword:      to.Ptr("pwd"),
				ResourceOwnerUsername:      to.Ptr("un"),
				SupportState:               to.Ptr(true),
				TokenEndpoint:              to.Ptr("https://www.contoso.com/oauth2/token"),
				AuthorizationEndpoint:      to.Ptr("https://www.contoso.com/oauth2/auth"),
				ClientID:                   to.Ptr("1"),
				ClientRegistrationEndpoint: to.Ptr("https://www.contoso.com/apps"),
				DisplayName:                to.Ptr("test3"),
				GrantTypes: []*armapimanagement.GrantType{
					to.Ptr(armapimanagement.GrantTypeAuthorizationCode),
					to.Ptr(armapimanagement.GrantTypeImplicit)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AuthorizationServerContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AuthorizationServerContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetAuthorizationServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAuthorizationServer_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateAuthorizationServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateAuthorizationServer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAuthorizationServerClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"newauthServer",
		armapimanagement.AuthorizationServerContract{
			Properties: &armapimanagement.AuthorizationServerContractProperties{
				Description: to.Ptr("test server"),
				AuthorizationMethods: []*armapimanagement.AuthorizationMethod{
					to.Ptr(armapimanagement.AuthorizationMethodGET)},
				BearerTokenSendingMethods: []*armapimanagement.BearerTokenSendingMethod{
					to.Ptr(armapimanagement.BearerTokenSendingMethodAuthorizationHeader)},
				DefaultScope:               to.Ptr("read write"),
				ResourceOwnerPassword:      to.Ptr("pwd"),
				ResourceOwnerUsername:      to.Ptr("un"),
				SupportState:               to.Ptr(true),
				TokenEndpoint:              to.Ptr("https://www.contoso.com/oauth2/token"),
				AuthorizationEndpoint:      to.Ptr("https://www.contoso.com/oauth2/auth"),
				ClientID:                   to.Ptr("1"),
				ClientRegistrationEndpoint: to.Ptr("https://www.contoso.com/apps"),
				ClientSecret:               to.Ptr("2"),
				DisplayName:                to.Ptr("test2"),
				GrantTypes: []*armapimanagement.GrantType{
					to.Ptr(armapimanagement.GrantTypeAuthorizationCode),
					to.Ptr(armapimanagement.GrantTypeImplicit)},
			},
		},
		&armapimanagement.AuthorizationServerClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateAuthorizationServer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.AuthorizationServerContract{
			Name: to.Ptr("newauthServer"),
			Type: to.Ptr("Microsoft.ApiManagement/service/authorizationServers"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/authorizationServers/newauthServer"),
			Properties: &armapimanagement.AuthorizationServerContractProperties{
				Description: to.Ptr("test server"),
				AuthorizationMethods: []*armapimanagement.AuthorizationMethod{
					to.Ptr(armapimanagement.AuthorizationMethodGET)},
				BearerTokenSendingMethods: []*armapimanagement.BearerTokenSendingMethod{
					to.Ptr(armapimanagement.BearerTokenSendingMethodAuthorizationHeader)},
				DefaultScope:               to.Ptr("read write"),
				ResourceOwnerPassword:      to.Ptr("pwd"),
				ResourceOwnerUsername:      to.Ptr("un"),
				SupportState:               to.Ptr(true),
				TokenEndpoint:              to.Ptr("https://www.contoso.com/oauth2/token"),
				AuthorizationEndpoint:      to.Ptr("https://www.contoso.com/oauth2/auth"),
				ClientID:                   to.Ptr("1"),
				ClientRegistrationEndpoint: to.Ptr("https://www.contoso.com/apps"),
				DisplayName:                to.Ptr("test2"),
				GrantTypes: []*armapimanagement.GrantType{
					to.Ptr(armapimanagement.GrantTypeAuthorizationCode),
					to.Ptr(armapimanagement.GrantTypeImplicit)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AuthorizationServerContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AuthorizationServerContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateAuthorizationServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAuthorizationServer_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateAuthorizationServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateAuthorizationServer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAuthorizationServerClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"newauthServer",
		"*",
		armapimanagement.AuthorizationServerUpdateContract{
			Properties: &armapimanagement.AuthorizationServerUpdateContractProperties{
				ClientID:     to.Ptr("update"),
				ClientSecret: to.Ptr("updated"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateAuthorizationServer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.AuthorizationServerContract{
			Name: to.Ptr("newauthServer"),
			Type: to.Ptr("Microsoft.ApiManagement/service/authorizationServers"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/authorizationServers/newauthServer"),
			Properties: &armapimanagement.AuthorizationServerContractProperties{
				Description: to.Ptr("test server"),
				AuthorizationMethods: []*armapimanagement.AuthorizationMethod{
					to.Ptr(armapimanagement.AuthorizationMethodGET)},
				BearerTokenSendingMethods: []*armapimanagement.BearerTokenSendingMethod{
					to.Ptr(armapimanagement.BearerTokenSendingMethodAuthorizationHeader)},
				ClientAuthenticationMethod: []*armapimanagement.ClientAuthenticationMethod{
					to.Ptr(armapimanagement.ClientAuthenticationMethodBasic)},
				DefaultScope:               to.Ptr("read write"),
				ResourceOwnerPassword:      to.Ptr("pwd"),
				ResourceOwnerUsername:      to.Ptr("un"),
				SupportState:               to.Ptr(true),
				TokenEndpoint:              to.Ptr("https://www.contoso.com/oauth2/token"),
				AuthorizationEndpoint:      to.Ptr("https://www.contoso.com/oauth2/auth"),
				ClientID:                   to.Ptr("updated"),
				ClientRegistrationEndpoint: to.Ptr("https://www.contoso.com/apps"),
				DisplayName:                to.Ptr("test3"),
				GrantTypes: []*armapimanagement.GrantType{
					to.Ptr(armapimanagement.GrantTypeAuthorizationCode),
					to.Ptr(armapimanagement.GrantTypeImplicit)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AuthorizationServerContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AuthorizationServerContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateAuthorizationServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAuthorizationServer_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteAuthorizationServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteAuthorizationServer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAuthorizationServerClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"newauthServer2",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteAuthorizationServer.json: %v", err)
	}
}

func TestAuthorizationServer_ListSecrets(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementAuthorizationServerListSecrets.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementAuthorizationServerListSecrets"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewAuthorizationServerClient("subid", cred, &options)
	res, err := client.ListSecrets(ctx,
		"rg1",
		"apimService1",
		"newauthServer2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementAuthorizationServerListSecrets.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.AuthorizationServerSecretsContract{
			ClientSecret:          to.Ptr("2"),
			ResourceOwnerPassword: to.Ptr("pwd"),
			ResourceOwnerUsername: to.Ptr("un"),
		}
		if !reflect.DeepEqual(exampleRes, res.AuthorizationServerSecretsContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AuthorizationServerSecretsContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementAuthorizationServerListSecrets.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackend_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListBackends.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListBackends"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewBackendClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.BackendClientListByServiceOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListBackends.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.BackendCollection{
			Count: to.Ptr[int64](2),
			Value: []*armapimanagement.BackendContract{
				{
					Name: to.Ptr("proxybackend"),
					Type: to.Ptr("Microsoft.ApiManagement/service/backends"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/backends/proxybackend"),
					Properties: &armapimanagement.BackendContractProperties{
						Description: to.Ptr("description5308"),
						Credentials: &armapimanagement.BackendCredentialsContract{
							Authorization: &armapimanagement.BackendAuthorizationHeaderCredentials{
								Parameter: to.Ptr("opensesma"),
								Scheme:    to.Ptr("Basic"),
							},
							Header: map[string][]*string{
								"x-my-1": {
									to.Ptr("val1"),
									to.Ptr("val2")},
							},
							Query: map[string][]*string{
								"sv": {
									to.Ptr("xx"),
									to.Ptr("bb"),
									to.Ptr("cc")},
							},
						},
						Proxy: &armapimanagement.BackendProxyContract{
							Password: to.Ptr("<password>"),
							URL:      to.Ptr("http://192.168.1.1:8080"),
							Username: to.Ptr("Contoso\\admin"),
						},
						TLS: &armapimanagement.BackendTLSProperties{
							ValidateCertificateChain: to.Ptr(false),
							ValidateCertificateName:  to.Ptr(false),
						},
						URL:      to.Ptr("https://backendname2644/"),
						Protocol: to.Ptr(armapimanagement.BackendProtocolHTTP),
					},
				},
				{
					Name: to.Ptr("sfbackend"),
					Type: to.Ptr("Microsoft.ApiManagement/service/backends"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/backends/sfbackend"),
					Properties: &armapimanagement.BackendContractProperties{
						Description: to.Ptr("Service Fabric Test App 1"),
						Properties: &armapimanagement.BackendProperties{
							ServiceFabricCluster: &armapimanagement.BackendServiceFabricClusterProperties{
								ClientCertificateID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/cert1"),
								ManagementEndpoints: []*string{
									to.Ptr("https://somecluster.com")},
								MaxPartitionResolutionRetries: to.Ptr[int32](5),
								ServerX509Names: []*armapimanagement.X509CertificateName{
									{
										Name:                        to.Ptr("ServerCommonName1"),
										IssuerCertificateThumbprint: to.Ptr("IssuerCertificateThumbprint1"),
									}},
							},
						},
						URL:      to.Ptr("fabric:/mytestapp/mytestservice"),
						Protocol: to.Ptr(armapimanagement.BackendProtocolHTTP),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BackendCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BackendCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListBackends.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackend_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadBackend.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadBackend"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewBackendClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"sfbackend",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadBackend.json: %v", err)
	}
}

func TestBackend_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetBackend.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetBackend"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewBackendClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"sfbackend",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetBackend.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.BackendContract{
			Name: to.Ptr("sfbackend"),
			Type: to.Ptr("Microsoft.ApiManagement/service/backends"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/backends/sfbackend"),
			Properties: &armapimanagement.BackendContractProperties{
				Description: to.Ptr("Service Fabric Test App 1"),
				Properties: &armapimanagement.BackendProperties{
					ServiceFabricCluster: &armapimanagement.BackendServiceFabricClusterProperties{
						ClientCertificateID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/cert1"),
						ManagementEndpoints: []*string{
							to.Ptr("https://somecluster.com")},
						MaxPartitionResolutionRetries: to.Ptr[int32](5),
						ServerX509Names: []*armapimanagement.X509CertificateName{
							{
								Name:                        to.Ptr("ServerCommonName1"),
								IssuerCertificateThumbprint: to.Ptr("IssuerCertificateThumbprint1"),
							}},
					},
				},
				URL:      to.Ptr("fabric:/mytestapp/mytestservice"),
				Protocol: to.Ptr(armapimanagement.BackendProtocolHTTP),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackendContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackendContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetBackend.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackend_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateBackendProxyBackend.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateBackendProxyBackend"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewBackendClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"proxybackend",
		armapimanagement.BackendContract{
			Properties: &armapimanagement.BackendContractProperties{
				Description: to.Ptr("description5308"),
				Credentials: &armapimanagement.BackendCredentialsContract{
					Authorization: &armapimanagement.BackendAuthorizationHeaderCredentials{
						Parameter: to.Ptr("opensesma"),
						Scheme:    to.Ptr("Basic"),
					},
					Header: map[string][]*string{
						"x-my-1": {
							to.Ptr("val1"),
							to.Ptr("val2")},
					},
					Query: map[string][]*string{
						"sv": {
							to.Ptr("xx"),
							to.Ptr("bb"),
							to.Ptr("cc")},
					},
				},
				Proxy: &armapimanagement.BackendProxyContract{
					Password: to.Ptr("<password>"),
					URL:      to.Ptr("http://192.168.1.1:8080"),
					Username: to.Ptr("Contoso\\admin"),
				},
				TLS: &armapimanagement.BackendTLSProperties{
					ValidateCertificateChain: to.Ptr(true),
					ValidateCertificateName:  to.Ptr(true),
				},
				URL:      to.Ptr("https://backendname2644/"),
				Protocol: to.Ptr(armapimanagement.BackendProtocolHTTP),
			},
		},
		&armapimanagement.BackendClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateBackendProxyBackend.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.BackendContract{
			Name: to.Ptr("proxybackend"),
			Type: to.Ptr("Microsoft.ApiManagement/service/backends"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/backends/proxybackend"),
			Properties: &armapimanagement.BackendContractProperties{
				Description: to.Ptr("description5308"),
				Credentials: &armapimanagement.BackendCredentialsContract{
					Authorization: &armapimanagement.BackendAuthorizationHeaderCredentials{
						Parameter: to.Ptr("opensesma"),
						Scheme:    to.Ptr("Basic"),
					},
					Header: map[string][]*string{
						"x-my-1": {
							to.Ptr("val1"),
							to.Ptr("val2")},
					},
					Query: map[string][]*string{
						"sv": {
							to.Ptr("xx"),
							to.Ptr("bb"),
							to.Ptr("cc")},
					},
				},
				Proxy: &armapimanagement.BackendProxyContract{
					Password: to.Ptr("<password>"),
					URL:      to.Ptr("http://192.168.1.1:8080"),
					Username: to.Ptr("Contoso\\admin"),
				},
				TLS: &armapimanagement.BackendTLSProperties{
					ValidateCertificateChain: to.Ptr(false),
					ValidateCertificateName:  to.Ptr(false),
				},
				URL:      to.Ptr("https://backendname2644/"),
				Protocol: to.Ptr(armapimanagement.BackendProtocolHTTP),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackendContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackendContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateBackendProxyBackend.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateBackendServiceFabric.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateBackendServiceFabric"},
	})
	client = armapimanagement.NewBackendClient("subid", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"sfbackend",
		armapimanagement.BackendContract{
			Properties: &armapimanagement.BackendContractProperties{
				Description: to.Ptr("Service Fabric Test App 1"),
				Properties: &armapimanagement.BackendProperties{
					ServiceFabricCluster: &armapimanagement.BackendServiceFabricClusterProperties{
						ClientCertificateID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/cert1"),
						ManagementEndpoints: []*string{
							to.Ptr("https://somecluster.com")},
						MaxPartitionResolutionRetries: to.Ptr[int32](5),
						ServerX509Names: []*armapimanagement.X509CertificateName{
							{
								Name:                        to.Ptr("ServerCommonName1"),
								IssuerCertificateThumbprint: to.Ptr("IssuerCertificateThumbprint1"),
							}},
					},
				},
				URL:      to.Ptr("fabric:/mytestapp/mytestservice"),
				Protocol: to.Ptr(armapimanagement.BackendProtocolHTTP),
			},
		},
		&armapimanagement.BackendClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateBackendServiceFabric.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.BackendContract{
			Name: to.Ptr("sfbackend"),
			Type: to.Ptr("Microsoft.ApiManagement/service/backends"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/backends/sfbackend"),
			Properties: &armapimanagement.BackendContractProperties{
				Description: to.Ptr("Service Fabric Test App 1"),
				Properties: &armapimanagement.BackendProperties{
					ServiceFabricCluster: &armapimanagement.BackendServiceFabricClusterProperties{
						ClientCertificateID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/cert1"),
						ManagementEndpoints: []*string{
							to.Ptr("https://somecluster.com")},
						MaxPartitionResolutionRetries: to.Ptr[int32](5),
						ServerX509Names: []*armapimanagement.X509CertificateName{
							{
								Name:                        to.Ptr("ServerCommonName1"),
								IssuerCertificateThumbprint: to.Ptr("IssuerCertificateThumbprint1"),
							}},
					},
				},
				URL:      to.Ptr("fabric:/mytestapp/mytestservice"),
				Protocol: to.Ptr(armapimanagement.BackendProtocolHTTP),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackendContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackendContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateBackendServiceFabric.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackend_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateBackend.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateBackend"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewBackendClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"proxybackend",
		"*",
		armapimanagement.BackendUpdateParameters{
			Properties: &armapimanagement.BackendUpdateParameterProperties{
				Description: to.Ptr("description5308"),
				TLS: &armapimanagement.BackendTLSProperties{
					ValidateCertificateChain: to.Ptr(false),
					ValidateCertificateName:  to.Ptr(true),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateBackend.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.BackendContract{
			Name: to.Ptr("proxybackend"),
			Type: to.Ptr("Microsoft.ApiManagement/service/backends"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/backends/proxybackend"),
			Properties: &armapimanagement.BackendContractProperties{
				Description: to.Ptr("description5308"),
				Credentials: &armapimanagement.BackendCredentialsContract{
					Authorization: &armapimanagement.BackendAuthorizationHeaderCredentials{
						Parameter: to.Ptr("opensesma"),
						Scheme:    to.Ptr("Basic"),
					},
					Header: map[string][]*string{
						"x-my-1": {
							to.Ptr("val1"),
							to.Ptr("val2")},
					},
					Query: map[string][]*string{
						"sv": {
							to.Ptr("xx"),
							to.Ptr("bb"),
							to.Ptr("cc")},
					},
				},
				Proxy: &armapimanagement.BackendProxyContract{
					Password: to.Ptr("<password>"),
					URL:      to.Ptr("http://192.168.1.1:8080"),
					Username: to.Ptr("Contoso\\admin"),
				},
				TLS: &armapimanagement.BackendTLSProperties{
					ValidateCertificateChain: to.Ptr(false),
					ValidateCertificateName:  to.Ptr(true),
				},
				URL:      to.Ptr("https://backendname2644/"),
				Protocol: to.Ptr(armapimanagement.BackendProtocolHTTP),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackendContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackendContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateBackend.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackend_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteBackend.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteBackend"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewBackendClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"sfbackend",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteBackend.json: %v", err)
	}
}

func TestBackend_Reconnect(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementBackendReconnect.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementBackendReconnect"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewBackendClient("subid", cred, &options)
	_, err := client.Reconnect(ctx,
		"rg1",
		"apimService1",
		"proxybackend",
		&armapimanagement.BackendClientReconnectOptions{Parameters: &armapimanagement.BackendReconnectContract{
			Properties: &armapimanagement.BackendReconnectProperties{
				After: to.Ptr("PT3S"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementBackendReconnect.json: %v", err)
	}
}

func TestCache_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListCaches.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListCaches"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewCacheClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.CacheClientListByServiceOptions{Top: nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListCaches.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.CacheCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.CacheContract{
				{
					Name: to.Ptr("c1"),
					Type: to.Ptr("Microsoft.ApiManagement/service/caches"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/caches/c1"),
					Properties: &armapimanagement.CacheContractProperties{
						Description:      to.Ptr("Redis cache instances in West India"),
						ConnectionString: to.Ptr("{{5f7fbca77a891a2200f3db38}}"),
						ResourceID:       to.Ptr("https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redis/apimservice1"),
						UseFromLocation:  to.Ptr("default"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CacheCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CacheCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListCaches.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCache_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadCache.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadCache"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewCacheClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadCache.json: %v", err)
	}
}

func TestCache_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetCache.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetCache"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewCacheClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"c1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetCache.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.CacheContract{
			Name: to.Ptr("c1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/caches"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/caches/c1"),
			Properties: &armapimanagement.CacheContractProperties{
				Description:      to.Ptr("Redis cache instances in West India"),
				ConnectionString: to.Ptr("{{5f7fbca77a891a2200f3db38}}"),
				ResourceID:       to.Ptr("https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redis/apimservice1"),
				UseFromLocation:  to.Ptr("default"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CacheContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CacheContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetCache.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCache_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateCache.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateCache"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewCacheClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"c1",
		armapimanagement.CacheContract{
			Properties: &armapimanagement.CacheContractProperties{
				Description:      to.Ptr("Redis cache instances in West India"),
				ConnectionString: to.Ptr("apim.redis.cache.windows.net:6380,password=xc,ssl=True,abortConnect=False"),
				ResourceID:       to.Ptr("https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redis/apimservice1"),
				UseFromLocation:  to.Ptr("default"),
			},
		},
		&armapimanagement.CacheClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateCache.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.CacheContract{
			Name: to.Ptr("c1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/caches"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/caches/c1"),
			Properties: &armapimanagement.CacheContractProperties{
				Description:      to.Ptr("Redis cache instances in West India"),
				ConnectionString: to.Ptr("{{5f7fbca77a891a2200f3db38}}"),
				ResourceID:       to.Ptr("https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redis/apimservice1"),
				UseFromLocation:  to.Ptr("default"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CacheContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CacheContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateCache.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCache_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateCache.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateCache"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewCacheClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"c1",
		"*",
		armapimanagement.CacheUpdateParameters{
			Properties: &armapimanagement.CacheUpdateProperties{
				UseFromLocation: to.Ptr("westindia"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateCache.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.CacheContract{
			Name: to.Ptr("c1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/caches"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/caches/c1"),
			Properties: &armapimanagement.CacheContractProperties{
				Description:      to.Ptr("Redis cache instances in West India"),
				ConnectionString: to.Ptr("{{5f7fbca77a891a2200f3db38}}"),
				ResourceID:       to.Ptr("https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redis/apimservice1"),
				UseFromLocation:  to.Ptr("westindia"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CacheContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CacheContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateCache.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCache_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteCache.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteCache"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewCacheClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"southindia",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteCache.json: %v", err)
	}
}

func TestCertificate_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListCertificates.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListCertificates"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewCertificateClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.CertificateClientListByServiceOptions{Filter: nil,
			Top:                     nil,
			Skip:                    nil,
			IsKeyVaultRefreshFailed: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListCertificates.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.CertificateCollection{
			Count: to.Ptr[int64](2),
			Value: []*armapimanagement.CertificateContract{
				{
					Name: to.Ptr("templateCert1"),
					Type: to.Ptr("Microsoft.ApiManagement/service/certificates"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/kjoshiarmtemplateCert1"),
					Properties: &armapimanagement.CertificateContractProperties{
						ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-23T17:03:41Z"); return t }()),
						Subject:        to.Ptr("CN=mutual-authcert"),
						Thumbprint:     to.Ptr("EBA************************48594A6"),
					},
				},
				{
					Name: to.Ptr("templateCertkv"),
					Type: to.Ptr("Microsoft.ApiManagement/service/certificates"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/templateCertkv"),
					Properties: &armapimanagement.CertificateContractProperties{
						ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2037-01-01T07:00:00Z"); return t }()),
						KeyVault: &armapimanagement.KeyVaultContractProperties{
							IdentityClientID: to.Ptr("ceaa6b06-c00f-43ef-99ac-f53d1fe876a0"),
							SecretIdentifier: to.Ptr("https://rpbvtkeyvaultintegration.vault-int.azure-int.net/secrets/msitestingCert"),
							LastStatus: &armapimanagement.KeyVaultLastAccessStatusContractProperties{
								Code:         to.Ptr("Success"),
								TimeStampUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-22T00:24:53.3191468Z"); return t }()),
							},
						},
						Subject:    to.Ptr("CN=*.msitesting.net"),
						Thumbprint: to.Ptr("EA**********************9AD690"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CertificateCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CertificateCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListCertificates.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificate_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadCertificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewCertificateClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"templateCert1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadCertificate.json: %v", err)
	}
}

func TestCertificate_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetCertificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewCertificateClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"templateCert1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetCertificate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.CertificateContract{
			Name: to.Ptr("templateCert1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/certificates"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/templateCert1"),
			Properties: &armapimanagement.CertificateContractProperties{
				ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-23T17:03:41Z"); return t }()),
				Subject:        to.Ptr("CN=mutual-authcert"),
				Thumbprint:     to.Ptr("EBA**********************8594A6"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CertificateContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CertificateContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetCertificate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetCertificateWithKeyVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetCertificateWithKeyVault"},
	})
	client = armapimanagement.NewCertificateClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"apimService1",
		"templateCertkv",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetCertificateWithKeyVault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.CertificateContract{
			Name: to.Ptr("templateCertkv"),
			Type: to.Ptr("Microsoft.ApiManagement/service/certificates"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/templateCertkv"),
			Properties: &armapimanagement.CertificateContractProperties{
				ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2037-01-01T07:00:00Z"); return t }()),
				KeyVault: &armapimanagement.KeyVaultContractProperties{
					IdentityClientID: to.Ptr("ceaa6b06-c00f-43ef-99ac-f53d1fe876a0"),
					SecretIdentifier: to.Ptr("https://rpbvtkeyvaultintegration.vault-int.azure-int.net/secrets/msitestingCert"),
					LastStatus: &armapimanagement.KeyVaultLastAccessStatusContractProperties{
						Code:         to.Ptr("Success"),
						TimeStampUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-22T00:24:53.3191468Z"); return t }()),
					},
				},
				Subject:    to.Ptr("CN=*.msitesting.net"),
				Thumbprint: to.Ptr("EA**********************9AD690"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CertificateContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CertificateContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetCertificateWithKeyVault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificate_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateCertificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewCertificateClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"tempcert",
		armapimanagement.CertificateCreateOrUpdateParameters{
			Properties: &armapimanagement.CertificateCreateOrUpdateProperties{
				Data:     to.Ptr("****************Base 64 Encoded Certificate *******************************"),
				Password: to.Ptr("****Certificate Password******"),
			},
		},
		&armapimanagement.CertificateClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateCertificate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.CertificateContract{
			Name: to.Ptr("tempcert"),
			Type: to.Ptr("Microsoft.ApiManagement/service/certificates"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/tempcert"),
			Properties: &armapimanagement.CertificateContractProperties{
				ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-17T21:55:07+00:00"); return t }()),
				Subject:        to.Ptr("CN=contoso.com"),
				Thumbprint:     to.Ptr("*******************3"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CertificateContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CertificateContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateCertificate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateCertificateWithKeyVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateCertificateWithKeyVault"},
	})
	client = armapimanagement.NewCertificateClient("subid", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"templateCertkv",
		armapimanagement.CertificateCreateOrUpdateParameters{
			Properties: &armapimanagement.CertificateCreateOrUpdateProperties{
				KeyVault: &armapimanagement.KeyVaultContractCreateProperties{
					IdentityClientID: to.Ptr("ceaa6b06-c00f-43ef-99ac-f53d1fe876a0"),
					SecretIdentifier: to.Ptr("https://rpbvtkeyvaultintegration.vault-int.azure-int.net/secrets/msitestingCert"),
				},
			},
		},
		&armapimanagement.CertificateClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateCertificateWithKeyVault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.CertificateContract{
			Name: to.Ptr("templateCertkv"),
			Type: to.Ptr("Microsoft.ApiManagement/service/certificates"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/templateCertkv"),
			Properties: &armapimanagement.CertificateContractProperties{
				ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2037-01-01T07:00:00Z"); return t }()),
				KeyVault: &armapimanagement.KeyVaultContractProperties{
					IdentityClientID: to.Ptr("ceaa6b06-c00f-43ef-99ac-f53d1fe876a0"),
					SecretIdentifier: to.Ptr("https://rpbvtkeyvaultintegration.vault-int.azure-int.net/secrets/msitestingCert"),
					LastStatus: &armapimanagement.KeyVaultLastAccessStatusContractProperties{
						Code:         to.Ptr("Success"),
						TimeStampUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-22T00:24:53.3191468Z"); return t }()),
					},
				},
				Subject:    to.Ptr("CN=*.msitesting.net"),
				Thumbprint: to.Ptr("EA**********************9AD690"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CertificateContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CertificateContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateCertificateWithKeyVault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificate_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteCertificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewCertificateClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"tempcert",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteCertificate.json: %v", err)
	}
}

func TestCertificate_RefreshSecret(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementRefreshCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementRefreshCertificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewCertificateClient("subid", cred, &options)
	res, err := client.RefreshSecret(ctx,
		"rg1",
		"apimService1",
		"templateCertkv",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementRefreshCertificate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.CertificateContract{
			Name: to.Ptr("templateCertkv"),
			Type: to.Ptr("Microsoft.ApiManagement/service/certificates"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/templateCertkv"),
			Properties: &armapimanagement.CertificateContractProperties{
				ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2037-01-01T07:00:00Z"); return t }()),
				KeyVault: &armapimanagement.KeyVaultContractProperties{
					IdentityClientID: to.Ptr("ceaa6b06-c00f-43ef-99ac-f53d1fe876a0"),
					SecretIdentifier: to.Ptr("https://rpbvtkeyvaultintegration.vault-int.azure-int.net/secrets/msitestingCert"),
					LastStatus: &armapimanagement.KeyVaultLastAccessStatusContractProperties{
						Code:         to.Ptr("Success"),
						TimeStampUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-22T00:24:53.3191468Z"); return t }()),
					},
				},
				Subject:    to.Ptr("CN=*.msitesting.net"),
				Thumbprint: to.Ptr("EA**********************9AD690"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CertificateContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CertificateContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementRefreshCertificate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIManagementClient_PerformConnectivityCheckAsync(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPerformConnectivityCheckHttpConnect.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HTTP Connectivity Check"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewClient("subid", cred, &options)
	poller, err := client.BeginPerformConnectivityCheckAsync(ctx,
		"rg1",
		"apimService1",
		armapimanagement.ConnectivityCheckRequest{
			Destination: &armapimanagement.ConnectivityCheckRequestDestination{
				Address: to.Ptr("https://microsoft.com"),
				Port:    to.Ptr[int64](3306),
			},
			ProtocolConfiguration: &armapimanagement.ConnectivityCheckRequestProtocolConfiguration{
				HTTPConfiguration: &armapimanagement.ConnectivityCheckRequestProtocolConfigurationHTTPConfiguration{
					Method: to.Ptr(armapimanagement.MethodGET),
					Headers: []*armapimanagement.HTTPHeader{
						{
							Name:  to.Ptr("Authorization"),
							Value: to.Ptr("Bearer myPreciousToken"),
						}},
					ValidStatusCodes: []*int64{
						to.Ptr[int64](200),
						to.Ptr[int64](204)},
				},
			},
			Source: &armapimanagement.ConnectivityCheckRequestSource{
				Region: to.Ptr("northeurope"),
			},
			Protocol: to.Ptr(armapimanagement.ConnectivityCheckProtocolHTTPS),
		},
		&armapimanagement.ClientBeginPerformConnectivityCheckAsyncOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPerformConnectivityCheckHttpConnect.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPerformConnectivityCheckHttpConnect.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ConnectivityCheckResponse{
			AvgLatencyInMs:   to.Ptr[int64](260),
			ConnectionStatus: to.Ptr(armapimanagement.ConnectionStatus("Reachable")),
			Hops: []*armapimanagement.ConnectivityHop{
				{
					Type:    to.Ptr("Source"),
					Address: to.Ptr("20.82.216.48"),
					ID:      to.Ptr("c60e2296-5ebc-48cc-80e8-7e6d2981e7b2"),
					Issues:  []*armapimanagement.ConnectivityIssue{},
					NextHopIDs: []*string{
						to.Ptr("26aa44e7-04f1-462f-aa5d-5951957b5650")},
					ResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1"),
				},
				{
					Type:       to.Ptr("Internet"),
					Address:    to.Ptr("40.113.200.201"),
					ID:         to.Ptr("26aa44e7-04f1-462f-aa5d-5951957b5650"),
					Issues:     []*armapimanagement.ConnectivityIssue{},
					NextHopIDs: []*string{},
				}},
			MaxLatencyInMs: to.Ptr[int64](281),
			MinLatencyInMs: to.Ptr[int64](250),
			ProbesFailed:   to.Ptr[int64](0),
			ProbesSent:     to.Ptr[int64](3),
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectivityCheckResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectivityCheckResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPerformConnectivityCheckHttpConnect.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPerformConnectivityCheck.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TCP Connectivity Check"},
	})
	client = armapimanagement.NewClient("subid", cred, &options)
	poller, err = client.BeginPerformConnectivityCheckAsync(ctx,
		"rg1",
		"apimService1",
		armapimanagement.ConnectivityCheckRequest{
			Destination: &armapimanagement.ConnectivityCheckRequestDestination{
				Address: to.Ptr("8.8.8.8"),
				Port:    to.Ptr[int64](53),
			},
			PreferredIPVersion: to.Ptr(armapimanagement.PreferredIPVersionIPv4),
			Source: &armapimanagement.ConnectivityCheckRequestSource{
				Region: to.Ptr("northeurope"),
			},
		},
		&armapimanagement.ClientBeginPerformConnectivityCheckAsyncOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPerformConnectivityCheck.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPerformConnectivityCheck.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ConnectivityCheckResponse{
			AvgLatencyInMs:   to.Ptr[int64](1),
			ConnectionStatus: to.Ptr(armapimanagement.ConnectionStatusConnected),
			Hops: []*armapimanagement.ConnectivityHop{
				{
					Type:    to.Ptr("Source"),
					Address: to.Ptr("10.1.1.4"),
					ID:      to.Ptr("7dbbe7aa-60ba-4650-831e-63d775d38e9e"),
					Issues:  []*armapimanagement.ConnectivityIssue{},
					NextHopIDs: []*string{
						to.Ptr("75c8d819-b208-4584-a311-1aa45ce753f9")},
					ResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1"),
				},
				{
					Type:       to.Ptr("Internet"),
					Address:    to.Ptr("8.8.8.8"),
					ID:         to.Ptr("75c8d819-b208-4584-a311-1aa45ce753f9"),
					Issues:     []*armapimanagement.ConnectivityIssue{},
					NextHopIDs: []*string{},
				}},
			MaxLatencyInMs: to.Ptr[int64](4),
			MinLatencyInMs: to.Ptr[int64](1),
			ProbesFailed:   to.Ptr[int64](0),
			ProbesSent:     to.Ptr[int64](100),
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectivityCheckResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectivityCheckResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPerformConnectivityCheck.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContentType_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListContentTypes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListContentTypes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewContentTypeClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListContentTypes.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.ContentTypeCollection{
			Value: []*armapimanagement.ContentTypeContract{
				{
					Name: to.Ptr("page"),
					Type: to.Ptr("Microsoft.ApiManagement/service/contentTypes"),
					ID:   to.Ptr("/contentTypes/page"),
					Properties: &armapimanagement.ContentTypeContractProperties{
						Name: to.Ptr("Page"),
						Schema: map[string]interface{}{
							"additionalProperties": false,
							"properties": map[string]interface{}{
								"en_us": map[string]interface{}{
									"type":                 "object",
									"additionalProperties": false,
									"properties": map[string]interface{}{
										"description": map[string]interface{}{
											"type":        "string",
											"description": "Page description. This property gets included in SEO attributes.",
											"indexed":     true,
											"title":       "Description",
										},
										"documentId": map[string]interface{}{
											"type":        "string",
											"description": "Reference to page content document.",
											"title":       "Document ID",
										},
										"keywords": map[string]interface{}{
											"type":        "string",
											"description": "Page keywords. This property gets included in SEO attributes.",
											"indexed":     true,
											"title":       "Keywords",
										},
										"permalink": map[string]interface{}{
											"type":        "string",
											"description": "Page permalink, e.g. '/about'.",
											"indexed":     true,
											"title":       "Permalink",
										},
										"title": map[string]interface{}{
											"type":        "string",
											"description": "Page title. This property gets included in SEO attributes.",
											"indexed":     true,
											"title":       "Title",
										},
									},
									"required": []interface{}{
										"title",
										"permalink",
										"documentId",
									},
								},
							},
						},
						Description: to.Ptr("A regular page"),
						Version:     to.Ptr("1.0.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ContentTypeCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ContentTypeCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListContentTypes.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContentType_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetContentType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetContentType"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewContentTypeClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"page",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetContentType.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ContentTypeContract{
			Name: to.Ptr("page"),
			Type: to.Ptr("Microsoft.ApiManagement/service/contentTypes"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/contentTypes/page"),
			Properties: &armapimanagement.ContentTypeContractProperties{
				Name: to.Ptr("Page"),
				Schema: map[string]interface{}{
					"additionalProperties": false,
					"properties": map[string]interface{}{
						"en_us": map[string]interface{}{
							"type":                 "object",
							"additionalProperties": false,
							"properties": map[string]interface{}{
								"description": map[string]interface{}{
									"type":        "string",
									"description": "Page description. This property gets included in SEO attributes.",
									"indexed":     true,
									"title":       "Description",
								},
								"documentId": map[string]interface{}{
									"type":        "string",
									"description": "Reference to page content document.",
									"title":       "Document ID",
								},
								"keywords": map[string]interface{}{
									"type":        "string",
									"description": "Page keywords. This property gets included in SEO attributes.",
									"indexed":     true,
									"title":       "Keywords",
								},
								"permalink": map[string]interface{}{
									"type":        "string",
									"description": "Page permalink, e.g. '/about'.",
									"indexed":     true,
									"title":       "Permalink",
								},
								"title": map[string]interface{}{
									"type":        "string",
									"description": "Page title. This property gets included in SEO attributes.",
									"indexed":     true,
									"title":       "Title",
								},
							},
							"required": []interface{}{
								"title",
								"permalink",
								"documentId",
							},
						},
					},
				},
				Description: to.Ptr("A regular page"),
				Version:     to.Ptr("1.0.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ContentTypeContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContentTypeContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetContentType.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContentType_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateContentType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateContentType"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewContentTypeClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"page",
		&armapimanagement.ContentTypeClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateContentType.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ContentTypeContract{
			Name: to.Ptr("page"),
			Type: to.Ptr("Microsoft.ApiManagement/service/contentTypes"),
			ID:   to.Ptr("/contentTypes/page"),
			Properties: &armapimanagement.ContentTypeContractProperties{
				Name: to.Ptr("Page"),
				Schema: map[string]interface{}{
					"additionalProperties": false,
					"properties": map[string]interface{}{
						"en_us": map[string]interface{}{
							"type":                 "object",
							"additionalProperties": false,
							"properties": map[string]interface{}{
								"description": map[string]interface{}{
									"type":        "string",
									"description": "Page description. This property gets included in SEO attributes.",
									"indexed":     true,
									"title":       "Description",
								},
								"documentId": map[string]interface{}{
									"type":        "string",
									"description": "Reference to page content document.",
									"title":       "Document ID",
								},
								"keywords": map[string]interface{}{
									"type":        "string",
									"description": "Page keywords. This property gets included in SEO attributes.",
									"indexed":     true,
									"title":       "Keywords",
								},
								"permalink": map[string]interface{}{
									"type":        "string",
									"description": "Page permalink, e.g. '/about'.",
									"indexed":     true,
									"title":       "Permalink",
								},
								"title": map[string]interface{}{
									"type":        "string",
									"description": "Page title. This property gets included in SEO attributes.",
									"indexed":     true,
									"title":       "Title",
								},
							},
							"required": []interface{}{
								"title",
								"permalink",
								"documentId",
							},
						},
					},
				},
				Description: to.Ptr("A regular page"),
				Version:     to.Ptr("1.0.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ContentTypeContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContentTypeContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateContentType.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContentType_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteContentType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteContentType"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewContentTypeClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"page",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteContentType.json: %v", err)
	}
}

func TestContentItem_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListContentTypeContentItems.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListContentTypeContentItems"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewContentItemClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		"page",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListContentTypeContentItems.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.ContentItemCollection{
			Value: []*armapimanagement.ContentItemContract{
				{
					Name: to.Ptr("4e3cf6a5-574a-ba08-1f23-2e7a38faa6d8"),
					Type: to.Ptr("Microsoft.ApiManagement/service/contentTypes/contentItems"),
					ID:   to.Ptr("/contentTypes/page/contentItems/4e3cf6a5-574a-ba08-1f23-2e7a38faa6d8"),
					Properties: map[string]interface{}{
						"en_us": map[string]interface{}{
							"description": "Short story about the company.",
							"documentId":  "contentTypes/document/contentItems/4e3cf6a5-574a-ba08-1f23-2e7a38faa6d8",
							"keywords":    "company, about",
							"permalink":   "/about",
							"title":       "About",
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ContentItemCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ContentItemCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListContentTypeContentItems.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContentItem_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadContentTypeContentItem.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadContentTypeContentItem"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewContentItemClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"page",
		"4e3cf6a5-574a-ba08-1f23-2e7a38faa6d8",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadContentTypeContentItem.json: %v", err)
	}
}

func TestContentItem_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetContentTypeContentItem.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetContentTypeContentItem"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewContentItemClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"page",
		"4e3cf6a5-574a-ba08-1f23-2e7a38faa6d8",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetContentTypeContentItem.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ContentItemContract{
			Name: to.Ptr("4e3cf6a5-574a-ba08-1f23-2e7a38faa6d8"),
			Type: to.Ptr("Microsoft.ApiManagement/service/contentTypes/contentItems"),
			ID:   to.Ptr("/contentTypes/page/contentItems/4e3cf6a5-574a-ba08-1f23-2e7a38faa6d8"),
			Properties: map[string]interface{}{
				"en_us": map[string]interface{}{
					"description": "Short story about the company.",
					"documentId":  "contentTypes/document/contentItems/4e3cf6a5-574a-ba08-1f23-2e7a38faa6d8",
					"keywords":    "company, about",
					"permalink":   "/about",
					"title":       "About",
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ContentItemContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContentItemContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetContentTypeContentItem.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContentItem_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateContentTypeContentItem.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateContentTypeContentItem"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewContentItemClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"page",
		"4e3cf6a5-574a-ba08-1f23-2e7a38faa6d8",
		&armapimanagement.ContentItemClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateContentTypeContentItem.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ContentItemContract{
			Name: to.Ptr("4e3cf6a5-574a-ba08-1f23-2e7a38faa6d8"),
			Type: to.Ptr("Microsoft.ApiManagement/service/contentTypes/contentItems"),
			ID:   to.Ptr("/contentTypes/page/contentItems/4e3cf6a5-574a-ba08-1f23-2e7a38faa6d8"),
			Properties: map[string]interface{}{
				"en_us": map[string]interface{}{
					"description": "Short story about the company.",
					"documentId":  "contentTypes/document/contentItems/4e3cf6a5-574a-ba08-1f23-2e7a38faa6d8",
					"keywords":    "company, about",
					"permalink":   "/about",
					"title":       "About",
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ContentItemContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContentItemContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateContentTypeContentItem.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContentItem_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteContentTypeContentItem.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteContentTypeContentItem"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewContentItemClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"page",
		"4e3cf6a5-574a-ba08-1f23-2e7a38faa6d8",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteContentTypeContentItem.json: %v", err)
	}
}

func TestDeletedServices_ListBySubscription(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeletedServicesListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeletedServicesListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewDeletedServicesClient("subid", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeletedServicesListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.DeletedServicesCollection{
			Value: []*armapimanagement.DeletedServiceContract{
				{
					Name:     to.Ptr("apimService3"),
					Type:     to.Ptr("Microsoft.ApiManagement/deletedservices"),
					ID:       to.Ptr("/subscriptions/subid/providers/Microsoft.ApiManagement/locations/westus/deletedservices/apimService3"),
					Location: to.Ptr("West US"),
					Properties: &armapimanagement.DeletedServiceContractProperties{
						DeletionDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-27T15:33:55.5426123Z"); return t }()),
						ScheduledPurgeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-27T15:33:55.5426123Z"); return t }()),
						ServiceID:          to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService3"),
					},
				},
				{
					Name:     to.Ptr("apimService"),
					Type:     to.Ptr("Microsoft.ApiManagement/deletedservices"),
					ID:       to.Ptr("/subscriptions/subid/providers/Microsoft.ApiManagement/locations/westus2/deletedservices/apimService"),
					Location: to.Ptr("West US 2"),
					Properties: &armapimanagement.DeletedServiceContractProperties{
						DeletionDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-27T15:33:55.5426123Z"); return t }()),
						ScheduledPurgeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-27T15:33:55.5426123Z"); return t }()),
						ServiceID:          to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeletedServicesCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeletedServicesCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeletedServicesListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeletedServices_GetByName(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetDeletedServiceByName.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetDeletedServiceByName"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewDeletedServicesClient("subid", cred, &options)
	res, err := client.GetByName(ctx,
		"apimService3",
		"westus",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetDeletedServiceByName.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.DeletedServiceContract{
			Name:     to.Ptr("apimService3"),
			Type:     to.Ptr("Microsoft.ApiManagement/deletedservices"),
			ID:       to.Ptr("/subscriptions/subid/providers/Microsoft.ApiManagement/locations/westus/deletedservices/apimService3"),
			Location: to.Ptr("West US"),
			Properties: &armapimanagement.DeletedServiceContractProperties{
				DeletionDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-27T15:33:55.5426123Z"); return t }()),
				ScheduledPurgeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-27T15:33:55.5426123Z"); return t }()),
				ServiceID:          to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService3"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeletedServiceContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeletedServiceContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetDeletedServiceByName.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeletedServices_Purge(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeletedServicesPurge.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeletedServicesPurge"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewDeletedServicesClient("subid", cred, &options)
	poller, err := client.BeginPurge(ctx,
		"apimService3",
		"westus",
		&armapimanagement.DeletedServicesClientBeginPurgeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeletedServicesPurge.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeletedServicesPurge.json: %v", err)
	}
}

func TestAPIManagementOperations_List(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListOperations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.OperationListResult{
			Value: []*armapimanagement.Operation{
				{
					Name: to.Ptr("Microsoft.ApiManagement/service/write"),
					Display: &armapimanagement.OperationDisplay{
						Description: to.Ptr("Create a new instance of API Management Service"),
						Operation:   to.Ptr("Create a new instance of API Management Service"),
						Provider:    to.Ptr("Microsoft API Management"),
						Resource:    to.Ptr("Service"),
					},
				},
				{
					Name: to.Ptr("Microsoft.ApiManagement/service/read"),
					Display: &armapimanagement.OperationDisplay{
						Description: to.Ptr("Read metadata for an API Management Service instance"),
						Operation:   to.Ptr("Read metadata for an API Management Service instance"),
						Provider:    to.Ptr("Microsoft API Management"),
						Resource:    to.Ptr("Service"),
					},
				},
				{
					Name: to.Ptr("Microsoft.ApiManagement/service/delete"),
					Display: &armapimanagement.OperationDisplay{
						Description: to.Ptr("Delete API Management Service instance"),
						Operation:   to.Ptr("Delete API Management Service instance"),
						Provider:    to.Ptr("Microsoft API Management"),
						Resource:    to.Ptr("Service"),
					},
				},
				{
					Name: to.Ptr("Microsoft.ApiManagement/service/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armapimanagement.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for API Management service"),
						Operation:   to.Ptr("Write diagnostic setting"),
						Provider:    to.Ptr("Microsoft API Management"),
						Resource:    to.Ptr("Service"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.ApiManagement/service/tenant/operationResults/read"),
					Display: &armapimanagement.OperationDisplay{
						Description: to.Ptr("Get list of operation results or Get result of a specific operation"),
						Operation:   to.Ptr("Get operation results or Get operation result"),
						Provider:    to.Ptr("Microsoft API Management"),
						Resource:    to.Ptr("Results of async operations"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIManagementService_Restore(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementRestoreWithAccessKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementRestoreService"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewServiceClient("subid", cred, &options)
	poller, err := client.BeginRestore(ctx,
		"rg1",
		"apimService1",
		armapimanagement.ServiceBackupRestoreParameters{
			AccessKey:      to.Ptr("**************************************************"),
			AccessType:     to.Ptr(armapimanagement.AccessTypeAccessKey),
			BackupName:     to.Ptr("apimService1backup_2017_03_19"),
			ContainerName:  to.Ptr("backupContainer"),
			StorageAccount: to.Ptr("teststorageaccount"),
		},
		&armapimanagement.ServiceClientBeginRestoreOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementRestoreWithAccessKey.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementRestoreWithAccessKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceResource{
			Name: to.Ptr("apimService1"),
			Type: to.Ptr("Microsoft.ApiManagement/service"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
				"tag3": to.Ptr("value3"),
			},
			Etag:     to.Ptr("AAAAAAACXok="),
			Location: to.Ptr("West US"),
			Properties: &armapimanagement.ServiceProperties{
				AdditionalLocations: []*armapimanagement.AdditionalLocation{
					{
						DisableGateway:     to.Ptr(true),
						GatewayRegionalURL: to.Ptr("https://apimService1-eastus-01.regional.azure-api.net"),
						Location:           to.Ptr("East US"),
						PublicIPAddresses: []*string{
							to.Ptr("23.101.138.153")},
						SKU: &armapimanagement.ServiceSKUProperties{
							Name:     to.Ptr(armapimanagement.SKUTypePremium),
							Capacity: to.Ptr[int32](1),
						},
					}},
				APIVersionConstraint: &armapimanagement.APIVersionConstraint{
					MinAPIVersion: to.Ptr("2019-01-01"),
				},
				CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-18T06:26:20.3348609Z"); return t }()),
				CustomProperties: map[string]*string{
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":           to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168":    to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":         to.Ptr("False"),
				},
				DeveloperPortalURL: to.Ptr("https://apimService1.developer.azure-api.net"),
				DisableGateway:     to.Ptr(false),
				GatewayRegionalURL: to.Ptr("https://apimService1-westus-01.regional.azure-api.net"),
				GatewayURL:         to.Ptr("https://apimService1.azure-api.net"),
				HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
					{
						Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
						DefaultSSLBinding:          to.Ptr(false),
						HostName:                   to.Ptr("apimService1.azure-api.net"),
						NegotiateClientCertificate: to.Ptr(false),
					},
					{
						Type: to.Ptr(armapimanagement.HostnameTypeProxy),
						Certificate: &armapimanagement.CertificateInformation{
							Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2036-01-01T07:00:00+00:00"); return t }()),
							Subject:    to.Ptr("CN=*.msitesting.net"),
							Thumbprint: to.Ptr("8E989XXXXXXXXXXXXXXXXB9C2C91F1D174FDB3A2"),
						},
						DefaultSSLBinding:          to.Ptr(true),
						HostName:                   to.Ptr("gateway1.msitesting.net"),
						NegotiateClientCertificate: to.Ptr(false),
					},
					{
						Type: to.Ptr(armapimanagement.HostnameTypeManagement),
						Certificate: &armapimanagement.CertificateInformation{
							Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2036-01-01T07:00:00+00:00"); return t }()),
							Subject:    to.Ptr("CN=*.msitesting.net"),
							Thumbprint: to.Ptr("8E989XXXXXXXXXXXXXXXXB9C2C91F1D174FDB3A2"),
						},
						DefaultSSLBinding:          to.Ptr(false),
						HostName:                   to.Ptr("mgmt.msitesting.net"),
						NegotiateClientCertificate: to.Ptr(false),
					},
					{
						Type: to.Ptr(armapimanagement.HostnameTypePortal),
						Certificate: &armapimanagement.CertificateInformation{
							Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2036-01-01T07:00:00+00:00"); return t }()),
							Subject:    to.Ptr("CN=*.msitesting.net"),
							Thumbprint: to.Ptr("8E989XXXXXXXXXXXXXXXXB9C2C91F1D174FDB3A2"),
						},
						DefaultSSLBinding:          to.Ptr(false),
						HostName:                   to.Ptr("portal1.msitesting.net"),
						NegotiateClientCertificate: to.Ptr(false),
					}},
				ManagementAPIURL:        to.Ptr("https://apimService1.management.azure-api.net"),
				NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
				PortalURL:               to.Ptr("https://apimService1.portal.azure-api.net"),
				ProvisioningState:       to.Ptr("Succeeded"),
				PublicIPAddresses: []*string{
					to.Ptr("13.91.32.113")},
				ScmURL:                  to.Ptr("https://apimService1.scm.azure-api.net"),
				TargetProvisioningState: to.Ptr(""),
				VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
				PublisherEmail:          to.Ptr("apim@autorestsdk.com"),
				PublisherName:           to.Ptr("autorestsdk"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypePremium),
				Capacity: to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementRestoreWithAccessKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIManagementService_Backup(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementBackupWithAccessKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementBackupWithAccessKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewServiceClient("subid", cred, &options)
	poller, err := client.BeginBackup(ctx,
		"rg1",
		"apimService1",
		armapimanagement.ServiceBackupRestoreParameters{
			AccessKey:      to.Ptr("**************************************************"),
			AccessType:     to.Ptr(armapimanagement.AccessTypeAccessKey),
			BackupName:     to.Ptr("apimService1backup_2017_03_19"),
			ContainerName:  to.Ptr("backupContainer"),
			StorageAccount: to.Ptr("teststorageaccount"),
		},
		&armapimanagement.ServiceClientBeginBackupOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementBackupWithAccessKey.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementBackupWithAccessKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceResource{
			Name: to.Ptr("apimService1"),
			Type: to.Ptr("Microsoft.ApiManagement/service"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
				"tag3": to.Ptr("value3"),
			},
			Etag:     to.Ptr("AAAAAAACXok="),
			Location: to.Ptr("West US"),
			Properties: &armapimanagement.ServiceProperties{
				AdditionalLocations: []*armapimanagement.AdditionalLocation{
					{
						DisableGateway:     to.Ptr(true),
						GatewayRegionalURL: to.Ptr("https://apimService1-eastus-01.regional.azure-api.net"),
						Location:           to.Ptr("East US"),
						PublicIPAddresses: []*string{
							to.Ptr("23.101.138.153")},
						SKU: &armapimanagement.ServiceSKUProperties{
							Name:     to.Ptr(armapimanagement.SKUTypePremium),
							Capacity: to.Ptr[int32](1),
						},
					}},
				APIVersionConstraint: &armapimanagement.APIVersionConstraint{
					MinAPIVersion: to.Ptr("2019-01-01"),
				},
				CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-18T06:26:20.3348609Z"); return t }()),
				CustomProperties: map[string]*string{
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":           to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168":    to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":         to.Ptr("False"),
				},
				DeveloperPortalURL: to.Ptr("https://apimService1.developer.azure-api.net"),
				DisableGateway:     to.Ptr(false),
				GatewayRegionalURL: to.Ptr("https://apimService1-westus-01.regional.azure-api.net"),
				GatewayURL:         to.Ptr("https://apimService1.azure-api.net"),
				HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
					{
						Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
						DefaultSSLBinding:          to.Ptr(false),
						HostName:                   to.Ptr("apimService1.azure-api.net"),
						NegotiateClientCertificate: to.Ptr(false),
					},
					{
						Type: to.Ptr(armapimanagement.HostnameTypeProxy),
						Certificate: &armapimanagement.CertificateInformation{
							Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2036-01-01T07:00:00+00:00"); return t }()),
							Subject:    to.Ptr("CN=*.msitesting.net"),
							Thumbprint: to.Ptr("8E989XXXXXXXXXXXXXXXXB9C2C91F1D174FDB3A2"),
						},
						DefaultSSLBinding:          to.Ptr(true),
						HostName:                   to.Ptr("gateway1.msitesting.net"),
						NegotiateClientCertificate: to.Ptr(false),
					},
					{
						Type: to.Ptr(armapimanagement.HostnameTypeManagement),
						Certificate: &armapimanagement.CertificateInformation{
							Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2036-01-01T07:00:00+00:00"); return t }()),
							Subject:    to.Ptr("CN=*.msitesting.net"),
							Thumbprint: to.Ptr("8E989XXXXXXXXXXXXXXXXB9C2C91F1D174FDB3A2"),
						},
						DefaultSSLBinding:          to.Ptr(false),
						HostName:                   to.Ptr("mgmt.msitesting.net"),
						NegotiateClientCertificate: to.Ptr(false),
					},
					{
						Type: to.Ptr(armapimanagement.HostnameTypePortal),
						Certificate: &armapimanagement.CertificateInformation{
							Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2036-01-01T07:00:00+00:00"); return t }()),
							Subject:    to.Ptr("CN=*.msitesting.net"),
							Thumbprint: to.Ptr("8E989XXXXXXXXXXXXXXXXB9C2C91F1D174FDB3A2"),
						},
						DefaultSSLBinding:          to.Ptr(false),
						HostName:                   to.Ptr("portal1.msitesting.net"),
						NegotiateClientCertificate: to.Ptr(false),
					}},
				ManagementAPIURL:        to.Ptr("https://apimService1.management.azure-api.net"),
				NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
				PortalURL:               to.Ptr("https://apimService1.portal.azure-api.net"),
				ProvisioningState:       to.Ptr("Succeeded"),
				PublicIPAddresses: []*string{
					to.Ptr("13.91.32.113")},
				ScmURL:                  to.Ptr("https://apimService1.scm.azure-api.net"),
				TargetProvisioningState: to.Ptr(""),
				VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
				PublisherEmail:          to.Ptr("apim@autorestsdk.com"),
				PublisherName:           to.Ptr("autorestsdk"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypePremium),
				Capacity: to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementBackupWithAccessKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementBackupWithSystemManagedIdentity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementBackupWithSystemManagedIdentity"},
	})
	client = armapimanagement.NewServiceClient("subid", cred, &options)
	poller, err = client.BeginBackup(ctx,
		"rg1",
		"apimService1",
		armapimanagement.ServiceBackupRestoreParameters{
			AccessType:     to.Ptr(armapimanagement.AccessTypeSystemAssignedManagedIdentity),
			BackupName:     to.Ptr("backup5"),
			ContainerName:  to.Ptr("apim-backups"),
			StorageAccount: to.Ptr("contosorpstorage"),
		},
		&armapimanagement.ServiceClientBeginBackupOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementBackupWithSystemManagedIdentity.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementBackupWithSystemManagedIdentity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceResource{
			Name: to.Ptr("apimService1"),
			Type: to.Ptr("Microsoft.ApiManagement/service"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1"),
			Tags: map[string]*string{
				"Owner": to.Ptr("apimService1"),
			},
			Etag: to.Ptr("AAAAAAAQM8o="),
			Identity: &armapimanagement.ServiceIdentity{
				Type:        to.Ptr(armapimanagement.ApimIdentityTypeSystemAssignedUserAssigned),
				PrincipalID: to.Ptr("XXXXX-5fb4-4916-95d4-64b306f9d924"),
				TenantID:    to.Ptr("XXXXX-86f1-XXXXX-91ab-2d7cd011db47"),
				UserAssignedIdentities: map[string]*armapimanagement.UserIdentityProperties{
					"/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/rg1UserIdentity": {
						ClientID:    to.Ptr("XXXXX-a154-4830-XXXX-46a12da1a1e2"),
						PrincipalID: to.Ptr("XXXXX-a100-4478-XXXX-d65d98118ba0"),
					},
					"/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/vpnpremium": {
						ClientID:    to.Ptr("XXXX-6328-4db2-XXXX-ab0e3e7806cf"),
						PrincipalID: to.Ptr("XXXXX-9208-4128-af2d-a10d2af9b5a3"),
					},
				},
			},
			Location: to.Ptr("Central US EUAP"),
			Properties: &armapimanagement.ServiceProperties{
				CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-23T16:26:47.8637967Z"); return t }()),
				CustomProperties: map[string]*string{
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":           to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168":    to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":         to.Ptr("False"),
				},
				DeveloperPortalURL: to.Ptr("https://apimService1.developer.azure-api.net"),
				DisableGateway:     to.Ptr(false),
				GatewayRegionalURL: to.Ptr("https://apimService1-centraluseuap-01.regional.azure-api.net"),
				GatewayURL:         to.Ptr("https://apimService1.azure-api.net"),
				HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
					{
						Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
						CertificateSource:          to.Ptr(armapimanagement.CertificateSourceBuiltIn),
						DefaultSSLBinding:          to.Ptr(true),
						HostName:                   to.Ptr("apimService1.azure-api.net"),
						NegotiateClientCertificate: to.Ptr(false),
					}},
				ManagementAPIURL:        to.Ptr("https://apimService1.management.azure-api.net"),
				NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
				PlatformVersion:         to.Ptr(armapimanagement.PlatformVersionStv1),
				PortalURL:               to.Ptr("https://apimService1.portal.azure-api.net"),
				ProvisioningState:       to.Ptr("Succeeded"),
				PublicIPAddresses: []*string{
					to.Ptr("52.XXXX.160.66")},
				PublicNetworkAccess:     to.Ptr(armapimanagement.PublicNetworkAccessEnabled),
				ScmURL:                  to.Ptr("https://apimService1.scm.azure-api.net"),
				TargetProvisioningState: to.Ptr(""),
				VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
				PublisherEmail:          to.Ptr("apimService1@corp.microsoft.com"),
				PublisherName:           to.Ptr("MS"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypePremium),
				Capacity: to.Ptr[int32](1),
			},
			SystemData: &armapimanagement.SystemData{
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-30T06:24:57.0008037Z"); return t }()),
				LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
				LastModifiedByType: to.Ptr(armapimanagement.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementBackupWithSystemManagedIdentity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementBackupWithUserAssignedManagedIdentity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementBackupWithUserAssignedManagedIdentity"},
	})
	client = armapimanagement.NewServiceClient("subid", cred, &options)
	poller, err = client.BeginBackup(ctx,
		"rg1",
		"apimService1",
		armapimanagement.ServiceBackupRestoreParameters{
			AccessType:     to.Ptr(armapimanagement.AccessTypeUserAssignedManagedIdentity),
			BackupName:     to.Ptr("backup5"),
			ClientID:       to.Ptr("XXXXX-a154-4830-XXXX-46a12da1a1e2"),
			ContainerName:  to.Ptr("apim-backups"),
			StorageAccount: to.Ptr("contosorpstorage"),
		},
		&armapimanagement.ServiceClientBeginBackupOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementBackupWithUserAssignedManagedIdentity.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementBackupWithUserAssignedManagedIdentity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceResource{
			Name: to.Ptr("apimService1"),
			Type: to.Ptr("Microsoft.ApiManagement/service"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1"),
			Tags: map[string]*string{
				"Owner": to.Ptr("apimService1"),
			},
			Etag: to.Ptr("AAAAAAAQM8o="),
			Identity: &armapimanagement.ServiceIdentity{
				Type:        to.Ptr(armapimanagement.ApimIdentityTypeSystemAssignedUserAssigned),
				PrincipalID: to.Ptr("XXXXX-5fb4-4916-95d4-64b306f9d924"),
				TenantID:    to.Ptr("XXXXX-86f1-XXXXX-91ab-2d7cd011db47"),
				UserAssignedIdentities: map[string]*armapimanagement.UserIdentityProperties{
					"/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/rg1UserIdentity": {
						ClientID:    to.Ptr("XXXXX-a154-4830-XXXX-46a12da1a1e2"),
						PrincipalID: to.Ptr("XXXXX-a100-4478-XXXX-d65d98118ba0"),
					},
					"/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/vpnpremium": {
						ClientID:    to.Ptr("XXXX-6328-4db2-XXXX-ab0e3e7806cf"),
						PrincipalID: to.Ptr("XXXXX-9208-4128-af2d-a10d2af9b5a3"),
					},
				},
			},
			Location: to.Ptr("Central US EUAP"),
			Properties: &armapimanagement.ServiceProperties{
				CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-23T16:26:47.8637967Z"); return t }()),
				CustomProperties: map[string]*string{
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":           to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168":    to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":         to.Ptr("False"),
				},
				DeveloperPortalURL: to.Ptr("https://apimService1.developer.azure-api.net"),
				DisableGateway:     to.Ptr(false),
				GatewayRegionalURL: to.Ptr("https://apimService1-centraluseuap-01.regional.azure-api.net"),
				GatewayURL:         to.Ptr("https://apimService1.azure-api.net"),
				HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
					{
						Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
						CertificateSource:          to.Ptr(armapimanagement.CertificateSourceBuiltIn),
						DefaultSSLBinding:          to.Ptr(true),
						HostName:                   to.Ptr("apimService1.azure-api.net"),
						NegotiateClientCertificate: to.Ptr(false),
					}},
				ManagementAPIURL:        to.Ptr("https://apimService1.management.azure-api.net"),
				NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
				PlatformVersion:         to.Ptr(armapimanagement.PlatformVersionStv1),
				PortalURL:               to.Ptr("https://apimService1.portal.azure-api.net"),
				ProvisioningState:       to.Ptr("Succeeded"),
				PublicIPAddresses: []*string{
					to.Ptr("52.XXXX.160.66")},
				PublicNetworkAccess:     to.Ptr(armapimanagement.PublicNetworkAccessEnabled),
				ScmURL:                  to.Ptr("https://apimService1.scm.azure-api.net"),
				TargetProvisioningState: to.Ptr(""),
				VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
				PublisherEmail:          to.Ptr("apimService1@corp.microsoft.com"),
				PublisherName:           to.Ptr("MS"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypePremium),
				Capacity: to.Ptr[int32](1),
			},
			SystemData: &armapimanagement.SystemData{
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-30T06:24:57.0008037Z"); return t }()),
				LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
				LastModifiedByType: to.Ptr(armapimanagement.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementBackupWithUserAssignedManagedIdentity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIManagementService_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateMultiRegionServiceWithCustomHostname.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateMultiRegionServiceWithCustomHostname"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewServiceClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		armapimanagement.ServiceResource{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
				"tag3": to.Ptr("value3"),
			},
			Location: to.Ptr("West US"),
			Properties: &armapimanagement.ServiceProperties{
				AdditionalLocations: []*armapimanagement.AdditionalLocation{
					{
						DisableGateway: to.Ptr(true),
						Location:       to.Ptr("East US"),
						SKU: &armapimanagement.ServiceSKUProperties{
							Name:     to.Ptr(armapimanagement.SKUTypePremium),
							Capacity: to.Ptr[int32](1),
						},
					}},
				APIVersionConstraint: &armapimanagement.APIVersionConstraint{
					MinAPIVersion: to.Ptr("2019-01-01"),
				},
				HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
					{
						Type:                to.Ptr(armapimanagement.HostnameTypeProxy),
						CertificatePassword: to.Ptr("Password"),
						DefaultSSLBinding:   to.Ptr(true),
						EncodedCertificate:  to.Ptr("****** Base 64 Encoded Certificate ************"),
						HostName:            to.Ptr("gateway1.msitesting.net"),
					},
					{
						Type:                to.Ptr(armapimanagement.HostnameTypeManagement),
						CertificatePassword: to.Ptr("Password"),
						EncodedCertificate:  to.Ptr("****** Base 64 Encoded Certificate ************"),
						HostName:            to.Ptr("mgmt.msitesting.net"),
					},
					{
						Type:                to.Ptr(armapimanagement.HostnameTypePortal),
						CertificatePassword: to.Ptr("Password"),
						EncodedCertificate:  to.Ptr("****** Base 64 Encoded Certificate ************"),
						HostName:            to.Ptr("portal1.msitesting.net"),
					}},
				VirtualNetworkType: to.Ptr(armapimanagement.VirtualNetworkTypeNone),
				PublisherEmail:     to.Ptr("apim@autorestsdk.com"),
				PublisherName:      to.Ptr("autorestsdk"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypePremium),
				Capacity: to.Ptr[int32](1),
			},
		},
		&armapimanagement.ServiceClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateMultiRegionServiceWithCustomHostname.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateMultiRegionServiceWithCustomHostname.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceResource{
			Name: to.Ptr("apimService1"),
			Type: to.Ptr("Microsoft.ApiManagement/service"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
				"tag3": to.Ptr("value3"),
			},
			Etag:     to.Ptr("AAAAAAACXok="),
			Location: to.Ptr("West US"),
			Properties: &armapimanagement.ServiceProperties{
				AdditionalLocations: []*armapimanagement.AdditionalLocation{
					{
						DisableGateway:     to.Ptr(true),
						GatewayRegionalURL: to.Ptr("https://apimService1-eastus-01.regional.azure-api.net"),
						Location:           to.Ptr("East US"),
						PublicIPAddresses: []*string{
							to.Ptr("23.101.138.153")},
						SKU: &armapimanagement.ServiceSKUProperties{
							Name:     to.Ptr(armapimanagement.SKUTypePremium),
							Capacity: to.Ptr[int32](1),
						},
					}},
				APIVersionConstraint: &armapimanagement.APIVersionConstraint{
					MinAPIVersion: to.Ptr("2019-01-01"),
				},
				CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-18T06:26:20.3348609Z"); return t }()),
				CustomProperties: map[string]*string{
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":           to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168":    to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":         to.Ptr("False"),
				},
				DeveloperPortalURL: to.Ptr("https://apimService1.developer.azure-api.net"),
				DisableGateway:     to.Ptr(false),
				GatewayRegionalURL: to.Ptr("https://apimService1-westus-01.regional.azure-api.net"),
				GatewayURL:         to.Ptr("https://apimService1.azure-api.net"),
				HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
					{
						Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
						DefaultSSLBinding:          to.Ptr(false),
						HostName:                   to.Ptr("apimService1.azure-api.net"),
						NegotiateClientCertificate: to.Ptr(false),
					},
					{
						Type: to.Ptr(armapimanagement.HostnameTypeProxy),
						Certificate: &armapimanagement.CertificateInformation{
							Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2036-01-01T07:00:00+00:00"); return t }()),
							Subject:    to.Ptr("CN=*.msitesting.net"),
							Thumbprint: to.Ptr("8E989XXXXXXXXXXXXXXXXF1D174FDB3A2"),
						},
						DefaultSSLBinding:          to.Ptr(true),
						HostName:                   to.Ptr("gateway1.msitesting.net"),
						NegotiateClientCertificate: to.Ptr(false),
					},
					{
						Type: to.Ptr(armapimanagement.HostnameTypeManagement),
						Certificate: &armapimanagement.CertificateInformation{
							Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2036-01-01T07:00:00+00:00"); return t }()),
							Subject:    to.Ptr("CN=*.msitesting.net"),
							Thumbprint: to.Ptr("8E989XXXXXXXXXXXXXXXXF1D174FDB3A2"),
						},
						DefaultSSLBinding:          to.Ptr(false),
						HostName:                   to.Ptr("mgmt.msitesting.net"),
						NegotiateClientCertificate: to.Ptr(false),
					},
					{
						Type: to.Ptr(armapimanagement.HostnameTypePortal),
						Certificate: &armapimanagement.CertificateInformation{
							Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2036-01-01T07:00:00+00:00"); return t }()),
							Subject:    to.Ptr("CN=*.msitesting.net"),
							Thumbprint: to.Ptr("8E989XXXXXXXXXXXXXXXXF1D174FDB3A2"),
						},
						DefaultSSLBinding:          to.Ptr(false),
						HostName:                   to.Ptr("portal1.msitesting.net"),
						NegotiateClientCertificate: to.Ptr(false),
					}},
				ManagementAPIURL:        to.Ptr("https://apimService1.management.azure-api.net"),
				NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
				PortalURL:               to.Ptr("https://apimService1.portal.azure-api.net"),
				ProvisioningState:       to.Ptr("Succeeded"),
				PublicIPAddresses: []*string{
					to.Ptr("13.91.32.113")},
				ScmURL:                  to.Ptr("https://apimService1.scm.azure-api.net"),
				TargetProvisioningState: to.Ptr(""),
				VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
				PublisherEmail:          to.Ptr("apim@autorestsdk.com"),
				PublisherName:           to.Ptr("autorestsdk"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypePremium),
				Capacity: to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateMultiRegionServiceWithCustomHostname.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateService"},
	})
	client = armapimanagement.NewServiceClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		armapimanagement.ServiceResource{
			Tags: map[string]*string{
				"Name": to.Ptr("Contoso"),
				"Test": to.Ptr("User"),
			},
			Location: to.Ptr("South Central US"),
			Properties: &armapimanagement.ServiceProperties{
				PublisherEmail: to.Ptr("foo@contoso.com"),
				PublisherName:  to.Ptr("foo"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypeDeveloper),
				Capacity: to.Ptr[int32](1),
			},
		},
		&armapimanagement.ServiceClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateService.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceResource{
			Name: to.Ptr("apimService1"),
			Type: to.Ptr("Microsoft.ApiManagement/service"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1"),
			Tags: map[string]*string{
				"Name": to.Ptr("Contoso"),
				"Test": to.Ptr("User"),
			},
			Etag:     to.Ptr("AAAAAAAp3T4="),
			Location: to.Ptr("South Central US"),
			Properties: &armapimanagement.ServiceProperties{
				APIVersionConstraint: &armapimanagement.APIVersionConstraint{},
				CreatedAtUTC:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-18T06:10:56.0327105Z"); return t }()),
				CustomProperties: map[string]*string{
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":           to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168":    to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":         to.Ptr("False"),
				},
				DeveloperPortalURL: to.Ptr("https://apimService1.developer.azure-api.net"),
				DisableGateway:     to.Ptr(false),
				GatewayRegionalURL: to.Ptr("https://apimService1-southcentralus-01.regional.azure-api.net"),
				GatewayURL:         to.Ptr("https://apimService1.azure-api.net"),
				HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
					{
						Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
						CertificateSource:          to.Ptr(armapimanagement.CertificateSourceBuiltIn),
						DefaultSSLBinding:          to.Ptr(true),
						HostName:                   to.Ptr("apimService1.azure-api.net"),
						NegotiateClientCertificate: to.Ptr(false),
					}},
				ManagementAPIURL:        to.Ptr("https://apimService1.management.azure-api.net"),
				NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
				PortalURL:               to.Ptr("https://apimService1.portal.azure-api.net"),
				ProvisioningState:       to.Ptr("Succeeded"),
				PublicIPAddresses: []*string{
					to.Ptr("23.102.171.124")},
				ScmURL:                  to.Ptr("https://apimService1.scm.azure-api.net"),
				TargetProvisioningState: to.Ptr(""),
				VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
				PublisherEmail:          to.Ptr("foo@contoso.com"),
				PublisherName:           to.Ptr("foo"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypeDeveloper),
				Capacity: to.Ptr[int32](1),
			},
			SystemData: &armapimanagement.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armapimanagement.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-02T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armapimanagement.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceHavingMsi.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateServiceHavingMsi"},
	})
	client = armapimanagement.NewServiceClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		armapimanagement.ServiceResource{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
				"tag3": to.Ptr("value3"),
			},
			Identity: &armapimanagement.ServiceIdentity{
				Type: to.Ptr(armapimanagement.ApimIdentityTypeSystemAssigned),
			},
			Location: to.Ptr("West US"),
			Properties: &armapimanagement.ServiceProperties{
				PublisherEmail: to.Ptr("apim@autorestsdk.com"),
				PublisherName:  to.Ptr("autorestsdk"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypeConsumption),
				Capacity: to.Ptr[int32](0),
			},
		},
		&armapimanagement.ServiceClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceHavingMsi.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceHavingMsi.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceResource{
			Name: to.Ptr("apimService1"),
			Type: to.Ptr("Microsoft.ApiManagement/service"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
				"tag3": to.Ptr("value3"),
			},
			Etag: to.Ptr("AAAAAAAAWiU="),
			Identity: &armapimanagement.ServiceIdentity{
				Type:        to.Ptr(armapimanagement.ApimIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("dfb9a757-df69-4966-a8d0-711a9cd8ffb4"),
				TenantID:    to.Ptr("XXXXXX-86f1-41af-91ab-2d7cd011db47"),
			},
			Location: to.Ptr("West US"),
			Properties: &armapimanagement.ServiceProperties{
				CreatedAtUTC:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-11T16:29:29.9711098Z"); return t }()),
				EnableClientCertificate: to.Ptr(false),
				GatewayURL:              to.Ptr("https://apimService1.azure-api.net"),
				HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
					{
						Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
						CertificateSource:          to.Ptr(armapimanagement.CertificateSourceBuiltIn),
						DefaultSSLBinding:          to.Ptr(true),
						HostName:                   to.Ptr("apimService1.azure-api.net"),
						NegotiateClientCertificate: to.Ptr(false),
					}},
				NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
				PlatformVersion:         to.Ptr(armapimanagement.PlatformVersionMtv1),
				ProvisioningState:       to.Ptr("Succeeded"),
				TargetProvisioningState: to.Ptr(""),
				VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
				PublisherEmail:          to.Ptr("apim@autorestsdk.com"),
				PublisherName:           to.Ptr("autorestsdk"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypeConsumption),
				Capacity: to.Ptr[int32](0),
			},
			SystemData: &armapimanagement.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armapimanagement.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-02T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armapimanagement.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceHavingMsi.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceInVnetWithPublicIP.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateServiceInVnetWithPublicIP"},
	})
	client = armapimanagement.NewServiceClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		armapimanagement.ServiceResource{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
				"tag3": to.Ptr("value3"),
			},
			Location: to.Ptr("East US 2 EUAP"),
			Properties: &armapimanagement.ServiceProperties{
				PublicIPAddressID: to.Ptr("/subscriptions/subid/resourceGroups/rgName/providers/Microsoft.Network/publicIPAddresses/apimazvnet"),
				VirtualNetworkConfiguration: &armapimanagement.VirtualNetworkConfiguration{
					SubnetResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rgName/providers/Microsoft.Network/virtualNetworks/apimcus/subnets/tenant"),
				},
				VirtualNetworkType: to.Ptr(armapimanagement.VirtualNetworkTypeExternal),
				PublisherEmail:     to.Ptr("apim@autorestsdk.com"),
				PublisherName:      to.Ptr("autorestsdk"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypePremium),
				Capacity: to.Ptr[int32](2),
			},
			Zones: []*string{
				to.Ptr("1"),
				to.Ptr("2")},
		},
		&armapimanagement.ServiceClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceInVnetWithPublicIP.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceInVnetWithPublicIP.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceResource{
			Name: to.Ptr("apimService1"),
			Type: to.Ptr("Microsoft.ApiManagement/service"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rgName/providers/Microsoft.ApiManagement/service/apimService1"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
				"tag3": to.Ptr("value3"),
			},
			Etag:     to.Ptr("AAAAAAAGTAs="),
			Location: to.Ptr("East US 2 EUAP"),
			Properties: &armapimanagement.ServiceProperties{
				CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-22T06:53:46.6409875Z"); return t }()),
				CustomProperties: map[string]*string{
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":           to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168":    to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":         to.Ptr("False"),
				},
				DeveloperPortalURL: to.Ptr("https://apimService1.developer.azure-api.net"),
				DisableGateway:     to.Ptr(false),
				GatewayRegionalURL: to.Ptr("https://apimService1-eastus2euap-01.regional.azure-api.net"),
				GatewayURL:         to.Ptr("https://apimService1.azure-api.net"),
				HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
					{
						Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
						DefaultSSLBinding:          to.Ptr(true),
						HostName:                   to.Ptr("apimService1.azure-api.net"),
						NegotiateClientCertificate: to.Ptr(false),
					}},
				ManagementAPIURL:        to.Ptr("https://apimService1.management.azure-api.net"),
				NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
				PlatformVersion:         to.Ptr(armapimanagement.PlatformVersionStv2),
				PortalURL:               to.Ptr("https://apimService1.portal.azure-api.net"),
				ProvisioningState:       to.Ptr("Succeeded"),
				PublicIPAddresses: []*string{
					to.Ptr("20.47.137.XXX")},
				PublicIPAddressID:       to.Ptr("/subscriptions/subid/resourceGroups/rgName/providers/Microsoft.Network/publicIPAddresses/apimazvnet"),
				ScmURL:                  to.Ptr("https://apimService1.scm.azure-api.net"),
				TargetProvisioningState: to.Ptr(""),
				VirtualNetworkConfiguration: &armapimanagement.VirtualNetworkConfiguration{
					SubnetResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rgName/providers/Microsoft.Network/virtualNetworks/apimcus/subnets/tenant"),
				},
				VirtualNetworkType: to.Ptr(armapimanagement.VirtualNetworkTypeExternal),
				PublisherEmail:     to.Ptr("apim@autorestsdk.com"),
				PublisherName:      to.Ptr("autorestsdk"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypePremium),
				Capacity: to.Ptr[int32](2),
			},
			SystemData: &armapimanagement.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armapimanagement.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-02T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armapimanagement.CreatedByTypeApplication),
			},
			Zones: []*string{
				to.Ptr("1"),
				to.Ptr("2")},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceInVnetWithPublicIP.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceInZones.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateServiceInZones"},
	})
	client = armapimanagement.NewServiceClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		armapimanagement.ServiceResource{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
				"tag3": to.Ptr("value3"),
			},
			Location: to.Ptr("North europe"),
			Properties: &armapimanagement.ServiceProperties{
				PublisherEmail: to.Ptr("apim@autorestsdk.com"),
				PublisherName:  to.Ptr("autorestsdk"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypePremium),
				Capacity: to.Ptr[int32](2),
			},
			Zones: []*string{
				to.Ptr("1"),
				to.Ptr("2")},
		},
		&armapimanagement.ServiceClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceInZones.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceInZones.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceResource{
			Name: to.Ptr("apimService1"),
			Type: to.Ptr("Microsoft.ApiManagement/service"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
				"tag3": to.Ptr("value3"),
			},
			Etag:     to.Ptr("AAAAAAAiXvE="),
			Location: to.Ptr("North Europe"),
			Properties: &armapimanagement.ServiceProperties{
				CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-07-28T23:18:14.6562474Z"); return t }()),
				CustomProperties: map[string]*string{
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":           to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168":    to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":         to.Ptr("False"),
				},
				DeveloperPortalURL: to.Ptr("https://apimService1.developer.azure-api.net"),
				DisableGateway:     to.Ptr(false),
				GatewayRegionalURL: to.Ptr("https://apimService1-northeurope-01.regional.azure-api.net"),
				GatewayURL:         to.Ptr("https://apimService1.azure-api.net"),
				HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
					{
						Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
						DefaultSSLBinding:          to.Ptr(true),
						HostName:                   to.Ptr("apimService1.azure-api.net"),
						NegotiateClientCertificate: to.Ptr(false),
					}},
				ManagementAPIURL:        to.Ptr("https://apimService1.management.azure-api.net"),
				NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
				PlatformVersion:         to.Ptr(armapimanagement.PlatformVersionStv2),
				PortalURL:               to.Ptr("https://apimService1.portal.azure-api.net"),
				ProvisioningState:       to.Ptr("Succeeded"),
				PublicIPAddresses: []*string{
					to.Ptr("20.54.34.66")},
				ScmURL:                  to.Ptr("https://apimService1.scm.azure-api.net"),
				TargetProvisioningState: to.Ptr(""),
				VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
				PublisherEmail:          to.Ptr("apim@autorestsdk.com"),
				PublisherName:           to.Ptr("autorestsdk"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypePremium),
				Capacity: to.Ptr[int32](2),
			},
			SystemData: &armapimanagement.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armapimanagement.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-02T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armapimanagement.CreatedByTypeApplication),
			},
			Zones: []*string{
				to.Ptr("1"),
				to.Ptr("2")},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceInZones.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceWithCustomHostnameKeyVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateServiceWithCustomHostnameKeyVault"},
	})
	client = armapimanagement.NewServiceClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		armapimanagement.ServiceResource{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
				"tag3": to.Ptr("value3"),
			},
			Identity: &armapimanagement.ServiceIdentity{
				Type: to.Ptr(armapimanagement.ApimIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armapimanagement.UserIdentityProperties{
					"/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {},
				},
			},
			Location: to.Ptr("North Europe"),
			Properties: &armapimanagement.ServiceProperties{
				APIVersionConstraint: &armapimanagement.APIVersionConstraint{
					MinAPIVersion: to.Ptr("2019-01-01"),
				},
				HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
					{
						Type:              to.Ptr(armapimanagement.HostnameTypeProxy),
						DefaultSSLBinding: to.Ptr(true),
						HostName:          to.Ptr("gateway1.msitesting.net"),
						IdentityClientID:  to.Ptr("329419bc-adec-4dce-9568-25a6d486e468"),
						KeyVaultID:        to.Ptr("https://rpbvtkeyvaultintegration.vault.azure.net/secrets/msitestingCert"),
					},
					{
						Type:             to.Ptr(armapimanagement.HostnameTypeManagement),
						HostName:         to.Ptr("mgmt.msitesting.net"),
						IdentityClientID: to.Ptr("329419bc-adec-4dce-9568-25a6d486e468"),
						KeyVaultID:       to.Ptr("https://rpbvtkeyvaultintegration.vault.azure.net/secrets/msitestingCert"),
					},
					{
						Type:             to.Ptr(armapimanagement.HostnameTypePortal),
						HostName:         to.Ptr("portal1.msitesting.net"),
						IdentityClientID: to.Ptr("329419bc-adec-4dce-9568-25a6d486e468"),
						KeyVaultID:       to.Ptr("https://rpbvtkeyvaultintegration.vault.azure.net/secrets/msitestingCert"),
					}},
				VirtualNetworkType: to.Ptr(armapimanagement.VirtualNetworkTypeNone),
				PublisherEmail:     to.Ptr("apim@autorestsdk.com"),
				PublisherName:      to.Ptr("autorestsdk"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypePremium),
				Capacity: to.Ptr[int32](1),
			},
		},
		&armapimanagement.ServiceClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceWithCustomHostnameKeyVault.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceWithCustomHostnameKeyVault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceResource{
			Name: to.Ptr("apimService1"),
			Type: to.Ptr("Microsoft.ApiManagement/service"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
				"tag3": to.Ptr("value3"),
			},
			Etag: to.Ptr("AAAAAAAigjU="),
			Identity: &armapimanagement.ServiceIdentity{
				Type:     to.Ptr(armapimanagement.ApimIdentityTypeUserAssigned),
				TenantID: to.Ptr("f686d426-8d16-xxxx-xxxx-ab578e110ccd"),
				UserAssignedIdentities: map[string]*armapimanagement.UserIdentityProperties{
					"/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {
						ClientID:    to.Ptr("329419bc-adec-4dce-9568-25a6d486e468"),
						PrincipalID: to.Ptr("15e769b2-xxxx-xxxx-xxxx-3fd9a923ac3a"),
					},
				},
			},
			Location: to.Ptr("North Europe"),
			Properties: &armapimanagement.ServiceProperties{
				APIVersionConstraint: &armapimanagement.APIVersionConstraint{
					MinAPIVersion: to.Ptr("2019-01-01"),
				},
				CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-13T22:30:20.7759747Z"); return t }()),
				CustomProperties: map[string]*string{
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":           to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168":    to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":         to.Ptr("False"),
				},
				DeveloperPortalURL: to.Ptr("https://apimService1.developer.azure-api.net"),
				DisableGateway:     to.Ptr(false),
				GatewayRegionalURL: to.Ptr("https://apimService1-northeurope-01.regional.azure-api.net"),
				GatewayURL:         to.Ptr("https://apimService1.azure-api.net"),
				HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
					{
						Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
						CertificateSource:          to.Ptr(armapimanagement.CertificateSourceBuiltIn),
						DefaultSSLBinding:          to.Ptr(false),
						HostName:                   to.Ptr("apimService1.azure-api.net"),
						NegotiateClientCertificate: to.Ptr(false),
					},
					{
						Type: to.Ptr(armapimanagement.HostnameTypeProxy),
						Certificate: &armapimanagement.CertificateInformation{
							Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2037-01-01T07:00:00+00:00"); return t }()),
							Subject:    to.Ptr("CN=*.msitesting.net"),
							Thumbprint: to.Ptr("EA276907917CB5XXXXXXXXXXX690"),
						},
						CertificateSource:          to.Ptr(armapimanagement.CertificateSourceKeyVault),
						DefaultSSLBinding:          to.Ptr(true),
						HostName:                   to.Ptr("gateway1.msitesting.net"),
						IdentityClientID:           to.Ptr("329419bc-adec-4dce-9568-25a6d486e468"),
						KeyVaultID:                 to.Ptr("https://rpbvtkeyvaultintegration.vault.azure.net/secrets/msitestingCert"),
						NegotiateClientCertificate: to.Ptr(false),
					},
					{
						Type: to.Ptr(armapimanagement.HostnameTypeManagement),
						Certificate: &armapimanagement.CertificateInformation{
							Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2037-01-01T07:00:00+00:00"); return t }()),
							Subject:    to.Ptr("CN=*.msitesting.net"),
							Thumbprint: to.Ptr("EA276907917CB5XXXXXXXXXXX690"),
						},
						CertificateSource:          to.Ptr(armapimanagement.CertificateSourceKeyVault),
						DefaultSSLBinding:          to.Ptr(false),
						HostName:                   to.Ptr("mgmt.msitesting.net"),
						IdentityClientID:           to.Ptr("329419bc-adec-4dce-9568-25a6d486e468"),
						KeyVaultID:                 to.Ptr("https://rpbvtkeyvaultintegration.vault.azure.net/secrets/msitestingCert"),
						NegotiateClientCertificate: to.Ptr(false),
					},
					{
						Type: to.Ptr(armapimanagement.HostnameTypePortal),
						Certificate: &armapimanagement.CertificateInformation{
							Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2037-01-01T07:00:00+00:00"); return t }()),
							Subject:    to.Ptr("CN=*.msitesting.net"),
							Thumbprint: to.Ptr("EA276907917CB5XXXXXXXXXXX690"),
						},
						CertificateSource:          to.Ptr(armapimanagement.CertificateSourceKeyVault),
						DefaultSSLBinding:          to.Ptr(false),
						HostName:                   to.Ptr("portal1.msitesting.net"),
						IdentityClientID:           to.Ptr("329419bc-adec-4dce-9568-25a6d486e468"),
						KeyVaultID:                 to.Ptr("https://rpbvtkeyvaultintegration.vault.azure.net/secrets/msitestingCert"),
						NegotiateClientCertificate: to.Ptr(false),
					}},
				ManagementAPIURL:        to.Ptr("https://apimService1.management.azure-api.net"),
				NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
				PlatformVersion:         to.Ptr(armapimanagement.PlatformVersionStv2),
				PortalURL:               to.Ptr("https://apimService1.portal.azure-api.net"),
				ProvisioningState:       to.Ptr("Succeeded"),
				PublicIPAddresses: []*string{
					to.Ptr("40.112.74.192")},
				ScmURL:                  to.Ptr("https://apimService1.scm.azure-api.net"),
				TargetProvisioningState: to.Ptr(""),
				VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
				PublisherEmail:          to.Ptr("apim@autorestsdk.com"),
				PublisherName:           to.Ptr("autorestsdk"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypePremium),
				Capacity: to.Ptr[int32](1),
			},
			SystemData: &armapimanagement.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armapimanagement.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-02T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armapimanagement.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceWithCustomHostnameKeyVault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceWithSystemCertificates.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateServiceWithSystemCertificates"},
	})
	client = armapimanagement.NewServiceClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		armapimanagement.ServiceResource{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
				"tag3": to.Ptr("value3"),
			},
			Location: to.Ptr("Central US"),
			Properties: &armapimanagement.ServiceProperties{
				Certificates: []*armapimanagement.CertificateConfiguration{
					{
						CertificatePassword: to.Ptr("Password"),
						EncodedCertificate:  to.Ptr("*******Base64 encoded Certificate******************"),
						StoreName:           to.Ptr(armapimanagement.CertificateConfigurationStoreNameCertificateAuthority),
					}},
				PublisherEmail: to.Ptr("apim@autorestsdk.com"),
				PublisherName:  to.Ptr("autorestsdk"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypeBasic),
				Capacity: to.Ptr[int32](1),
			},
		},
		&armapimanagement.ServiceClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceWithSystemCertificates.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceWithSystemCertificates.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceResource{
			Name: to.Ptr("apimService1"),
			Type: to.Ptr("Microsoft.ApiManagement/service"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
				"tag3": to.Ptr("value3"),
			},
			Etag:     to.Ptr("AAAAAAAp3UM="),
			Location: to.Ptr("Central US"),
			Properties: &armapimanagement.ServiceProperties{
				APIVersionConstraint: &armapimanagement.APIVersionConstraint{},
				Certificates: []*armapimanagement.CertificateConfiguration{
					{
						Certificate: &armapimanagement.CertificateInformation{
							Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2036-01-01T07:00:00+00:00"); return t }()),
							Subject:    to.Ptr("CN=*.msitesting.net"),
							Thumbprint: to.Ptr("8E989652CABCF585ACBFCB9C2C91F1D174FDB3A2"),
						},
						StoreName: to.Ptr(armapimanagement.CertificateConfigurationStoreNameCertificateAuthority),
					}},
				CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-18T06:33:28.0906918Z"); return t }()),
				CustomProperties: map[string]*string{
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":           to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168":    to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":         to.Ptr("False"),
				},
				DeveloperPortalURL: to.Ptr("https://apimService1.developer.azure-api.net"),
				DisableGateway:     to.Ptr(false),
				GatewayRegionalURL: to.Ptr("https://apimService1-centralus-01.regional.azure-api.net"),
				GatewayURL:         to.Ptr("https://apimService1.azure-api.net"),
				HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
					{
						Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
						CertificateSource:          to.Ptr(armapimanagement.CertificateSourceBuiltIn),
						DefaultSSLBinding:          to.Ptr(true),
						HostName:                   to.Ptr("apimService1.azure-api.net"),
						NegotiateClientCertificate: to.Ptr(false),
					}},
				ManagementAPIURL:        to.Ptr("https://apimService1.management.azure-api.net"),
				NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
				PlatformVersion:         to.Ptr(armapimanagement.PlatformVersionStv2),
				PortalURL:               to.Ptr("https://apimService1.portal.azure-api.net"),
				ProvisioningState:       to.Ptr("Succeeded"),
				PublicIPAddresses: []*string{
					to.Ptr("40.113.223.117")},
				ScmURL:                  to.Ptr("https://apimService1.scm.azure-api.net"),
				TargetProvisioningState: to.Ptr(""),
				VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
				PublisherEmail:          to.Ptr("apim@autorestsdk.com"),
				PublisherName:           to.Ptr("autorestsdk"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypeBasic),
				Capacity: to.Ptr[int32](1),
			},
			SystemData: &armapimanagement.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armapimanagement.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-02T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armapimanagement.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceWithSystemCertificates.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceWithUserAssignedIdentity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateServiceWithUserAssignedIdentity"},
	})
	client = armapimanagement.NewServiceClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		armapimanagement.ServiceResource{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
				"tag3": to.Ptr("value3"),
			},
			Identity: &armapimanagement.ServiceIdentity{
				Type: to.Ptr(armapimanagement.ApimIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armapimanagement.UserIdentityProperties{
					"/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/apimService1": {},
				},
			},
			Location: to.Ptr("West US"),
			Properties: &armapimanagement.ServiceProperties{
				PublisherEmail: to.Ptr("apim@autorestsdk.com"),
				PublisherName:  to.Ptr("autorestsdk"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypeConsumption),
				Capacity: to.Ptr[int32](0),
			},
		},
		&armapimanagement.ServiceClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceWithUserAssignedIdentity.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceWithUserAssignedIdentity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceResource{
			Name: to.Ptr("apimService1"),
			Type: to.Ptr("Microsoft.ApiManagement/service"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
				"tag3": to.Ptr("value3"),
			},
			Etag: to.Ptr("AAAAAAAFzyk="),
			Identity: &armapimanagement.ServiceIdentity{
				Type:     to.Ptr(armapimanagement.ApimIdentityTypeUserAssigned),
				TenantID: to.Ptr("XXXXX-86f1-41af-XXXX-2d7cd011db47"),
				UserAssignedIdentities: map[string]*armapimanagement.UserIdentityProperties{
					"/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/apimService1": {
						ClientID:    to.Ptr("5a2c6b8e-0905-XXXX-a772-993c9418137f"),
						PrincipalID: to.Ptr("XXXXX-6e62-4649-9f54-a119fc1ba85e"),
					},
				},
			},
			Location: to.Ptr("West US"),
			Properties: &armapimanagement.ServiceProperties{
				CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-12T01:05:33.4573398Z"); return t }()),
				CustomProperties: map[string]*string{
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":           to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":         to.Ptr("False"),
				},
				DisableGateway: to.Ptr(false),
				GatewayURL:     to.Ptr("https://apimService1.azure-api.net"),
				HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
					{
						Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
						CertificateSource:          to.Ptr(armapimanagement.CertificateSourceBuiltIn),
						DefaultSSLBinding:          to.Ptr(true),
						HostName:                   to.Ptr("apimService1.azure-api.net"),
						NegotiateClientCertificate: to.Ptr(false),
					}},
				NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
				PlatformVersion:         to.Ptr(armapimanagement.PlatformVersionMtv1),
				ProvisioningState:       to.Ptr("Succeeded"),
				TargetProvisioningState: to.Ptr(""),
				VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
				PublisherEmail:          to.Ptr("apim@autorestsdk.com"),
				PublisherName:           to.Ptr("autorestsdk"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypeConsumption),
				Capacity: to.Ptr[int32](0),
			},
			SystemData: &armapimanagement.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armapimanagement.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-02T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armapimanagement.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateServiceWithUserAssignedIdentity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUndelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUndelete"},
	})
	client = armapimanagement.NewServiceClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		armapimanagement.ServiceResource{
			Location: to.Ptr("South Central US"),
			Properties: &armapimanagement.ServiceProperties{
				Restore:        to.Ptr(true),
				PublisherEmail: to.Ptr("foo@contoso.com"),
				PublisherName:  to.Ptr("foo"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypeDeveloper),
				Capacity: to.Ptr[int32](1),
			},
		},
		&armapimanagement.ServiceClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUndelete.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUndelete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceResource{
			Name:     to.Ptr("apimService1"),
			Type:     to.Ptr("Microsoft.ApiManagement/service"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1"),
			Etag:     to.Ptr("AAAAAAAp3T4="),
			Location: to.Ptr("South Central US"),
			Properties: &armapimanagement.ServiceProperties{
				APIVersionConstraint: &armapimanagement.APIVersionConstraint{},
				CreatedAtUTC:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-18T06:10:56.0327105Z"); return t }()),
				CustomProperties: map[string]*string{
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":           to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168":    to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":         to.Ptr("False"),
				},
				DeveloperPortalURL: to.Ptr("https://apimService1.developer.azure-api.net"),
				DisableGateway:     to.Ptr(false),
				GatewayRegionalURL: to.Ptr("https://apimService1-southcentralus-01.regional.azure-api.net"),
				GatewayURL:         to.Ptr("https://apimService1.azure-api.net"),
				HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
					{
						Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
						DefaultSSLBinding:          to.Ptr(true),
						HostName:                   to.Ptr("apimService1.azure-api.net"),
						NegotiateClientCertificate: to.Ptr(false),
					}},
				ManagementAPIURL:        to.Ptr("https://apimService1.management.azure-api.net"),
				NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
				PortalURL:               to.Ptr("https://apimService1.portal.azure-api.net"),
				ProvisioningState:       to.Ptr("Succeeded"),
				PublicIPAddresses: []*string{
					to.Ptr("23.102.171.124")},
				ScmURL:                  to.Ptr("https://apimService1.scm.azure-api.net"),
				TargetProvisioningState: to.Ptr(""),
				VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
				PublisherEmail:          to.Ptr("foo@contoso.com"),
				PublisherName:           to.Ptr("foo"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypeDeveloper),
				Capacity: to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUndelete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIManagementService_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateServiceDisableTls10.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateServiceDisableTls10"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewServiceClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"apimService1",
		armapimanagement.ServiceUpdateParameters{
			Properties: &armapimanagement.ServiceUpdateProperties{
				CustomProperties: map[string]*string{
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10": to.Ptr("false"),
				},
			},
		},
		&armapimanagement.ServiceClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateServiceDisableTls10.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateServiceDisableTls10.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceResource{
			Name: to.Ptr("apimService1"),
			Type: to.Ptr("Microsoft.ApiManagement/service"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1"),
			Tags: map[string]*string{
				"Owner":               to.Ptr("sasolank"),
				"Pool":                to.Ptr("Manual"),
				"Reserved":            to.Ptr(""),
				"TestExpiration":      to.Ptr("Thu, 29 Jun 2017 18:50:40 GMT"),
				"TestSuiteExpiration": to.Ptr("Thu, 29 Jun 2017 18:51:46 GMT"),
				"UID":                 to.Ptr("4f5025fe-0669-4e2e-8320-5199466e5eb3"),
			},
			Etag:     to.Ptr("AAAAAAAYRPs="),
			Location: to.Ptr("West US"),
			Properties: &armapimanagement.ServiceProperties{
				CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-29T17:50:42.3191122Z"); return t }()),
				CustomProperties: map[string]*string{
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10": to.Ptr("False"),
				},
				GatewayURL:              to.Ptr("https://apimService1.azure-api.net"),
				HostnameConfigurations:  []*armapimanagement.HostnameConfiguration{},
				ManagementAPIURL:        to.Ptr("https://apimService1.management.azure-api.net"),
				NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
				PortalURL:               to.Ptr("https://apimService1.portal.azure-api.net"),
				ProvisioningState:       to.Ptr("Succeeded"),
				PublicIPAddresses: []*string{
					to.Ptr("40.86.176.232")},
				ScmURL:                  to.Ptr("https://apimService1.scm.azure-api.net"),
				TargetProvisioningState: to.Ptr(""),
				VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
				PublisherEmail:          to.Ptr("admin@live.com"),
				PublisherName:           to.Ptr("Contoso"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypeStandard),
				Capacity: to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateServiceDisableTls10.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateServicePublisherDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateServicePublisherDetails"},
	})
	client = armapimanagement.NewServiceClient("subid", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"rg1",
		"apimService1",
		armapimanagement.ServiceUpdateParameters{
			Properties: &armapimanagement.ServiceUpdateProperties{
				PublisherEmail: to.Ptr("foobar@live.com"),
				PublisherName:  to.Ptr("Contoso Vnext"),
			},
		},
		&armapimanagement.ServiceClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateServicePublisherDetails.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateServicePublisherDetails.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceResource{
			Name: to.Ptr("apimService1"),
			Type: to.Ptr("Microsoft.ApiManagement/service"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1"),
			Tags: map[string]*string{
				"Owner":               to.Ptr("sasolank"),
				"Pool":                to.Ptr("Manual"),
				"Reserved":            to.Ptr(""),
				"TestExpiration":      to.Ptr("Thu, 29 Jun 2017 18:50:40 GMT"),
				"TestSuiteExpiration": to.Ptr("Thu, 29 Jun 2017 18:51:46 GMT"),
				"UID":                 to.Ptr("4f5025fe-0669-4e2e-8320-5199466e5eb3"),
			},
			Etag:     to.Ptr("AAAAAAAYRPs="),
			Location: to.Ptr("West US"),
			Properties: &armapimanagement.ServiceProperties{
				CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-29T17:50:42.3191122Z"); return t }()),
				CustomProperties: map[string]*string{
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10": to.Ptr("False"),
				},
				GatewayURL:              to.Ptr("https://apimService1.azure-api.net"),
				HostnameConfigurations:  []*armapimanagement.HostnameConfiguration{},
				ManagementAPIURL:        to.Ptr("https://apimService1.management.azure-api.net"),
				NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
				PortalURL:               to.Ptr("https://apimService1.portal.azure-api.net"),
				ProvisioningState:       to.Ptr("Succeeded"),
				PublicIPAddresses: []*string{
					to.Ptr("40.86.176.232")},
				ScmURL:                  to.Ptr("https://apimService1.scm.azure-api.net"),
				TargetProvisioningState: to.Ptr(""),
				VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
				PublisherEmail:          to.Ptr("foobar@live.com"),
				PublisherName:           to.Ptr("Contoso Vnext"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypeStandard),
				Capacity: to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateServicePublisherDetails.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateServiceToNewVnetAndAZs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateServiceToNewVnetAndAvailabilityZones"},
	})
	client = armapimanagement.NewServiceClient("subid", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"rg1",
		"apimService1",
		armapimanagement.ServiceUpdateParameters{
			Properties: &armapimanagement.ServiceUpdateProperties{
				AdditionalLocations: []*armapimanagement.AdditionalLocation{
					{
						Location:          to.Ptr("Australia East"),
						PublicIPAddressID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/apim-australia-east-publicip"),
						SKU: &armapimanagement.ServiceSKUProperties{
							Name:     to.Ptr(armapimanagement.SKUTypePremium),
							Capacity: to.Ptr[int32](3),
						},
						VirtualNetworkConfiguration: &armapimanagement.VirtualNetworkConfiguration{
							SubnetResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/apimaeavnet/subnets/default"),
						},
						Zones: []*string{
							to.Ptr("1"),
							to.Ptr("2"),
							to.Ptr("3")},
					}},
				PublicIPAddressID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/publicip-apim-japan-east"),
				VirtualNetworkConfiguration: &armapimanagement.VirtualNetworkConfiguration{
					SubnetResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet-apim-japaneast/subnets/apim2"),
				},
				VirtualNetworkType: to.Ptr(armapimanagement.VirtualNetworkTypeExternal),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypePremium),
				Capacity: to.Ptr[int32](3),
			},
			Zones: []*string{
				to.Ptr("1"),
				to.Ptr("2"),
				to.Ptr("3")},
		},
		&armapimanagement.ServiceClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateServiceToNewVnetAndAZs.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateServiceToNewVnetAndAZs.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceResource{
			Name:     to.Ptr("apimService1"),
			Type:     to.Ptr("Microsoft.ApiManagement/service"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1"),
			Etag:     to.Ptr("AAAAAAAWBIU="),
			Location: to.Ptr("Japan East"),
			Properties: &armapimanagement.ServiceProperties{
				AdditionalLocations: []*armapimanagement.AdditionalLocation{
					{
						DisableGateway:     to.Ptr(false),
						GatewayRegionalURL: to.Ptr("https://apimService1-australiaeast-01.regional.azure-api.net"),
						Location:           to.Ptr("Australia East"),
						PlatformVersion:    to.Ptr(armapimanagement.PlatformVersionStv2),
						PublicIPAddresses: []*string{
							to.Ptr("20.213.1.35")},
						PublicIPAddressID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/apim-australia-east-publicip"),
						SKU: &armapimanagement.ServiceSKUProperties{
							Name:     to.Ptr(armapimanagement.SKUTypePremium),
							Capacity: to.Ptr[int32](3),
						},
						VirtualNetworkConfiguration: &armapimanagement.VirtualNetworkConfiguration{
							SubnetResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/apimaeavnet/subnets/default"),
						},
						Zones: []*string{
							to.Ptr("1"),
							to.Ptr("2"),
							to.Ptr("3")},
					}},
				CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-08T23:41:35.6447381Z"); return t }()),
				CustomProperties: map[string]*string{
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":                              to.Ptr("false"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30":                    to.Ptr("false"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10":                    to.Ptr("false"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11":                    to.Ptr("false"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA": to.Ptr("false"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA": to.Ptr("false"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA":       to.Ptr("false"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA256":    to.Ptr("false"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_GCM_SHA256":    to.Ptr("false"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_256_CBC_SHA":       to.Ptr("false"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_256_CBC_SHA256":    to.Ptr("false"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168":                       to.Ptr("false"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30":                            to.Ptr("false"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":                            to.Ptr("false"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":                            to.Ptr("false"),
				},
				DeveloperPortalURL: to.Ptr("https://apimService1.developer.azure-api.net"),
				DisableGateway:     to.Ptr(false),
				GatewayRegionalURL: to.Ptr("https://apimService1-japaneast-01.regional.azure-api.net"),
				GatewayURL:         to.Ptr("https://apimService1.azure-api.net"),
				HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
					{
						Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
						CertificateSource:          to.Ptr(armapimanagement.CertificateSourceBuiltIn),
						DefaultSSLBinding:          to.Ptr(false),
						HostName:                   to.Ptr("apimService1.azure-api.net"),
						NegotiateClientCertificate: to.Ptr(false),
					},
					{
						Type: to.Ptr(armapimanagement.HostnameTypeProxy),
						Certificate: &armapimanagement.CertificateInformation{
							Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-06-09T23:59:59+00:00"); return t }()),
							Subject:    to.Ptr("CN=mycustomdomain.int-azure-api.net"),
							Thumbprint: to.Ptr("2994B5FFB8F76B3C687D324A8DEE0432C1ED18CD"),
						},
						CertificateSource:          to.Ptr(armapimanagement.CertificateSourceManaged),
						DefaultSSLBinding:          to.Ptr(true),
						HostName:                   to.Ptr("mycustomdomain.int-azure-api.net"),
						NegotiateClientCertificate: to.Ptr(false),
					}},
				ManagementAPIURL:        to.Ptr("https://apimService1.management.azure-api.net"),
				NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
				PlatformVersion:         to.Ptr(armapimanagement.PlatformVersionStv2),
				PortalURL:               to.Ptr("https://apimService1.portal.azure-api.net"),
				ProvisioningState:       to.Ptr("Succeeded"),
				PublicIPAddresses: []*string{
					to.Ptr("20.78.248.217")},
				PublicIPAddressID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/publicip-apim-japan-east"),
				PublicNetworkAccess:     to.Ptr(armapimanagement.PublicNetworkAccessEnabled),
				ScmURL:                  to.Ptr("https://apimService1.scm.azure-api.net"),
				TargetProvisioningState: to.Ptr(""),
				VirtualNetworkConfiguration: &armapimanagement.VirtualNetworkConfiguration{
					SubnetResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet-apim-japaneast/subnets/apim2"),
				},
				VirtualNetworkType: to.Ptr(armapimanagement.VirtualNetworkTypeInternal),
				PublisherEmail:     to.Ptr("contoso@microsoft.com"),
				PublisherName:      to.Ptr("apimPublisher"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypePremium),
				Capacity: to.Ptr[int32](3),
			},
			SystemData: &armapimanagement.SystemData{
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-21T20:04:21.6108974Z"); return t }()),
				LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
				LastModifiedByType: to.Ptr(armapimanagement.CreatedByTypeUser),
			},
			Zones: []*string{
				to.Ptr("1"),
				to.Ptr("2"),
				to.Ptr("3")},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateServiceToNewVnetAndAZs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIManagementService_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetMultiRegionInternalVnet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementServiceGetMultiRegionInternalVnet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewServiceClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetMultiRegionInternalVnet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceResource{
			Name:     to.Ptr("apimservice1"),
			Type:     to.Ptr("Microsoft.ApiManagement/service"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimservice1"),
			Tags:     map[string]*string{},
			Etag:     to.Ptr("AAAAAADqC0c="),
			Location: to.Ptr("West US"),
			Properties: &armapimanagement.ServiceProperties{
				AdditionalLocations: []*armapimanagement.AdditionalLocation{
					{
						DisableGateway:     to.Ptr(false),
						GatewayRegionalURL: to.Ptr("https://apimservice1-westus2-01.regional.azure-api.net"),
						Location:           to.Ptr("West US 2"),
						PrivateIPAddresses: []*string{
							to.Ptr("10.0.X.6")},
						PublicIPAddresses: []*string{
							to.Ptr("40.XXX.79.187")},
						SKU: &armapimanagement.ServiceSKUProperties{
							Name:     to.Ptr(armapimanagement.SKUTypePremium),
							Capacity: to.Ptr[int32](1),
						},
						VirtualNetworkConfiguration: &armapimanagement.VirtualNetworkConfiguration{
							SubnetResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/APIMVNet/subnets/apim-internal-sub"),
						},
					}},
				APIVersionConstraint: &armapimanagement.APIVersionConstraint{},
				CreatedAtUTC:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-02T01:42:09.1268424Z"); return t }()),
				CustomProperties: map[string]*string{
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": to.Ptr("True"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": to.Ptr("True"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168":    to.Ptr("True"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":         to.Ptr("True"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":         to.Ptr("True"),
				},
				DeveloperPortalURL: to.Ptr("https://apimService1.developer.azure-api.net"),
				DisableGateway:     to.Ptr(false),
				GatewayRegionalURL: to.Ptr("https://apimservice1-westus-01.regional.azure-api.net"),
				GatewayURL:         to.Ptr("https://apimservice1.azure-api.net"),
				HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
					{
						Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
						CertificateSource:          to.Ptr(armapimanagement.CertificateSourceBuiltIn),
						DefaultSSLBinding:          to.Ptr(false),
						HostName:                   to.Ptr("apimService1.azure-api.net"),
						NegotiateClientCertificate: to.Ptr(false),
					},
					{
						Type: to.Ptr(armapimanagement.HostnameTypeProxy),
						Certificate: &armapimanagement.CertificateInformation{
							Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-16T16:51:34+00:00"); return t }()),
							Subject:    to.Ptr("CN=*.preview.net"),
							Thumbprint: to.Ptr("B4330123DBAXXXXXXXXX1F35E84493476"),
						},
						CertificateSource:          to.Ptr(armapimanagement.CertificateSourceCustom),
						DefaultSSLBinding:          to.Ptr(true),
						HostName:                   to.Ptr("apimgatewaytest.preview.net"),
						NegotiateClientCertificate: to.Ptr(false),
					}},
				ManagementAPIURL:        to.Ptr("https://apimservice1.management.azure-api.net"),
				NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
				PortalURL:               to.Ptr("https://apimservice1.portal.azure-api.net"),
				PrivateIPAddresses: []*string{
					to.Ptr("172.XX.0.5")},
				ProvisioningState: to.Ptr("Succeeded"),
				PublicIPAddresses: []*string{
					to.Ptr("137.XXX.11.74")},
				ScmURL:                  to.Ptr("https://apimservice1.scm.azure-api.net"),
				TargetProvisioningState: to.Ptr(""),
				VirtualNetworkConfiguration: &armapimanagement.VirtualNetworkConfiguration{
					SubnetResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/apim-appGateway-vnet/subnets/apim-subnet"),
				},
				VirtualNetworkType: to.Ptr(armapimanagement.VirtualNetworkTypeInternal),
				PublisherEmail:     to.Ptr("abcs@contoso.com"),
				PublisherName:      to.Ptr("contoso publisher"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypePremium),
				Capacity: to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetMultiRegionInternalVnet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementServiceGetService"},
	})
	client = armapimanagement.NewServiceClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"apimService1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceResource{
			Name: to.Ptr("OGF-Z3-06162021-Premium"),
			Type: to.Ptr("Microsoft.ApiManagement/service"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/OGF-Z3-06162021-Premium"),
			Tags: map[string]*string{
				"ReleaseName": to.Ptr("Z3"),
				"owner":       to.Ptr("v-aswmoh"),
			},
			Etag: to.Ptr("AAAAAAAWN/4="),
			Identity: &armapimanagement.ServiceIdentity{
				Type:        to.Ptr(armapimanagement.ApimIdentityTypeSystemAssignedUserAssigned),
				PrincipalID: to.Ptr("306205e7-b21a-41bf-92e2-3e28af30041e"),
				TenantID:    to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
				UserAssignedIdentities: map[string]*armapimanagement.UserIdentityProperties{
					"/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/ogf-identity": {
						ClientID:    to.Ptr("8d9791f2-0cdf-41f4-9e66-cdc39b496789"),
						PrincipalID: to.Ptr("713784d2-ee37-412a-95f0-3768f397f82d"),
					},
				},
			},
			Location: to.Ptr("East US"),
			Properties: &armapimanagement.ServiceProperties{
				AdditionalLocations: []*armapimanagement.AdditionalLocation{
					{
						DisableGateway:     to.Ptr(false),
						GatewayRegionalURL: to.Ptr("https://ogf-z3-06162021-premium-eastus2-01.regional.azure-api.net"),
						Location:           to.Ptr("East US 2"),
						PlatformVersion:    to.Ptr(armapimanagement.PlatformVersionStv2),
						PublicIPAddresses: []*string{
							to.Ptr("40.70.24.106")},
						SKU: &armapimanagement.ServiceSKUProperties{
							Name:     to.Ptr(armapimanagement.SKUTypePremium),
							Capacity: to.Ptr[int32](1),
						},
						Zones: []*string{},
					}},
				APIVersionConstraint: &armapimanagement.APIVersionConstraint{
					MinAPIVersion: to.Ptr("2019-12-01"),
				},
				Certificates: []*armapimanagement.CertificateConfiguration{},
				CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-16T09:40:00.9453556Z"); return t }()),
				CustomProperties: map[string]*string{
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":           to.Ptr("false"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": to.Ptr("false"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": to.Ptr("false"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": to.Ptr("false"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168":    to.Ptr("false"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30":         to.Ptr("false"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":         to.Ptr("false"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":         to.Ptr("false"),
				},
				DeveloperPortalURL: to.Ptr("https://ogf-z3-06162021-premium.developer.azure-api.net"),
				DisableGateway:     to.Ptr(false),
				GatewayRegionalURL: to.Ptr("https://ogf-z3-06162021-premium-eastus-01.regional.azure-api.net"),
				GatewayURL:         to.Ptr("https://ogf-z3-06162021-premium.azure-api.net"),
				HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
					{
						Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
						CertificateSource:          to.Ptr(armapimanagement.CertificateSourceBuiltIn),
						DefaultSSLBinding:          to.Ptr(false),
						HostName:                   to.Ptr("ogf-z3-06162021-premium.azure-api.net"),
						NegotiateClientCertificate: to.Ptr(false),
					},
					{
						Type: to.Ptr(armapimanagement.HostnameTypeProxy),
						Certificate: &armapimanagement.CertificateInformation{
							Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-08T22:32:32+00:00"); return t }()),
							Subject:    to.Ptr("CN=*.current.int-azure-api.net, O=Microsoft Corporation, L=Redmond, S=WA, C=US"),
							Thumbprint: to.Ptr("BA0C286XXXXXXXX58A4A507E3DBD51"),
						},
						CertificateSource:          to.Ptr(armapimanagement.CertificateSourceCustom),
						DefaultSSLBinding:          to.Ptr(true),
						HostName:                   to.Ptr("gateway.current.int-azure-api.net"),
						KeyVaultID:                 to.Ptr("https://ogf-testing.vault.azure.net/secrets/current-ssl"),
						NegotiateClientCertificate: to.Ptr(true),
					},
					{
						Type: to.Ptr(armapimanagement.HostnameTypeDeveloperPortal),
						Certificate: &armapimanagement.CertificateInformation{
							Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-08T22:32:32+00:00"); return t }()),
							Subject:    to.Ptr("CN=*.current.int-azure-api.net, O=Microsoft Corporation, L=Redmond, S=WA, C=US"),
							Thumbprint: to.Ptr("BA0C286XXXXXXXX58A4A507E3DBD51"),
						},
						CertificateSource:          to.Ptr(armapimanagement.CertificateSourceCustom),
						DefaultSSLBinding:          to.Ptr(false),
						HostName:                   to.Ptr("developer.current.int-azure-api.net"),
						KeyVaultID:                 to.Ptr("https://ogf-testing.vault.azure.net/secrets/current-ssl"),
						NegotiateClientCertificate: to.Ptr(false),
					},
					{
						Type: to.Ptr(armapimanagement.HostnameTypeManagement),
						Certificate: &armapimanagement.CertificateInformation{
							Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-08T22:32:32+00:00"); return t }()),
							Subject:    to.Ptr("CN=*.current.int-azure-api.net, O=Microsoft Corporation, L=Redmond, S=WA, C=US"),
							Thumbprint: to.Ptr("BA0C286XXXXXXXX58A4A507E3DBD51"),
						},
						CertificateSource:          to.Ptr(armapimanagement.CertificateSourceCustom),
						DefaultSSLBinding:          to.Ptr(false),
						HostName:                   to.Ptr("mgmt.current.int-azure-api.net"),
						KeyVaultID:                 to.Ptr("https://ogf-testing.vault.azure.net/secrets/current-ssl"),
						NegotiateClientCertificate: to.Ptr(false),
					}},
				ManagementAPIURL:        to.Ptr("https://ogf-z3-06162021-premium.management.azure-api.net"),
				NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
				PlatformVersion:         to.Ptr(armapimanagement.PlatformVersionStv2),
				PortalURL:               to.Ptr("https://ogf-z3-06162021-premium.portal.azure-api.net"),
				PrivateEndpointConnections: []*armapimanagement.RemotePrivateEndpointConnectionWrapper{
					{
						Name: to.Ptr("privateEndpointProxyName"),
						Type: to.Ptr("Microsoft.ApiManagement/service/privateEndpointConnections"),
						ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/privateEndpointConnections/privateEndpointProxyName"),
						Properties: &armapimanagement.PrivateEndpointConnectionWrapperProperties{
							GroupIDs: []*string{
								to.Ptr("Gateway")},
							PrivateEndpoint: &armapimanagement.ArmIDWrapper{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/privateEndpointName"),
							},
							PrivateLinkServiceConnectionState: &armapimanagement.PrivateLinkServiceConnectionState{
								Description:     to.Ptr("Please approve my request, thanks"),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr(armapimanagement.PrivateEndpointServiceConnectionStatusPending),
							},
							ProvisioningState: to.Ptr("Succeeded"),
						},
					}},
				ProvisioningState: to.Ptr("Succeeded"),
				PublicIPAddresses: []*string{
					to.Ptr("13.92.130.49")},
				PublicNetworkAccess:     to.Ptr(armapimanagement.PublicNetworkAccessEnabled),
				ScmURL:                  to.Ptr("https://ogf-z3-06162021-premium.scm.azure-api.net"),
				TargetProvisioningState: to.Ptr(""),
				VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
				PublisherEmail:          to.Ptr("string"),
				PublisherName:           to.Ptr("Test Premium"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypePremium),
				Capacity: to.Ptr[int32](1),
			},
			SystemData: &armapimanagement.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-16T09:40:00.7106733Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armapimanagement.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-20T06:33:09.6159006Z"); return t }()),
				LastModifiedBy:     to.Ptr("foo@contoso.com"),
				LastModifiedByType: to.Ptr(armapimanagement.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetServiceHavingMsi.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementServiceGetServiceHavingMsi"},
	})
	client = armapimanagement.NewServiceClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"apimService1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetServiceHavingMsi.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceResource{
			Name: to.Ptr("apimService1"),
			Type: to.Ptr("Microsoft.ApiManagement/service"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1"),
			Tags: map[string]*string{},
			Etag: to.Ptr("AAAAAAAENfI="),
			Identity: &armapimanagement.ServiceIdentity{
				Type:        to.Ptr(armapimanagement.ApimIdentityTypeSystemAssignedUserAssigned),
				PrincipalID: to.Ptr("ca1d33f7-xxxx-42ec-xxxx-d526a1ee953a"),
				TenantID:    to.Ptr("72f988bf-xxxx-41af-xxxx-2d7cd011db47"),
				UserAssignedIdentities: map[string]*armapimanagement.UserIdentityProperties{
					"/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/apimService1": {
						ClientID:    to.Ptr("aaff9c7d-xxxx-4db2-xxxx-ab0e3e7806cf"),
						PrincipalID: to.Ptr("95194df2-9208-xxxx-xxxx-a10d2af9b5a3"),
					},
				},
			},
			Location: to.Ptr("West Europe"),
			Properties: &armapimanagement.ServiceProperties{
				CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-04-12T00:20:15.6018952Z"); return t }()),
				CustomProperties: map[string]*string{
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":           to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": to.Ptr("True"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": to.Ptr("True"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168":    to.Ptr("True"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30":         to.Ptr("False"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":         to.Ptr("True"),
					"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":         to.Ptr("True"),
				},
				DeveloperPortalURL: to.Ptr("https://apimService1.developer.azure-api.net"),
				DisableGateway:     to.Ptr(false),
				GatewayRegionalURL: to.Ptr("https://apimService1-westeurope-01.regional.azure-api.net"),
				GatewayURL:         to.Ptr("https://apimService1.azure-api.net"),
				HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
					{
						Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
						CertificateSource:          to.Ptr(armapimanagement.CertificateSourceBuiltIn),
						DefaultSSLBinding:          to.Ptr(false),
						HostName:                   to.Ptr("apimService1.azure-api.net"),
						NegotiateClientCertificate: to.Ptr(false),
					},
					{
						Type: to.Ptr(armapimanagement.HostnameTypeProxy),
						Certificate: &armapimanagement.CertificateInformation{
							Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-18T11:11:47+00:00"); return t }()),
							Subject:    to.Ptr("CN=*.msitesting.net"),
							Thumbprint: to.Ptr("9833D531D7A45XXXXXA85908BD3692E0BD3F"),
						},
						CertificateSource:          to.Ptr(armapimanagement.CertificateSourceKeyVault),
						DefaultSSLBinding:          to.Ptr(true),
						HostName:                   to.Ptr("proxy.msitesting.net"),
						KeyVaultID:                 to.Ptr("https://samir-msi-keyvault.vault.azure.net/secrets/msicertificate"),
						NegotiateClientCertificate: to.Ptr(false),
					}},
				ManagementAPIURL:        to.Ptr("https://apimService1.management.azure-api.net"),
				NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
				PortalURL:               to.Ptr("https://apimService1.portal.azure-api.net"),
				ProvisioningState:       to.Ptr("Succeeded"),
				PublicIPAddresses: []*string{
					to.Ptr("13.94.xxx.188")},
				ScmURL:                  to.Ptr("https://apimService1.scm.azure-api.net"),
				TargetProvisioningState: to.Ptr(""),
				VirtualNetworkConfiguration: &armapimanagement.VirtualNetworkConfiguration{
					SubnetResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/dfVirtualNetwork/subnets/backendSubnet"),
				},
				VirtualNetworkType: to.Ptr(armapimanagement.VirtualNetworkTypeExternal),
				PublisherEmail:     to.Ptr("foo@contoso.com"),
				PublisherName:      to.Ptr("Contoso"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypePremium),
				Capacity: to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetServiceHavingMsi.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIManagementService_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceDeleteService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementServiceDeleteService"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewServiceClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"apimService1",
		&armapimanagement.ServiceClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceDeleteService.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceDeleteService.json: %v", err)
	}
}

func TestAPIManagementService_ListByResourceGroup(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListServiceBySubscriptionAndResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListServiceBySubscriptionAndResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewServiceClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListServiceBySubscriptionAndResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.ServiceListResult{
			Value: []*armapimanagement.ServiceResource{
				{
					Name: to.Ptr("OGF-Z3-06162021-Premium"),
					Type: to.Ptr("Microsoft.ApiManagement/service"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/OGF-Z3-06162021-Premium"),
					Tags: map[string]*string{
						"ReleaseName": to.Ptr("Z3"),
						"owner":       to.Ptr("v-aswmoh"),
					},
					Etag: to.Ptr("AAAAAAAWN/4="),
					Identity: &armapimanagement.ServiceIdentity{
						Type:        to.Ptr(armapimanagement.ApimIdentityTypeSystemAssignedUserAssigned),
						PrincipalID: to.Ptr("306205e7-b21a-41bf-92e2-3e28af30041e"),
						TenantID:    to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
						UserAssignedIdentities: map[string]*armapimanagement.UserIdentityProperties{
							"/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/ogf-identity": {
								ClientID:    to.Ptr("8d9791f2-0cdf-41f4-9e66-cdc39b496789"),
								PrincipalID: to.Ptr("713784d2-ee37-412a-95f0-3768f397f82d"),
							},
						},
					},
					Location: to.Ptr("East US"),
					Properties: &armapimanagement.ServiceProperties{
						AdditionalLocations: []*armapimanagement.AdditionalLocation{
							{
								DisableGateway:     to.Ptr(false),
								GatewayRegionalURL: to.Ptr("https://ogf-z3-06162021-premium-eastus2-01.regional.azure-api.net"),
								Location:           to.Ptr("East US 2"),
								PublicIPAddresses: []*string{
									to.Ptr("40.70.24.106")},
								SKU: &armapimanagement.ServiceSKUProperties{
									Name:     to.Ptr(armapimanagement.SKUTypePremium),
									Capacity: to.Ptr[int32](1),
								},
								Zones: []*string{},
							}},
						APIVersionConstraint: &armapimanagement.APIVersionConstraint{
							MinAPIVersion: to.Ptr("2019-12-01"),
						},
						Certificates: []*armapimanagement.CertificateConfiguration{},
						CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-16T09:40:00.9453556Z"); return t }()),
						CustomProperties: map[string]*string{
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":           to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168":    to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30":         to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":         to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":         to.Ptr("false"),
						},
						DeveloperPortalURL: to.Ptr("https://ogf-z3-06162021-premium.developer.azure-api.net"),
						DisableGateway:     to.Ptr(false),
						GatewayRegionalURL: to.Ptr("https://ogf-z3-06162021-premium-eastus-01.regional.azure-api.net"),
						GatewayURL:         to.Ptr("https://ogf-z3-06162021-premium.azure-api.net"),
						HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
							{
								Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
								CertificateSource:          to.Ptr(armapimanagement.CertificateSourceBuiltIn),
								DefaultSSLBinding:          to.Ptr(false),
								HostName:                   to.Ptr("ogf-z3-06162021-premium.azure-api.net"),
								NegotiateClientCertificate: to.Ptr(false),
							},
							{
								Type: to.Ptr(armapimanagement.HostnameTypeProxy),
								Certificate: &armapimanagement.CertificateInformation{
									Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-08T22:32:32+00:00"); return t }()),
									Subject:    to.Ptr("CN=*.current.int-azure-api.net, O=Microsoft Corporation, L=Redmond, S=WA, C=US"),
									Thumbprint: to.Ptr("BA0C286F71AF3B6A01BDB240C58A4A507E3DBD51"),
								},
								CertificateSource:          to.Ptr(armapimanagement.CertificateSourceCustom),
								DefaultSSLBinding:          to.Ptr(true),
								HostName:                   to.Ptr("gateway.current.int-azure-api.net"),
								KeyVaultID:                 to.Ptr("https://ogf-testing.vault-int.azure-int.net/secrets/current-ssl"),
								NegotiateClientCertificate: to.Ptr(true),
							},
							{
								Type: to.Ptr(armapimanagement.HostnameTypeDeveloperPortal),
								Certificate: &armapimanagement.CertificateInformation{
									Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-08T22:32:32+00:00"); return t }()),
									Subject:    to.Ptr("CN=*.current.int-azure-api.net, O=Microsoft Corporation, L=Redmond, S=WA, C=US"),
									Thumbprint: to.Ptr("BA0C286F71AF3B6A01BDB240C58A4A507E3DBD51"),
								},
								CertificateSource:          to.Ptr(armapimanagement.CertificateSourceCustom),
								DefaultSSLBinding:          to.Ptr(false),
								HostName:                   to.Ptr("developer.current.int-azure-api.net"),
								KeyVaultID:                 to.Ptr("https://ogf-testing.vault-int.azure-int.net/secrets/current-ssl"),
								NegotiateClientCertificate: to.Ptr(false),
							},
							{
								Type: to.Ptr(armapimanagement.HostnameTypeManagement),
								Certificate: &armapimanagement.CertificateInformation{
									Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-08T22:32:32+00:00"); return t }()),
									Subject:    to.Ptr("CN=*.current.int-azure-api.net, O=Microsoft Corporation, L=Redmond, S=WA, C=US"),
									Thumbprint: to.Ptr("BA0C286F71AF3B6A01BDB240C58A4A507E3DBD51"),
								},
								CertificateSource:          to.Ptr(armapimanagement.CertificateSourceCustom),
								DefaultSSLBinding:          to.Ptr(false),
								HostName:                   to.Ptr("mgmt.current.int-azure-api.net"),
								KeyVaultID:                 to.Ptr("https://ogf-testing.vault-int.azure-int.net/secrets/current-ssl"),
								NegotiateClientCertificate: to.Ptr(false),
							}},
						ManagementAPIURL:        to.Ptr("https://ogf-z3-06162021-premium.management.azure-api.net"),
						NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
						PortalURL:               to.Ptr("https://ogf-z3-06162021-premium.portal.azure-api.net"),
						ProvisioningState:       to.Ptr("Succeeded"),
						PublicIPAddresses: []*string{
							to.Ptr("13.92.130.49")},
						PublicNetworkAccess:     to.Ptr(armapimanagement.PublicNetworkAccessEnabled),
						ScmURL:                  to.Ptr("https://ogf-z3-06162021-premium.scm.azure-api.net"),
						TargetProvisioningState: to.Ptr(""),
						VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
						PublisherEmail:          to.Ptr("bar@contoso.com"),
						PublisherName:           to.Ptr("Test Premium"),
					},
					SKU: &armapimanagement.ServiceSKUProperties{
						Name:     to.Ptr(armapimanagement.SKUTypePremium),
						Capacity: to.Ptr[int32](1),
					},
					SystemData: &armapimanagement.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-16T09:40:00.7106733Z"); return t }()),
						CreatedBy:          to.Ptr("bar@contoso.com"),
						CreatedByType:      to.Ptr(armapimanagement.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-20T06:33:09.6159006Z"); return t }()),
						LastModifiedBy:     to.Ptr("foo@contoso.com"),
						LastModifiedByType: to.Ptr(armapimanagement.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("vvktestcons"),
					Type: to.Ptr("Microsoft.ApiManagement/service"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/vvktestcons"),
					Tags: map[string]*string{
						"Owner": to.Ptr("vitaliik"),
					},
					Etag:     to.Ptr("AAAAAAAWKwo="),
					Location: to.Ptr("East US"),
					Properties: &armapimanagement.ServiceProperties{
						CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-10T18:07:23.4565211Z"); return t }()),
						CustomProperties: map[string]*string{
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":           to.Ptr("False"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": to.Ptr("False"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": to.Ptr("False"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": to.Ptr("False"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":         to.Ptr("False"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":         to.Ptr("False"),
						},
						DisableGateway:          to.Ptr(false),
						EnableClientCertificate: to.Ptr(false),
						GatewayURL:              to.Ptr("https://vvktestcons.azure-api.net"),
						HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
							{
								Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
								CertificateSource:          to.Ptr(armapimanagement.CertificateSourceBuiltIn),
								DefaultSSLBinding:          to.Ptr(true),
								HostName:                   to.Ptr("vvktestcons.azure-api.net"),
								NegotiateClientCertificate: to.Ptr(false),
							}},
						NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
						ProvisioningState:       to.Ptr("Succeeded"),
						PublicNetworkAccess:     to.Ptr(armapimanagement.PublicNetworkAccessEnabled),
						TargetProvisioningState: to.Ptr(""),
						VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
						PublisherEmail:          to.Ptr("bar@contoso.com"),
						PublisherName:           to.Ptr("vvktestcons"),
					},
					SKU: &armapimanagement.ServiceSKUProperties{
						Name:     to.Ptr(armapimanagement.SKUTypeConsumption),
						Capacity: to.Ptr[int32](0),
					},
				},
				{
					Name: to.Ptr("OGF-Z3-06162021-Standard"),
					Type: to.Ptr("Microsoft.ApiManagement/service"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/OGF-Z3-06162021-Standard"),
					Tags: map[string]*string{},
					Etag: to.Ptr("AAAAAAAWF7M="),
					Identity: &armapimanagement.ServiceIdentity{
						Type:        to.Ptr(armapimanagement.ApimIdentityTypeSystemAssignedUserAssigned),
						PrincipalID: to.Ptr("347a5800-ca99-475a-9202-fe38ca79ee41"),
						TenantID:    to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
						UserAssignedIdentities: map[string]*armapimanagement.UserIdentityProperties{
							"/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/ogf-identity": {
								ClientID:    to.Ptr("8d9791f2-0cdf-41f4-9e66-cdc39b496789"),
								PrincipalID: to.Ptr("713784d2-ee37-412a-95f0-3768f397f82d"),
							},
						},
					},
					Location: to.Ptr("East US"),
					Properties: &armapimanagement.ServiceProperties{
						APIVersionConstraint: &armapimanagement.APIVersionConstraint{
							MinAPIVersion: to.Ptr("2019-12-01"),
						},
						CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-16T09:39:58.6555759Z"); return t }()),
						CustomProperties: map[string]*string{
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":                                to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30":                      to.Ptr("False"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10":                      to.Ptr("False"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11":                      to.Ptr("False"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA": to.Ptr("true"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168":                         to.Ptr("False"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30":                              to.Ptr("False"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":                              to.Ptr("False"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":                              to.Ptr("False"),
						},
						DeveloperPortalURL: to.Ptr("https://ogf-z3-06162021-standard.developer.azure-api.net"),
						DisableGateway:     to.Ptr(false),
						GatewayRegionalURL: to.Ptr("https://ogf-z3-06162021-standard-eastus-01.regional.azure-api.net"),
						GatewayURL:         to.Ptr("https://ogf-z3-06162021-standard.azure-api.net"),
						HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
							{
								Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
								CertificateSource:          to.Ptr(armapimanagement.CertificateSourceBuiltIn),
								DefaultSSLBinding:          to.Ptr(true),
								HostName:                   to.Ptr("ogf-z3-06162021-standard.azure-api.net"),
								NegotiateClientCertificate: to.Ptr(false),
							}},
						ManagementAPIURL:        to.Ptr("https://ogf-z3-06162021-standard.management.azure-api.net"),
						NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
						PortalURL:               to.Ptr("https://ogf-z3-06162021-standard.portal.azure-api.net"),
						ProvisioningState:       to.Ptr("Succeeded"),
						PublicIPAddresses: []*string{
							to.Ptr("13.82.208.32")},
						PublicNetworkAccess:     to.Ptr(armapimanagement.PublicNetworkAccessEnabled),
						ScmURL:                  to.Ptr("https://ogf-z3-06162021-standard.scm.azure-api.net"),
						TargetProvisioningState: to.Ptr(""),
						VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
						PublisherEmail:          to.Ptr("bar@contoso.com"),
						PublisherName:           to.Ptr("Test Standard"),
					},
					SKU: &armapimanagement.ServiceSKUProperties{
						Name:     to.Ptr(armapimanagement.SKUTypeStandard),
						Capacity: to.Ptr[int32](2),
					},
					SystemData: &armapimanagement.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-16T09:39:58.4591834Z"); return t }()),
						CreatedBy:          to.Ptr("bar@contoso.com"),
						CreatedByType:      to.Ptr(armapimanagement.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-17T15:05:13.5494721Z"); return t }()),
						LastModifiedBy:     to.Ptr("bar@contoso.com"),
						LastModifiedByType: to.Ptr(armapimanagement.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("ogf-dev-060921"),
					Type: to.Ptr("Microsoft.ApiManagement/service"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/ogf-dev-060921"),
					Tags: map[string]*string{},
					Etag: to.Ptr("AAAAAAAWEFg="),
					Identity: &armapimanagement.ServiceIdentity{
						Type:        to.Ptr(armapimanagement.ApimIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("c9bd4c05-205e-4431-b232-112cf2e9e0aa"),
						TenantID:    to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
					},
					Location: to.Ptr("East US"),
					Properties: &armapimanagement.ServiceProperties{
						AdditionalLocations: []*armapimanagement.AdditionalLocation{
							{
								DisableGateway:     to.Ptr(false),
								GatewayRegionalURL: to.Ptr("https://ogf-dev-060921-southcentralus-01.regional.azure-api.net"),
								Location:           to.Ptr("South Central US"),
								PublicIPAddresses: []*string{
									to.Ptr("13.84.208.29")},
								SKU: &armapimanagement.ServiceSKUProperties{
									Name:     to.Ptr(armapimanagement.SKUTypePremium),
									Capacity: to.Ptr[int32](9),
								},
								Zones: []*string{},
							}},
						APIVersionConstraint: &armapimanagement.APIVersionConstraint{
							MinAPIVersion: to.Ptr("2019-12-01"),
						},
						Certificates: []*armapimanagement.CertificateConfiguration{
							{
								Certificate: &armapimanagement.CertificateInformation{
									Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-25T22:51:47+00:00"); return t }()),
									Subject:    to.Ptr("CN=*.apim.net"),
									Thumbprint: to.Ptr("4E8234312EC69245D1AE296C4882D46FB84076A3"),
								},
								StoreName: to.Ptr(armapimanagement.CertificateConfigurationStoreNameRoot),
							}},
						CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-09T10:06:22.2133978Z"); return t }()),
						CustomProperties: map[string]*string{
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":           to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168":    to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30":         to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":         to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":         to.Ptr("false"),
						},
						DeveloperPortalURL: to.Ptr("https://ogf-dev-060921.developer.azure-api.net"),
						DisableGateway:     to.Ptr(false),
						GatewayRegionalURL: to.Ptr("https://ogf-dev-060921-eastus-01.regional.azure-api.net"),
						GatewayURL:         to.Ptr("https://ogf-dev-060921.azure-api.net"),
						HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
							{
								Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
								CertificateSource:          to.Ptr(armapimanagement.CertificateSourceBuiltIn),
								DefaultSSLBinding:          to.Ptr(true),
								HostName:                   to.Ptr("ogf-dev-060921.azure-api.net"),
								NegotiateClientCertificate: to.Ptr(false),
							}},
						ManagementAPIURL:        to.Ptr("https://ogf-dev-060921.management.azure-api.net"),
						NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
						PortalURL:               to.Ptr("https://ogf-dev-060921.portal.azure-api.net"),
						ProvisioningState:       to.Ptr("Succeeded"),
						PublicIPAddresses: []*string{
							to.Ptr("168.62.39.172")},
						PublicNetworkAccess:     to.Ptr(armapimanagement.PublicNetworkAccessEnabled),
						ScmURL:                  to.Ptr("https://ogf-dev-060921.scm.azure-api.net"),
						TargetProvisioningState: to.Ptr(""),
						VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
						PublisherEmail:          to.Ptr("v-ssaiprasan@microsoft.com"),
						PublisherName:           to.Ptr("TechM"),
					},
					SKU: &armapimanagement.ServiceSKUProperties{
						Name:     to.Ptr(armapimanagement.SKUTypePremium),
						Capacity: to.Ptr[int32](3),
					},
					SystemData: &armapimanagement.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-09T10:06:21.7336597Z"); return t }()),
						CreatedBy:          to.Ptr("v-ssaiprasan@microsoft.com"),
						CreatedByType:      to.Ptr(armapimanagement.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-10T14:27:05.546816Z"); return t }()),
						LastModifiedBy:     to.Ptr("v-ssaiprasan@microsoft.com"),
						LastModifiedByType: to.Ptr(armapimanagement.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListServiceBySubscriptionAndResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIManagementService_List(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListServiceBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListServiceBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewServiceClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListServiceBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.ServiceListResult{
			Value: []*armapimanagement.ServiceResource{
				{
					Name: to.Ptr("OGF-Z3-06162021-Premium"),
					Type: to.Ptr("Microsoft.ApiManagement/service"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/OGF-Z3-06162021-Premium"),
					Tags: map[string]*string{
						"ReleaseName": to.Ptr("Z3"),
						"owner":       to.Ptr("v-aswmoh"),
					},
					Etag: to.Ptr("AAAAAAAWN/4="),
					Identity: &armapimanagement.ServiceIdentity{
						Type:        to.Ptr(armapimanagement.ApimIdentityTypeSystemAssignedUserAssigned),
						PrincipalID: to.Ptr("306205e7-b21a-41bf-92e2-3e28af30041e"),
						TenantID:    to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
						UserAssignedIdentities: map[string]*armapimanagement.UserIdentityProperties{
							"/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/ogf-identity": {
								ClientID:    to.Ptr("8d9791f2-0cdf-41f4-9e66-cdc39b496789"),
								PrincipalID: to.Ptr("713784d2-ee37-412a-95f0-3768f397f82d"),
							},
						},
					},
					Location: to.Ptr("East US"),
					Properties: &armapimanagement.ServiceProperties{
						AdditionalLocations: []*armapimanagement.AdditionalLocation{
							{
								DisableGateway:     to.Ptr(false),
								GatewayRegionalURL: to.Ptr("https://ogf-z3-06162021-premium-eastus2-01.regional.azure-api.net"),
								Location:           to.Ptr("East US 2"),
								PublicIPAddresses: []*string{
									to.Ptr("40.70.24.106")},
								SKU: &armapimanagement.ServiceSKUProperties{
									Name:     to.Ptr(armapimanagement.SKUTypePremium),
									Capacity: to.Ptr[int32](1),
								},
								Zones: []*string{},
							}},
						APIVersionConstraint: &armapimanagement.APIVersionConstraint{
							MinAPIVersion: to.Ptr("2019-12-01"),
						},
						Certificates: []*armapimanagement.CertificateConfiguration{},
						CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-16T09:40:00.9453556Z"); return t }()),
						CustomProperties: map[string]*string{
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":           to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168":    to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30":         to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":         to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":         to.Ptr("false"),
						},
						DeveloperPortalURL: to.Ptr("https://ogf-z3-06162021-premium.developer.azure-api.net"),
						DisableGateway:     to.Ptr(false),
						GatewayRegionalURL: to.Ptr("https://ogf-z3-06162021-premium-eastus-01.regional.azure-api.net"),
						GatewayURL:         to.Ptr("https://ogf-z3-06162021-premium.azure-api.net"),
						HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
							{
								Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
								CertificateSource:          to.Ptr(armapimanagement.CertificateSourceBuiltIn),
								DefaultSSLBinding:          to.Ptr(false),
								HostName:                   to.Ptr("ogf-z3-06162021-premium.azure-api.net"),
								NegotiateClientCertificate: to.Ptr(false),
							},
							{
								Type: to.Ptr(armapimanagement.HostnameTypeProxy),
								Certificate: &armapimanagement.CertificateInformation{
									Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-08T22:32:32+00:00"); return t }()),
									Subject:    to.Ptr("CN=*.current.int-azure-api.net, O=Microsoft Corporation, L=Redmond, S=WA, C=US"),
									Thumbprint: to.Ptr("BA0C286F71AF3B6A01BDB240C58A4A507E3DBD51"),
								},
								CertificateSource:          to.Ptr(armapimanagement.CertificateSourceCustom),
								DefaultSSLBinding:          to.Ptr(true),
								HostName:                   to.Ptr("gateway.current.int-azure-api.net"),
								KeyVaultID:                 to.Ptr("https://ogf-testing.vault-int.azure-int.net/secrets/current-ssl"),
								NegotiateClientCertificate: to.Ptr(true),
							},
							{
								Type: to.Ptr(armapimanagement.HostnameTypeDeveloperPortal),
								Certificate: &armapimanagement.CertificateInformation{
									Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-08T22:32:32+00:00"); return t }()),
									Subject:    to.Ptr("CN=*.current.int-azure-api.net, O=Microsoft Corporation, L=Redmond, S=WA, C=US"),
									Thumbprint: to.Ptr("BA0C286F71AF3B6A01BDB240C58A4A507E3DBD51"),
								},
								CertificateSource:          to.Ptr(armapimanagement.CertificateSourceCustom),
								DefaultSSLBinding:          to.Ptr(false),
								HostName:                   to.Ptr("developer.current.int-azure-api.net"),
								KeyVaultID:                 to.Ptr("https://ogf-testing.vault-int.azure-int.net/secrets/current-ssl"),
								NegotiateClientCertificate: to.Ptr(false),
							},
							{
								Type: to.Ptr(armapimanagement.HostnameTypeManagement),
								Certificate: &armapimanagement.CertificateInformation{
									Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-08T22:32:32+00:00"); return t }()),
									Subject:    to.Ptr("CN=*.current.int-azure-api.net, O=Microsoft Corporation, L=Redmond, S=WA, C=US"),
									Thumbprint: to.Ptr("BA0C286F71AF3B6A01BDB240C58A4A507E3DBD51"),
								},
								CertificateSource:          to.Ptr(armapimanagement.CertificateSourceCustom),
								DefaultSSLBinding:          to.Ptr(false),
								HostName:                   to.Ptr("mgmt.current.int-azure-api.net"),
								KeyVaultID:                 to.Ptr("https://ogf-testing.vault-int.azure-int.net/secrets/current-ssl"),
								NegotiateClientCertificate: to.Ptr(false),
							}},
						ManagementAPIURL:        to.Ptr("https://ogf-z3-06162021-premium.management.azure-api.net"),
						NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
						PortalURL:               to.Ptr("https://ogf-z3-06162021-premium.portal.azure-api.net"),
						ProvisioningState:       to.Ptr("Succeeded"),
						PublicIPAddresses: []*string{
							to.Ptr("13.92.130.49")},
						PublicNetworkAccess:     to.Ptr(armapimanagement.PublicNetworkAccessEnabled),
						ScmURL:                  to.Ptr("https://ogf-z3-06162021-premium.scm.azure-api.net"),
						TargetProvisioningState: to.Ptr(""),
						VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
						PublisherEmail:          to.Ptr("bar@contoso.com"),
						PublisherName:           to.Ptr("Test Premium"),
					},
					SKU: &armapimanagement.ServiceSKUProperties{
						Name:     to.Ptr(armapimanagement.SKUTypePremium),
						Capacity: to.Ptr[int32](1),
					},
					SystemData: &armapimanagement.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-16T09:40:00.7106733Z"); return t }()),
						CreatedBy:          to.Ptr("bar@contoso.com"),
						CreatedByType:      to.Ptr(armapimanagement.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-20T06:33:09.6159006Z"); return t }()),
						LastModifiedBy:     to.Ptr("foo@contoso.com"),
						LastModifiedByType: to.Ptr(armapimanagement.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("vvktestcons"),
					Type: to.Ptr("Microsoft.ApiManagement/service"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/vvktestcons"),
					Tags: map[string]*string{
						"Owner": to.Ptr("vitaliik"),
					},
					Etag:     to.Ptr("AAAAAAAWKwo="),
					Location: to.Ptr("East US"),
					Properties: &armapimanagement.ServiceProperties{
						CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-10T18:07:23.4565211Z"); return t }()),
						CustomProperties: map[string]*string{
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":           to.Ptr("False"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": to.Ptr("False"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": to.Ptr("False"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": to.Ptr("False"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":         to.Ptr("False"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":         to.Ptr("False"),
						},
						DisableGateway:          to.Ptr(false),
						EnableClientCertificate: to.Ptr(false),
						GatewayURL:              to.Ptr("https://vvktestcons.azure-api.net"),
						HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
							{
								Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
								CertificateSource:          to.Ptr(armapimanagement.CertificateSourceBuiltIn),
								DefaultSSLBinding:          to.Ptr(true),
								HostName:                   to.Ptr("vvktestcons.azure-api.net"),
								NegotiateClientCertificate: to.Ptr(false),
							}},
						NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
						ProvisioningState:       to.Ptr("Succeeded"),
						PublicNetworkAccess:     to.Ptr(armapimanagement.PublicNetworkAccessEnabled),
						TargetProvisioningState: to.Ptr(""),
						VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
						PublisherEmail:          to.Ptr("bar@contoso.com"),
						PublisherName:           to.Ptr("vvktestcons"),
					},
					SKU: &armapimanagement.ServiceSKUProperties{
						Name:     to.Ptr(armapimanagement.SKUTypeConsumption),
						Capacity: to.Ptr[int32](0),
					},
				},
				{
					Name: to.Ptr("OGF-Z3-06162021-Standard"),
					Type: to.Ptr("Microsoft.ApiManagement/service"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/OGF-Z3-06162021-Standard"),
					Tags: map[string]*string{},
					Etag: to.Ptr("AAAAAAAWF7M="),
					Identity: &armapimanagement.ServiceIdentity{
						Type:        to.Ptr(armapimanagement.ApimIdentityTypeSystemAssignedUserAssigned),
						PrincipalID: to.Ptr("347a5800-ca99-475a-9202-fe38ca79ee41"),
						TenantID:    to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
						UserAssignedIdentities: map[string]*armapimanagement.UserIdentityProperties{
							"/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/ogf-identity": {
								ClientID:    to.Ptr("8d9791f2-0cdf-41f4-9e66-cdc39b496789"),
								PrincipalID: to.Ptr("713784d2-ee37-412a-95f0-3768f397f82d"),
							},
						},
					},
					Location: to.Ptr("East US"),
					Properties: &armapimanagement.ServiceProperties{
						APIVersionConstraint: &armapimanagement.APIVersionConstraint{
							MinAPIVersion: to.Ptr("2019-12-01"),
						},
						CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-16T09:39:58.6555759Z"); return t }()),
						CustomProperties: map[string]*string{
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":                                to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30":                      to.Ptr("False"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10":                      to.Ptr("False"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11":                      to.Ptr("False"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA": to.Ptr("true"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168":                         to.Ptr("False"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30":                              to.Ptr("False"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":                              to.Ptr("False"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":                              to.Ptr("False"),
						},
						DeveloperPortalURL: to.Ptr("https://ogf-z3-06162021-standard.developer.azure-api.net"),
						DisableGateway:     to.Ptr(false),
						GatewayRegionalURL: to.Ptr("https://ogf-z3-06162021-standard-eastus-01.regional.azure-api.net"),
						GatewayURL:         to.Ptr("https://ogf-z3-06162021-standard.azure-api.net"),
						HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
							{
								Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
								CertificateSource:          to.Ptr(armapimanagement.CertificateSourceBuiltIn),
								DefaultSSLBinding:          to.Ptr(true),
								HostName:                   to.Ptr("ogf-z3-06162021-standard.azure-api.net"),
								NegotiateClientCertificate: to.Ptr(false),
							}},
						ManagementAPIURL:        to.Ptr("https://ogf-z3-06162021-standard.management.azure-api.net"),
						NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
						PortalURL:               to.Ptr("https://ogf-z3-06162021-standard.portal.azure-api.net"),
						ProvisioningState:       to.Ptr("Succeeded"),
						PublicIPAddresses: []*string{
							to.Ptr("13.82.208.32")},
						PublicNetworkAccess:     to.Ptr(armapimanagement.PublicNetworkAccessEnabled),
						ScmURL:                  to.Ptr("https://ogf-z3-06162021-standard.scm.azure-api.net"),
						TargetProvisioningState: to.Ptr(""),
						VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
						PublisherEmail:          to.Ptr("bar@contoso.com"),
						PublisherName:           to.Ptr("Test Standard"),
					},
					SKU: &armapimanagement.ServiceSKUProperties{
						Name:     to.Ptr(armapimanagement.SKUTypeStandard),
						Capacity: to.Ptr[int32](2),
					},
					SystemData: &armapimanagement.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-16T09:39:58.4591834Z"); return t }()),
						CreatedBy:          to.Ptr("bar@contoso.com"),
						CreatedByType:      to.Ptr(armapimanagement.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-17T15:05:13.5494721Z"); return t }()),
						LastModifiedBy:     to.Ptr("bar@contoso.com"),
						LastModifiedByType: to.Ptr(armapimanagement.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("ogf-dev-060921"),
					Type: to.Ptr("Microsoft.ApiManagement/service"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/ogf-dev-060921"),
					Tags: map[string]*string{},
					Etag: to.Ptr("AAAAAAAWEFg="),
					Identity: &armapimanagement.ServiceIdentity{
						Type:        to.Ptr(armapimanagement.ApimIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("c9bd4c05-205e-4431-b232-112cf2e9e0aa"),
						TenantID:    to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
					},
					Location: to.Ptr("East US"),
					Properties: &armapimanagement.ServiceProperties{
						AdditionalLocations: []*armapimanagement.AdditionalLocation{
							{
								DisableGateway:     to.Ptr(false),
								GatewayRegionalURL: to.Ptr("https://ogf-dev-060921-southcentralus-01.regional.azure-api.net"),
								Location:           to.Ptr("South Central US"),
								PublicIPAddresses: []*string{
									to.Ptr("13.84.208.29")},
								SKU: &armapimanagement.ServiceSKUProperties{
									Name:     to.Ptr(armapimanagement.SKUTypePremium),
									Capacity: to.Ptr[int32](9),
								},
								Zones: []*string{},
							}},
						APIVersionConstraint: &armapimanagement.APIVersionConstraint{
							MinAPIVersion: to.Ptr("2019-12-01"),
						},
						Certificates: []*armapimanagement.CertificateConfiguration{
							{
								Certificate: &armapimanagement.CertificateInformation{
									Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-25T22:51:47+00:00"); return t }()),
									Subject:    to.Ptr("CN=*.apim.net"),
									Thumbprint: to.Ptr("4E8234312EC69245D1AE296C4882D46FB84076A3"),
								},
								StoreName: to.Ptr(armapimanagement.CertificateConfigurationStoreNameRoot),
							}},
						CreatedAtUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-09T10:06:22.2133978Z"); return t }()),
						CustomProperties: map[string]*string{
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2":           to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168":    to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30":         to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10":         to.Ptr("false"),
							"Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11":         to.Ptr("false"),
						},
						DeveloperPortalURL: to.Ptr("https://ogf-dev-060921.developer.azure-api.net"),
						DisableGateway:     to.Ptr(false),
						GatewayRegionalURL: to.Ptr("https://ogf-dev-060921-eastus-01.regional.azure-api.net"),
						GatewayURL:         to.Ptr("https://ogf-dev-060921.azure-api.net"),
						HostnameConfigurations: []*armapimanagement.HostnameConfiguration{
							{
								Type:                       to.Ptr(armapimanagement.HostnameTypeProxy),
								CertificateSource:          to.Ptr(armapimanagement.CertificateSourceBuiltIn),
								DefaultSSLBinding:          to.Ptr(true),
								HostName:                   to.Ptr("ogf-dev-060921.azure-api.net"),
								NegotiateClientCertificate: to.Ptr(false),
							}},
						ManagementAPIURL:        to.Ptr("https://ogf-dev-060921.management.azure-api.net"),
						NotificationSenderEmail: to.Ptr("apimgmt-noreply@mail.windowsazure.com"),
						PortalURL:               to.Ptr("https://ogf-dev-060921.portal.azure-api.net"),
						ProvisioningState:       to.Ptr("Succeeded"),
						PublicIPAddresses: []*string{
							to.Ptr("168.62.39.172")},
						PublicNetworkAccess:     to.Ptr(armapimanagement.PublicNetworkAccessEnabled),
						ScmURL:                  to.Ptr("https://ogf-dev-060921.scm.azure-api.net"),
						TargetProvisioningState: to.Ptr(""),
						VirtualNetworkType:      to.Ptr(armapimanagement.VirtualNetworkTypeNone),
						PublisherEmail:          to.Ptr("v-ssaiprasan@microsoft.com"),
						PublisherName:           to.Ptr("TechM"),
					},
					SKU: &armapimanagement.ServiceSKUProperties{
						Name:     to.Ptr(armapimanagement.SKUTypePremium),
						Capacity: to.Ptr[int32](3),
					},
					SystemData: &armapimanagement.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-09T10:06:21.7336597Z"); return t }()),
						CreatedBy:          to.Ptr("v-ssaiprasan@microsoft.com"),
						CreatedByType:      to.Ptr(armapimanagement.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-10T14:27:05.546816Z"); return t }()),
						LastModifiedBy:     to.Ptr("v-ssaiprasan@microsoft.com"),
						LastModifiedByType: to.Ptr(armapimanagement.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListServiceBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIManagementService_GetSsoToken(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetSsoToken.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementServiceGetSsoToken"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewServiceClient("subid", cred, &options)
	res, err := client.GetSsoToken(ctx,
		"rg1",
		"apimService1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetSsoToken.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceGetSsoTokenResult{
			RedirectURI: to.Ptr("https://apimService1.portal.azure-api.net:443/signin-sso?token=1%26201705301929%26eIkr3%2fnfaLs1GVJ0OVbzkJjAcwPFkEZAPM8VUXvXPf7cJ6lWsB9oUwsk2zln9x0KLkn21txCPJWWheSPq7SNeA%3d%3d"),
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceGetSsoTokenResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceGetSsoTokenResult)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetSsoToken.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIManagementService_CheckNameAvailability(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceCheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementServiceCheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewServiceClient("subid", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		armapimanagement.ServiceCheckNameAvailabilityParameters{
			Name: to.Ptr("apimService1"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceCheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceNameAvailabilityResult{
			Message:       to.Ptr(""),
			NameAvailable: to.Ptr(true),
			Reason:        to.Ptr(armapimanagement.NameAvailabilityReasonValid),
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceNameAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceNameAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceCheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIManagementService_GetDomainOwnershipIdentifier(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetDomainOwnershipIdentifier.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementServiceGetDomainOwnershipIdentifier"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewServiceClient("subid", cred, &options)
	res, err := client.GetDomainOwnershipIdentifier(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetDomainOwnershipIdentifier.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceGetDomainOwnershipIdentifierResult{
			DomainOwnershipIdentifier: to.Ptr("KLE1vdMblVeHECAi4nCe3oNaXXXXvNlLrXt2ev84KM="),
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceGetDomainOwnershipIdentifierResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceGetDomainOwnershipIdentifierResult)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetDomainOwnershipIdentifier.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIManagementService_ApplyNetworkConfigurationUpdates(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementApplyNetworkConfigurationUpdates.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementApplyNetworkConfigurationUpdates"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewServiceClient("subid", cred, &options)
	poller, err := client.BeginApplyNetworkConfigurationUpdates(ctx,
		"rg1",
		"apimService1",
		&armapimanagement.ServiceClientBeginApplyNetworkConfigurationUpdatesOptions{Parameters: &armapimanagement.ServiceApplyNetworkConfigurationParameters{
			Location: to.Ptr("west us"),
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementApplyNetworkConfigurationUpdates.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementApplyNetworkConfigurationUpdates.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ServiceResource{
			Name: to.Ptr("apimService1"),
			Type: to.Ptr("Microsoft.ApiManagement/service"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1"),
			Tags: map[string]*string{
				"UID": to.Ptr("52ed5986-717b-45b4-b17c-3df8db372cff"),
			},
			Etag:     to.Ptr("AAAAAAAXX6Y="),
			Location: to.Ptr("East Asia"),
			Properties: &armapimanagement.ServiceProperties{
				CreatedAtUTC:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-09-22T01:50:34.7921566Z"); return t }()),
				GatewayURL:             to.Ptr("https://apimService1.azure-api.net"),
				HostnameConfigurations: []*armapimanagement.HostnameConfiguration{},
				ManagementAPIURL:       to.Ptr("https://apimService1.management.azure-api.net"),
				PortalURL:              to.Ptr("https://apimService1.portal.azure-api.net"),
				ProvisioningState:      to.Ptr("Succeeded"),
				PublicIPAddresses: []*string{
					to.Ptr("207.46.155.24")},
				ScmURL:                  to.Ptr("https://apimService1.scm.azure-api.net"),
				TargetProvisioningState: to.Ptr(""),
				VirtualNetworkConfiguration: &armapimanagement.VirtualNetworkConfiguration{
					SubnetResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/eastUsVirtualNetwork/subnets/apimSubnet"),
				},
				VirtualNetworkType: to.Ptr(armapimanagement.VirtualNetworkTypeExternal),
				PublisherEmail:     to.Ptr("admin@live.com"),
				PublisherName:      to.Ptr("Contoso"),
			},
			SKU: &armapimanagement.ServiceSKUProperties{
				Name:     to.Ptr(armapimanagement.SKUTypePremium),
				Capacity: to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementApplyNetworkConfigurationUpdates.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostic_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListDiagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListDiagnostics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewDiagnosticClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.DiagnosticClientListByServiceOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListDiagnostics.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.DiagnosticCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.DiagnosticContract{
				{
					Name: to.Ptr("applicationinsights"),
					Type: to.Ptr("Microsoft.ApiManagement/service/diagnostics"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/diagnostics/applicationinsights"),
					Properties: &armapimanagement.DiagnosticContractProperties{
						AlwaysLog: to.Ptr(armapimanagement.AlwaysLogAllErrors),
						Backend: &armapimanagement.PipelineDiagnosticSettings{
							Response: &armapimanagement.HTTPMessageDiagnostic{
								Body: &armapimanagement.BodyDiagnosticSettings{
									Bytes: to.Ptr[int32](0),
								},
								Headers: []*string{},
							},
							Request: &armapimanagement.HTTPMessageDiagnostic{
								Body: &armapimanagement.BodyDiagnosticSettings{
									Bytes: to.Ptr[int32](0),
								},
								Headers: []*string{},
							},
						},
						Frontend: &armapimanagement.PipelineDiagnosticSettings{
							Response: &armapimanagement.HTTPMessageDiagnostic{
								Body: &armapimanagement.BodyDiagnosticSettings{
									Bytes: to.Ptr[int32](0),
								},
								Headers: []*string{},
							},
							Request: &armapimanagement.HTTPMessageDiagnostic{
								Body: &armapimanagement.BodyDiagnosticSettings{
									Bytes: to.Ptr[int32](0),
								},
								Headers: []*string{},
							},
						},
						HTTPCorrelationProtocol: to.Ptr(armapimanagement.HTTPCorrelationProtocolLegacy),
						LogClientIP:             to.Ptr(true),
						LoggerID:                to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/loggers/aisamplingtest"),
						Sampling: &armapimanagement.SamplingSettings{
							Percentage:   to.Ptr[float64](100),
							SamplingType: to.Ptr(armapimanagement.SamplingTypeFixed),
						},
						Verbosity: to.Ptr(armapimanagement.VerbosityInformation),
					},
				},
				{
					Name: to.Ptr("azuremonitor"),
					Type: to.Ptr("Microsoft.ApiManagement/service/diagnostics"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/diagnostics/azuremonitor"),
					Properties: &armapimanagement.DiagnosticContractProperties{
						LogClientIP: to.Ptr(true),
						LoggerID:    to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/loggers/azuremonitor"),
						Sampling: &armapimanagement.SamplingSettings{
							Percentage:   to.Ptr[float64](100),
							SamplingType: to.Ptr(armapimanagement.SamplingTypeFixed),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiagnosticCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiagnosticCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListDiagnostics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostic_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadDiagnostic.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadDiagnostic"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewDiagnosticClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"applicationinsights",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadDiagnostic.json: %v", err)
	}
}

func TestDiagnostic_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetDiagnostic.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetDiagnostic"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewDiagnosticClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"applicationinsights",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetDiagnostic.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.DiagnosticContract{
			Name: to.Ptr("applicationinsights"),
			Type: to.Ptr("Microsoft.ApiManagement/service/diagnostics"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/diagnostics/applicationinsights"),
			Properties: &armapimanagement.DiagnosticContractProperties{
				AlwaysLog: to.Ptr(armapimanagement.AlwaysLogAllErrors),
				Backend: &armapimanagement.PipelineDiagnosticSettings{
					Response: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](100),
						},
						Headers: []*string{},
					},
					Request: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](100),
						},
						Headers: []*string{},
					},
				},
				Frontend: &armapimanagement.PipelineDiagnosticSettings{
					Response: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](100),
						},
						Headers: []*string{},
					},
					Request: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](100),
						},
						Headers: []*string{},
					},
				},
				HTTPCorrelationProtocol: to.Ptr(armapimanagement.HTTPCorrelationProtocolLegacy),
				LogClientIP:             to.Ptr(true),
				LoggerID:                to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/loggers/aisamplingtest"),
				Sampling: &armapimanagement.SamplingSettings{
					Percentage:   to.Ptr[float64](100),
					SamplingType: to.Ptr(armapimanagement.SamplingTypeFixed),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetDiagnostic.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostic_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateDiagnostic.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateDiagnostic"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewDiagnosticClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"applicationinsights",
		armapimanagement.DiagnosticContract{
			Properties: &armapimanagement.DiagnosticContractProperties{
				AlwaysLog: to.Ptr(armapimanagement.AlwaysLogAllErrors),
				Backend: &armapimanagement.PipelineDiagnosticSettings{
					Response: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
					Request: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
				},
				Frontend: &armapimanagement.PipelineDiagnosticSettings{
					Response: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
					Request: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
				},
				LoggerID: to.Ptr("/loggers/azuremonitor"),
				Sampling: &armapimanagement.SamplingSettings{
					Percentage:   to.Ptr[float64](50),
					SamplingType: to.Ptr(armapimanagement.SamplingTypeFixed),
				},
			},
		},
		&armapimanagement.DiagnosticClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateDiagnostic.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.DiagnosticContract{
			Name: to.Ptr("applicationinsights"),
			Type: to.Ptr("Microsoft.ApiManagement/service/diagnostics"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/diagnostics/applicationinsights"),
			Properties: &armapimanagement.DiagnosticContractProperties{
				AlwaysLog: to.Ptr(armapimanagement.AlwaysLogAllErrors),
				Backend: &armapimanagement.PipelineDiagnosticSettings{
					Response: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
					Request: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
				},
				Frontend: &armapimanagement.PipelineDiagnosticSettings{
					Response: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
					Request: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
				},
				LoggerID: to.Ptr("/loggers/applicationinsights"),
				Sampling: &armapimanagement.SamplingSettings{
					Percentage:   to.Ptr[float64](50),
					SamplingType: to.Ptr(armapimanagement.SamplingTypeFixed),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateDiagnostic.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostic_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateDiagnostic.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateDiagnostic"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewDiagnosticClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"applicationinsights",
		"*",
		armapimanagement.DiagnosticContract{
			Properties: &armapimanagement.DiagnosticContractProperties{
				AlwaysLog: to.Ptr(armapimanagement.AlwaysLogAllErrors),
				Backend: &armapimanagement.PipelineDiagnosticSettings{
					Response: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
					Request: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
				},
				Frontend: &armapimanagement.PipelineDiagnosticSettings{
					Response: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
					Request: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
				},
				LoggerID: to.Ptr("/loggers/applicationinsights"),
				Sampling: &armapimanagement.SamplingSettings{
					Percentage:   to.Ptr[float64](50),
					SamplingType: to.Ptr(armapimanagement.SamplingTypeFixed),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateDiagnostic.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.DiagnosticContract{
			Name: to.Ptr("applicationinsights"),
			Type: to.Ptr("Microsoft.ApiManagement/service/diagnostics"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/diagnostics/applicationinsights"),
			Properties: &armapimanagement.DiagnosticContractProperties{
				AlwaysLog: to.Ptr(armapimanagement.AlwaysLogAllErrors),
				Backend: &armapimanagement.PipelineDiagnosticSettings{
					Response: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
					Request: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
				},
				Frontend: &armapimanagement.PipelineDiagnosticSettings{
					Response: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
					Request: &armapimanagement.HTTPMessageDiagnostic{
						Body: &armapimanagement.BodyDiagnosticSettings{
							Bytes: to.Ptr[int32](512),
						},
						Headers: []*string{
							to.Ptr("Content-type")},
					},
				},
				HTTPCorrelationProtocol: to.Ptr(armapimanagement.HTTPCorrelationProtocolLegacy),
				LogClientIP:             to.Ptr(true),
				LoggerID:                to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/loggers/aisamplingtest"),
				Sampling: &armapimanagement.SamplingSettings{
					Percentage:   to.Ptr[float64](50),
					SamplingType: to.Ptr(armapimanagement.SamplingTypeFixed),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateDiagnostic.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostic_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteDiagnostic.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteDiagnostic"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewDiagnosticClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"applicationinsights",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteDiagnostic.json: %v", err)
	}
}

func TestEmailTemplate_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListTemplates.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListTemplates"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewEmailTemplateClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.EmailTemplateClientListByServiceOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListTemplates.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.EmailTemplateCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.EmailTemplateContract{
				{
					Name: to.Ptr("ApplicationApprovedNotificationMessage"),
					Type: to.Ptr("Microsoft.ApiManagement/service/templates"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/templates/ApplicationApprovedNotificationMessage"),
					Properties: &armapimanagement.EmailTemplateContractProperties{
						Description: to.Ptr("Developers who submitted their application for publication in the application gallery on the developer portal receive this email after their submission is approved."),
						Body:        to.Ptr("<!DOCTYPE html >\r\n<html>\r\n  <head />\r\n  <body>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Dear $DevFirstName $DevLastName,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n          We are happy to let you know that your request to publish the $AppName application in the application gallery has been approved. Your application has been published and can be viewed <a href=\"http://$DevPortalUrl/Applications/Details/$AppId\">here</a>.\r\n        </p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Best,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">The $OrganizationName API Team</p>\r\n  </body>\r\n</html>"),
						IsDefault:   to.Ptr(true),
						Parameters: []*armapimanagement.EmailTemplateParametersContractProperties{
							{
								Name:  to.Ptr("AppId"),
								Title: to.Ptr("Application id"),
							},
							{
								Name:  to.Ptr("AppName"),
								Title: to.Ptr("Application name"),
							},
							{
								Name:  to.Ptr("DevFirstName"),
								Title: to.Ptr("Developer first name"),
							},
							{
								Name:  to.Ptr("DevLastName"),
								Title: to.Ptr("Developer last name"),
							},
							{
								Name:  to.Ptr("OrganizationName"),
								Title: to.Ptr("Organization name"),
							},
							{
								Name:  to.Ptr("DevPortalUrl"),
								Title: to.Ptr("Developer portal URL"),
							}},
						Subject: to.Ptr("Your application $AppName is published in the application gallery"),
						Title:   to.Ptr("Application gallery submission approved"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EmailTemplateCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EmailTemplateCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListTemplates.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEmailTemplate_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadEmailTemplate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadEmailTemplate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewEmailTemplateClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		armapimanagement.TemplateNameNewIssueNotificationMessage,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadEmailTemplate.json: %v", err)
	}
}

func TestEmailTemplate_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetTemplate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetTemplate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewEmailTemplateClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		armapimanagement.TemplateNameNewIssueNotificationMessage,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetTemplate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.EmailTemplateContract{
			Name: to.Ptr("NewIssueNotificationMessage"),
			Type: to.Ptr("Microsoft.ApiManagement/service/templates"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/templates/NewIssueNotificationMessage"),
			Properties: &armapimanagement.EmailTemplateContractProperties{
				Description: to.Ptr("This email is sent to developers after they create a new topic on the Issues page of the developer portal."),
				Body:        to.Ptr("<!DOCTYPE html >\r\n<html>\r\n  <head />\r\n  <body>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Dear $DevFirstName $DevLastName,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Thank you for contacting us. Our API team will review your issue and get back to you soon.</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n          Click this <a href=\"http://$DevPortalUrl/issues/$IssueId\">link</a> to view or edit your request.\r\n        </p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Best,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">The $OrganizationName API Team</p>\r\n  </body>\r\n</html>"),
				IsDefault:   to.Ptr(true),
				Parameters: []*armapimanagement.EmailTemplateParametersContractProperties{
					{
						Name:  to.Ptr("DevFirstName"),
						Title: to.Ptr("Developer first name"),
					},
					{
						Name:  to.Ptr("DevLastName"),
						Title: to.Ptr("Developer last name"),
					},
					{
						Name:  to.Ptr("IssueId"),
						Title: to.Ptr("Issue id"),
					},
					{
						Name:  to.Ptr("IssueName"),
						Title: to.Ptr("Issue name"),
					},
					{
						Name:  to.Ptr("OrganizationName"),
						Title: to.Ptr("Organization name"),
					},
					{
						Name:  to.Ptr("DevPortalUrl"),
						Title: to.Ptr("Developer portal URL"),
					}},
				Subject: to.Ptr("Your request $IssueName was received"),
				Title:   to.Ptr("New issue received"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EmailTemplateContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EmailTemplateContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetTemplate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEmailTemplate_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateTemplate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateTemplate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewEmailTemplateClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		armapimanagement.TemplateNameNewIssueNotificationMessage,
		armapimanagement.EmailTemplateUpdateParameters{
			Properties: &armapimanagement.EmailTemplateUpdateParameterProperties{
				Subject: to.Ptr("Your request for $IssueName was successfully received."),
			},
		},
		&armapimanagement.EmailTemplateClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateTemplate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.EmailTemplateContract{
			Name: to.Ptr("NewIssueNotificationMessage"),
			Type: to.Ptr("Microsoft.ApiManagement/service/templates"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/templates/NewIssueNotificationMessage"),
			Properties: &armapimanagement.EmailTemplateContractProperties{
				Description: to.Ptr("This email is sent to developers after they create a new topic on the Issues page of the developer portal."),
				Body:        to.Ptr("<!DOCTYPE html >\r\n<html>\r\n  <head />\r\n  <body>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Dear $DevFirstName $DevLastName,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Thank you for contacting us. Our API team will review your issue and get back to you soon.</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n          Click this <a href=\"http://$DevPortalUrl/issues/$IssueId\">link</a> to view or edit your request.\r\n        </p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Best,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">The $OrganizationName API Team</p>\r\n  </body>\r\n</html>"),
				IsDefault:   to.Ptr(false),
				Parameters: []*armapimanagement.EmailTemplateParametersContractProperties{
					{
						Name:  to.Ptr("DevFirstName"),
						Title: to.Ptr("Developer first name"),
					},
					{
						Name:  to.Ptr("DevLastName"),
						Title: to.Ptr("Developer last name"),
					},
					{
						Name:  to.Ptr("IssueId"),
						Title: to.Ptr("Issue id"),
					},
					{
						Name:  to.Ptr("IssueName"),
						Title: to.Ptr("Issue name"),
					},
					{
						Name:  to.Ptr("OrganizationName"),
						Title: to.Ptr("Organization name"),
					},
					{
						Name:  to.Ptr("DevPortalUrl"),
						Title: to.Ptr("Developer portal URL"),
					}},
				Subject: to.Ptr("Your request for $IssueName was successfully received."),
				Title:   to.Ptr("New issue received"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EmailTemplateContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EmailTemplateContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateTemplate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEmailTemplate_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateTemplate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateTemplate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewEmailTemplateClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		armapimanagement.TemplateNameNewIssueNotificationMessage,
		"*",
		armapimanagement.EmailTemplateUpdateParameters{
			Properties: &armapimanagement.EmailTemplateUpdateParameterProperties{
				Body:    to.Ptr("<!DOCTYPE html >\r\n<html>\r\n  <head />\r\n  <body>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Dear $DevFirstName $DevLastName,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n          We are happy to let you know that your request to publish the $AppName application in the gallery has been approved. Your application has been published and can be viewed <a href=\"http://$DevPortalUrl/Applications/Details/$AppId\">here</a>.\r\n        </p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Best,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">The $OrganizationName API Team</p>\r\n  </body>\r\n</html>"),
				Subject: to.Ptr("Your request $IssueName was received"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateTemplate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.EmailTemplateContract{
			Name: to.Ptr("NewIssueNotificationMessage"),
			Type: to.Ptr("Microsoft.ApiManagement/service/templates"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/templates/NewIssueNotificationMessage"),
			Properties: &armapimanagement.EmailTemplateContractProperties{
				Description: to.Ptr("This email is sent to developers after they create a new topic on the Issues page of the developer portal."),
				Body:        to.Ptr("<!DOCTYPE html >\r\n<html>\r\n  <head />\r\n  <body>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Dear $DevFirstName $DevLastName,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Thank you for contacting us. Our API team will review your issue and get back to you soon.</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n          Click this <a href=\"http://$DevPortalUrl/issues/$IssueId\">link</a> to view or edit your request.\r\n        </p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Best,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">The $OrganizationName API Team</p>\r\n  </body>\r\n</html>"),
				IsDefault:   to.Ptr(true),
				Parameters: []*armapimanagement.EmailTemplateParametersContractProperties{
					{
						Name:  to.Ptr("DevFirstName"),
						Title: to.Ptr("Developer first name"),
					},
					{
						Name:  to.Ptr("DevLastName"),
						Title: to.Ptr("Developer last name"),
					},
					{
						Name:  to.Ptr("IssueId"),
						Title: to.Ptr("Issue id"),
					},
					{
						Name:  to.Ptr("IssueName"),
						Title: to.Ptr("Issue name"),
					},
					{
						Name:  to.Ptr("OrganizationName"),
						Title: to.Ptr("Organization name"),
					},
					{
						Name:  to.Ptr("DevPortalUrl"),
						Title: to.Ptr("Developer portal URL"),
					}},
				Subject: to.Ptr("Your request $IssueName was received"),
				Title:   to.Ptr("New issue received"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EmailTemplateContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EmailTemplateContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateTemplate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEmailTemplate_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteTemplate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteTemplate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewEmailTemplateClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		armapimanagement.TemplateNameNewIssueNotificationMessage,
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteTemplate.json: %v", err)
	}
}

func TestGateway_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListGateways.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListGateways"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.GatewayClientListByServiceOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListGateways.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.GatewayCollection{
			Count: to.Ptr[int64](2),
			Value: []*armapimanagement.GatewayContract{
				{
					Name: to.Ptr("a1"),
					Type: to.Ptr("Microsoft.ApiManagement/service/gateways"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/gateways/gw1"),
					Properties: &armapimanagement.GatewayContractProperties{
						Description: to.Ptr("my gateway 1"),
						LocationData: &armapimanagement.ResourceLocationDataContract{
							Name: to.Ptr("my location 1"),
						},
					},
				},
				{
					Name: to.Ptr("5a73933b8f27f7cc82a2d533"),
					Type: to.Ptr("Microsoft.ApiManagement/service/gateways"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/gateways/gw2"),
					Properties: &armapimanagement.GatewayContractProperties{
						Description: to.Ptr("my gateway 2"),
						LocationData: &armapimanagement.ResourceLocationDataContract{
							Name: to.Ptr("my location 2"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GatewayCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GatewayCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListGateways.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGateway_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadGateway.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadGateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"mygateway",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadGateway.json: %v", err)
	}
}

func TestGateway_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetGateway.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetGateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"gw1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetGateway.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.GatewayContract{
			Name: to.Ptr("a1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/gateways"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/gateways/gw1"),
			Properties: &armapimanagement.GatewayContractProperties{
				Description: to.Ptr("my gateway 1"),
				LocationData: &armapimanagement.ResourceLocationDataContract{
					Name: to.Ptr("my location"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GatewayContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GatewayContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetGateway.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGateway_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGateway.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateGateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"gw1",
		armapimanagement.GatewayContract{
			Properties: &armapimanagement.GatewayContractProperties{
				Description: to.Ptr("my gateway 1"),
				LocationData: &armapimanagement.ResourceLocationDataContract{
					Name: to.Ptr("my location"),
				},
			},
		},
		&armapimanagement.GatewayClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGateway.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.GatewayContract{
			Name: to.Ptr("a1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/gateways"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/gateways/gw1"),
			Properties: &armapimanagement.GatewayContractProperties{
				Description: to.Ptr("my gateway 1"),
				LocationData: &armapimanagement.ResourceLocationDataContract{
					Name: to.Ptr("my location"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GatewayContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GatewayContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGateway.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGateway_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateGateway.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateGateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"*",
		armapimanagement.GatewayContract{
			Properties: &armapimanagement.GatewayContractProperties{
				Description: to.Ptr("my gateway 1"),
				LocationData: &armapimanagement.ResourceLocationDataContract{
					Name: to.Ptr("my location"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateGateway.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.GatewayContract{
			Name: to.Ptr("a1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/gateways"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/gateways/gw1"),
			Properties: &armapimanagement.GatewayContractProperties{
				Description: to.Ptr("my gateway 1"),
				LocationData: &armapimanagement.ResourceLocationDataContract{
					Name: to.Ptr("my location"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GatewayContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GatewayContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateGateway.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGateway_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteGateway.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteGateway"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteGateway.json: %v", err)
	}
}

func TestGateway_ListKeys(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGatewayListKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGatewayListKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayClient("subid", cred, &options)
	res, err := client.ListKeys(ctx,
		"rg1",
		"apimService1",
		"gw1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGatewayListKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.GatewayKeysContract{
			Primary:   to.Ptr("primary_key_value"),
			Secondary: to.Ptr("secondary_key_value"),
		}
		if !reflect.DeepEqual(exampleRes, res.GatewayKeysContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GatewayKeysContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGatewayListKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGateway_RegenerateKey(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGatewayRegenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGatewayRegenerateKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayClient("subid", cred, &options)
	_, err := client.RegenerateKey(ctx,
		"rg1",
		"apimService1",
		"gwId",
		armapimanagement.GatewayKeyRegenerationRequestContract{
			KeyType: to.Ptr(armapimanagement.KeyTypePrimary),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGatewayRegenerateKey.json: %v", err)
	}
}

func TestGateway_GenerateToken(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGatewayGenerateToken.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGatewayGenerateToken"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayClient("subid", cred, &options)
	res, err := client.GenerateToken(ctx,
		"rg1",
		"apimService1",
		"gw1",
		armapimanagement.GatewayTokenRequestContract{
			Expiry:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-21T00:44:24.2845269Z"); return t }()),
			KeyType: to.Ptr(armapimanagement.KeyTypePrimary),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGatewayGenerateToken.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.GatewayTokenContract{
			Value: to.Ptr("gw1&201904210044&9A1GR1f5WIhFvFmzQG+xxxxxxxxxxx/kBeu87DWad3tkasUXuvPL+MgzlwUHyg=="),
		}
		if !reflect.DeepEqual(exampleRes, res.GatewayTokenContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GatewayTokenContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGatewayGenerateToken.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGatewayHostnameConfiguration_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListGatewayHostnameConfigurations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListGatewayHostnameConfigurations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayHostnameConfigurationClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		"gw1",
		&armapimanagement.GatewayHostnameConfigurationClientListByServiceOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListGatewayHostnameConfigurations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.GatewayHostnameConfigurationCollection{
			Value: []*armapimanagement.GatewayHostnameConfigurationContract{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.ApiManagement/service/gateways/hostnameConfigurations"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/gateways/gw1/hostnameConfigurations/default"),
					Properties: &armapimanagement.GatewayHostnameConfigurationContractProperties{
						CertificateID:              to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/cert1"),
						Hostname:                   to.Ptr("*"),
						NegotiateClientCertificate: to.Ptr(false),
					},
				},
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.ApiManagement/service/gateways/hostnameConfigurations"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/gateways/gw1/hostnameConfigurations/hostname1"),
					Properties: &armapimanagement.GatewayHostnameConfigurationContractProperties{
						CertificateID:              to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/cert2"),
						Hostname:                   to.Ptr("foo.bar.com"),
						NegotiateClientCertificate: to.Ptr(true),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GatewayHostnameConfigurationCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GatewayHostnameConfigurationCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListGatewayHostnameConfigurations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGatewayHostnameConfiguration_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadGatewayHostnameConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadGatewayHostnameConfiguration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayHostnameConfigurationClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadGatewayHostnameConfiguration.json: %v", err)
	}
}

func TestGatewayHostnameConfiguration_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetGatewayHostnameConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetGatewayHostnameConfiguration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayHostnameConfigurationClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetGatewayHostnameConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.GatewayHostnameConfigurationContract{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.ApiManagement/service/gateways/hostnameConfigurations"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/gateways/gw1/hostnameConfigurations/default"),
			Properties: &armapimanagement.GatewayHostnameConfigurationContractProperties{
				CertificateID:              to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/cert1"),
				Hostname:                   to.Ptr("*"),
				NegotiateClientCertificate: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GatewayHostnameConfigurationContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GatewayHostnameConfigurationContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetGatewayHostnameConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGatewayHostnameConfiguration_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGatewayHostnameConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateGatewayHostnameConfiguration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayHostnameConfigurationClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"default",
		armapimanagement.GatewayHostnameConfigurationContract{
			Properties: &armapimanagement.GatewayHostnameConfigurationContractProperties{
				CertificateID:              to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/cert1"),
				Hostname:                   to.Ptr("*"),
				HTTP2Enabled:               to.Ptr(true),
				NegotiateClientCertificate: to.Ptr(false),
				Tls10Enabled:               to.Ptr(false),
				Tls11Enabled:               to.Ptr(false),
			},
		},
		&armapimanagement.GatewayHostnameConfigurationClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGatewayHostnameConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.GatewayHostnameConfigurationContract{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.ApiManagement/service/gateways/hostnameConfigurations"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/gateways/gw1/hostnameConfigurations/default"),
			Properties: &armapimanagement.GatewayHostnameConfigurationContractProperties{
				CertificateID:              to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/cert1"),
				Hostname:                   to.Ptr("*"),
				HTTP2Enabled:               to.Ptr(true),
				NegotiateClientCertificate: to.Ptr(false),
				Tls10Enabled:               to.Ptr(false),
				Tls11Enabled:               to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GatewayHostnameConfigurationContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GatewayHostnameConfigurationContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGatewayHostnameConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGatewayHostnameConfiguration_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteGatewayHostnameConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteGatewayHostnameConfiguration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayHostnameConfigurationClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"default",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteGatewayHostnameConfiguration.json: %v", err)
	}
}

func TestGatewayAPI_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListGatewayApis.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListGatewayApis"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayAPIClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		"gw1",
		&armapimanagement.GatewayAPIClientListByServiceOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListGatewayApis.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.APICollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.APIContract{
				{
					Name: to.Ptr("57681820a40f7eb6c49f6aca"),
					Type: to.Ptr("Microsoft.ApiManagement/service/gateways/apis"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/gateways/gw1/apis/57681820a40f7eb6c49f6aca"),
					Properties: &armapimanagement.APIContractProperties{
						Description: to.Ptr("description_57681820a40f7eb6c49f6acc"),
						APIRevision: to.Ptr("1"),
						IsCurrent:   to.Ptr(true),
						Path:        to.Ptr("suffix_57681820a40f7eb6c49f6ace"),
						DisplayName: to.Ptr("api_57681820a40f7eb6c49f6acb"),
						Protocols: []*armapimanagement.Protocol{
							to.Ptr(armapimanagement.ProtocolHTTPS)},
						ServiceURL: to.Ptr("http://contoso/57681820a40f7eb6c49f6acd"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.APICollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.APICollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListGatewayApis.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGatewayAPI_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadGatewayApi.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadGatewayApi"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayAPIClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"api1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadGatewayApi.json: %v", err)
	}
}

func TestGatewayAPI_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGatewayApi.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateGatewayApi"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayAPIClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"echo-api",
		&armapimanagement.GatewayAPIClientCreateOrUpdateOptions{Parameters: &armapimanagement.AssociationContract{
			Properties: &armapimanagement.AssociationContractProperties{
				ProvisioningState: to.Ptr("created"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGatewayApi.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIContract{
			Name: to.Ptr("echo-api"),
			Type: to.Ptr("Microsoft.ApiManagement/service/gateways/apis"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/gateways/gw1/apis/echo-api"),
			Properties: &armapimanagement.APIContractProperties{
				APIRevision: to.Ptr("1"),
				IsCurrent:   to.Ptr(true),
				SubscriptionKeyParameterNames: &armapimanagement.SubscriptionKeyParameterNamesContract{
					Header: to.Ptr("Ocp-Apim-Subscription-Key"),
					Query:  to.Ptr("subscription-key"),
				},
				Path:        to.Ptr(""),
				DisplayName: to.Ptr("EchoApi"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolHTTP),
					to.Ptr(armapimanagement.ProtocolHTTPS)},
				ServiceURL: to.Ptr("https://contoso.com/apis/echo"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGatewayApi.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGatewayAPI_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteGatewayApi.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteGatewayApi"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayAPIClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"echo-api",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteGatewayApi.json: %v", err)
	}
}

func TestGatewayCertificateAuthority_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListGatewayCertificateAuthorities.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListGatewaycertificateAuthorities"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayCertificateAuthorityClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		"gw1",
		&armapimanagement.GatewayCertificateAuthorityClientListByServiceOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListGatewayCertificateAuthorities.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.GatewayCertificateAuthorityCollection{
			Value: []*armapimanagement.GatewayCertificateAuthorityContract{
				{
					Name: to.Ptr("cert1"),
					Type: to.Ptr("Microsoft.ApiManagement/service/gateways/certificateAuthorities"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/gateways/gw1/certificateAuthorities/cert1"),
					Properties: &armapimanagement.GatewayCertificateAuthorityContractProperties{
						IsTrusted: to.Ptr(false),
					},
				},
				{
					Name: to.Ptr("cert2"),
					Type: to.Ptr("Microsoft.ApiManagement/service/gateways/certificateAuthorities"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/gateways/gw1/certificateAuthorities/cert2"),
					Properties: &armapimanagement.GatewayCertificateAuthorityContractProperties{
						IsTrusted: to.Ptr(true),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GatewayCertificateAuthorityCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GatewayCertificateAuthorityCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListGatewayCertificateAuthorities.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGatewayCertificateAuthority_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadGatewayCertificateAuthority.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadGatewayCertificateAuthority"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayCertificateAuthorityClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"cert1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadGatewayCertificateAuthority.json: %v", err)
	}
}

func TestGatewayCertificateAuthority_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetGatewayCertificateAuthority.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetGatewayCertificateAuthority"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayCertificateAuthorityClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"cert1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetGatewayCertificateAuthority.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.GatewayCertificateAuthorityContract{
			Name: to.Ptr("cert1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/gateways/certificateAuthorities"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/gateways/gw1/certificateAuthorities/cert1"),
			Properties: &armapimanagement.GatewayCertificateAuthorityContractProperties{
				IsTrusted: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GatewayCertificateAuthorityContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GatewayCertificateAuthorityContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetGatewayCertificateAuthority.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGatewayCertificateAuthority_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGatewayCertificateAuthority.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateGatewayCertificateAuthority"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayCertificateAuthorityClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"cert1",
		armapimanagement.GatewayCertificateAuthorityContract{
			Properties: &armapimanagement.GatewayCertificateAuthorityContractProperties{
				IsTrusted: to.Ptr(false),
			},
		},
		&armapimanagement.GatewayCertificateAuthorityClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGatewayCertificateAuthority.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.GatewayCertificateAuthorityContract{
			Name: to.Ptr("cert1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/gateways/certificateAuthorities"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/gateways/gw1/certificateAuthorities/cert1"),
			Properties: &armapimanagement.GatewayCertificateAuthorityContractProperties{
				IsTrusted: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GatewayCertificateAuthorityContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GatewayCertificateAuthorityContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGatewayCertificateAuthority.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGatewayCertificateAuthority_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteGatewayCertificateAuthority.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteGatewayCertificateAuthority"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGatewayCertificateAuthorityClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"gw1",
		"default",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteGatewayCertificateAuthority.json: %v", err)
	}
}

func TestGroup_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListGroups.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListGroups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGroupClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.GroupClientListByServiceOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListGroups.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.GroupCollection{
			Count: to.Ptr[int64](4),
			Value: []*armapimanagement.GroupContract{
				{
					Name: to.Ptr("5600b59375ff190048020001"),
					Type: to.Ptr("Microsoft.ApiManagement/service/groups"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/groups/5600b59375ff190048020001"),
					Properties: &armapimanagement.GroupContractProperties{
						Type:        to.Ptr(armapimanagement.GroupTypeSystem),
						Description: to.Ptr("Administrators is a built-in group. Its membership is managed by the system. Microsoft Azure subscription administrators fall into this group."),
						BuiltIn:     to.Ptr(true),
						DisplayName: to.Ptr("Administrators"),
					},
				},
				{
					Name: to.Ptr("59306a29e4bbd510dc24e5f9"),
					Type: to.Ptr("Microsoft.ApiManagement/service/groups"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/groups/59306a29e4bbd510dc24e5f9"),
					Properties: &armapimanagement.GroupContractProperties{
						Type:        to.Ptr(armapimanagement.GroupTypeExternal),
						Description: to.Ptr("awesome group of people"),
						BuiltIn:     to.Ptr(false),
						DisplayName: to.Ptr("AwesomeGroup (samiraad.onmicrosoft.com)"),
						ExternalID:  to.Ptr("aad://samiraad.onmicrosoft.com/groups/3773adf4-032e-4d25-9988-eaff9ca72eca"),
					},
				},
				{
					Name: to.Ptr("5600b59375ff190048020002"),
					Type: to.Ptr("Microsoft.ApiManagement/service/groups"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/groups/5600b59375ff190048020002"),
					Properties: &armapimanagement.GroupContractProperties{
						Type:        to.Ptr(armapimanagement.GroupTypeSystem),
						Description: to.Ptr("Developers is a built-in group. Its membership is managed by the system. Signed-in users fall into this group."),
						BuiltIn:     to.Ptr(true),
						DisplayName: to.Ptr("Developers"),
					},
				},
				{
					Name: to.Ptr("5600b59375ff190048020003"),
					Type: to.Ptr("Microsoft.ApiManagement/service/groups"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/groups/5600b59375ff190048020003"),
					Properties: &armapimanagement.GroupContractProperties{
						Type:        to.Ptr(armapimanagement.GroupTypeSystem),
						Description: to.Ptr("Guests is a built-in group. Its membership is managed by the system. Unauthenticated users visiting the developer portal fall into this group."),
						BuiltIn:     to.Ptr(true),
						DisplayName: to.Ptr("Guests"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GroupCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GroupCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListGroups.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGroup_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGroupClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"59306a29e4bbd510dc24e5f9",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadGroup.json: %v", err)
	}
}

func TestGroup_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGroupClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"59306a29e4bbd510dc24e5f9",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.GroupContract{
			Name: to.Ptr("59306a29e4bbd510dc24e5f9"),
			Type: to.Ptr("Microsoft.ApiManagement/service/groups"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/groups/59306a29e4bbd510dc24e5f9"),
			Properties: &armapimanagement.GroupContractProperties{
				Type:        to.Ptr(armapimanagement.GroupTypeExternal),
				Description: to.Ptr("awesome group of people"),
				BuiltIn:     to.Ptr(false),
				DisplayName: to.Ptr("AwesomeGroup (samiraad.onmicrosoft.com)"),
				ExternalID:  to.Ptr("aad://samiraad.onmicrosoft.com/groups/3773adf4-032e-4d25-9988-eaff9ca72eca"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GroupContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GroupContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGroup_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGroupClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"tempgroup",
		armapimanagement.GroupCreateParameters{
			Properties: &armapimanagement.GroupCreateParametersProperties{
				DisplayName: to.Ptr("temp group"),
			},
		},
		&armapimanagement.GroupClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.GroupContract{
			Name: to.Ptr("tempgroup"),
			Type: to.Ptr("Microsoft.ApiManagement/service/groups"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/groups/tempgroup"),
			Properties: &armapimanagement.GroupContractProperties{
				Type:        to.Ptr(armapimanagement.GroupTypeCustom),
				DisplayName: to.Ptr("temp group"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GroupContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GroupContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGroupExternal.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateGroupExternal"},
	})
	client = armapimanagement.NewGroupClient("subid", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"aadGroup",
		armapimanagement.GroupCreateParameters{
			Properties: &armapimanagement.GroupCreateParametersProperties{
				Type:        to.Ptr(armapimanagement.GroupTypeExternal),
				Description: to.Ptr("new group to test"),
				DisplayName: to.Ptr("NewGroup (samiraad.onmicrosoft.com)"),
				ExternalID:  to.Ptr("aad://samiraad.onmicrosoft.com/groups/83cf2753-5831-4675-bc0e-2f8dc067c58d"),
			},
		},
		&armapimanagement.GroupClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGroupExternal.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.GroupContract{
			Name: to.Ptr("aadGroup"),
			Type: to.Ptr("Microsoft.ApiManagement/service/groups"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/groups/aadGroup"),
			Properties: &armapimanagement.GroupContractProperties{
				Type:        to.Ptr(armapimanagement.GroupTypeExternal),
				Description: to.Ptr("new group to test"),
				DisplayName: to.Ptr("NewGroup (samiraad.onmicrosoft.com)"),
				ExternalID:  to.Ptr("aad://samiraad.onmicrosoft.com/groups/83cf2753-5831-4675-bc0e-2f8dc067c58d"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GroupContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GroupContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGroupExternal.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGroup_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGroupClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"tempgroup",
		"*",
		armapimanagement.GroupUpdateParameters{
			Properties: &armapimanagement.GroupUpdateParametersProperties{
				DisplayName: to.Ptr("temp group"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.GroupContract{
			Name: to.Ptr("tempgroup"),
			Type: to.Ptr("Microsoft.ApiManagement/service/groups"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/groups/tempgroup"),
			Properties: &armapimanagement.GroupContractProperties{
				Type:        to.Ptr(armapimanagement.GroupTypeExternal),
				Description: to.Ptr("awesome group of people"),
				BuiltIn:     to.Ptr(false),
				DisplayName: to.Ptr("tempgroup"),
				ExternalID:  to.Ptr("aad://samiraad.onmicrosoft.com/groups/3773adf4-032e-4d25-9988-eaff9ca72eca"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GroupContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GroupContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGroup_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGroupClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"aadGroup",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteGroup.json: %v", err)
	}
}

func TestGroupUser_List(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListGroupUsers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListGroupUsers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGroupUserClient("subid", cred, &options)
	pager := client.List("rg1",
		"apimService1",
		"57d2ef278aa04f0888cba3f3",
		&armapimanagement.GroupUserClientListOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListGroupUsers.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.UserCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.UserContract{
				{
					Name: to.Ptr("armTemplateUser1"),
					Type: to.Ptr("Microsoft.ApiManagement/service/groups/users"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/kjoshiarmTemplateUser1"),
					Properties: &armapimanagement.UserContractProperties{
						Identities: []*armapimanagement.UserIdentityContract{
							{
								ID:       to.Ptr("user1@live.com"),
								Provider: to.Ptr("Basic"),
							}},
						Note:             to.Ptr("note for user 1"),
						State:            to.Ptr(armapimanagement.UserStateActive),
						Email:            to.Ptr("user1@live.com"),
						FirstName:        to.Ptr("user1"),
						LastName:         to.Ptr("lastname1"),
						RegistrationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-31T18:54:41.447Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UserCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UserCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListGroupUsers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGroupUser_CheckEntityExists(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadGroupUser.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadGroupUser"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGroupUserClient("subid", cred, &options)
	_, err := client.CheckEntityExists(ctx,
		"rg1",
		"apimService1",
		"59306a29e4bbd510dc24e5f9",
		"5931a75ae4bbd512a88c680b",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadGroupUser.json: %v", err)
	}
}

func TestGroupUser_Create(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGroupUser.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateGroupUser"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGroupUserClient("subid", cred, &options)
	res, err := client.Create(ctx,
		"rg1",
		"apimService1",
		"tempgroup",
		"59307d350af58404d8a26300",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGroupUser.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.UserContract{
			Name: to.Ptr("59307d350af58404d8a26300"),
			Type: to.Ptr("Microsoft.ApiManagement/service/groups/users"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/59307d350af58404d8a26300"),
			Properties: &armapimanagement.UserContractProperties{
				Identities:       []*armapimanagement.UserIdentityContract{},
				State:            to.Ptr(armapimanagement.UserStateActive),
				Email:            to.Ptr("testuser1@live.com"),
				FirstName:        to.Ptr("test"),
				Groups:           []*armapimanagement.GroupContractProperties{},
				LastName:         to.Ptr("user"),
				RegistrationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-01T20:46:45.437Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.UserContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.UserContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGroupUser.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGroupUser_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteGroupUser.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteGroupUser"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGroupUserClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"templategroup",
		"59307d350af58404d8a26300",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteGroupUser.json: %v", err)
	}
}

func TestIdentityProvider_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListIdentityProviders.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListIdentityProviders"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewIdentityProviderClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListIdentityProviders.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.IdentityProviderList{
			Count: to.Ptr[int64](3),
			Value: []*armapimanagement.IdentityProviderContract{
				{
					Name: to.Ptr("Google"),
					Type: to.Ptr("Microsoft.ApiManagement/service/identityProviders"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/identityProviders/Google"),
					Properties: &armapimanagement.IdentityProviderContractProperties{
						Type:     to.Ptr(armapimanagement.IdentityProviderTypeGoogle),
						ClientID: to.Ptr("googleId"),
					},
				},
				{
					Name: to.Ptr("Aad"),
					Type: to.Ptr("Microsoft.ApiManagement/service/identityProviders"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/identityProviders/Aad"),
					Properties: &armapimanagement.IdentityProviderContractProperties{
						Type: to.Ptr(armapimanagement.IdentityProviderTypeAAD),
						AllowedTenants: []*string{
							to.Ptr("samiraad.onmicrosoft.com")},
						ClientID: to.Ptr("aadapplicationid"),
					},
				},
				{
					Name: to.Ptr("AadB2C"),
					Type: to.Ptr("Microsoft.ApiManagement/service/identityProviders"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/identityProviders/AadB2C"),
					Properties: &armapimanagement.IdentityProviderContractProperties{
						Type: to.Ptr(armapimanagement.IdentityProviderTypeAADB2C),
						AllowedTenants: []*string{
							to.Ptr("samirtestbc.onmicrosoft.com")},
						SigninPolicyName: to.Ptr("B2C_1_Signin_Default"),
						SignupPolicyName: to.Ptr("B2C_1_Signup_Default"),
						ClientID:         to.Ptr("aadb2clientId"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IdentityProviderList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IdentityProviderList)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListIdentityProviders.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIdentityProvider_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadIdentityProvider.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadIdentityProvider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewIdentityProviderClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		armapimanagement.IdentityProviderTypeAADB2C,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadIdentityProvider.json: %v", err)
	}
}

func TestIdentityProvider_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetIdentityProvider.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetIdentityProvider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewIdentityProviderClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		armapimanagement.IdentityProviderTypeAADB2C,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetIdentityProvider.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.IdentityProviderContract{
			Name: to.Ptr("AadB2C"),
			Type: to.Ptr("Microsoft.ApiManagement/service/identityProviders"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/identityProviders/AadB2C"),
			Properties: &armapimanagement.IdentityProviderContractProperties{
				Type: to.Ptr(armapimanagement.IdentityProviderTypeAADB2C),
				AllowedTenants: []*string{
					to.Ptr("contosoaadb2c.onmicrosoft.com"),
					to.Ptr("contoso2aadb2c.onmicrosoft.com")},
				Authority:        to.Ptr("login.microsoftonline.com"),
				SigninPolicyName: to.Ptr("B2C_1_policy-signin"),
				SigninTenant:     to.Ptr("contosoaadb2c.onmicrosoft.com"),
				SignupPolicyName: to.Ptr("B2C_1_policy-signup"),
				ClientID:         to.Ptr("f02dafe2-b8b8-48ec-a38e-27e5c16c51e5"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IdentityProviderContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IdentityProviderContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetIdentityProvider.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIdentityProvider_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateIdentityProvider.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateIdentityProvider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewIdentityProviderClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		armapimanagement.IdentityProviderTypeFacebook,
		armapimanagement.IdentityProviderCreateContract{
			Properties: &armapimanagement.IdentityProviderCreateContractProperties{
				ClientID:     to.Ptr("facebookid"),
				ClientSecret: to.Ptr("facebookapplicationsecret"),
			},
		},
		&armapimanagement.IdentityProviderClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateIdentityProvider.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.IdentityProviderContract{
			Name: to.Ptr("Facebook"),
			Type: to.Ptr("Microsoft.ApiManagement/service/identityProviders"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/identityProviders/Facebook"),
			Properties: &armapimanagement.IdentityProviderContractProperties{
				Type:     to.Ptr(armapimanagement.IdentityProviderTypeFacebook),
				ClientID: to.Ptr("facebookid"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IdentityProviderContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IdentityProviderContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateIdentityProvider.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIdentityProvider_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateIdentityProvider.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateIdentityProvider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewIdentityProviderClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		armapimanagement.IdentityProviderTypeFacebook,
		"*",
		armapimanagement.IdentityProviderUpdateParameters{
			Properties: &armapimanagement.IdentityProviderUpdateProperties{
				ClientID:     to.Ptr("updatedfacebookid"),
				ClientSecret: to.Ptr("updatedfacebooksecret"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateIdentityProvider.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.IdentityProviderContract{
			Name: to.Ptr("AadB2C"),
			Type: to.Ptr("Microsoft.ApiManagement/service/identityProviders"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/identityProviders/AadB2C"),
			Properties: &armapimanagement.IdentityProviderContractProperties{
				Type: to.Ptr(armapimanagement.IdentityProviderTypeAADB2C),
				AllowedTenants: []*string{
					to.Ptr("contosoaadb2c.onmicrosoft.com"),
					to.Ptr("contoso2aadb2c.onmicrosoft.com")},
				Authority:        to.Ptr("login.microsoftonline.com"),
				SigninPolicyName: to.Ptr("B2C_1_policy-signin"),
				SigninTenant:     to.Ptr("contosoaadb2c.onmicrosoft.com"),
				SignupPolicyName: to.Ptr("B2C_1_policy-signup"),
				ClientID:         to.Ptr("f02dafe2-b8b8-48ec-a38e-27e5c16c51e5"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IdentityProviderContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IdentityProviderContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateIdentityProvider.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIdentityProvider_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteIdentityProvider.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteIdentityProvider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewIdentityProviderClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		armapimanagement.IdentityProviderTypeAAD,
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteIdentityProvider.json: %v", err)
	}
}

func TestIdentityProvider_ListSecrets(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementIdentityProviderListSecrets.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementIdentityProviderListSecrets"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewIdentityProviderClient("subid", cred, &options)
	res, err := client.ListSecrets(ctx,
		"rg1",
		"apimService1",
		armapimanagement.IdentityProviderTypeAADB2C,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementIdentityProviderListSecrets.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ClientSecretContract{
			ClientSecret: to.Ptr("XXXXXXX"),
		}
		if !reflect.DeepEqual(exampleRes, res.ClientSecretContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ClientSecretContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementIdentityProviderListSecrets.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIssue_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListIssues.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListIssues"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewIssueClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.IssueClientListByServiceOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListIssues.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.IssueCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.IssueContract{
				{
					Name: to.Ptr("57d2ef278aa04f0ad01d6cdc"),
					Type: to.Ptr("Microsoft.ApiManagement/service/issues"),
					ID:   to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/issues/57d2ef278aa04f0ad01d6cdc"),
					Properties: &armapimanagement.IssueContractProperties{
						APIID:       to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/57d1f7558aa04f15146d9d8a"),
						CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T22:21:20.467Z"); return t }()),
						State:       to.Ptr(armapimanagement.StateOpen),
						Description: to.Ptr("New API issue description"),
						Title:       to.Ptr("New API issue"),
						UserID:      to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IssueCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IssueCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListIssues.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIssue_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetIssue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetIssue"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewIssueClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"57d2ef278aa04f0ad01d6cdc",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetIssue.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.IssueContract{
			Name: to.Ptr("57d2ef278aa04f0ad01d6cdc"),
			Type: to.Ptr("Microsoft.ApiManagement/service/issues"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/issues/57d2ef278aa04f0ad01d6cdc"),
			Properties: &armapimanagement.IssueContractProperties{
				APIID:       to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/57d1f7558aa04f15146d9d8a"),
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T22:21:20.467Z"); return t }()),
				State:       to.Ptr(armapimanagement.StateOpen),
				Description: to.Ptr("New API issue description"),
				Title:       to.Ptr("New API issue"),
				UserID:      to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IssueContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IssueContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetIssue.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLogger_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListLoggers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListLoggers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewLoggerClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.LoggerClientListByServiceOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListLoggers.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.LoggerCollection{
			Count: to.Ptr[int64](3),
			Value: []*armapimanagement.LoggerContract{
				{
					Name: to.Ptr("azuremonitor"),
					Type: to.Ptr("Microsoft.ApiManagement/service/loggers"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/loggers/azuremonitor"),
					Properties: &armapimanagement.LoggerContractProperties{
						IsBuffered: to.Ptr(true),
						LoggerType: to.Ptr(armapimanagement.LoggerTypeAzureMonitor),
					},
				},
				{
					Name: to.Ptr("vvktest"),
					Type: to.Ptr("Microsoft.ApiManagement/service/loggers"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/loggers/vvktest"),
					Properties: &armapimanagement.LoggerContractProperties{
						Credentials: map[string]*string{
							"instrumentationKey": to.Ptr("{{Logger-Credentials-5b1a17ef2b3f91153004b10d}}"),
						},
						IsBuffered: to.Ptr(true),
						LoggerType: to.Ptr(armapimanagement.LoggerTypeApplicationInsights),
					},
				},
				{
					Name: to.Ptr("applicationinsights"),
					Type: to.Ptr("Microsoft.ApiManagement/service/loggers"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/loggers/applicationinsights"),
					Properties: &armapimanagement.LoggerContractProperties{
						Description: to.Ptr("miaoappinsight"),
						Credentials: map[string]*string{
							"instrumentationKey": to.Ptr("{{Logger-Credentials-5b2056062b3f911ae84a3069}}"),
						},
						IsBuffered: to.Ptr(true),
						LoggerType: to.Ptr(armapimanagement.LoggerTypeApplicationInsights),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LoggerCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LoggerCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListLoggers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLogger_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadLogger.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadLogger"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewLoggerClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"templateLogger",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadLogger.json: %v", err)
	}
}

func TestLogger_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetLogger.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetLogger"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewLoggerClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"templateLogger",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetLogger.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.LoggerContract{
			Name: to.Ptr("kloudapilogger1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/loggers"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/loggers/kloudapilogger1"),
			Properties: &armapimanagement.LoggerContractProperties{
				Description: to.Ptr("testeventhub3again"),
				Credentials: map[string]*string{
					"name":             to.Ptr("testeventhub4"),
					"connectionString": to.Ptr("Endpoint=sb://eventhubapim.servicebus.windows.net/;SharedAccessKeyName=Sender;SharedAccessKey=************"),
				},
				IsBuffered: to.Ptr(true),
				LoggerType: to.Ptr(armapimanagement.LoggerTypeAzureEventHub),
				ResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.EventHub/namespaces/eventhubapim"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LoggerContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LoggerContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetLogger.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLogger_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateAILogger.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateAILogger"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewLoggerClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"loggerId",
		armapimanagement.LoggerContract{
			Properties: &armapimanagement.LoggerContractProperties{
				Description: to.Ptr("adding a new logger"),
				Credentials: map[string]*string{
					"instrumentationKey": to.Ptr("11................a1"),
				},
				LoggerType: to.Ptr(armapimanagement.LoggerTypeApplicationInsights),
			},
		},
		&armapimanagement.LoggerClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateAILogger.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.LoggerContract{
			Name: to.Ptr("loggerId"),
			Type: to.Ptr("Microsoft.ApiManagement/service/loggers"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/loggers/loggerId"),
			Properties: &armapimanagement.LoggerContractProperties{
				Credentials: map[string]*string{
					"instrumentationKey": to.Ptr("{{5a.......2a}}"),
				},
				IsBuffered: to.Ptr(false),
				LoggerType: to.Ptr(armapimanagement.LoggerTypeApplicationInsights),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LoggerContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LoggerContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateAILogger.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateEHLogger.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateEHLogger"},
	})
	client = armapimanagement.NewLoggerClient("subid", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"eh1",
		armapimanagement.LoggerContract{
			Properties: &armapimanagement.LoggerContractProperties{
				Description: to.Ptr("adding a new logger"),
				Credentials: map[string]*string{
					"name":             to.Ptr("hydraeventhub"),
					"connectionString": to.Ptr("Endpoint=sb://hydraeventhub-ns.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=********="),
				},
				LoggerType: to.Ptr(armapimanagement.LoggerTypeAzureEventHub),
			},
		},
		&armapimanagement.LoggerClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateEHLogger.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.LoggerContract{
			Name: to.Ptr("eh1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/loggers"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/loggers/eh1"),
			Properties: &armapimanagement.LoggerContractProperties{
				Description: to.Ptr("adding a new logger"),
				Credentials: map[string]*string{
					"connectionString": to.Ptr("{{Logger-Credentials-5f28745bbebeeb13cc3f7301}}"),
				},
				IsBuffered: to.Ptr(true),
				LoggerType: to.Ptr(armapimanagement.LoggerTypeAzureEventHub),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LoggerContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LoggerContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateEHLogger.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLogger_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateLogger.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateLogger"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewLoggerClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"eh1",
		"*",
		armapimanagement.LoggerUpdateContract{
			Properties: &armapimanagement.LoggerUpdateParameters{
				Description: to.Ptr("updating description"),
				LoggerType:  to.Ptr(armapimanagement.LoggerTypeAzureEventHub),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateLogger.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.LoggerContract{
			Name: to.Ptr("eh1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/loggers"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/loggers/eh1"),
			Properties: &armapimanagement.LoggerContractProperties{
				Description: to.Ptr("updating description"),
				Credentials: map[string]*string{
					"connectionString": to.Ptr("{{Logger-Credentials-5f28745bbebeeb13cc3f7301}}"),
				},
				IsBuffered: to.Ptr(true),
				LoggerType: to.Ptr(armapimanagement.LoggerTypeAzureEventHub),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LoggerContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LoggerContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateLogger.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLogger_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteLogger.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteLogger"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewLoggerClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"loggerId",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteLogger.json: %v", err)
	}
}

func TestNamedValue_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListNamedValues.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListNamedValues"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewNamedValueClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.NamedValueClientListByServiceOptions{Filter: nil,
			Top:                     nil,
			Skip:                    nil,
			IsKeyVaultRefreshFailed: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListNamedValues.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.NamedValueCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.NamedValueContract{
				{
					Name: to.Ptr("592f1174cc83890dc4f32686"),
					Type: to.Ptr("Microsoft.ApiManagement/service/namedValues"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/namedValues/592f1174cc83890dc4f32686"),
					Properties: &armapimanagement.NamedValueContractProperties{
						Secret:      to.Ptr(false),
						DisplayName: to.Ptr("Logger-Credentials-592f1174cc83890dc4f32687"),
						Value:       to.Ptr("propValue"),
					},
				},
				{
					Name: to.Ptr("testprop6"),
					Type: to.Ptr("Microsoft.ApiManagement/service/namedValues"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/namedValues/testprop6"),
					Properties: &armapimanagement.NamedValueContractProperties{
						Secret: to.Ptr(true),
						Tags: []*string{
							to.Ptr("foo"),
							to.Ptr("bar")},
						DisplayName: to.Ptr("prop6namekv"),
						KeyVault: &armapimanagement.KeyVaultContractProperties{
							IdentityClientID: to.Ptr("2d2df842-44d8-4885-8dec-77cc1a984a31"),
							SecretIdentifier: to.Ptr("https://contoso.vault.azure.net/secrets/aadSecret"),
							LastStatus: &armapimanagement.KeyVaultLastAccessStatusContractProperties{
								Code:         to.Ptr("Success"),
								TimeStampUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-11T00:54:31.8024882Z"); return t }()),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NamedValueCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NamedValueCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListNamedValues.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamedValue_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadNamedValue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadNamedValue"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewNamedValueClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"testarmTemplateproperties2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadNamedValue.json: %v", err)
	}
}

func TestNamedValue_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetNamedValue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetNamedValue"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewNamedValueClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"testarmTemplateproperties2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetNamedValue.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.NamedValueContract{
			Name: to.Ptr("testarmTemplateproperties2"),
			Type: to.Ptr("Microsoft.ApiManagement/service/namedValues"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/namedValues/testarmTemplateproperties2"),
			Properties: &armapimanagement.NamedValueContractProperties{
				Secret: to.Ptr(false),
				Tags: []*string{
					to.Ptr("foo"),
					to.Ptr("bar")},
				DisplayName: to.Ptr("propName"),
				Value:       to.Ptr("propValue"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NamedValueContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NamedValueContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetNamedValue.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetNamedValueWithKeyVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetNamedValueWithKeyVault"},
	})
	client = armapimanagement.NewNamedValueClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"apimService1",
		"testprop6",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetNamedValueWithKeyVault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.NamedValueContract{
			Name: to.Ptr("testprop6"),
			Type: to.Ptr("Microsoft.ApiManagement/service/namedValues"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/namedValues/testprop6"),
			Properties: &armapimanagement.NamedValueContractProperties{
				Secret: to.Ptr(true),
				Tags: []*string{
					to.Ptr("foo"),
					to.Ptr("bar")},
				DisplayName: to.Ptr("prop6namekv"),
				KeyVault: &armapimanagement.KeyVaultContractProperties{
					IdentityClientID: to.Ptr("2d2df842-44d8-4885-8dec-77cc1a984a31"),
					SecretIdentifier: to.Ptr("https://rpbvtkeyvaultintegration.vault-int.azure-int.net/secrets/msitestingCert"),
					LastStatus: &armapimanagement.KeyVaultLastAccessStatusContractProperties{
						Code:         to.Ptr("Success"),
						TimeStampUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-11T00:54:31.8024882Z"); return t }()),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NamedValueContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NamedValueContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetNamedValueWithKeyVault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamedValue_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateNamedValue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateNamedValue"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewNamedValueClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"testprop2",
		armapimanagement.NamedValueCreateContract{
			Properties: &armapimanagement.NamedValueCreateContractProperties{
				Secret: to.Ptr(false),
				Tags: []*string{
					to.Ptr("foo"),
					to.Ptr("bar")},
				DisplayName: to.Ptr("prop3name"),
				Value:       to.Ptr("propValue"),
			},
		},
		&armapimanagement.NamedValueClientBeginCreateOrUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateNamedValue.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateNamedValue.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.NamedValueContract{
			Name: to.Ptr("testprop2"),
			Type: to.Ptr("Microsoft.ApiManagement/service/namedValues"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/namedValues/testprop2"),
			Properties: &armapimanagement.NamedValueContractProperties{
				Secret: to.Ptr(false),
				Tags: []*string{
					to.Ptr("foo"),
					to.Ptr("bar")},
				DisplayName: to.Ptr("prop3name"),
				Value:       to.Ptr("propValue"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NamedValueContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NamedValueContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateNamedValue.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateNamedValueWithKeyVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateNamedValueWithKeyVault"},
	})
	client = armapimanagement.NewNamedValueClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"testprop6",
		armapimanagement.NamedValueCreateContract{
			Properties: &armapimanagement.NamedValueCreateContractProperties{
				Secret: to.Ptr(true),
				Tags: []*string{
					to.Ptr("foo"),
					to.Ptr("bar")},
				DisplayName: to.Ptr("prop6namekv"),
				KeyVault: &armapimanagement.KeyVaultContractCreateProperties{
					IdentityClientID: to.Ptr("ceaa6b06-c00f-43ef-99ac-f53d1fe876a0"),
					SecretIdentifier: to.Ptr("https://contoso.vault.azure.net/secrets/aadSecret"),
				},
			},
		},
		&armapimanagement.NamedValueClientBeginCreateOrUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateNamedValueWithKeyVault.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateNamedValueWithKeyVault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.NamedValueContract{
			Name: to.Ptr("testprop6"),
			Type: to.Ptr("Microsoft.ApiManagement/service/namedValues"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/namedValues/testprop6"),
			Properties: &armapimanagement.NamedValueContractProperties{
				Secret: to.Ptr(true),
				Tags: []*string{
					to.Ptr("foo"),
					to.Ptr("bar")},
				DisplayName: to.Ptr("prop6namekv"),
				KeyVault: &armapimanagement.KeyVaultContractProperties{
					IdentityClientID: to.Ptr("ceaa6b06-c00f-43ef-99ac-f53d1fe876a0"),
					SecretIdentifier: to.Ptr("https://contoso.vault.azure.net/secrets/aadSecret"),
					LastStatus: &armapimanagement.KeyVaultLastAccessStatusContractProperties{
						Code:         to.Ptr("Success"),
						TimeStampUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-11T00:54:31.8024882Z"); return t }()),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NamedValueContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NamedValueContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateNamedValueWithKeyVault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamedValue_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateNamedValue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateNamedValue"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewNamedValueClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"apimService1",
		"testprop2",
		"*",
		armapimanagement.NamedValueUpdateParameters{
			Properties: &armapimanagement.NamedValueUpdateParameterProperties{
				Secret: to.Ptr(false),
				Tags: []*string{
					to.Ptr("foo"),
					to.Ptr("bar2")},
				DisplayName: to.Ptr("prop3name"),
				Value:       to.Ptr("propValue"),
			},
		},
		&armapimanagement.NamedValueClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateNamedValue.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateNamedValue.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.NamedValueContract{
			Type: to.Ptr("Microsoft.ApiManagement/service/namedValues"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/namedValues/testprop2"),
			Properties: &armapimanagement.NamedValueContractProperties{
				Secret: to.Ptr(false),
				Tags: []*string{
					to.Ptr("foo"),
					to.Ptr("bar2")},
				DisplayName: to.Ptr("prop3name"),
				Value:       to.Ptr("propValue"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NamedValueContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NamedValueContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateNamedValue.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamedValue_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteNamedValue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteNamedValue"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewNamedValueClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"testprop2",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteNamedValue.json: %v", err)
	}
}

func TestNamedValue_ListValue(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementNamedValueListValue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementNamedValueListValue"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewNamedValueClient("subid", cred, &options)
	res, err := client.ListValue(ctx,
		"rg1",
		"apimService1",
		"testarmTemplateproperties2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementNamedValueListValue.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.NamedValueSecretContract{
			Value: to.Ptr("propValue"),
		}
		if !reflect.DeepEqual(exampleRes, res.NamedValueSecretContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NamedValueSecretContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementNamedValueListValue.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamedValue_RefreshSecret(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementRefreshNamedValue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementRefreshNamedValue"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewNamedValueClient("subid", cred, &options)
	poller, err := client.BeginRefreshSecret(ctx,
		"rg1",
		"apimService1",
		"testprop2",
		&armapimanagement.NamedValueClientBeginRefreshSecretOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementRefreshNamedValue.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementRefreshNamedValue.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.NamedValueContract{
			Name: to.Ptr("testprop6"),
			Type: to.Ptr("Microsoft.ApiManagement/service/namedValues"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/namedValues/testprop6"),
			Properties: &armapimanagement.NamedValueContractProperties{
				Secret: to.Ptr(true),
				Tags: []*string{
					to.Ptr("foo"),
					to.Ptr("bar")},
				DisplayName: to.Ptr("prop6namekv"),
				KeyVault: &armapimanagement.KeyVaultContractProperties{
					IdentityClientID: to.Ptr("2d2df842-44d8-4885-8dec-77cc1a984a31"),
					SecretIdentifier: to.Ptr("https://rpbvtkeyvaultintegration.vault.azure.net/secrets/msitestingCert"),
					LastStatus: &armapimanagement.KeyVaultLastAccessStatusContractProperties{
						Code:         to.Ptr("Success"),
						TimeStampUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-11T00:54:31.8024882Z"); return t }()),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NamedValueContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NamedValueContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementRefreshNamedValue.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkStatus_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetNetworkStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementServiceGetNetworkStatus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewNetworkStatusClient("subid", cred, &options)
	res, err := client.ListByService(ctx,
		"rg1",
		"apimService1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetNetworkStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armapimanagement.NetworkStatusContractByLocation{
			{
				Location: to.Ptr("West US"),
				NetworkStatus: &armapimanagement.NetworkStatusContract{
					ConnectivityStatus: []*armapimanagement.ConnectivityStatusContract{
						{
							Name:             to.Ptr("apimgmtst6xxxxxxxxxxx.blob.core.windows.net"),
							Error:            to.Ptr(""),
							IsOptional:       to.Ptr(false),
							LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:55.9365931Z"); return t }()),
							LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:55:14.7035899Z"); return t }()),
							ResourceType:     to.Ptr("BlobStorage"),
							Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
						},
						{
							Name:             to.Ptr("apimgmtst6xxxxxxxxxxx.file.core.windows.net"),
							Error:            to.Ptr(""),
							IsOptional:       to.Ptr(true),
							LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:55.9265938Z"); return t }()),
							LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:55:41.5322463Z"); return t }()),
							ResourceType:     to.Ptr("FileStorage"),
							Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
						},
						{
							Name:             to.Ptr("apimgmtst6xxxxxxxxxxx.queue.core.windows.net"),
							Error:            to.Ptr(""),
							IsOptional:       to.Ptr(true),
							LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:55.8410477Z"); return t }()),
							LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:55:30.645994Z"); return t }()),
							ResourceType:     to.Ptr("Queue"),
							Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
						},
						{
							Name:             to.Ptr("apimgmtst6xxxxxxxxxxx.table.core.windows.net"),
							Error:            to.Ptr(""),
							IsOptional:       to.Ptr(false),
							LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:55.9365931Z"); return t }()),
							LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:55:23.8789171Z"); return t }()),
							ResourceType:     to.Ptr("TableStorage"),
							Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
						},
						{
							Name:             to.Ptr("gcs.prod.monitoring.core.windows.net"),
							Error:            to.Ptr(""),
							IsOptional:       to.Ptr(true),
							LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T08:07:37.5486932Z"); return t }()),
							LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:57:34.8666833Z"); return t }()),
							ResourceType:     to.Ptr("Monitoring"),
							Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
						},
						{
							Name:             to.Ptr("https://gcs.ppe.warm.ingestion.monitoring.azure.com"),
							Error:            to.Ptr(""),
							IsOptional:       to.Ptr(true),
							LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:56.1060523Z"); return t }()),
							LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:56:26.1870188Z"); return t }()),
							ResourceType:     to.Ptr("Monitoring"),
							Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
						},
						{
							Name:             to.Ptr("https://global.metrics.nsatc.net/"),
							Error:            to.Ptr(""),
							IsOptional:       to.Ptr(true),
							LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:56.0510519Z"); return t }()),
							LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:56:35.9620612Z"); return t }()),
							ResourceType:     to.Ptr("Monitoring"),
							Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
						},
						{
							Name:             to.Ptr("https://login.windows.net"),
							Error:            to.Ptr(""),
							IsOptional:       to.Ptr(true),
							LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:56.1060523Z"); return t }()),
							LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:56:30.8047708Z"); return t }()),
							ResourceType:     to.Ptr("AzureActiveDirectory"),
							Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
						},
						{
							Name:             to.Ptr("https://prod2.metrics.nsatc.net:1886/RecoveryService"),
							Error:            to.Ptr(""),
							IsOptional:       to.Ptr(true),
							LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:56.2796235Z"); return t }()),
							LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:56:45.2095302Z"); return t }()),
							ResourceType:     to.Ptr("Metrics"),
							Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
						},
						{
							Name:             to.Ptr("LocalGatewayRedis"),
							Error:            to.Ptr(""),
							IsOptional:       to.Ptr(true),
							LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:55.9365931Z"); return t }()),
							LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:55:15.1345836Z"); return t }()),
							ResourceType:     to.Ptr("InternalCache"),
							Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
						},
						{
							Name:             to.Ptr("prod.warmpath.msftcloudes.com"),
							Error:            to.Ptr(""),
							IsOptional:       to.Ptr(false),
							LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:55.8410477Z"); return t }()),
							LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:55:57.8992141Z"); return t }()),
							ResourceType:     to.Ptr("Monitoring"),
							Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
						},
						{
							Name:             to.Ptr("Scm"),
							Error:            to.Ptr(""),
							IsOptional:       to.Ptr(true),
							LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-20T02:25:48.7066996Z"); return t }()),
							LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T23:01:24.0553684Z"); return t }()),
							ResourceType:     to.Ptr("SourceControl"),
							Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
						},
						{
							Name:             to.Ptr("smtpi-ch1.msn.com:25028"),
							Error:            to.Ptr(""),
							IsOptional:       to.Ptr(true),
							LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:56.3510577Z"); return t }()),
							LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:58:22.2430074Z"); return t }()),
							ResourceType:     to.Ptr("Email"),
							Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
						},
						{
							Name:             to.Ptr("zwcvuxxxx.database.windows.net"),
							Error:            to.Ptr(""),
							IsOptional:       to.Ptr(false),
							LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:56.0410467Z"); return t }()),
							LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:55:44.3582171Z"); return t }()),
							ResourceType:     to.Ptr("SQLDatabase"),
							Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
						}},
					DNSServers: []*string{
						to.Ptr("10.82.98.10")},
				},
			}}
		if !reflect.DeepEqual(exampleRes, res.NetworkStatusContractByLocationArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkStatusContractByLocationArray)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetNetworkStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNetworkStatus_ListByLocation(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetNetworkStatusByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementServiceGetNetworkStatusByLocation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewNetworkStatusClient("subid", cred, &options)
	res, err := client.ListByLocation(ctx,
		"rg1",
		"apimService1",
		"North Central US",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetNetworkStatusByLocation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.NetworkStatusContract{
			ConnectivityStatus: []*armapimanagement.ConnectivityStatusContract{
				{
					Name:             to.Ptr("apimgmtst6tnxxxxxxxxxxx.blob.core.windows.net"),
					Error:            to.Ptr(""),
					IsOptional:       to.Ptr(false),
					LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:55.9365931Z"); return t }()),
					LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:55:14.7035899Z"); return t }()),
					ResourceType:     to.Ptr("BlobStorage"),
					Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
				},
				{
					Name:             to.Ptr("apimgmtst6tnxxxxxxxxxxx.file.core.windows.net"),
					Error:            to.Ptr(""),
					IsOptional:       to.Ptr(true),
					LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:55.9265938Z"); return t }()),
					LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:55:41.5322463Z"); return t }()),
					ResourceType:     to.Ptr("FileStorage"),
					Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
				},
				{
					Name:             to.Ptr("apimgmtst6tnxxxxxxxxxxx.queue.core.windows.net"),
					Error:            to.Ptr(""),
					IsOptional:       to.Ptr(true),
					LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:55.8410477Z"); return t }()),
					LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:55:30.645994Z"); return t }()),
					ResourceType:     to.Ptr("Queue"),
					Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
				},
				{
					Name:             to.Ptr("apimgmtst6tnxxxxxxxxxxx.table.core.windows.net"),
					Error:            to.Ptr(""),
					IsOptional:       to.Ptr(false),
					LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:55.9365931Z"); return t }()),
					LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:55:23.8789171Z"); return t }()),
					ResourceType:     to.Ptr("TableStorage"),
					Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
				},
				{
					Name:             to.Ptr("gcs.prod.monitoring.core.windows.net"),
					Error:            to.Ptr(""),
					IsOptional:       to.Ptr(true),
					LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T08:07:37.5486932Z"); return t }()),
					LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:57:34.8666833Z"); return t }()),
					ResourceType:     to.Ptr("Monitoring"),
					Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
				},
				{
					Name:             to.Ptr("https://gcs.ppe.warm.ingestion.monitoring.azure.com"),
					Error:            to.Ptr(""),
					IsOptional:       to.Ptr(true),
					LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:56.1060523Z"); return t }()),
					LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:56:26.1870188Z"); return t }()),
					ResourceType:     to.Ptr("Monitoring"),
					Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
				},
				{
					Name:             to.Ptr("https://global.metrics.nsatc.net/"),
					Error:            to.Ptr(""),
					IsOptional:       to.Ptr(true),
					LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:56.0510519Z"); return t }()),
					LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:56:35.9620612Z"); return t }()),
					ResourceType:     to.Ptr("Monitoring"),
					Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
				},
				{
					Name:             to.Ptr("https://login.windows.net"),
					Error:            to.Ptr(""),
					IsOptional:       to.Ptr(true),
					LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:56.1060523Z"); return t }()),
					LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:56:30.8047708Z"); return t }()),
					ResourceType:     to.Ptr("AzureActiveDirectory"),
					Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
				},
				{
					Name:             to.Ptr("https://prod2.metrics.nsatc.net:1886/RecoveryService"),
					Error:            to.Ptr(""),
					IsOptional:       to.Ptr(true),
					LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:56.2796235Z"); return t }()),
					LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:56:45.2095302Z"); return t }()),
					ResourceType:     to.Ptr("Metrics"),
					Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
				},
				{
					Name:             to.Ptr("LocalGatewayRedis"),
					Error:            to.Ptr(""),
					IsOptional:       to.Ptr(true),
					LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:55.9365931Z"); return t }()),
					LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:55:15.1345836Z"); return t }()),
					ResourceType:     to.Ptr("InternalCache"),
					Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
				},
				{
					Name:             to.Ptr("prod.warmpath.msftcloudes.com"),
					Error:            to.Ptr(""),
					IsOptional:       to.Ptr(false),
					LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:55.8410477Z"); return t }()),
					LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:55:57.8992141Z"); return t }()),
					ResourceType:     to.Ptr("Monitoring"),
					Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
				},
				{
					Name:             to.Ptr("Scm"),
					Error:            to.Ptr(""),
					IsOptional:       to.Ptr(true),
					LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:57.325384Z"); return t }()),
					LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T23:03:57.6187917Z"); return t }()),
					ResourceType:     to.Ptr("SourceControl"),
					Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
				},
				{
					Name:             to.Ptr("smtpi-xxx.msn.com:25028"),
					Error:            to.Ptr(""),
					IsOptional:       to.Ptr(true),
					LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:56.3510577Z"); return t }()),
					LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:58:22.2430074Z"); return t }()),
					ResourceType:     to.Ptr("Email"),
					Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
				},
				{
					Name:             to.Ptr("zwcvuxxxx.database.windows.net"),
					Error:            to.Ptr(""),
					IsOptional:       to.Ptr(false),
					LastStatusChange: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-20T07:54:56.0410467Z"); return t }()),
					LastUpdated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-24T22:55:44.3582171Z"); return t }()),
					ResourceType:     to.Ptr("SQLDatabase"),
					Status:           to.Ptr(armapimanagement.ConnectivityStatusTypeSuccess),
				}},
			DNSServers: []*string{
				to.Ptr("10.82.98.10")},
		}
		if !reflect.DeepEqual(exampleRes, res.NetworkStatusContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkStatusContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetNetworkStatusByLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotification_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListNotifications.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListNotifications"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewNotificationClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.NotificationClientListByServiceOptions{Top: nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListNotifications.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.NotificationCollection{
			Count: to.Ptr[int64](7),
			Value: []*armapimanagement.NotificationContract{
				{
					Name: to.Ptr("RequestPublisherNotificationMessage"),
					Type: to.Ptr("Microsoft.ApiManagement/service/notifications"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/notifications/RequestPublisherNotificationMessage"),
					Properties: &armapimanagement.NotificationContractProperties{
						Description: to.Ptr("The following email recipients and users will receive email notifications about subscription requests for API products requiring approval."),
						Recipients: &armapimanagement.RecipientsContractProperties{
							Emails: []*string{
								to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/notifications/RequestPublisherNotificationMessage/recipientEmails/contoso@live.com"),
								to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/notifications/RequestPublisherNotificationMessage/recipientEmails/foobar!live"),
								to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/notifications/RequestPublisherNotificationMessage/recipientEmails/foobar@live.com")},
							Users: []*string{
								to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/576823d0a40f7e74ec07d642")},
						},
						Title: to.Ptr("Subscription requests (requiring approval)"),
					},
				},
				{
					Name: to.Ptr("PurchasePublisherNotificationMessage"),
					Type: to.Ptr("Microsoft.ApiManagement/service/notifications"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/notifications/PurchasePublisherNotificationMessage"),
					Properties: &armapimanagement.NotificationContractProperties{
						Description: to.Ptr("The following email recipients and users will receive email notifications about new API product subscriptions."),
						Recipients: &armapimanagement.RecipientsContractProperties{
							Emails: []*string{
								to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/notifications/RequestPublisherNotificationMessage/recipientEmails/contoso@live.com")},
							Users: []*string{
								to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/1")},
						},
						Title: to.Ptr("New subscriptions"),
					},
				},
				{
					Name: to.Ptr("NewApplicationNotificationMessage"),
					Type: to.Ptr("Microsoft.ApiManagement/service/notifications"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/notifications/NewApplicationNotificationMessage"),
					Properties: &armapimanagement.NotificationContractProperties{
						Description: to.Ptr("The following email recipients and users will receive email notifications when new applications are submitted to the application gallery."),
						Recipients: &armapimanagement.RecipientsContractProperties{
							Emails: []*string{
								to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/notifications/RequestPublisherNotificationMessage/recipientEmails/contoso@live.com")},
							Users: []*string{},
						},
						Title: to.Ptr("Application gallery requests"),
					},
				},
				{
					Name: to.Ptr("BCC"),
					Type: to.Ptr("Microsoft.ApiManagement/service/notifications"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/notifications/BCC"),
					Properties: &armapimanagement.NotificationContractProperties{
						Description: to.Ptr("The following recipients will receive blind carbon copies of all emails sent to developers."),
						Recipients: &armapimanagement.RecipientsContractProperties{
							Emails: []*string{},
							Users:  []*string{},
						},
						Title: to.Ptr("BCC"),
					},
				},
				{
					Name: to.Ptr("NewIssuePublisherNotificationMessage"),
					Type: to.Ptr("Microsoft.ApiManagement/service/notifications"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/notifications/NewIssuePublisherNotificationMessage"),
					Properties: &armapimanagement.NotificationContractProperties{
						Description: to.Ptr("The following email recipients and users will receive email notifications when a new issue or comment is submitted on the developer portal."),
						Recipients: &armapimanagement.RecipientsContractProperties{
							Emails: []*string{},
							Users: []*string{
								to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/1")},
						},
						Title: to.Ptr("New issue or comment"),
					},
				},
				{
					Name: to.Ptr("AccountClosedPublisher"),
					Type: to.Ptr("Microsoft.ApiManagement/service/notifications"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/notifications/AccountClosedPublisher"),
					Properties: &armapimanagement.NotificationContractProperties{
						Description: to.Ptr("The following email recipients and users will receive email notifications when developer closes his account"),
						Recipients: &armapimanagement.RecipientsContractProperties{
							Emails: []*string{
								to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/notifications/RequestPublisherNotificationMessage/recipientEmails/contoso@live.com")},
							Users: []*string{},
						},
						Title: to.Ptr("Close account message"),
					},
				},
				{
					Name: to.Ptr("QuotaLimitApproachingPublisherNotificationMessage"),
					Type: to.Ptr("Microsoft.ApiManagement/service/notifications"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/notifications/QuotaLimitApproachingPublisherNotificationMessage"),
					Properties: &armapimanagement.NotificationContractProperties{
						Description: to.Ptr("The following email recipients and users will receive email notifications when subscription usage gets close to usage quota."),
						Recipients: &armapimanagement.RecipientsContractProperties{
							Emails: []*string{},
							Users: []*string{
								to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/1")},
						},
						Title: to.Ptr("Approaching subscription quota limit"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NotificationCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NotificationCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListNotifications.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotification_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetNotification.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetNotification"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewNotificationClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		armapimanagement.NotificationNameRequestPublisherNotificationMessage,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetNotification.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.NotificationContract{
			Name: to.Ptr("RequestPublisherNotificationMessage"),
			Type: to.Ptr("Microsoft.ApiManagement/service/notifications"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/notifications/RequestPublisherNotificationMessage"),
			Properties: &armapimanagement.NotificationContractProperties{
				Description: to.Ptr("The following email recipients and users will receive email notifications about subscription requests for API products requiring approval."),
				Recipients: &armapimanagement.RecipientsContractProperties{
					Emails: []*string{
						to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/recipientEmails/contoso@live.com"),
						to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/recipientEmails/foobar!live"),
						to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/recipientEmails/foobar@live.com")},
					Users: []*string{
						to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/576823d0a40f7e74ec07d642")},
				},
				Title: to.Ptr("Subscription requests (requiring approval)"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NotificationContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NotificationContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetNotification.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotification_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateNotification.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateNotification"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewNotificationClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		armapimanagement.NotificationNameRequestPublisherNotificationMessage,
		&armapimanagement.NotificationClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateNotification.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.NotificationContract{
			Name: to.Ptr("RequestPublisherNotificationMessage"),
			Type: to.Ptr("Microsoft.ApiManagement/service/notifications"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/notifications/RequestPublisherNotificationMessage"),
			Properties: &armapimanagement.NotificationContractProperties{
				Description: to.Ptr("The following email recipients and users will receive email notifications about subscription requests for API products requiring approval."),
				Recipients: &armapimanagement.RecipientsContractProperties{
					Emails: []*string{
						to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/recipientEmails/contoso@live.com"),
						to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/recipientEmails/foobar!live"),
						to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/recipientEmails/foobar@live.com")},
					Users: []*string{
						to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/576823d0a40f7e74ec07d642")},
				},
				Title: to.Ptr("Subscription requests (requiring approval)"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NotificationContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NotificationContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateNotification.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationRecipientUser_ListByNotification(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListNotificationRecipientUsers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListNotificationRecipientUsers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewNotificationRecipientUserClient("subid", cred, &options)
	res, err := client.ListByNotification(ctx,
		"rg1",
		"apimService1",
		armapimanagement.NotificationNameRequestPublisherNotificationMessage,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListNotificationRecipientUsers.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.RecipientUserCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.RecipientUserContract{
				{
					Name: to.Ptr("576823d0a40f7e74ec07d642"),
					Type: to.Ptr("Microsoft.ApiManagement/service/notifications/recipientUsers"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/notifications/RequestPublisherNotificationMessage/recipientUsers/576823d0a40f7e74ec07d642"),
					Properties: &armapimanagement.RecipientUsersContractProperties{
						UserID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/576823d0a40f7e74ec07d642"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.RecipientUserCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecipientUserCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListNotificationRecipientUsers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationRecipientUser_CheckEntityExists(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadNotificationRecipientUser.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadNotificationRecipientUser"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewNotificationRecipientUserClient("subid", cred, &options)
	_, err := client.CheckEntityExists(ctx,
		"rg1",
		"apimService1",
		armapimanagement.NotificationNameRequestPublisherNotificationMessage,
		"576823d0a40f7e74ec07d642",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadNotificationRecipientUser.json: %v", err)
	}
}

func TestNotificationRecipientUser_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateNotificationRecipientUser.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateNotificationRecipientUser"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewNotificationRecipientUserClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		armapimanagement.NotificationNameRequestPublisherNotificationMessage,
		"576823d0a40f7e74ec07d642",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateNotificationRecipientUser.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.RecipientUserContract{
			Name: to.Ptr("576823d0a40f7e74ec07d642"),
			Type: to.Ptr("Microsoft.ApiManagement/service/notifications/recipientUsers"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/notifications/RequestPublisherNotificationMessage/recipientUsers/576823d0a40f7e74ec07d642"),
			Properties: &armapimanagement.RecipientUsersContractProperties{
				UserID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/576823d0a40f7e74ec07d642"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecipientUserContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecipientUserContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateNotificationRecipientUser.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationRecipientUser_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteNotificationRecipientUser.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteNotificationRecipientUser"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewNotificationRecipientUserClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		armapimanagement.NotificationNameRequestPublisherNotificationMessage,
		"576823d0a40f7e74ec07d642",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteNotificationRecipientUser.json: %v", err)
	}
}

func TestNotificationRecipientEmail_ListByNotification(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListNotificationRecipientEmails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListNotificationRecipientEmails"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewNotificationRecipientEmailClient("subid", cred, &options)
	res, err := client.ListByNotification(ctx,
		"rg1",
		"apimService1",
		armapimanagement.NotificationNameRequestPublisherNotificationMessage,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListNotificationRecipientEmails.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.RecipientEmailCollection{
			Count: to.Ptr[int64](3),
			Value: []*armapimanagement.RecipientEmailContract{
				{
					Name: to.Ptr("contoso@live.com"),
					Type: to.Ptr("Microsoft.ApiManagement/service/notifications/recipientEmails"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/notifications/RequestPublisherNotificationMessage/recipientEmails/contoso@live.com"),
					Properties: &armapimanagement.RecipientEmailContractProperties{
						Email: to.Ptr("contoso@live.com"),
					},
				},
				{
					Name: to.Ptr("foobar!live"),
					Type: to.Ptr("Microsoft.ApiManagement/service/notifications/recipientEmails"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/notifications/RequestPublisherNotificationMessage/recipientEmails/foobar!live"),
					Properties: &armapimanagement.RecipientEmailContractProperties{
						Email: to.Ptr("foobar!live"),
					},
				},
				{
					Name: to.Ptr("foobar@live.com"),
					Type: to.Ptr("Microsoft.ApiManagement/service/notifications/recipientEmails"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/notifications/RequestPublisherNotificationMessage/recipientEmails/foobar@live.com"),
					Properties: &armapimanagement.RecipientEmailContractProperties{
						Email: to.Ptr("foobar@live.com"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.RecipientEmailCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecipientEmailCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListNotificationRecipientEmails.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationRecipientEmail_CheckEntityExists(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadNotificationRecipientEmail.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadNotificationRecipientEmail"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewNotificationRecipientEmailClient("subid", cred, &options)
	_, err := client.CheckEntityExists(ctx,
		"rg1",
		"apimService1",
		armapimanagement.NotificationNameRequestPublisherNotificationMessage,
		"contoso@live.com",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadNotificationRecipientEmail.json: %v", err)
	}
}

func TestNotificationRecipientEmail_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateNotificationRecipientEmail.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateNotificationRecipientEmail"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewNotificationRecipientEmailClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		armapimanagement.NotificationNameRequestPublisherNotificationMessage,
		"foobar@live.com",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateNotificationRecipientEmail.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.RecipientEmailContract{
			Name: to.Ptr("foobar@live.com"),
			Type: to.Ptr("Microsoft.ApiManagement/service/notifications/recipientEmails"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/notifications/RequestPublisherNotificationMessage/recipientEmails/foobar@live.com"),
			Properties: &armapimanagement.RecipientEmailContractProperties{
				Email: to.Ptr("foobar@live.com"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecipientEmailContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecipientEmailContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateNotificationRecipientEmail.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationRecipientEmail_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteNotificationRecipientEmail.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteNotificationRecipientEmail"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewNotificationRecipientEmailClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		armapimanagement.NotificationNameRequestPublisherNotificationMessage,
		"contoso@live.com",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteNotificationRecipientEmail.json: %v", err)
	}
}

func TestOpenIDConnectProvider_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListOpenIdConnectProviders.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListOpenIdConnectProviders"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewOpenIDConnectProviderClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.OpenIDConnectProviderClientListByServiceOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListOpenIdConnectProviders.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.OpenIDConnectProviderCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.OpenidConnectProviderContract{
				{
					Name: to.Ptr("templateOpenIdConnect2"),
					Type: to.Ptr("Microsoft.ApiManagement/service/openidconnectproviders"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/openidConnectProviders/templateOpenIdConnect2"),
					Properties: &armapimanagement.OpenidConnectProviderContractProperties{
						Description:      to.Ptr("open id provider template2"),
						ClientID:         to.Ptr("oidprovidertemplate2"),
						DisplayName:      to.Ptr("templateoidprovider2"),
						MetadataEndpoint: to.Ptr("https://oidprovider-template2.net"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OpenIDConnectProviderCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OpenIDConnectProviderCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListOpenIdConnectProviders.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOpenIDConnectProvider_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadOpenIdConnectProvider.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadOpenIdConnectProvider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewOpenIDConnectProviderClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"templateOpenIdConnect2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadOpenIdConnectProvider.json: %v", err)
	}
}

func TestOpenIDConnectProvider_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetOpenIdConnectProvider.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetOpenIdConnectProvider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewOpenIDConnectProviderClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"templateOpenIdConnect2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetOpenIdConnectProvider.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.OpenidConnectProviderContract{
			Name: to.Ptr("templateOpenIdConnect2"),
			Type: to.Ptr("Microsoft.ApiManagement/service/openidconnectproviders"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/openidConnectProviders/templateOpenIdConnect2"),
			Properties: &armapimanagement.OpenidConnectProviderContractProperties{
				Description:      to.Ptr("open id provider template2"),
				ClientID:         to.Ptr("oidprovidertemplate2"),
				DisplayName:      to.Ptr("templateoidprovider2"),
				MetadataEndpoint: to.Ptr("https://oidprovider-template2.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OpenidConnectProviderContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OpenidConnectProviderContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetOpenIdConnectProvider.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOpenIDConnectProvider_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateOpenIdConnectProvider.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateOpenIdConnectProvider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewOpenIDConnectProviderClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"templateOpenIdConnect3",
		armapimanagement.OpenidConnectProviderContract{
			Properties: &armapimanagement.OpenidConnectProviderContractProperties{
				ClientID:         to.Ptr("oidprovidertemplate3"),
				ClientSecret:     to.Ptr("x"),
				DisplayName:      to.Ptr("templateoidprovider3"),
				MetadataEndpoint: to.Ptr("https://oidprovider-template3.net"),
			},
		},
		&armapimanagement.OpenIDConnectProviderClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateOpenIdConnectProvider.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.OpenidConnectProviderContract{
			Name: to.Ptr("templateOpenIdConnect3"),
			Type: to.Ptr("Microsoft.ApiManagement/service/openidconnectproviders"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/openidConnectProviders/templateOpenIdConnect3"),
			Properties: &armapimanagement.OpenidConnectProviderContractProperties{
				ClientID:         to.Ptr("oidprovidertemplate3"),
				DisplayName:      to.Ptr("templateoidprovider3"),
				MetadataEndpoint: to.Ptr("https://oidprovider-template3.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OpenidConnectProviderContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OpenidConnectProviderContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateOpenIdConnectProvider.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOpenIDConnectProvider_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateOpenIdConnectProvider.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateOpenIdConnectProvider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewOpenIDConnectProviderClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"templateOpenIdConnect2",
		"*",
		armapimanagement.OpenidConnectProviderUpdateContract{
			Properties: &armapimanagement.OpenidConnectProviderUpdateContractProperties{
				ClientSecret: to.Ptr("updatedsecret"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateOpenIdConnectProvider.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.OpenidConnectProviderContract{
			Name: to.Ptr("templateOpenIdConnect2"),
			Type: to.Ptr("Microsoft.ApiManagement/service/openidconnectproviders"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/openidConnectProviders/templateOpenIdConnect2"),
			Properties: &armapimanagement.OpenidConnectProviderContractProperties{
				Description:      to.Ptr("open id provider template2"),
				ClientID:         to.Ptr("oidprovidertemplate2"),
				DisplayName:      to.Ptr("templateoidprovider2"),
				MetadataEndpoint: to.Ptr("https://oidprovider-template2.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OpenidConnectProviderContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OpenidConnectProviderContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateOpenIdConnectProvider.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOpenIDConnectProvider_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteOpenIdConnectProvider.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteOpenIdConnectProvider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewOpenIDConnectProviderClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"templateOpenIdConnect3",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteOpenIdConnectProvider.json: %v", err)
	}
}

func TestOpenIDConnectProvider_ListSecrets(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementOpenidConnectProviderListSecrets.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementOpenidConnectProviderListSecrets"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewOpenIDConnectProviderClient("subid", cred, &options)
	res, err := client.ListSecrets(ctx,
		"rg1",
		"apimService1",
		"templateOpenIdConnect2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementOpenidConnectProviderListSecrets.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ClientSecretContract{
			ClientSecret: to.Ptr("oidsecretproviderTemplate2"),
		}
		if !reflect.DeepEqual(exampleRes, res.ClientSecretContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ClientSecretContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementOpenidConnectProviderListSecrets.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOutboundNetworkDependenciesEndpoints_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetOutboundNetworkDependenciesEndpoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementServiceGetOutboundNetworkDependenciesEndpoints"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewOutboundNetworkDependenciesEndpointsClient("subid", cred, &options)
	res, err := client.ListByService(ctx,
		"rg1",
		"apimService1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetOutboundNetworkDependenciesEndpoints.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.OutboundEnvironmentEndpointList{
			Value: []*armapimanagement.OutboundEnvironmentEndpoint{
				{
					Category: to.Ptr("Azure SMTP"),
					Endpoints: []*armapimanagement.EndpointDependency{
						{
							DomainName: to.Ptr("smtpi-ch1.msn.com"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](25028),
									Region: to.Ptr("West US"),
								}},
						}},
				},
				{
					Category: to.Ptr("Azure SQL"),
					Endpoints: []*armapimanagement.EndpointDependency{
						{
							DomainName: to.Ptr("xxxx1345234.database.windows.net"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](1433),
									Region: to.Ptr("West US"),
								}},
						}},
				},
				{
					Category: to.Ptr("Azure Storage"),
					Endpoints: []*armapimanagement.EndpointDependency{
						{
							DomainName: to.Ptr("xxxx32storagedgfbay.blob.core.windows.net"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("West US"),
								}},
						},
						{
							DomainName: to.Ptr("xxxx1362629927xt.blob.core.windows.net"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("West US"),
								}},
						},
						{
							DomainName: to.Ptr("xxxx1362629927xt.table.core.windows.net"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("West US"),
								}},
						},
						{
							DomainName: to.Ptr("xxxx141483183xt.blob.core.windows.net"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("West US"),
								}},
						},
						{
							DomainName: to.Ptr("xxxx141483183xt.table.core.windows.net"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("West US"),
								}},
						},
						{
							DomainName: to.Ptr("xxxx1949864718xt.blob.core.windows.net"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("West US"),
								}},
						},
						{
							DomainName: to.Ptr("xxxx1949864718xt.table.core.windows.net"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("West US"),
								}},
						},
						{
							DomainName: to.Ptr("xxxx3292114122xt.blob.core.windows.net"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("West US"),
								}},
						},
						{
							DomainName: to.Ptr("xxxx3292114122xt.table.core.windows.net"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("West US"),
								}},
						},
						{
							DomainName: to.Ptr("xxxx32tst4oto8t0mlesawmm.blob.core.windows.net"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("West US"),
								}},
						},
						{
							DomainName: to.Ptr("xxxx32tst4oto8t0mlesawmm.file.core.windows.net"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](445),
									Region: to.Ptr("West US"),
								}},
						},
						{
							DomainName: to.Ptr("xxxx32tst4oto8t0mlesawmm.queue.core.windows.net"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("West US"),
								}},
						},
						{
							DomainName: to.Ptr("xxxx32tst4oto8t0mlesawmm.table.core.windows.net"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("West US"),
								}},
						}},
				},
				{
					Category: to.Ptr("Azure Event Hub"),
					Endpoints: []*armapimanagement.EndpointDependency{
						{
							DomainName: to.Ptr("xxxx1362629927eh.servicebus.windows.net"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("West US"),
								},
								{
									Port:   to.Ptr[int32](5671),
									Region: to.Ptr("West US"),
								},
								{
									Port:   to.Ptr[int32](5672),
									Region: to.Ptr("West US"),
								}},
						},
						{
							DomainName: to.Ptr("xxxx1949864718eh.servicebus.windows.net"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("West US"),
								},
								{
									Port:   to.Ptr[int32](5671),
									Region: to.Ptr("West US"),
								},
								{
									Port:   to.Ptr[int32](5672),
									Region: to.Ptr("West US"),
								}},
						},
						{
							DomainName: to.Ptr("xxxx3292114122eh.servicebus.windows.net"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("West US"),
								},
								{
									Port:   to.Ptr[int32](5671),
									Region: to.Ptr("West US"),
								},
								{
									Port:   to.Ptr[int32](5672),
									Region: to.Ptr("West US"),
								}},
						},
						{
							DomainName: to.Ptr("xxxx141483183eh.servicebus.windows.net"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("West US"),
								},
								{
									Port:   to.Ptr[int32](5671),
									Region: to.Ptr("West US"),
								},
								{
									Port:   to.Ptr[int32](5672),
									Region: to.Ptr("West US"),
								}},
						}},
				},
				{
					Category: to.Ptr("SSL Certificate Verification"),
					Endpoints: []*armapimanagement.EndpointDependency{
						{
							DomainName: to.Ptr("ocsp.msocsp.com"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](80),
									Region: to.Ptr("Global"),
								},
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("Global"),
								}},
						},
						{
							DomainName: to.Ptr("mscrl.microsoft.com"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](80),
									Region: to.Ptr("Global"),
								},
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("Global"),
								}},
						},
						{
							DomainName: to.Ptr("crl.microsoft.com"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](80),
									Region: to.Ptr("Global"),
								},
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("Global"),
								}},
						},
						{
							DomainName: to.Ptr("crl3.digicert.com"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](80),
									Region: to.Ptr("Global"),
								},
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("Global"),
								}},
						},
						{
							DomainName: to.Ptr("ocsp.digicert.com"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](80),
									Region: to.Ptr("Global"),
								},
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("Global"),
								}},
						},
						{
							DomainName: to.Ptr("cacerts.digicert.com"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](80),
									Region: to.Ptr("Global"),
								},
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("Global"),
								}},
						}},
				},
				{
					Category: to.Ptr("Azure Monitor"),
					Endpoints: []*armapimanagement.EndpointDependency{
						{
							DomainName: to.Ptr("gcs.ppe.monitoring.core.windows.net"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("Global"),
								}},
						},
						{
							DomainName: to.Ptr("global.prod.microsoftmetrics.com"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("Global"),
								}},
						},
						{
							DomainName: to.Ptr("xxx3.prod.microsoftmetrics.com"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](1886),
									Region: to.Ptr("Global"),
								}},
						},
						{
							DomainName: to.Ptr("xxx3-red.prod.microsoftmetrics.com"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](1886),
									Region: to.Ptr("Global"),
								}},
						},
						{
							DomainName: to.Ptr("xxx3-black.prod.microsoftmetrics.com"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](1886),
									Region: to.Ptr("Global"),
								}},
						},
						{
							DomainName: to.Ptr("gcs.ppe.warm.ingestion.monitoring.azure.com"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("Global"),
								}},
						},
						{
							DomainName: to.Ptr("metrichost23.prod.microsoftmetrics.com"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("Global"),
								}},
						},
						{
							DomainName: to.Ptr("metrichost23-red.prod.microsoftmetrics.com"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("Global"),
								}},
						},
						{
							DomainName: to.Ptr("metrichost23-black.prod.microsoftmetrics.com"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("Global"),
								}},
						}},
				},
				{
					Category: to.Ptr("Portal Captcha"),
					Endpoints: []*armapimanagement.EndpointDependency{
						{
							DomainName: to.Ptr("client.xxx.live.com"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("Global"),
								}},
						},
						{
							DomainName: to.Ptr("partner.xxx.live.com"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("Global"),
								}},
						}},
				},
				{
					Category: to.Ptr("Azure Active Directory"),
					Endpoints: []*armapimanagement.EndpointDependency{
						{
							DomainName: to.Ptr("login.windows.net"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("Global"),
								}},
						},
						{
							DomainName: to.Ptr("graph.windows.net"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("Global"),
								}},
						},
						{
							DomainName: to.Ptr("login.microsoftonline.com"),
							EndpointDetails: []*armapimanagement.EndpointDetail{
								{
									Port:   to.Ptr[int32](443),
									Region: to.Ptr("Global"),
								}},
						}},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.OutboundEnvironmentEndpointList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OutboundEnvironmentEndpointList)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementServiceGetOutboundNetworkDependenciesEndpoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPolicy_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListPolicies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListPolicies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewPolicyClient("subid", cred, &options)
	res, err := client.ListByService(ctx,
		"rg1",
		"apimService1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListPolicies.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PolicyCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.PolicyContract{
				{
					Name: to.Ptr("policy"),
					Type: to.Ptr("Microsoft.ApiManagement/service/policies"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/policies/policy"),
					Properties: &armapimanagement.PolicyContractProperties{
						Value: to.Ptr("<!--\r\n    IMPORTANT:\r\n    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.\r\n    - Only the <forward-request> policy element can appear within the <backend> section element.\r\n    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.\r\n    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.\r\n    - To add a policy position the cursor at the desired insertion point and click on the round button associated with the policy.\r\n    - To remove a policy, delete the corresponding policy statement from the policy document.\r\n    - Policies are applied in the order of their appearance, from the top down.\r\n-->\r\n<policies>\r\n  <inbound />\r\n  <backend>\r\n    <forward-request />\r\n  </backend>\r\n  <outbound />\r\n</policies>"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PolicyCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PolicyCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListPolicies.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPolicy_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewPolicyClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		armapimanagement.PolicyIDNamePolicy,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadPolicy.json: %v", err)
	}
}

func TestPolicy_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewPolicyClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		armapimanagement.PolicyIDNamePolicy,
		&armapimanagement.PolicyClientGetOptions{Format: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PolicyContract{
			Name: to.Ptr("policy"),
			Type: to.Ptr("Microsoft.ApiManagement/service/policies"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/policies/policy"),
			Properties: &armapimanagement.PolicyContractProperties{
				Value: to.Ptr("<!--\r\n    IMPORTANT:\r\n    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.\r\n    - Only the <forward-request> policy element can appear within the <backend> section element.\r\n    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.\r\n    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.\r\n    - To add a policy position the cursor at the desired insertion point and click on the round button associated with the policy.\r\n    - To remove a policy, delete the corresponding policy statement from the policy document.\r\n    - Policies are applied in the order of their appearance, from the top down.\r\n-->\r\n<policies>\r\n  <inbound />\r\n  <backend>\r\n    <forward-request />\r\n  </backend>\r\n  <outbound />\r\n</policies>"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PolicyContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PolicyContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetPolicyFormat.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetPolicyFormat"},
	})
	client = armapimanagement.NewPolicyClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"apimService1",
		armapimanagement.PolicyIDNamePolicy,
		&armapimanagement.PolicyClientGetOptions{Format: to.Ptr(armapimanagement.PolicyExportFormatRawxml)})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetPolicyFormat.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PolicyContract{
			Name: to.Ptr("policy"),
			Type: to.Ptr("Microsoft.ApiManagement/service/policies"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/policies/policy"),
			Properties: &armapimanagement.PolicyContractProperties{
				Format: to.Ptr(armapimanagement.PolicyContentFormatRawxml),
				Value: to.Ptr("<!--\n    IMPORTANT:\n    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.\n    - Only the <forward-request> policy element can appear within the <backend> section element.\n    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.\n    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.\n    - To add a policy position the cursor at the desired insertion point and click on the round button associated with the policy.\n    - To remove a policy, delete the corresponding policy statement from the policy document.\n    - Policies are applied in the order of their appearance, from the top down.\n-->\r\n<policies>\r\n	<inbound>\r\n		<set-header name=\"correlationid\" exists-action=\"skip\">\r\n			<value>@{\n                var guidBinary = new byte[16];\n                Array.Copy(Guid.NewGuid().ToByteArray(), 0, guidBinary, 0, 10);\n                long time = DateTime.Now.Ticks;\n                byte[] bytes = new byte[6];\n                unchecked\n                {\n                       bytes[5] = (byte)(time >> 40);\n                       bytes[4] = (byte)(time >> 32);\n                       bytes[3] = (byte)(time >> 24);\n                       bytes[2] = (byte)(time >> 16);\n                       bytes[1] = (byte)(time >> 8);\n                       bytes[0] = (byte)(time);\n                }\n                Array.Copy(bytes, 0, guidBinary, 10, 6);\n                return new Guid(guidBinary).ToString();\n            }\n            </value>\r\n		</set-header>\r\n	</inbound>\r\n	<backend>\r\n		<forward-request />\r\n	</backend>\r\n	<outbound />\r\n	<on-error />\r\n</policies>"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PolicyContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PolicyContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetPolicyFormat.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPolicy_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreatePolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreatePolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewPolicyClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		armapimanagement.PolicyIDNamePolicy,
		armapimanagement.PolicyContract{
			Properties: &armapimanagement.PolicyContractProperties{
				Format: to.Ptr(armapimanagement.PolicyContentFormatXML),
				Value:  to.Ptr("<policies>\r\n  <inbound />\r\n  <backend>\r\n    <forward-request />\r\n  </backend>\r\n  <outbound />\r\n</policies>"),
			},
		},
		&armapimanagement.PolicyClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreatePolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PolicyContract{
			Name: to.Ptr("policy"),
			Type: to.Ptr("Microsoft.ApiManagement/service/policies"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/policies/policy"),
			Properties: &armapimanagement.PolicyContractProperties{
				Value: to.Ptr("<policies>\r\n  <inbound />\r\n  <backend>\r\n    <forward-request />\r\n  </backend>\r\n  <outbound />\r\n</policies>"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PolicyContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PolicyContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreatePolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPolicy_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeletePolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeletePolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewPolicyClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		armapimanagement.PolicyIDNamePolicy,
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeletePolicy.json: %v", err)
	}
}

func TestPolicyDescription_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListPolicyDescriptions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListPolicyDescriptions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewPolicyDescriptionClient("subid", cred, &options)
	res, err := client.ListByService(ctx,
		"rg1",
		"apimService1",
		&armapimanagement.PolicyDescriptionClientListByServiceOptions{Scope: to.Ptr(armapimanagement.PolicyScopeContractAPI)})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListPolicyDescriptions.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PolicyDescriptionCollection{
			Count: to.Ptr[int64](2),
			Value: []*armapimanagement.PolicyDescriptionContract{
				{
					Name: to.Ptr("authentication-basic"),
					Type: to.Ptr("Microsoft.ApiManagement/service/policyDescriptions"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/policyDescriptions/authentication-basic"),
					Properties: &armapimanagement.PolicyDescriptionContractProperties{
						Description: to.Ptr("Authenticate with the backend service using Basic authentication. Use in the inbound section at API scope."),
						Scope:       to.Ptr[int64](268435471),
					},
				},
				{
					Name: to.Ptr("authentication-certificate"),
					Type: to.Ptr("Microsoft.ApiManagement/service/policyDescriptions"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/policyDescriptions/authentication-certificate"),
					Properties: &armapimanagement.PolicyDescriptionContractProperties{
						Description: to.Ptr("Authenticate with the backend service using a client certificate. Use in the inbound section at API scope."),
						Scope:       to.Ptr[int64](268435471),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PolicyDescriptionCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PolicyDescriptionCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListPolicyDescriptions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPortalRevision_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListPortalRevisions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListPortalRevisions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewPortalRevisionClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.PortalRevisionClientListByServiceOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListPortalRevisions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.PortalRevisionCollection{
			Value: []*armapimanagement.PortalRevisionContract{
				{
					Name: to.Ptr("20201112000000"),
					Type: to.Ptr("Microsoft.ApiManagement/service/portalRevisions"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/portalRevisions/20201112000000"),
					Properties: &armapimanagement.PortalRevisionContractProperties{
						Description:     to.Ptr("portal revision"),
						CreatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-12T22:10:09.673Z"); return t }()),
						IsCurrent:       to.Ptr(false),
						Status:          to.Ptr(armapimanagement.PortalRevisionStatusCompleted),
						UpdatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-12T22:12:41.46Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("20201112101010"),
					Type: to.Ptr("Microsoft.ApiManagement/service/portalRevisions"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/portalRevisions/20201112101010"),
					Properties: &armapimanagement.PortalRevisionContractProperties{
						Description:     to.Ptr("portal revision 1"),
						CreatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-12T22:51:36.47Z"); return t }()),
						IsCurrent:       to.Ptr(true),
						Status:          to.Ptr(armapimanagement.PortalRevisionStatusCompleted),
						UpdatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-12T22:52:00.097Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PortalRevisionCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PortalRevisionCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListPortalRevisions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPortalRevision_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadPortalRevision.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadPortalRevision"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewPortalRevisionClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"20201112101010",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadPortalRevision.json: %v", err)
	}
}

func TestPortalRevision_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetPortalRevision.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetPortalRevision"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewPortalRevisionClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"20201112101010",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetPortalRevision.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PortalRevisionContract{
			Name: to.Ptr("20201112101010"),
			Type: to.Ptr("Microsoft.ApiManagement/service/portalRevisions"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/portalRevisions/20201112101010"),
			Properties: &armapimanagement.PortalRevisionContractProperties{
				Description:     to.Ptr("portal revision 1"),
				CreatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-12T22:51:36.47Z"); return t }()),
				IsCurrent:       to.Ptr(true),
				Status:          to.Ptr(armapimanagement.PortalRevisionStatusCompleted),
				UpdatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-12T22:52:00.097Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PortalRevisionContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PortalRevisionContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetPortalRevision.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPortalRevision_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreatePortalRevision.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreatePortalRevision"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewPortalRevisionClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"20201112101010",
		armapimanagement.PortalRevisionContract{
			Properties: &armapimanagement.PortalRevisionContractProperties{
				Description: to.Ptr("portal revision 1"),
				IsCurrent:   to.Ptr(true),
			},
		},
		&armapimanagement.PortalRevisionClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreatePortalRevision.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreatePortalRevision.json: %v", err)
	}
}

func TestPortalRevision_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdatePortalRevision.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdatePortalRevision"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewPortalRevisionClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"apimService1",
		"20201112101010",
		"*",
		armapimanagement.PortalRevisionContract{
			Properties: &armapimanagement.PortalRevisionContractProperties{
				Description: to.Ptr("portal revision update"),
				IsCurrent:   to.Ptr(true),
			},
		},
		&armapimanagement.PortalRevisionClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdatePortalRevision.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdatePortalRevision.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PortalRevisionContract{
			Name: to.Ptr("20201112101010"),
			Type: to.Ptr("Microsoft.ApiManagement/service/portalRevisions"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/namedValues/testprop2"),
			Properties: &armapimanagement.PortalRevisionContractProperties{
				Description:     to.Ptr("portal revision update"),
				CreatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-13T22:47:13.397Z"); return t }()),
				IsCurrent:       to.Ptr(true),
				Status:          to.Ptr(armapimanagement.PortalRevisionStatusCompleted),
				UpdatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-13T23:29:25.34Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PortalRevisionContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PortalRevisionContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdatePortalRevision.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPortalSettings_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListPortalSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListPortalSettings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewPortalSettingsClient("subid", cred, &options)
	res, err := client.ListByService(ctx,
		"rg1",
		"apimService1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListPortalSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PortalSettingsCollection{
			Count: to.Ptr[int64](3),
			Value: []*armapimanagement.PortalSettingsContract{
				{
					Name: to.Ptr("delegation"),
					Type: to.Ptr("Microsoft.ApiManagement/service/portalsettings"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/portalsettings/delegation"),
					Properties: &armapimanagement.PortalSettingsContractProperties{
						Enabled: to.Ptr(false),
						Subscriptions: &armapimanagement.SubscriptionsDelegationSettingsProperties{
							Enabled: to.Ptr(false),
						},
						UserRegistration: &armapimanagement.RegistrationDelegationSettingsProperties{
							Enabled: to.Ptr(false),
						},
					},
				},
				{
					Name: to.Ptr("signin"),
					Type: to.Ptr("Microsoft.ApiManagement/service/portalsettings"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/portalsettings/signin"),
					Properties: &armapimanagement.PortalSettingsContractProperties{
						Enabled: to.Ptr(false),
					},
				},
				{
					Name: to.Ptr("signup"),
					Type: to.Ptr("Microsoft.ApiManagement/service/portalsettings"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/portalsettings/signup"),
					Properties: &armapimanagement.PortalSettingsContractProperties{
						Enabled: to.Ptr(true),
						TermsOfService: &armapimanagement.TermsOfServiceProperties{
							ConsentRequired: to.Ptr(false),
							Enabled:         to.Ptr(false),
							Text:            to.Ptr("Terms of service"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PortalSettingsCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PortalSettingsCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListPortalSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSignInSettings_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadSignInSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadSignInSettings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewSignInSettingsClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadSignInSettings.json: %v", err)
	}
}

func TestSignInSettings_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsGetSignIn.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementPortalSettingsGetSignIn"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewSignInSettingsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsGetSignIn.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PortalSigninSettings{
			Name: to.Ptr("signin"),
			Type: to.Ptr("Microsoft.ApiManagement/service/portalsettings"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/portalsettings/signin"),
			Properties: &armapimanagement.PortalSigninSettingProperties{
				Enabled: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PortalSigninSettings) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PortalSigninSettings)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsGetSignIn.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSignInSettings_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsUpdateSignIn.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementPortalSettingsUpdateSignIn"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewSignInSettingsClient("subid", cred, &options)
	_, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"*",
		armapimanagement.PortalSigninSettings{
			Properties: &armapimanagement.PortalSigninSettingProperties{
				Enabled: to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsUpdateSignIn.json: %v", err)
	}
}

func TestSignInSettings_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsPutSignIn.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementPortalSettingsUpdateSignIn"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewSignInSettingsClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		armapimanagement.PortalSigninSettings{
			Properties: &armapimanagement.PortalSigninSettingProperties{
				Enabled: to.Ptr(true),
			},
		},
		&armapimanagement.SignInSettingsClientCreateOrUpdateOptions{IfMatch: to.Ptr("*")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsPutSignIn.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PortalSigninSettings{
			Name: to.Ptr("signin"),
			Type: to.Ptr("Microsoft.ApiManagement/service/portalsettings"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/portalsettings/signin"),
			Properties: &armapimanagement.PortalSigninSettingProperties{
				Enabled: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PortalSigninSettings) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PortalSigninSettings)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsPutSignIn.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSignUpSettings_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadSignUpSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadSignUpSettings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewSignUpSettingsClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadSignUpSettings.json: %v", err)
	}
}

func TestSignUpSettings_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsGetSignUp.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementPortalSettingsGetSignUp"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewSignUpSettingsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsGetSignUp.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PortalSignupSettings{
			Name: to.Ptr("signup"),
			Type: to.Ptr("Microsoft.ApiManagement/service/portalsettings"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/portalsettings/signup"),
			Properties: &armapimanagement.PortalSignupSettingsProperties{
				Enabled: to.Ptr(true),
				TermsOfService: &armapimanagement.TermsOfServiceProperties{
					ConsentRequired: to.Ptr(true),
					Enabled:         to.Ptr(true),
					Text:            to.Ptr("Terms of service text."),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PortalSignupSettings) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PortalSignupSettings)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsGetSignUp.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSignUpSettings_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsUpdateSignUp.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementPortalSettingsUpdateSignUp"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewSignUpSettingsClient("subid", cred, &options)
	_, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"*",
		armapimanagement.PortalSignupSettings{
			Properties: &armapimanagement.PortalSignupSettingsProperties{
				Enabled: to.Ptr(true),
				TermsOfService: &armapimanagement.TermsOfServiceProperties{
					ConsentRequired: to.Ptr(true),
					Enabled:         to.Ptr(true),
					Text:            to.Ptr("Terms of service text."),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsUpdateSignUp.json: %v", err)
	}
}

func TestSignUpSettings_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsPutSignUp.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementPortalSettingsUpdateSignUp"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewSignUpSettingsClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		armapimanagement.PortalSignupSettings{
			Properties: &armapimanagement.PortalSignupSettingsProperties{
				Enabled: to.Ptr(true),
				TermsOfService: &armapimanagement.TermsOfServiceProperties{
					ConsentRequired: to.Ptr(true),
					Enabled:         to.Ptr(true),
					Text:            to.Ptr("Terms of service text."),
				},
			},
		},
		&armapimanagement.SignUpSettingsClientCreateOrUpdateOptions{IfMatch: to.Ptr("*")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsPutSignUp.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PortalSignupSettings{
			Name: to.Ptr("signup"),
			Type: to.Ptr("Microsoft.ApiManagement/service/portalsettings"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/portalsettings/signup"),
			Properties: &armapimanagement.PortalSignupSettingsProperties{
				Enabled: to.Ptr(true),
				TermsOfService: &armapimanagement.TermsOfServiceProperties{
					ConsentRequired: to.Ptr(true),
					Enabled:         to.Ptr(true),
					Text:            to.Ptr("Terms of service text."),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PortalSignupSettings) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PortalSignupSettings)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsPutSignUp.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDelegationSettings_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadDelegationSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadDelegationSettings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewDelegationSettingsClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadDelegationSettings.json: %v", err)
	}
}

func TestDelegationSettings_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsGetDelegation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementPortalSettingsGetDelegation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewDelegationSettingsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsGetDelegation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PortalDelegationSettings{
			Name: to.Ptr("delegation"),
			Type: to.Ptr("Microsoft.ApiManagement/service/portalsettings"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/portalsettings/delegation"),
			Properties: &armapimanagement.PortalDelegationSettingsProperties{
				Subscriptions: &armapimanagement.SubscriptionsDelegationSettingsProperties{
					Enabled: to.Ptr(true),
				},
				URL: to.Ptr("http://contoso.com/delegation"),
				UserRegistration: &armapimanagement.RegistrationDelegationSettingsProperties{
					Enabled: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PortalDelegationSettings) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PortalDelegationSettings)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsGetDelegation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDelegationSettings_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsUpdateDelegation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementPortalSettingsUpdateDelegation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewDelegationSettingsClient("subid", cred, &options)
	_, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"*",
		armapimanagement.PortalDelegationSettings{
			Properties: &armapimanagement.PortalDelegationSettingsProperties{
				Subscriptions: &armapimanagement.SubscriptionsDelegationSettingsProperties{
					Enabled: to.Ptr(true),
				},
				URL: to.Ptr("http://contoso.com/delegation"),
				UserRegistration: &armapimanagement.RegistrationDelegationSettingsProperties{
					Enabled: to.Ptr(true),
				},
				ValidationKey: to.Ptr("<validationKey>"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsUpdateDelegation.json: %v", err)
	}
}

func TestDelegationSettings_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsPutDelegation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementPortalSettingsUpdateDelegation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewDelegationSettingsClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		armapimanagement.PortalDelegationSettings{
			Properties: &armapimanagement.PortalDelegationSettingsProperties{
				Subscriptions: &armapimanagement.SubscriptionsDelegationSettingsProperties{
					Enabled: to.Ptr(true),
				},
				URL: to.Ptr("http://contoso.com/delegation"),
				UserRegistration: &armapimanagement.RegistrationDelegationSettingsProperties{
					Enabled: to.Ptr(true),
				},
				ValidationKey: to.Ptr("<validationKey>"),
			},
		},
		&armapimanagement.DelegationSettingsClientCreateOrUpdateOptions{IfMatch: to.Ptr("*")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsPutDelegation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PortalDelegationSettings{
			Name: to.Ptr("delegation"),
			Type: to.Ptr("Microsoft.ApiManagement/service/portalsettings"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/portalsettings/delegation"),
			Properties: &armapimanagement.PortalDelegationSettingsProperties{
				Subscriptions: &armapimanagement.SubscriptionsDelegationSettingsProperties{
					Enabled: to.Ptr(true),
				},
				URL: to.Ptr("http://contoso.com/delegation"),
				UserRegistration: &armapimanagement.RegistrationDelegationSettingsProperties{
					Enabled: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PortalDelegationSettings) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PortalDelegationSettings)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementPortalSettingsPutDelegation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDelegationSettings_ListSecrets(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListSecretsPortalSettingsValidationKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListSecretsPortalSettings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewDelegationSettingsClient("subid", cred, &options)
	res, err := client.ListSecrets(ctx,
		"rg1",
		"apimService1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListSecretsPortalSettingsValidationKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PortalSettingValidationKeyContract{
			ValidationKey: to.Ptr("<validationKey>"),
		}
		if !reflect.DeepEqual(exampleRes, res.PortalSettingValidationKeyContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PortalSettingValidationKeyContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListSecretsPortalSettingsValidationKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnection_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListPrivateEndpointConnections.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListPrivateEndpointConnections"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewPrivateEndpointConnectionClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListPrivateEndpointConnections.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.PrivateEndpointConnectionListResult{
			Value: []*armapimanagement.PrivateEndpointConnection{
				{
					Name: to.Ptr("privateEndpointProxyName"),
					Type: to.Ptr("Microsoft.ApiManagement/service/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/privateEndpointConnections/connectionName"),
					Properties: &armapimanagement.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armapimanagement.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/privateEndpointName"),
						},
						PrivateLinkServiceConnectionState: &armapimanagement.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Please approve my request, thanks"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armapimanagement.PrivateEndpointServiceConnectionStatusPending),
						},
						ProvisioningState: to.Ptr(armapimanagement.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("privateEndpointProxyName2"),
					Type: to.Ptr("Microsoft.ApiManagement/service/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/privateEndpointConnections/privateEndpointProxyName2"),
					Properties: &armapimanagement.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armapimanagement.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/privateEndpointName2"),
						},
						PrivateLinkServiceConnectionState: &armapimanagement.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Please approve my request, thanks"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armapimanagement.PrivateEndpointServiceConnectionStatusPending),
						},
						ProvisioningState: to.Ptr(armapimanagement.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListPrivateEndpointConnections.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnection_GetByName(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetPrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewPrivateEndpointConnectionClient("subid", cred, &options)
	res, err := client.GetByName(ctx,
		"rg1",
		"apimService1",
		"privateEndpointConnectionName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PrivateEndpointConnection{
			Name: to.Ptr("privateEndpointProxyName"),
			Type: to.Ptr("Microsoft.ApiManagement/service/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/privateEndpointConnections/privateEndpointConnectionName"),
			Properties: &armapimanagement.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armapimanagement.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/privateEndpointName"),
				},
				PrivateLinkServiceConnectionState: &armapimanagement.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Please approve my request, thanks"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armapimanagement.PrivateEndpointServiceConnectionStatusPending),
				},
				ProvisioningState: to.Ptr(armapimanagement.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnection_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementApproveOrRejectPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementApproveOrRejectPrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewPrivateEndpointConnectionClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"privateEndpointConnectionName",
		armapimanagement.PrivateEndpointConnectionRequest{
			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/privateEndpointConnections/connectionName"),
			Properties: &armapimanagement.PrivateEndpointConnectionRequestProperties{
				PrivateLinkServiceConnectionState: &armapimanagement.PrivateLinkServiceConnectionState{
					Description: to.Ptr("The Private Endpoint Connection is approved."),
					Status:      to.Ptr(armapimanagement.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		&armapimanagement.PrivateEndpointConnectionClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementApproveOrRejectPrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementApproveOrRejectPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PrivateEndpointConnection{
			Name: to.Ptr("privateEndpointConnectionName"),
			Type: to.Ptr("Microsoft.ApiManagement/service/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/privateEndpointConnections/privateEndpointConnectionName"),
			Properties: &armapimanagement.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armapimanagement.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/privateEndpointName"),
				},
				PrivateLinkServiceConnectionState: &armapimanagement.PrivateLinkServiceConnectionState{
					Description: to.Ptr("The request has been approved."),
					Status:      to.Ptr(armapimanagement.PrivateEndpointServiceConnectionStatus("Succeeded")),
				},
				ProvisioningState: to.Ptr(armapimanagement.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementApproveOrRejectPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnection_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeletePrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewPrivateEndpointConnectionClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"apimService1",
		"privateEndpointConnectionName",
		&armapimanagement.PrivateEndpointConnectionClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeletePrivateEndpointConnection.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeletePrivateEndpointConnection.json: %v", err)
	}
}

func TestPrivateEndpointConnection_ListPrivateLinkResources(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListPrivateLinkGroupResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListPrivateLinkGroupResources"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewPrivateEndpointConnectionClient("subid", cred, &options)
	res, err := client.ListPrivateLinkResources(ctx,
		"rg1",
		"apimService1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListPrivateLinkGroupResources.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PrivateLinkResourceListResult{
			Value: []*armapimanagement.PrivateLinkResource{
				{
					Name: to.Ptr("Gateway"),
					Type: to.Ptr("Microsoft.ApiManagement/service/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/privateLinkResources/Gateway"),
					Properties: &armapimanagement.PrivateLinkResourceProperties{
						GroupID: to.Ptr("Gateway"),
						RequiredMembers: []*string{
							to.Ptr("Gateway_west_us")},
						RequiredZoneNames: []*string{
							to.Ptr("privateLink.azure.api.net")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListPrivateLinkGroupResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnection_GetPrivateLinkResource(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetPrivateLinkGroupResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetPrivateLinkGroupResource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewPrivateEndpointConnectionClient("subid", cred, &options)
	res, err := client.GetPrivateLinkResource(ctx,
		"rg1",
		"apimService1",
		"privateLinkSubResourceName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetPrivateLinkGroupResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PrivateLinkResource{
			Name: to.Ptr("Gateway"),
			Type: to.Ptr("Microsoft.ApiManagement/service/privateLinkResources"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/privateLinkResources/privateLinkSubResourceName"),
			Properties: &armapimanagement.PrivateLinkResourceProperties{
				GroupID: to.Ptr("Gateway"),
				RequiredMembers: []*string{
					to.Ptr("Gateway_west_us")},
				RequiredZoneNames: []*string{
					to.Ptr("privateLink.azure.api.net")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetPrivateLinkGroupResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProduct_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListProducts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListProducts"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewProductClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.ProductClientListByServiceOptions{Filter: nil,
			Top:          nil,
			Skip:         nil,
			ExpandGroups: nil,
			Tags:         nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListProducts.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.ProductCollection{
			Count: to.Ptr[int64](3),
			Value: []*armapimanagement.ProductContract{
				{
					Name: to.Ptr("kjoshiarmtemplateCert1"),
					Type: to.Ptr("Microsoft.ApiManagement/service/products"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/kjoshiarmtemplateCert1"),
					Properties: &armapimanagement.ProductContractProperties{
						Description:          to.Ptr("Development Product"),
						State:                to.Ptr(armapimanagement.ProductStatePublished),
						SubscriptionRequired: to.Ptr(false),
						DisplayName:          to.Ptr("Dev"),
					},
				},
				{
					Name: to.Ptr("starter"),
					Type: to.Ptr("Microsoft.ApiManagement/service/products"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/starter"),
					Properties: &armapimanagement.ProductContractProperties{
						Description:          to.Ptr("Subscribers will be able to run 5 calls/minute up to a maximum of 100 calls/week."),
						ApprovalRequired:     to.Ptr(false),
						State:                to.Ptr(armapimanagement.ProductStatePublished),
						SubscriptionRequired: to.Ptr(true),
						SubscriptionsLimit:   to.Ptr[int32](1),
						Terms:                to.Ptr(""),
						DisplayName:          to.Ptr("Starter"),
					},
				},
				{
					Name: to.Ptr("unlimited"),
					Type: to.Ptr("Microsoft.ApiManagement/service/products"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/unlimited"),
					Properties: &armapimanagement.ProductContractProperties{
						Description:          to.Ptr("Subscribers have completely unlimited access to the API. Administrator approval is required."),
						ApprovalRequired:     to.Ptr(true),
						State:                to.Ptr(armapimanagement.ProductStatePublished),
						SubscriptionRequired: to.Ptr(true),
						SubscriptionsLimit:   to.Ptr[int32](1),
						DisplayName:          to.Ptr("Unlimited"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProductCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProductCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListProducts.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProduct_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadProduct.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadProduct"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewProductClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"unlimited",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadProduct.json: %v", err)
	}
}

func TestProduct_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetProduct.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetProduct"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewProductClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"unlimited",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetProduct.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ProductContract{
			Name: to.Ptr("unlimited"),
			Type: to.Ptr("Microsoft.ApiManagement/service/products"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/unlimited"),
			Properties: &armapimanagement.ProductContractProperties{
				Description:          to.Ptr("Subscribers have completely unlimited access to the API. Administrator approval is required."),
				ApprovalRequired:     to.Ptr(true),
				State:                to.Ptr(armapimanagement.ProductStatePublished),
				SubscriptionRequired: to.Ptr(true),
				SubscriptionsLimit:   to.Ptr[int32](1),
				DisplayName:          to.Ptr("Unlimited"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProductContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProductContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetProduct.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProduct_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateProduct.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateProduct"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewProductClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"testproduct",
		armapimanagement.ProductContract{
			Properties: &armapimanagement.ProductContractProperties{
				DisplayName: to.Ptr("Test Template ProductName 4"),
			},
		},
		&armapimanagement.ProductClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateProduct.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ProductContract{
			Name: to.Ptr("testproduct"),
			Type: to.Ptr("Microsoft.ApiManagement/service/products"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/testproduct"),
			Properties: &armapimanagement.ProductContractProperties{
				ApprovalRequired:     to.Ptr(false),
				State:                to.Ptr(armapimanagement.ProductStateNotPublished),
				SubscriptionRequired: to.Ptr(true),
				DisplayName:          to.Ptr("Test Template ProductName 4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProductContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProductContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateProduct.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProduct_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateProduct.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateProduct"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewProductClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"testproduct",
		"*",
		armapimanagement.ProductUpdateParameters{
			Properties: &armapimanagement.ProductUpdateProperties{
				DisplayName: to.Ptr("Test Template ProductName 4"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateProduct.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.ProductContract{
			Name: to.Ptr("testproduct"),
			Type: to.Ptr("Microsoft.ApiManagement/service/products"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/testproduct"),
			Properties: &armapimanagement.ProductContractProperties{
				Description:          to.Ptr("Subscribers have completely unlimited access to the API. Administrator approval is required."),
				ApprovalRequired:     to.Ptr(true),
				State:                to.Ptr(armapimanagement.ProductStatePublished),
				SubscriptionRequired: to.Ptr(true),
				SubscriptionsLimit:   to.Ptr[int32](1),
				DisplayName:          to.Ptr("Test Template ProductName 4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProductContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProductContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateProduct.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProduct_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteProduct.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteProduct"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewProductClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"testproduct",
		"*",
		&armapimanagement.ProductClientDeleteOptions{DeleteSubscriptions: to.Ptr(true)})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteProduct.json: %v", err)
	}
}

func TestProduct_ListByTags(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListProductsByTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListProductsByTags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewProductClient("subid", cred, &options)
	pager := client.ListByTags("rg1",
		"apimService1",
		&armapimanagement.ProductClientListByTagsOptions{Filter: nil,
			Top:                      nil,
			Skip:                     nil,
			IncludeNotTaggedProducts: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListProductsByTags.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.TagResourceCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.TagResourceContract{
				{
					Product: &armapimanagement.ProductTagResourceContractProperties{
						Description:          to.Ptr("Subscribers will be able to run 5 calls/minute up to a maximum of 100 calls/week."),
						ApprovalRequired:     to.Ptr(false),
						State:                to.Ptr(armapimanagement.ProductStatePublished),
						SubscriptionRequired: to.Ptr(true),
						SubscriptionsLimit:   to.Ptr[int32](1),
						Terms:                to.Ptr(""),
						Name:                 to.Ptr("Starter"),
						ID:                   to.Ptr("/products/starter"),
					},
					Tag: &armapimanagement.TagResourceContractProperties{
						Name: to.Ptr("awesomeTag"),
						ID:   to.Ptr("/tags/apitag123"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TagResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TagResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListProductsByTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProductAPI_ListByProduct(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListProductApis.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListProductApis"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewProductAPIClient("subid", cred, &options)
	pager := client.ListByProduct("rg1",
		"apimService1",
		"5768181ea40f7eb6c49f6ac7",
		&armapimanagement.ProductAPIClientListByProductOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListProductApis.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.APICollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.APIContract{
				{
					Name: to.Ptr("57681820a40f7eb6c49f6aca"),
					Type: to.Ptr("Microsoft.ApiManagement/service/products/apis"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/5768181ea40f7eb6c49f6ac7/apis/57681820a40f7eb6c49f6aca"),
					Properties: &armapimanagement.APIContractProperties{
						Description: to.Ptr("description_57681820a40f7eb6c49f6acc"),
						APIRevision: to.Ptr("1"),
						IsCurrent:   to.Ptr(true),
						Path:        to.Ptr("suffix_57681820a40f7eb6c49f6ace"),
						DisplayName: to.Ptr("api_57681820a40f7eb6c49f6acb"),
						Protocols: []*armapimanagement.Protocol{
							to.Ptr(armapimanagement.ProtocolHTTPS)},
						ServiceURL: to.Ptr("http://contoso/57681820a40f7eb6c49f6acd"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.APICollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.APICollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListProductApis.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProductAPI_CheckEntityExists(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadProductApi.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadProductApi"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewProductAPIClient("subid", cred, &options)
	_, err := client.CheckEntityExists(ctx,
		"rg1",
		"apimService1",
		"5931a75ae4bbd512a88c680b",
		"59306a29e4bbd510dc24e5f9",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadProductApi.json: %v", err)
	}
}

func TestProductAPI_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateProductApi.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateProductApi"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewProductAPIClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"testproduct",
		"echo-api",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateProductApi.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.APIContract{
			Name: to.Ptr("5931a75ae4bbd512a88c680b"),
			Type: to.Ptr("Microsoft.ApiManagement/service/apis"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/5931a75ae4bbd512a88c680b"),
			Properties: &armapimanagement.APIContractProperties{
				APIRevision: to.Ptr("1"),
				IsCurrent:   to.Ptr(true),
				SubscriptionKeyParameterNames: &armapimanagement.SubscriptionKeyParameterNamesContract{
					Header: to.Ptr("Ocp-Apim-Subscription-Key"),
					Query:  to.Ptr("subscription-key"),
				},
				Path:        to.Ptr(""),
				DisplayName: to.Ptr("EchoApi"),
				Protocols: []*armapimanagement.Protocol{
					to.Ptr(armapimanagement.ProtocolHTTP),
					to.Ptr(armapimanagement.ProtocolHTTPS)},
				ServiceURL: to.Ptr("https://contoso.com/apis/echo"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateProductApi.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProductAPI_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteProductApi.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteProductApi"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewProductAPIClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"testproduct",
		"echo-api",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteProductApi.json: %v", err)
	}
}

func TestProductGroup_ListByProduct(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListProductGroups.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListProductGroups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewProductGroupClient("subid", cred, &options)
	pager := client.ListByProduct("rg1",
		"apimService1",
		"5600b57e7e8880006a060002",
		&armapimanagement.ProductGroupClientListByProductOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListProductGroups.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.GroupCollection{
			Count: to.Ptr[int64](3),
			Value: []*armapimanagement.GroupContract{
				{
					Name: to.Ptr("5600b57e7e8880006a020001"),
					Type: to.Ptr("Microsoft.ApiManagement/service/products/groups"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/5600b57e7e8880006a060002/groups/5600b57e7e8880006a020001"),
					Properties: &armapimanagement.GroupContractProperties{
						Type:        to.Ptr(armapimanagement.GroupTypeSystem),
						Description: to.Ptr("Administrators is a built-in group. Its membership is managed by the system. Microsoft Azure subscription administrators fall into this group."),
						BuiltIn:     to.Ptr(true),
						DisplayName: to.Ptr("Administrators"),
					},
				},
				{
					Name: to.Ptr("5600b57e7e8880006a020002"),
					Type: to.Ptr("Microsoft.ApiManagement/service/products/groups"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/5600b57e7e8880006a060002/groups/5600b57e7e8880006a020002"),
					Properties: &armapimanagement.GroupContractProperties{
						Type:        to.Ptr(armapimanagement.GroupTypeSystem),
						Description: to.Ptr("Developers is a built-in group. Its membership is managed by the system. Signed-in users fall into this group."),
						BuiltIn:     to.Ptr(true),
						DisplayName: to.Ptr("Developers"),
					},
				},
				{
					Name: to.Ptr("5600b57e7e8880006a020003"),
					Type: to.Ptr("Microsoft.ApiManagement/service/products/groups"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/5600b57e7e8880006a060002/groups/5600b57e7e8880006a020003"),
					Properties: &armapimanagement.GroupContractProperties{
						Type:        to.Ptr(armapimanagement.GroupTypeSystem),
						Description: to.Ptr("Guests is a built-in group. Its membership is managed by the system. Unauthenticated users visiting the developer portal fall into this group."),
						BuiltIn:     to.Ptr(true),
						DisplayName: to.Ptr("Guests"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GroupCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GroupCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListProductGroups.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProductGroup_CheckEntityExists(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadProductGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadProductGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewProductGroupClient("subid", cred, &options)
	_, err := client.CheckEntityExists(ctx,
		"rg1",
		"apimService1",
		"5931a75ae4bbd512a88c680b",
		"59306a29e4bbd510dc24e5f9",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadProductGroup.json: %v", err)
	}
}

func TestProductGroup_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateProductGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateProductGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewProductGroupClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"testproduct",
		"templateGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateProductGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.GroupContract{
			Name: to.Ptr("templateGroup"),
			Type: to.Ptr("Microsoft.ApiManagement/service/products/groups"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/groups/templateGroup"),
			Properties: &armapimanagement.GroupContractProperties{
				Type:        to.Ptr(armapimanagement.GroupTypeCustom),
				Description: to.Ptr("group created via Template"),
				BuiltIn:     to.Ptr(false),
				DisplayName: to.Ptr("Template Group"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GroupContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GroupContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateProductGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProductGroup_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteProductGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteProductGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewProductGroupClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"testproduct",
		"templateGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteProductGroup.json: %v", err)
	}
}

func TestProductSubscriptions_List(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListProductSubscriptions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListProductSubscriptions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewProductSubscriptionsClient("subid", cred, &options)
	pager := client.List("rg1",
		"apimService1",
		"5600b57e7e8880006a060002",
		&armapimanagement.ProductSubscriptionsClientListOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListProductSubscriptions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.SubscriptionCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.SubscriptionContract{
				{
					Name: to.Ptr("5600b57e7e8880006a070002"),
					Type: to.Ptr("Microsoft.ApiManagement/service/products/subscriptions"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/5600b57e7e8880006a060002/subscriptions/5600b57e7e8880006a070002"),
					Properties: &armapimanagement.SubscriptionContractProperties{
						CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-09-22T01:57:18.723Z"); return t }()),
						OwnerID:     to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/1"),
						Scope:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/5600b57e7e8880006a060002"),
						State:       to.Ptr(armapimanagement.SubscriptionStateActive),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SubscriptionCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SubscriptionCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListProductSubscriptions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProductPolicy_ListByProduct(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListProductPolicies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListProductPolicies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewProductPolicyClient("subid", cred, &options)
	res, err := client.ListByProduct(ctx,
		"rg1",
		"apimService1",
		"armTemplateProduct4",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListProductPolicies.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PolicyCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.PolicyContract{
				{
					Name: to.Ptr("policy"),
					Type: to.Ptr("Microsoft.ApiManagement/service/products/policies"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/armTemplateProduct4/policies/policy"),
					Properties: &armapimanagement.PolicyContractProperties{
						Value: to.Ptr("<policies>\r\n  <inbound>\r\n    <base />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PolicyCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PolicyCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListProductPolicies.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProductPolicy_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadProductPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadProductPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewProductPolicyClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"unlimited",
		armapimanagement.PolicyIDNamePolicy,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadProductPolicy.json: %v", err)
	}
}

func TestProductPolicy_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetProductPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetProductPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewProductPolicyClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"kjoshiarmTemplateProduct4",
		armapimanagement.PolicyIDNamePolicy,
		&armapimanagement.ProductPolicyClientGetOptions{Format: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetProductPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PolicyContract{
			Name: to.Ptr("policy"),
			Type: to.Ptr("Microsoft.ApiManagement/service/products/policies"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/kjoshiarmTemplateProduct4/policies/policy"),
			Properties: &armapimanagement.PolicyContractProperties{
				Value: to.Ptr("<policies>\r\n  <inbound>\r\n    <base />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PolicyContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PolicyContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetProductPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProductPolicy_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateProductPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateProductPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewProductPolicyClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"5702e97e5157a50f48dce801",
		armapimanagement.PolicyIDNamePolicy,
		armapimanagement.PolicyContract{
			Properties: &armapimanagement.PolicyContractProperties{
				Format: to.Ptr(armapimanagement.PolicyContentFormatXML),
				Value:  to.Ptr("<policies>\r\n  <inbound>\r\n    <rate-limit calls=\"{{call-count}}\" renewal-period=\"15\"></rate-limit>\r\n    <log-to-eventhub logger-id=\"16\">\r\n                      @( string.Join(\",\", DateTime.UtcNow, context.Deployment.ServiceName, context.RequestId, context.Request.IpAddress, context.Operation.Name) ) \r\n                  </log-to-eventhub>\r\n    <quota-by-key calls=\"40\" counter-key=\"cc\" renewal-period=\"3600\" increment-count=\"@(context.Request.Method == &quot;POST&quot; ? 1:2)\" />\r\n    <base />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n</policies>"),
			},
		},
		&armapimanagement.ProductPolicyClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateProductPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.PolicyContract{
			Name: to.Ptr("policy"),
			Type: to.Ptr("Microsoft.ApiManagement/service/products/policies"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/5702e97e5157a50f48dce801/policies/policy"),
			Properties: &armapimanagement.PolicyContractProperties{
				Value: to.Ptr("<policies>\r\n  <inbound>\r\n    <rate-limit calls=\"{{58c884fed8d14f127cec38f0}}\" renewal-period=\"15\" version=\"2\"></rate-limit>\r\n    <log-to-eventhub logger-id=\"16\">\r\n                      @( string.Join(\",\", DateTime.UtcNow, context.Deployment.ServiceName, context.RequestId, context.Request.IpAddress, context.Operation.Name) ) \r\n                  </log-to-eventhub>\r\n    <quota-by-key calls=\"40\" counter-key=\"cc\" renewal-period=\"3600\" increment-count=\"@(context.Request.Method == &quot;POST&quot; ? 1:2)\" />\r\n    <base />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n</policies>"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PolicyContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PolicyContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateProductPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProductPolicy_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteProductPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteProductPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewProductPolicyClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"testproduct",
		armapimanagement.PolicyIDNamePolicy,
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteProductPolicy.json: %v", err)
	}
}

func TestQuotaByCounterKeys_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetQuotaCounterKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetQuotaCounterKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewQuotaByCounterKeysClient("subid", cred, &options)
	res, err := client.ListByService(ctx,
		"rg1",
		"apimService1",
		"ba",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetQuotaCounterKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.QuotaCounterCollection{
			Value: []*armapimanagement.QuotaCounterContract{
				{
					CounterKey:      to.Ptr("ba"),
					PeriodEndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-08T16:54:40Z"); return t }()),
					PeriodKey:       to.Ptr("0_P3Y6M4DT12H30M5S"),
					PeriodStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2014-08-04T04:24:35Z"); return t }()),
					Value: &armapimanagement.QuotaCounterValueContractProperties{
						CallsCount:    to.Ptr[int32](5),
						KbTransferred: to.Ptr[float64](2.5830078125),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.QuotaCounterCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QuotaCounterCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetQuotaCounterKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQuotaByCounterKeys_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateQuotaCounterKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateQuotaCounterKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewQuotaByCounterKeysClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"ba",
		armapimanagement.QuotaCounterValueUpdateContract{
			Properties: &armapimanagement.QuotaCounterValueContractProperties{
				CallsCount:    to.Ptr[int32](0),
				KbTransferred: to.Ptr[float64](2.5630078125),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateQuotaCounterKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.QuotaCounterCollection{
			Value: []*armapimanagement.QuotaCounterContract{
				{
					CounterKey:      to.Ptr("ba"),
					PeriodEndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-08T16:54:40Z"); return t }()),
					PeriodKey:       to.Ptr("0_P3Y6M4DT12H30M5S"),
					PeriodStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2014-08-04T04:24:35Z"); return t }()),
					Value: &armapimanagement.QuotaCounterValueContractProperties{
						CallsCount:    to.Ptr[int32](5),
						KbTransferred: to.Ptr[float64](2.5830078125),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.QuotaCounterCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QuotaCounterCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateQuotaCounterKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQuotaByPeriodKeys_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetQuotaCounterKeysByQuotaPeriod.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetQuotaCounterKeysByQuotaPeriod"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewQuotaByPeriodKeysClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"ba",
		"0_P3Y6M4DT12H30M5S",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetQuotaCounterKeysByQuotaPeriod.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.QuotaCounterContract{
			CounterKey:      to.Ptr("ba"),
			PeriodEndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-08T16:54:40Z"); return t }()),
			PeriodKey:       to.Ptr("0_P3Y6M4DT12H30M5S"),
			PeriodStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2014-08-04T04:24:35Z"); return t }()),
			Value: &armapimanagement.QuotaCounterValueContractProperties{
				CallsCount:    to.Ptr[int32](0),
				KbTransferred: to.Ptr[float64](2.5625),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QuotaCounterContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QuotaCounterContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetQuotaCounterKeysByQuotaPeriod.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQuotaByPeriodKeys_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateQuotaCounterKeyByQuotaPeriod.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateQuotaCounterKeyByQuotaPeriod"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewQuotaByPeriodKeysClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"ba",
		"0_P3Y6M4DT12H30M5S",
		armapimanagement.QuotaCounterValueUpdateContract{
			Properties: &armapimanagement.QuotaCounterValueContractProperties{
				CallsCount:    to.Ptr[int32](0),
				KbTransferred: to.Ptr[float64](0),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateQuotaCounterKeyByQuotaPeriod.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.QuotaCounterContract{
			CounterKey:      to.Ptr("ba"),
			PeriodEndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-08T16:54:40Z"); return t }()),
			PeriodKey:       to.Ptr("0_P3Y6M4DT12H30M5S"),
			PeriodStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2014-08-04T04:24:35Z"); return t }()),
			Value: &armapimanagement.QuotaCounterValueContractProperties{
				CallsCount:    to.Ptr[int32](0),
				KbTransferred: to.Ptr[float64](2.5625),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QuotaCounterContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QuotaCounterContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateQuotaCounterKeyByQuotaPeriod.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegion_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListRegions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListRegions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewRegionClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListRegions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.RegionListResult{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.RegionContract{
				{
					Name:           to.Ptr("West US"),
					IsDeleted:      to.Ptr(false),
					IsMasterRegion: to.Ptr(true),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RegionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RegionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListRegions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReports_ListByUser(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetReportsByUser.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetReportsByUser"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewReportsClient("subid", cred, &options)
	pager := client.ListByUser("rg1",
		"apimService1",
		"timestamp ge datetime'2017-06-01T00:00:00' and timestamp le datetime'2017-06-04T00:00:00'",
		&armapimanagement.ReportsClientListByUserOptions{Top: nil,
			Skip:    nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetReportsByUser.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.ReportCollection{
			Count: to.Ptr[int64](3),
			Value: []*armapimanagement.ReportRecordContract{
				{
					Name:             to.Ptr("Administrator"),
					APITimeAvg:       to.Ptr[float64](1015.7607923076923),
					APITimeMax:       to.Ptr[float64](1819.2173),
					APITimeMin:       to.Ptr[float64](330.3206),
					Bandwidth:        to.Ptr[int64](11019),
					CacheHitCount:    to.Ptr[int32](0),
					CacheMissCount:   to.Ptr[int32](0),
					CallCountBlocked: to.Ptr[int32](1),
					CallCountFailed:  to.Ptr[int32](0),
					CallCountOther:   to.Ptr[int32](0),
					CallCountSuccess: to.Ptr[int32](13),
					CallCountTotal:   to.Ptr[int32](14),
					ServiceTimeAvg:   to.Ptr[float64](957.094776923077),
					ServiceTimeMax:   to.Ptr[float64](1697.3612),
					ServiceTimeMin:   to.Ptr[float64](215.24),
					UserID:           to.Ptr("/users/1"),
				},
				{
					Name:             to.Ptr("Samir Solanki"),
					APITimeAvg:       to.Ptr[float64](0),
					APITimeMax:       to.Ptr[float64](0),
					APITimeMin:       to.Ptr[float64](0),
					Bandwidth:        to.Ptr[int64](0),
					CacheHitCount:    to.Ptr[int32](0),
					CacheMissCount:   to.Ptr[int32](0),
					CallCountBlocked: to.Ptr[int32](0),
					CallCountFailed:  to.Ptr[int32](0),
					CallCountOther:   to.Ptr[int32](0),
					CallCountSuccess: to.Ptr[int32](0),
					CallCountTotal:   to.Ptr[int32](0),
					ServiceTimeAvg:   to.Ptr[float64](0),
					ServiceTimeMax:   to.Ptr[float64](0),
					ServiceTimeMin:   to.Ptr[float64](0),
					UserID:           to.Ptr("/users/56eaec62baf08b06e46d27fd"),
				},
				{
					Name:             to.Ptr("Anonymous"),
					APITimeAvg:       to.Ptr[float64](0),
					APITimeMax:       to.Ptr[float64](0),
					APITimeMin:       to.Ptr[float64](0),
					Bandwidth:        to.Ptr[int64](0),
					CacheHitCount:    to.Ptr[int32](0),
					CacheMissCount:   to.Ptr[int32](0),
					CallCountBlocked: to.Ptr[int32](0),
					CallCountFailed:  to.Ptr[int32](0),
					CallCountOther:   to.Ptr[int32](0),
					CallCountSuccess: to.Ptr[int32](0),
					CallCountTotal:   to.Ptr[int32](0),
					ServiceTimeAvg:   to.Ptr[float64](0),
					ServiceTimeMax:   to.Ptr[float64](0),
					ServiceTimeMin:   to.Ptr[float64](0),
					UserID:           to.Ptr("/users/54c800b332965a0035030000"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReportCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReportCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetReportsByUser.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReports_ListByOperation(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetReportsByOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetReportsByOperation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewReportsClient("subid", cred, &options)
	pager := client.ListByOperation("rg1",
		"apimService1",
		"timestamp ge datetime'2017-06-01T00:00:00' and timestamp le datetime'2017-06-04T00:00:00'",
		&armapimanagement.ReportsClientListByOperationOptions{Top: nil,
			Skip:    nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetReportsByOperation.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.ReportCollection{
			Count: to.Ptr[int64](3),
			Value: []*armapimanagement.ReportRecordContract{
				{
					Name:             to.Ptr("get"),
					OperationID:      to.Ptr("/apis/57a03a13e4bbd5119c8b19e9/operations/57a03a1dd8d14f0a780d7d14"),
					APIID:            to.Ptr("/apis/57a03a13e4bbd5119c8b19e9"),
					APITimeAvg:       to.Ptr[float64](1015.7607923076923),
					APITimeMax:       to.Ptr[float64](1819.2173),
					APITimeMin:       to.Ptr[float64](330.3206),
					Bandwidth:        to.Ptr[int64](11019),
					CacheHitCount:    to.Ptr[int32](0),
					CacheMissCount:   to.Ptr[int32](0),
					CallCountBlocked: to.Ptr[int32](1),
					CallCountFailed:  to.Ptr[int32](0),
					CallCountOther:   to.Ptr[int32](0),
					CallCountSuccess: to.Ptr[int32](13),
					CallCountTotal:   to.Ptr[int32](14),
					ServiceTimeAvg:   to.Ptr[float64](957.094776923077),
					ServiceTimeMax:   to.Ptr[float64](1697.3612),
					ServiceTimeMin:   to.Ptr[float64](215.24),
				},
				{
					Name:             to.Ptr("GetWeatherInformation"),
					OperationID:      to.Ptr("/apis/57c999d1e4bbd50c988cb2c3/operations/57c999d1e4bbd50df889c93e"),
					APIID:            to.Ptr("/apis/57c999d1e4bbd50c988cb2c3"),
					APITimeAvg:       to.Ptr[float64](0),
					APITimeMax:       to.Ptr[float64](0),
					APITimeMin:       to.Ptr[float64](0),
					Bandwidth:        to.Ptr[int64](0),
					CacheHitCount:    to.Ptr[int32](0),
					CacheMissCount:   to.Ptr[int32](0),
					CallCountBlocked: to.Ptr[int32](0),
					CallCountFailed:  to.Ptr[int32](0),
					CallCountOther:   to.Ptr[int32](0),
					CallCountSuccess: to.Ptr[int32](0),
					CallCountTotal:   to.Ptr[int32](0),
					ServiceTimeAvg:   to.Ptr[float64](0),
					ServiceTimeMax:   to.Ptr[float64](0),
					ServiceTimeMin:   to.Ptr[float64](0),
				},
				{
					Name:             to.Ptr("GetCityForecastByZIP"),
					OperationID:      to.Ptr("/apis/57c999d1e4bbd50c988cb2c3/operations/57c999d1e4bbd50df889c93f"),
					APIID:            to.Ptr("/apis/57c999d1e4bbd50c988cb2c3"),
					APITimeAvg:       to.Ptr[float64](0),
					APITimeMax:       to.Ptr[float64](0),
					APITimeMin:       to.Ptr[float64](0),
					Bandwidth:        to.Ptr[int64](0),
					CacheHitCount:    to.Ptr[int32](0),
					CacheMissCount:   to.Ptr[int32](0),
					CallCountBlocked: to.Ptr[int32](0),
					CallCountFailed:  to.Ptr[int32](0),
					CallCountOther:   to.Ptr[int32](0),
					CallCountSuccess: to.Ptr[int32](0),
					CallCountTotal:   to.Ptr[int32](0),
					ServiceTimeAvg:   to.Ptr[float64](0),
					ServiceTimeMax:   to.Ptr[float64](0),
					ServiceTimeMin:   to.Ptr[float64](0),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReportCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReportCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetReportsByOperation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReports_ListByProduct(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetReportsByProduct.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetReportsByProduct"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewReportsClient("subid", cred, &options)
	pager := client.ListByProduct("rg1",
		"apimService1",
		"timestamp ge datetime'2017-06-01T00:00:00' and timestamp le datetime'2017-06-04T00:00:00'",
		&armapimanagement.ReportsClientListByProductOptions{Top: nil,
			Skip:    nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetReportsByProduct.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.ReportCollection{
			Count: to.Ptr[int64](2),
			Value: []*armapimanagement.ReportRecordContract{
				{
					Name:             to.Ptr("Starter"),
					APITimeAvg:       to.Ptr[float64](0),
					APITimeMax:       to.Ptr[float64](0),
					APITimeMin:       to.Ptr[float64](0),
					Bandwidth:        to.Ptr[int64](0),
					CacheHitCount:    to.Ptr[int32](0),
					CacheMissCount:   to.Ptr[int32](0),
					CallCountBlocked: to.Ptr[int32](0),
					CallCountFailed:  to.Ptr[int32](0),
					CallCountOther:   to.Ptr[int32](0),
					CallCountSuccess: to.Ptr[int32](0),
					CallCountTotal:   to.Ptr[int32](0),
					ProductID:        to.Ptr("/products/5600b59475ff190048060001"),
					ServiceTimeAvg:   to.Ptr[float64](0),
					ServiceTimeMax:   to.Ptr[float64](0),
					ServiceTimeMin:   to.Ptr[float64](0),
				},
				{
					Name:             to.Ptr("Unlimited"),
					APITimeAvg:       to.Ptr[float64](1015.7607923076923),
					APITimeMax:       to.Ptr[float64](1819.2173),
					APITimeMin:       to.Ptr[float64](330.3206),
					Bandwidth:        to.Ptr[int64](11019),
					CacheHitCount:    to.Ptr[int32](0),
					CacheMissCount:   to.Ptr[int32](0),
					CallCountBlocked: to.Ptr[int32](1),
					CallCountFailed:  to.Ptr[int32](0),
					CallCountOther:   to.Ptr[int32](0),
					CallCountSuccess: to.Ptr[int32](13),
					CallCountTotal:   to.Ptr[int32](14),
					ProductID:        to.Ptr("/products/5600b59475ff190048060002"),
					ServiceTimeAvg:   to.Ptr[float64](957.094776923077),
					ServiceTimeMax:   to.Ptr[float64](1697.3612),
					ServiceTimeMin:   to.Ptr[float64](215.24),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReportCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReportCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetReportsByProduct.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReports_ListByGeo(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetReportsByGeo.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetReportsByGeo"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewReportsClient("subid", cred, &options)
	pager := client.ListByGeo("rg1",
		"apimService1",
		"timestamp ge datetime'2017-06-01T00:00:00' and timestamp le datetime'2017-06-04T00:00:00'",
		&armapimanagement.ReportsClientListByGeoOptions{Top: nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetReportsByGeo.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.ReportCollection{
			Value: []*armapimanagement.ReportRecordContract{
				{
					APITimeAvg:       to.Ptr[float64](1015.7607923076923),
					APITimeMax:       to.Ptr[float64](1819.2173),
					APITimeMin:       to.Ptr[float64](330.3206),
					Bandwidth:        to.Ptr[int64](11019),
					CacheHitCount:    to.Ptr[int32](0),
					CacheMissCount:   to.Ptr[int32](0),
					CallCountBlocked: to.Ptr[int32](1),
					CallCountFailed:  to.Ptr[int32](0),
					CallCountOther:   to.Ptr[int32](0),
					CallCountSuccess: to.Ptr[int32](13),
					CallCountTotal:   to.Ptr[int32](14),
					Country:          to.Ptr("US"),
					Region:           to.Ptr("WA"),
					ServiceTimeAvg:   to.Ptr[float64](957.094776923077),
					ServiceTimeMax:   to.Ptr[float64](1697.3612),
					ServiceTimeMin:   to.Ptr[float64](215.24),
					Zip:              to.Ptr("98052"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReportCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReportCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetReportsByGeo.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReports_ListBySubscription(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetReportsBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetReportsBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewReportsClient("subid", cred, &options)
	pager := client.ListBySubscription("rg1",
		"apimService1",
		"timestamp ge datetime'2017-06-01T00:00:00' and timestamp le datetime'2017-06-04T00:00:00'",
		&armapimanagement.ReportsClientListBySubscriptionOptions{Top: nil,
			Skip:    nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetReportsBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.ReportCollection{
			Count: to.Ptr[int64](3),
			Value: []*armapimanagement.ReportRecordContract{
				{
					Name:             to.Ptr(""),
					APITimeAvg:       to.Ptr[float64](0),
					APITimeMax:       to.Ptr[float64](0),
					APITimeMin:       to.Ptr[float64](0),
					Bandwidth:        to.Ptr[int64](0),
					CacheHitCount:    to.Ptr[int32](0),
					CacheMissCount:   to.Ptr[int32](0),
					CallCountBlocked: to.Ptr[int32](0),
					CallCountFailed:  to.Ptr[int32](0),
					CallCountOther:   to.Ptr[int32](0),
					CallCountSuccess: to.Ptr[int32](0),
					CallCountTotal:   to.Ptr[int32](0),
					ProductID:        to.Ptr("/products/5600b59475ff190048060001"),
					ServiceTimeAvg:   to.Ptr[float64](0),
					ServiceTimeMax:   to.Ptr[float64](0),
					ServiceTimeMin:   to.Ptr[float64](0),
					SubscriptionID:   to.Ptr("/subscriptions/5600b59475ff190048070001"),
					UserID:           to.Ptr("/users/1"),
				},
				{
					Name:             to.Ptr(""),
					APITimeAvg:       to.Ptr[float64](1015.7607923076923),
					APITimeMax:       to.Ptr[float64](1819.2173),
					APITimeMin:       to.Ptr[float64](330.3206),
					Bandwidth:        to.Ptr[int64](11019),
					CacheHitCount:    to.Ptr[int32](0),
					CacheMissCount:   to.Ptr[int32](0),
					CallCountBlocked: to.Ptr[int32](1),
					CallCountFailed:  to.Ptr[int32](0),
					CallCountOther:   to.Ptr[int32](0),
					CallCountSuccess: to.Ptr[int32](13),
					CallCountTotal:   to.Ptr[int32](14),
					ProductID:        to.Ptr("/products/5600b59475ff190048060002"),
					ServiceTimeAvg:   to.Ptr[float64](957.094776923077),
					ServiceTimeMax:   to.Ptr[float64](1697.3612),
					ServiceTimeMin:   to.Ptr[float64](215.24),
					SubscriptionID:   to.Ptr("/subscriptions/5600b59475ff190048070002"),
					UserID:           to.Ptr("/users/1"),
				},
				{
					Name:             to.Ptr(""),
					APITimeAvg:       to.Ptr[float64](0),
					APITimeMax:       to.Ptr[float64](0),
					APITimeMin:       to.Ptr[float64](0),
					Bandwidth:        to.Ptr[int64](0),
					CacheHitCount:    to.Ptr[int32](0),
					CacheMissCount:   to.Ptr[int32](0),
					CallCountBlocked: to.Ptr[int32](0),
					CallCountFailed:  to.Ptr[int32](0),
					CallCountOther:   to.Ptr[int32](0),
					CallCountSuccess: to.Ptr[int32](0),
					CallCountTotal:   to.Ptr[int32](0),
					ProductID:        to.Ptr("/products/5702e97e5157a50f48dce801"),
					ServiceTimeAvg:   to.Ptr[float64](0),
					ServiceTimeMax:   to.Ptr[float64](0),
					ServiceTimeMin:   to.Ptr[float64](0),
					SubscriptionID:   to.Ptr("/subscriptions/5702e97e5157a50a9c733303"),
					UserID:           to.Ptr("/users/1"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReportCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReportCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetReportsBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReports_ListByTime(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetReportsByTime.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetReportsByTime"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewReportsClient("subid", cred, &options)
	pager := client.ListByTime("rg1",
		"apimService1",
		"timestamp ge datetime'2017-06-01T00:00:00' and timestamp le datetime'2017-06-04T00:00:00'",
		"PT15M",
		&armapimanagement.ReportsClientListByTimeOptions{Top: nil,
			Skip:    nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetReportsByTime.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.ReportCollection{
			Count: to.Ptr[int64](2),
			Value: []*armapimanagement.ReportRecordContract{
				{
					APITimeAvg:       to.Ptr[float64](1337.46335),
					APITimeMax:       to.Ptr[float64](1819.2173),
					APITimeMin:       to.Ptr[float64](885.0839000000001),
					Bandwidth:        to.Ptr[int64](3243),
					CacheHitCount:    to.Ptr[int32](0),
					CacheMissCount:   to.Ptr[int32](0),
					CallCountBlocked: to.Ptr[int32](0),
					CallCountFailed:  to.Ptr[int32](0),
					CallCountOther:   to.Ptr[int32](0),
					CallCountSuccess: to.Ptr[int32](4),
					CallCountTotal:   to.Ptr[int32](4),
					Interval:         to.Ptr("PT15M"),
					ServiceTimeAvg:   to.Ptr[float64](1255.917425),
					ServiceTimeMax:   to.Ptr[float64](1697.3612),
					ServiceTimeMin:   to.Ptr[float64](882.8264),
					Timestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-03T00:15:00Z"); return t }()),
				},
				{
					APITimeAvg:       to.Ptr[float64](872.7818777777778),
					APITimeMax:       to.Ptr[float64](1093.8407),
					APITimeMin:       to.Ptr[float64](330.3206),
					Bandwidth:        to.Ptr[int64](7776),
					CacheHitCount:    to.Ptr[int32](0),
					CacheMissCount:   to.Ptr[int32](0),
					CallCountBlocked: to.Ptr[int32](1),
					CallCountFailed:  to.Ptr[int32](0),
					CallCountOther:   to.Ptr[int32](0),
					CallCountSuccess: to.Ptr[int32](9),
					CallCountTotal:   to.Ptr[int32](10),
					Interval:         to.Ptr("PT15M"),
					ServiceTimeAvg:   to.Ptr[float64](824.2847111111112),
					ServiceTimeMax:   to.Ptr[float64](973.2262000000001),
					ServiceTimeMin:   to.Ptr[float64](215.24),
					Timestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-03T00:30:00Z"); return t }()),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReportCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReportCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetReportsByTime.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReports_ListByRequest(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetReportsByRequest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetReportsByRequest"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewReportsClient("subid", cred, &options)
	pager := client.ListByRequest("rg1",
		"apimService1",
		"timestamp ge datetime'2017-06-01T00:00:00' and timestamp le datetime'2017-06-04T00:00:00'",
		&armapimanagement.ReportsClientListByRequestOptions{Top: nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetReportsByRequest.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.RequestReportCollection{
			Count: to.Ptr[int64](2),
			Value: []*armapimanagement.RequestReportRecordContract{
				{
					OperationID:    to.Ptr("/apis/5931a75ae4bbd512a88c680b/operations/-"),
					Method:         to.Ptr("GET"),
					APIID:          to.Ptr("/apis/5931a75ae4bbd512a88c680b"),
					APIRegion:      to.Ptr("East Asia"),
					APITime:        to.Ptr[float64](221.1544),
					Cache:          to.Ptr("none"),
					IPAddress:      to.Ptr("207.xx.155.xx"),
					ProductID:      to.Ptr("/products/-"),
					RequestID:      to.Ptr("63e7119c-26aa-433c-96d7-f6f3267ff52f"),
					RequestSize:    to.Ptr[int32](0),
					ResponseCode:   to.Ptr[int32](404),
					ResponseSize:   to.Ptr[int32](405),
					ServiceTime:    to.Ptr[float64](0),
					SubscriptionID: to.Ptr("/subscriptions/5600b59475ff190048070002"),
					Timestamp:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-03T00:17:00.1649134Z"); return t }()),
					URL:            to.Ptr("https://apimService1.azure-api.net/echo/resource?param1=sample"),
					UserID:         to.Ptr("/users/1"),
				},
				{
					OperationID:    to.Ptr("/apis/5931a75ae4bbd512a88c680b/operations/-"),
					Method:         to.Ptr("POST"),
					APIID:          to.Ptr("/apis/5931a75ae4bbd512a88c680b"),
					APIRegion:      to.Ptr("East Asia"),
					APITime:        to.Ptr[float64](6.675400000000001),
					Cache:          to.Ptr("none"),
					IPAddress:      to.Ptr("207.xx.155.xx"),
					ProductID:      to.Ptr("/products/-"),
					RequestID:      to.Ptr("e581b7f7-c9ec-4fc6-8ab9-3855d9b00b04"),
					RequestSize:    to.Ptr[int32](0),
					ResponseCode:   to.Ptr[int32](404),
					ResponseSize:   to.Ptr[int32](403),
					ServiceTime:    to.Ptr[float64](0),
					SubscriptionID: to.Ptr("/subscriptions/5600b59475ff190048070002"),
					Timestamp:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-03T00:17:20.5255131Z"); return t }()),
					URL:            to.Ptr("https://apimService1.azure-api.net/echo/resource"),
					UserID:         to.Ptr("/users/1"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RequestReportCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RequestReportCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetReportsByRequest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGlobalSchema_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListGlobalSchemas.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListSchemas"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGlobalSchemaClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.GlobalSchemaClientListByServiceOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListGlobalSchemas.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.GlobalSchemaCollection{
			Count: to.Ptr[int64](2),
			Value: []*armapimanagement.GlobalSchemaContract{
				{
					Name: to.Ptr("schema1"),
					Type: to.Ptr("Microsoft.ApiManagement/service/schemas"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/schemas/schema1"),
					Properties: &armapimanagement.GlobalSchemaContractProperties{
						Description: to.Ptr("sample schema description"),
						SchemaType:  to.Ptr(armapimanagement.SchemaTypeXML),
						Value:       "<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n           xmlns:tns=\"http://tempuri.org/PurchaseOrderSchema.xsd\"\r\n           targetNamespace=\"http://tempuri.org/PurchaseOrderSchema.xsd\"\r\n           elementFormDefault=\"qualified\">\r\n <xsd:element name=\"PurchaseOrder\" type=\"tns:PurchaseOrderType\"/>\r\n <xsd:complexType name=\"PurchaseOrderType\">\r\n  <xsd:sequence>\r\n   <xsd:element name=\"ShipTo\" type=\"tns:USAddress\" maxOccurs=\"2\"/>\r\n   <xsd:element name=\"BillTo\" type=\"tns:USAddress\"/>\r\n  </xsd:sequence>\r\n  <xsd:attribute name=\"OrderDate\" type=\"xsd:date\"/>\r\n </xsd:complexType>\r\n\r\n <xsd:complexType name=\"USAddress\">\r\n  <xsd:sequence>\r\n   <xsd:element name=\"name\"   type=\"xsd:string\"/>\r\n   <xsd:element name=\"street\" type=\"xsd:string\"/>\r\n   <xsd:element name=\"city\"   type=\"xsd:string\"/>\r\n   <xsd:element name=\"state\"  type=\"xsd:string\"/>\r\n   <xsd:element name=\"zip\"    type=\"xsd:integer\"/>\r\n  </xsd:sequence>\r\n  <xsd:attribute name=\"country\" type=\"xsd:NMTOKEN\" fixed=\"US\"/>\r\n </xsd:complexType>\r\n</xsd:schema>",
					},
				},
				{
					Name: to.Ptr("schema2"),
					Type: to.Ptr("Microsoft.ApiManagement/service/schemas"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/schemas/schema2"),
					Properties: &armapimanagement.GlobalSchemaContractProperties{
						Description: to.Ptr("sample schema description"),
						Document: map[string]interface{}{
							"type":    "object",
							"$id":     "https://example.com/person.schema.json",
							"$schema": "https://json-schema.org/draft/2020-12/schema",
							"properties": map[string]interface{}{
								"age": map[string]interface{}{
									"type":        "integer",
									"description": "Age in years which must be equal to or greater than zero.",
									"minimum":     float64(0),
								},
								"firstName": map[string]interface{}{
									"type":        "string",
									"description": "The person's first name.",
								},
								"lastName": map[string]interface{}{
									"type":        "string",
									"description": "The person's last name.",
								},
							},
							"title": "Person",
						},
						SchemaType: to.Ptr(armapimanagement.SchemaTypeJSON),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GlobalSchemaCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GlobalSchemaCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListGlobalSchemas.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGlobalSchema_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadGlobalSchema.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadApi"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGlobalSchemaClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"myschema",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadGlobalSchema.json: %v", err)
	}
}

func TestGlobalSchema_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetGlobalSchema1.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetSchema1"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGlobalSchemaClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"schema1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetGlobalSchema1.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.GlobalSchemaContract{
			Name: to.Ptr("schema1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/schemas"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/schemas/schema1"),
			Properties: &armapimanagement.GlobalSchemaContractProperties{
				Description: to.Ptr("sample schema description"),
				SchemaType:  to.Ptr(armapimanagement.SchemaTypeXML),
				Value:       "<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n           xmlns:tns=\"http://tempuri.org/PurchaseOrderSchema.xsd\"\r\n           targetNamespace=\"http://tempuri.org/PurchaseOrderSchema.xsd\"\r\n           elementFormDefault=\"qualified\">\r\n <xsd:element name=\"PurchaseOrder\" type=\"tns:PurchaseOrderType\"/>\r\n <xsd:complexType name=\"PurchaseOrderType\">\r\n  <xsd:sequence>\r\n   <xsd:element name=\"ShipTo\" type=\"tns:USAddress\" maxOccurs=\"2\"/>\r\n   <xsd:element name=\"BillTo\" type=\"tns:USAddress\"/>\r\n  </xsd:sequence>\r\n  <xsd:attribute name=\"OrderDate\" type=\"xsd:date\"/>\r\n </xsd:complexType>\r\n\r\n <xsd:complexType name=\"USAddress\">\r\n  <xsd:sequence>\r\n   <xsd:element name=\"name\"   type=\"xsd:string\"/>\r\n   <xsd:element name=\"street\" type=\"xsd:string\"/>\r\n   <xsd:element name=\"city\"   type=\"xsd:string\"/>\r\n   <xsd:element name=\"state\"  type=\"xsd:string\"/>\r\n   <xsd:element name=\"zip\"    type=\"xsd:integer\"/>\r\n  </xsd:sequence>\r\n  <xsd:attribute name=\"country\" type=\"xsd:NMTOKEN\" fixed=\"US\"/>\r\n </xsd:complexType>\r\n</xsd:schema>",
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GlobalSchemaContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GlobalSchemaContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetGlobalSchema1.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetGlobalSchema2.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetSchema2"},
	})
	client = armapimanagement.NewGlobalSchemaClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"apimService1",
		"schema2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetGlobalSchema2.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.GlobalSchemaContract{
			Name: to.Ptr("schema2"),
			Type: to.Ptr("Microsoft.ApiManagement/service/schemas"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/schemas/schema2"),
			Properties: &armapimanagement.GlobalSchemaContractProperties{
				Description: to.Ptr("sample schema description"),
				Document: map[string]interface{}{
					"type":    "object",
					"$id":     "https://example.com/person.schema.json",
					"$schema": "https://json-schema.org/draft/2020-12/schema",
					"properties": map[string]interface{}{
						"age": map[string]interface{}{
							"type":        "integer",
							"description": "Age in years which must be equal to or greater than zero.",
							"minimum":     float64(0),
						},
						"firstName": map[string]interface{}{
							"type":        "string",
							"description": "The person's first name.",
						},
						"lastName": map[string]interface{}{
							"type":        "string",
							"description": "The person's last name.",
						},
					},
					"title": "Person",
				},
				SchemaType: to.Ptr(armapimanagement.SchemaTypeJSON),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GlobalSchemaContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GlobalSchemaContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetGlobalSchema2.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGlobalSchema_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGlobalSchema1.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateSchema1"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGlobalSchemaClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"schema1",
		armapimanagement.GlobalSchemaContract{
			Properties: &armapimanagement.GlobalSchemaContractProperties{
				Description: to.Ptr("sample schema description"),
				SchemaType:  to.Ptr(armapimanagement.SchemaTypeXML),
				Value:       "<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n           xmlns:tns=\"http://tempuri.org/PurchaseOrderSchema.xsd\"\r\n           targetNamespace=\"http://tempuri.org/PurchaseOrderSchema.xsd\"\r\n           elementFormDefault=\"qualified\">\r\n <xsd:element name=\"PurchaseOrder\" type=\"tns:PurchaseOrderType\"/>\r\n <xsd:complexType name=\"PurchaseOrderType\">\r\n  <xsd:sequence>\r\n   <xsd:element name=\"ShipTo\" type=\"tns:USAddress\" maxOccurs=\"2\"/>\r\n   <xsd:element name=\"BillTo\" type=\"tns:USAddress\"/>\r\n  </xsd:sequence>\r\n  <xsd:attribute name=\"OrderDate\" type=\"xsd:date\"/>\r\n </xsd:complexType>\r\n\r\n <xsd:complexType name=\"USAddress\">\r\n  <xsd:sequence>\r\n   <xsd:element name=\"name\"   type=\"xsd:string\"/>\r\n   <xsd:element name=\"street\" type=\"xsd:string\"/>\r\n   <xsd:element name=\"city\"   type=\"xsd:string\"/>\r\n   <xsd:element name=\"state\"  type=\"xsd:string\"/>\r\n   <xsd:element name=\"zip\"    type=\"xsd:integer\"/>\r\n  </xsd:sequence>\r\n  <xsd:attribute name=\"country\" type=\"xsd:NMTOKEN\" fixed=\"US\"/>\r\n </xsd:complexType>\r\n</xsd:schema>",
			},
		},
		&armapimanagement.GlobalSchemaClientBeginCreateOrUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGlobalSchema1.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGlobalSchema1.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.GlobalSchemaContract{
			Name: to.Ptr("schema1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/schemas"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/schemas/schema1"),
			Properties: &armapimanagement.GlobalSchemaContractProperties{
				Description: to.Ptr("sample schema description"),
				SchemaType:  to.Ptr(armapimanagement.SchemaTypeXML),
				Value:       "<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n           xmlns:tns=\"http://tempuri.org/PurchaseOrderSchema.xsd\"\r\n           targetNamespace=\"http://tempuri.org/PurchaseOrderSchema.xsd\"\r\n           elementFormDefault=\"qualified\">\r\n <xsd:element name=\"PurchaseOrder\" type=\"tns:PurchaseOrderType\"/>\r\n <xsd:complexType name=\"PurchaseOrderType\">\r\n  <xsd:sequence>\r\n   <xsd:element name=\"ShipTo\" type=\"tns:USAddress\" maxOccurs=\"2\"/>\r\n   <xsd:element name=\"BillTo\" type=\"tns:USAddress\"/>\r\n  </xsd:sequence>\r\n  <xsd:attribute name=\"OrderDate\" type=\"xsd:date\"/>\r\n </xsd:complexType>\r\n\r\n <xsd:complexType name=\"USAddress\">\r\n  <xsd:sequence>\r\n   <xsd:element name=\"name\"   type=\"xsd:string\"/>\r\n   <xsd:element name=\"street\" type=\"xsd:string\"/>\r\n   <xsd:element name=\"city\"   type=\"xsd:string\"/>\r\n   <xsd:element name=\"state\"  type=\"xsd:string\"/>\r\n   <xsd:element name=\"zip\"    type=\"xsd:integer\"/>\r\n  </xsd:sequence>\r\n  <xsd:attribute name=\"country\" type=\"xsd:NMTOKEN\" fixed=\"US\"/>\r\n </xsd:complexType>\r\n</xsd:schema>",
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GlobalSchemaContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GlobalSchemaContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGlobalSchema1.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGlobalSchema2.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateSchema2"},
	})
	client = armapimanagement.NewGlobalSchemaClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"schema1",
		armapimanagement.GlobalSchemaContract{
			Properties: &armapimanagement.GlobalSchemaContractProperties{
				Description: to.Ptr("sample schema description"),
				Document: map[string]interface{}{
					"type":    "object",
					"$id":     "https://example.com/person.schema.json",
					"$schema": "https://json-schema.org/draft/2020-12/schema",
					"properties": map[string]interface{}{
						"age": map[string]interface{}{
							"type":        "integer",
							"description": "Age in years which must be equal to or greater than zero.",
							"minimum":     float64(0),
						},
						"firstName": map[string]interface{}{
							"type":        "string",
							"description": "The person's first name.",
						},
						"lastName": map[string]interface{}{
							"type":        "string",
							"description": "The person's last name.",
						},
					},
					"title": "Person",
				},
				SchemaType: to.Ptr(armapimanagement.SchemaTypeJSON),
			},
		},
		&armapimanagement.GlobalSchemaClientBeginCreateOrUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGlobalSchema2.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGlobalSchema2.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.GlobalSchemaContract{
			Name: to.Ptr("schema1"),
			Type: to.Ptr("Microsoft.ApiManagement/service/schemas"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/schemas/schema1"),
			Properties: &armapimanagement.GlobalSchemaContractProperties{
				Description: to.Ptr("sample schema description"),
				Document: map[string]interface{}{
					"type":    "object",
					"$id":     "https://example.com/person.schema.json",
					"$schema": "https://json-schema.org/draft/2020-12/schema",
					"properties": map[string]interface{}{
						"age": map[string]interface{}{
							"type":        "integer",
							"description": "Age in years which must be equal to or greater than zero.",
							"minimum":     float64(0),
						},
						"firstName": map[string]interface{}{
							"type":        "string",
							"description": "The person's first name.",
						},
						"lastName": map[string]interface{}{
							"type":        "string",
							"description": "The person's last name.",
						},
					},
					"title": "Person",
				},
				SchemaType: to.Ptr(armapimanagement.SchemaTypeJSON),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GlobalSchemaContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GlobalSchemaContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateGlobalSchema2.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGlobalSchema_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteGlobalSchema.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteSchema"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewGlobalSchemaClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"schema1",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteGlobalSchema.json: %v", err)
	}
}

func TestTenantSettings_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListTenantSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListTenantSettings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTenantSettingsClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.TenantSettingsClientListByServiceOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListTenantSettings.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.TenantSettingsCollection{
			Value: []*armapimanagement.TenantSettingsContract{
				{
					Name: to.Ptr("public"),
					Type: to.Ptr("Microsoft.ApiManagement/service/settings"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/settings/public"),
					Properties: &armapimanagement.TenantSettingsContractProperties{
						Settings: map[string]*string{
							"CustomPortalSettings.DelegatedSubscriptionEnabled":         to.Ptr("False"),
							"CustomPortalSettings.DelegationEnabled":                    to.Ptr("False"),
							"CustomPortalSettings.DelegationUrl":                        to.Ptr(""),
							"CustomPortalSettings.UserRegistrationTerms":                nil,
							"CustomPortalSettings.UserRegistrationTermsConsentRequired": to.Ptr("False"),
							"CustomPortalSettings.UserRegistrationTermsEnabled":         to.Ptr("False"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TenantSettingsCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TenantSettingsCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListTenantSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTenantSettings_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetTenantSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetTenantSettings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTenantSettingsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		armapimanagement.SettingsTypeNamePublic,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetTenantSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.TenantSettingsContract{
			Name: to.Ptr("public"),
			Type: to.Ptr("Microsoft.ApiManagement/service/settings"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/settings/public"),
			Properties: &armapimanagement.TenantSettingsContractProperties{
				Settings: map[string]*string{
					"CustomPortalSettings.DelegatedSubscriptionEnabled":         to.Ptr("False"),
					"CustomPortalSettings.DelegationEnabled":                    to.Ptr("False"),
					"CustomPortalSettings.DelegationUrl":                        to.Ptr(""),
					"CustomPortalSettings.UserRegistrationTerms":                nil,
					"CustomPortalSettings.UserRegistrationTermsConsentRequired": to.Ptr("False"),
					"CustomPortalSettings.UserRegistrationTermsEnabled":         to.Ptr("False"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TenantSettingsContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TenantSettingsContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetTenantSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAPIManagementSKUs_List(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListSku.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all available Resource SKUs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewSKUsClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListSku.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.SKUsResult{
			Value: []*armapimanagement.SKU{
				{
					Name: to.Ptr("Developer"),
					Capacity: &armapimanagement.SKUCapacity{
						Default:   to.Ptr[int32](1),
						Maximum:   to.Ptr[int32](1),
						Minimum:   to.Ptr[int32](1),
						ScaleType: to.Ptr(armapimanagement.APIManagementSKUCapacityScaleTypeNone),
					},
					LocationInfo: []*armapimanagement.SKULocationInfo{
						{
							Location:    to.Ptr("centralindia"),
							ZoneDetails: []*armapimanagement.SKUZoneDetails{},
							Zones:       []*string{},
						}},
					Locations: []*string{
						to.Ptr("centralindia")},
					ResourceType: to.Ptr("service"),
					Restrictions: []*armapimanagement.SKURestrictions{},
				},
				{
					Name: to.Ptr("Standard"),
					Capacity: &armapimanagement.SKUCapacity{
						Default:   to.Ptr[int32](1),
						Maximum:   to.Ptr[int32](4),
						Minimum:   to.Ptr[int32](1),
						ScaleType: to.Ptr(armapimanagement.APIManagementSKUCapacityScaleTypeAutomatic),
					},
					LocationInfo: []*armapimanagement.SKULocationInfo{
						{
							Location:    to.Ptr("centralindia"),
							ZoneDetails: []*armapimanagement.SKUZoneDetails{},
							Zones:       []*string{},
						}},
					Locations: []*string{
						to.Ptr("centralindia")},
					ResourceType: to.Ptr("service"),
					Restrictions: []*armapimanagement.SKURestrictions{},
				},
				{
					Name: to.Ptr("Premium"),
					Capacity: &armapimanagement.SKUCapacity{
						Default:   to.Ptr[int32](1),
						Maximum:   to.Ptr[int32](10),
						Minimum:   to.Ptr[int32](1),
						ScaleType: to.Ptr(armapimanagement.APIManagementSKUCapacityScaleTypeAutomatic),
					},
					LocationInfo: []*armapimanagement.SKULocationInfo{
						{
							Location:    to.Ptr("centralindia"),
							ZoneDetails: []*armapimanagement.SKUZoneDetails{},
							Zones:       []*string{},
						}},
					Locations: []*string{
						to.Ptr("centralindia")},
					ResourceType: to.Ptr("service"),
					Restrictions: []*armapimanagement.SKURestrictions{},
				},
				{
					Name: to.Ptr("Basic"),
					Capacity: &armapimanagement.SKUCapacity{
						Default:   to.Ptr[int32](1),
						Maximum:   to.Ptr[int32](2),
						Minimum:   to.Ptr[int32](1),
						ScaleType: to.Ptr(armapimanagement.APIManagementSKUCapacityScaleTypeManual),
					},
					LocationInfo: []*armapimanagement.SKULocationInfo{
						{
							Location:    to.Ptr("centralindia"),
							ZoneDetails: []*armapimanagement.SKUZoneDetails{},
							Zones:       []*string{},
						}},
					Locations: []*string{
						to.Ptr("centralindia")},
					ResourceType: to.Ptr("service"),
					Restrictions: []*armapimanagement.SKURestrictions{},
				},
				{
					Name: to.Ptr("Consumption"),
					Capacity: &armapimanagement.SKUCapacity{
						Default:   to.Ptr[int32](0),
						Maximum:   to.Ptr[int32](0),
						Minimum:   to.Ptr[int32](0),
						ScaleType: to.Ptr(armapimanagement.APIManagementSKUCapacityScaleTypeNone),
					},
					LocationInfo: []*armapimanagement.SKULocationInfo{
						{
							Location:    to.Ptr("centralindia"),
							ZoneDetails: []*armapimanagement.SKUZoneDetails{},
							Zones:       []*string{},
						}},
					Locations: []*string{
						to.Ptr("centralindia")},
					ResourceType: to.Ptr("service"),
					Restrictions: []*armapimanagement.SKURestrictions{},
				},
				{
					Name: to.Ptr("Developer"),
					Capacity: &armapimanagement.SKUCapacity{
						Default:   to.Ptr[int32](1),
						Maximum:   to.Ptr[int32](1),
						Minimum:   to.Ptr[int32](1),
						ScaleType: to.Ptr(armapimanagement.APIManagementSKUCapacityScaleTypeNone),
					},
					LocationInfo: []*armapimanagement.SKULocationInfo{
						{
							Location:    to.Ptr("uaenorth"),
							ZoneDetails: []*armapimanagement.SKUZoneDetails{},
							Zones:       []*string{},
						}},
					Locations: []*string{
						to.Ptr("uaenorth")},
					ResourceType: to.Ptr("service"),
					Restrictions: []*armapimanagement.SKURestrictions{},
				},
				{
					Name: to.Ptr("Standard"),
					Capacity: &armapimanagement.SKUCapacity{
						Default:   to.Ptr[int32](1),
						Maximum:   to.Ptr[int32](4),
						Minimum:   to.Ptr[int32](1),
						ScaleType: to.Ptr(armapimanagement.APIManagementSKUCapacityScaleTypeAutomatic),
					},
					LocationInfo: []*armapimanagement.SKULocationInfo{
						{
							Location:    to.Ptr("uaenorth"),
							ZoneDetails: []*armapimanagement.SKUZoneDetails{},
							Zones:       []*string{},
						}},
					Locations: []*string{
						to.Ptr("uaenorth")},
					ResourceType: to.Ptr("service"),
					Restrictions: []*armapimanagement.SKURestrictions{},
				},
				{
					Name: to.Ptr("Premium"),
					Capacity: &armapimanagement.SKUCapacity{
						Default:   to.Ptr[int32](1),
						Maximum:   to.Ptr[int32](10),
						Minimum:   to.Ptr[int32](1),
						ScaleType: to.Ptr(armapimanagement.APIManagementSKUCapacityScaleTypeAutomatic),
					},
					LocationInfo: []*armapimanagement.SKULocationInfo{
						{
							Location:    to.Ptr("uaenorth"),
							ZoneDetails: []*armapimanagement.SKUZoneDetails{},
							Zones:       []*string{},
						}},
					Locations: []*string{
						to.Ptr("uaenorth")},
					ResourceType: to.Ptr("service"),
					Restrictions: []*armapimanagement.SKURestrictions{},
				},
				{
					Name: to.Ptr("Basic"),
					Capacity: &armapimanagement.SKUCapacity{
						Default:   to.Ptr[int32](1),
						Maximum:   to.Ptr[int32](2),
						Minimum:   to.Ptr[int32](1),
						ScaleType: to.Ptr(armapimanagement.APIManagementSKUCapacityScaleTypeManual),
					},
					LocationInfo: []*armapimanagement.SKULocationInfo{
						{
							Location:    to.Ptr("uaenorth"),
							ZoneDetails: []*armapimanagement.SKUZoneDetails{},
							Zones:       []*string{},
						}},
					Locations: []*string{
						to.Ptr("uaenorth")},
					ResourceType: to.Ptr("service"),
					Restrictions: []*armapimanagement.SKURestrictions{},
				},
				{
					Name: to.Ptr("Developer"),
					Capacity: &armapimanagement.SKUCapacity{
						Default:   to.Ptr[int32](1),
						Maximum:   to.Ptr[int32](1),
						Minimum:   to.Ptr[int32](1),
						ScaleType: to.Ptr(armapimanagement.APIManagementSKUCapacityScaleTypeNone),
					},
					LocationInfo: []*armapimanagement.SKULocationInfo{
						{
							Location:    to.Ptr("australiacentral"),
							ZoneDetails: []*armapimanagement.SKUZoneDetails{},
							Zones:       []*string{},
						}},
					Locations: []*string{
						to.Ptr("australiacentral")},
					ResourceType: to.Ptr("service"),
					Restrictions: []*armapimanagement.SKURestrictions{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SKUsResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SKUsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListSku.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubscription_List(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListSubscriptions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListSubscriptions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewSubscriptionClient("subid", cred, &options)
	pager := client.List("rg1",
		"apimService1",
		&armapimanagement.SubscriptionClientListOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListSubscriptions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.SubscriptionCollection{
			Count: to.Ptr[int64](3),
			Value: []*armapimanagement.SubscriptionContract{
				{
					Name: to.Ptr("5600b59475ff190048070001"),
					Type: to.Ptr("Microsoft.ApiManagement/service/subscriptions"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/subscriptions/5600b59475ff190048070001"),
					Properties: &armapimanagement.SubscriptionContractProperties{
						CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-09-22T01:57:40.3Z"); return t }()),
						OwnerID:     to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/1"),
						Scope:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/5600b59475ff190048060001"),
						State:       to.Ptr(armapimanagement.SubscriptionStateActive),
					},
				},
				{
					Name: to.Ptr("56eaed3dbaf08b06e46d27fe"),
					Type: to.Ptr("Microsoft.ApiManagement/service/subscriptions"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/subscriptions/56eaed3dbaf08b06e46d27fe"),
					Properties: &armapimanagement.SubscriptionContractProperties{
						CreatedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-17T17:45:33.837Z"); return t }()),
						DisplayName:      to.Ptr("Starter"),
						ExpirationDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-04-01T00:00:00Z"); return t }()),
						NotificationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-20T00:00:00Z"); return t }()),
						OwnerID:          to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/56eaec62baf08b06e46d27fd"),
						Scope:            to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/5600b59475ff190048060001"),
						StartDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-17T00:00:00Z"); return t }()),
						State:            to.Ptr(armapimanagement.SubscriptionStateActive),
					},
				},
				{
					Name: to.Ptr("5931a769d8d14f0ad8ce13b8"),
					Type: to.Ptr("Microsoft.ApiManagement/service/subscriptions"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/subscriptions/5931a769d8d14f0ad8ce13b8"),
					Properties: &armapimanagement.SubscriptionContractProperties{
						CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-02T17:59:06.223Z"); return t }()),
						DisplayName: to.Ptr("Unlimited"),
						OwnerID:     to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/5931a75ae4bbd512a88c680b"),
						Scope:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/5600b59475ff190048060002"),
						State:       to.Ptr(armapimanagement.SubscriptionStateSubmitted),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SubscriptionCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SubscriptionCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListSubscriptions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubscription_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadSubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewSubscriptionClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"5931a769d8d14f0ad8ce13b8",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadSubscription.json: %v", err)
	}
}

func TestSubscription_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetSubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewSubscriptionClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"5931a769d8d14f0ad8ce13b8",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.SubscriptionContract{
			Name: to.Ptr("5931a769d8d14f0ad8ce13b8"),
			Type: to.Ptr("Microsoft.ApiManagement/service/subscriptions"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/subscriptions/5931a769d8d14f0ad8ce13b8"),
			Properties: &armapimanagement.SubscriptionContractProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-02T17:59:06.223Z"); return t }()),
				DisplayName: to.Ptr("Unlimited"),
				OwnerID:     to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/5931a75ae4bbd512a88c680b"),
				Scope:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/5600b59475ff190048060002"),
				State:       to.Ptr(armapimanagement.SubscriptionStateSubmitted),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SubscriptionContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SubscriptionContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubscription_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateSubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewSubscriptionClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"testsub",
		armapimanagement.SubscriptionCreateParameters{
			Properties: &armapimanagement.SubscriptionCreateParameterProperties{
				DisplayName: to.Ptr("testsub"),
				OwnerID:     to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/57127d485157a511ace86ae7"),
				Scope:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/5600b59475ff190048060002"),
			},
		},
		&armapimanagement.SubscriptionClientCreateOrUpdateOptions{Notify: nil,
			IfMatch: nil,
			AppType: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.SubscriptionContract{
			Name: to.Ptr("testsub"),
			Type: to.Ptr("Microsoft.ApiManagement/service/subscriptions"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/subscriptions/testsub"),
			Properties: &armapimanagement.SubscriptionContractProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-02T23:34:03.1055076Z"); return t }()),
				DisplayName: to.Ptr("testsub"),
				OwnerID:     to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/57127d485157a511ace86ae7"),
				Scope:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/5600b59475ff190048060002"),
				State:       to.Ptr(armapimanagement.SubscriptionStateSubmitted),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SubscriptionContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SubscriptionContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubscription_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateSubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewSubscriptionClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"testsub",
		"*",
		armapimanagement.SubscriptionUpdateParameters{
			Properties: &armapimanagement.SubscriptionUpdateParameterProperties{
				DisplayName: to.Ptr("testsub"),
			},
		},
		&armapimanagement.SubscriptionClientUpdateOptions{Notify: nil,
			AppType: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.SubscriptionContract{
			Name: to.Ptr("testsub"),
			Type: to.Ptr("Microsoft.ApiManagement/service/subscriptions"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/subscriptions/testsub"),
			Properties: &armapimanagement.SubscriptionContractProperties{
				CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-02T17:59:06.223Z"); return t }()),
				DisplayName: to.Ptr("testsub"),
				OwnerID:     to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/5931a75ae4bbd512a88c680b"),
				Scope:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/5600b59475ff190048060002"),
				State:       to.Ptr(armapimanagement.SubscriptionStateSubmitted),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SubscriptionContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SubscriptionContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubscription_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteSubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewSubscriptionClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"testsub",
		"*",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteSubscription.json: %v", err)
	}
}

func TestSubscription_RegeneratePrimaryKey(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementSubscriptionRegeneratePrimaryKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementSubscriptionRegeneratePrimaryKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewSubscriptionClient("subid", cred, &options)
	_, err := client.RegeneratePrimaryKey(ctx,
		"rg1",
		"apimService1",
		"testsub",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementSubscriptionRegeneratePrimaryKey.json: %v", err)
	}
}

func TestSubscription_RegenerateSecondaryKey(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementSubscriptionRegenerateSecondaryKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementSubscriptionRegenerateSecondaryKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewSubscriptionClient("subid", cred, &options)
	_, err := client.RegenerateSecondaryKey(ctx,
		"rg1",
		"apimService1",
		"testsub",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementSubscriptionRegenerateSecondaryKey.json: %v", err)
	}
}

func TestSubscription_ListSecrets(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementSubscriptionListSecrets.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementSubscriptionListSecrets"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewSubscriptionClient("subid", cred, &options)
	res, err := client.ListSecrets(ctx,
		"rg1",
		"apimService1",
		"5931a769d8d14f0ad8ce13b8",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementSubscriptionListSecrets.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.SubscriptionKeysContract{
			PrimaryKey:   to.Ptr("<primaryKey>"),
			SecondaryKey: to.Ptr("<secondaryKey>"),
		}
		if !reflect.DeepEqual(exampleRes, res.SubscriptionKeysContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SubscriptionKeysContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementSubscriptionListSecrets.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTagResource_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListTagResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListTagResources"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTagResourceClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.TagResourceClientListByServiceOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListTagResources.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.TagResourceCollection{
			Value: []*armapimanagement.TagResourceContract{
				{
					Operation: &armapimanagement.OperationTagResourceContractProperties{
						Name:        to.Ptr("Create resource"),
						Method:      to.Ptr("POST"),
						Description: to.Ptr("A demonstration of a POST call based on the echo backend above. The request body is expected to contain JSON-formatted data (see example below). A policy is used to automatically transform any request sent in JSON directly to XML. In a real-world scenario this could be used to enable modern clients to speak to a legacy backend."),
						APIName:     to.Ptr("Echo API"),
						APIRevision: to.Ptr("1"),
						ID:          to.Ptr("/apis/echo-api/operations/create-resource"),
						URLTemplate: to.Ptr("/resource"),
					},
					Tag: &armapimanagement.TagResourceContractProperties{
						Name: to.Ptr("awesomeTag"),
						ID:   to.Ptr("/tags/apitag123"),
					},
				},
				{
					API: &armapimanagement.APITagResourceContractProperties{
						APIRevision: to.Ptr("1"),
						IsCurrent:   to.Ptr(true),
						Name:        to.Ptr("Echo API"),
						Path:        to.Ptr("echo"),
						ID:          to.Ptr("/apis/echo-api"),
						ServiceURL:  to.Ptr("http://echoapi.cloudapp.net/api"),
					},
					Tag: &armapimanagement.TagResourceContractProperties{
						Name: to.Ptr("awesomeTag"),
						ID:   to.Ptr("/tags/apitag123"),
					},
				},
				{
					Product: &armapimanagement.ProductTagResourceContractProperties{
						Description:          to.Ptr("Subscribers will be able to run 5 calls/minute up to a maximum of 100 calls/week."),
						ApprovalRequired:     to.Ptr(false),
						State:                to.Ptr(armapimanagement.ProductStatePublished),
						SubscriptionRequired: to.Ptr(true),
						SubscriptionsLimit:   to.Ptr[int32](1),
						Terms:                to.Ptr(""),
						Name:                 to.Ptr("Starter"),
						ID:                   to.Ptr("/products/starter"),
					},
					Tag: &armapimanagement.TagResourceContractProperties{
						Name: to.Ptr("awesomeTag"),
						ID:   to.Ptr("/tags/apitag123"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TagResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TagResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListTagResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTenantAccess_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListTenantAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListTenantAccess"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTenantAccessClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.TenantAccessClientListByServiceOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListTenantAccess.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.AccessInformationCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.AccessInformationContract{
				{
					Name: to.Ptr("access"),
					Type: to.Ptr("Microsoft.ApiManagement/service/tenant"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/tenant/access"),
					Properties: &armapimanagement.AccessInformationContractProperties{
						Enabled: to.Ptr(true),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccessInformationCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccessInformationCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListTenantAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTenantAccess_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadTenantAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadTenantAccess"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTenantAccessClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		armapimanagement.AccessIDNameAccess,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadTenantAccess.json: %v", err)
	}
}

func TestTenantAccess_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetTenantAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetTenantAccess"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTenantAccessClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		armapimanagement.AccessIDNameAccess,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetTenantAccess.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.AccessInformationContract{
			Name: to.Ptr("access"),
			Type: to.Ptr("Microsoft.ApiManagement/service/tenant"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/tenant/access"),
			Properties: &armapimanagement.AccessInformationContractProperties{
				Enabled: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AccessInformationContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessInformationContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetTenantAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetTenantGitAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetTenantGitAccess"},
	})
	client = armapimanagement.NewTenantAccessClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg1",
		"apimService1",
		armapimanagement.AccessIDNameGitAccess,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetTenantGitAccess.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.AccessInformationContract{
			Name: to.Ptr("gitAccess"),
			Type: to.Ptr("Microsoft.ApiManagement/service/tenant"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/tenant/gitAccess"),
			Properties: &armapimanagement.AccessInformationContractProperties{
				Enabled:     to.Ptr(true),
				PrincipalID: to.Ptr("git"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AccessInformationContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessInformationContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetTenantGitAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTenantAccess_Create(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateTenantAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateTenantAccess"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTenantAccessClient("subid", cred, &options)
	res, err := client.Create(ctx,
		"rg1",
		"apimService1",
		armapimanagement.AccessIDNameAccess,
		"*",
		armapimanagement.AccessInformationCreateParameters{
			Properties: &armapimanagement.AccessInformationCreateParameterProperties{
				Enabled: to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateTenantAccess.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.AccessInformationContract{
			Name: to.Ptr("access"),
			Type: to.Ptr("Microsoft.ApiManagement/service/tenant"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/tenant/access"),
			Properties: &armapimanagement.AccessInformationContractProperties{
				Enabled: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AccessInformationContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessInformationContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateTenantAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTenantAccess_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateTenantAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateTenantAccess"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTenantAccessClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		armapimanagement.AccessIDNameAccess,
		"*",
		armapimanagement.AccessInformationUpdateParameters{
			Properties: &armapimanagement.AccessInformationUpdateParameterProperties{
				Enabled: to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateTenantAccess.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.AccessInformationContract{
			Name: to.Ptr("access"),
			Type: to.Ptr("Microsoft.ApiManagement/service/tenant"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/tenant/access"),
			Properties: &armapimanagement.AccessInformationContractProperties{
				Enabled: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AccessInformationContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessInformationContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateTenantAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTenantAccess_RegeneratePrimaryKey(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantAccessRegenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementTenantAccessRegenerateKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTenantAccessClient("subid", cred, &options)
	_, err := client.RegeneratePrimaryKey(ctx,
		"rg1",
		"apimService1",
		armapimanagement.AccessIDNameAccess,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantAccessRegenerateKey.json: %v", err)
	}
}

func TestTenantAccess_RegenerateSecondaryKey(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantAccessRegenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementTenantAccessRegenerateKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTenantAccessClient("subid", cred, &options)
	_, err := client.RegenerateSecondaryKey(ctx,
		"rg1",
		"apimService1",
		armapimanagement.AccessIDNameAccess,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantAccessRegenerateKey.json: %v", err)
	}
}

func TestTenantAccess_ListSecrets(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListSecretsTenantAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListSecretsTenantAccess"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTenantAccessClient("subid", cred, &options)
	res, err := client.ListSecrets(ctx,
		"rg1",
		"apimService1",
		armapimanagement.AccessIDNameAccess,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListSecretsTenantAccess.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.AccessInformationSecretsContract{
			Enabled:      to.Ptr(true),
			ID:           to.Ptr("5600b59375ff190048030003"),
			PrimaryKey:   to.Ptr("<primaryKey>"),
			SecondaryKey: to.Ptr("<secondaryKey>"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccessInformationSecretsContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessInformationSecretsContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListSecretsTenantAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTenantAccessGit_RegeneratePrimaryKey(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantAccessRegenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementTenantAccessRegenerateKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTenantAccessGitClient("subid", cred, &options)
	_, err := client.RegeneratePrimaryKey(ctx,
		"rg1",
		"apimService1",
		armapimanagement.AccessIDNameAccess,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantAccessRegenerateKey.json: %v", err)
	}
}

func TestTenantAccessGit_RegenerateSecondaryKey(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantAccessRegenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementTenantAccessRegenerateKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTenantAccessGitClient("subid", cred, &options)
	_, err := client.RegenerateSecondaryKey(ctx,
		"rg1",
		"apimService1",
		armapimanagement.AccessIDNameAccess,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantAccessRegenerateKey.json: %v", err)
	}
}

func TestTenantConfiguration_Deploy(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantConfigurationDeploy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementTenantConfigurationDeploy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTenantConfigurationClient("subid", cred, &options)
	poller, err := client.BeginDeploy(ctx,
		"rg1",
		"apimService1",
		armapimanagement.ConfigurationIDNameConfiguration,
		armapimanagement.DeployConfigurationParameters{
			Properties: &armapimanagement.DeployConfigurationParameterProperties{
				Branch: to.Ptr("master"),
			},
		},
		&armapimanagement.TenantConfigurationClientBeginDeployOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantConfigurationDeploy.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantConfigurationDeploy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.OperationResultContract{
			Name: to.Ptr("6074e652093a9d0dac3d733c"),
			Type: to.Ptr("Microsoft.ApiManagement/service/tenant/operationResults"),
			ID:   to.Ptr("6074e652093a9d0dac3d733c"),
			Properties: &armapimanagement.OperationResultContractProperties{
				Error: &armapimanagement.ErrorResponseBody{
					Code:    to.Ptr("ValidationError"),
					Message: to.Ptr("File not found: 'api-management/configuration.json'"),
				},
				Started: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-26T17:06:54.303Z"); return t }()),
				Status:  to.Ptr(armapimanagement.AsyncOperationStatusFailed),
				Updated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-26T17:07:21.777Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationResultContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationResultContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantConfigurationDeploy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTenantConfiguration_Save(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantConfigurationSave.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementTenantConfigurationSave"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTenantConfigurationClient("subid", cred, &options)
	poller, err := client.BeginSave(ctx,
		"rg1",
		"apimService1",
		armapimanagement.ConfigurationIDNameConfiguration,
		armapimanagement.SaveConfigurationParameter{
			Properties: &armapimanagement.SaveConfigurationParameterProperties{
				Branch: to.Ptr("master"),
			},
		},
		&armapimanagement.TenantConfigurationClientBeginSaveOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantConfigurationSave.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantConfigurationSave.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.OperationResultContract{
			Name: to.Ptr("6074e652093a9d0dac3d733c"),
			Type: to.Ptr("Microsoft.ApiManagement/service/tenant/operationResults"),
			ID:   to.Ptr("6074e652093a9d0dac3d733c"),
			Properties: &armapimanagement.OperationResultContractProperties{
				ActionLog:  []*armapimanagement.OperationResultLogItemContract{},
				ResultInfo: to.Ptr("The configuration was successfully saved to master as commit c0ae274f6046912107bad734834cbf65918668b6."),
				Started:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-13T00:31:14.94Z"); return t }()),
				Status:     to.Ptr(armapimanagement.AsyncOperationStatusSucceeded),
				Updated:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-13T00:31:27.59Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationResultContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationResultContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantConfigurationSave.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTenantConfiguration_Validate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantConfigurationValidate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementTenantConfigurationValidate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTenantConfigurationClient("subid", cred, &options)
	poller, err := client.BeginValidate(ctx,
		"rg1",
		"apimService1",
		armapimanagement.ConfigurationIDNameConfiguration,
		armapimanagement.DeployConfigurationParameters{
			Properties: &armapimanagement.DeployConfigurationParameterProperties{
				Branch: to.Ptr("master"),
			},
		},
		&armapimanagement.TenantConfigurationClientBeginValidateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantConfigurationValidate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantConfigurationValidate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.OperationResultContract{
			Name: to.Ptr("6074ec02093a9d0dac3d7345"),
			Type: to.Ptr("Microsoft.ApiManagement/service/tenant/operationResults"),
			ID:   to.Ptr("6074ec02093a9d0dac3d7345"),
			Properties: &armapimanagement.OperationResultContractProperties{
				ActionLog:  []*armapimanagement.OperationResultLogItemContract{},
				ResultInfo: to.Ptr("Validation is successfull"),
				Started:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-13T00:55:30.62Z"); return t }()),
				Status:     to.Ptr(armapimanagement.AsyncOperationStatusSucceeded),
				Updated:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-13T00:55:39.857Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationResultContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationResultContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantConfigurationValidate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTenantConfiguration_GetSyncState(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantAccessSyncState.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementTenantAccessSyncState"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewTenantConfigurationClient("subid", cred, &options)
	res, err := client.GetSyncState(ctx,
		"rg1",
		"apimService1",
		armapimanagement.ConfigurationIDNameConfiguration,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantAccessSyncState.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.TenantConfigurationSyncStateContract{
			Name: to.Ptr("syncState"),
			Type: to.Ptr("Microsoft.ApiManagement/service/tenant/syncState"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/tenant/configuration/syncState"),
			Properties: &armapimanagement.TenantConfigurationSyncStateContractProperties{
				Branch:                  to.Ptr("master"),
				CommitID:                to.Ptr("de891c2342c7058dde45e5e624eae7e558c94683"),
				ConfigurationChangeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-13T00:11:43.862781Z"); return t }()),
				IsExport:                to.Ptr(true),
				IsGitEnabled:            to.Ptr(true),
				IsSynced:                to.Ptr(true),
				LastOperationID:         to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/tenant/configuration/operationResults/6074f0bd093a9d0dac3d7347"),
				SyncDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-13T01:15:53.9824995Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TenantConfigurationSyncStateContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TenantConfigurationSyncStateContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementTenantAccessSyncState.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUser_ListByService(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListUsers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListUsers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewUserClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"apimService1",
		&armapimanagement.UserClientListByServiceOptions{Filter: nil,
			Top:          nil,
			Skip:         nil,
			ExpandGroups: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListUsers.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.UserCollection{
			Count: to.Ptr[int64](3),
			Value: []*armapimanagement.UserContract{
				{
					Name: to.Ptr("1"),
					Type: to.Ptr("Microsoft.ApiManagement/service/users"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/1"),
					Properties: &armapimanagement.UserContractProperties{
						Identities: []*armapimanagement.UserIdentityContract{
							{
								ID:       to.Ptr("admin@live.com"),
								Provider: to.Ptr("Azure"),
							}},
						State:            to.Ptr(armapimanagement.UserStateActive),
						Email:            to.Ptr("admin@live.com"),
						FirstName:        to.Ptr("Administrator"),
						LastName:         to.Ptr(""),
						RegistrationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-09-22T01:57:39.677Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("56eaec62baf08b06e46d27fd"),
					Type: to.Ptr("Microsoft.ApiManagement/service/users"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/56eaec62baf08b06e46d27fd"),
					Properties: &armapimanagement.UserContractProperties{
						Identities: []*armapimanagement.UserIdentityContract{
							{
								ID:       to.Ptr("foo.bar.83@gmail.com"),
								Provider: to.Ptr("Basic"),
							}},
						State:            to.Ptr(armapimanagement.UserStateActive),
						Email:            to.Ptr("foo.bar.83@gmail.com"),
						FirstName:        to.Ptr("foo"),
						LastName:         to.Ptr("bar"),
						RegistrationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-17T17:41:56.327Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("5931a75ae4bbd512a88c680b"),
					Type: to.Ptr("Microsoft.ApiManagement/service/users"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/5931a75ae4bbd512a88c680b"),
					Properties: &armapimanagement.UserContractProperties{
						Identities: []*armapimanagement.UserIdentityContract{
							{
								ID:       to.Ptr("*************"),
								Provider: to.Ptr("Microsoft"),
							}},
						State:            to.Ptr(armapimanagement.UserStateActive),
						Email:            to.Ptr("foobar@outlook.com"),
						FirstName:        to.Ptr("foo"),
						LastName:         to.Ptr("bar"),
						RegistrationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-02T17:58:50.357Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UserCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UserCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListUsers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUser_GetEntityTag(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadUser.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementHeadUser"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewUserClient("subid", cred, &options)
	_, err := client.GetEntityTag(ctx,
		"rg1",
		"apimService1",
		"5931a75ae4bbd512a88c680b",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementHeadUser.json: %v", err)
	}
}

func TestUser_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetUser.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetUser"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewUserClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"5931a75ae4bbd512a88c680b",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetUser.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.UserContract{
			Name: to.Ptr("5931a75ae4bbd512a88c680b"),
			Type: to.Ptr("Microsoft.ApiManagement/service/users"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/5931a75ae4bbd512a88c680b"),
			Properties: &armapimanagement.UserContractProperties{
				Identities: []*armapimanagement.UserIdentityContract{
					{
						ID:       to.Ptr("*************"),
						Provider: to.Ptr("Microsoft"),
					}},
				State:            to.Ptr(armapimanagement.UserStateActive),
				Email:            to.Ptr("foobar@outlook.com"),
				FirstName:        to.Ptr("foo"),
				LastName:         to.Ptr("bar"),
				RegistrationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-02T17:58:50.357Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.UserContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.UserContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetUser.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUser_CreateOrUpdate(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateUser.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementCreateUser"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewUserClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"apimService1",
		"5931a75ae4bbd512288c680b",
		armapimanagement.UserCreateParameters{
			Properties: &armapimanagement.UserCreateParameterProperties{
				Confirmation: to.Ptr(armapimanagement.ConfirmationSignup),
				Email:        to.Ptr("foobar@outlook.com"),
				FirstName:    to.Ptr("foo"),
				LastName:     to.Ptr("bar"),
			},
		},
		&armapimanagement.UserClientCreateOrUpdateOptions{Notify: nil,
			IfMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateUser.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.UserContract{
			Name: to.Ptr("5931a75ae4bbd512288c680b"),
			Type: to.Ptr("Microsoft.ApiManagement/service/users"),
			ID:   to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/5931a75ae4bbd512288c680b"),
			Properties: &armapimanagement.UserContractProperties{
				Identities: []*armapimanagement.UserIdentityContract{
					{
						ID:       to.Ptr("foobar@outlook.com"),
						Provider: to.Ptr("Basic"),
					}},
				State:            to.Ptr(armapimanagement.UserStateActive),
				Email:            to.Ptr("foobar@outlook.com"),
				FirstName:        to.Ptr("foo"),
				Groups:           []*armapimanagement.GroupContractProperties{},
				LastName:         to.Ptr("bar"),
				RegistrationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-07T21:21:29.16Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.UserContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.UserContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateUser.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUser_Update(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateUser.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUpdateUser"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewUserClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"apimService1",
		"5931a75ae4bbd512a88c680b",
		"*",
		armapimanagement.UserUpdateParameters{
			Properties: &armapimanagement.UserUpdateParametersProperties{
				Email:     to.Ptr("foobar@outlook.com"),
				FirstName: to.Ptr("foo"),
				LastName:  to.Ptr("bar"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateUser.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.UserContract{
			Name: to.Ptr("5931a75ae4bbd512a88c680b"),
			Type: to.Ptr("Microsoft.ApiManagement/service/users"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/5931a75ae4bbd512a88c680b"),
			Properties: &armapimanagement.UserContractProperties{
				Identities: []*armapimanagement.UserIdentityContract{
					{
						ID:       to.Ptr("*************"),
						Provider: to.Ptr("Microsoft"),
					}},
				State:            to.Ptr(armapimanagement.UserStateActive),
				Email:            to.Ptr("foobar@outlook.com"),
				FirstName:        to.Ptr("foo"),
				LastName:         to.Ptr("bar"),
				RegistrationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-02T17:58:50.357Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.UserContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.UserContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUpdateUser.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUser_Delete(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteUser.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementDeleteUser"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewUserClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"apimService1",
		"5931a75ae4bbd512288c680b",
		"*",
		&armapimanagement.UserClientDeleteOptions{DeleteSubscriptions: nil,
			Notify:  nil,
			AppType: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementDeleteUser.json: %v", err)
	}
}

func TestUser_GetSharedAccessToken(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUserToken.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUserToken"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewUserClient("subid", cred, &options)
	res, err := client.GetSharedAccessToken(ctx,
		"rg1",
		"apimService1",
		"userId1718",
		armapimanagement.UserTokenParameters{
			Properties: &armapimanagement.UserTokenParameterProperties{
				Expiry:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-21T00:44:24.2845269Z"); return t }()),
				KeyType: to.Ptr(armapimanagement.KeyTypePrimary),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUserToken.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.UserTokenResult{
			Value: to.Ptr("userId1718&201904210044&9A1GR1f5WIhFvFmzQG+xxxxxxxxxxx/kBeu87DWad3tkasUXuvPL+MgzlwUHyg=="),
		}
		if !reflect.DeepEqual(exampleRes, res.UserTokenResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.UserTokenResult)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUserToken.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUserGroup_List(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListUserGroups.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListUserGroups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewUserGroupClient("subid", cred, &options)
	pager := client.List("rg1",
		"apimService1",
		"57681833a40f7eb6c49f6acf",
		&armapimanagement.UserGroupClientListOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListUserGroups.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.GroupCollection{
			Count: to.Ptr[int64](1),
			Value: []*armapimanagement.GroupContract{
				{
					Name: to.Ptr("5600b57e7e8880006a020002"),
					Type: to.Ptr("Microsoft.ApiManagement/service/users/groups"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/57681833a40f7eb6c49f6acf/groups/5600b57e7e8880006a020002"),
					Properties: &armapimanagement.GroupContractProperties{
						Type:        to.Ptr(armapimanagement.GroupTypeSystem),
						Description: to.Ptr("Developers is a built-in group. Its membership is managed by the system. Signed-in users fall into this group."),
						BuiltIn:     to.Ptr(true),
						DisplayName: to.Ptr("Developers"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GroupCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GroupCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListUserGroups.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUserSubscription_List(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListUserSubscriptions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListUserSubscriptions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewUserSubscriptionClient("subid", cred, &options)
	pager := client.List("rg1",
		"apimService1",
		"57681833a40f7eb6c49f6acf",
		&armapimanagement.UserSubscriptionClientListOptions{Filter: nil,
			Top:  nil,
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListUserSubscriptions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.SubscriptionCollection{
			Value: []*armapimanagement.SubscriptionContract{
				{
					Name: to.Ptr("57681850a40f7eb6c49f6ae3"),
					Type: to.Ptr("Microsoft.ApiManagement/service/users/subscriptions"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/57681833a40f7eb6c49f6acf/subscriptions/57681850a40f7eb6c49f6ae3"),
					Properties: &armapimanagement.SubscriptionContractProperties{
						CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-06-20T16:22:39.547Z"); return t }()),
						DisplayName: to.Ptr("57681850a40f7eb6c49f6ae5"),
						OwnerID:     to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/57681833a40f7eb6c49f6acf"),
						Scope:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/5768181ea40f7eb6c49f6ac7"),
						StartDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-06-20T00:00:00Z"); return t }()),
						State:       to.Ptr(armapimanagement.SubscriptionStateActive),
					},
				},
				{
					Name: to.Ptr("57681850a40f7eb6c49f6b2b"),
					Type: to.Ptr("Microsoft.ApiManagement/service/users/subscriptions"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/57681833a40f7eb6c49f6acf/subscriptions/57681850a40f7eb6c49f6b2b"),
					Properties: &armapimanagement.SubscriptionContractProperties{
						CreatedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-06-20T16:22:41.103Z"); return t }()),
						DisplayName: to.Ptr("57681850a40f7eb6c49f6b2d"),
						OwnerID:     to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/57681833a40f7eb6c49f6acf"),
						Scope:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/5768181ea40f7eb6c49f6ac7"),
						StartDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-06-20T00:00:00Z"); return t }()),
						State:       to.Ptr(armapimanagement.SubscriptionStateActive),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SubscriptionCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SubscriptionCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListUserSubscriptions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUserSubscription_Get(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetUserSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementGetUserSubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewUserSubscriptionClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"apimService1",
		"1",
		"5fa9b096f3df14003c070001",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetUserSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armapimanagement.SubscriptionContract{
			Name: to.Ptr("5fa9b096f3df14003c070001"),
			Type: to.Ptr("Microsoft.ApiManagement/service/users/subscriptions"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/1/subscriptions/5fa9b096f3df14003c070001"),
			Properties: &armapimanagement.SubscriptionContractProperties{
				AllowTracing: to.Ptr(true),
				CreatedDate:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-09T21:11:50.58Z"); return t }()),
				OwnerID:      to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/users/1"),
				Scope:        to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/starter"),
				State:        to.Ptr(armapimanagement.SubscriptionStateActive),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SubscriptionContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SubscriptionContract)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementGetUserSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUserIdentities_List(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListUserIdentities.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementListUserIdentities"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewUserIdentitiesClient("subid", cred, &options)
	pager := client.List("rg1",
		"apimService1",
		"57f2af53bb17172280f44057",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListUserIdentities.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armapimanagement.UserIdentityCollection{
			Value: []*armapimanagement.UserIdentityContract{
				{
					ID:       to.Ptr("086cf9********55ab"),
					Provider: to.Ptr("Microsoft"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UserIdentityCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UserIdentityCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementListUserIdentities.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUserConfirmationPassword_Send(t *testing.T) {
	// From example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUserConfirmationPasswordSend.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ApiManagementUserConfirmationPasswordSend"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armapimanagement.NewUserConfirmationPasswordClient("subid", cred, &options)
	_, err := client.Send(ctx,
		"rg1",
		"apimService1",
		"57127d485157a511ace86ae7",
		&armapimanagement.UserConfirmationPasswordClientSendOptions{AppType: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementUserConfirmationPasswordSend.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
