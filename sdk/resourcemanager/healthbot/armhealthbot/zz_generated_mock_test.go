//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhealthbot

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestBots_Create(t *testing.T) {
	// From example BotCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBotsClient(con,
		"subid")
	poller, err := client.BeginCreate(ctx,
		"healthbotClient",
		"samplebotname",
		HealthBot{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("East US"),
			},
			Identity: &Identity{
				Type: ResourceIdentityTypeSystemAssignedUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*UserAssignedIdentity{
					"/subscriptions/subscription-id/resourcegroups/myrg/providers/microsoft.managedidentity/userassignedidentities/my-mi":  &UserAssignedIdentity{},
					"/subscriptions/subscription-id/resourcegroups/myrg/providers/microsoft.managedidentity/userassignedidentities/my-mi2": &UserAssignedIdentity{},
				},
			},
			SKU: &SKU{
				Name: SKUNameF0.ToPtr(),
			},
		},
		&BotsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.HealthBot.ID == nil {
		t.Fatal("HealthBot.ID should not be nil!")
	}
}

func TestBots_Get(t *testing.T) {
	// From example ResourceInfoGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBotsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"healthbotClient",
		"samplebotname",
		&BotsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.HealthBot.ID == nil {
		t.Fatal("HealthBot.ID should not be nil!")
	}
}

func TestBots_Update(t *testing.T) {
	// From example BotUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBotsClient(con,
		"subid")
	res, err := client.Update(ctx,
		"healthbotClient",
		"samplebotname",
		HealthBotUpdateParameters{
			SKU: &SKU{
				Name: SKUNameF0.ToPtr(),
			},
		},
		&BotsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.HealthBot.ID == nil {
		t.Fatal("HealthBot.ID should not be nil!")
	}
}

func TestBots_Delete(t *testing.T) {
	// From example BotDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBotsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"healthbotClient",
		"samplebotname",
		&BotsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestBots_ListByResourceGroup(t *testing.T) {
	// From example List Bots by Resource Group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBotsClient(con,
		"subscription-id")
	pager := client.ListByResourceGroup("OneResourceGroupName",
		&BotsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("HealthBot.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("HealthBot.ID should not be nil!")
			}
		}
	}
}

func TestBots_List(t *testing.T) {
	// From example List Bots by Subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBotsClient(con,
		"subscription-id")
	pager := client.List(&BotsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("HealthBot.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("HealthBot.ID should not be nil!")
			}
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example Get Operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
