//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhealthbot_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/healthbot/armhealthbot"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestBots_Create(t *testing.T) {
	// From example specification/healthbot/resource-manager/Microsoft.HealthBot/stable/2021-06-10/examples/ResourceCreationPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BotCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthbot.NewBotsClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"healthbotClient",
		"samplebotname",
		armhealthbot.HealthBot{
			Location: to.Ptr("East US"),
			Identity: &armhealthbot.Identity{
				Type: to.Ptr(armhealthbot.ResourceIdentityTypeSystemAssignedUserAssigned),
				UserAssignedIdentities: map[string]*armhealthbot.UserAssignedIdentity{
					"/subscriptions/subscription-id/resourcegroups/myrg/providers/microsoft.managedidentity/userassignedidentities/my-mi":  {},
					"/subscriptions/subscription-id/resourcegroups/myrg/providers/microsoft.managedidentity/userassignedidentities/my-mi2": {},
				},
			},
			SKU: &armhealthbot.SKU{
				Name: to.Ptr(armhealthbot.SKUNameF0),
			},
		},
		&armhealthbot.BotsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthbot/resource-manager/Microsoft.HealthBot/stable/2021-06-10/examples/ResourceCreationPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/healthbot/resource-manager/Microsoft.HealthBot/stable/2021-06-10/examples/ResourceCreationPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthbot.HealthBot{
			Name: to.Ptr("samplebotname"),
			Type: to.Ptr("Microsoft.HealthBot/healthBots"),
			ID:   to.Ptr("/subscriptions/subscription-id/resourceGroups/OneResourceGroupName/providers/Microsoft.HealthBot/healthBots/samplebotname"),
			SystemData: &armhealthbot.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-05T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("jack@outlook.com"),
				CreatedByType:      to.Ptr(armhealthbot.IdentityTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-06T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("ryan@outlook.com"),
				LastModifiedByType: to.Ptr(armhealthbot.IdentityTypeUser),
			},
			Location: to.Ptr("East US"),
			Identity: &armhealthbot.Identity{
				Type:        to.Ptr(armhealthbot.ResourceIdentityTypeSystemAssignedUserAssigned),
				PrincipalID: to.Ptr("principalId"),
				TenantID:    to.Ptr("tenantId"),
				UserAssignedIdentities: map[string]*armhealthbot.UserAssignedIdentity{
					"/subscriptions/subscription-id/resourcegroups/myrg/providers/microsoft.managedidentity/userassignedidentities/my-mi":  {},
					"/subscriptions/subscription-id/resourcegroups/myrg/providers/microsoft.managedidentity/userassignedidentities/my-mi2": {},
				},
			},
			Properties: &armhealthbot.Properties{
				BotManagementPortalLink: to.Ptr("https://us.healthbot.microsoft.com/account/contoso"),
			},
			SKU: &armhealthbot.SKU{
				Name: to.Ptr(armhealthbot.SKUNameF0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HealthBot) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HealthBot)
			t.Fatalf("Mock response is not equal to example response for example specification/healthbot/resource-manager/Microsoft.HealthBot/stable/2021-06-10/examples/ResourceCreationPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBots_Get(t *testing.T) {
	// From example specification/healthbot/resource-manager/Microsoft.HealthBot/stable/2021-06-10/examples/ResourceInfoGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResourceInfoGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthbot.NewBotsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"healthbotClient",
		"samplebotname",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthbot/resource-manager/Microsoft.HealthBot/stable/2021-06-10/examples/ResourceInfoGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthbot.HealthBot{
			Name: to.Ptr("samplebotname"),
			Type: to.Ptr("Microsoft.HealthBot/healthBots"),
			ID:   to.Ptr("/subscriptions/subscription-id/resourceGroups/OneResourceGroupName/providers/Microsoft.HealthBot/healthBots/samplebotname"),
			SystemData: &armhealthbot.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-05T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("jack@outlook.com"),
				CreatedByType:      to.Ptr(armhealthbot.IdentityTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-06T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("ryan@outlook.com"),
				LastModifiedByType: to.Ptr(armhealthbot.IdentityTypeUser),
			},
			Location: to.Ptr("East US"),
			Identity: &armhealthbot.Identity{
				Type:        to.Ptr(armhealthbot.ResourceIdentityTypeSystemAssignedUserAssigned),
				PrincipalID: to.Ptr("principalId"),
				TenantID:    to.Ptr("tenantId"),
				UserAssignedIdentities: map[string]*armhealthbot.UserAssignedIdentity{
					"/subscriptions/subscription-id/resourcegroups/myrg/providers/microsoft.managedidentity/userassignedidentities/my-mi":  {},
					"/subscriptions/subscription-id/resourcegroups/myrg/providers/microsoft.managedidentity/userassignedidentities/my-mi2": {},
				},
			},
			Properties: &armhealthbot.Properties{
				BotManagementPortalLink: to.Ptr("https://us.healthbot.microsoft.com/account/contoso"),
			},
			SKU: &armhealthbot.SKU{
				Name: to.Ptr(armhealthbot.SKUNameF0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HealthBot) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HealthBot)
			t.Fatalf("Mock response is not equal to example response for example specification/healthbot/resource-manager/Microsoft.HealthBot/stable/2021-06-10/examples/ResourceInfoGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBots_Update(t *testing.T) {
	// From example specification/healthbot/resource-manager/Microsoft.HealthBot/stable/2021-06-10/examples/ResourceUpdatePatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BotUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthbot.NewBotsClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"healthbotClient",
		"samplebotname",
		armhealthbot.UpdateParameters{
			SKU: &armhealthbot.SKU{
				Name: to.Ptr(armhealthbot.SKUNameF0),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthbot/resource-manager/Microsoft.HealthBot/stable/2021-06-10/examples/ResourceUpdatePatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthbot.HealthBot{
			Name: to.Ptr("samplebotname"),
			Type: to.Ptr("Microsoft.HealthBot/healthBots"),
			ID:   to.Ptr("/subscriptions/subscription-id/resourceGroups/OneResourceGroupName/providers/Microsoft.HealthBot/healthBots/samplebotname"),
			SystemData: &armhealthbot.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-05T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("jack@outlook.com"),
				CreatedByType:      to.Ptr(armhealthbot.IdentityTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-06T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("ryan@outlook.com"),
				LastModifiedByType: to.Ptr(armhealthbot.IdentityTypeUser),
			},
			Location: to.Ptr("East US"),
			Identity: &armhealthbot.Identity{
				Type:        to.Ptr(armhealthbot.ResourceIdentityTypeSystemAssignedUserAssigned),
				PrincipalID: to.Ptr("principalId"),
				TenantID:    to.Ptr("tenantId"),
				UserAssignedIdentities: map[string]*armhealthbot.UserAssignedIdentity{
					"/subscriptions/subscription-id/resourcegroups/myrg/providers/microsoft.managedidentity/userassignedidentities/my-mi":  {},
					"/subscriptions/subscription-id/resourcegroups/myrg/providers/microsoft.managedidentity/userassignedidentities/my-mi2": {},
				},
			},
			Properties: &armhealthbot.Properties{
				BotManagementPortalLink: to.Ptr("https://us.healthbot.microsoft.com/account/contoso"),
			},
			SKU: &armhealthbot.SKU{
				Name: to.Ptr(armhealthbot.SKUNameF0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HealthBot) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HealthBot)
			t.Fatalf("Mock response is not equal to example response for example specification/healthbot/resource-manager/Microsoft.HealthBot/stable/2021-06-10/examples/ResourceUpdatePatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBots_Delete(t *testing.T) {
	// From example specification/healthbot/resource-manager/Microsoft.HealthBot/stable/2021-06-10/examples/ResourceDeletionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BotDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthbot.NewBotsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"healthbotClient",
		"samplebotname",
		&armhealthbot.BotsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthbot/resource-manager/Microsoft.HealthBot/stable/2021-06-10/examples/ResourceDeletionDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/healthbot/resource-manager/Microsoft.HealthBot/stable/2021-06-10/examples/ResourceDeletionDelete.json: %v", err)
	}
}

func TestBots_ListByResourceGroup(t *testing.T) {
	// From example specification/healthbot/resource-manager/Microsoft.HealthBot/stable/2021-06-10/examples/ListBotsByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Bots by Resource Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthbot.NewBotsClient("subscription-id", cred, &options)
	pager := client.ListByResourceGroup("OneResourceGroupName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/healthbot/resource-manager/Microsoft.HealthBot/stable/2021-06-10/examples/ListBotsByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhealthbot.BotResponseList{
			Value: []*armhealthbot.HealthBot{
				{
					Name: to.Ptr("samplebotname"),
					Type: to.Ptr("Microsoft.HealthBot/healthBots"),
					ID:   to.Ptr("/subscriptions/subscription-id/resourceGroups/OneResourceGroupName/providers/Microsoft.HealthBot/healthBots/samplebotname"),
					SystemData: &armhealthbot.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-05T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("jack@outlook.com"),
						CreatedByType:      to.Ptr(armhealthbot.IdentityTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-06T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("ryan@outlook.com"),
						LastModifiedByType: to.Ptr(armhealthbot.IdentityTypeUser),
					},
					Location: to.Ptr("East US"),
					Properties: &armhealthbot.Properties{
						BotManagementPortalLink: to.Ptr("https://us.healthbot.microsoft.com/account/samplebotname-1yhd91k"),
					},
					SKU: &armhealthbot.SKU{
						Name: to.Ptr(armhealthbot.SKUNameF0),
					},
				},
				{
					Name: to.Ptr("samplebotname2"),
					Type: to.Ptr("Microsoft.HealthBot/healthBots"),
					ID:   to.Ptr("/subscriptions/subscription-id/resourceGroups/OneResourceGroupName/providers/Microsoft.HealthBot/healthBots/samplebotname2"),
					SystemData: &armhealthbot.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-05T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("jack@outlook.com"),
						CreatedByType:      to.Ptr(armhealthbot.IdentityTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-06T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("ryan@outlook.com"),
						LastModifiedByType: to.Ptr(armhealthbot.IdentityTypeUser),
					},
					Location: to.Ptr("East US"),
					Identity: &armhealthbot.Identity{
						Type:        to.Ptr(armhealthbot.ResourceIdentityTypeSystemAssignedUserAssigned),
						PrincipalID: to.Ptr("principalId"),
						TenantID:    to.Ptr("tenantId"),
						UserAssignedIdentities: map[string]*armhealthbot.UserAssignedIdentity{
							"/subscriptions/subscription-id/resourcegroups/myrg/providers/microsoft.managedidentity/userassignedidentities/my-mi":  {},
							"/subscriptions/subscription-id/resourcegroups/myrg/providers/microsoft.managedidentity/userassignedidentities/my-mi2": {},
						},
					},
					Properties: &armhealthbot.Properties{
						BotManagementPortalLink: to.Ptr("https://us.healthbot.microsoft.com/account/samplebotname2-hdi1osc"),
					},
					SKU: &armhealthbot.SKU{
						Name: to.Ptr(armhealthbot.SKUNameS1),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BotResponseList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BotResponseList)
			t.Fatalf("Mock response is not equal to example response for example specification/healthbot/resource-manager/Microsoft.HealthBot/stable/2021-06-10/examples/ListBotsByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBots_List(t *testing.T) {
	// From example specification/healthbot/resource-manager/Microsoft.HealthBot/stable/2021-06-10/examples/ListBotsBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Bots by Subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthbot.NewBotsClient("subscription-id", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/healthbot/resource-manager/Microsoft.HealthBot/stable/2021-06-10/examples/ListBotsBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhealthbot.BotResponseList{
			Value: []*armhealthbot.HealthBot{
				{
					Name: to.Ptr("samplebotname2"),
					Type: to.Ptr("Microsoft.HealthBot/healthBots"),
					ID:   to.Ptr("/subscriptions/subscription-id/resourceGroups/OneResourceGroupName/providers/Microsoft.HealthBot/healthBots/samplebotname2"),
					SystemData: &armhealthbot.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-05T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("jack@outlook.com"),
						CreatedByType:      to.Ptr(armhealthbot.IdentityTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-06T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("ryan@outlook.com"),
						LastModifiedByType: to.Ptr(armhealthbot.IdentityTypeUser),
					},
					Location: to.Ptr("East US"),
					Identity: &armhealthbot.Identity{
						Type:        to.Ptr(armhealthbot.ResourceIdentityTypeSystemAssignedUserAssigned),
						PrincipalID: to.Ptr("principalId"),
						TenantID:    to.Ptr("tenantId"),
						UserAssignedIdentities: map[string]*armhealthbot.UserAssignedIdentity{
							"/subscriptions/subscription-id/resourcegroups/myrg/providers/microsoft.managedidentity/userassignedidentities/my-mi":  {},
							"/subscriptions/subscription-id/resourcegroups/myrg/providers/microsoft.managedidentity/userassignedidentities/my-mi2": {},
						},
					},
					Properties: &armhealthbot.Properties{
						BotManagementPortalLink: to.Ptr("https://us.healthbot.microsoft.com/account/samplebotname2-hdi1osc"),
					},
					SKU: &armhealthbot.SKU{
						Name: to.Ptr(armhealthbot.SKUNameS1),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BotResponseList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BotResponseList)
			t.Fatalf("Mock response is not equal to example response for example specification/healthbot/resource-manager/Microsoft.HealthBot/stable/2021-06-10/examples/ListBotsBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/healthbot/resource-manager/Microsoft.HealthBot/stable/2021-06-10/examples/GetOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthbot.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/healthbot/resource-manager/Microsoft.HealthBot/stable/2021-06-10/examples/GetOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhealthbot.AvailableOperations{
			Value: []*armhealthbot.OperationDetail{
				{
					Name: to.Ptr("Microsoft.Healthbot/healthbots/read"),
					Display: &armhealthbot.OperationDisplay{
						Description: to.Ptr("Read Azure Health Bot"),
						Operation:   to.Ptr("Read Azure Health Bot"),
						Provider:    to.Ptr("Azure Health Bot"),
						Resource:    to.Ptr("Azure Health Bot"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Healthbot/healthbots/write"),
					Display: &armhealthbot.OperationDisplay{
						Description: to.Ptr("Writes Azure Health Bot"),
						Operation:   to.Ptr("Write Azure Health Bot"),
						Provider:    to.Ptr("Azure Health Bot"),
						Resource:    to.Ptr("Azure Health Bot"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Healthbot/healthbots/delete"),
					Display: &armhealthbot.OperationDisplay{
						Description: to.Ptr("Deletes Azure Health Bot"),
						Operation:   to.Ptr("Delete Azure Health Bot"),
						Provider:    to.Ptr("Azure Health Bot"),
						Resource:    to.Ptr("Azure Health Bot"),
					},
					Origin: to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AvailableOperations) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AvailableOperations)
			t.Fatalf("Mock response is not equal to example response for example specification/healthbot/resource-manager/Microsoft.HealthBot/stable/2021-06-10/examples/GetOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
