//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armattestation

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	// From example Operations_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	_, err := client.List(ctx,
		&OperationsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAttestationProviders_Get(t *testing.T) {
	// From example AttestationProviders_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAttestationProvidersClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"myattestationprovider",
		&AttestationProvidersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AttestationProvider.ID == nil {
		t.Fatal("AttestationProvider.ID should not be nil!")
	}
}

func TestAttestationProviders_Create(t *testing.T) {
	// From example AttestationProviders_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAttestationProvidersClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Create(ctx,
		"MyResourceGroup",
		"myattestationprovider",
		AttestationServiceCreationParams{},
		&AttestationProvidersCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AttestationProvider.ID == nil {
		t.Fatal("AttestationProvider.ID should not be nil!")
	}
}

func TestAttestationProviders_Update(t *testing.T) {
	// From example AttestationProviders_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAttestationProvidersClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Update(ctx,
		"MyResourceGroup",
		"myattestationprovider",
		AttestationServicePatchParams{
			Tags: map[string]*string{
				"Property1": to.StringPtr("Value1"),
				"Property2": to.StringPtr("Value2"),
				"Property3": to.StringPtr("Value3"),
			},
		},
		&AttestationProvidersUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AttestationProvider.ID == nil {
		t.Fatal("AttestationProvider.ID should not be nil!")
	}
}

func TestAttestationProviders_Delete(t *testing.T) {
	// From example AttestationProviders_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAttestationProvidersClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.Delete(ctx,
		"sample-resource-group",
		"myattestationprovider",
		&AttestationProvidersDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAttestationProviders_List(t *testing.T) {
	// From example AttestationProviders_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAttestationProvidersClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.List(ctx,
		&AttestationProvidersListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAttestationProviders_ListByResourceGroup(t *testing.T) {
	// From example AttestationProviders_ListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAttestationProvidersClient(con,
		"6c96b33e-f5b8-40a6-9011-5cb1c58b0915")
	_, err := client.ListByResourceGroup(ctx,
		"testrg1",
		&AttestationProvidersListByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAttestationProviders_ListDefault(t *testing.T) {
	// From example AttestationProviders_GetDefault
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAttestationProvidersClient(con,
		"6c96b33e-f5b8-40a6-9011-5cb1c58b0915")
	_, err := client.ListDefault(ctx,
		&AttestationProvidersListDefaultOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAttestationProviders_GetDefaultByLocation(t *testing.T) {
	// From example AttestationProviders_GetDefaultWithLocation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAttestationProvidersClient(con,
		"6c96b33e-f5b8-40a6-9011-5cb1c58b0915")
	res, err := client.GetDefaultByLocation(ctx,
		"Central US",
		&AttestationProvidersGetDefaultByLocationOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AttestationProvider.ID == nil {
		t.Fatal("AttestationProvider.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example AttestationProviderListPrivateEndpointConnections
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"{subscription-id}")
	_, err := client.List(ctx,
		"res6977",
		"sto2527",
		&PrivateEndpointConnectionsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example AttestationProviderGetPrivateEndpointConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"{subscription-id}")
	res, err := client.Get(ctx,
		"res6977",
		"sto2527",
		"{privateEndpointConnectionName}",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Create(t *testing.T) {
	// From example AttestationProviderPutPrivateEndpointConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"{subscription-id}")
	res, err := client.Create(ctx,
		"res7687",
		"sto9699",
		"{privateEndpointConnectionName}",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionState{
					Description: to.StringPtr("Auto-Approved"),
					Status:      PrivateEndpointServiceConnectionStatusApproved.ToPtr(),
				},
			},
		},
		&PrivateEndpointConnectionsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example AttestationProviderDeletePrivateEndpointConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"{subscription-id}")
	_, err := client.Delete(ctx,
		"res6977",
		"sto2527",
		"{privateEndpointConnectionName}",
		&PrivateEndpointConnectionsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
