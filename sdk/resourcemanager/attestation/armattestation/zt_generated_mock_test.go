//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armattestation_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"
	"time"

	"encoding/json"
	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/attestation/armattestation"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armattestation.NewOperationsClient(cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Operations_List.json: %v", err)
	}
	// Response check
	{
		exampleRes := armattestation.OperationList{}
		if !reflect.DeepEqual(exampleRes, res.OperationList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAttestationProviders_Get(t *testing.T) {
	// From example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Get_AttestationProvider.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AttestationProviders_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armattestation.NewProvidersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"myattestationprovider",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Get_AttestationProvider.json: %v", err)
	}
	// Response check
	{
		exampleRes := armattestation.Provider{
			Name:     to.Ptr("myattestationprovider"),
			Type:     to.Ptr("Microsoft.Attestation/attestationProviders"),
			ID:       to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MyResourceGroup/providers/Microsoft.Attestation/attestationProviders/myattestationprovider"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"Property1": to.Ptr("Value1"),
				"Property2": to.Ptr("Value2"),
				"Property3": to.Ptr("Value3"),
			},
			Properties: &armattestation.StatusResult{
				AttestURI:  to.Ptr("https://superservice.attestation.azure.net"),
				Status:     to.Ptr(armattestation.AttestationServiceStatusReady),
				TrustModel: to.Ptr("Isolated"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Provider) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Provider)
			t.Fatalf("Mock response is not equal to example response for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Get_AttestationProvider.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAttestationProviders_Create(t *testing.T) {
	// From example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Create_AttestationProvider.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AttestationProviders_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armattestation.NewProvidersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Create(ctx,
		"MyResourceGroup",
		"myattestationprovider",
		armattestation.ServiceCreationParams{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Create_AttestationProvider.json: %v", err)
	}
	// Response check
	{
		exampleRes := armattestation.Provider{
			Name:     to.Ptr("myattestationprovider"),
			Type:     to.Ptr("Microsoft.Attestation/attestationProviders"),
			ID:       to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MyResourceGroup/providers/Microsoft.Attestation/attestationProviders/myattestationprovider"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"Property1": to.Ptr("Value1"),
				"Property2": to.Ptr("Value2"),
				"Property3": to.Ptr("Value3"),
			},
			Properties: &armattestation.StatusResult{
				AttestURI:  to.Ptr("https://superservice.attestation.azure.net"),
				Status:     to.Ptr(armattestation.AttestationServiceStatusReady),
				TrustModel: to.Ptr("Isolated"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Provider) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Provider)
			t.Fatalf("Mock response is not equal to example response for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Create_AttestationProvider.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAttestationProviders_Update(t *testing.T) {
	// From example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Update_AttestationProvider.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AttestationProviders_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armattestation.NewProvidersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"MyResourceGroup",
		"myattestationprovider",
		armattestation.ServicePatchParams{
			Tags: map[string]*string{
				"Property1": to.Ptr("Value1"),
				"Property2": to.Ptr("Value2"),
				"Property3": to.Ptr("Value3"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Update_AttestationProvider.json: %v", err)
	}
	// Response check
	{
		exampleRes := armattestation.Provider{
			Name:     to.Ptr("myattestationprovider"),
			Type:     to.Ptr("Microsoft.Attestation/attestationProviders"),
			ID:       to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MyResourceGroup/providers/Microsoft.Attestation/attestationProviders/myattestationprovider"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"Property1": to.Ptr("Value1"),
				"Property2": to.Ptr("Value2"),
				"Property3": to.Ptr("Value3"),
			},
			Properties: &armattestation.StatusResult{
				AttestURI:  to.Ptr("https://superservice.attestation.azure.net"),
				Status:     to.Ptr(armattestation.AttestationServiceStatusReady),
				TrustModel: to.Ptr("Isolated"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Provider) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Provider)
			t.Fatalf("Mock response is not equal to example response for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Update_AttestationProvider.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAttestationProviders_Delete(t *testing.T) {
	// From example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Delete_AttestationProvider.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AttestationProviders_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armattestation.NewProvidersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"sample-resource-group",
		"myattestationprovider",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Delete_AttestationProvider.json: %v", err)
	}
}

func TestAttestationProviders_List(t *testing.T) {
	// From example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Get_AttestationProvidersList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AttestationProviders_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armattestation.NewProvidersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Get_AttestationProvidersList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armattestation.ProviderListResult{
			Value: []*armattestation.Provider{
				{
					Name:     to.Ptr("myattestationprovider"),
					Type:     to.Ptr("Microsoft.Attestation/attestationProviders"),
					ID:       to.Ptr("subscriptions/6c96b33e-f5b8-40a6-9011-5cb1c58b0915/resourceGroups/testrg1/providers/Microsoft.Attestation/attestationProviders/myattestationprovider"),
					Location: to.Ptr("East US"),
					Properties: &armattestation.StatusResult{
						Status: to.Ptr(armattestation.AttestationServiceStatusReady),
					},
				},
				{
					Name:     to.Ptr("codes2"),
					Type:     to.Ptr("Microsoft.Attestation/attestationProviders"),
					ID:       to.Ptr("subscriptions/6c96b33e-f5b8-40a6-9011-5cb1c58b0915/resourceGroups/testrg2/providers/Microsoft.Attestation/attestationProviders/codes2"),
					Location: to.Ptr("East US"),
					Properties: &armattestation.StatusResult{
						Status: to.Ptr(armattestation.AttestationServiceStatusReady),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ProviderListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProviderListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Get_AttestationProvidersList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAttestationProviders_ListByResourceGroup(t *testing.T) {
	// From example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Get_AttestationProvidersListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AttestationProviders_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armattestation.NewProvidersClient("6c96b33e-f5b8-40a6-9011-5cb1c58b0915", cred, &options)
	res, err := client.ListByResourceGroup(ctx,
		"testrg1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Get_AttestationProvidersListByResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armattestation.ProviderListResult{
			Value: []*armattestation.Provider{
				{
					Name:     to.Ptr("myattestationprovider"),
					Type:     to.Ptr("Microsoft.Attestation/attestationProviders"),
					ID:       to.Ptr("subscriptions/6c96b33e-f5b8-40a6-9011-5cb1c58b0915/resourceGroups/testrg1/providers/Microsoft.Attestation/attestationProviders/myattestationprovider"),
					Location: to.Ptr("East US"),
					Properties: &armattestation.StatusResult{
						Status: to.Ptr(armattestation.AttestationServiceStatusReady),
					},
				},
				{
					Name:     to.Ptr("codes2"),
					Type:     to.Ptr("Microsoft.Attestation/attestationProviders"),
					ID:       to.Ptr("subscriptions/6c96b33e-f5b8-40a6-9011-5cb1c58b0915/resourceGroups/testrg1/providers/Microsoft.Attestation/attestationProviders/codes2"),
					Location: to.Ptr("East US"),
					Properties: &armattestation.StatusResult{
						Status: to.Ptr(armattestation.AttestationServiceStatusReady),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ProviderListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProviderListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Get_AttestationProvidersListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAttestationProviders_ListDefault(t *testing.T) {
	// From example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Get_DefaultProviders.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AttestationProviders_GetDefault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armattestation.NewProvidersClient("6c96b33e-f5b8-40a6-9011-5cb1c58b0915", cred, &options)
	res, err := client.ListDefault(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Get_DefaultProviders.json: %v", err)
	}
	// Response check
	{
		exampleRes := armattestation.ProviderListResult{
			Value: []*armattestation.Provider{
				{
					Name:     to.Ptr("sharedcus"),
					Type:     to.Ptr("Microsoft.Attestation/attestationProviders"),
					ID:       to.Ptr("providers/Microsoft.Attestation/attestationProviders/sharedcus"),
					Location: to.Ptr("Central US"),
					Properties: &armattestation.StatusResult{
						AttestURI:  to.Ptr("https://sharedcus.cus.attest.azure.net"),
						Status:     to.Ptr(armattestation.AttestationServiceStatusReady),
						TrustModel: to.Ptr("AAD"),
					},
				},
				{
					Name:     to.Ptr("shareduks"),
					Type:     to.Ptr("Microsoft.Attestation/attestationProviders"),
					ID:       to.Ptr("providers/Microsoft.Attestation/attestationProviders/shareduks"),
					Location: to.Ptr("UK South"),
					Properties: &armattestation.StatusResult{
						AttestURI:  to.Ptr("https://shareduks.uks.attest.azure.net"),
						Status:     to.Ptr(armattestation.AttestationServiceStatusReady),
						TrustModel: to.Ptr("AAD"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ProviderListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProviderListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Get_DefaultProviders.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAttestationProviders_GetDefaultByLocation(t *testing.T) {
	// From example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Get_DefaultProviderByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AttestationProviders_GetDefaultWithLocation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armattestation.NewProvidersClient("6c96b33e-f5b8-40a6-9011-5cb1c58b0915", cred, &options)
	res, err := client.GetDefaultByLocation(ctx,
		"Central US",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Get_DefaultProviderByLocation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armattestation.Provider{
			Name:     to.Ptr("sharedcus"),
			Type:     to.Ptr("Microsoft.Attestation/attestationProviders"),
			ID:       to.Ptr("providers/Microsoft.Attestation/attestationProviders/sharedcus"),
			Location: to.Ptr("Central US"),
			Properties: &armattestation.StatusResult{
				AttestURI:  to.Ptr("https://sharedcus.cus.attest.azure.net"),
				Status:     to.Ptr(armattestation.AttestationServiceStatusReady),
				TrustModel: to.Ptr("AAD"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Provider) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Provider)
			t.Fatalf("Mock response is not equal to example response for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/Get_DefaultProviderByLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/AttestationProviderListPrivateEndpointConnections.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AttestationProviderListPrivateEndpointConnections"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armattestation.NewPrivateEndpointConnectionsClient("{subscription-id}", cred, &options)
	pager := client.List("res6977",
		"sto2527",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/AttestationProviderListPrivateEndpointConnections.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armattestation.PrivateEndpointConnectionListResult{
			Value: []*armattestation.PrivateEndpointConnection{
				{
					Name: to.Ptr("{privateEndpointConnectionName}"),
					Type: to.Ptr("Microsoft.Attestation/attestationProviders/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Attestation/attestationProviders/sto288/privateEndpointConnections/{privateEndpointConnectionName}"),
					Properties: &armattestation.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armattestation.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Network/privateEndpoints/petest01"),
						},
						PrivateLinkServiceConnectionState: &armattestation.PrivateLinkServiceConnectionState{
							Description: to.Ptr("Auto-Approved"),
							Status:      to.Ptr(armattestation.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armattestation.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("{privateEndpointConnectionName}"),
					Type: to.Ptr("Microsoft.Attestation/attestationProviders/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Attestation/attestationProviders/sto288/privateEndpointConnections/{privateEndpointConnectionName}"),
					Properties: &armattestation.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armattestation.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Network/privateEndpoints/petest02"),
						},
						PrivateLinkServiceConnectionState: &armattestation.PrivateLinkServiceConnectionState{
							Description: to.Ptr("Auto-Approved"),
							Status:      to.Ptr(armattestation.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armattestation.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/AttestationProviderListPrivateEndpointConnections.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/AttestationProviderGetPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AttestationProviderGetPrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armattestation.NewPrivateEndpointConnectionsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"res6977",
		"sto2527",
		"{privateEndpointConnectionName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/AttestationProviderGetPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armattestation.PrivateEndpointConnection{
			Name: to.Ptr("{privateEndpointConnectionName}"),
			Type: to.Ptr("Microsoft.Attestation/attestationProviders/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Attestation/attestationProviders/sto288/privateEndpointConnections/{privateEndpointConnectionName}"),
			Properties: &armattestation.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armattestation.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Network/privateEndpoints/petest01"),
				},
				PrivateLinkServiceConnectionState: &armattestation.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Auto-Approved"),
					Status:      to.Ptr(armattestation.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armattestation.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/AttestationProviderGetPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Create(t *testing.T) {
	// From example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/AttestationProviderPutPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AttestationProviderPutPrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armattestation.NewPrivateEndpointConnectionsClient("{subscription-id}", cred, &options)
	res, err := client.Create(ctx,
		"res7687",
		"sto9699",
		"{privateEndpointConnectionName}",
		armattestation.PrivateEndpointConnection{
			Properties: &armattestation.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armattestation.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Auto-Approved"),
					Status:      to.Ptr(armattestation.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/AttestationProviderPutPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armattestation.PrivateEndpointConnection{
			Name: to.Ptr("{privateEndpointConnectionName}"),
			Type: to.Ptr("Microsoft.Attestation/attestationProviders/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Attestation/attestationProviders/sto288/privateEndpointConnections/{privateEndpointConnectionName}"),
			Properties: &armattestation.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armattestation.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Network/privateEndpoints/petest01"),
				},
				PrivateLinkServiceConnectionState: &armattestation.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Auto-Approved"),
					Status:      to.Ptr(armattestation.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armattestation.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/AttestationProviderPutPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/AttestationProviderDeletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AttestationProviderDeletePrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armattestation.NewPrivateEndpointConnectionsClient("{subscription-id}", cred, &options)
	_, err := client.Delete(ctx,
		"res6977",
		"sto2527",
		"{privateEndpointConnectionName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/attestation/resource-manager/Microsoft.Attestation/stable/2020-10-01/examples/AttestationProviderDeletePrivateEndpointConnection.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
