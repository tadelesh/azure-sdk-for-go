//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmaintenance

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestPublicMaintenanceConfigurations_List(t *testing.T) {
	// From example PublicMaintenanceConfigurations_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPublicMaintenanceConfigurationsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	_, err := client.List(ctx,
		&PublicMaintenanceConfigurationsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPublicMaintenanceConfigurations_Get(t *testing.T) {
	// From example PublicMaintenanceConfigurations_GetForResource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPublicMaintenanceConfigurationsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Get(ctx,
		"configuration1",
		&PublicMaintenanceConfigurationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MaintenanceConfiguration.ID == nil {
		t.Fatal("MaintenanceConfiguration.ID should not be nil!")
	}
}

func TestApplyUpdates_GetParent(t *testing.T) {
	// From example ApplyUpdates_GetParent
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplyUpdatesClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.GetParent(ctx,
		"examplerg",
		"virtualMachineScaleSets",
		"smdtest1",
		"Microsoft.Compute",
		"virtualMachines",
		"smdvm1",
		"e9b9685d-78e4-44c4-a81c-64a14f9b87b6",
		&ApplyUpdatesGetParentOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ApplyUpdate.ID == nil {
		t.Fatal("ApplyUpdate.ID should not be nil!")
	}
}

func TestApplyUpdates_Get(t *testing.T) {
	// From example ApplyUpdates_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplyUpdatesClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Get(ctx,
		"examplerg",
		"Microsoft.Compute",
		"virtualMachineScaleSets",
		"smdtest1",
		"e9b9685d-78e4-44c4-a81c-64a14f9b87b6",
		&ApplyUpdatesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ApplyUpdate.ID == nil {
		t.Fatal("ApplyUpdate.ID should not be nil!")
	}
}

func TestApplyUpdates_CreateOrUpdateParent(t *testing.T) {
	// From example ApplyUpdates_CreateOrUpdateParent
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplyUpdatesClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.CreateOrUpdateParent(ctx,
		"examplerg",
		"Microsoft.Compute",
		"virtualMachineScaleSets",
		"smdtest1",
		"virtualMachines",
		"smdvm1",
		&ApplyUpdatesCreateOrUpdateParentOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ApplyUpdate.ID == nil {
		t.Fatal("ApplyUpdate.ID should not be nil!")
	}
}

func TestApplyUpdates_CreateOrUpdate(t *testing.T) {
	// From example ApplyUpdates_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplyUpdatesClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.CreateOrUpdate(ctx,
		"examplerg",
		"Microsoft.Compute",
		"virtualMachineScaleSets",
		"smdtest1",
		&ApplyUpdatesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ApplyUpdate.ID == nil {
		t.Fatal("ApplyUpdate.ID should not be nil!")
	}
}

func TestApplyUpdates_List(t *testing.T) {
	// From example ApplyUpdates_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplyUpdatesClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	_, err := client.List(ctx,
		&ApplyUpdatesListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestConfigurationAssignments_GetParent(t *testing.T) {
	// From example ConfigurationAssignments_GetParent
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationAssignmentsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.GetParent(ctx,
		"examplerg",
		"Microsoft.Compute",
		"virtualMachineScaleSets",
		"smdtest1",
		"virtualMachines",
		"smdvm1",
		"workervmPolicy",
		&ConfigurationAssignmentsGetParentOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConfigurationAssignment.ID == nil {
		t.Fatal("ConfigurationAssignment.ID should not be nil!")
	}
}

func TestConfigurationAssignments_CreateOrUpdateParent(t *testing.T) {
	// From example ConfigurationAssignments_CreateOrUpdateParent
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationAssignmentsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.CreateOrUpdateParent(ctx,
		"examplerg",
		"Microsoft.Compute",
		"virtualMachineScaleSets",
		"smdtest1",
		"virtualMachines",
		"smdvm1",
		"workervmPolicy",
		ConfigurationAssignment{
			Properties: &ConfigurationAssignmentProperties{
				MaintenanceConfigurationID: to.StringPtr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourcegroups/examplerg/providers/Microsoft.Maintenance/maintenanceConfigurations/policy1"),
			},
		},
		&ConfigurationAssignmentsCreateOrUpdateParentOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConfigurationAssignment.ID == nil {
		t.Fatal("ConfigurationAssignment.ID should not be nil!")
	}
}

func TestConfigurationAssignments_DeleteParent(t *testing.T) {
	// From example ConfigurationAssignments_DeleteParent
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationAssignmentsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.DeleteParent(ctx,
		"examplerg",
		"Microsoft.Compute",
		"virtualMachineScaleSets",
		"smdtest1",
		"virtualMachines",
		"smdvm1",
		"workervmConfiguration",
		&ConfigurationAssignmentsDeleteParentOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConfigurationAssignment.ID == nil {
		t.Fatal("ConfigurationAssignment.ID should not be nil!")
	}
}

func TestConfigurationAssignments_Get(t *testing.T) {
	// From example ConfigurationAssignments_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationAssignmentsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Get(ctx,
		"examplerg",
		"Microsoft.Compute",
		"virtualMachineScaleSets",
		"smdtest1",
		"workervmConfiguration",
		&ConfigurationAssignmentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConfigurationAssignment.ID == nil {
		t.Fatal("ConfigurationAssignment.ID should not be nil!")
	}
}

func TestConfigurationAssignments_CreateOrUpdate(t *testing.T) {
	// From example ConfigurationAssignments_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationAssignmentsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.CreateOrUpdate(ctx,
		"examplerg",
		"Microsoft.Compute",
		"virtualMachineScaleSets",
		"smdtest1",
		"workervmConfiguration",
		ConfigurationAssignment{
			Properties: &ConfigurationAssignmentProperties{
				MaintenanceConfigurationID: to.StringPtr("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourcegroups/examplerg/providers/Microsoft.Maintenance/maintenanceConfigurations/configuration1"),
			},
		},
		&ConfigurationAssignmentsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConfigurationAssignment.ID == nil {
		t.Fatal("ConfigurationAssignment.ID should not be nil!")
	}
}

func TestConfigurationAssignments_Delete(t *testing.T) {
	// From example ConfigurationAssignments_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationAssignmentsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Delete(ctx,
		"examplerg",
		"Microsoft.Compute",
		"virtualMachineScaleSets",
		"smdtest1",
		"workervmConfiguration",
		&ConfigurationAssignmentsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConfigurationAssignment.ID == nil {
		t.Fatal("ConfigurationAssignment.ID should not be nil!")
	}
}

func TestConfigurationAssignments_ListParent(t *testing.T) {
	// From example ConfigurationAssignments_ListParent
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationAssignmentsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	_, err := client.ListParent(ctx,
		"examplerg",
		"Microsoft.Compute",
		"virtualMachineScaleSets",
		"smdtest1",
		"virtualMachines",
		"smdtestvm1",
		&ConfigurationAssignmentsListParentOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestConfigurationAssignments_List(t *testing.T) {
	// From example ConfigurationAssignments_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationAssignmentsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	_, err := client.List(ctx,
		"examplerg",
		"Microsoft.Compute",
		"virtualMachineScaleSets",
		"smdtest1",
		&ConfigurationAssignmentsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestMaintenanceConfigurations_Get(t *testing.T) {
	// From example MaintenanceConfigurations_GetForResource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMaintenanceConfigurationsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Get(ctx,
		"examplerg",
		"configuration1",
		&MaintenanceConfigurationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MaintenanceConfiguration.ID == nil {
		t.Fatal("MaintenanceConfiguration.ID should not be nil!")
	}

	// From example MaintenanceConfigurations_GetForResource_GuestOSPatchLinux
	res, err = client.Get(ctx,
		"examplerg",
		"configuration1",
		&MaintenanceConfigurationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MaintenanceConfiguration.ID == nil {
		t.Fatal("MaintenanceConfiguration.ID should not be nil!")
	}

	// From example MaintenanceConfigurations_GetForResource_GuestOSPatchWindows
	res, err = client.Get(ctx,
		"examplerg",
		"configuration1",
		&MaintenanceConfigurationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MaintenanceConfiguration.ID == nil {
		t.Fatal("MaintenanceConfiguration.ID should not be nil!")
	}
}

func TestMaintenanceConfigurations_CreateOrUpdate(t *testing.T) {
	// From example MaintenanceConfigurations_CreateOrUpdateForResource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMaintenanceConfigurationsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.CreateOrUpdate(ctx,
		"examplerg",
		"configuration1",
		MaintenanceConfiguration{
			Location: to.StringPtr("westus2"),
			Properties: &MaintenanceConfigurationProperties{
				MaintenanceScope: MaintenanceScopeOSImage.ToPtr(),
				MaintenanceWindow: &MaintenanceWindow{
					Duration:           to.StringPtr("05:00"),
					ExpirationDateTime: to.StringPtr("9999-12-31 00:00"),
					RecurEvery:         to.StringPtr("Day"),
					StartDateTime:      to.StringPtr("2020-04-30 08:00"),
					TimeZone:           to.StringPtr("Pacific Standard Time"),
				},
				Namespace:  to.StringPtr("Microsoft.Maintenance"),
				Visibility: VisibilityCustom.ToPtr(),
			},
		},
		&MaintenanceConfigurationsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MaintenanceConfiguration.ID == nil {
		t.Fatal("MaintenanceConfiguration.ID should not be nil!")
	}
}

func TestMaintenanceConfigurations_Delete(t *testing.T) {
	// From example MaintenanceConfigurations_DeleteForResource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMaintenanceConfigurationsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Delete(ctx,
		"examplerg",
		"example1",
		&MaintenanceConfigurationsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MaintenanceConfiguration.ID == nil {
		t.Fatal("MaintenanceConfiguration.ID should not be nil!")
	}
}

func TestMaintenanceConfigurations_Update(t *testing.T) {
	// From example MaintenanceConfigurations_UpdateForResource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMaintenanceConfigurationsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	res, err := client.Update(ctx,
		"examplerg",
		"configuration1",
		MaintenanceConfiguration{
			Location: to.StringPtr("westus2"),
			Properties: &MaintenanceConfigurationProperties{
				MaintenanceScope: MaintenanceScopeOSImage.ToPtr(),
				MaintenanceWindow: &MaintenanceWindow{
					Duration:           to.StringPtr("05:00"),
					ExpirationDateTime: to.StringPtr("9999-12-31 00:00"),
					RecurEvery:         to.StringPtr("Month Third Sunday"),
					StartDateTime:      to.StringPtr("2020-04-30 08:00"),
					TimeZone:           to.StringPtr("Pacific Standard Time"),
				},
				Namespace:  to.StringPtr("Microsoft.Maintenance"),
				Visibility: VisibilityCustom.ToPtr(),
			},
		},
		&MaintenanceConfigurationsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MaintenanceConfiguration.ID == nil {
		t.Fatal("MaintenanceConfiguration.ID should not be nil!")
	}
}

func TestMaintenanceConfigurations_List(t *testing.T) {
	// From example MaintenanceConfigurations_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMaintenanceConfigurationsClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	_, err := client.List(ctx,
		&MaintenanceConfigurationsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestMaintenanceConfigurationsForResourceGroup_List(t *testing.T) {
	// From example MaintenanceConfigurationsResourceGroup_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMaintenanceConfigurationsForResourceGroupClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	_, err := client.List(ctx,
		"examplerg",
		&MaintenanceConfigurationsForResourceGroupListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestApplyUpdateForResourceGroup_List(t *testing.T) {
	// From example ApplyUpdatesResourceGroup_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewApplyUpdateForResourceGroupClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	_, err := client.List(ctx,
		"examplerg",
		&ApplyUpdateForResourceGroupListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestConfigurationAssignmentsWithinSubscription_List(t *testing.T) {
	// From example ConfigurationAssignmentsResultWithinSubscription_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationAssignmentsWithinSubscriptionClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	_, err := client.List(ctx,
		&ConfigurationAssignmentsWithinSubscriptionListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example Operations_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	_, err := client.List(ctx,
		&OperationsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestUpdates_ListParent(t *testing.T) {
	// From example Updates_ListParent
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUpdatesClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	_, err := client.ListParent(ctx,
		"examplerg",
		"Microsoft.Compute",
		"virtualMachineScaleSets",
		"smdtest1",
		"virtualMachines",
		"1",
		&UpdatesListParentOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestUpdates_List(t *testing.T) {
	// From example Updates_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUpdatesClient(con,
		"5b4b650e-28b9-4790-b3ab-ddbd88d727c4")
	_, err := client.List(ctx,
		"examplerg",
		"Microsoft.Compute",
		"virtualMachineScaleSets",
		"smdtest1",
		&UpdatesListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
