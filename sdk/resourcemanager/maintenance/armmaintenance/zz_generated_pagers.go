//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmaintenance

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// ApplyUpdateForResourceGroupClientListPager provides operations for iterating over paged responses.
type ApplyUpdateForResourceGroupClientListPager struct {
	client    *ApplyUpdateForResourceGroupClient
	current   ApplyUpdateForResourceGroupClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ApplyUpdateForResourceGroupClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ApplyUpdateForResourceGroupClientListPager) NextPage(ctx context.Context) (ApplyUpdateForResourceGroupClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ApplyUpdateForResourceGroupClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ApplyUpdateForResourceGroupClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ApplyUpdateForResourceGroupClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ApplyUpdateForResourceGroupClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ApplyUpdateForResourceGroupClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ApplyUpdatesClientListPager provides operations for iterating over paged responses.
type ApplyUpdatesClientListPager struct {
	client    *ApplyUpdatesClient
	current   ApplyUpdatesClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ApplyUpdatesClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ApplyUpdatesClientListPager) NextPage(ctx context.Context) (ApplyUpdatesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ApplyUpdatesClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ApplyUpdatesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ApplyUpdatesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ApplyUpdatesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ApplyUpdatesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ConfigurationAssignmentsClientListPager provides operations for iterating over paged responses.
type ConfigurationAssignmentsClientListPager struct {
	client    *ConfigurationAssignmentsClient
	current   ConfigurationAssignmentsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ConfigurationAssignmentsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ConfigurationAssignmentsClientListPager) NextPage(ctx context.Context) (ConfigurationAssignmentsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ConfigurationAssignmentsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ConfigurationAssignmentsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ConfigurationAssignmentsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ConfigurationAssignmentsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ConfigurationAssignmentsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ConfigurationAssignmentsClientListParentPager provides operations for iterating over paged responses.
type ConfigurationAssignmentsClientListParentPager struct {
	client    *ConfigurationAssignmentsClient
	current   ConfigurationAssignmentsClientListParentResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ConfigurationAssignmentsClientListParentPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ConfigurationAssignmentsClientListParentPager) NextPage(ctx context.Context) (ConfigurationAssignmentsClientListParentResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ConfigurationAssignmentsClientListParentResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ConfigurationAssignmentsClientListParentResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ConfigurationAssignmentsClientListParentResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ConfigurationAssignmentsClientListParentResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listParentHandleResponse(resp)
	if err != nil {
		return ConfigurationAssignmentsClientListParentResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ConfigurationAssignmentsWithinSubscriptionClientListPager provides operations for iterating over paged responses.
type ConfigurationAssignmentsWithinSubscriptionClientListPager struct {
	client    *ConfigurationAssignmentsWithinSubscriptionClient
	current   ConfigurationAssignmentsWithinSubscriptionClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ConfigurationAssignmentsWithinSubscriptionClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ConfigurationAssignmentsWithinSubscriptionClientListPager) NextPage(ctx context.Context) (ConfigurationAssignmentsWithinSubscriptionClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ConfigurationAssignmentsWithinSubscriptionClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ConfigurationAssignmentsWithinSubscriptionClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ConfigurationAssignmentsWithinSubscriptionClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ConfigurationAssignmentsWithinSubscriptionClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ConfigurationAssignmentsWithinSubscriptionClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ConfigurationsClientListPager provides operations for iterating over paged responses.
type ConfigurationsClientListPager struct {
	client    *ConfigurationsClient
	current   ConfigurationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ConfigurationsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ConfigurationsClientListPager) NextPage(ctx context.Context) (ConfigurationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ConfigurationsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ConfigurationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ConfigurationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ConfigurationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ConfigurationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ConfigurationsForResourceGroupClientListPager provides operations for iterating over paged responses.
type ConfigurationsForResourceGroupClientListPager struct {
	client    *ConfigurationsForResourceGroupClient
	current   ConfigurationsForResourceGroupClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ConfigurationsForResourceGroupClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ConfigurationsForResourceGroupClientListPager) NextPage(ctx context.Context) (ConfigurationsForResourceGroupClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ConfigurationsForResourceGroupClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ConfigurationsForResourceGroupClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ConfigurationsForResourceGroupClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ConfigurationsForResourceGroupClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ConfigurationsForResourceGroupClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return OperationsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PublicMaintenanceConfigurationsClientListPager provides operations for iterating over paged responses.
type PublicMaintenanceConfigurationsClientListPager struct {
	client    *PublicMaintenanceConfigurationsClient
	current   PublicMaintenanceConfigurationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PublicMaintenanceConfigurationsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *PublicMaintenanceConfigurationsClientListPager) NextPage(ctx context.Context) (PublicMaintenanceConfigurationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return PublicMaintenanceConfigurationsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PublicMaintenanceConfigurationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PublicMaintenanceConfigurationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PublicMaintenanceConfigurationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return PublicMaintenanceConfigurationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// UpdatesClientListPager provides operations for iterating over paged responses.
type UpdatesClientListPager struct {
	client    *UpdatesClient
	current   UpdatesClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *UpdatesClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *UpdatesClientListPager) NextPage(ctx context.Context) (UpdatesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return UpdatesClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return UpdatesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return UpdatesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return UpdatesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return UpdatesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// UpdatesClientListParentPager provides operations for iterating over paged responses.
type UpdatesClientListParentPager struct {
	client    *UpdatesClient
	current   UpdatesClientListParentResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *UpdatesClientListParentPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *UpdatesClientListParentPager) NextPage(ctx context.Context) (UpdatesClientListParentResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return UpdatesClientListParentResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return UpdatesClientListParentResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return UpdatesClientListParentResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return UpdatesClientListParentResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listParentHandleResponse(resp)
	if err != nil {
		return UpdatesClientListParentResponse{}, err
	}
	p.current = result
	return p.current, nil
}
