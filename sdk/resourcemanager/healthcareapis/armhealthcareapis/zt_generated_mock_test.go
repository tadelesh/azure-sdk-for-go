//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhealthcareapis_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/healthcareapis/armhealthcareapis"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestServices_Get(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get metadata"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewServicesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"service1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.ServicesDescription{
			Name:     to.Ptr("service1"),
			Type:     to.Ptr("Microsoft.HealthcareApis/services"),
			Etag:     to.Ptr("etagvalue"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HealthcareApis/services/service1"),
			Kind:     to.Ptr(armhealthcareapis.KindFhirR4),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armhealthcareapis.ServicesProperties{
				AccessPolicies: []*armhealthcareapis.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armhealthcareapis.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armhealthcareapis.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int32](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armhealthcareapis.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int32](1000),
				},
				PrivateEndpointConnections: []*armhealthcareapis.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armhealthcareapis.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServicesDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServicesDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_CreateOrUpdate(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a service with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewServicesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"service1",
		armhealthcareapis.ServicesDescription{
			Identity: &armhealthcareapis.ServicesResourceIdentity{
				Type: to.Ptr(armhealthcareapis.ManagedServiceIdentityTypeSystemAssigned),
			},
			Kind:     to.Ptr(armhealthcareapis.KindFhirR4),
			Location: to.Ptr("westus2"),
			Tags:     map[string]*string{},
			Properties: &armhealthcareapis.ServicesProperties{
				AccessPolicies: []*armhealthcareapis.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armhealthcareapis.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armhealthcareapis.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int32](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armhealthcareapis.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int32](1000),
				},
				ExportConfiguration: &armhealthcareapis.ServiceExportConfigurationInfo{
					StorageAccountName: to.Ptr("existingStorageAccount"),
				},
				PrivateEndpointConnections: []*armhealthcareapis.PrivateEndpointConnection{},
				PublicNetworkAccess:        to.Ptr(armhealthcareapis.PublicNetworkAccessDisabled),
			},
		},
		&armhealthcareapis.ServicesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.ServicesDescription{
			Name: to.Ptr("service1"),
			Type: to.Ptr("Microsoft.HealthcareApis/services"),
			Etag: to.Ptr("etagvalue"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HealthcareApis/services/service1"),
			Identity: &armhealthcareapis.ServicesResourceIdentity{
				Type:        to.Ptr(armhealthcareapis.ManagedServiceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("03fe6ae0-952c-4e4b-954b-cc0364dd252e"),
				TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d8cd011db47"),
			},
			Kind:     to.Ptr(armhealthcareapis.KindFhirR4),
			Location: to.Ptr("West US 2"),
			Tags:     map[string]*string{},
			Properties: &armhealthcareapis.ServicesProperties{
				AccessPolicies: []*armhealthcareapis.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armhealthcareapis.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armhealthcareapis.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int32](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armhealthcareapis.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int32](1000),
				},
				ExportConfiguration: &armhealthcareapis.ServiceExportConfigurationInfo{
					StorageAccountName: to.Ptr("existingStorageAccount"),
				},
				PrivateEndpointConnections: []*armhealthcareapis.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armhealthcareapis.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServicesDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServicesDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceCreateMinimum.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a service with minimum parameters"},
	})
	client = armhealthcareapis.NewServicesClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"service2",
		armhealthcareapis.ServicesDescription{
			Kind:     to.Ptr(armhealthcareapis.KindFhirR4),
			Location: to.Ptr("westus2"),
			Tags:     map[string]*string{},
			Properties: &armhealthcareapis.ServicesProperties{
				AccessPolicies: []*armhealthcareapis.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					}},
			},
		},
		&armhealthcareapis.ServicesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceCreateMinimum.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceCreateMinimum.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.ServicesDescription{
			Name:     to.Ptr("service2"),
			Type:     to.Ptr("Microsoft.HealthcareApis/services"),
			Etag:     to.Ptr("etagvalue"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HealthcareApis/services/service2"),
			Kind:     to.Ptr(armhealthcareapis.KindFhirR4),
			Location: to.Ptr("westus2"),
			Tags:     map[string]*string{},
			Properties: &armhealthcareapis.ServicesProperties{
				AccessPolicies: []*armhealthcareapis.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					}},
				AuthenticationConfiguration: &armhealthcareapis.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(false),
				},
				CorsConfiguration: &armhealthcareapis.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers:          []*string{},
					Methods:          []*string{},
					Origins:          []*string{},
				},
				CosmosDbConfiguration: &armhealthcareapis.ServiceCosmosDbConfigurationInfo{
					OfferThroughput: to.Ptr[int32](1000),
				},
				PrivateEndpointConnections: []*armhealthcareapis.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armhealthcareapis.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServicesDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServicesDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceCreateMinimum.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_Update(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServicePatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewServicesClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"service1",
		armhealthcareapis.ServicesPatchDescription{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		&armhealthcareapis.ServicesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServicePatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServicePatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.ServicesDescription{
			Name:     to.Ptr("service1"),
			Type:     to.Ptr("Microsoft.HealthcareApis/services"),
			Etag:     to.Ptr("etagvalue"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HealthcareApis/services/service1"),
			Kind:     to.Ptr(armhealthcareapis.KindFhirR4),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armhealthcareapis.ServicesProperties{
				AccessPolicies: []*armhealthcareapis.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armhealthcareapis.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armhealthcareapis.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int32](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armhealthcareapis.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int32](1000),
				},
				PrivateEndpointConnections: []*armhealthcareapis.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armhealthcareapis.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServicesDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServicesDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServicePatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_Delete(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewServicesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"service1",
		&armhealthcareapis.ServicesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceDelete.json: %v", err)
	}
}

func TestServices_List(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all services in subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewServicesClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhealthcareapis.ServicesDescriptionListResult{
			Value: []*armhealthcareapis.ServicesDescription{
				{
					Name:     to.Ptr("service1"),
					Type:     to.Ptr("Microsoft.HealthcareApis/services"),
					Etag:     to.Ptr("etag"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HealthcareApis/services/service1"),
					Kind:     to.Ptr(armhealthcareapis.KindFhirR4),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armhealthcareapis.ServicesProperties{
						AccessPolicies: []*armhealthcareapis.ServiceAccessPolicyEntry{
							{
								ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
							},
							{
								ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
							}},
						AuthenticationConfiguration: &armhealthcareapis.ServiceAuthenticationConfigurationInfo{
							Audience:          to.Ptr("https://azurehealthcareapis.com"),
							Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
							SmartProxyEnabled: to.Ptr(true),
						},
						CorsConfiguration: &armhealthcareapis.ServiceCorsConfigurationInfo{
							AllowCredentials: to.Ptr(false),
							Headers: []*string{
								to.Ptr("*")},
							MaxAge: to.Ptr[int32](1440),
							Methods: []*string{
								to.Ptr("DELETE"),
								to.Ptr("GET"),
								to.Ptr("OPTIONS"),
								to.Ptr("PATCH"),
								to.Ptr("POST"),
								to.Ptr("PUT")},
							Origins: []*string{
								to.Ptr("*")},
						},
						CosmosDbConfiguration: &armhealthcareapis.ServiceCosmosDbConfigurationInfo{
							KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
							OfferThroughput: to.Ptr[int32](1000),
						},
						PrivateEndpointConnections: []*armhealthcareapis.PrivateEndpointConnection{},
						ProvisioningState:          to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armhealthcareapis.PublicNetworkAccessDisabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServicesDescriptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServicesDescriptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_ListByResourceGroup(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all services in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewServicesClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rgname",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhealthcareapis.ServicesDescriptionListResult{
			Value: []*armhealthcareapis.ServicesDescription{
				{
					Name:     to.Ptr("service1"),
					Type:     to.Ptr("Microsoft.HealthcareApis/services"),
					Etag:     to.Ptr("etagvalue"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HealthcareApis/services/dddb8dcb-effb-4290-bb47-ce1e8440c729"),
					Kind:     to.Ptr(armhealthcareapis.KindFhirR4),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armhealthcareapis.ServicesProperties{
						AccessPolicies: []*armhealthcareapis.ServiceAccessPolicyEntry{
							{
								ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
							},
							{
								ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
							}},
						AuthenticationConfiguration: &armhealthcareapis.ServiceAuthenticationConfigurationInfo{
							Audience:          to.Ptr("https://azurehealthcareapis.com"),
							Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
							SmartProxyEnabled: to.Ptr(true),
						},
						CorsConfiguration: &armhealthcareapis.ServiceCorsConfigurationInfo{
							AllowCredentials: to.Ptr(false),
							Headers: []*string{
								to.Ptr("*")},
							MaxAge: to.Ptr[int32](1440),
							Methods: []*string{
								to.Ptr("DELETE"),
								to.Ptr("GET"),
								to.Ptr("OPTIONS"),
								to.Ptr("PATCH"),
								to.Ptr("POST"),
								to.Ptr("PUT")},
							Origins: []*string{
								to.Ptr("*")},
						},
						CosmosDbConfiguration: &armhealthcareapis.ServiceCosmosDbConfigurationInfo{
							KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
							OfferThroughput: to.Ptr[int32](1000),
						},
						PrivateEndpointConnections: []*armhealthcareapis.PrivateEndpointConnection{},
						ProvisioningState:          to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armhealthcareapis.PublicNetworkAccessDisabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServicesDescriptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServicesDescriptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_CheckNameAvailability(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/CheckNameAvailabilityPost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check name availability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewServicesClient("subid", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		armhealthcareapis.CheckNameAvailabilityParameters{
			Name: to.Ptr("serviceName"),
			Type: to.Ptr("Microsoft.HealthcareApis/services"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/CheckNameAvailabilityPost.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.ServicesNameAvailabilityInfo{
			Message:       to.Ptr("Service name is not available."),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr(armhealthcareapis.ServiceNameUnavailabilityReasonAlreadyExists),
		}
		if !reflect.DeepEqual(exampleRes, res.ServicesNameAvailabilityInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServicesNameAvailabilityInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/CheckNameAvailabilityPost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_ListByService(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceListPrivateEndpointConnections.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewPrivateEndpointConnectionsClient("subid", cred, &options)
	pager := client.ListByService("rgname",
		"service1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceListPrivateEndpointConnections.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhealthcareapis.PrivateEndpointConnectionListResultDescription{
			Value: []*armhealthcareapis.PrivateEndpointConnectionDescription{
				{
					Name: to.Ptr("myConnection"),
					Type: to.Ptr("Microsoft.HealthcareApis/services/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HealthcareApis/services/service1/privateEndpointConnections/myConnection"),
					Properties: &armhealthcareapis.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armhealthcareapis.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/peexample01"),
						},
						PrivateLinkServiceConnectionState: &armhealthcareapis.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armhealthcareapis.PrivateEndpointServiceConnectionStatusApproved),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResultDescription) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResultDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceListPrivateEndpointConnections.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceGetPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_GetConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewPrivateEndpointConnectionsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rgname",
		"service1",
		"myConnection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceGetPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.PrivateEndpointConnectionDescription{
			Name: to.Ptr("myConnection"),
			Type: to.Ptr("Microsoft.HealthcareApis/services/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HealthcareApis/services/service1/privateEndpointConnections/myConnection"),
			Properties: &armhealthcareapis.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armhealthcareapis.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/peexample01"),
				},
				PrivateLinkServiceConnectionState: &armhealthcareapis.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armhealthcareapis.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnectionDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnectionDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceGetPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceCreatePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewPrivateEndpointConnectionsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rgname",
		"service1",
		"myConnection",
		armhealthcareapis.PrivateEndpointConnection{
			Properties: &armhealthcareapis.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armhealthcareapis.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Auto-Approved"),
					Status:      to.Ptr(armhealthcareapis.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		&armhealthcareapis.PrivateEndpointConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceCreatePrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceCreatePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.PrivateEndpointConnectionDescription{
			Name: to.Ptr("myConnection"),
			Type: to.Ptr("Microsoft.HealthcareApis/services/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HealthcareApis/services/service1/privateEndpointConnections/myConnection"),
			Properties: &armhealthcareapis.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armhealthcareapis.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/peexample01"),
				},
				PrivateLinkServiceConnectionState: &armhealthcareapis.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armhealthcareapis.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armhealthcareapis.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnectionDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnectionDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceCreatePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceDeletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewPrivateEndpointConnectionsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rgname",
		"service1",
		"myConnection",
		&armhealthcareapis.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceDeletePrivateEndpointConnection.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/ServiceDeletePrivateEndpointConnection.json: %v", err)
	}
}

func TestPrivateLinkResources_ListByService(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/PrivateLinkResourcesListByService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_ListGroupIds"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewPrivateLinkResourcesClient("subid", cred, &options)
	res, err := client.ListByService(ctx,
		"rgname",
		"service1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/PrivateLinkResourcesListByService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.PrivateLinkResourceListResultDescription{
			Value: []*armhealthcareapis.PrivateLinkResourceDescription{
				{
					Name: to.Ptr("fhir"),
					Type: to.Ptr("Microsoft.HealthcareApis/services/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HealthcareApis/services/service1/privateLinkResources/fhir"),
					Properties: &armhealthcareapis.PrivateLinkResourceProperties{
						GroupID: to.Ptr("fhir"),
						RequiredMembers: []*string{
							to.Ptr("fhir")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.azurehealthcareapis.com")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResultDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourceListResultDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/PrivateLinkResourcesListByService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/PrivateLinkResourceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewPrivateLinkResourcesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rgname",
		"service1",
		"fhir",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/PrivateLinkResourceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.PrivateLinkResourceDescription{
			Name: to.Ptr("fhir"),
			Type: to.Ptr("Microsoft.HealthcareApis/services/privateLinkResources"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HealthcareApis/services/service1/privateLinkResources/fhir"),
			Properties: &armhealthcareapis.PrivateLinkResourceProperties{
				GroupID: to.Ptr("fhir"),
				RequiredMembers: []*string{
					to.Ptr("fhir")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.azurehealthcareapis.com")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourceDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourceDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/legacy/PrivateLinkResourceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_ListBySubscription(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/workspaces/Workspaces_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get workspaces by subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewWorkspacesClient("subid", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/workspaces/Workspaces_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhealthcareapis.WorkspaceList{
			Value: []*armhealthcareapis.Workspace{
				{
					Name:     to.Ptr("workspace1"),
					Type:     to.Ptr("Microsoft.HealthcareApis/workspaces"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1"),
					Location: to.Ptr("eastus"),
					Properties: &armhealthcareapis.WorkspaceProperties{
						ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkspaceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkspaceList)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/workspaces/Workspaces_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_ListByResourceGroup(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/workspaces/Workspaces_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get workspaces by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewWorkspacesClient("subid", cred, &options)
	pager := client.ListByResourceGroup("testRG",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/workspaces/Workspaces_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhealthcareapis.WorkspaceList{
			Value: []*armhealthcareapis.Workspace{
				{
					Name:     to.Ptr("workspace1"),
					Type:     to.Ptr("Microsoft.HealthcareApis/workspaces"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1"),
					Location: to.Ptr("eastus"),
					Properties: &armhealthcareapis.WorkspaceProperties{
						ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkspaceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkspaceList)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/workspaces/Workspaces_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_Get(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/workspaces/Workspaces_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewWorkspacesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"testRG",
		"workspace1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/workspaces/Workspaces_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.Workspace{
			Name:     to.Ptr("workspace1"),
			Type:     to.Ptr("Microsoft.HealthcareApis/workspaces"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1"),
			Location: to.Ptr("westus"),
			Properties: &armhealthcareapis.WorkspaceProperties{
				ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/workspaces/Workspaces_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_CreateOrUpdate(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/workspaces/Workspaces_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewWorkspacesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testRG",
		"workspace1",
		armhealthcareapis.Workspace{
			Location:   to.Ptr("westus"),
			Properties: &armhealthcareapis.WorkspaceProperties{},
		},
		&armhealthcareapis.WorkspacesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/workspaces/Workspaces_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/workspaces/Workspaces_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.Workspace{
			Name:     to.Ptr("workspace1"),
			Type:     to.Ptr("Microsoft.HealthcareApis/workspaces"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1"),
			Location: to.Ptr("westus"),
			Properties: &armhealthcareapis.WorkspaceProperties{
				ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/workspaces/Workspaces_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_Update(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/workspaces/Workspaces_Patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewWorkspacesClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"testRG",
		"workspace1",
		armhealthcareapis.WorkspacePatchResource{
			Tags: map[string]*string{
				"tagKey": to.Ptr("tagValue"),
			},
		},
		&armhealthcareapis.WorkspacesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/workspaces/Workspaces_Patch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/workspaces/Workspaces_Patch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.Workspace{
			Name:     to.Ptr("workspace1"),
			Type:     to.Ptr("Microsoft.HealthcareApis/workspaces"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"tagKey": to.Ptr("tagValue"),
			},
			Properties: &armhealthcareapis.WorkspaceProperties{
				ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/workspaces/Workspaces_Patch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_Delete(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/workspaces/Workspaces_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewWorkspacesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testRG",
		"workspace1",
		&armhealthcareapis.WorkspacesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/workspaces/Workspaces_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/workspaces/Workspaces_Delete.json: %v", err)
	}
}

func TestDicomServices_ListByWorkspace(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/dicomservices/DicomServices_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List dicomservices"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewDicomServicesClient("subid", cred, &options)
	pager := client.ListByWorkspace("testRG",
		"workspace1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/dicomservices/DicomServices_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhealthcareapis.DicomServiceCollection{
			Value: []*armhealthcareapis.DicomService{
				{
					Name: to.Ptr("blue"),
					Type: to.Ptr("Microsoft.HealthcareApis/workspaces/dicomservices"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1/dicomservices/blue"),
					Properties: &armhealthcareapis.DicomServiceProperties{
						AuthenticationConfiguration: &armhealthcareapis.DicomServiceAuthenticationConfiguration{
							Audiences: []*string{
								to.Ptr("https://azurehealthcareapis.com/"),
								to.Ptr("https://azurehealthcareapis.com")},
							Authority: to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
						},
						ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
						ServiceURL:        to.Ptr("https://workspace1-blue.dicom.azurehealthcareapis.com"),
					},
				},
				{
					Name: to.Ptr("red"),
					Type: to.Ptr("Microsoft.HealthcareApis/workspaces/dicomservices"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1/dicomservices/red"),
					Properties: &armhealthcareapis.DicomServiceProperties{
						AuthenticationConfiguration: &armhealthcareapis.DicomServiceAuthenticationConfiguration{
							Audiences: []*string{
								to.Ptr("https://azurehealthcareapis.com/"),
								to.Ptr("https://azurehealthcareapis.com")},
							Authority: to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
						},
						ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
						ServiceURL:        to.Ptr("https://workspace1-red.dicom.azurehealthcareapis.com"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DicomServiceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DicomServiceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/dicomservices/DicomServices_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDicomServices_Get(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/dicomservices/DicomServices_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a dicomservice"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewDicomServicesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"testRG",
		"workspace1",
		"blue",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/dicomservices/DicomServices_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.DicomService{
			Name: to.Ptr("blue"),
			Type: to.Ptr("Microsoft.HealthcareApis/workspaces/dicomservices"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1/dicomservices/blue"),
			Properties: &armhealthcareapis.DicomServiceProperties{
				AuthenticationConfiguration: &armhealthcareapis.DicomServiceAuthenticationConfiguration{
					Audiences: []*string{
						to.Ptr("https://azurehealthcareapis.com/"),
						to.Ptr("https://azurehealthcareapis.com")},
					Authority: to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
				},
				ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
				ServiceURL:        to.Ptr("https://workspace1-blue.dicom.azurehealthcareapis.com"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DicomService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DicomService)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/dicomservices/DicomServices_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDicomServices_CreateOrUpdate(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/dicomservices/DicomServices_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a Dicom Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewDicomServicesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testRG",
		"workspace1",
		"blue",
		armhealthcareapis.DicomService{
			Location:   to.Ptr("westus"),
			Properties: &armhealthcareapis.DicomServiceProperties{},
		},
		&armhealthcareapis.DicomServicesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/dicomservices/DicomServices_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/dicomservices/DicomServices_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.DicomService{
			Name:     to.Ptr("blue"),
			Type:     to.Ptr("Microsoft.HealthcareApis/workspaces/dicomservices"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1/dicomservices/blue"),
			Location: to.Ptr("westus"),
			Properties: &armhealthcareapis.DicomServiceProperties{
				AuthenticationConfiguration: &armhealthcareapis.DicomServiceAuthenticationConfiguration{
					Audiences: []*string{
						to.Ptr("https://azurehealthcareapis.com/"),
						to.Ptr("https://azurehealthcareapis.com")},
					Authority: to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
				},
				ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DicomService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DicomService)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/dicomservices/DicomServices_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDicomServices_Update(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/dicomservices/DicomServices_Patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a dicomservice"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewDicomServicesClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"testRG",
		"blue",
		"workspace1",
		armhealthcareapis.DicomServicePatchResource{
			Tags: map[string]*string{
				"tagKey": to.Ptr("tagValue"),
			},
		},
		&armhealthcareapis.DicomServicesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/dicomservices/DicomServices_Patch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/dicomservices/DicomServices_Patch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.DicomService{
			Name: to.Ptr("blue"),
			Type: to.Ptr("Microsoft.HealthcareApis/workspaces/dicomservices"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1/dicomservices/blue"),
			Tags: map[string]*string{
				"tagKey": to.Ptr("tagValue"),
			},
			Properties: &armhealthcareapis.DicomServiceProperties{
				AuthenticationConfiguration: &armhealthcareapis.DicomServiceAuthenticationConfiguration{
					Audiences: []*string{
						to.Ptr("https://azurehealthcareapis.com/"),
						to.Ptr("https://azurehealthcareapis.com")},
					Authority: to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
				},
				ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
				ServiceURL:        to.Ptr("https://workspace1-blue.dicom.azurehealthcareapis.com"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DicomService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DicomService)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/dicomservices/DicomServices_Patch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDicomServices_Delete(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/dicomservices/DicomServices_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a dicomservice"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewDicomServicesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testRG",
		"blue",
		"workspace1",
		&armhealthcareapis.DicomServicesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/dicomservices/DicomServices_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/dicomservices/DicomServices_Delete.json: %v", err)
	}
}

func TestIotConnectors_ListByWorkspace(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List iotconnectors"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewIotConnectorsClient("subid", cred, &options)
	pager := client.ListByWorkspace("testRG",
		"workspace1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhealthcareapis.IotConnectorCollection{
			Value: []*armhealthcareapis.IotConnector{
				{
					Identity: &armhealthcareapis.ServiceManagedIdentityIdentity{
						Type: to.Ptr(armhealthcareapis.ManagedServiceIdentityTypeSystemAssigned),
					},
					Name:     to.Ptr("blue"),
					Type:     to.Ptr("Microsoft.HealthcareApis/workspaces/iotconnectors"),
					Etag:     to.Ptr("00000000-0000-0000-f5ac-912ca49e01d6"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1/iotconnectors/blue"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"additionalProp1": to.Ptr("string"),
						"additionalProp2": to.Ptr("string"),
						"additionalProp3": to.Ptr("string"),
					},
					Properties: &armhealthcareapis.IotConnectorProperties{
						DeviceMapping: &armhealthcareapis.IotMappingProperties{
							Content: map[string]interface{}{
								"template": []interface{}{
									map[string]interface{}{
										"template": map[string]interface{}{
											"deviceIdExpression":  "$.deviceid",
											"timestampExpression": "$.measurementdatetime",
											"typeMatchExpression": "$..[?(@heartrate)]",
											"typeName":            "heartrate",
											"values": []interface{}{
												map[string]interface{}{
													"required":        "true",
													"valueExpression": "$.heartrate",
													"valueName":       "hr",
												},
											},
										},
										"templateType": "JsonPathContent",
									},
								},
								"templateType": "CollectionContent",
							},
						},
						IngestionEndpointConfiguration: &armhealthcareapis.IotEventHubIngestionEndpointConfiguration{
							ConsumerGroup:                   to.Ptr("ConsumerGroupA"),
							EventHubName:                    to.Ptr("MyEventHubName"),
							FullyQualifiedEventHubNamespace: to.Ptr("myeventhub.servicesbus.windows.net"),
						},
						ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
					},
					SystemData: &armhealthcareapis.SystemData{
						CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-28T19:26:24.072Z"); return t }()),
						CreatedBy:      to.Ptr("string"),
						LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-28T19:26:24.072Z"); return t }()),
						LastModifiedBy: to.Ptr("string"),
					},
				},
				{
					Identity: &armhealthcareapis.ServiceManagedIdentityIdentity{
						Type: to.Ptr(armhealthcareapis.ManagedServiceIdentityTypeSystemAssigned),
					},
					Name:     to.Ptr("red"),
					Type:     to.Ptr("Microsoft.HealthcareApis/workspaces/iotconnectors"),
					Etag:     to.Ptr("00000000-0000-0000-f6ac-912ca49e01d6"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1/iotconnectors/red"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"additionalProp1": to.Ptr("string"),
						"additionalProp2": to.Ptr("string"),
						"additionalProp3": to.Ptr("string"),
					},
					Properties: &armhealthcareapis.IotConnectorProperties{
						DeviceMapping: &armhealthcareapis.IotMappingProperties{
							Content: map[string]interface{}{
								"template": []interface{}{
									map[string]interface{}{
										"template": map[string]interface{}{
											"deviceIdExpression":  "$.deviceid",
											"timestampExpression": "$.measurementdatetime",
											"typeMatchExpression": "$..[?(@steps)]",
											"typeName":            "steps",
											"values": []interface{}{
												map[string]interface{}{
													"required":        "true",
													"valueExpression": "$.steps",
													"valueName":       "steps",
												},
											},
										},
										"templateType": "JsonPathContent",
									},
								},
								"templateType": "CollectionContent",
							},
						},
						IngestionEndpointConfiguration: &armhealthcareapis.IotEventHubIngestionEndpointConfiguration{
							ConsumerGroup:                   to.Ptr("ConsumerGroupA"),
							EventHubName:                    to.Ptr("MyEventHubName"),
							FullyQualifiedEventHubNamespace: to.Ptr("myeventhub.servicesbus.windows.net"),
						},
						ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
					},
					SystemData: &armhealthcareapis.SystemData{
						CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-27T19:26:24.072Z"); return t }()),
						CreatedBy:      to.Ptr("string"),
						LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-27T19:26:24.072Z"); return t }()),
						LastModifiedBy: to.Ptr("string"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IotConnectorCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IotConnectorCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotConnectors_Get(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an IoT Connector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewIotConnectorsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"testRG",
		"workspace1",
		"blue",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.IotConnector{
			Identity: &armhealthcareapis.ServiceManagedIdentityIdentity{
				Type: to.Ptr(armhealthcareapis.ManagedServiceIdentityTypeSystemAssigned),
			},
			Name:     to.Ptr("blue"),
			Type:     to.Ptr("Microsoft.HealthcareApis/workspaces/iotconnectors"),
			Etag:     to.Ptr("00000000-0000-0000-f5ac-912ca49e01d6"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1/iotconnectors/blue"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"additionalProp1": to.Ptr("string"),
				"additionalProp2": to.Ptr("string"),
				"additionalProp3": to.Ptr("string"),
			},
			Properties: &armhealthcareapis.IotConnectorProperties{
				DeviceMapping: &armhealthcareapis.IotMappingProperties{
					Content: map[string]interface{}{
						"template": []interface{}{
							map[string]interface{}{
								"template": map[string]interface{}{
									"deviceIdExpression":  "$.deviceid",
									"timestampExpression": "$.measurementdatetime",
									"typeMatchExpression": "$..[?(@heartrate)]",
									"typeName":            "heartrate",
									"values": []interface{}{
										map[string]interface{}{
											"required":        "true",
											"valueExpression": "$.heartrate",
											"valueName":       "hr",
										},
									},
								},
								"templateType": "JsonPathContent",
							},
						},
						"templateType": "CollectionContent",
					},
				},
				IngestionEndpointConfiguration: &armhealthcareapis.IotEventHubIngestionEndpointConfiguration{
					ConsumerGroup:                   to.Ptr("ConsumerGroupA"),
					EventHubName:                    to.Ptr("MyEventHubName"),
					FullyQualifiedEventHubNamespace: to.Ptr("myeventhub.servicesbus.windows.net"),
				},
				ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
			},
			SystemData: &armhealthcareapis.SystemData{
				CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-28T19:26:24.072Z"); return t }()),
				CreatedBy:      to.Ptr("string"),
				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-28T19:26:24.072Z"); return t }()),
				LastModifiedBy: to.Ptr("string"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IotConnector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IotConnector)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotConnectors_CreateOrUpdate(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an IoT Connector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewIotConnectorsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testRG",
		"workspace1",
		"blue",
		armhealthcareapis.IotConnector{
			Identity: &armhealthcareapis.ServiceManagedIdentityIdentity{
				Type: to.Ptr(armhealthcareapis.ManagedServiceIdentityTypeSystemAssigned),
			},
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"additionalProp1": to.Ptr("string"),
				"additionalProp2": to.Ptr("string"),
				"additionalProp3": to.Ptr("string"),
			},
			Properties: &armhealthcareapis.IotConnectorProperties{
				DeviceMapping: &armhealthcareapis.IotMappingProperties{
					Content: map[string]interface{}{
						"template": []interface{}{
							map[string]interface{}{
								"template": map[string]interface{}{
									"deviceIdExpression":  "$.deviceid",
									"timestampExpression": "$.measurementdatetime",
									"typeMatchExpression": "$..[?(@heartrate)]",
									"typeName":            "heartrate",
									"values": []interface{}{
										map[string]interface{}{
											"required":        "true",
											"valueExpression": "$.heartrate",
											"valueName":       "hr",
										},
									},
								},
								"templateType": "JsonPathContent",
							},
						},
						"templateType": "CollectionContent",
					},
				},
				IngestionEndpointConfiguration: &armhealthcareapis.IotEventHubIngestionEndpointConfiguration{
					ConsumerGroup:                   to.Ptr("ConsumerGroupA"),
					EventHubName:                    to.Ptr("MyEventHubName"),
					FullyQualifiedEventHubNamespace: to.Ptr("myeventhub.servicesbus.windows.net"),
				},
			},
		},
		&armhealthcareapis.IotConnectorsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.IotConnector{
			Identity: &armhealthcareapis.ServiceManagedIdentityIdentity{
				Type: to.Ptr(armhealthcareapis.ManagedServiceIdentityTypeSystemAssigned),
			},
			Name:     to.Ptr("blue"),
			Type:     to.Ptr("Microsoft.HealthcareApis/workspaces/iotconnectors"),
			Etag:     to.Ptr("00000000-0000-0000-f5ac-912ca49e01d6"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1/iotconnectors/blue"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"additionalProp1": to.Ptr("string"),
				"additionalProp2": to.Ptr("string"),
				"additionalProp3": to.Ptr("string"),
			},
			Properties: &armhealthcareapis.IotConnectorProperties{
				DeviceMapping: &armhealthcareapis.IotMappingProperties{
					Content: map[string]interface{}{
						"template": []interface{}{
							map[string]interface{}{
								"template": map[string]interface{}{
									"deviceIdExpression":  "$.deviceid",
									"timestampExpression": "$.measurementdatetime",
									"typeMatchExpression": "$..[?(@heartrate)]",
									"typeName":            "heartrate",
									"values": []interface{}{
										map[string]interface{}{
											"required":        "true",
											"valueExpression": "$.heartrate",
											"valueName":       "hr",
										},
									},
								},
								"templateType": "JsonPathContent",
							},
						},
						"templateType": "CollectionContent",
					},
				},
				IngestionEndpointConfiguration: &armhealthcareapis.IotEventHubIngestionEndpointConfiguration{
					ConsumerGroup:                   to.Ptr("ConsumerGroupA"),
					EventHubName:                    to.Ptr("MyEventHubName"),
					FullyQualifiedEventHubNamespace: to.Ptr("myeventhub.servicesbus.windows.net"),
				},
				ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
			},
			SystemData: &armhealthcareapis.SystemData{
				CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-28T19:26:24.072Z"); return t }()),
				CreatedBy:      to.Ptr("string"),
				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-28T19:26:24.072Z"); return t }()),
				LastModifiedBy: to.Ptr("string"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IotConnector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IotConnector)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotConnectors_Update(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_Patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch an IoT Connector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewIotConnectorsClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"testRG",
		"blue",
		"workspace1",
		armhealthcareapis.IotConnectorPatchResource{
			Tags: map[string]*string{
				"additionalProp1": to.Ptr("string"),
				"additionalProp2": to.Ptr("string"),
				"additionalProp3": to.Ptr("string"),
			},
			Identity: &armhealthcareapis.ServiceManagedIdentityIdentity{
				Type: to.Ptr(armhealthcareapis.ManagedServiceIdentityTypeSystemAssigned),
			},
		},
		&armhealthcareapis.IotConnectorsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_Patch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_Patch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.IotConnector{
			Identity: &armhealthcareapis.ServiceManagedIdentityIdentity{
				Type: to.Ptr(armhealthcareapis.ManagedServiceIdentityTypeSystemAssigned),
			},
			Name:     to.Ptr("blue"),
			Type:     to.Ptr("Microsoft.HealthcareApis/workspaces/iotconnectors"),
			Etag:     to.Ptr("00000000-0000-0000-f5ac-912ca49e01d6"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1/iotconnectors/blue"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"additionalProp1": to.Ptr("string"),
				"additionalProp2": to.Ptr("string"),
				"additionalProp3": to.Ptr("string"),
			},
			Properties: &armhealthcareapis.IotConnectorProperties{
				DeviceMapping: &armhealthcareapis.IotMappingProperties{
					Content: map[string]interface{}{
						"template": []interface{}{
							map[string]interface{}{
								"template": map[string]interface{}{
									"deviceIdExpression":  "$.deviceid",
									"timestampExpression": "$.measurementdatetime",
									"typeMatchExpression": "$..[?(@heartrate)]",
									"typeName":            "heartrate",
									"values": []interface{}{
										map[string]interface{}{
											"required":        "true",
											"valueExpression": "$.heartrate",
											"valueName":       "hr",
										},
									},
								},
								"templateType": "JsonPathContent",
							},
						},
						"templateType": "CollectionContent",
					},
				},
				IngestionEndpointConfiguration: &armhealthcareapis.IotEventHubIngestionEndpointConfiguration{
					ConsumerGroup:                   to.Ptr("ConsumerGroupA"),
					EventHubName:                    to.Ptr("MyEventHubName"),
					FullyQualifiedEventHubNamespace: to.Ptr("myeventhub.servicesbus.windows.net"),
				},
				ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
			},
			SystemData: &armhealthcareapis.SystemData{
				CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-28T19:26:24.072Z"); return t }()),
				CreatedBy:      to.Ptr("string"),
				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-28T19:26:24.072Z"); return t }()),
				LastModifiedBy: to.Ptr("string"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IotConnector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IotConnector)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_Patch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotConnectors_Delete(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an IoT Connector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewIotConnectorsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testRG",
		"blue",
		"workspace1",
		&armhealthcareapis.IotConnectorsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_Delete.json: %v", err)
	}
}

func TestFhirDestinations_ListByIotConnector(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_fhirdestination_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List IoT Connectors"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewFhirDestinationsClient("subid", cred, &options)
	pager := client.ListByIotConnector("testRG",
		"workspace1",
		"blue",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_fhirdestination_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhealthcareapis.IotFhirDestinationCollection{
			Value: []*armhealthcareapis.IotFhirDestination{
				{
					Name:     to.Ptr("dest1"),
					Type:     to.Ptr("Microsoft.HealthcareApis/workspaces/iotconnectors/fhirdestinations"),
					Etag:     to.Ptr("00000000-0000-0000-f5ac-912ca49e01d6"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1/iotconnectors/blue/fhirdestinations/dest1"),
					Location: to.Ptr("westus"),
					Properties: &armhealthcareapis.IotFhirDestinationProperties{
						ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
						FhirMapping: &armhealthcareapis.IotMappingProperties{
							Content: map[string]interface{}{
								"template": []interface{}{
									map[string]interface{}{
										"template": map[string]interface{}{
											"codes": []interface{}{
												map[string]interface{}{
													"code":    "8867-4",
													"display": "Heart rate",
													"system":  "http://loinc.org",
												},
											},
											"periodInterval": float64(60),
											"typeName":       "heartrate",
											"value": map[string]interface{}{
												"defaultPeriod": float64(5000),
												"unit":          "count/min",
												"valueName":     "hr",
												"valueType":     "SampledData",
											},
										},
										"templateType": "CodeValueFhir",
									},
								},
								"templateType": "CollectionFhirTemplate",
							},
						},
						FhirServiceResourceID:          to.Ptr("subscriptions/11111111-2222-3333-4444-555566667777/resourceGroups/myrg/providers/Microsoft.HealthcareApis/workspaces/myworkspace/fhirservices/myfhirservice"),
						ResourceIdentityResolutionType: to.Ptr(armhealthcareapis.IotIdentityResolutionTypeCreate),
					},
					SystemData: &armhealthcareapis.SystemData{
						CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-28T19:26:24.072Z"); return t }()),
						CreatedBy:      to.Ptr("string"),
						LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-28T19:26:24.072Z"); return t }()),
						LastModifiedBy: to.Ptr("string"),
					},
				},
				{
					Name:     to.Ptr("dest2"),
					Type:     to.Ptr("Microsoft.HealthcareApis/workspaces/iotconnectors/fhirdestinations"),
					Etag:     to.Ptr("00000000-0000-0000-f6ac-912ca49e01d6"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1/iotconnectors/blue/fhirdestinations/dest2"),
					Location: to.Ptr("westus"),
					Properties: &armhealthcareapis.IotFhirDestinationProperties{
						ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
						FhirMapping: &armhealthcareapis.IotMappingProperties{
							Content: map[string]interface{}{
								"template": []interface{}{
									map[string]interface{}{
										"template": map[string]interface{}{
											"codes": []interface{}{
												map[string]interface{}{
													"code":    "8867-4",
													"display": "Heart rate",
													"system":  "http://loinc.org",
												},
											},
											"periodInterval": float64(60),
											"typeName":       "heartrate",
											"value": map[string]interface{}{
												"defaultPeriod": float64(5000),
												"unit":          "count/min",
												"valueName":     "hr",
												"valueType":     "SampledData",
											},
										},
										"templateType": "CodeValueFhir",
									},
								},
								"templateType": "CollectionFhirTemplate",
							},
						},
						FhirServiceResourceID:          to.Ptr("subscriptions/11111111-2222-3333-4444-555566667777/resourceGroups/myrg/providers/Microsoft.HealthcareApis/workspaces/myworkspace/fhirservices/myfhirservice"),
						ResourceIdentityResolutionType: to.Ptr(armhealthcareapis.IotIdentityResolutionTypeLookup),
					},
					SystemData: &armhealthcareapis.SystemData{
						CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-27T19:26:24.072Z"); return t }()),
						CreatedBy:      to.Ptr("string"),
						LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-27T19:26:24.072Z"); return t }()),
						LastModifiedBy: to.Ptr("string"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IotFhirDestinationCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IotFhirDestinationCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_fhirdestination_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotConnectorFhirDestination_Get(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_fhirdestination_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an IoT Connector destination"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewIotConnectorFhirDestinationClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"testRG",
		"workspace1",
		"blue",
		"dest1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_fhirdestination_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.IotFhirDestination{
			Name:     to.Ptr("dest1"),
			Type:     to.Ptr("Microsoft.HealthcareApis/workspaces/iotconnectors/fhirdestinations"),
			Etag:     to.Ptr("00000000-0000-0000-f5ac-912ca49e01d6"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1/iotconnectors/blue/fhirdestinations/dest1"),
			Location: to.Ptr("westus"),
			Properties: &armhealthcareapis.IotFhirDestinationProperties{
				ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
				FhirMapping: &armhealthcareapis.IotMappingProperties{
					Content: map[string]interface{}{
						"template": []interface{}{
							map[string]interface{}{
								"template": map[string]interface{}{
									"codes": []interface{}{
										map[string]interface{}{
											"code":    "8867-4",
											"display": "Heart rate",
											"system":  "http://loinc.org",
										},
									},
									"periodInterval": float64(60),
									"typeName":       "heartrate",
									"value": map[string]interface{}{
										"defaultPeriod": float64(5000),
										"unit":          "count/min",
										"valueName":     "hr",
										"valueType":     "SampledData",
									},
								},
								"templateType": "CodeValueFhir",
							},
						},
						"templateType": "CollectionFhirTemplate",
					},
				},
				FhirServiceResourceID:          to.Ptr("subscriptions/11111111-2222-3333-4444-555566667777/resourceGroups/myrg/providers/Microsoft.HealthcareApis/workspaces/myworkspace/fhirservices/myfhirservice"),
				ResourceIdentityResolutionType: to.Ptr(armhealthcareapis.IotIdentityResolutionTypeCreate),
			},
			SystemData: &armhealthcareapis.SystemData{
				CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-28T19:26:24.072Z"); return t }()),
				CreatedBy:      to.Ptr("string"),
				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-28T19:26:24.072Z"); return t }()),
				LastModifiedBy: to.Ptr("string"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IotFhirDestination) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IotFhirDestination)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_fhirdestination_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotConnectorFhirDestination_CreateOrUpdate(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_fhirdestination_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an Iot Connector FHIR destination"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewIotConnectorFhirDestinationClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testRG",
		"workspace1",
		"blue",
		"dest1",
		armhealthcareapis.IotFhirDestination{
			Location: to.Ptr("westus"),
			Properties: &armhealthcareapis.IotFhirDestinationProperties{
				FhirMapping: &armhealthcareapis.IotMappingProperties{
					Content: map[string]interface{}{
						"template": []interface{}{
							map[string]interface{}{
								"template": map[string]interface{}{
									"codes": []interface{}{
										map[string]interface{}{
											"code":    "8867-4",
											"display": "Heart rate",
											"system":  "http://loinc.org",
										},
									},
									"periodInterval": float64(60),
									"typeName":       "heartrate",
									"value": map[string]interface{}{
										"defaultPeriod": float64(5000),
										"unit":          "count/min",
										"valueName":     "hr",
										"valueType":     "SampledData",
									},
								},
								"templateType": "CodeValueFhir",
							},
						},
						"templateType": "CollectionFhirTemplate",
					},
				},
				FhirServiceResourceID:          to.Ptr("subscriptions/11111111-2222-3333-4444-555566667777/resourceGroups/myrg/providers/Microsoft.HealthcareApis/workspaces/myworkspace/fhirservices/myfhirservice"),
				ResourceIdentityResolutionType: to.Ptr(armhealthcareapis.IotIdentityResolutionTypeCreate),
			},
		},
		&armhealthcareapis.IotConnectorFhirDestinationClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_fhirdestination_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_fhirdestination_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.IotFhirDestination{
			Name:     to.Ptr("dest1"),
			Type:     to.Ptr("Microsoft.HealthcareApis/workspaces/iotconnectors/fhirdestinations"),
			Etag:     to.Ptr("00000000-0000-0000-f5ac-912ca49e01d6"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1/iotconnectors/blue/fhirdestinations/dest1"),
			Location: to.Ptr("West US 2"),
			Properties: &armhealthcareapis.IotFhirDestinationProperties{
				ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
				FhirMapping: &armhealthcareapis.IotMappingProperties{
					Content: map[string]interface{}{
						"template": []interface{}{
							map[string]interface{}{
								"template": map[string]interface{}{
									"codes": []interface{}{
										map[string]interface{}{
											"code":    "8867-4",
											"display": "Heart rate",
											"system":  "http://loinc.org",
										},
									},
									"periodInterval": float64(60),
									"typeName":       "heartrate",
									"value": map[string]interface{}{
										"defaultPeriod": float64(5000),
										"unit":          "count/min",
										"valueName":     "hr",
										"valueType":     "SampledData",
									},
								},
								"templateType": "CodeValueFhir",
							},
						},
						"templateType": "CollectionFhirTemplate",
					},
				},
				FhirServiceResourceID:          to.Ptr("subscriptions/11111111-2222-3333-4444-555566667777/resourceGroups/myrg/providers/Microsoft.HealthcareApis/workspaces/myworkspace/fhirservices/myfhirservice"),
				ResourceIdentityResolutionType: to.Ptr(armhealthcareapis.IotIdentityResolutionTypeCreate),
			},
			SystemData: &armhealthcareapis.SystemData{
				CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-28T19:26:24.072Z"); return t }()),
				CreatedBy:      to.Ptr("string"),
				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-28T19:26:24.072Z"); return t }()),
				LastModifiedBy: to.Ptr("string"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IotFhirDestination) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IotFhirDestination)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_fhirdestination_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotConnectorFhirDestination_Delete(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_fhirdestination_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an IoT Connector destination"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewIotConnectorFhirDestinationClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testRG",
		"workspace1",
		"blue",
		"dest1",
		&armhealthcareapis.IotConnectorFhirDestinationClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_fhirdestination_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/iotconnectors/iotconnector_fhirdestination_Delete.json: %v", err)
	}
}

func TestFhirServices_ListByWorkspace(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/fhirservices/FhirServices_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List fhirservices"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewFhirServicesClient("subid", cred, &options)
	pager := client.ListByWorkspace("testRG",
		"workspace1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/fhirservices/FhirServices_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhealthcareapis.FhirServiceCollection{
			Value: []*armhealthcareapis.FhirService{
				{
					Name: to.Ptr("fhirservice1"),
					Type: to.Ptr("Microsoft.HealthcareApis/workspaces/fhirservices"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1/fhirservices/fhirservice1"),
					Properties: &armhealthcareapis.FhirServiceProperties{
						ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("fhirservice2"),
					Type: to.Ptr("Microsoft.HealthcareApis/workspaces/fhirservices"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1/fhirservices/fhirservice2"),
					Properties: &armhealthcareapis.FhirServiceProperties{
						ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FhirServiceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FhirServiceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/fhirservices/FhirServices_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFhirServices_Get(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/fhirservices/FhirServices_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Fhir Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewFhirServicesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"testRG",
		"workspace1",
		"fhirservices1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/fhirservices/FhirServices_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.FhirService{
			Name: to.Ptr("fhirservices1"),
			Type: to.Ptr("Microsoft.HealthcareApis/workspaces/fhirservices"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1/fhirservices/fhirservices1"),
			Properties: &armhealthcareapis.FhirServiceProperties{
				ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FhirService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FhirService)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/fhirservices/FhirServices_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFhirServices_CreateOrUpdate(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/fhirservices/FhirServices_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a Fhir Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewFhirServicesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testRG",
		"workspace1",
		"fhirservice1",
		armhealthcareapis.FhirService{
			Identity: &armhealthcareapis.ServiceManagedIdentityIdentity{
				Type: to.Ptr(armhealthcareapis.ManagedServiceIdentityTypeSystemAssigned),
			},
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"additionalProp1": to.Ptr("string"),
				"additionalProp2": to.Ptr("string"),
				"additionalProp3": to.Ptr("string"),
			},
			Kind: to.Ptr(armhealthcareapis.FhirServiceKindFhirR4),
			Properties: &armhealthcareapis.FhirServiceProperties{
				AccessPolicies: []*armhealthcareapis.FhirServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AcrConfiguration: &armhealthcareapis.FhirServiceAcrConfiguration{
					LoginServers: []*string{
						to.Ptr("test1.azurecr.io")},
				},
				AuthenticationConfiguration: &armhealthcareapis.FhirServiceAuthenticationConfiguration{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armhealthcareapis.FhirServiceCorsConfiguration{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int32](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				ExportConfiguration: &armhealthcareapis.FhirServiceExportConfiguration{
					StorageAccountName: to.Ptr("existingStorageAccount"),
				},
			},
		},
		&armhealthcareapis.FhirServicesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/fhirservices/FhirServices_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/fhirservices/FhirServices_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.FhirService{
			Name:     to.Ptr("fhirservice1"),
			Type:     to.Ptr("Microsoft.HealthcareApis/workspaces/fhirservices"),
			Etag:     to.Ptr("etagvalue"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1/fhirservices/fhirservice1"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"additionalProp1": to.Ptr("string"),
				"additionalProp2": to.Ptr("string"),
				"additionalProp3": to.Ptr("string"),
			},
			Kind: to.Ptr(armhealthcareapis.FhirServiceKindFhirR4),
			Properties: &armhealthcareapis.FhirServiceProperties{
				AccessPolicies: []*armhealthcareapis.FhirServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armhealthcareapis.FhirServiceAuthenticationConfiguration{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armhealthcareapis.FhirServiceCorsConfiguration{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int32](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				ExportConfiguration: &armhealthcareapis.FhirServiceExportConfiguration{
					StorageAccountName: to.Ptr("existingStorageAccount"),
				},
				ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FhirService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FhirService)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/fhirservices/FhirServices_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFhirServices_Update(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/fhirservices/FhirServices_Patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a Fhir Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewFhirServicesClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"testRG",
		"fhirservice1",
		"workspace1",
		armhealthcareapis.FhirServicePatchResource{
			Tags: map[string]*string{
				"tagKey": to.Ptr("tagValue"),
			},
		},
		&armhealthcareapis.FhirServicesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/fhirservices/FhirServices_Patch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/fhirservices/FhirServices_Patch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.FhirService{
			Name: to.Ptr("fhirservice1"),
			Type: to.Ptr("Microsoft.HealthcareApis/workspaces/fhirservices"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1/fhirservices/fhirservice1"),
			Tags: map[string]*string{
				"tagKey": to.Ptr("tagValue"),
			},
			Properties: &armhealthcareapis.FhirServiceProperties{
				ProvisioningState: to.Ptr(armhealthcareapis.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FhirService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FhirService)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/fhirservices/FhirServices_Patch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFhirServices_Delete(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/fhirservices/FhirServices_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a Fhir Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewFhirServicesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testRG",
		"fhirservice1",
		"workspace1",
		&armhealthcareapis.FhirServicesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/fhirservices/FhirServices_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/fhirservices/FhirServices_Delete.json: %v", err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/OperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/OperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhealthcareapis.ListOperations{
			Value: []*armhealthcareapis.OperationDetail{
				{
					Name:    to.Ptr("Microsoft.HealthcareApis/services/read"),
					Display: &armhealthcareapis.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.HealthcareApis/services/write"),
					Display: &armhealthcareapis.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.HealthcareApis/services/delete"),
					Display: &armhealthcareapis.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.HealthcareApis/locations/operationresults/read"),
					Display: &armhealthcareapis.OperationDisplay{
						Description: to.Ptr("Get the status of an asynchronous operation"),
						Operation:   to.Ptr("read"),
						Provider:    to.Ptr("Microsoft.HealthcareApis"),
						Resource:    to.Ptr("operationresults"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.HealthcareApis/workspaces/read"),
					Display: &armhealthcareapis.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.HealthcareApis/workspaces/write"),
					Display: &armhealthcareapis.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.HealthcareApis/workspaces/delete"),
					Display: &armhealthcareapis.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.HealthcareApis/workspaces/dicomservices/read"),
					Display: &armhealthcareapis.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.HealthcareApis/workspaces/dicomservices/write"),
					Display: &armhealthcareapis.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.HealthcareApis/workspaces/dicomservices/delete"),
					Display: &armhealthcareapis.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.HealthcareApis/workspaces/iotconnectors/read"),
					Display: &armhealthcareapis.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.HealthcareApis/workspaces/iotconnectors/write"),
					Display: &armhealthcareapis.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.HealthcareApis/workspaces/iotconnectors/delete"),
					Display: &armhealthcareapis.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.HealthcareApis/workspaces/fhirservices/read"),
					Display: &armhealthcareapis.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.HealthcareApis/workspaces/fhirservices/write"),
					Display: &armhealthcareapis.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.HealthcareApis/workspaces/fhirservices/delete"),
					Display: &armhealthcareapis.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.HealthcareApis/checkNameAvailability/post"),
					Display: &armhealthcareapis.OperationDisplay{},
					Origin:  to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.HealthcareApis/Operations/read"),
					Display: &armhealthcareapis.OperationDisplay{
						Description: to.Ptr("Get the list of operations supported by this Resource Provider."),
						Operation:   to.Ptr("read"),
						Provider:    to.Ptr("Microsoft.HealthcareApis"),
						Resource:    to.Ptr("operations"),
					},
					Origin: to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListOperations) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListOperations)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/OperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperationResults_Get(t *testing.T) {
	// From example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/OperationResultsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get operation result"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhealthcareapis.NewOperationResultsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"westus",
		"exampleid",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/OperationResultsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhealthcareapis.OperationResultsDescription{
			Name:       to.Ptr("servicename"),
			ID:         to.Ptr("/subscriptions/subid/providers/Microsoft.HealthcareApis/locations/westus/operationresults/exampleid"),
			Properties: map[string]interface{}{},
			StartTime:  to.Ptr("2019-01-21T06:03:30.2716301Z"),
			Status:     to.Ptr(armhealthcareapis.OperationResultStatusRequested),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationResultsDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationResultsDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/preview/2021-06-01-preview/examples/OperationResultsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
