//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhealthcareapis

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// DicomServicesClientListByWorkspacePager provides operations for iterating over paged responses.
type DicomServicesClientListByWorkspacePager struct {
	client    *DicomServicesClient
	current   DicomServicesClientListByWorkspaceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DicomServicesClientListByWorkspaceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DicomServicesClientListByWorkspacePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DicomServiceCollection.NextLink == nil || len(*p.current.DicomServiceCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DicomServicesClientListByWorkspacePager) NextPage(ctx context.Context) (DicomServicesClientListByWorkspaceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DicomServicesClientListByWorkspaceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DicomServicesClientListByWorkspaceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DicomServicesClientListByWorkspaceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DicomServicesClientListByWorkspaceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByWorkspaceHandleResponse(resp)
	if err != nil {
		return DicomServicesClientListByWorkspaceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// FhirDestinationsClientListByIotConnectorPager provides operations for iterating over paged responses.
type FhirDestinationsClientListByIotConnectorPager struct {
	client    *FhirDestinationsClient
	current   FhirDestinationsClientListByIotConnectorResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, FhirDestinationsClientListByIotConnectorResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *FhirDestinationsClientListByIotConnectorPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IotFhirDestinationCollection.NextLink == nil || len(*p.current.IotFhirDestinationCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *FhirDestinationsClientListByIotConnectorPager) NextPage(ctx context.Context) (FhirDestinationsClientListByIotConnectorResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return FhirDestinationsClientListByIotConnectorResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return FhirDestinationsClientListByIotConnectorResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return FhirDestinationsClientListByIotConnectorResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return FhirDestinationsClientListByIotConnectorResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByIotConnectorHandleResponse(resp)
	if err != nil {
		return FhirDestinationsClientListByIotConnectorResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// FhirServicesClientListByWorkspacePager provides operations for iterating over paged responses.
type FhirServicesClientListByWorkspacePager struct {
	client    *FhirServicesClient
	current   FhirServicesClientListByWorkspaceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, FhirServicesClientListByWorkspaceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *FhirServicesClientListByWorkspacePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FhirServiceCollection.NextLink == nil || len(*p.current.FhirServiceCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *FhirServicesClientListByWorkspacePager) NextPage(ctx context.Context) (FhirServicesClientListByWorkspaceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return FhirServicesClientListByWorkspaceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return FhirServicesClientListByWorkspaceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return FhirServicesClientListByWorkspaceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return FhirServicesClientListByWorkspaceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByWorkspaceHandleResponse(resp)
	if err != nil {
		return FhirServicesClientListByWorkspaceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// IotConnectorsClientListByWorkspacePager provides operations for iterating over paged responses.
type IotConnectorsClientListByWorkspacePager struct {
	client    *IotConnectorsClient
	current   IotConnectorsClientListByWorkspaceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, IotConnectorsClientListByWorkspaceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *IotConnectorsClientListByWorkspacePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IotConnectorCollection.NextLink == nil || len(*p.current.IotConnectorCollection.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *IotConnectorsClientListByWorkspacePager) NextPage(ctx context.Context) (IotConnectorsClientListByWorkspaceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return IotConnectorsClientListByWorkspaceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return IotConnectorsClientListByWorkspaceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return IotConnectorsClientListByWorkspaceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return IotConnectorsClientListByWorkspaceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByWorkspaceHandleResponse(resp)
	if err != nil {
		return IotConnectorsClientListByWorkspaceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListOperations.NextLink == nil || len(*p.current.ListOperations.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateEndpointConnectionsClientListByServicePager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsClientListByServicePager struct {
	client    *PrivateEndpointConnectionsClient
	current   PrivateEndpointConnectionsClientListByServiceResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateEndpointConnectionsClientListByServicePager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *PrivateEndpointConnectionsClientListByServicePager) NextPage(ctx context.Context) (PrivateEndpointConnectionsClientListByServiceResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return PrivateEndpointConnectionsClientListByServiceResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateEndpointConnectionsClientListByServiceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateEndpointConnectionsClientListByServiceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateEndpointConnectionsClientListByServiceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		return PrivateEndpointConnectionsClientListByServiceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ServicesClientListByResourceGroupPager provides operations for iterating over paged responses.
type ServicesClientListByResourceGroupPager struct {
	client    *ServicesClient
	current   ServicesClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ServicesClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ServicesClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServicesDescriptionListResult.NextLink == nil || len(*p.current.ServicesDescriptionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ServicesClientListByResourceGroupPager) NextPage(ctx context.Context) (ServicesClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ServicesClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ServicesClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ServicesClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ServicesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return ServicesClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ServicesClientListPager provides operations for iterating over paged responses.
type ServicesClientListPager struct {
	client    *ServicesClient
	current   ServicesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ServicesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ServicesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServicesDescriptionListResult.NextLink == nil || len(*p.current.ServicesDescriptionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ServicesClientListPager) NextPage(ctx context.Context) (ServicesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ServicesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ServicesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ServicesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ServicesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ServicesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WorkspacesClientListByResourceGroupPager provides operations for iterating over paged responses.
type WorkspacesClientListByResourceGroupPager struct {
	client    *WorkspacesClient
	current   WorkspacesClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WorkspacesClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WorkspacesClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkspaceList.NextLink == nil || len(*p.current.WorkspaceList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *WorkspacesClientListByResourceGroupPager) NextPage(ctx context.Context) (WorkspacesClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return WorkspacesClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WorkspacesClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WorkspacesClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WorkspacesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return WorkspacesClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WorkspacesClientListBySubscriptionPager provides operations for iterating over paged responses.
type WorkspacesClientListBySubscriptionPager struct {
	client    *WorkspacesClient
	current   WorkspacesClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WorkspacesClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WorkspacesClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkspaceList.NextLink == nil || len(*p.current.WorkspaceList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *WorkspacesClientListBySubscriptionPager) NextPage(ctx context.Context) (WorkspacesClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return WorkspacesClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WorkspacesClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WorkspacesClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WorkspacesClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return WorkspacesClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}
