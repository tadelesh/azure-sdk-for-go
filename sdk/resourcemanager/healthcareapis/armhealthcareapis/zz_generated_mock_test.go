//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhealthcareapis

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestServices_Get(t *testing.T) {
	// From example Get metadata
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"service1",
		&ServicesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServicesDescription.ID == nil {
		t.Fatal("ServicesDescription.ID should not be nil!")
	}
}

func TestServices_CreateOrUpdate(t *testing.T) {
	// From example Create or Update a service with all parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"service1",
		ServicesDescription{
			ServicesResource: ServicesResource{
				Identity: &ServicesResourceIdentity{
					Type: ManagedServiceIdentityTypeSystemAssigned.ToPtr(),
				},
				Kind:     KindFhirR4.ToPtr(),
				Location: to.StringPtr("westus2"),
				Tags:     map[string]*string{},
			},
			Properties: &ServicesProperties{
				AccessPolicies: []*ServiceAccessPolicyEntry{
					{
						ObjectID: to.StringPtr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.StringPtr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &ServiceAuthenticationConfigurationInfo{
					Audience:          to.StringPtr("https://azurehealthcareapis.com"),
					Authority:         to.StringPtr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.BoolPtr(true),
				},
				CorsConfiguration: &ServiceCorsConfigurationInfo{
					AllowCredentials: to.BoolPtr(false),
					Headers: []*string{
						to.StringPtr("*")},
					MaxAge: to.Int32Ptr(1440),
					Methods: []*string{
						to.StringPtr("DELETE"),
						to.StringPtr("GET"),
						to.StringPtr("OPTIONS"),
						to.StringPtr("PATCH"),
						to.StringPtr("POST"),
						to.StringPtr("PUT")},
					Origins: []*string{
						to.StringPtr("*")},
				},
				CosmosDbConfiguration: &ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.StringPtr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Int32Ptr(1000),
				},
				ExportConfiguration: &ServiceExportConfigurationInfo{
					StorageAccountName: to.StringPtr("existingStorageAccount"),
				},
				PrivateEndpointConnections: []*PrivateEndpointConnection{},
				PublicNetworkAccess:        PublicNetworkAccessDisabled.ToPtr(),
			},
		},
		&ServicesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServicesDescription.ID == nil {
		t.Fatal("ServicesDescription.ID should not be nil!")
	}

	// From example Create or Update a service with minimum parameters
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"service2",
		ServicesDescription{
			ServicesResource: ServicesResource{
				Kind:     KindFhirR4.ToPtr(),
				Location: to.StringPtr("westus2"),
				Tags:     map[string]*string{},
			},
			Properties: &ServicesProperties{
				AccessPolicies: []*ServiceAccessPolicyEntry{
					{
						ObjectID: to.StringPtr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					}},
			},
		},
		&ServicesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServicesDescription.ID == nil {
		t.Fatal("ServicesDescription.ID should not be nil!")
	}
}

func TestServices_Update(t *testing.T) {
	// From example Patch service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"subid")
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"service1",
		ServicesPatchDescription{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&ServicesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServicesDescription.ID == nil {
		t.Fatal("ServicesDescription.ID should not be nil!")
	}
}

func TestServices_Delete(t *testing.T) {
	// From example Delete service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"service1",
		&ServicesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServices_List(t *testing.T) {
	// From example List all services in subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"subid")
	pager := client.List(&ServicesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServicesDescription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServicesDescription.ID should not be nil!")
			}
		}
	}
}

func TestServices_ListByResourceGroup(t *testing.T) {
	// From example List all services in resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"subid")
	pager := client.ListByResourceGroup("rgname",
		&ServicesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServicesDescription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServicesDescription.ID should not be nil!")
			}
		}
	}
}

func TestServices_CheckNameAvailability(t *testing.T) {
	// From example Check name availability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con,
		"subid")
	_, err := client.CheckNameAvailability(ctx,
		CheckNameAvailabilityParameters{
			Name: to.StringPtr("serviceName"),
			Type: to.StringPtr("Microsoft.HealthcareApis/services"),
		},
		&ServicesCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_ListByService(t *testing.T) {
	// From example PrivateEndpointConnection_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"subid")
	_, err := client.ListByService(ctx,
		"rgname",
		"service1",
		&PrivateEndpointConnectionsListByServiceOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example PrivateEndpointConnection_GetConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rgname",
		"service1",
		"myConnection",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnectionDescription.ID == nil {
		t.Fatal("PrivateEndpointConnectionDescription.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example PrivateEndpointConnection_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rgname",
		"service1",
		"myConnection",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionState{
					Description: to.StringPtr("Auto-Approved"),
					Status:      PrivateEndpointServiceConnectionStatusApproved.ToPtr(),
				},
			},
		},
		&PrivateEndpointConnectionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnectionDescription.ID == nil {
		t.Fatal("PrivateEndpointConnectionDescription.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example PrivateEndpointConnections_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rgname",
		"service1",
		"myConnection",
		&PrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkResources_ListByService(t *testing.T) {
	// From example PrivateLinkResources_ListGroupIds
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"subid")
	_, err := client.ListByService(ctx,
		"rgname",
		"service1",
		&PrivateLinkResourcesListByServiceOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example PrivateLinkResources_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rgname",
		"service1",
		"fhir",
		&PrivateLinkResourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkResourceDescription.ID == nil {
		t.Fatal("PrivateLinkResourceDescription.ID should not be nil!")
	}
}

func TestWorkspaces_ListBySubscription(t *testing.T) {
	// From example Get workspaces by subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"subid")
	pager := client.ListBySubscription(&WorkspacesListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Workspace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Workspace.ID should not be nil!")
			}
		}
	}
}

func TestWorkspaces_ListByResourceGroup(t *testing.T) {
	// From example Get workspaces by resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"subid")
	pager := client.ListByResourceGroup("testRG",
		&WorkspacesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Workspace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Workspace.ID should not be nil!")
			}
		}
	}
}

func TestWorkspaces_Get(t *testing.T) {
	// From example Get workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"testRG",
		"workspace1",
		&WorkspacesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Workspace.ID == nil {
		t.Fatal("Workspace.ID should not be nil!")
	}
}

func TestWorkspaces_CreateOrUpdate(t *testing.T) {
	// From example Create or update a workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testRG",
		"workspace1",
		Workspace{
			TaggedResource: TaggedResource{
				LocationBasedResource: LocationBasedResource{
					Location: to.StringPtr("westus"),
				},
			},
			Properties: &WorkspaceProperties{},
		},
		&WorkspacesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Workspace.ID == nil {
		t.Fatal("Workspace.ID should not be nil!")
	}
}

func TestWorkspaces_Update(t *testing.T) {
	// From example Update a workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"subid")
	poller, err := client.BeginUpdate(ctx,
		"testRG",
		"workspace1",
		WorkspacePatchResource{
			ResourceTags: ResourceTags{
				Tags: map[string]*string{
					"tagKey": to.StringPtr("tagValue"),
				},
			},
		},
		&WorkspacesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Workspace.ID == nil {
		t.Fatal("Workspace.ID should not be nil!")
	}
}

func TestWorkspaces_Delete(t *testing.T) {
	// From example Delete a workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"testRG",
		"workspace1",
		&WorkspacesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDicomServices_ListByWorkspace(t *testing.T) {
	// From example List dicomservices
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDicomServicesClient(con,
		"subid")
	pager := client.ListByWorkspace("testRG",
		"workspace1",
		&DicomServicesListByWorkspaceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DicomService.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DicomService.ID should not be nil!")
			}
		}
	}
}

func TestDicomServices_Get(t *testing.T) {
	// From example Get a dicomservice
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDicomServicesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"testRG",
		"workspace1",
		"blue",
		&DicomServicesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DicomService.ID == nil {
		t.Fatal("DicomService.ID should not be nil!")
	}
}

func TestDicomServices_CreateOrUpdate(t *testing.T) {
	// From example Create or update a Dicom Service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDicomServicesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testRG",
		"workspace1",
		"blue",
		DicomService{
			TaggedResource: TaggedResource{
				LocationBasedResource: LocationBasedResource{
					Location: to.StringPtr("westus"),
				},
			},
			Properties: &DicomServiceProperties{},
		},
		&DicomServicesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DicomService.ID == nil {
		t.Fatal("DicomService.ID should not be nil!")
	}
}

func TestDicomServices_Update(t *testing.T) {
	// From example Update a dicomservice
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDicomServicesClient(con,
		"subid")
	poller, err := client.BeginUpdate(ctx,
		"testRG",
		"blue",
		"workspace1",
		DicomServicePatchResource{
			ResourceTags: ResourceTags{
				Tags: map[string]*string{
					"tagKey": to.StringPtr("tagValue"),
				},
			},
		},
		&DicomServicesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DicomService.ID == nil {
		t.Fatal("DicomService.ID should not be nil!")
	}
}

func TestDicomServices_Delete(t *testing.T) {
	// From example Delete a dicomservice
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDicomServicesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"testRG",
		"blue",
		"workspace1",
		&DicomServicesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestIotConnectors_ListByWorkspace(t *testing.T) {
	// From example List iotconnectors
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotConnectorsClient(con,
		"subid")
	pager := client.ListByWorkspace("testRG",
		"workspace1",
		&IotConnectorsListByWorkspaceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IotConnector.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IotConnector.ID should not be nil!")
			}
		}
	}
}

func TestIotConnectors_Get(t *testing.T) {
	// From example Get an IoT Connector
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotConnectorsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"testRG",
		"workspace1",
		"blue",
		&IotConnectorsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IotConnector.ID == nil {
		t.Fatal("IotConnector.ID should not be nil!")
	}
}

func TestIotConnectors_CreateOrUpdate(t *testing.T) {
	// From example Create an IoT Connector
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotConnectorsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testRG",
		"workspace1",
		"blue",
		IotConnector{
			ServiceManagedIdentity: ServiceManagedIdentity{
				Identity: &ServiceManagedIdentityIdentity{
					Type: ManagedServiceIdentityTypeSystemAssigned.ToPtr(),
				},
			},
			TaggedResource: TaggedResource{
				LocationBasedResource: LocationBasedResource{
					Location: to.StringPtr("westus"),
				},
				ResourceTags: ResourceTags{
					Tags: map[string]*string{
						"additionalProp1": to.StringPtr("string"),
						"additionalProp2": to.StringPtr("string"),
						"additionalProp3": to.StringPtr("string"),
					},
				},
			},
			Properties: &IotConnectorProperties{
				DeviceMapping: &IotMappingProperties{
					Content: map[string]interface{}{
						"template": []interface{}{
							map[string]interface{}{
								"template": map[string]interface{}{
									"deviceIdExpression":  "$.deviceid",
									"timestampExpression": "$.measurementdatetime",
									"typeMatchExpression": "$..[?(@heartrate)]",
									"typeName":            "heartrate",
									"values": []interface{}{
										map[string]interface{}{
											"required":        "true",
											"valueExpression": "$.heartrate",
											"valueName":       "hr",
										},
									},
								},
								"templateType": "JsonPathContent",
							},
						},
						"templateType": "CollectionContent",
					},
				},
				IngestionEndpointConfiguration: &IotEventHubIngestionEndpointConfiguration{
					ConsumerGroup:                   to.StringPtr("ConsumerGroupA"),
					EventHubName:                    to.StringPtr("MyEventHubName"),
					FullyQualifiedEventHubNamespace: to.StringPtr("myeventhub.servicesbus.windows.net"),
				},
			},
		},
		&IotConnectorsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.IotConnector.ID == nil {
		t.Fatal("IotConnector.ID should not be nil!")
	}
}

func TestIotConnectors_Update(t *testing.T) {
	// From example Patch an IoT Connector
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotConnectorsClient(con,
		"subid")
	poller, err := client.BeginUpdate(ctx,
		"testRG",
		"blue",
		"workspace1",
		IotConnectorPatchResource{
			ResourceTags: ResourceTags{
				Tags: map[string]*string{
					"additionalProp1": to.StringPtr("string"),
					"additionalProp2": to.StringPtr("string"),
					"additionalProp3": to.StringPtr("string"),
				},
			},
			ServiceManagedIdentity: ServiceManagedIdentity{
				Identity: &ServiceManagedIdentityIdentity{
					Type: ManagedServiceIdentityTypeSystemAssigned.ToPtr(),
				},
			},
		},
		&IotConnectorsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.IotConnector.ID == nil {
		t.Fatal("IotConnector.ID should not be nil!")
	}
}

func TestIotConnectors_Delete(t *testing.T) {
	// From example Delete an IoT Connector
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotConnectorsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"testRG",
		"blue",
		"workspace1",
		&IotConnectorsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestFhirDestinations_ListByIotConnector(t *testing.T) {
	// From example List IoT Connectors
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFhirDestinationsClient(con,
		"subid")
	pager := client.ListByIotConnector("testRG",
		"workspace1",
		"blue",
		&FhirDestinationsListByIotConnectorOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IotFhirDestination.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IotFhirDestination.ID should not be nil!")
			}
		}
	}
}

func TestIotConnectorFhirDestination_Get(t *testing.T) {
	// From example Get an IoT Connector destination
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotConnectorFhirDestinationClient(con,
		"subid")
	res, err := client.Get(ctx,
		"testRG",
		"workspace1",
		"blue",
		"dest1",
		&IotConnectorFhirDestinationGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IotFhirDestination.ID == nil {
		t.Fatal("IotFhirDestination.ID should not be nil!")
	}
}

func TestIotConnectorFhirDestination_CreateOrUpdate(t *testing.T) {
	// From example Create or update an Iot Connector FHIR destination
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotConnectorFhirDestinationClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testRG",
		"workspace1",
		"blue",
		"dest1",
		IotFhirDestination{
			LocationBasedResource: LocationBasedResource{
				Location: to.StringPtr("westus"),
			},
			Properties: &IotFhirDestinationProperties{
				FhirMapping: &IotMappingProperties{
					Content: map[string]interface{}{
						"template": []interface{}{
							map[string]interface{}{
								"template": map[string]interface{}{
									"codes": []interface{}{
										map[string]interface{}{
											"code":    "8867-4",
											"display": "Heart rate",
											"system":  "http://loinc.org",
										},
									},
									"periodInterval": 60,
									"typeName":       "heartrate",
									"value": map[string]interface{}{
										"defaultPeriod": 5000,
										"unit":          "count/min",
										"valueName":     "hr",
										"valueType":     "SampledData",
									},
								},
								"templateType": "CodeValueFhir",
							},
						},
						"templateType": "CollectionFhirTemplate",
					},
				},
				FhirServiceResourceID:          to.StringPtr("subscriptions/11111111-2222-3333-4444-555566667777/resourceGroups/myrg/providers/Microsoft.HealthcareApis/workspaces/myworkspace/fhirservices/myfhirservice"),
				ResourceIdentityResolutionType: IotIdentityResolutionTypeCreate.ToPtr(),
			},
		},
		&IotConnectorFhirDestinationBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.IotFhirDestination.ID == nil {
		t.Fatal("IotFhirDestination.ID should not be nil!")
	}
}

func TestIotConnectorFhirDestination_Delete(t *testing.T) {
	// From example Delete an IoT Connector destination
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotConnectorFhirDestinationClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"testRG",
		"workspace1",
		"blue",
		"dest1",
		&IotConnectorFhirDestinationBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestFhirServices_ListByWorkspace(t *testing.T) {
	// From example List fhirservices
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFhirServicesClient(con,
		"subid")
	pager := client.ListByWorkspace("testRG",
		"workspace1",
		&FhirServicesListByWorkspaceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("FhirService.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("FhirService.ID should not be nil!")
			}
		}
	}
}

func TestFhirServices_Get(t *testing.T) {
	// From example Get a Fhir Service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFhirServicesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"testRG",
		"workspace1",
		"fhirservices1",
		&FhirServicesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.FhirService.ID == nil {
		t.Fatal("FhirService.ID should not be nil!")
	}
}

func TestFhirServices_CreateOrUpdate(t *testing.T) {
	// From example Create or update a Fhir Service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFhirServicesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testRG",
		"workspace1",
		"fhirservice1",
		FhirService{
			ServiceManagedIdentity: ServiceManagedIdentity{
				Identity: &ServiceManagedIdentityIdentity{
					Type: ManagedServiceIdentityTypeSystemAssigned.ToPtr(),
				},
			},
			TaggedResource: TaggedResource{
				LocationBasedResource: LocationBasedResource{
					Location: to.StringPtr("westus"),
				},
				ResourceTags: ResourceTags{
					Tags: map[string]*string{
						"additionalProp1": to.StringPtr("string"),
						"additionalProp2": to.StringPtr("string"),
						"additionalProp3": to.StringPtr("string"),
					},
				},
			},
			Kind: FhirServiceKindFhirR4.ToPtr(),
			Properties: &FhirServiceProperties{
				AccessPolicies: []*FhirServiceAccessPolicyEntry{
					{
						ObjectID: to.StringPtr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.StringPtr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AcrConfiguration: &FhirServiceAcrConfiguration{
					LoginServers: []*string{
						to.StringPtr("test1.azurecr.io")},
				},
				AuthenticationConfiguration: &FhirServiceAuthenticationConfiguration{
					Audience:          to.StringPtr("https://azurehealthcareapis.com"),
					Authority:         to.StringPtr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.BoolPtr(true),
				},
				CorsConfiguration: &FhirServiceCorsConfiguration{
					AllowCredentials: to.BoolPtr(false),
					Headers: []*string{
						to.StringPtr("*")},
					MaxAge: to.Int32Ptr(1440),
					Methods: []*string{
						to.StringPtr("DELETE"),
						to.StringPtr("GET"),
						to.StringPtr("OPTIONS"),
						to.StringPtr("PATCH"),
						to.StringPtr("POST"),
						to.StringPtr("PUT")},
					Origins: []*string{
						to.StringPtr("*")},
				},
				ExportConfiguration: &FhirServiceExportConfiguration{
					StorageAccountName: to.StringPtr("existingStorageAccount"),
				},
			},
		},
		&FhirServicesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.FhirService.ID == nil {
		t.Fatal("FhirService.ID should not be nil!")
	}
}

func TestFhirServices_Update(t *testing.T) {
	// From example Update a Fhir Service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFhirServicesClient(con,
		"subid")
	poller, err := client.BeginUpdate(ctx,
		"testRG",
		"fhirservice1",
		"workspace1",
		FhirServicePatchResource{
			ResourceTags: ResourceTags{
				Tags: map[string]*string{
					"tagKey": to.StringPtr("tagValue"),
				},
			},
		},
		&FhirServicesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.FhirService.ID == nil {
		t.Fatal("FhirService.ID should not be nil!")
	}
}

func TestFhirServices_Delete(t *testing.T) {
	// From example Delete a Fhir Service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFhirServicesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"testRG",
		"fhirservice1",
		"workspace1",
		&FhirServicesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example List operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestOperationResults_Get(t *testing.T) {
	// From example Get operation result
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationResultsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"westus",
		"exampleid",
		&OperationResultsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationResultsDescription.ID == nil {
		t.Fatal("OperationResultsDescription.ID should not be nil!")
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
