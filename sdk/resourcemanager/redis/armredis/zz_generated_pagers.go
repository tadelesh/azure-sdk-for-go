//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armredis

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// ClientListByResourceGroupPager provides operations for iterating over paged responses.
type ClientListByResourceGroupPager struct {
	client    *Client
	current   ClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListResult.NextLink == nil || len(*p.current.ListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ClientListByResourceGroupPager) NextPage(ctx context.Context) (ClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return ClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ClientListBySubscriptionPager provides operations for iterating over paged responses.
type ClientListBySubscriptionPager struct {
	client    *Client
	current   ClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListResult.NextLink == nil || len(*p.current.ListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ClientListBySubscriptionPager) NextPage(ctx context.Context) (ClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return ClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ClientListUpgradeNotificationsPager provides operations for iterating over paged responses.
type ClientListUpgradeNotificationsPager struct {
	client    *Client
	current   ClientListUpgradeNotificationsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ClientListUpgradeNotificationsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClientListUpgradeNotificationsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NotificationListResponse.NextLink == nil || len(*p.current.NotificationListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ClientListUpgradeNotificationsPager) NextPage(ctx context.Context) (ClientListUpgradeNotificationsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ClientListUpgradeNotificationsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClientListUpgradeNotificationsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClientListUpgradeNotificationsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClientListUpgradeNotificationsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listUpgradeNotificationsHandleResponse(resp)
	if err != nil {
		return ClientListUpgradeNotificationsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// FirewallRulesClientListPager provides operations for iterating over paged responses.
type FirewallRulesClientListPager struct {
	client    *FirewallRulesClient
	current   FirewallRulesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, FirewallRulesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *FirewallRulesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FirewallRuleListResult.NextLink == nil || len(*p.current.FirewallRuleListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *FirewallRulesClientListPager) NextPage(ctx context.Context) (FirewallRulesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return FirewallRulesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return FirewallRulesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return FirewallRulesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return FirewallRulesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return FirewallRulesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// LinkedServerClientListPager provides operations for iterating over paged responses.
type LinkedServerClientListPager struct {
	client    *LinkedServerClient
	current   LinkedServerClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, LinkedServerClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *LinkedServerClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LinkedServerWithPropertiesList.NextLink == nil || len(*p.current.LinkedServerWithPropertiesList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *LinkedServerClientListPager) NextPage(ctx context.Context) (LinkedServerClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return LinkedServerClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return LinkedServerClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return LinkedServerClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return LinkedServerClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return LinkedServerClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PatchSchedulesClientListByRedisResourcePager provides operations for iterating over paged responses.
type PatchSchedulesClientListByRedisResourcePager struct {
	client    *PatchSchedulesClient
	current   PatchSchedulesClientListByRedisResourceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PatchSchedulesClientListByRedisResourceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PatchSchedulesClientListByRedisResourcePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PatchScheduleListResult.NextLink == nil || len(*p.current.PatchScheduleListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PatchSchedulesClientListByRedisResourcePager) NextPage(ctx context.Context) (PatchSchedulesClientListByRedisResourceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PatchSchedulesClientListByRedisResourceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PatchSchedulesClientListByRedisResourceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PatchSchedulesClientListByRedisResourceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PatchSchedulesClientListByRedisResourceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByRedisResourceHandleResponse(resp)
	if err != nil {
		return PatchSchedulesClientListByRedisResourceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateEndpointConnectionsClientListPager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsClientListPager struct {
	client    *PrivateEndpointConnectionsClient
	current   PrivateEndpointConnectionsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateEndpointConnectionsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *PrivateEndpointConnectionsClientListPager) NextPage(ctx context.Context) (PrivateEndpointConnectionsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return PrivateEndpointConnectionsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateEndpointConnectionsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateEndpointConnectionsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateEndpointConnectionsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return PrivateEndpointConnectionsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateLinkResourcesClientListByRedisCachePager provides operations for iterating over paged responses.
type PrivateLinkResourcesClientListByRedisCachePager struct {
	client    *PrivateLinkResourcesClient
	current   PrivateLinkResourcesClientListByRedisCacheResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateLinkResourcesClientListByRedisCachePager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *PrivateLinkResourcesClientListByRedisCachePager) NextPage(ctx context.Context) (PrivateLinkResourcesClientListByRedisCacheResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return PrivateLinkResourcesClientListByRedisCacheResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateLinkResourcesClientListByRedisCacheResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateLinkResourcesClientListByRedisCacheResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateLinkResourcesClientListByRedisCacheResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByRedisCacheHandleResponse(resp)
	if err != nil {
		return PrivateLinkResourcesClientListByRedisCacheResponse{}, err
	}
	p.current = result
	return p.current, nil
}
