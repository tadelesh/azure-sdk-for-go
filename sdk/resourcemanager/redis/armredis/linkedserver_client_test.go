//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armredis

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"log"
	"testing"
)

func TestLinkedServerClient_Delete(t *testing.T) {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := NewLinkedServerClient("subid", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}

	poller, err := client.BeginDelete(ctx, "rg1", "cache1", "cache2", nil)
	if err != nil {
		// retry for start operation failure
		log.Fatalf("failed to start operation: %v", err)
	}
	_, err=poller.PollUntilDone(ctx, nil)
	if err != nil {
		// retry for polling failure
		log.Fatalf("failed to poll result: %v", err)
	}

	_, err = client.Delete(ctx, "rg1", "cache1", "cache2", nil)
	if err != nil {
		var pollingErr *runtime.PollingError[LinkedServerClientDeleteResponse]
		if errors.As(err, &pollingErr) {
			poller := pollingErr.Poller
			_ = poller // retry for polling failure
			log.Fatalf("failed to poll result: %v", err)
		} else {
			// retry for start operation failure
			log.Fatalf("failed to start operation: %v", err)
		}
	}

}
