//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdomainservices_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/domainservices/armdomainservices"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestDomainServiceOperations_List(t *testing.T) {
	// From example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/GetOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdomainservices.NewDomainServiceOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/GetOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdomainservices.OperationEntityListResult{
			Value: []*armdomainservices.OperationEntity{
				{
					Name: to.Ptr("Microsoft.AAD/unregister/action"),
					Display: &armdomainservices.OperationDisplayInfo{
						Description: to.Ptr("Unregisters Domain Services"),
						Operation:   to.Ptr("Unregister Domain Service"),
						Provider:    to.Ptr("Domain Services Resource Provider"),
						Resource:    to.Ptr("Domain Service Type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.AAD/register/action"),
					Display: &armdomainservices.OperationDisplayInfo{
						Description: to.Ptr("Registers Domain Services"),
						Operation:   to.Ptr("Register Domain Service"),
						Provider:    to.Ptr("Domain Services Resource Provider"),
						Resource:    to.Ptr("Domain Service Type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.AAD/domainServices/read"),
					Display: &armdomainservices.OperationDisplayInfo{
						Description: to.Ptr("Reads Domain Services"),
						Operation:   to.Ptr("Read Domain Service"),
						Provider:    to.Ptr("Domain Services Resource Provider"),
						Resource:    to.Ptr("Domain Service Type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.AAD/domainServices/write"),
					Display: &armdomainservices.OperationDisplayInfo{
						Description: to.Ptr("Writes Domain Services"),
						Operation:   to.Ptr("Write Domain Service"),
						Provider:    to.Ptr("Domain Services Resource Provider"),
						Resource:    to.Ptr("Domain Service Type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.AAD/domainServices/delete"),
					Display: &armdomainservices.OperationDisplayInfo{
						Description: to.Ptr("Deletes Domain Services"),
						Operation:   to.Ptr("Delete Domain Service"),
						Provider:    to.Ptr("Domain Services Resource Provider"),
						Resource:    to.Ptr("Domain Service Type"),
					},
					Origin: to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationEntityListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationEntityListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/GetOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDomainServices_List(t *testing.T) {
	// From example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/ListDomainServicesBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Domain Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdomainservices.NewClient("1639790a-76a2-4ac4-98d9-8562f5dfcb4d", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/ListDomainServicesBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdomainservices.DomainServiceListResult{
			Value: []*armdomainservices.DomainService{
				{
					Name: to.Ptr("TestDomainService.com"),
					Type: to.Ptr("Microsoft.AAD/DomainServices"),
					ID:   to.Ptr("/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/TestResourceGroup/providers/Microsoft.AAD/DomainServices/TestDomainService.com"),
					Properties: &armdomainservices.DomainServiceProperties{
						DeploymentID: to.Ptr("4a619871-0150-41c4-aeb4-0b10deb7940a"),
						DomainName:   to.Ptr("TestDomainService.com"),
						DomainSecuritySettings: &armdomainservices.DomainSecuritySettings{
							NtlmV1:            to.Ptr(armdomainservices.NtlmV1Enabled),
							SyncNtlmPasswords: to.Ptr(armdomainservices.SyncNtlmPasswordsEnabled),
							TLSV1:             to.Ptr(armdomainservices.TLSV1Disabled),
						},
						FilteredSync: to.Ptr(armdomainservices.FilteredSyncEnabled),
						LdapsSettings: &armdomainservices.LdapsSettings{
							CertificateNotAfter:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-15T21:43:21Z"); return t }()),
							CertificateThumbprint: to.Ptr("9154A390F0C387D679E0DD040701745CDFED67F3"),
							ExternalAccess:        to.Ptr(armdomainservices.ExternalAccessEnabled),
							Ldaps:                 to.Ptr(armdomainservices.LdapsEnabled),
							PublicCertificate:     to.Ptr("MIIDPDCCAiSgAwIBAgIQQUI9P6tq2p9OFIJa7DLNvTANBgkqhkiG9w0BAQsFADAgMR4w..."),
						},
						NotificationSettings: &armdomainservices.NotificationSettings{
							AdditionalRecipients: []*string{
								to.Ptr("jicha@microsoft.com"),
								to.Ptr("caalmont@microsoft.com")},
							NotifyDcAdmins:     to.Ptr(armdomainservices.NotifyDcAdminsEnabled),
							NotifyGlobalAdmins: to.Ptr(armdomainservices.NotifyGlobalAdminsEnabled),
						},
						ProvisioningState: to.Ptr("Succeeded"),
						ReplicaSets: []*armdomainservices.ReplicaSet{
							{
								DomainControllerIPAddress: []*string{
									to.Ptr("10.0.0.1"),
									to.Ptr("10.0.0.2")},
								ExternalAccessIPAddress: to.Ptr("13.64.148.151"),
								HealthAlerts: []*armdomainservices.HealthAlert{
									{
										Name:          to.Ptr("The managed domain is experiencing a network error"),
										ID:            to.Ptr("AADDS104"),
										Issue:         to.Ptr("Microsoft is unable to reach the domain controllers for this managed domain. This may happen if a network security group (NSG) configured on your virtual network blocks access to the managed domain. Another possible reason is if there is a user defined route that blocks incoming traffic from the internet."),
										LastDetected:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-18T17:46:39.2697888Z"); return t }()),
										Raised:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-18T01:55:40.7834289Z"); return t }()),
										ResolutionURI: to.Ptr("https://aka.ms/aadds-neterr"),
										Severity:      to.Ptr("2"),
									}},
								HealthLastEvaluated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "2018-02-15T21:43:21Z"); return t }()),
								HealthMonitors: []*armdomainservices.HealthMonitor{
									{
										Name:    to.Ptr("Backup"),
										ID:      to.Ptr("AADDS501"),
										Details: to.Ptr("Last backed up on Tue, 18 Sep 2018 03:37:04 GMT"),
									},
									{
										Name:    to.Ptr("Synchronization with Azure AD"),
										ID:      to.Ptr("AADDS500"),
										Details: to.Ptr("Synchronized on Tue, 18 Sep 2018 16:47:57 GMT."),
									}},
								Location:      to.Ptr("West US"),
								ReplicaSetID:  to.Ptr("4a619871-0150-41c4-aeb4-0b10deb7940a"),
								ServiceStatus: to.Ptr("Running"),
								SubnetID:      to.Ptr("/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/TestNetworkResourceGroup/providers/Microsoft.Network/virtualNetworks/TestVnetWUS/subnets/TestSubnetWUS"),
								VnetSiteID:    to.Ptr("99083198-a39c-469f-972d-59017e7f078c"),
							}},
						SyncOwner: to.Ptr("4a619871-0150-41c4-aeb4-0b10deb7940a"),
						TenantID:  to.Ptr("3f8cd22c-7b32-48aa-a01c-f533133b1def"),
						Version:   to.Ptr[int32](2),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DomainServiceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DomainServiceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/ListDomainServicesBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDomainServices_ListByResourceGroup(t *testing.T) {
	// From example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/ListDomainServicesByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Domain Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdomainservices.NewClient("1639790a-76a2-4ac4-98d9-8562f5dfcb4d", cred, &options)
	pager := client.ListByResourceGroup("TestResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/ListDomainServicesByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdomainservices.DomainServiceListResult{
			Value: []*armdomainservices.DomainService{
				{
					Name: to.Ptr("TestDomainService.com"),
					Type: to.Ptr("Microsoft.AAD/DomainServices"),
					ID:   to.Ptr("/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/TestResourceGroup/providers/Microsoft.AAD/DomainServices/TestDomainService.com"),
					Properties: &armdomainservices.DomainServiceProperties{
						DeploymentID: to.Ptr("4a619871-0150-41c4-aeb4-0b10deb7940a"),
						DomainName:   to.Ptr("TestDomainService.com"),
						DomainSecuritySettings: &armdomainservices.DomainSecuritySettings{
							NtlmV1:            to.Ptr(armdomainservices.NtlmV1Enabled),
							SyncNtlmPasswords: to.Ptr(armdomainservices.SyncNtlmPasswordsEnabled),
							TLSV1:             to.Ptr(armdomainservices.TLSV1Disabled),
						},
						FilteredSync: to.Ptr(armdomainservices.FilteredSyncEnabled),
						LdapsSettings: &armdomainservices.LdapsSettings{
							CertificateNotAfter:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-15T21:43:21Z"); return t }()),
							CertificateThumbprint: to.Ptr("9154A390F0C387D679E0DD040701745CDFED67F3"),
							ExternalAccess:        to.Ptr(armdomainservices.ExternalAccessEnabled),
							Ldaps:                 to.Ptr(armdomainservices.LdapsEnabled),
							PublicCertificate:     to.Ptr("MIIDPDCCAiSgAwIBAgIQQUI9P6tq2p9OFIJa7DLNvTANBgkqhkiG9w0BAQsFADAgMR4w..."),
						},
						NotificationSettings: &armdomainservices.NotificationSettings{
							AdditionalRecipients: []*string{
								to.Ptr("jicha@microsoft.com"),
								to.Ptr("caalmont@microsoft.com")},
							NotifyDcAdmins:     to.Ptr(armdomainservices.NotifyDcAdminsEnabled),
							NotifyGlobalAdmins: to.Ptr(armdomainservices.NotifyGlobalAdminsEnabled),
						},
						ProvisioningState: to.Ptr("Succeeded"),
						ReplicaSets: []*armdomainservices.ReplicaSet{
							{
								DomainControllerIPAddress: []*string{
									to.Ptr("10.0.0.1"),
									to.Ptr("10.0.0.2")},
								ExternalAccessIPAddress: to.Ptr("13.64.148.151"),
								HealthAlerts: []*armdomainservices.HealthAlert{
									{
										Name:          to.Ptr("The managed domain is experiencing a network error"),
										ID:            to.Ptr("AADDS104"),
										Issue:         to.Ptr("Microsoft is unable to reach the domain controllers for this managed domain. This may happen if a network security group (NSG) configured on your virtual network blocks access to the managed domain. Another possible reason is if there is a user defined route that blocks incoming traffic from the internet."),
										LastDetected:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-18T17:46:39.2697888Z"); return t }()),
										Raised:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-18T01:55:40.7834289Z"); return t }()),
										ResolutionURI: to.Ptr("https://aka.ms/aadds-neterr"),
										Severity:      to.Ptr("2"),
									}},
								HealthLastEvaluated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "2018-02-15T21:43:21Z"); return t }()),
								HealthMonitors: []*armdomainservices.HealthMonitor{
									{
										Name:    to.Ptr("Backup"),
										ID:      to.Ptr("AADDS501"),
										Details: to.Ptr("Last backed up on Tue, 18 Sep 2018 03:37:04 GMT"),
									},
									{
										Name:    to.Ptr("Synchronization with Azure AD"),
										ID:      to.Ptr("AADDS500"),
										Details: to.Ptr("Synchronized on Tue, 18 Sep 2018 16:47:57 GMT."),
									}},
								Location:      to.Ptr("West US"),
								ReplicaSetID:  to.Ptr("4a619871-0150-41c4-aeb4-0b10deb7940a"),
								ServiceStatus: to.Ptr("Running"),
								SubnetID:      to.Ptr("/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/TestNetworkResourceGroup/providers/Microsoft.Network/virtualNetworks/TestVnetWUS/subnets/TestSubnetWUS"),
								VnetSiteID:    to.Ptr("99083198-a39c-469f-972d-59017e7f078c"),
							}},
						SyncOwner: to.Ptr("4a619871-0150-41c4-aeb4-0b10deb7940a"),
						TenantID:  to.Ptr("3f8cd22c-7b32-48aa-a01c-f533133b1def"),
						Version:   to.Ptr[int32](2),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DomainServiceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DomainServiceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/ListDomainServicesByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDomainServices_CreateOrUpdate(t *testing.T) {
	// From example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/CreateDomainService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Domain Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdomainservices.NewClient("1639790a-76a2-4ac4-98d9-8562f5dfcb4d", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestResourceGroup",
		"TestDomainService.com",
		armdomainservices.DomainService{
			Properties: &armdomainservices.DomainServiceProperties{
				DomainName: to.Ptr("TestDomainService.com"),
				DomainSecuritySettings: &armdomainservices.DomainSecuritySettings{
					NtlmV1:            to.Ptr(armdomainservices.NtlmV1Enabled),
					SyncNtlmPasswords: to.Ptr(armdomainservices.SyncNtlmPasswordsEnabled),
					TLSV1:             to.Ptr(armdomainservices.TLSV1Disabled),
				},
				FilteredSync: to.Ptr(armdomainservices.FilteredSyncEnabled),
				LdapsSettings: &armdomainservices.LdapsSettings{
					ExternalAccess:         to.Ptr(armdomainservices.ExternalAccessEnabled),
					Ldaps:                  to.Ptr(armdomainservices.LdapsEnabled),
					PfxCertificate:         to.Ptr("MIIDPDCCAiSgAwIBAgIQQUI9P6tq2p9OFIJa7DLNvTANBgkqhkiG9w0BAQsFADAgMR4w..."),
					PfxCertificatePassword: to.Ptr("<pfxCertificatePassword>"),
				},
				NotificationSettings: &armdomainservices.NotificationSettings{
					AdditionalRecipients: []*string{
						to.Ptr("jicha@microsoft.com"),
						to.Ptr("caalmont@microsoft.com")},
					NotifyDcAdmins:     to.Ptr(armdomainservices.NotifyDcAdminsEnabled),
					NotifyGlobalAdmins: to.Ptr(armdomainservices.NotifyGlobalAdminsEnabled),
				},
				ReplicaSets: []*armdomainservices.ReplicaSet{
					{
						Location: to.Ptr("West US"),
						SubnetID: to.Ptr("/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/TestNetworkResourceGroup/providers/Microsoft.Network/virtualNetworks/TestVnetWUS/subnets/TestSubnetWUS"),
					}},
			},
		},
		&armdomainservices.ClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/CreateDomainService.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/CreateDomainService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdomainservices.DomainService{
			Name: to.Ptr("TestDomainService.com"),
			Type: to.Ptr("Microsoft.AAD/DomainServices"),
			ID:   to.Ptr("/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/TestResourceGroup/providers/Microsoft.AAD/DomainServices/TestDomainService.com"),
			Properties: &armdomainservices.DomainServiceProperties{
				DeploymentID: to.Ptr("4a619871-0150-41c4-aeb4-0b10deb7940a"),
				DomainName:   to.Ptr("TestDomainService.com"),
				DomainSecuritySettings: &armdomainservices.DomainSecuritySettings{
					NtlmV1:            to.Ptr(armdomainservices.NtlmV1Enabled),
					SyncNtlmPasswords: to.Ptr(armdomainservices.SyncNtlmPasswordsEnabled),
					TLSV1:             to.Ptr(armdomainservices.TLSV1Disabled),
				},
				FilteredSync: to.Ptr(armdomainservices.FilteredSyncEnabled),
				LdapsSettings: &armdomainservices.LdapsSettings{
					CertificateNotAfter:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-15T21:43:21Z"); return t }()),
					CertificateThumbprint: to.Ptr("9154A390F0C387D679E0DD040701745CDFED67F3"),
					ExternalAccess:        to.Ptr(armdomainservices.ExternalAccessEnabled),
					Ldaps:                 to.Ptr(armdomainservices.LdapsEnabled),
					PublicCertificate:     to.Ptr("MIIDPDCCAiSgAwIBAgIQQUI9P6tq2p9OFIJa7DLNvTANBgkqhkiG9w0BAQsFADAgMR4w..."),
				},
				NotificationSettings: &armdomainservices.NotificationSettings{
					AdditionalRecipients: []*string{
						to.Ptr("jicha@microsoft.com"),
						to.Ptr("caalmont@microsoft.com")},
					NotifyDcAdmins:     to.Ptr(armdomainservices.NotifyDcAdminsEnabled),
					NotifyGlobalAdmins: to.Ptr(armdomainservices.NotifyGlobalAdminsEnabled),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				ReplicaSets: []*armdomainservices.ReplicaSet{
					{
						DomainControllerIPAddress: []*string{
							to.Ptr("10.0.0.1"),
							to.Ptr("10.0.0.2")},
						ExternalAccessIPAddress: to.Ptr("13.64.148.151"),
						Location:                to.Ptr("West US"),
						ReplicaSetID:            to.Ptr("4a619871-0150-41c4-aeb4-0b10deb7940a"),
						ServiceStatus:           to.Ptr("Running"),
						SubnetID:                to.Ptr("/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/TestNetworkResourceGroup/providers/Microsoft.Network/virtualNetworks/TestVnetWUS/subnets/TestSubnetWUS"),
						VnetSiteID:              to.Ptr("99083198-a39c-469f-972d-59017e7f078c"),
					}},
				SyncOwner: to.Ptr("4a619871-0150-41c4-aeb4-0b10deb7940a"),
				TenantID:  to.Ptr("3f8cd22c-7b32-48aa-a01c-f533133b1def"),
				Version:   to.Ptr[int32](2),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DomainService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DomainService)
			t.Fatalf("Mock response is not equal to example response for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/CreateDomainService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDomainServices_Get(t *testing.T) {
	// From example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/GetDomainService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Domain Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdomainservices.NewClient("1639790a-76a2-4ac4-98d9-8562f5dfcb4d", cred, &options)
	res, err := client.Get(ctx,
		"TestResourceGroup",
		"TestDomainService.com",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/GetDomainService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdomainservices.DomainService{
			Name: to.Ptr("TestDomainService.com"),
			Type: to.Ptr("Microsoft.AAD/DomainServices"),
			ID:   to.Ptr("/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/TestResourceGroup/providers/Microsoft.AAD/DomainServices/TestDomainService.com"),
			Properties: &armdomainservices.DomainServiceProperties{
				DeploymentID: to.Ptr("4a619871-0150-41c4-aeb4-0b10deb7940a"),
				DomainName:   to.Ptr("TestDomainService.com"),
				DomainSecuritySettings: &armdomainservices.DomainSecuritySettings{
					NtlmV1:            to.Ptr(armdomainservices.NtlmV1Enabled),
					SyncNtlmPasswords: to.Ptr(armdomainservices.SyncNtlmPasswordsEnabled),
					TLSV1:             to.Ptr(armdomainservices.TLSV1Disabled),
				},
				FilteredSync: to.Ptr(armdomainservices.FilteredSyncEnabled),
				LdapsSettings: &armdomainservices.LdapsSettings{
					CertificateNotAfter:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-15T21:43:21Z"); return t }()),
					CertificateThumbprint: to.Ptr("9154A390F0C387D679E0DD040701745CDFED67F3"),
					ExternalAccess:        to.Ptr(armdomainservices.ExternalAccessEnabled),
					Ldaps:                 to.Ptr(armdomainservices.LdapsEnabled),
					PublicCertificate:     to.Ptr("MIIDPDCCAiSgAwIBAgIQQUI9P6tq2p9OFIJa7DLNvTANBgkqhkiG9w0BAQsFADAgMR4w..."),
				},
				NotificationSettings: &armdomainservices.NotificationSettings{
					AdditionalRecipients: []*string{
						to.Ptr("jicha@microsoft.com"),
						to.Ptr("caalmont@microsoft.com")},
					NotifyDcAdmins:     to.Ptr(armdomainservices.NotifyDcAdminsEnabled),
					NotifyGlobalAdmins: to.Ptr(armdomainservices.NotifyGlobalAdminsEnabled),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				ReplicaSets: []*armdomainservices.ReplicaSet{
					{
						DomainControllerIPAddress: []*string{
							to.Ptr("10.0.0.1"),
							to.Ptr("10.0.0.2")},
						ExternalAccessIPAddress: to.Ptr("13.64.148.151"),
						HealthAlerts: []*armdomainservices.HealthAlert{
							{
								Name:          to.Ptr("The managed domain is experiencing a network error"),
								ID:            to.Ptr("AADDS104"),
								Issue:         to.Ptr("Microsoft is unable to reach the domain controllers for this managed domain. This may happen if a network security group (NSG) configured on your virtual network blocks access to the managed domain. Another possible reason is if there is a user defined route that blocks incoming traffic from the internet."),
								LastDetected:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-18T17:46:39.2697888Z"); return t }()),
								Raised:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-18T01:55:40.7834289Z"); return t }()),
								ResolutionURI: to.Ptr("https://aka.ms/aadds-neterr"),
								Severity:      to.Ptr("2"),
							}},
						HealthLastEvaluated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "2018-02-15T21:43:21Z"); return t }()),
						HealthMonitors: []*armdomainservices.HealthMonitor{
							{
								Name:    to.Ptr("Backup"),
								ID:      to.Ptr("AADDS501"),
								Details: to.Ptr("Last backed up on Tue, 18 Sep 2018 03:37:04 GMT"),
							},
							{
								Name:    to.Ptr("Synchronization with Azure AD"),
								ID:      to.Ptr("AADDS500"),
								Details: to.Ptr("Synchronized on Tue, 18 Sep 2018 16:47:57 GMT."),
							}},
						Location:      to.Ptr("West US"),
						ReplicaSetID:  to.Ptr("4a619871-0150-41c4-aeb4-0b10deb7940a"),
						ServiceStatus: to.Ptr("Running"),
						SubnetID:      to.Ptr("/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/TestNetworkResourceGroup/providers/Microsoft.Network/virtualNetworks/TestVnetWUS/subnets/TestSubnetWUS"),
						VnetSiteID:    to.Ptr("99083198-a39c-469f-972d-59017e7f078c"),
					}},
				SyncOwner: to.Ptr("4a619871-0150-41c4-aeb4-0b10deb7940a"),
				TenantID:  to.Ptr("3f8cd22c-7b32-48aa-a01c-f533133b1def"),
				Version:   to.Ptr[int32](2),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DomainService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DomainService)
			t.Fatalf("Mock response is not equal to example response for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/GetDomainService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDomainServices_Delete(t *testing.T) {
	// From example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/DeleteDomainService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Domain Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdomainservices.NewClient("1639790a-76a2-4ac4-98d9-8562f5dfcb4d", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestResourceGroup",
		"TestDomainService.com",
		&armdomainservices.ClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/DeleteDomainService.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/DeleteDomainService.json: %v", err)
	}
}

func TestDomainServices_Update(t *testing.T) {
	// From example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/UpdateDomainService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Domain Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdomainservices.NewClient("1639790a-76a2-4ac4-98d9-8562f5dfcb4d", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"TestResourceGroup",
		"TestDomainService.com",
		armdomainservices.DomainService{
			Properties: &armdomainservices.DomainServiceProperties{
				ConfigDiagnostics: &armdomainservices.ConfigDiagnostics{
					LastExecuted: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "2021-05-05T12:00:23Z;"); return t }()),
					ValidatorResults: []*armdomainservices.ConfigDiagnosticsValidatorResult{
						{
							Issues: []*armdomainservices.ConfigDiagnosticsValidatorResultIssue{
								{
									DescriptionParams: []*string{},
									ID:                to.Ptr("AADDS-CFG-DIAG-I20"),
								}},
							ReplicaSetSubnetDisplayName: to.Ptr("West US/aadds-subnet"),
							Status:                      to.Ptr(armdomainservices.StatusWarning),
							ValidatorID:                 to.Ptr("AADDS-CFG-DIAG-V06"),
						}},
				},
				DomainSecuritySettings: &armdomainservices.DomainSecuritySettings{
					NtlmV1:            to.Ptr(armdomainservices.NtlmV1Enabled),
					SyncNtlmPasswords: to.Ptr(armdomainservices.SyncNtlmPasswordsEnabled),
					TLSV1:             to.Ptr(armdomainservices.TLSV1Disabled),
				},
				FilteredSync: to.Ptr(armdomainservices.FilteredSyncEnabled),
				LdapsSettings: &armdomainservices.LdapsSettings{
					ExternalAccess:         to.Ptr(armdomainservices.ExternalAccessEnabled),
					Ldaps:                  to.Ptr(armdomainservices.LdapsEnabled),
					PfxCertificate:         to.Ptr("MIIDPDCCAiSgAwIBAgIQQUI9P6tq2p9OFIJa7DLNvTANBgkqhkiG9w0BAQsFADAgMR4w..."),
					PfxCertificatePassword: to.Ptr("<pfxCertificatePassword>"),
				},
				NotificationSettings: &armdomainservices.NotificationSettings{
					AdditionalRecipients: []*string{
						to.Ptr("jicha@microsoft.com"),
						to.Ptr("caalmont@microsoft.com")},
					NotifyDcAdmins:     to.Ptr(armdomainservices.NotifyDcAdminsEnabled),
					NotifyGlobalAdmins: to.Ptr(armdomainservices.NotifyGlobalAdminsEnabled),
				},
				ReplicaSets: []*armdomainservices.ReplicaSet{
					{
						Location: to.Ptr("West US"),
						SubnetID: to.Ptr("/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/TestNetworkResourceGroup/providers/Microsoft.Network/virtualNetworks/TestVnetWUS/subnets/TestSubnetWUS"),
					},
					{
						Location: to.Ptr("East US"),
						SubnetID: to.Ptr("/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/TestNetworkResourceGroup/providers/Microsoft.Network/virtualNetworks/TestVnetEUS/subnets/TestSubnetEUS"),
					}},
			},
		},
		&armdomainservices.ClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/UpdateDomainService.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/UpdateDomainService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdomainservices.DomainService{
			Name: to.Ptr("TestDomainService.com"),
			Type: to.Ptr("Microsoft.AAD/DomainServices"),
			ID:   to.Ptr("/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/TestResourceGroup/providers/Microsoft.AAD/DomainServices/TestDomainService.com"),
			Properties: &armdomainservices.DomainServiceProperties{
				DeploymentID: to.Ptr("4a619871-0150-41c4-aeb4-0b10deb7940a"),
				DomainName:   to.Ptr("TestDomainService.com"),
				DomainSecuritySettings: &armdomainservices.DomainSecuritySettings{
					NtlmV1:            to.Ptr(armdomainservices.NtlmV1Enabled),
					SyncNtlmPasswords: to.Ptr(armdomainservices.SyncNtlmPasswordsEnabled),
					TLSV1:             to.Ptr(armdomainservices.TLSV1Disabled),
				},
				FilteredSync: to.Ptr(armdomainservices.FilteredSyncEnabled),
				LdapsSettings: &armdomainservices.LdapsSettings{
					CertificateNotAfter:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-15T21:43:21Z"); return t }()),
					CertificateThumbprint: to.Ptr("9154A390F0C387D679E0DD040701745CDFED67F3"),
					ExternalAccess:        to.Ptr(armdomainservices.ExternalAccessEnabled),
					Ldaps:                 to.Ptr(armdomainservices.LdapsEnabled),
					PublicCertificate:     to.Ptr("MIIDPDCCAiSgAwIBAgIQQUI9P6tq2p9OFIJa7DLNvTANBgkqhkiG9w0BAQsFADAgMR4w..."),
				},
				NotificationSettings: &armdomainservices.NotificationSettings{
					AdditionalRecipients: []*string{
						to.Ptr("jicha@microsoft.com"),
						to.Ptr("caalmont@microsoft.com")},
					NotifyDcAdmins:     to.Ptr(armdomainservices.NotifyDcAdminsEnabled),
					NotifyGlobalAdmins: to.Ptr(armdomainservices.NotifyGlobalAdminsEnabled),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				ReplicaSets: []*armdomainservices.ReplicaSet{
					{
						DomainControllerIPAddress: []*string{
							to.Ptr("10.0.0.1"),
							to.Ptr("10.0.0.2")},
						ExternalAccessIPAddress: to.Ptr("13.64.148.151"),
						Location:                to.Ptr("West US"),
						ReplicaSetID:            to.Ptr("4a619871-0150-41c4-aeb4-0b10deb7940a"),
						ServiceStatus:           to.Ptr("Running"),
						SubnetID:                to.Ptr("/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/TestNetworkResourceGroup/providers/Microsoft.Network/virtualNetworks/TestVnetWUS/subnets/TestSubnetWUS"),
						VnetSiteID:              to.Ptr("99083198-a39c-469f-972d-59017e7f078c"),
					},
					{
						DomainControllerIPAddress: []*string{
							to.Ptr("10.0.0.3"),
							to.Ptr("10.0.0.4")},
						ExternalAccessIPAddress: to.Ptr("13.64.148.152"),
						Location:                to.Ptr("East US"),
						ReplicaSetID:            to.Ptr("5057347d-cad1-4ec8-8db6-66cf7eedf4b8"),
						ServiceStatus:           to.Ptr("Running"),
						SubnetID:                to.Ptr("/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/TestNetworkResourceGroup/providers/Microsoft.Network/virtualNetworks/TestVnetEUS/subnets/TestSubnetEUS"),
					}},
				SyncOwner: to.Ptr("4a619871-0150-41c4-aeb4-0b10deb7940a"),
				TenantID:  to.Ptr("3f8cd22c-7b32-48aa-a01c-f533133b1def"),
				Version:   to.Ptr[int32](2),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DomainService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DomainService)
			t.Fatalf("Mock response is not equal to example response for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/UpdateDomainService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOuContainerOperations_List(t *testing.T) {
	// From example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/GetOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdomainservices.NewOuContainerOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/GetOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdomainservices.OperationEntityListResult{
			Value: []*armdomainservices.OperationEntity{
				{
					Name: to.Ptr("Microsoft.AAD/unregister/action"),
					Display: &armdomainservices.OperationDisplayInfo{
						Description: to.Ptr("Unregisters Domain Services"),
						Operation:   to.Ptr("Unregister Domain Service"),
						Provider:    to.Ptr("Domain Services Resource Provider"),
						Resource:    to.Ptr("Domain Service Type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.AAD/register/action"),
					Display: &armdomainservices.OperationDisplayInfo{
						Description: to.Ptr("Registers Domain Services"),
						Operation:   to.Ptr("Register Domain Service"),
						Provider:    to.Ptr("Domain Services Resource Provider"),
						Resource:    to.Ptr("Domain Service Type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.AAD/domainServices/read"),
					Display: &armdomainservices.OperationDisplayInfo{
						Description: to.Ptr("Reads Domain Services"),
						Operation:   to.Ptr("Read Domain Service"),
						Provider:    to.Ptr("Domain Services Resource Provider"),
						Resource:    to.Ptr("Domain Service Type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.AAD/domainServices/write"),
					Display: &armdomainservices.OperationDisplayInfo{
						Description: to.Ptr("Writes Domain Services"),
						Operation:   to.Ptr("Write Domain Service"),
						Provider:    to.Ptr("Domain Services Resource Provider"),
						Resource:    to.Ptr("Domain Service Type"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.AAD/domainServices/delete"),
					Display: &armdomainservices.OperationDisplayInfo{
						Description: to.Ptr("Deletes Domain Services"),
						Operation:   to.Ptr("Delete Domain Service"),
						Provider:    to.Ptr("Domain Services Resource Provider"),
						Resource:    to.Ptr("Domain Service Type"),
					},
					Origin: to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationEntityListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationEntityListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/GetOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOuContainer_List(t *testing.T) {
	// From example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/ListOuContainers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List of OuContainers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdomainservices.NewOuContainerClient("1639790a-76a2-4ac4-98d9-8562f5dfcb4d", cred, &options)
	pager := client.List("OuContainerResourceGroup",
		"OuContainer.com",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/ListOuContainers.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdomainservices.OuContainerListResult{
			Value: []*armdomainservices.OuContainer{
				{
					Name: to.Ptr("OuContainer.com/OuContainer1"),
					Type: to.Ptr("Microsoft.AAD/DomainServices/OuContainer"),
					ID:   to.Ptr("/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/ouContainerResourceGroup/providers/Microsoft.AAD/domainServices/ouContainer.com/ouContainer/ouContainer1"),
					Properties: &armdomainservices.OuContainerProperties{
						Accounts: []*armdomainservices.ContainerAccount{
							{
								AccountName: to.Ptr("AccountName1"),
								Spn:         to.Ptr("Spn1"),
							},
							{
								AccountName: to.Ptr("AccountName2"),
								Spn:         to.Ptr("Spn2"),
							}},
						ContainerID:       to.Ptr("OuContainer1"),
						DeploymentID:      to.Ptr("0FC50BDB-AC45-48E4-BC92-F0651EA0687B"),
						DomainName:        to.Ptr("OuContainer.com"),
						ProvisioningState: to.Ptr("Succeeded"),
						ServiceStatus:     to.Ptr("Running"),
						TenantID:          to.Ptr("3f8cd22c-7b32-48aa-a01c-f533133b1def"),
					},
				},
				{
					Name: to.Ptr("OuContainer.com/OuContainer2"),
					Type: to.Ptr("Microsoft.AAD/DomainServices/OuContainer"),
					ID:   to.Ptr("/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/ouContainerResourceGroup/providers/Microsoft.AAD/domainServices/ouContainer.com/ouContainer/ouContainer2"),
					Properties: &armdomainservices.OuContainerProperties{
						Accounts: []*armdomainservices.ContainerAccount{
							{
								AccountName: to.Ptr("AccountName3"),
								Spn:         to.Ptr("Spn3"),
							},
							{
								AccountName: to.Ptr("AccountName4"),
								Spn:         to.Ptr("Spn4"),
							}},
						ContainerID:       to.Ptr("OuContainer2"),
						DeploymentID:      to.Ptr("0FC50BDB-AC45-48E4-BC92-F0651EA0687B"),
						DomainName:        to.Ptr("OuContainer.com"),
						ProvisioningState: to.Ptr("Succeeded"),
						ServiceStatus:     to.Ptr("Running"),
						TenantID:          to.Ptr("3f8cd22c-7b32-48aa-a01c-f533133b1def"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OuContainerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OuContainerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/ListOuContainers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOuContainer_Get(t *testing.T) {
	// From example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/GetOuContainer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List of OuContainers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdomainservices.NewOuContainerClient("1639790a-76a2-4ac4-98d9-8562f5dfcb4d", cred, &options)
	res, err := client.Get(ctx,
		"OuContainerResourceGroup",
		"OuContainer.com",
		"OuContainer1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/GetOuContainer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdomainservices.OuContainer{
			Name: to.Ptr("OuContainer.com/OuContainer1"),
			Type: to.Ptr("Microsoft.AAD/DomainServices/OuContainer"),
			ID:   to.Ptr("/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/ouContainerResourceGroup/providers/Microsoft.AAD/domainServices/ouContainer.com/ouContainer/ouContainer1"),
			Properties: &armdomainservices.OuContainerProperties{
				Accounts: []*armdomainservices.ContainerAccount{
					{
						AccountName: to.Ptr("AccountName1"),
						Spn:         to.Ptr("Spn1"),
					},
					{
						AccountName: to.Ptr("AccountName2"),
						Spn:         to.Ptr("Spn2"),
					}},
				ContainerID:       to.Ptr("OuContainer1"),
				DeploymentID:      to.Ptr("0FC50BDB-AC45-48E4-BC92-F0651EA0687B"),
				DomainName:        to.Ptr("OuContainer.com"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServiceStatus:     to.Ptr("Running"),
				TenantID:          to.Ptr("3f8cd22c-7b32-48aa-a01c-f533133b1def"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OuContainer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OuContainer)
			t.Fatalf("Mock response is not equal to example response for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/GetOuContainer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOuContainer_Create(t *testing.T) {
	// From example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/CreateOuContainer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Domain Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdomainservices.NewOuContainerClient("1639790a-76a2-4ac4-98d9-8562f5dfcb4d", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"OuContainerResourceGroup",
		"OuContainer.com",
		"OuContainer1",
		armdomainservices.ContainerAccount{
			AccountName: to.Ptr("AccountName1"),
			Password:    to.Ptr("<password>"),
			Spn:         to.Ptr("Spn1"),
		},
		&armdomainservices.OuContainerClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/CreateOuContainer.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/CreateOuContainer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdomainservices.OuContainer{
			Name: to.Ptr("OuContainer.com/OuContainer1"),
			Type: to.Ptr("Microsoft.AAD/DomainServices/OuContainer"),
			ID:   to.Ptr("/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/ouContainerResourceGroup/providers/Microsoft.AAD/domainServices/ouContainer.com/ouContainer/ouContainer1"),
			Properties: &armdomainservices.OuContainerProperties{
				Accounts: []*armdomainservices.ContainerAccount{
					{
						AccountName: to.Ptr("AccountName1"),
						Spn:         to.Ptr("Spn1"),
					},
					{
						AccountName: to.Ptr("AccountName2"),
						Spn:         to.Ptr("Spn2"),
					}},
				ContainerID:       to.Ptr("OuContainer1"),
				DeploymentID:      to.Ptr("0FC50BDB-AC45-48E4-BC92-F0651EA0687B"),
				DomainName:        to.Ptr("OuContainer.com"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServiceStatus:     to.Ptr("Running"),
				TenantID:          to.Ptr("3f8cd22c-7b32-48aa-a01c-f533133b1def"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OuContainer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OuContainer)
			t.Fatalf("Mock response is not equal to example response for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/CreateOuContainer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOuContainer_Delete(t *testing.T) {
	// From example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/DeleteOuContainer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete OuContainer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdomainservices.NewOuContainerClient("1639790a-76a2-4ac4-98d9-8562f5dfcb4d", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"OuContainerResourceGroup",
		"OuContainer.com",
		"OuContainer1",
		&armdomainservices.OuContainerClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/DeleteOuContainer.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/DeleteOuContainer.json: %v", err)
	}
}

func TestOuContainer_Update(t *testing.T) {
	// From example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/UpdateOuContainer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Domain Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdomainservices.NewOuContainerClient("1639790a-76a2-4ac4-98d9-8562f5dfcb4d", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"OuContainerResourceGroup",
		"OuContainer.com",
		"OuContainer1",
		armdomainservices.ContainerAccount{
			AccountName: to.Ptr("AccountName1"),
			Password:    to.Ptr("<password>"),
			Spn:         to.Ptr("Spn1"),
		},
		&armdomainservices.OuContainerClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/UpdateOuContainer.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/UpdateOuContainer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdomainservices.OuContainer{
			Name: to.Ptr("OuContainer.com/OuContainer1"),
			Type: to.Ptr("Microsoft.AAD/DomainServices/OuContainer"),
			ID:   to.Ptr("/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/ouContainerResourceGroup/providers/Microsoft.AAD/domainServices/ouContainer.com/ouContainer/ouContainer1"),
			Properties: &armdomainservices.OuContainerProperties{
				Accounts: []*armdomainservices.ContainerAccount{
					{
						AccountName: to.Ptr("AccountName1"),
						Spn:         to.Ptr("Spn1"),
					},
					{
						AccountName: to.Ptr("AccountName2"),
						Spn:         to.Ptr("Spn2"),
					}},
				ContainerID:       to.Ptr("OuContainer1"),
				DeploymentID:      to.Ptr("0FC50BDB-AC45-48E4-BC92-F0651EA0687B"),
				DomainName:        to.Ptr("OuContainer.com"),
				ProvisioningState: to.Ptr("Succeeded"),
				ServiceStatus:     to.Ptr("Running"),
				TenantID:          to.Ptr("3f8cd22c-7b32-48aa-a01c-f533133b1def"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OuContainer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OuContainer)
			t.Fatalf("Mock response is not equal to example response for example specification/domainservices/resource-manager/Microsoft.AAD/stable/2021-05-01/examples/UpdateOuContainer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
