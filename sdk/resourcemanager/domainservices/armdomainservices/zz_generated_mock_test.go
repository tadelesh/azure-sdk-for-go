//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdomainservices

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestDomainServiceOperations_List(t *testing.T) {
	// From example Get Operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDomainServiceOperationsClient(con)
	pager := client.List(&DomainServiceOperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestDomainServices_List(t *testing.T) {
	// From example List Domain Service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDomainServicesClient(con,
		"1639790a-76a2-4ac4-98d9-8562f5dfcb4d")
	pager := client.List(&DomainServicesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DomainService.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DomainService.ID should not be nil!")
			}
		}
	}
}

func TestDomainServices_ListByResourceGroup(t *testing.T) {
	// From example List Domain Service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDomainServicesClient(con,
		"1639790a-76a2-4ac4-98d9-8562f5dfcb4d")
	pager := client.ListByResourceGroup("TestResourceGroup",
		&DomainServicesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DomainService.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DomainService.ID should not be nil!")
			}
		}
	}
}

func TestDomainServices_CreateOrUpdate(t *testing.T) {
	// From example Create Domain Service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDomainServicesClient(con,
		"1639790a-76a2-4ac4-98d9-8562f5dfcb4d")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestResourceGroup",
		"TestDomainService.com",
		DomainService{
			Properties: &DomainServiceProperties{
				DomainName: to.StringPtr("TestDomainService.com"),
				DomainSecuritySettings: &DomainSecuritySettings{
					NtlmV1:            NtlmV1Enabled.ToPtr(),
					SyncNtlmPasswords: SyncNtlmPasswordsEnabled.ToPtr(),
					TLSV1:             TLSV1Disabled.ToPtr(),
				},
				FilteredSync: FilteredSyncEnabled.ToPtr(),
				LdapsSettings: &LdapsSettings{
					ExternalAccess:         ExternalAccessEnabled.ToPtr(),
					Ldaps:                  LdapsEnabled.ToPtr(),
					PfxCertificate:         to.StringPtr("MIIDPDCCAiSgAwIBAgIQQUI9P6tq2p9OFIJa7DLNvTANBgkqhkiG9w0BAQsFADAgMR4w..."),
					PfxCertificatePassword: to.StringPtr("<pfxCertificatePassword>"),
				},
				NotificationSettings: &NotificationSettings{
					AdditionalRecipients: []*string{
						to.StringPtr("jicha@microsoft.com"),
						to.StringPtr("caalmont@microsoft.com")},
					NotifyDcAdmins:     NotifyDcAdminsEnabled.ToPtr(),
					NotifyGlobalAdmins: NotifyGlobalAdminsEnabled.ToPtr(),
				},
				ReplicaSets: []*ReplicaSet{
					{
						Location: to.StringPtr("West US"),
						SubnetID: to.StringPtr("/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/TestNetworkResourceGroup/providers/Microsoft.Network/virtualNetworks/TestVnetWUS/subnets/TestSubnetWUS"),
					}},
			},
		},
		&DomainServicesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DomainService.ID == nil {
		t.Fatal("DomainService.ID should not be nil!")
	}
}

func TestDomainServices_Get(t *testing.T) {
	// From example Get Domain Service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDomainServicesClient(con,
		"1639790a-76a2-4ac4-98d9-8562f5dfcb4d")
	res, err := client.Get(ctx,
		"TestResourceGroup",
		"TestDomainService.com",
		&DomainServicesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DomainService.ID == nil {
		t.Fatal("DomainService.ID should not be nil!")
	}
}

func TestDomainServices_Delete(t *testing.T) {
	// From example Delete Domain Service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDomainServicesClient(con,
		"1639790a-76a2-4ac4-98d9-8562f5dfcb4d")
	poller, err := client.BeginDelete(ctx,
		"TestResourceGroup",
		"TestDomainService.com",
		&DomainServicesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDomainServices_Update(t *testing.T) {
	// From example Update Domain Service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDomainServicesClient(con,
		"1639790a-76a2-4ac4-98d9-8562f5dfcb4d")
	poller, err := client.BeginUpdate(ctx,
		"TestResourceGroup",
		"TestDomainService.com",
		DomainService{
			Properties: &DomainServiceProperties{
				ConfigDiagnostics: &ConfigDiagnostics{
					LastExecuted: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC1123, "2021-05-05T12:00:23Z;"); return t }()),
					ValidatorResults: []*ConfigDiagnosticsValidatorResult{
						{
							Issues: []*ConfigDiagnosticsValidatorResultIssue{
								{
									DescriptionParams: []*string{},
									ID:                to.StringPtr("AADDS-CFG-DIAG-I20"),
								}},
							ReplicaSetSubnetDisplayName: to.StringPtr("West US/aadds-subnet"),
							Status:                      StatusWarning.ToPtr(),
							ValidatorID:                 to.StringPtr("AADDS-CFG-DIAG-V06"),
						}},
				},
				DomainSecuritySettings: &DomainSecuritySettings{
					NtlmV1:            NtlmV1Enabled.ToPtr(),
					SyncNtlmPasswords: SyncNtlmPasswordsEnabled.ToPtr(),
					TLSV1:             TLSV1Disabled.ToPtr(),
				},
				FilteredSync: FilteredSyncEnabled.ToPtr(),
				LdapsSettings: &LdapsSettings{
					ExternalAccess:         ExternalAccessEnabled.ToPtr(),
					Ldaps:                  LdapsEnabled.ToPtr(),
					PfxCertificate:         to.StringPtr("MIIDPDCCAiSgAwIBAgIQQUI9P6tq2p9OFIJa7DLNvTANBgkqhkiG9w0BAQsFADAgMR4w..."),
					PfxCertificatePassword: to.StringPtr("<pfxCertificatePassword>"),
				},
				NotificationSettings: &NotificationSettings{
					AdditionalRecipients: []*string{
						to.StringPtr("jicha@microsoft.com"),
						to.StringPtr("caalmont@microsoft.com")},
					NotifyDcAdmins:     NotifyDcAdminsEnabled.ToPtr(),
					NotifyGlobalAdmins: NotifyGlobalAdminsEnabled.ToPtr(),
				},
				ReplicaSets: []*ReplicaSet{
					{
						Location: to.StringPtr("West US"),
						SubnetID: to.StringPtr("/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/TestNetworkResourceGroup/providers/Microsoft.Network/virtualNetworks/TestVnetWUS/subnets/TestSubnetWUS"),
					},
					{
						Location: to.StringPtr("East US"),
						SubnetID: to.StringPtr("/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/TestNetworkResourceGroup/providers/Microsoft.Network/virtualNetworks/TestVnetEUS/subnets/TestSubnetEUS"),
					}},
			},
		},
		&DomainServicesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DomainService.ID == nil {
		t.Fatal("DomainService.ID should not be nil!")
	}
}

func TestOuContainerOperations_List(t *testing.T) {
	// From example Get Operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOuContainerOperationsClient(con)
	pager := client.List(&OuContainerOperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestOuContainer_List(t *testing.T) {
	// From example List of OuContainers
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOuContainerClient(con,
		"1639790a-76a2-4ac4-98d9-8562f5dfcb4d")
	pager := client.List("OuContainerResourceGroup",
		"OuContainer.com",
		&OuContainerListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("OuContainer.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("OuContainer.ID should not be nil!")
			}
		}
	}
}

func TestOuContainer_Get(t *testing.T) {
	// From example List of OuContainers
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOuContainerClient(con,
		"1639790a-76a2-4ac4-98d9-8562f5dfcb4d")
	res, err := client.Get(ctx,
		"OuContainerResourceGroup",
		"OuContainer.com",
		"OuContainer1",
		&OuContainerGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.OuContainer.ID == nil {
		t.Fatal("OuContainer.ID should not be nil!")
	}
}

func TestOuContainer_Create(t *testing.T) {
	// From example Create Domain Service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOuContainerClient(con,
		"1639790a-76a2-4ac4-98d9-8562f5dfcb4d")
	poller, err := client.BeginCreate(ctx,
		"OuContainerResourceGroup",
		"OuContainer.com",
		"OuContainer1",
		ContainerAccount{
			AccountName: to.StringPtr("AccountName1"),
			Password:    to.StringPtr("<password>"),
			Spn:         to.StringPtr("Spn1"),
		},
		&OuContainerBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.OuContainer.ID == nil {
		t.Fatal("OuContainer.ID should not be nil!")
	}
}

func TestOuContainer_Delete(t *testing.T) {
	// From example Delete OuContainer
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOuContainerClient(con,
		"1639790a-76a2-4ac4-98d9-8562f5dfcb4d")
	poller, err := client.BeginDelete(ctx,
		"OuContainerResourceGroup",
		"OuContainer.com",
		"OuContainer1",
		&OuContainerBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestOuContainer_Update(t *testing.T) {
	// From example Update Domain Service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOuContainerClient(con,
		"1639790a-76a2-4ac4-98d9-8562f5dfcb4d")
	poller, err := client.BeginUpdate(ctx,
		"OuContainerResourceGroup",
		"OuContainer.com",
		"OuContainer1",
		ContainerAccount{
			AccountName: to.StringPtr("AccountName1"),
			Password:    to.StringPtr("<password>"),
			Spn:         to.StringPtr("Spn1"),
		},
		&OuContainerBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.OuContainer.ID == nil {
		t.Fatal("OuContainer.ID should not be nil!")
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
