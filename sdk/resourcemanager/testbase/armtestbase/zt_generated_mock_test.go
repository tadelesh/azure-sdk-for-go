//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armtestbase_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/testbase/armtestbase"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestSKUs_List(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountSKUsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TestBaseAccountSKUsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewSKUsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountSKUsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtestbase.AccountSKUListResult{
			Value: []*armtestbase.AccountSKU{
				{
					Name:         to.Ptr("S0"),
					Capabilities: []*armtestbase.AccountSKUCapability{},
					Locations: []*string{
						to.Ptr("global")},
					ResourceType: to.Ptr("testBaseAccounts"),
					Tier:         to.Ptr(armtestbase.TierStandard),
				},
				{
					Name:         to.Ptr("S0"),
					Capabilities: []*armtestbase.AccountSKUCapability{},
					Locations: []*string{
						to.Ptr("global")},
					ResourceType: to.Ptr("testBaseAccounts"),
					Tier:         to.Ptr(armtestbase.TierStandard),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountSKUListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountSKUListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountSKUsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTestBaseAccounts_ListBySubscription(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountsListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TestBaseAccountsListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewAccountsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	pager := client.ListBySubscription(&armtestbase.AccountsClientListBySubscriptionOptions{GetDeleted: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountsListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtestbase.AccountListResult{
			Value: []*armtestbase.AccountResource{
				{
					Name:     to.Ptr("contoso-testBaseAccount1"),
					Type:     to.Ptr("Microsoft.TestBase/testBaseAccounts"),
					ID:       to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armtestbase.AccountResourceProperties{
						AccessLevel:       to.Ptr("EarlyAccess"),
						ProvisioningState: to.Ptr(armtestbase.ProvisioningStateSucceeded),
						SKU: &armtestbase.AccountSKU{
							Name: to.Ptr("S0"),
							Capabilities: []*armtestbase.AccountSKUCapability{
								{
									Name:  to.Ptr("SLA"),
									Value: to.Ptr("99.9%"),
								},
								{
									Name:  to.Ptr("maximumPackageCount"),
									Value: to.Ptr("5"),
								},
								{
									Name:  to.Ptr("packageMaximumRunSeconds"),
									Value: to.Ptr("3600"),
								}},
							Tier: to.Ptr(armtestbase.TierStandard),
						},
					},
				},
				{
					Name:     to.Ptr("contoso-testBaseAccount2"),
					Type:     to.Ptr("Microsoft.TestBase/testBaseAccounts"),
					ID:       to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg2/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount2"),
					Location: to.Ptr("eastus"),
					Tags:     map[string]*string{},
					Properties: &armtestbase.AccountResourceProperties{
						AccessLevel:       to.Ptr("EarlyAccess"),
						ProvisioningState: to.Ptr(armtestbase.ProvisioningStateSucceeded),
						SKU: &armtestbase.AccountSKU{
							Name: to.Ptr("S0"),
							Capabilities: []*armtestbase.AccountSKUCapability{
								{
									Name:  to.Ptr("SLA"),
									Value: to.Ptr("99.999%"),
								},
								{
									Name:  to.Ptr("maximumPackageCount"),
									Value: to.Ptr("100"),
								},
								{
									Name:  to.Ptr("packageMaximumRunSeconds"),
									Value: to.Ptr("10800"),
								}},
							Tier: to.Ptr(armtestbase.TierStandard),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountsListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTestBaseAccounts_ListByResourceGroup(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TestBaseAccountsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewAccountsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	pager := client.ListByResourceGroup("contoso-rg1",
		&armtestbase.AccountsClientListByResourceGroupOptions{GetDeleted: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtestbase.AccountListResult{
			Value: []*armtestbase.AccountResource{
				{
					Name:     to.Ptr("contoso-testBaseAccount1"),
					Type:     to.Ptr("Microsoft.TestBase/testBaseAccounts"),
					ID:       to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armtestbase.AccountResourceProperties{
						AccessLevel:       to.Ptr("EarlyAccess"),
						ProvisioningState: to.Ptr(armtestbase.ProvisioningStateSucceeded),
						SKU: &armtestbase.AccountSKU{
							Name: to.Ptr("S0"),
							Capabilities: []*armtestbase.AccountSKUCapability{
								{
									Name:  to.Ptr("SLA"),
									Value: to.Ptr("99.9%"),
								},
								{
									Name:  to.Ptr("maximumPackageCount"),
									Value: to.Ptr("5"),
								},
								{
									Name:  to.Ptr("packageMaximumRunSeconds"),
									Value: to.Ptr("3600"),
								}},
							Tier: to.Ptr(armtestbase.TierStandard),
						},
					},
				},
				{
					Name:     to.Ptr("contoso-testBaseAccount2"),
					Type:     to.Ptr("Microsoft.TestBase/testBaseAccounts"),
					ID:       to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg2/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount2"),
					Location: to.Ptr("eastus"),
					Tags:     map[string]*string{},
					Properties: &armtestbase.AccountResourceProperties{
						AccessLevel:       to.Ptr("EarlyAccess"),
						ProvisioningState: to.Ptr(armtestbase.ProvisioningStateSucceeded),
						SKU: &armtestbase.AccountSKU{
							Name: to.Ptr("S0"),
							Capabilities: []*armtestbase.AccountSKUCapability{
								{
									Name:  to.Ptr("SLA"),
									Value: to.Ptr("99.999%"),
								},
								{
									Name:  to.Ptr("maximumPackageCount"),
									Value: to.Ptr("100"),
								},
								{
									Name:  to.Ptr("packageMaximumRunSeconds"),
									Value: to.Ptr("10800"),
								}},
							Tier: to.Ptr(armtestbase.TierStandard),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTestBaseAccounts_Create(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TestBaseAccountCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewAccountsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		armtestbase.AccountResource{
			Location: to.Ptr("westus"),
			Properties: &armtestbase.AccountResourceProperties{
				SKU: &armtestbase.AccountSKU{
					Name: to.Ptr("S0"),
					Tier: to.Ptr(armtestbase.TierStandard),
				},
			},
		},
		&armtestbase.AccountsClientBeginCreateOptions{Restore: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.AccountResource{
			Name:     to.Ptr("contoso-testBaseAccount1"),
			Type:     to.Ptr("Microsoft.TestBase/testBaseAccounts"),
			ID:       to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1"),
			Location: to.Ptr("westus"),
			Tags:     map[string]*string{},
			Properties: &armtestbase.AccountResourceProperties{
				AccessLevel:       to.Ptr("StandardAccess"),
				ProvisioningState: to.Ptr(armtestbase.ProvisioningStateSucceeded),
				SKU: &armtestbase.AccountSKU{
					Name: to.Ptr("S0"),
					Capabilities: []*armtestbase.AccountSKUCapability{
						{
							Name:  to.Ptr("SLA"),
							Value: to.Ptr("99.9%"),
						},
						{
							Name:  to.Ptr("maximumPackageCount"),
							Value: to.Ptr("5"),
						},
						{
							Name:  to.Ptr("packageMaximumRunSeconds"),
							Value: to.Ptr("3600"),
						}},
					Tier: to.Ptr(armtestbase.TierStandard),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AccountResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountResource)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTestBaseAccounts_Update(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TestBaseAccountUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewAccountsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		armtestbase.AccountUpdateParameters{
			Properties: &armtestbase.AccountUpdateParameterProperties{
				SKU: &armtestbase.AccountSKU{
					Name: to.Ptr("S0"),
					Tier: to.Ptr(armtestbase.TierStandard),
				},
			},
		},
		&armtestbase.AccountsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.AccountResource{
			Name:     to.Ptr("contoso-testBaseAccount1"),
			Type:     to.Ptr("Microsoft.TestBase/testBaseAccounts"),
			ID:       to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1"),
			Location: to.Ptr("westus"),
			Tags:     map[string]*string{},
			Properties: &armtestbase.AccountResourceProperties{
				AccessLevel:       to.Ptr("EarlyAccess"),
				ProvisioningState: to.Ptr(armtestbase.ProvisioningStateSucceeded),
				SKU: &armtestbase.AccountSKU{
					Name: to.Ptr("S0"),
					Capabilities: []*armtestbase.AccountSKUCapability{
						{
							Name:  to.Ptr("SLA"),
							Value: to.Ptr("99.9%"),
						},
						{
							Name:  to.Ptr("maximumPackageCount"),
							Value: to.Ptr("5"),
						},
						{
							Name:  to.Ptr("packageMaximumRunSeconds"),
							Value: to.Ptr("3600"),
						}},
					Tier: to.Ptr(armtestbase.TierStandard),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AccountResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountResource)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTestBaseAccounts_Delete(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TestBaseAccountDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewAccountsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		&armtestbase.AccountsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountDelete.json: %v", err)
	}
}

func TestTestBaseAccounts_Get(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TestBaseAccountGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewAccountsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	res, err := client.Get(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.AccountResource{
			Name:     to.Ptr("contoso-testBaseAccount1"),
			Type:     to.Ptr("Microsoft.TestBase/testBaseAccounts"),
			ID:       to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1"),
			Location: to.Ptr("westus"),
			Tags:     map[string]*string{},
			Properties: &armtestbase.AccountResourceProperties{
				AccessLevel:       to.Ptr("EarlyAccess"),
				ProvisioningState: to.Ptr(armtestbase.ProvisioningStateSucceeded),
				SKU: &armtestbase.AccountSKU{
					Name: to.Ptr("S0"),
					Capabilities: []*armtestbase.AccountSKUCapability{
						{
							Name:  to.Ptr("SLA"),
							Value: to.Ptr("99.9%"),
						},
						{
							Name:  to.Ptr("maximumPackageCount"),
							Value: to.Ptr("5"),
						},
						{
							Name:  to.Ptr("packageMaximumRunSeconds"),
							Value: to.Ptr("3600"),
						}},
					Tier: to.Ptr(armtestbase.TierStandard),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AccountResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountResource)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTestBaseAccounts_Offboard(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountOffboard.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TestBaseAccountOffboard"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewAccountsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	poller, err := client.BeginOffboard(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		&armtestbase.AccountsClientBeginOffboardOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountOffboard.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountOffboard.json: %v", err)
	}
}

func TestTestBaseAccounts_CheckPackageNameAvailability(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CheckPackageNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CheckPackageNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewAccountsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	res, err := client.CheckPackageNameAvailability(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		armtestbase.PackageCheckNameAvailabilityParameters{
			Name:            to.Ptr("testApp"),
			Type:            to.Ptr("Microsoft.TestBase/testBaseAccounts/packages"),
			ApplicationName: to.Ptr("testApp"),
			Version:         to.Ptr("1.0.0"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CheckPackageNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.CheckNameAvailabilityResult{}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CheckPackageNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUsage_List(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountUsagesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TestBaseAccountUsagesList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewUsageClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	pager := client.List("contoso-rg1",
		"contoso-testBaseAccount1",
		&armtestbase.UsageClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountUsagesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtestbase.AccountUsageDataList{
			Value: []*armtestbase.AccountUsageData{
				{
					Name: &armtestbase.AccountUsageName{
						LocalizedValue: to.Ptr("contoso-package1-usage"),
						Value:          to.Ptr("contoso-package1-usage"),
					},
					CurrentValue: to.Ptr[int64](7531),
					ID:           to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/usages/contoso-package1-usage"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr("Seconds"),
				},
				{
					Name: &armtestbase.AccountUsageName{
						LocalizedValue: to.Ptr("contoso-package2-usage"),
						Value:          to.Ptr("contoso-package2-usage"),
					},
					CurrentValue: to.Ptr[int64](3157),
					ID:           to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/usages/contoso-package2-usage"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr("Seconds"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountUsageDataList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountUsageDataList)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestBaseAccountUsagesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAvailableOS_List(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/AvailableOSsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailableOSsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewAvailableOSClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	pager := client.List("contoso-rg",
		"contoso-testBaseAccount",
		armtestbase.OsUpdateTypeSecurityUpdate,
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/AvailableOSsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtestbase.AvailableOSListResult{
			Value: []*armtestbase.AvailableOSResource{
				{
					Name: to.Ptr("Windows-10-2004"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/availableOSs"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount/availableOSs/Windows-10-2004"),
					Properties: &armtestbase.AvailableOSProperties{
						InsiderChannel: to.Ptr("Channel 1"),
						OSID:           to.Ptr("Windows 10 2004"),
						OSName:         to.Ptr("Windows 10 2004"),
						OSPlatform:     to.Ptr("Client"),
						OSUpdateType:   to.Ptr("Feature update"),
						OSVersion:      to.Ptr("Windows 10"),
					},
				},
				{
					Name: to.Ptr("Windows-10-1909"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/availableOSs"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount/availableOSs/Windows-10-1909"),
					Properties: &armtestbase.AvailableOSProperties{
						OSID:         to.Ptr("Windows 10 1909"),
						OSName:       to.Ptr("Windows 10 1909"),
						OSPlatform:   to.Ptr("Client"),
						OSUpdateType: to.Ptr("Security update"),
						OSVersion:    to.Ptr("Windows 10"),
					},
				},
				{
					Name: to.Ptr("Windows-10-1903"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/availableOSs"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount/availableOSs/Windows-10-1903"),
					Properties: &armtestbase.AvailableOSProperties{
						OSID:         to.Ptr("Windows 10 1903"),
						OSName:       to.Ptr("Windows 10 1903"),
						OSPlatform:   to.Ptr("Client"),
						OSUpdateType: to.Ptr("Security update"),
						OSVersion:    to.Ptr("Windows 10"),
					},
				},
				{
					Name: to.Ptr("Windows-10-1809"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/availableOSs"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount/availableOSs/Windows-10-1809"),
					Properties: &armtestbase.AvailableOSProperties{
						InsiderChannel: to.Ptr("Channel 3"),
						OSID:           to.Ptr("Windows 10 1809"),
						OSName:         to.Ptr("Windows 10 1809"),
						OSPlatform:     to.Ptr("Client"),
						OSUpdateType:   to.Ptr("Feature update"),
						OSVersion:      to.Ptr("Windows 10"),
					},
				},
				{
					Name: to.Ptr("Windows-Server-2016"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/availableOSs"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount/availableOSs/Windows-Server-2016"),
					Properties: &armtestbase.AvailableOSProperties{
						OSID:         to.Ptr("Windows Server 2016"),
						OSName:       to.Ptr("Windows Server 2016"),
						OSPlatform:   to.Ptr("Server"),
						OSUpdateType: to.Ptr("Security update"),
						OSVersion:    to.Ptr("Windows Server 2016"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AvailableOSListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AvailableOSListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/AvailableOSsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAvailableOS_Get(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/AvailableOSGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailableOSGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewAvailableOSClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	res, err := client.Get(ctx,
		"contoso-rg",
		"contoso-testBaseAccount",
		"Windows-10-2004",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/AvailableOSGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.AvailableOSResource{
			Name: to.Ptr("Windows-10-2004"),
			Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/availableOSs"),
			ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount/availableOSs/Windows-10-2004"),
			Properties: &armtestbase.AvailableOSProperties{
				InsiderChannel: to.Ptr("Channel 1"),
				OSID:           to.Ptr("Windows 10 2004"),
				OSName:         to.Ptr("Windows 10 2004"),
				OSPlatform:     to.Ptr("Client"),
				OSUpdateType:   to.Ptr("Feature update"),
				OSVersion:      to.Ptr("Windows 10"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AvailableOSResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AvailableOSResource)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/AvailableOSGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFlightingRings_List(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/FlightingRingsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FlightingRingsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewFlightingRingsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	pager := client.List("contoso-rg",
		"contoso-testBaseAccount",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/FlightingRingsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtestbase.FlightingRingListResult{
			Value: []*armtestbase.FlightingRingResource{
				{
					Name: to.Ptr("Insider-Beta-Channel"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/flightingRings"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount/flightingRings/Insider-Beta-Channel"),
					Properties: &armtestbase.FlightingRingProperties{
						ActualFlightingRingName: to.Ptr("Insider Beta Channel"),
					},
				},
				{
					Name: to.Ptr("Another-Channel"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/flightingRings"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount/flightingRings/Another-Channel"),
					Properties: &armtestbase.FlightingRingProperties{
						ActualFlightingRingName: to.Ptr("Another Channel"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FlightingRingListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FlightingRingListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/FlightingRingsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFlightingRings_Get(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/FlightingRingGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FlightingRingGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewFlightingRingsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	res, err := client.Get(ctx,
		"contoso-rg",
		"contoso-testBaseAccount",
		"Insider-Beta-Channel",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/FlightingRingGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.FlightingRingResource{
			Name: to.Ptr("Insider-Beta-Channel"),
			Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/flightingRings"),
			ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount/flightingRings/Insider-Beta-Channel"),
			Properties: &armtestbase.FlightingRingProperties{
				ActualFlightingRingName: to.Ptr("Insider Beta Channel"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FlightingRingResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FlightingRingResource)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/FlightingRingGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTestTypes_List(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestTypesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TestTypesList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewTestTypesClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	pager := client.List("contoso-rg",
		"contoso-testBaseAccount",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestTypesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtestbase.TestTypeListResult{
			Value: []*armtestbase.TestTypeResource{
				{
					Name: to.Ptr("Functional-Test"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/testTypes"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount/testTypes/Functional-Test"),
					Properties: &armtestbase.TestTypeProperties{
						ActualTestTypeName: to.Ptr("Functional Test"),
					},
				},
				{
					Name: to.Ptr("Out-of-Box-Test"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/testTypes"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount/testTypes/Out-of-Box-Test"),
					Properties: &armtestbase.TestTypeProperties{
						ActualTestTypeName: to.Ptr("Out of Box Test"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TestTypeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TestTypeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestTypesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTestTypes_Get(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestTypeGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TestTypeGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewTestTypesClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	res, err := client.Get(ctx,
		"contoso-rg",
		"contoso-testBaseAccount",
		"Functional-Test",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestTypeGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.TestTypeResource{
			Name: to.Ptr("Functional-Test"),
			Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/testTypes"),
			ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount/testTypes/Functional-Test"),
			Properties: &armtestbase.TestTypeProperties{
				ActualTestTypeName: to.Ptr("Functional Test"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TestTypeResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TestTypeResource)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestTypeGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPackages_ListByTestBaseAccount(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackagesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PackagesList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewPackagesClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	pager := client.ListByTestBaseAccount("contoso-rg1",
		"contoso-testBaseAccount1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackagesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtestbase.PackageListResult{
			Value: []*armtestbase.PackageResource{
				{
					Name:     to.Ptr("contoso-package1"),
					Type:     to.Ptr("Microsoft.TestBase/testBaseAccounts/packages"),
					ID:       to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package1"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armtestbase.PackageProperties{
						ApplicationName:   to.Ptr("contoso-package1"),
						BlobPath:          to.Ptr("storageAccountPath/package.zip"),
						FlightingRing:     to.Ptr("Insider Beta Channel"),
						IsEnabled:         to.Ptr(true),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:30:00Z"); return t }()),
						PackageStatus:     to.Ptr(armtestbase.PackageStatusReady),
						ProvisioningState: to.Ptr(armtestbase.ProvisioningStateSucceeded),
						TargetOSList: []*armtestbase.TargetOSInfo{
							{
								OSUpdateType: to.Ptr("Security updates"),
								TargetOSs: []*string{
									to.Ptr("Windows 10 2004"),
									to.Ptr("Windows 10 1903")},
							},
							{
								OSUpdateType: to.Ptr("Feature updates"),
								TargetOSs: []*string{
									to.Ptr("Windows 10 2004"),
									to.Ptr("Windows 10 1903"),
									to.Ptr("Windows 10 1809")},
							}},
						TestTypes: []*armtestbase.TestType{
							to.Ptr(armtestbase.TestTypeOutOfBoxTest),
							to.Ptr(armtestbase.TestTypeFunctionalTest)},
						Tests: []*armtestbase.Test{
							{
								IsActive:            to.Ptr(true),
								TestType:            to.Ptr(armtestbase.TestTypeOutOfBoxTest),
								ValidationRunStatus: to.Ptr(armtestbase.ValidationRunStatusPassed),
								Commands: []*armtestbase.Command{
									{
										Name:              to.Ptr("Install"),
										Action:            to.Ptr(armtestbase.ActionInstall),
										AlwaysRun:         to.Ptr(true),
										ApplyUpdateBefore: to.Ptr(false),
										Content:           to.Ptr("app/scripts/install/job.ps1"),
										ContentType:       to.Ptr(armtestbase.ContentTypePath),
										MaxRunTime:        to.Ptr[int32](1800),
										RestartAfter:      to.Ptr(true),
										RunAsInteractive:  to.Ptr(true),
										RunElevated:       to.Ptr(true),
									},
									{
										Name:              to.Ptr("Launch"),
										Action:            to.Ptr(armtestbase.ActionLaunch),
										AlwaysRun:         to.Ptr(false),
										ApplyUpdateBefore: to.Ptr(true),
										Content:           to.Ptr("app/scripts/launch/job.ps1"),
										ContentType:       to.Ptr(armtestbase.ContentTypePath),
										MaxRunTime:        to.Ptr[int32](1800),
										RestartAfter:      to.Ptr(false),
										RunAsInteractive:  to.Ptr(true),
										RunElevated:       to.Ptr(true),
									},
									{
										Name:              to.Ptr("Close"),
										Action:            to.Ptr(armtestbase.ActionClose),
										AlwaysRun:         to.Ptr(false),
										ApplyUpdateBefore: to.Ptr(false),
										Content:           to.Ptr("app/scripts/close/job.ps1"),
										ContentType:       to.Ptr(armtestbase.ContentTypePath),
										MaxRunTime:        to.Ptr[int32](1800),
										RestartAfter:      to.Ptr(false),
										RunAsInteractive:  to.Ptr(true),
										RunElevated:       to.Ptr(true),
									},
									{
										Name:              to.Ptr("Uninstall"),
										Action:            to.Ptr(armtestbase.ActionUninstall),
										AlwaysRun:         to.Ptr(true),
										ApplyUpdateBefore: to.Ptr(false),
										Content:           to.Ptr("app/scripts/uninstall/job.ps1"),
										ContentType:       to.Ptr(armtestbase.ContentTypePath),
										MaxRunTime:        to.Ptr[int32](1800),
										RestartAfter:      to.Ptr(false),
										RunAsInteractive:  to.Ptr(true),
										RunElevated:       to.Ptr(true),
									}},
							},
							{
								IsActive:            to.Ptr(true),
								TestType:            to.Ptr(armtestbase.TestTypeFunctionalTest),
								ValidationRunStatus: to.Ptr(armtestbase.ValidationRunStatusPassed),
								Commands: []*armtestbase.Command{
									{
										Name:              to.Ptr("Custom1"),
										Action:            to.Ptr(armtestbase.ActionCustom),
										AlwaysRun:         to.Ptr(true),
										ApplyUpdateBefore: to.Ptr(false),
										Content:           to.Ptr("app/scripts/custom/custom1.ps1"),
										ContentType:       to.Ptr(armtestbase.ContentTypePath),
										MaxRunTime:        to.Ptr[int32](1800),
										RestartAfter:      to.Ptr(false),
										RunAsInteractive:  to.Ptr(true),
										RunElevated:       to.Ptr(true),
									},
									{
										Name:              to.Ptr("Custom2"),
										Action:            to.Ptr(armtestbase.ActionCustom),
										AlwaysRun:         to.Ptr(true),
										ApplyUpdateBefore: to.Ptr(true),
										Content:           to.Ptr("app/scripts/custom/custom2.ps1"),
										ContentType:       to.Ptr(armtestbase.ContentTypePath),
										MaxRunTime:        to.Ptr[int32](1800),
										RestartAfter:      to.Ptr(false),
										RunAsInteractive:  to.Ptr(true),
										RunElevated:       to.Ptr(true),
									}},
							}},
						ValidationResults: []*armtestbase.PackageValidationResult{
							{
								IsValid:        to.Ptr(true),
								ValidationName: to.Ptr("Syntax Validation"),
							},
							{
								IsValid:        to.Ptr(true),
								ValidationName: to.Ptr("Package Run Validation"),
							}},
						Version: to.Ptr("1.0.0"),
					},
				},
				{
					Name:     to.Ptr("contoso-package2"),
					Type:     to.Ptr("Microsoft.TestBase/testBaseAccounts/packages"),
					ID:       to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armtestbase.PackageProperties{
						ApplicationName:   to.Ptr("contoso-package2"),
						BlobPath:          to.Ptr("storageAccountPath/package.zip"),
						FlightingRing:     to.Ptr("Insider Beta Channel"),
						IsEnabled:         to.Ptr(true),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:30:00Z"); return t }()),
						PackageStatus:     to.Ptr(armtestbase.PackageStatusReady),
						ProvisioningState: to.Ptr(armtestbase.ProvisioningStateSucceeded),
						TargetOSList: []*armtestbase.TargetOSInfo{
							{
								OSUpdateType: to.Ptr("Security updates"),
								TargetOSs: []*string{
									to.Ptr("Windows 10 2004"),
									to.Ptr("Windows 10 1903")},
							}},
						TestTypes: []*armtestbase.TestType{
							to.Ptr(armtestbase.TestTypeOutOfBoxTest)},
						Tests: []*armtestbase.Test{
							{
								IsActive:            to.Ptr(true),
								TestType:            to.Ptr(armtestbase.TestTypeOutOfBoxTest),
								ValidationRunStatus: to.Ptr(armtestbase.ValidationRunStatusPassed),
								Commands: []*armtestbase.Command{
									{
										Name:              to.Ptr("Install"),
										Action:            to.Ptr(armtestbase.ActionInstall),
										AlwaysRun:         to.Ptr(true),
										ApplyUpdateBefore: to.Ptr(false),
										Content:           to.Ptr("app/scripts/install/job.ps1"),
										ContentType:       to.Ptr(armtestbase.ContentTypePath),
										MaxRunTime:        to.Ptr[int32](1800),
										RestartAfter:      to.Ptr(true),
										RunAsInteractive:  to.Ptr(true),
										RunElevated:       to.Ptr(true),
									},
									{
										Name:              to.Ptr("Launch"),
										Action:            to.Ptr(armtestbase.ActionLaunch),
										AlwaysRun:         to.Ptr(false),
										ApplyUpdateBefore: to.Ptr(true),
										Content:           to.Ptr("app/scripts/launch/job.ps1"),
										ContentType:       to.Ptr(armtestbase.ContentTypePath),
										MaxRunTime:        to.Ptr[int32](1800),
										RestartAfter:      to.Ptr(false),
										RunAsInteractive:  to.Ptr(true),
										RunElevated:       to.Ptr(true),
									},
									{
										Name:              to.Ptr("Close"),
										Action:            to.Ptr(armtestbase.ActionClose),
										AlwaysRun:         to.Ptr(false),
										ApplyUpdateBefore: to.Ptr(false),
										Content:           to.Ptr("app/scripts/close/job.ps1"),
										ContentType:       to.Ptr(armtestbase.ContentTypePath),
										MaxRunTime:        to.Ptr[int32](1800),
										RestartAfter:      to.Ptr(false),
										RunAsInteractive:  to.Ptr(true),
										RunElevated:       to.Ptr(true),
									},
									{
										Name:              to.Ptr("Uninstall"),
										Action:            to.Ptr(armtestbase.ActionUninstall),
										AlwaysRun:         to.Ptr(true),
										ApplyUpdateBefore: to.Ptr(false),
										Content:           to.Ptr("app/scripts/uninstall/job.ps1"),
										ContentType:       to.Ptr(armtestbase.ContentTypePath),
										MaxRunTime:        to.Ptr[int32](1800),
										RestartAfter:      to.Ptr(false),
										RunAsInteractive:  to.Ptr(true),
										RunElevated:       to.Ptr(true),
									}},
							}},
						ValidationResults: []*armtestbase.PackageValidationResult{
							{
								IsValid:        to.Ptr(true),
								ValidationName: to.Ptr("Syntax Validation"),
							},
							{
								IsValid:        to.Ptr(true),
								ValidationName: to.Ptr("Package Run Validation"),
							}},
						Version: to.Ptr("1.0.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PackageListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PackageListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackagesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPackages_Create(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PackageCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewPackagesClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		armtestbase.PackageResource{
			Location: to.Ptr("westus"),
			Tags:     map[string]*string{},
			Properties: &armtestbase.PackageProperties{
				ApplicationName: to.Ptr("contoso-package2"),
				BlobPath:        to.Ptr("storageAccountPath/package.zip"),
				FlightingRing:   to.Ptr("Insider Beta Channel"),
				TargetOSList: []*armtestbase.TargetOSInfo{
					{
						OSUpdateType: to.Ptr("Security updates"),
						TargetOSs: []*string{
							to.Ptr("Windows 10 2004"),
							to.Ptr("Windows 10 1903")},
					}},
				Tests: []*armtestbase.Test{
					{
						IsActive: to.Ptr(true),
						TestType: to.Ptr(armtestbase.TestTypeOutOfBoxTest),
						Commands: []*armtestbase.Command{
							{
								Name:              to.Ptr("Install"),
								Action:            to.Ptr(armtestbase.ActionInstall),
								AlwaysRun:         to.Ptr(true),
								ApplyUpdateBefore: to.Ptr(false),
								Content:           to.Ptr("app/scripts/install/job.ps1"),
								ContentType:       to.Ptr(armtestbase.ContentTypePath),
								MaxRunTime:        to.Ptr[int32](1800),
								RestartAfter:      to.Ptr(true),
								RunAsInteractive:  to.Ptr(true),
								RunElevated:       to.Ptr(true),
							},
							{
								Name:              to.Ptr("Launch"),
								Action:            to.Ptr(armtestbase.ActionLaunch),
								AlwaysRun:         to.Ptr(false),
								ApplyUpdateBefore: to.Ptr(true),
								Content:           to.Ptr("app/scripts/launch/job.ps1"),
								ContentType:       to.Ptr(armtestbase.ContentTypePath),
								MaxRunTime:        to.Ptr[int32](1800),
								RestartAfter:      to.Ptr(false),
								RunAsInteractive:  to.Ptr(true),
								RunElevated:       to.Ptr(true),
							},
							{
								Name:              to.Ptr("Close"),
								Action:            to.Ptr(armtestbase.ActionClose),
								AlwaysRun:         to.Ptr(false),
								ApplyUpdateBefore: to.Ptr(false),
								Content:           to.Ptr("app/scripts/close/job.ps1"),
								ContentType:       to.Ptr(armtestbase.ContentTypePath),
								MaxRunTime:        to.Ptr[int32](1800),
								RestartAfter:      to.Ptr(false),
								RunAsInteractive:  to.Ptr(true),
								RunElevated:       to.Ptr(true),
							},
							{
								Name:              to.Ptr("Uninstall"),
								Action:            to.Ptr(armtestbase.ActionUninstall),
								AlwaysRun:         to.Ptr(true),
								ApplyUpdateBefore: to.Ptr(false),
								Content:           to.Ptr("app/scripts/uninstall/job.ps1"),
								ContentType:       to.Ptr(armtestbase.ContentTypePath),
								MaxRunTime:        to.Ptr[int32](1800),
								RestartAfter:      to.Ptr(false),
								RunAsInteractive:  to.Ptr(true),
								RunElevated:       to.Ptr(true),
							}},
					}},
				Version: to.Ptr("1.0.0"),
			},
		},
		&armtestbase.PackagesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.PackageResource{
			Name:     to.Ptr("contoso-package2"),
			Type:     to.Ptr("Microsoft.TestBase/testBaseAccounts/packages"),
			ID:       to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2"),
			Location: to.Ptr("westus"),
			Tags:     map[string]*string{},
			Properties: &armtestbase.PackageProperties{
				ApplicationName:   to.Ptr("contoso-package2"),
				BlobPath:          to.Ptr("storageAccountPath/package.zip"),
				FlightingRing:     to.Ptr("Insider Beta Channel"),
				IsEnabled:         to.Ptr(true),
				LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:30:00Z"); return t }()),
				PackageStatus:     to.Ptr(armtestbase.PackageStatusReady),
				ProvisioningState: to.Ptr(armtestbase.ProvisioningStateSucceeded),
				TargetOSList: []*armtestbase.TargetOSInfo{
					{
						OSUpdateType: to.Ptr("Security updates"),
						TargetOSs: []*string{
							to.Ptr("Windows 10 2004"),
							to.Ptr("Windows 10 1903")},
					}},
				TestTypes: []*armtestbase.TestType{
					to.Ptr(armtestbase.TestTypeOutOfBoxTest)},
				Tests: []*armtestbase.Test{
					{
						IsActive:            to.Ptr(true),
						TestType:            to.Ptr(armtestbase.TestTypeOutOfBoxTest),
						ValidationRunStatus: to.Ptr(armtestbase.ValidationRunStatusPassed),
						Commands: []*armtestbase.Command{
							{
								Name:              to.Ptr("Install"),
								Action:            to.Ptr(armtestbase.ActionInstall),
								AlwaysRun:         to.Ptr(true),
								ApplyUpdateBefore: to.Ptr(false),
								Content:           to.Ptr("app/scripts/install/job.ps1"),
								ContentType:       to.Ptr(armtestbase.ContentTypePath),
								MaxRunTime:        to.Ptr[int32](1800),
								RestartAfter:      to.Ptr(true),
								RunAsInteractive:  to.Ptr(true),
								RunElevated:       to.Ptr(true),
							},
							{
								Name:              to.Ptr("Launch"),
								Action:            to.Ptr(armtestbase.ActionLaunch),
								AlwaysRun:         to.Ptr(false),
								ApplyUpdateBefore: to.Ptr(true),
								Content:           to.Ptr("app/scripts/launch/job.ps1"),
								ContentType:       to.Ptr(armtestbase.ContentTypePath),
								MaxRunTime:        to.Ptr[int32](1800),
								RestartAfter:      to.Ptr(false),
								RunAsInteractive:  to.Ptr(true),
								RunElevated:       to.Ptr(true),
							},
							{
								Name:              to.Ptr("Close"),
								Action:            to.Ptr(armtestbase.ActionClose),
								AlwaysRun:         to.Ptr(false),
								ApplyUpdateBefore: to.Ptr(false),
								Content:           to.Ptr("app/scripts/close/job.ps1"),
								ContentType:       to.Ptr(armtestbase.ContentTypePath),
								MaxRunTime:        to.Ptr[int32](1800),
								RestartAfter:      to.Ptr(false),
								RunAsInteractive:  to.Ptr(true),
								RunElevated:       to.Ptr(true),
							},
							{
								Name:              to.Ptr("Uninstall"),
								Action:            to.Ptr(armtestbase.ActionUninstall),
								AlwaysRun:         to.Ptr(true),
								ApplyUpdateBefore: to.Ptr(false),
								Content:           to.Ptr("app/scripts/uninstall/job.ps1"),
								ContentType:       to.Ptr(armtestbase.ContentTypePath),
								MaxRunTime:        to.Ptr[int32](1800),
								RestartAfter:      to.Ptr(false),
								RunAsInteractive:  to.Ptr(true),
								RunElevated:       to.Ptr(true),
							}},
					}},
				ValidationResults: []*armtestbase.PackageValidationResult{
					{
						IsValid:        to.Ptr(true),
						ValidationName: to.Ptr("Syntax Validation"),
					},
					{
						IsValid:        to.Ptr(true),
						ValidationName: to.Ptr("Package Run Validation"),
					}},
				Version: to.Ptr("1.0.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PackageResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PackageResource)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPackages_Update(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PackageUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewPackagesClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		armtestbase.PackageUpdateParameters{
			Properties: &armtestbase.PackageUpdateParameterProperties{
				BlobPath:      to.Ptr("storageAccountPath/package.zip"),
				FlightingRing: to.Ptr("Insider Beta Channel"),
				IsEnabled:     to.Ptr(false),
				TargetOSList: []*armtestbase.TargetOSInfo{
					{
						OSUpdateType: to.Ptr("Security updates"),
						TargetOSs: []*string{
							to.Ptr("Windows 10 2004"),
							to.Ptr("Windows 10 1903")},
					}},
				Tests: []*armtestbase.Test{
					{
						IsActive: to.Ptr(true),
						TestType: to.Ptr(armtestbase.TestTypeOutOfBoxTest),
						Commands: []*armtestbase.Command{
							{
								Name:              to.Ptr("Install"),
								Action:            to.Ptr(armtestbase.ActionInstall),
								AlwaysRun:         to.Ptr(true),
								ApplyUpdateBefore: to.Ptr(false),
								Content:           to.Ptr("app/scripts/install/job.ps1"),
								ContentType:       to.Ptr(armtestbase.ContentTypePath),
								MaxRunTime:        to.Ptr[int32](1800),
								RestartAfter:      to.Ptr(true),
								RunAsInteractive:  to.Ptr(true),
								RunElevated:       to.Ptr(true),
							},
							{
								Name:              to.Ptr("Launch"),
								Action:            to.Ptr(armtestbase.ActionLaunch),
								AlwaysRun:         to.Ptr(false),
								ApplyUpdateBefore: to.Ptr(true),
								Content:           to.Ptr("app/scripts/launch/job.ps1"),
								ContentType:       to.Ptr(armtestbase.ContentTypePath),
								MaxRunTime:        to.Ptr[int32](1800),
								RestartAfter:      to.Ptr(false),
								RunAsInteractive:  to.Ptr(true),
								RunElevated:       to.Ptr(true),
							},
							{
								Name:              to.Ptr("Close"),
								Action:            to.Ptr(armtestbase.ActionClose),
								AlwaysRun:         to.Ptr(false),
								ApplyUpdateBefore: to.Ptr(false),
								Content:           to.Ptr("app/scripts/close/job.ps1"),
								ContentType:       to.Ptr(armtestbase.ContentTypePath),
								MaxRunTime:        to.Ptr[int32](1800),
								RestartAfter:      to.Ptr(false),
								RunAsInteractive:  to.Ptr(true),
								RunElevated:       to.Ptr(true),
							},
							{
								Name:              to.Ptr("Uninstall"),
								Action:            to.Ptr(armtestbase.ActionUninstall),
								AlwaysRun:         to.Ptr(true),
								ApplyUpdateBefore: to.Ptr(false),
								Content:           to.Ptr("app/scripts/uninstall/job.ps1"),
								ContentType:       to.Ptr(armtestbase.ContentTypePath),
								MaxRunTime:        to.Ptr[int32](1800),
								RestartAfter:      to.Ptr(false),
								RunAsInteractive:  to.Ptr(true),
								RunElevated:       to.Ptr(true),
							}},
					}},
			},
			Tags: map[string]*string{},
		},
		&armtestbase.PackagesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.PackageResource{
			Name:     to.Ptr("contoso-package2"),
			Type:     to.Ptr("Microsoft.TestBase/testBaseAccounts/packages"),
			ID:       to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2"),
			Location: to.Ptr("westus"),
			Tags:     map[string]*string{},
			Properties: &armtestbase.PackageProperties{
				ApplicationName:   to.Ptr("contoso-package2"),
				BlobPath:          to.Ptr("storageAccountPath/package.zip"),
				FlightingRing:     to.Ptr("Insider Beta Channel"),
				IsEnabled:         to.Ptr(false),
				LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:30:00Z"); return t }()),
				PackageStatus:     to.Ptr(armtestbase.PackageStatusReady),
				ProvisioningState: to.Ptr(armtestbase.ProvisioningStateSucceeded),
				TargetOSList: []*armtestbase.TargetOSInfo{
					{
						OSUpdateType: to.Ptr("Security updates"),
						TargetOSs: []*string{
							to.Ptr("Windows 10 2004"),
							to.Ptr("Windows 10 1903")},
					}},
				TestTypes: []*armtestbase.TestType{
					to.Ptr(armtestbase.TestTypeOutOfBoxTest)},
				Tests: []*armtestbase.Test{
					{
						IsActive:            to.Ptr(true),
						TestType:            to.Ptr(armtestbase.TestTypeOutOfBoxTest),
						ValidationRunStatus: to.Ptr(armtestbase.ValidationRunStatusPassed),
						Commands: []*armtestbase.Command{
							{
								Name:              to.Ptr("Install"),
								Action:            to.Ptr(armtestbase.ActionInstall),
								AlwaysRun:         to.Ptr(true),
								ApplyUpdateBefore: to.Ptr(false),
								Content:           to.Ptr("app/scripts/install/job.ps1"),
								ContentType:       to.Ptr(armtestbase.ContentTypePath),
								MaxRunTime:        to.Ptr[int32](1800),
								RestartAfter:      to.Ptr(true),
								RunAsInteractive:  to.Ptr(true),
								RunElevated:       to.Ptr(true),
							},
							{
								Name:              to.Ptr("Launch"),
								Action:            to.Ptr(armtestbase.ActionLaunch),
								AlwaysRun:         to.Ptr(false),
								ApplyUpdateBefore: to.Ptr(true),
								Content:           to.Ptr("app/scripts/launch/job.ps1"),
								ContentType:       to.Ptr(armtestbase.ContentTypePath),
								MaxRunTime:        to.Ptr[int32](1800),
								RestartAfter:      to.Ptr(false),
								RunAsInteractive:  to.Ptr(true),
								RunElevated:       to.Ptr(true),
							},
							{
								Name:              to.Ptr("Close"),
								Action:            to.Ptr(armtestbase.ActionClose),
								AlwaysRun:         to.Ptr(false),
								ApplyUpdateBefore: to.Ptr(false),
								Content:           to.Ptr("app/scripts/close/job.ps1"),
								ContentType:       to.Ptr(armtestbase.ContentTypePath),
								MaxRunTime:        to.Ptr[int32](1800),
								RestartAfter:      to.Ptr(false),
								RunAsInteractive:  to.Ptr(true),
								RunElevated:       to.Ptr(true),
							},
							{
								Name:              to.Ptr("Uninstall"),
								Action:            to.Ptr(armtestbase.ActionUninstall),
								AlwaysRun:         to.Ptr(true),
								ApplyUpdateBefore: to.Ptr(false),
								Content:           to.Ptr("app/scripts/uninstall/job.ps1"),
								ContentType:       to.Ptr(armtestbase.ContentTypePath),
								MaxRunTime:        to.Ptr[int32](1800),
								RestartAfter:      to.Ptr(false),
								RunAsInteractive:  to.Ptr(true),
								RunElevated:       to.Ptr(true),
							}},
					}},
				ValidationResults: []*armtestbase.PackageValidationResult{
					{
						IsValid:        to.Ptr(true),
						ValidationName: to.Ptr("Syntax Validation"),
					},
					{
						IsValid:        to.Ptr(true),
						ValidationName: to.Ptr("Package Run Validation"),
					}},
				Version: to.Ptr("1.0.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PackageResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PackageResource)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPackages_Delete(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PackageDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewPackagesClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		&armtestbase.PackagesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageDelete.json: %v", err)
	}
}

func TestPackages_Get(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PackageGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewPackagesClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	res, err := client.Get(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.PackageResource{
			Name:     to.Ptr("contoso-package2"),
			Type:     to.Ptr("Microsoft.TestBase/testBaseAccounts/packages"),
			ID:       to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2"),
			Location: to.Ptr("westus"),
			Tags:     map[string]*string{},
			Properties: &armtestbase.PackageProperties{
				ApplicationName:   to.Ptr("contoso-package2"),
				BlobPath:          to.Ptr("storageAccountPath/package.zip"),
				FlightingRing:     to.Ptr("Insider Beta Channel"),
				IsEnabled:         to.Ptr(true),
				LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:30:00Z"); return t }()),
				PackageStatus:     to.Ptr(armtestbase.PackageStatusReady),
				ProvisioningState: to.Ptr(armtestbase.ProvisioningStateSucceeded),
				TargetOSList: []*armtestbase.TargetOSInfo{
					{
						OSUpdateType: to.Ptr("Security updates"),
						TargetOSs: []*string{
							to.Ptr("Windows 10 2004"),
							to.Ptr("Windows 10 1903")},
					}},
				TestTypes: []*armtestbase.TestType{
					to.Ptr(armtestbase.TestTypeOutOfBoxTest)},
				Tests: []*armtestbase.Test{
					{
						IsActive:            to.Ptr(true),
						TestType:            to.Ptr(armtestbase.TestTypeOutOfBoxTest),
						ValidationRunStatus: to.Ptr(armtestbase.ValidationRunStatusPassed),
						Commands: []*armtestbase.Command{
							{
								Name:              to.Ptr("Install"),
								Action:            to.Ptr(armtestbase.ActionInstall),
								AlwaysRun:         to.Ptr(true),
								ApplyUpdateBefore: to.Ptr(false),
								Content:           to.Ptr("app/scripts/install/job.ps1"),
								ContentType:       to.Ptr(armtestbase.ContentTypePath),
								MaxRunTime:        to.Ptr[int32](1800),
								RestartAfter:      to.Ptr(true),
								RunAsInteractive:  to.Ptr(true),
								RunElevated:       to.Ptr(true),
							},
							{
								Name:              to.Ptr("Launch"),
								Action:            to.Ptr(armtestbase.ActionLaunch),
								AlwaysRun:         to.Ptr(false),
								ApplyUpdateBefore: to.Ptr(true),
								Content:           to.Ptr("app/scripts/launch/job.ps1"),
								ContentType:       to.Ptr(armtestbase.ContentTypePath),
								MaxRunTime:        to.Ptr[int32](1800),
								RestartAfter:      to.Ptr(false),
								RunAsInteractive:  to.Ptr(true),
								RunElevated:       to.Ptr(true),
							},
							{
								Name:              to.Ptr("Close"),
								Action:            to.Ptr(armtestbase.ActionClose),
								AlwaysRun:         to.Ptr(false),
								ApplyUpdateBefore: to.Ptr(false),
								Content:           to.Ptr("app/scripts/close/job.ps1"),
								ContentType:       to.Ptr(armtestbase.ContentTypePath),
								MaxRunTime:        to.Ptr[int32](1800),
								RestartAfter:      to.Ptr(false),
								RunAsInteractive:  to.Ptr(true),
								RunElevated:       to.Ptr(true),
							},
							{
								Name:              to.Ptr("Uninstall"),
								Action:            to.Ptr(armtestbase.ActionUninstall),
								AlwaysRun:         to.Ptr(true),
								ApplyUpdateBefore: to.Ptr(false),
								Content:           to.Ptr("app/scripts/uninstall/job.ps1"),
								ContentType:       to.Ptr(armtestbase.ContentTypePath),
								MaxRunTime:        to.Ptr[int32](1800),
								RestartAfter:      to.Ptr(false),
								RunAsInteractive:  to.Ptr(true),
								RunElevated:       to.Ptr(true),
							}},
					}},
				ValidationResults: []*armtestbase.PackageValidationResult{
					{
						IsValid:        to.Ptr(true),
						ValidationName: to.Ptr("Syntax Validation"),
					},
					{
						IsValid:        to.Ptr(true),
						ValidationName: to.Ptr("Package Run Validation"),
					}},
				Version: to.Ptr("1.0.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PackageResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PackageResource)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPackages_HardDelete(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageHardDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PackageHardDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewPackagesClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	poller, err := client.BeginHardDelete(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		&armtestbase.PackagesClientBeginHardDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageHardDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageHardDelete.json: %v", err)
	}
}

func TestPackages_GetDownloadURL(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageGetDownloadURL.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PackageGetDownloadURL"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewPackagesClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	res, err := client.GetDownloadURL(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageGetDownloadURL.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.DownloadURLResponse{
			DownloadURL:    to.Ptr("some URL"),
			ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-10T06:00:00Z"); return t }()),
		}
		if !reflect.DeepEqual(exampleRes, res.DownloadURLResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DownloadURLResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageGetDownloadURL.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTestSummaries_List(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestSummariesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TestSummariesList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewTestSummariesClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	pager := client.List("contoso-rg1",
		"contoso-testBaseAccount1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestSummariesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtestbase.TestSummaryListResult{
			Value: []*armtestbase.TestSummaryResource{
				{
					Name: to.Ptr("contoso-package1-38960b32-3541-4cf1-8ccc-fd22774395cc"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/testSummaries"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/testSummaries/contoso-package1-38960b32-3541-4cf1-8ccc-fd22774395cc"),
					Properties: &armtestbase.TestSummaryProperties{
						ApplicationName:    to.Ptr("contoso-package1"),
						ApplicationVersion: to.Ptr("1.0.0"),
						ExecutionStatus:    to.Ptr(armtestbase.ExecutionStatusSucceeded),
						FeatureUpdatesTestSummary: &armtestbase.OSUpdatesTestSummary{
							ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
							Grade:           to.Ptr(armtestbase.GradePass),
							OSUpdateTestSummaries: []*armtestbase.OSUpdateTestSummary{
								{
									BuildVersion:    to.Ptr("513"),
									ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
									Grade:           to.Ptr(armtestbase.GradePass),
									OSName:          to.Ptr("Windows 10 1909"),
									ReleaseName:     to.Ptr("2020.12.B"),
									TestRunTime:     to.Ptr("00:43:21"),
									TestStatus:      to.Ptr(armtestbase.TestStatusCompleted),
									TestType:        to.Ptr("OutOfBoxTest"),
								},
								{
									BuildVersion:    to.Ptr("765"),
									ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
									Grade:           to.Ptr(armtestbase.GradePass),
									OSName:          to.Ptr("Windows 10 1903"),
									ReleaseName:     to.Ptr("2020.11.B"),
									TestRunTime:     to.Ptr("00:13:28"),
									TestStatus:      to.Ptr(armtestbase.TestStatusCompleted),
									TestType:        to.Ptr("OutOfBoxTest"),
								},
								{
									BuildVersion:    to.Ptr("313"),
									ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
									Grade:           to.Ptr(armtestbase.GradePass),
									OSName:          to.Ptr("Windows 10 1809"),
									ReleaseName:     to.Ptr("2020.11.B"),
									TestRunTime:     to.Ptr("00:42:08"),
									TestStatus:      to.Ptr(armtestbase.TestStatusCompleted),
									TestType:        to.Ptr("OutOfBoxTest"),
								}},
							TestRunTime: to.Ptr("00:33:21"),
							TestStatus:  to.Ptr(armtestbase.TestStatusCompleted),
						},
						Grade:     to.Ptr(armtestbase.GradePass),
						PackageID: to.Ptr("57199102-9738-42e0-9fec-db7709d62a71"),
						SecurityUpdatesTestSummary: &armtestbase.OSUpdatesTestSummary{
							ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
							Grade:           to.Ptr(armtestbase.GradePass),
							OSUpdateTestSummaries: []*armtestbase.OSUpdateTestSummary{
								{
									BuildVersion:    to.Ptr("513"),
									ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
									Grade:           to.Ptr(armtestbase.GradePass),
									OSName:          to.Ptr("Windows 10 1909"),
									ReleaseName:     to.Ptr("2020.12.B"),
									TestRunTime:     to.Ptr("00:43:21"),
									TestStatus:      to.Ptr(armtestbase.TestStatusCompleted),
									TestType:        to.Ptr("OutOfBoxTest"),
								},
								{
									BuildVersion:    to.Ptr("765"),
									ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
									Grade:           to.Ptr(armtestbase.GradePass),
									OSName:          to.Ptr("Windows 10 1903"),
									ReleaseName:     to.Ptr("2020.11.B"),
									TestRunTime:     to.Ptr("00:13:28"),
									TestStatus:      to.Ptr(armtestbase.TestStatusCompleted),
									TestType:        to.Ptr("OutOfBoxTest"),
								},
								{
									BuildVersion:    to.Ptr("313"),
									ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
									Grade:           to.Ptr(armtestbase.GradePass),
									OSName:          to.Ptr("Windows 10 1809"),
									ReleaseName:     to.Ptr("2020.11.B"),
									TestRunTime:     to.Ptr("00:42:08"),
									TestStatus:      to.Ptr(armtestbase.TestStatusCompleted),
									TestType:        to.Ptr("OutOfBoxTest"),
								}},
							TestRunTime: to.Ptr("00:43:21"),
							TestStatus:  to.Ptr(armtestbase.TestStatusCompleted),
						},
						TestRunTime:   to.Ptr("00:43:21"),
						TestStatus:    to.Ptr(armtestbase.TestStatusCompleted),
						TestSummaryID: to.Ptr("38960b32-3541-4cf1-8ccc-fd22774395cc"),
					},
				},
				{
					Name: to.Ptr("contoso-package2-096bffb5-5d3d-4305-a66a-953372ed6e88"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/testSummaries"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/testSummaries/contoso-package2-096bffb5-5d3d-4305-a66a-953372ed6e88"),
					Properties: &armtestbase.TestSummaryProperties{
						ApplicationName:    to.Ptr("contoso-package2"),
						ApplicationVersion: to.Ptr("1.0.0"),
						ExecutionStatus:    to.Ptr(armtestbase.ExecutionStatusSucceeded),
						FeatureUpdatesTestSummary: &armtestbase.OSUpdatesTestSummary{
							ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
							Grade:           to.Ptr(armtestbase.GradePass),
							OSUpdateTestSummaries: []*armtestbase.OSUpdateTestSummary{
								{
									BuildVersion:    to.Ptr("513"),
									ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
									Grade:           to.Ptr(armtestbase.GradePass),
									OSName:          to.Ptr("Windows 10 1909"),
									ReleaseName:     to.Ptr("2020.12.B"),
									TestRunTime:     to.Ptr("00:43:21"),
									TestStatus:      to.Ptr(armtestbase.TestStatusCompleted),
									TestType:        to.Ptr("FunctionalTest"),
								},
								{
									BuildVersion:    to.Ptr("765"),
									ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
									Grade:           to.Ptr(armtestbase.GradePass),
									OSName:          to.Ptr("Windows 10 1903"),
									ReleaseName:     to.Ptr("2020.11.B"),
									TestRunTime:     to.Ptr("00:13:28"),
									TestStatus:      to.Ptr(armtestbase.TestStatusCompleted),
									TestType:        to.Ptr("FunctionalTest"),
								},
								{
									BuildVersion:    to.Ptr("313"),
									ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
									Grade:           to.Ptr(armtestbase.GradePass),
									OSName:          to.Ptr("Windows 10 1809"),
									ReleaseName:     to.Ptr("2020.11.B"),
									TestRunTime:     to.Ptr("00:42:08"),
									TestStatus:      to.Ptr(armtestbase.TestStatusCompleted),
									TestType:        to.Ptr("FunctionalTest"),
								}},
							TestRunTime: to.Ptr("00:33:21"),
							TestStatus:  to.Ptr(armtestbase.TestStatusCompleted),
						},
						Grade:     to.Ptr(armtestbase.GradePass),
						PackageID: to.Ptr("b5ed1bcc-e74c-40d8-82f2-1773f616f93e"),
						SecurityUpdatesTestSummary: &armtestbase.OSUpdatesTestSummary{
							ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
							Grade:           to.Ptr(armtestbase.GradePass),
							OSUpdateTestSummaries: []*armtestbase.OSUpdateTestSummary{
								{
									BuildVersion:    to.Ptr("513"),
									ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
									Grade:           to.Ptr(armtestbase.GradePass),
									OSName:          to.Ptr("Windows 10 1909"),
									ReleaseName:     to.Ptr("2020.12.B"),
									TestRunTime:     to.Ptr("00:43:21"),
									TestStatus:      to.Ptr(armtestbase.TestStatusCompleted),
									TestType:        to.Ptr("FunctionalTest"),
								},
								{
									BuildVersion:    to.Ptr("765"),
									ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
									Grade:           to.Ptr(armtestbase.GradePass),
									OSName:          to.Ptr("Windows 10 1903"),
									ReleaseName:     to.Ptr("2020.11.B"),
									TestRunTime:     to.Ptr("00:13:28"),
									TestStatus:      to.Ptr(armtestbase.TestStatusCompleted),
									TestType:        to.Ptr("FunctionalTest"),
								},
								{
									BuildVersion:    to.Ptr("313"),
									ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
									Grade:           to.Ptr(armtestbase.GradePass),
									OSName:          to.Ptr("Windows 10 1809"),
									ReleaseName:     to.Ptr("2020.11.B"),
									TestRunTime:     to.Ptr("00:42:08"),
									TestStatus:      to.Ptr(armtestbase.TestStatusCompleted),
									TestType:        to.Ptr("FunctionalTest"),
								}},
							TestRunTime: to.Ptr("00:43:21"),
							TestStatus:  to.Ptr(armtestbase.TestStatusCompleted),
						},
						TestRunTime:   to.Ptr("00:43:21"),
						TestStatus:    to.Ptr(armtestbase.TestStatusCompleted),
						TestSummaryID: to.Ptr("096bffb5-5d3d-4305-a66a-953372ed6e88"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TestSummaryListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TestSummaryListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestSummariesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTestSummaries_Get(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestSummaryGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TestSummaryGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewTestSummariesClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	res, err := client.Get(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2-096bffb5-5d3d-4305-a66a-953372ed6e88",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestSummaryGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.TestSummaryResource{
			Name: to.Ptr("contoso-package2-096bffb5-5d3d-4305-a66a-953372ed6e88"),
			Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/testSummaries"),
			ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/testSummaries/contoso-package2-096bffb5-5d3d-4305-a66a-953372ed6e88"),
			Properties: &armtestbase.TestSummaryProperties{
				ApplicationName:    to.Ptr("contoso-package2"),
				ApplicationVersion: to.Ptr("1.0.0"),
				ExecutionStatus:    to.Ptr(armtestbase.ExecutionStatusSucceeded),
				FeatureUpdatesTestSummary: &armtestbase.OSUpdatesTestSummary{
					ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
					Grade:           to.Ptr(armtestbase.GradePass),
					OSUpdateTestSummaries: []*armtestbase.OSUpdateTestSummary{
						{
							BuildVersion:    to.Ptr("513"),
							ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
							Grade:           to.Ptr(armtestbase.GradePass),
							OSName:          to.Ptr("Windows 10 1909"),
							ReleaseName:     to.Ptr("2020.12.B"),
							TestRunTime:     to.Ptr("00:43:21"),
							TestStatus:      to.Ptr(armtestbase.TestStatusCompleted),
							TestType:        to.Ptr("OutOfBoxTest"),
						},
						{
							BuildVersion:    to.Ptr("765"),
							ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
							Grade:           to.Ptr(armtestbase.GradePass),
							OSName:          to.Ptr("Windows 10 1903"),
							ReleaseName:     to.Ptr("2020.11.B"),
							TestRunTime:     to.Ptr("00:13:28"),
							TestStatus:      to.Ptr(armtestbase.TestStatusCompleted),
							TestType:        to.Ptr("OutOfBoxTest"),
						},
						{
							BuildVersion:    to.Ptr("313"),
							ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
							Grade:           to.Ptr(armtestbase.GradePass),
							OSName:          to.Ptr("Windows 10 1809"),
							ReleaseName:     to.Ptr("2020.11.B"),
							TestRunTime:     to.Ptr("00:42:08"),
							TestStatus:      to.Ptr(armtestbase.TestStatusCompleted),
							TestType:        to.Ptr("OutOfBoxTest"),
						}},
					TestRunTime: to.Ptr("00:33:21"),
					TestStatus:  to.Ptr(armtestbase.TestStatusCompleted),
				},
				Grade:     to.Ptr(armtestbase.GradePass),
				PackageID: to.Ptr("b5ed1bcc-e74c-40d8-82f2-1773f616f93e"),
				SecurityUpdatesTestSummary: &armtestbase.OSUpdatesTestSummary{
					ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
					Grade:           to.Ptr(armtestbase.GradePass),
					OSUpdateTestSummaries: []*armtestbase.OSUpdateTestSummary{
						{
							BuildVersion:    to.Ptr("513"),
							ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
							Grade:           to.Ptr(armtestbase.GradePass),
							OSName:          to.Ptr("Windows 10 1909"),
							ReleaseName:     to.Ptr("2020.12.B"),
							TestRunTime:     to.Ptr("00:43:21"),
							TestStatus:      to.Ptr(armtestbase.TestStatusCompleted),
							TestType:        to.Ptr("OutOfBoxTest"),
						},
						{
							BuildVersion:    to.Ptr("765"),
							ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
							Grade:           to.Ptr(armtestbase.GradePass),
							OSName:          to.Ptr("Windows 10 1903"),
							ReleaseName:     to.Ptr("2020.11.B"),
							TestRunTime:     to.Ptr("00:13:28"),
							TestStatus:      to.Ptr(armtestbase.TestStatusCompleted),
							TestType:        to.Ptr("OutOfBoxTest"),
						},
						{
							BuildVersion:    to.Ptr("313"),
							ExecutionStatus: to.Ptr(armtestbase.ExecutionStatusSucceeded),
							Grade:           to.Ptr(armtestbase.GradePass),
							OSName:          to.Ptr("Windows 10 1809"),
							ReleaseName:     to.Ptr("2020.11.B"),
							TestRunTime:     to.Ptr("00:42:08"),
							TestStatus:      to.Ptr(armtestbase.TestStatusCompleted),
							TestType:        to.Ptr("OutOfBoxTest"),
						}},
					TestRunTime: to.Ptr("00:43:21"),
					TestStatus:  to.Ptr(armtestbase.TestStatusCompleted),
				},
				TestRunTime:   to.Ptr("00:43:21"),
				TestStatus:    to.Ptr(armtestbase.TestStatusCompleted),
				TestSummaryID: to.Ptr("096bffb5-5d3d-4305-a66a-953372ed6e88"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TestSummaryResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TestSummaryResource)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestSummaryGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTestResults_List(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestResultsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TestResultsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewTestResultsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	pager := client.List("contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		armtestbase.OsUpdateTypeSecurityUpdate,
		&armtestbase.TestResultsClientListOptions{Filter: to.Ptr("osName eq 'Windows 10 2004' and releaseName eq '2020.11B'")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestResultsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtestbase.TestResultListResult{
			Value: []*armtestbase.TestResultResource{
				{
					Name: to.Ptr("Windows-10-2004-8e8e3200-284b-4a99-8c30-cb46c54d4c1e"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/packages/testResults"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2/testResults/Windows-10-2004-8e8e3200-284b-4a99-8c30-cb46c54d4c1e"),
					Properties: &armtestbase.TestResultProperties{
						AnalysisSummaries: []*armtestbase.TestResultAnalysisSummary{
							{
								Name:           to.Ptr("Memory Regression Analysis Result"),
								AnalysisStatus: to.Ptr(armtestbase.AnalysisStatusSucceeded),
								Grade:          to.Ptr(armtestbase.GradePass),
							},
							{
								Name:           to.Ptr("CPU Regression Analysis Result"),
								AnalysisStatus: to.Ptr(armtestbase.AnalysisStatusSucceeded),
								Grade:          to.Ptr(armtestbase.GradePass),
							},
							{
								Name:           to.Ptr("Memory Utilization Analysis Result"),
								AnalysisStatus: to.Ptr(armtestbase.AnalysisStatusSucceeded),
								Grade:          to.Ptr(armtestbase.GradePass),
							},
							{
								Name:           to.Ptr("CPU Utilization Analysis Result"),
								AnalysisStatus: to.Ptr(armtestbase.AnalysisStatusSucceeded),
								Grade:          to.Ptr(armtestbase.GradePass),
							}},
						ApplicationName:         to.Ptr("contoso-package2"),
						ApplicationVersion:      to.Ptr("1.0.0"),
						BaselineTestResultID:    to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2/testResults/anotherId"),
						BuildRevision:           to.Ptr("478"),
						ExecutionStatus:         to.Ptr(armtestbase.ExecutionStatusSucceeded),
						Grade:                   to.Ptr(armtestbase.GradePass),
						IsDownloadDataAvailable: to.Ptr(true),
						KbNumber:                to.Ptr("KB1984839"),
						OSName:                  to.Ptr("Windows 10 2004"),
						PackageID:               to.Ptr("b5ed1bcc-e74c-40d8-82f2-1773f616f93e"),
						PackageVersion:          to.Ptr("3.0.1"),
						ReleaseName:             to.Ptr("2020.11B"),
						ReleaseVersionDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-28T17:30:00Z"); return t }()),
						TestRunTime:             to.Ptr("00:21:30"),
						TestStatus:              to.Ptr(armtestbase.TestStatusCompleted),
						TestType:                to.Ptr("Out of box test"),
					},
				},
				{
					Name: to.Ptr("Windows-10-2004-d19baae0-9ab4-432b-a752-878343fa4481"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/packages/testResults"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2/testResults/Windows-10-2004-d19baae0-9ab4-432b-a752-878343fa4481"),
					Properties: &armtestbase.TestResultProperties{
						AnalysisSummaries: []*armtestbase.TestResultAnalysisSummary{
							{
								Name:           to.Ptr("Memory Regression Analysis Result"),
								AnalysisStatus: to.Ptr(armtestbase.AnalysisStatusNotAvailable),
								Grade:          to.Ptr(armtestbase.GradeNotAvailable),
							},
							{
								Name:           to.Ptr("CPU Regression Analysis Result"),
								AnalysisStatus: to.Ptr(armtestbase.AnalysisStatusNotAvailable),
								Grade:          to.Ptr(armtestbase.GradeNotAvailable),
							},
							{
								Name:           to.Ptr("Memory Utilization Analysis Result"),
								AnalysisStatus: to.Ptr(armtestbase.AnalysisStatusNotAvailable),
								Grade:          to.Ptr(armtestbase.GradeNotAvailable),
							},
							{
								Name:           to.Ptr("CPU Utilization Analysis Result"),
								AnalysisStatus: to.Ptr(armtestbase.AnalysisStatusNotAvailable),
								Grade:          to.Ptr(armtestbase.GradeNotAvailable),
							}},
						ApplicationName:         to.Ptr("contoso-package2"),
						ApplicationVersion:      to.Ptr("1.0.0"),
						BaselineTestResultID:    to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2/testResults/anotherId"),
						BuildRevision:           to.Ptr("309"),
						ExecutionStatus:         to.Ptr(armtestbase.ExecutionStatusFailed),
						Grade:                   to.Ptr(armtestbase.GradeFail),
						IsDownloadDataAvailable: to.Ptr(false),
						KbNumber:                to.Ptr("KB1784831"),
						OSName:                  to.Ptr("Windows 10 2004"),
						PackageID:               to.Ptr("b5ed1bcc-e74c-40d8-82f2-1773f616f93e"),
						PackageVersion:          to.Ptr("3.0.1"),
						ReleaseName:             to.Ptr("2020.11B"),
						ReleaseVersionDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-28T17:30:00Z"); return t }()),
						TestRunTime:             to.Ptr("01:00:00"),
						TestStatus:              to.Ptr(armtestbase.TestStatusTestFailure),
						TestType:                to.Ptr("Out of box test"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TestResultListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TestResultListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestResultsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTestResults_Get(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestResultGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TestResultGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewTestResultsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	res, err := client.Get(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		"Windows-10-1909-99b1f80d-03a9-4148-997f-806ba5bac8e0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestResultGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.TestResultResource{
			Name: to.Ptr("Windows-10-1909-99b1f80d-03a9-4148-997f-806ba5bac8e0"),
			Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/packages/testResults"),
			ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2/testResults/Windows-10-1909-99b1f80d-03a9-4148-997f-806ba5bac8e0"),
			Properties: &armtestbase.TestResultProperties{
				AnalysisSummaries: []*armtestbase.TestResultAnalysisSummary{
					{
						Name:           to.Ptr("Memory Regression Analysis Result"),
						AnalysisStatus: to.Ptr(armtestbase.AnalysisStatusSucceeded),
						Grade:          to.Ptr(armtestbase.GradePass),
					},
					{
						Name:           to.Ptr("CPU Regression Analysis Result"),
						AnalysisStatus: to.Ptr(armtestbase.AnalysisStatusSucceeded),
						Grade:          to.Ptr(armtestbase.GradePass),
					},
					{
						Name:           to.Ptr("Memory Utilization Analysis Result"),
						AnalysisStatus: to.Ptr(armtestbase.AnalysisStatusSucceeded),
						Grade:          to.Ptr(armtestbase.GradePass),
					},
					{
						Name:           to.Ptr("CPU Utilization Analysis Result"),
						AnalysisStatus: to.Ptr(armtestbase.AnalysisStatusSucceeded),
						Grade:          to.Ptr(armtestbase.GradePass),
					}},
				ApplicationName:         to.Ptr("contoso-package2"),
				ApplicationVersion:      to.Ptr("1.0.0"),
				BaselineTestResultID:    to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2/testResults/anotherId"),
				BuildRevision:           to.Ptr("505"),
				ExecutionStatus:         to.Ptr(armtestbase.ExecutionStatusSucceeded),
				Grade:                   to.Ptr(armtestbase.GradePass),
				IsDownloadDataAvailable: to.Ptr(true),
				KbNumber:                to.Ptr("KB1984839"),
				OSName:                  to.Ptr("Windows 10 1909"),
				PackageID:               to.Ptr("b5ed1bcc-e74c-40d8-82f2-1773f616f93e"),
				PackageVersion:          to.Ptr("3.0.1"),
				ReleaseName:             to.Ptr("2020.12B"),
				ReleaseVersionDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:30:00Z"); return t }()),
				TestRunTime:             to.Ptr("00:21:30"),
				TestStatus:              to.Ptr(armtestbase.TestStatusCompleted),
				TestType:                to.Ptr("Out of box test"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TestResultResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TestResultResource)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestResultGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTestResults_GetDownloadURL(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestResultGetDownloadURL.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TestResultGetDownloadURL"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewTestResultsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	res, err := client.GetDownloadURL(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		"Windows-10-1909-99b1f80d-03a9-4148-997f-806ba5bac8e0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestResultGetDownloadURL.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.DownloadURLResponse{
			DownloadURL:    to.Ptr("test result download URL"),
			ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-10T06:00:00Z"); return t }()),
		}
		if !reflect.DeepEqual(exampleRes, res.DownloadURLResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DownloadURLResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestResultGetDownloadURL.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTestResults_GetVideoDownloadURL(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestResultGetVideoDownloadURL.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TestResultGetVideoDownloadURL"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewTestResultsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	res, err := client.GetVideoDownloadURL(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		"Windows-10-1909-99b1f80d-03a9-4148-997f-806ba5bac8e0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestResultGetVideoDownloadURL.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.DownloadURLResponse{
			DownloadURL:    to.Ptr("test result video download URL"),
			ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-10T06:00:00Z"); return t }()),
		}
		if !reflect.DeepEqual(exampleRes, res.DownloadURLResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DownloadURLResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/TestResultGetVideoDownloadURL.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOSUpdates_List(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/OSUpdatesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OSUpdatesList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewOSUpdatesClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	pager := client.List("contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		armtestbase.OsUpdateTypeSecurityUpdate,
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/OSUpdatesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtestbase.OSUpdateListResult{
			Value: []*armtestbase.OSUpdateResource{
				{
					Name: to.Ptr("Windows-10-2004-2020-12-B-505"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/packages/osUpdates"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2/osUpdates/Windows-10-2004-2020-12-B-505"),
					Properties: &armtestbase.OSUpdateProperties{
						Type:          to.Ptr(armtestbase.TypeSecurityUpdate),
						BuildRevision: to.Ptr("505"),
						OSName:        to.Ptr("Windows 10 2004"),
						Release:       to.Ptr("2020.12B"),
					},
				},
				{
					Name: to.Ptr("Windows-10-2004-2020-10-B-413"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/packages/osUpdates"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2/osUpdates/Windows-10-2004-2020-10-B-413"),
					Properties: &armtestbase.OSUpdateProperties{
						Type:          to.Ptr(armtestbase.TypeSecurityUpdate),
						BuildRevision: to.Ptr("413"),
						OSName:        to.Ptr("Windows 10 2004"),
						Release:       to.Ptr("2020.10B"),
					},
				},
				{
					Name: to.Ptr("Windows-10-2004-2020-08-B-226"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/packages/osUpdates"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2/osUpdates/Windows-10-2004-2020-08-B-226"),
					Properties: &armtestbase.OSUpdateProperties{
						Type:          to.Ptr(armtestbase.TypeSecurityUpdate),
						BuildRevision: to.Ptr("226"),
						OSName:        to.Ptr("Windows 10 2004"),
						Release:       to.Ptr("2020.08B"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OSUpdateListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OSUpdateListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/OSUpdatesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOSUpdates_Get(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/OSUpdateGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OSUpdateGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewOSUpdatesClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	res, err := client.Get(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		"Windows-10-2004-2020-12-B-505",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/OSUpdateGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.OSUpdateResource{
			Name: to.Ptr("Windows-10-2004-2020-12-B-505"),
			Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/packages/osUpdates"),
			ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2/osUpdates/Windows-10-2004-2020-12-B-505"),
			Properties: &armtestbase.OSUpdateProperties{
				Type:          to.Ptr(armtestbase.TypeSecurityUpdate),
				BuildRevision: to.Ptr("505"),
				OSName:        to.Ptr("Windows 10 2004"),
				Release:       to.Ptr("2020.12B"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OSUpdateResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OSUpdateResource)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/OSUpdateGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFavoriteProcesses_List(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/FavoriteProcessesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FavoriteProcessesList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewFavoriteProcessesClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	pager := client.List("contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/FavoriteProcessesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtestbase.FavoriteProcessListResult{
			Value: []*armtestbase.FavoriteProcessResource{
				{
					Name: to.Ptr("testAppProcess"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/packages/favoriteProcesses"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2/favoriteProcesses/testAppProcess"),
					Properties: &armtestbase.FavoriteProcessProperties{
						ActualProcessName: to.Ptr("testApp&.exe"),
					},
				},
				{
					Name: to.Ptr("anotherProcess"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/packages/favoriteProcesses"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2/favoriteProcesses/anotherProcess"),
					Properties: &armtestbase.FavoriteProcessProperties{
						ActualProcessName: to.Ptr("anotherProcess&&.exe"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FavoriteProcessListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FavoriteProcessListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/FavoriteProcessesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFavoriteProcesses_Create(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/FavoriteProcessCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FavoriteProcessCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewFavoriteProcessesClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	res, err := client.Create(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		"testAppProcess",
		armtestbase.FavoriteProcessResource{
			Properties: &armtestbase.FavoriteProcessProperties{
				ActualProcessName: to.Ptr("testApp&.exe"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/FavoriteProcessCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.FavoriteProcessResource{
			Name: to.Ptr("testAppProcess"),
			Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/packages/favoriteProcesses"),
			ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2/favoriteProcesses/testAppProcess"),
			Properties: &armtestbase.FavoriteProcessProperties{
				ActualProcessName: to.Ptr("testApp&.exe"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FavoriteProcessResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FavoriteProcessResource)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/FavoriteProcessCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFavoriteProcesses_Delete(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/FavoriteProcessDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FavoriteProcessDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewFavoriteProcessesClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	_, err := client.Delete(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		"testAppProcess",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/FavoriteProcessDelete.json: %v", err)
	}
}

func TestFavoriteProcesses_Get(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/FavoriteProcessGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FavoriteProcessGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewFavoriteProcessesClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	res, err := client.Get(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		"testAppProcess",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/FavoriteProcessGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.FavoriteProcessResource{
			Name: to.Ptr("testAppProcess"),
			Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/packages/favoriteProcesses"),
			ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2/favoriteProcesses/testAppProcess"),
			Properties: &armtestbase.FavoriteProcessProperties{
				ActualProcessName: to.Ptr("testApp&.exe"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FavoriteProcessResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FavoriteProcessResource)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/FavoriteProcessGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAnalysisResults_List(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CPURegressionAnalysisResultsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CPURegressionAnalysisResultsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewAnalysisResultsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	pager := client.List("contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		"Windows-10-1909-Test-Id",
		armtestbase.AnalysisResultTypeCPURegression,
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CPURegressionAnalysisResultsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtestbase.AnalysisResultListResult{
			Value: []*armtestbase.AnalysisResultSingletonResource{
				{
					Name: to.Ptr("cpuRegression"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/packages/testResults/analysisResults"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2/testResults/Windows-10-1909-Test-Id/analysisResults/cpuRegression"),
					Properties: &armtestbase.CPURegressionResultSingletonResourceProperties{
						AnalysisResultType: to.Ptr(armtestbase.AnalysisResultTypeCPURegression),
						Grade:              to.Ptr(armtestbase.GradePass),
						CPURegressionResults: []*armtestbase.RegressionResult{
							{
								Diff:        to.Ptr[float64](0.1),
								FileName:    to.Ptr("testApp.exe"),
								Grade:       to.Ptr(armtestbase.GradePass),
								IsRegressed: to.Ptr(false),
								Details:     to.Ptr("Some details of testApp"),
							},
							{
								Diff:        to.Ptr[float64](0.15),
								FileName:    to.Ptr("dependencies.exe"),
								Grade:       to.Ptr(armtestbase.GradePass),
								IsRegressed: to.Ptr(false),
								Details:     to.Ptr("Some details of dependencies"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AnalysisResultListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AnalysisResultListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CPURegressionAnalysisResultsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CPUUtilizationAnalysisResultsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CPUUtilizationAnalysisResultsList"},
	})
	client = armtestbase.NewAnalysisResultsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	pager = client.List("contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		"Windows-10-1909-Test-Id",
		armtestbase.AnalysisResultTypeCPUUtilization,
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CPUUtilizationAnalysisResultsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtestbase.AnalysisResultListResult{
			Value: []*armtestbase.AnalysisResultSingletonResource{
				{
					Name: to.Ptr("cpuUtilization"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/packages/testResults/analysisResults"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2/testResults/Windows-10-1909-Test-Id/analysisResults/cpuUtilization"),
					Properties: &armtestbase.CPUUtilizationResultSingletonResourceProperties{
						AnalysisResultType: to.Ptr(armtestbase.AnalysisResultTypeCPUUtilization),
						Grade:              to.Ptr(armtestbase.GradePass),
						CPUUtilizationResults: []*armtestbase.UtilizationResult{
							{
								LowerBound: &armtestbase.UtilizationBound{
									Percentile: to.Ptr[float64](50),
									Value:      to.Ptr[float64](20),
								},
								Process: to.Ptr("app.exe"),
								UpperBound: &armtestbase.UtilizationBound{
									Percentile: to.Ptr[float64](90),
									Value:      to.Ptr[float64](60),
								},
								Utilization: []*armtestbase.UtilizationEntry{
									{
										Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:30:00Z"); return t }()),
										Value:     to.Ptr[float64](34.7),
									},
									{
										Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:31:00Z"); return t }()),
										Value:     to.Ptr[float64](35.9),
									},
									{
										Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:32:00Z"); return t }()),
										Value:     to.Ptr[float64](27.1),
									},
									{
										Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:33:00Z"); return t }()),
										Value:     to.Ptr[float64](49.8),
									},
									{
										Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:34:00Z"); return t }()),
										Value:     to.Ptr[float64](45.6),
									}},
							},
							{
								LowerBound: &armtestbase.UtilizationBound{
									Percentile: to.Ptr[float64](50),
									Value:      to.Ptr[float64](20),
								},
								Process: to.Ptr("anotherProcess.exe"),
								UpperBound: &armtestbase.UtilizationBound{
									Percentile: to.Ptr[float64](90),
									Value:      to.Ptr[float64](60),
								},
								Utilization: []*armtestbase.UtilizationEntry{
									{
										Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:30:00Z"); return t }()),
										Value:     to.Ptr[float64](34.7),
									},
									{
										Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:31:00Z"); return t }()),
										Value:     to.Ptr[float64](35.9),
									},
									{
										Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:32:00Z"); return t }()),
										Value:     to.Ptr[float64](27.1),
									},
									{
										Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:33:00Z"); return t }()),
										Value:     to.Ptr[float64](49.8),
									},
									{
										Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:34:00Z"); return t }()),
										Value:     to.Ptr[float64](45.6),
									}},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AnalysisResultListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AnalysisResultListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CPUUtilizationAnalysisResultsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/MemoryRegressionAnalysisResultsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MemoryRegressionAnalysisResultsList"},
	})
	client = armtestbase.NewAnalysisResultsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	pager = client.List("contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		"Windows-10-1909-Test-Id",
		armtestbase.AnalysisResultTypeMemoryRegression,
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/MemoryRegressionAnalysisResultsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtestbase.AnalysisResultListResult{
			Value: []*armtestbase.AnalysisResultSingletonResource{
				{
					Name: to.Ptr("memoryRegression"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/packages/testResults/analysisResults"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2/testResults/Windows-10-1909-Test-Id/analysisResults/memoryRegression"),
					Properties: &armtestbase.MemoryRegressionResultSingletonResourceProperties{
						AnalysisResultType: to.Ptr(armtestbase.AnalysisResultTypeMemoryRegression),
						Grade:              to.Ptr(armtestbase.GradePass),
						MemoryRegressionResults: []*armtestbase.RegressionResult{
							{
								Diff:        to.Ptr[float64](0.1),
								FileName:    to.Ptr("testApp.exe"),
								Grade:       to.Ptr(armtestbase.GradePass),
								IsRegressed: to.Ptr(false),
								Details:     to.Ptr("Some details of testApp"),
							},
							{
								Diff:        to.Ptr[float64](0.15),
								FileName:    to.Ptr("dependencies.exe"),
								Grade:       to.Ptr(armtestbase.GradePass),
								IsRegressed: to.Ptr(false),
								Details:     to.Ptr("Some details of dependencies"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AnalysisResultListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AnalysisResultListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/MemoryRegressionAnalysisResultsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/MemoryUtilizationAnalysisResultsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MemoryUtilizationAnalysisResultsList"},
	})
	client = armtestbase.NewAnalysisResultsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	pager = client.List("contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		"Windows-10-1909-Test-Id",
		armtestbase.AnalysisResultTypeMemoryUtilization,
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/MemoryUtilizationAnalysisResultsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtestbase.AnalysisResultListResult{
			Value: []*armtestbase.AnalysisResultSingletonResource{
				{
					Name: to.Ptr("cpuUtilization"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/packages/testResults/analysisResults"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2/testResults/Windows-10-1909-Test-Id/analysisResults/memoryUtilization"),
					Properties: &armtestbase.MemoryUtilizationResultSingletonResourceProperties{
						AnalysisResultType: to.Ptr(armtestbase.AnalysisResultTypeMemoryUtilization),
						Grade:              to.Ptr(armtestbase.GradePass),
						MemoryUtilizationResults: []*armtestbase.UtilizationResult{
							{
								LowerBound: &armtestbase.UtilizationBound{
									Percentile: to.Ptr[float64](50),
									Value:      to.Ptr[float64](20),
								},
								Process: to.Ptr("app.exe"),
								UpperBound: &armtestbase.UtilizationBound{
									Percentile: to.Ptr[float64](90),
									Value:      to.Ptr[float64](60),
								},
								Utilization: []*armtestbase.UtilizationEntry{
									{
										Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:30:00Z"); return t }()),
										Value:     to.Ptr[float64](34.7),
									},
									{
										Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:31:00Z"); return t }()),
										Value:     to.Ptr[float64](35.9),
									},
									{
										Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:32:00Z"); return t }()),
										Value:     to.Ptr[float64](27.1),
									},
									{
										Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:33:00Z"); return t }()),
										Value:     to.Ptr[float64](49.8),
									},
									{
										Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:34:00Z"); return t }()),
										Value:     to.Ptr[float64](45.6),
									}},
							},
							{
								LowerBound: &armtestbase.UtilizationBound{
									Percentile: to.Ptr[float64](50),
									Value:      to.Ptr[float64](20),
								},
								Process: to.Ptr("anotherProcess.exe"),
								UpperBound: &armtestbase.UtilizationBound{
									Percentile: to.Ptr[float64](90),
									Value:      to.Ptr[float64](60),
								},
								Utilization: []*armtestbase.UtilizationEntry{
									{
										Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:30:00Z"); return t }()),
										Value:     to.Ptr[float64](34.7),
									},
									{
										Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:31:00Z"); return t }()),
										Value:     to.Ptr[float64](35.9),
									},
									{
										Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:32:00Z"); return t }()),
										Value:     to.Ptr[float64](27.1),
									},
									{
										Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:33:00Z"); return t }()),
										Value:     to.Ptr[float64](49.8),
									},
									{
										Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:34:00Z"); return t }()),
										Value:     to.Ptr[float64](45.6),
									}},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AnalysisResultListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AnalysisResultListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/MemoryUtilizationAnalysisResultsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAnalysisResults_Get(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CPURegressionAnalysisResultGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CPURegressionAnalysisResultGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewAnalysisResultsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	res, err := client.Get(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		"Windows-10-1909-Test-Id",
		armtestbase.AnalysisResultNameCPURegression,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CPURegressionAnalysisResultGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.AnalysisResultSingletonResource{
			Name: to.Ptr("cpuRegression"),
			Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/packages/testResults/analysisResults"),
			ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2/testResults/Windows-10-1909-Test-Id/analysisResults/cpuRegression"),
			Properties: &armtestbase.CPURegressionResultSingletonResourceProperties{
				AnalysisResultType: to.Ptr(armtestbase.AnalysisResultTypeCPURegression),
				Grade:              to.Ptr(armtestbase.GradePass),
				CPURegressionResults: []*armtestbase.RegressionResult{
					{
						Diff:        to.Ptr[float64](0.1),
						FileName:    to.Ptr("testApp.exe"),
						Grade:       to.Ptr(armtestbase.GradePass),
						IsRegressed: to.Ptr(false),
						Details:     to.Ptr("Some details of testApp"),
					},
					{
						Diff:        to.Ptr[float64](0.15),
						FileName:    to.Ptr("dependencies.exe"),
						Grade:       to.Ptr(armtestbase.GradePass),
						IsRegressed: to.Ptr(false),
						Details:     to.Ptr("Some details of dependencies"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AnalysisResultSingletonResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AnalysisResultSingletonResource)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CPURegressionAnalysisResultGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CPUUtilizationAnalysisResultGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CPUUtilizationAnalysisResultGet"},
	})
	client = armtestbase.NewAnalysisResultsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	res, err = client.Get(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		"Windows-10-1909-Test-Id",
		armtestbase.AnalysisResultNameCPUUtilization,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CPUUtilizationAnalysisResultGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.AnalysisResultSingletonResource{
			Name: to.Ptr("cpuUtilization"),
			Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/packages/testResults/analysisResults"),
			ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2/testResults/Windows-10-1909-Test-Id/analysisResults/cpuUtilization"),
			Properties: &armtestbase.CPUUtilizationResultSingletonResourceProperties{
				AnalysisResultType: to.Ptr(armtestbase.AnalysisResultTypeCPUUtilization),
				Grade:              to.Ptr(armtestbase.GradePass),
				CPUUtilizationResults: []*armtestbase.UtilizationResult{
					{
						LowerBound: &armtestbase.UtilizationBound{
							Percentile: to.Ptr[float64](50),
							Value:      to.Ptr[float64](20),
						},
						Process: to.Ptr("app.exe"),
						UpperBound: &armtestbase.UtilizationBound{
							Percentile: to.Ptr[float64](90),
							Value:      to.Ptr[float64](60),
						},
						Utilization: []*armtestbase.UtilizationEntry{
							{
								Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:30:00Z"); return t }()),
								Value:     to.Ptr[float64](34.7),
							},
							{
								Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:31:00Z"); return t }()),
								Value:     to.Ptr[float64](35.9),
							},
							{
								Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:32:00Z"); return t }()),
								Value:     to.Ptr[float64](27.1),
							},
							{
								Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:33:00Z"); return t }()),
								Value:     to.Ptr[float64](49.8),
							},
							{
								Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:34:00Z"); return t }()),
								Value:     to.Ptr[float64](45.6),
							}},
					},
					{
						LowerBound: &armtestbase.UtilizationBound{
							Percentile: to.Ptr[float64](50),
							Value:      to.Ptr[float64](20),
						},
						Process: to.Ptr("anotherProcess.exe"),
						UpperBound: &armtestbase.UtilizationBound{
							Percentile: to.Ptr[float64](90),
							Value:      to.Ptr[float64](60),
						},
						Utilization: []*armtestbase.UtilizationEntry{
							{
								Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:30:00Z"); return t }()),
								Value:     to.Ptr[float64](34.7),
							},
							{
								Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:31:00Z"); return t }()),
								Value:     to.Ptr[float64](35.9),
							},
							{
								Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:32:00Z"); return t }()),
								Value:     to.Ptr[float64](27.1),
							},
							{
								Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:33:00Z"); return t }()),
								Value:     to.Ptr[float64](49.8),
							},
							{
								Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:34:00Z"); return t }()),
								Value:     to.Ptr[float64](45.6),
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AnalysisResultSingletonResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AnalysisResultSingletonResource)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CPUUtilizationAnalysisResultGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/MemoryRegressionAnalysisResultGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MemoryRegressionAnalysisResultGet"},
	})
	client = armtestbase.NewAnalysisResultsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	res, err = client.Get(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		"Windows-10-1909-Test-Id",
		armtestbase.AnalysisResultNameMemoryRegression,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/MemoryRegressionAnalysisResultGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.AnalysisResultSingletonResource{
			Name: to.Ptr("memoryRegression"),
			Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/packages/testResults/analysisResults"),
			ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2/testResults/Windows-10-1909-Test-Id/analysisResults/memoryRegression"),
			Properties: &armtestbase.MemoryRegressionResultSingletonResourceProperties{
				AnalysisResultType: to.Ptr(armtestbase.AnalysisResultTypeMemoryRegression),
				Grade:              to.Ptr(armtestbase.GradePass),
				MemoryRegressionResults: []*armtestbase.RegressionResult{
					{
						Diff:        to.Ptr[float64](0.1),
						FileName:    to.Ptr("testApp.exe"),
						Grade:       to.Ptr(armtestbase.GradePass),
						IsRegressed: to.Ptr(false),
						Details:     to.Ptr("Some details of testApp"),
					},
					{
						Diff:        to.Ptr[float64](0.15),
						FileName:    to.Ptr("dependencies.exe"),
						Grade:       to.Ptr(armtestbase.GradePass),
						IsRegressed: to.Ptr(false),
						Details:     to.Ptr("Some details of dependencies"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AnalysisResultSingletonResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AnalysisResultSingletonResource)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/MemoryRegressionAnalysisResultGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/MemoryUtilizationAnalysisResultGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MemoryUtilizationAnalysisResultGet"},
	})
	client = armtestbase.NewAnalysisResultsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	res, err = client.Get(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		"contoso-package2",
		"Windows-10-1909-Test-Id",
		armtestbase.AnalysisResultNameMemoryUtilization,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/MemoryUtilizationAnalysisResultGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.AnalysisResultSingletonResource{
			Name: to.Ptr("memoryUtilization"),
			Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/packages/testResults/analysisResults"),
			ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/packages/contoso-package2/testResults/Windows-10-1909-Test-Id/analysisResults/memoryUtilization"),
			Properties: &armtestbase.MemoryUtilizationResultSingletonResourceProperties{
				AnalysisResultType: to.Ptr(armtestbase.AnalysisResultTypeMemoryUtilization),
				Grade:              to.Ptr(armtestbase.GradePass),
				MemoryUtilizationResults: []*armtestbase.UtilizationResult{
					{
						LowerBound: &armtestbase.UtilizationBound{
							Percentile: to.Ptr[float64](50),
							Value:      to.Ptr[float64](20),
						},
						Process: to.Ptr("app.exe"),
						UpperBound: &armtestbase.UtilizationBound{
							Percentile: to.Ptr[float64](90),
							Value:      to.Ptr[float64](60),
						},
						Utilization: []*armtestbase.UtilizationEntry{
							{
								Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:30:00Z"); return t }()),
								Value:     to.Ptr[float64](34.7),
							},
							{
								Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:31:00Z"); return t }()),
								Value:     to.Ptr[float64](35.9),
							},
							{
								Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:32:00Z"); return t }()),
								Value:     to.Ptr[float64](27.1),
							},
							{
								Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:33:00Z"); return t }()),
								Value:     to.Ptr[float64](49.8),
							},
							{
								Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:34:00Z"); return t }()),
								Value:     to.Ptr[float64](45.6),
							}},
					},
					{
						LowerBound: &armtestbase.UtilizationBound{
							Percentile: to.Ptr[float64](50),
							Value:      to.Ptr[float64](20),
						},
						Process: to.Ptr("anotherProcess.exe"),
						UpperBound: &armtestbase.UtilizationBound{
							Percentile: to.Ptr[float64](90),
							Value:      to.Ptr[float64](60),
						},
						Utilization: []*armtestbase.UtilizationEntry{
							{
								Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:30:00Z"); return t }()),
								Value:     to.Ptr[float64](34.7),
							},
							{
								Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:31:00Z"); return t }()),
								Value:     to.Ptr[float64](35.9),
							},
							{
								Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:32:00Z"); return t }()),
								Value:     to.Ptr[float64](27.1),
							},
							{
								Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:33:00Z"); return t }()),
								Value:     to.Ptr[float64](49.8),
							},
							{
								Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-28T17:34:00Z"); return t }()),
								Value:     to.Ptr[float64](45.6),
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AnalysisResultSingletonResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AnalysisResultSingletonResource)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/MemoryUtilizationAnalysisResultGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEmailEvents_List(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/EmailEventsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EmailEventsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewEmailEventsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	pager := client.List("contoso-rg",
		"contoso-testBaseAccount",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/EmailEventsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtestbase.EmailEventListResult{
			Value: []*armtestbase.EmailEventResource{
				{
					Name: to.Ptr("weekly-summary"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/emailEvents"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount/emailEvents/weekly-summary"),
					Properties: &armtestbase.EmailEventProperties{
						DisplayName: to.Ptr("Weekly Summary"),
						EventID:     to.Ptr("weekly-summary"),
						EventName:   to.Ptr("weekly-summary"),
					},
				},
				{
					Name: to.Ptr("daily-summary"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/emailEvents"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount/emailEvents/daily-summary"),
					Properties: &armtestbase.EmailEventProperties{
						DisplayName: to.Ptr("Daily Summary"),
						EventID:     to.Ptr("daily-summary"),
						EventName:   to.Ptr("daily-summary"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EmailEventListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EmailEventListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/EmailEventsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEmailEvents_Get(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/EmailEventGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EmailEventGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewEmailEventsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	res, err := client.Get(ctx,
		"contoso-rg",
		"contoso-testBaseAccount",
		"weekly-summary",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/EmailEventGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.EmailEventResource{
			Name: to.Ptr("weekly-summary"),
			Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/emailEvents"),
			ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount/emailEvents/weekly-summary"),
			Properties: &armtestbase.EmailEventProperties{
				DisplayName: to.Ptr("Weekly Summary"),
				EventID:     to.Ptr("weekly-summary"),
				EventName:   to.Ptr("weekly-summary"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EmailEventResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EmailEventResource)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/EmailEventGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomerEvents_ListByTestBaseAccount(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CustomerEventsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomerEventsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewCustomerEventsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	pager := client.ListByTestBaseAccount("contoso-rg1",
		"contoso-testBaseAccount1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CustomerEventsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtestbase.CustomerEventListResult{
			Value: []*armtestbase.CustomerEventResource{
				{
					Name: to.Ptr("ExecutionFailure"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/customerEvents"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/customerEvents/ExecutionFailure"),
					Properties: &armtestbase.CustomerEventProperties{
						EventName: to.Ptr("ExecutionFailure"),
						Receivers: []*armtestbase.NotificationEventReceiver{
							{
								ReceiverType: to.Ptr("SubscriptionRole"),
								ReceiverValue: &armtestbase.NotificationReceiverValue{
									SubscriptionReceiverValue: &armtestbase.SubscriptionReceiverValue{
										Role:             to.Ptr("Contributor"),
										SubscriptionID:   to.Ptr("test-subscription-id"),
										SubscriptionName: to.Ptr("test-subscription"),
									},
								},
							},
							{
								ReceiverType: to.Ptr("DistributionGroup"),
								ReceiverValue: &armtestbase.NotificationReceiverValue{
									DistributionGroupListReceiverValue: &armtestbase.DistributionGroupListReceiverValue{
										DistributionGroups: []*string{
											to.Ptr("test@microsoft.com")},
									},
								},
							}},
					},
				},
				{
					Name: to.Ptr("WeeklySummary"),
					Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/customerEvents"),
					ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/customerEvents/WeeklySummary"),
					Properties: &armtestbase.CustomerEventProperties{
						EventName: to.Ptr("WeeklySummary"),
						Receivers: []*armtestbase.NotificationEventReceiver{
							{
								ReceiverType: to.Ptr("UserObjects"),
								ReceiverValue: &armtestbase.NotificationReceiverValue{
									UserObjectReceiverValue: &armtestbase.UserObjectReceiverValue{
										UserObjectIDs: []*string{
											to.Ptr("245245245245325"),
											to.Ptr("365365365363565")},
									},
								},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CustomerEventListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CustomerEventListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CustomerEventsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomerEvents_Create(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CustomerEventCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomerEventCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewCustomerEventsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		"WeeklySummary",
		armtestbase.CustomerEventResource{
			Properties: &armtestbase.CustomerEventProperties{
				EventName: to.Ptr("WeeklySummary"),
				Receivers: []*armtestbase.NotificationEventReceiver{
					{
						ReceiverType: to.Ptr("UserObjects"),
						ReceiverValue: &armtestbase.NotificationReceiverValue{
							UserObjectReceiverValue: &armtestbase.UserObjectReceiverValue{
								UserObjectIDs: []*string{
									to.Ptr("245245245245325"),
									to.Ptr("365365365363565")},
							},
						},
					},
					{
						ReceiverType: to.Ptr("DistributionGroup"),
						ReceiverValue: &armtestbase.NotificationReceiverValue{
							DistributionGroupListReceiverValue: &armtestbase.DistributionGroupListReceiverValue{
								DistributionGroups: []*string{
									to.Ptr("test@microsoft.com")},
							},
						},
					}},
			},
		},
		&armtestbase.CustomerEventsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CustomerEventCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CustomerEventCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.CustomerEventResource{
			Name: to.Ptr("WeeklySummary"),
			Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/customerEvents"),
			ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/customerEvents/WeeklySummary"),
			Properties: &armtestbase.CustomerEventProperties{
				EventName: to.Ptr("WeeklySummary"),
				Receivers: []*armtestbase.NotificationEventReceiver{
					{
						ReceiverType: to.Ptr("UserObjects"),
						ReceiverValue: &armtestbase.NotificationReceiverValue{
							UserObjectReceiverValue: &armtestbase.UserObjectReceiverValue{
								UserObjectIDs: []*string{
									to.Ptr("245245245245325"),
									to.Ptr("365365365363565")},
							},
						},
					},
					{
						ReceiverType: to.Ptr("DistributionGroup"),
						ReceiverValue: &armtestbase.NotificationReceiverValue{
							DistributionGroupListReceiverValue: &armtestbase.DistributionGroupListReceiverValue{
								DistributionGroups: []*string{
									to.Ptr("test@microsoft.com")},
							},
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomerEventResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomerEventResource)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CustomerEventCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomerEvents_Delete(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CustomerEventDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomerEventDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewCustomerEventsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		"WeeklySummary",
		&armtestbase.CustomerEventsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CustomerEventDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CustomerEventDelete.json: %v", err)
	}
}

func TestCustomerEvents_Get(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CustomerEventGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomerEventGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewCustomerEventsClient("476f61a4-952c-422a-b4db-568a828f35df", cred, &options)
	res, err := client.Get(ctx,
		"contoso-rg1",
		"contoso-testBaseAccount1",
		"WeeklySummary",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CustomerEventGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtestbase.CustomerEventResource{
			Name: to.Ptr("WeeklySummary"),
			Type: to.Ptr("Microsoft.TestBase/testBaseAccounts/customerEvents"),
			ID:   to.Ptr("/subscriptions/476f61a4-952c-422a-b4db-568a828f35df/resourceGroups/contoso-rg1/providers/Microsoft.TestBase/testBaseAccounts/contoso-testBaseAccount1/customerEvents/WeeklySummary"),
			Properties: &armtestbase.CustomerEventProperties{
				EventName: to.Ptr("WeeklySummary"),
				Receivers: []*armtestbase.NotificationEventReceiver{
					{
						ReceiverType: to.Ptr("UserObjects"),
						ReceiverValue: &armtestbase.NotificationReceiverValue{
							UserObjectReceiverValue: &armtestbase.UserObjectReceiverValue{
								UserObjectIDs: []*string{
									to.Ptr("245245245245325"),
									to.Ptr("365365365363565")},
							},
						},
					},
					{
						ReceiverType: to.Ptr("SubscriptionRole"),
						ReceiverValue: &armtestbase.NotificationReceiverValue{
							SubscriptionReceiverValue: &armtestbase.SubscriptionReceiverValue{
								Role:             to.Ptr("Contributor"),
								SubscriptionID:   to.Ptr("test-subscription-id"),
								SubscriptionName: to.Ptr("test-subscription"),
							},
						},
					},
					{
						ReceiverType: to.Ptr("DistributionGroup"),
						ReceiverValue: &armtestbase.NotificationReceiverValue{
							DistributionGroupListReceiverValue: &armtestbase.DistributionGroupListReceiverValue{
								DistributionGroups: []*string{
									to.Ptr("test@microsoft.com")},
							},
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomerEventResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomerEventResource)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/CustomerEventGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/OperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OperationsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtestbase.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/OperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtestbase.OperationListResult{
			Value: []*armtestbase.Operation{
				{
					Name: to.Ptr("Microsoft.TestBase/testBaseAccounts/read"),
					Display: &armtestbase.OperationDisplay{
						Description: to.Ptr("View the properties of a Test Base Account."),
						Operation:   to.Ptr("View Test Base Account"),
						Provider:    to.Ptr("Microsoft Test Base"),
						Resource:    to.Ptr("Test Base Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.TestBase/testBaseAccounts/write"),
					Display: &armtestbase.OperationDisplay{
						Description: to.Ptr("Create a new Test Base Account or update the properties of an existing Test Base Account."),
						Operation:   to.Ptr("Update Test Base Account"),
						Provider:    to.Ptr("Microsoft Test Base"),
						Resource:    to.Ptr("Test Base Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.TestBase/testBaseAccounts/delete"),
					Display: &armtestbase.OperationDisplay{
						Description: to.Ptr("Delete a Test Base Account."),
						Operation:   to.Ptr("Delete Test Base Account"),
						Provider:    to.Ptr("Microsoft Test Base"),
						Resource:    to.Ptr("Test Base Account"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/OperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
