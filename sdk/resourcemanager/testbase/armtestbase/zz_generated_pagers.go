//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armtestbase

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// AccountsClientListByResourceGroupPager provides operations for iterating over paged responses.
type AccountsClientListByResourceGroupPager struct {
	client    *AccountsClient
	current   AccountsClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AccountsClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AccountsClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AccountListResult.NextLink == nil || len(*p.current.AccountListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AccountsClientListByResourceGroupPager) NextPage(ctx context.Context) (AccountsClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AccountsClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AccountsClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AccountsClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AccountsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return AccountsClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AccountsClientListBySubscriptionPager provides operations for iterating over paged responses.
type AccountsClientListBySubscriptionPager struct {
	client    *AccountsClient
	current   AccountsClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AccountsClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AccountsClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AccountListResult.NextLink == nil || len(*p.current.AccountListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AccountsClientListBySubscriptionPager) NextPage(ctx context.Context) (AccountsClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AccountsClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AccountsClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AccountsClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AccountsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return AccountsClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AnalysisResultsClientListPager provides operations for iterating over paged responses.
type AnalysisResultsClientListPager struct {
	client    *AnalysisResultsClient
	current   AnalysisResultsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AnalysisResultsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *AnalysisResultsClientListPager) NextPage(ctx context.Context) (AnalysisResultsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return AnalysisResultsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AnalysisResultsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AnalysisResultsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AnalysisResultsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return AnalysisResultsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AvailableOSClientListPager provides operations for iterating over paged responses.
type AvailableOSClientListPager struct {
	client    *AvailableOSClient
	current   AvailableOSClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AvailableOSClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AvailableOSClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailableOSListResult.NextLink == nil || len(*p.current.AvailableOSListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AvailableOSClientListPager) NextPage(ctx context.Context) (AvailableOSClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AvailableOSClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AvailableOSClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AvailableOSClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AvailableOSClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return AvailableOSClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// CustomerEventsClientListByTestBaseAccountPager provides operations for iterating over paged responses.
type CustomerEventsClientListByTestBaseAccountPager struct {
	client    *CustomerEventsClient
	current   CustomerEventsClientListByTestBaseAccountResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CustomerEventsClientListByTestBaseAccountResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *CustomerEventsClientListByTestBaseAccountPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CustomerEventListResult.NextLink == nil || len(*p.current.CustomerEventListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *CustomerEventsClientListByTestBaseAccountPager) NextPage(ctx context.Context) (CustomerEventsClientListByTestBaseAccountResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return CustomerEventsClientListByTestBaseAccountResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return CustomerEventsClientListByTestBaseAccountResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return CustomerEventsClientListByTestBaseAccountResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return CustomerEventsClientListByTestBaseAccountResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByTestBaseAccountHandleResponse(resp)
	if err != nil {
		return CustomerEventsClientListByTestBaseAccountResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// EmailEventsClientListPager provides operations for iterating over paged responses.
type EmailEventsClientListPager struct {
	client    *EmailEventsClient
	current   EmailEventsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EmailEventsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *EmailEventsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EmailEventListResult.NextLink == nil || len(*p.current.EmailEventListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *EmailEventsClientListPager) NextPage(ctx context.Context) (EmailEventsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return EmailEventsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return EmailEventsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return EmailEventsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return EmailEventsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return EmailEventsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// FavoriteProcessesClientListPager provides operations for iterating over paged responses.
type FavoriteProcessesClientListPager struct {
	client    *FavoriteProcessesClient
	current   FavoriteProcessesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, FavoriteProcessesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *FavoriteProcessesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FavoriteProcessListResult.NextLink == nil || len(*p.current.FavoriteProcessListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *FavoriteProcessesClientListPager) NextPage(ctx context.Context) (FavoriteProcessesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return FavoriteProcessesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return FavoriteProcessesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return FavoriteProcessesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return FavoriteProcessesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return FavoriteProcessesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// FlightingRingsClientListPager provides operations for iterating over paged responses.
type FlightingRingsClientListPager struct {
	client    *FlightingRingsClient
	current   FlightingRingsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, FlightingRingsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *FlightingRingsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FlightingRingListResult.NextLink == nil || len(*p.current.FlightingRingListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *FlightingRingsClientListPager) NextPage(ctx context.Context) (FlightingRingsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return FlightingRingsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return FlightingRingsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return FlightingRingsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return FlightingRingsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return FlightingRingsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OSUpdatesClientListPager provides operations for iterating over paged responses.
type OSUpdatesClientListPager struct {
	client    *OSUpdatesClient
	current   OSUpdatesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OSUpdatesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OSUpdatesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OSUpdateListResult.NextLink == nil || len(*p.current.OSUpdateListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OSUpdatesClientListPager) NextPage(ctx context.Context) (OSUpdatesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OSUpdatesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OSUpdatesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OSUpdatesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OSUpdatesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OSUpdatesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PackagesClientListByTestBaseAccountPager provides operations for iterating over paged responses.
type PackagesClientListByTestBaseAccountPager struct {
	client    *PackagesClient
	current   PackagesClientListByTestBaseAccountResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PackagesClientListByTestBaseAccountResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PackagesClientListByTestBaseAccountPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PackageListResult.NextLink == nil || len(*p.current.PackageListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PackagesClientListByTestBaseAccountPager) NextPage(ctx context.Context) (PackagesClientListByTestBaseAccountResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PackagesClientListByTestBaseAccountResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PackagesClientListByTestBaseAccountResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PackagesClientListByTestBaseAccountResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PackagesClientListByTestBaseAccountResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByTestBaseAccountHandleResponse(resp)
	if err != nil {
		return PackagesClientListByTestBaseAccountResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SKUsClientListPager provides operations for iterating over paged responses.
type SKUsClientListPager struct {
	client    *SKUsClient
	current   SKUsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SKUsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SKUsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AccountSKUListResult.NextLink == nil || len(*p.current.AccountSKUListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SKUsClientListPager) NextPage(ctx context.Context) (SKUsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SKUsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SKUsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SKUsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SKUsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return SKUsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// TestResultsClientListPager provides operations for iterating over paged responses.
type TestResultsClientListPager struct {
	client    *TestResultsClient
	current   TestResultsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TestResultsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *TestResultsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TestResultListResult.NextLink == nil || len(*p.current.TestResultListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *TestResultsClientListPager) NextPage(ctx context.Context) (TestResultsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return TestResultsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return TestResultsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return TestResultsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return TestResultsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return TestResultsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// TestSummariesClientListPager provides operations for iterating over paged responses.
type TestSummariesClientListPager struct {
	client    *TestSummariesClient
	current   TestSummariesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TestSummariesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *TestSummariesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TestSummaryListResult.NextLink == nil || len(*p.current.TestSummaryListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *TestSummariesClientListPager) NextPage(ctx context.Context) (TestSummariesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return TestSummariesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return TestSummariesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return TestSummariesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return TestSummariesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return TestSummariesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// TestTypesClientListPager provides operations for iterating over paged responses.
type TestTypesClientListPager struct {
	client    *TestTypesClient
	current   TestTypesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TestTypesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *TestTypesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TestTypeListResult.NextLink == nil || len(*p.current.TestTypeListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *TestTypesClientListPager) NextPage(ctx context.Context) (TestTypesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return TestTypesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return TestTypesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return TestTypesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return TestTypesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return TestTypesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// UsageClientListPager provides operations for iterating over paged responses.
type UsageClientListPager struct {
	client    *UsageClient
	current   UsageClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, UsageClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *UsageClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AccountUsageDataList.NextLink == nil || len(*p.current.AccountUsageDataList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *UsageClientListPager) NextPage(ctx context.Context) (UsageClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return UsageClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return UsageClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return UsageClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return UsageClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return UsageClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
