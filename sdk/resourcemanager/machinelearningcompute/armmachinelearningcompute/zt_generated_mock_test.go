//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmachinelearningcompute_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/machinelearningcompute/armmachinelearningcompute"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperationalizationClusters_CreateOrUpdate(t *testing.T) {
	// From example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PUT Operationalization Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningcompute.NewOperationalizationClustersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myCluster",
		armmachinelearningcompute.OperationalizationCluster{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("alpha"),
				"key2": to.Ptr("beta"),
			},
			Properties: &armmachinelearningcompute.OperationalizationClusterProperties{
				Description: to.Ptr("My Operationalization Cluster"),
				ClusterType: to.Ptr(armmachinelearningcompute.ClusterTypeACS),
				ContainerService: &armmachinelearningcompute.AcsClusterProperties{
					OrchestratorProperties: &armmachinelearningcompute.KubernetesClusterProperties{
						ServicePrincipal: &armmachinelearningcompute.ServicePrincipalProperties{
							ClientID: to.Ptr("abcdefghijklmnopqrt"),
							Secret:   to.Ptr("<secret>"),
						},
					},
					OrchestratorType: to.Ptr(armmachinelearningcompute.OrchestratorTypeKubernetes),
				},
				GlobalServiceConfiguration: &armmachinelearningcompute.GlobalServiceConfiguration{
					SSL: &armmachinelearningcompute.SSLConfiguration{
						Cert:   to.Ptr("afjdklq2131casfakld="),
						Cname:  to.Ptr("foo.bar.com"),
						Key:    to.Ptr("flksdafkldsajf="),
						Status: to.Ptr(armmachinelearningcompute.StatusEnabled),
					},
				},
			},
		},
		&armmachinelearningcompute.OperationalizationClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningcompute.OperationalizationCluster{
			Name:     to.Ptr("MyCluster"),
			Type:     to.Ptr("Microsoft.MachineLearningCompute/operationalizationClusters"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.MachineLearningCompute/operationalizationClusters/MyCluster"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("alpha"),
				"key2": to.Ptr("beta"),
			},
			Properties: &armmachinelearningcompute.OperationalizationClusterProperties{
				Description: to.Ptr("My Operationalization Cluster"),
				AppInsights: &armmachinelearningcompute.AppInsightsProperties{
					ResourceID: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Insights/components/mlcrpai3d5859117108"),
				},
				ClusterType: to.Ptr(armmachinelearningcompute.ClusterTypeACS),
				ContainerRegistry: &armmachinelearningcompute.ContainerRegistryProperties{
					ResourceID: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myregistry123456"),
				},
				ContainerService: &armmachinelearningcompute.AcsClusterProperties{
					AgentCount:  to.Ptr[int32](2),
					AgentVMSize: to.Ptr(armmachinelearningcompute.AgentVMSizeTypesStandardD2V2),
					ClusterFqdn: to.Ptr("myclusterabcxyz.westus.cloudapp.azure.com"),
					MasterCount: to.Ptr[int32](3),
					OrchestratorProperties: &armmachinelearningcompute.KubernetesClusterProperties{
						ServicePrincipal: &armmachinelearningcompute.ServicePrincipalProperties{
							ClientID: to.Ptr("abcdefghijklmnopqrt"),
							Secret:   to.Ptr(""),
						},
					},
					OrchestratorType: to.Ptr(armmachinelearningcompute.OrchestratorTypeKubernetes),
					SystemServices: []*armmachinelearningcompute.SystemService{
						{
							PublicIPAddress:   to.Ptr("13.92.143.67"),
							SystemServiceType: to.Ptr(armmachinelearningcompute.SystemServiceTypeScoringFrontEnd),
							Version:           to.Ptr("prod/20170803.1.5a451c98af3972f7c966b439d471c1ed280314ea"),
						}},
				},
				CreatedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-04T07:12:28.191Z"); return t }()),
				GlobalServiceConfiguration: &armmachinelearningcompute.GlobalServiceConfiguration{
					AutoScale: &armmachinelearningcompute.AutoScaleConfiguration{
						MaxReplicas: to.Ptr[int32](100),
						MinReplicas: to.Ptr[int32](1),
						Status:      to.Ptr(armmachinelearningcompute.StatusEnabled),
					},
					SSL: &armmachinelearningcompute.SSLConfiguration{
						Cert:   to.Ptr("afjdklq2131casfakld="),
						Cname:  to.Ptr("foo.bar.com"),
						Key:    to.Ptr("flksdafkldsajf="),
						Status: to.Ptr(armmachinelearningcompute.StatusEnabled),
					},
				},
				ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-04T07:12:28.191Z"); return t }()),
				ProvisioningState: to.Ptr(armmachinelearningcompute.OperationStatusSucceeded),
				StorageAccount: &armmachinelearningcompute.StorageAccountProperties{
					ResourceID: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/mycluster123456"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationalizationCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationalizationCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperationalizationClusters_Get(t *testing.T) {
	// From example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Operationalization Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningcompute.NewOperationalizationClustersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myCluster",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningcompute.OperationalizationCluster{
			Name:     to.Ptr("myCluster"),
			Type:     to.Ptr("Microsoft.MachineLearningCompute/operationalizationClusters"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.MachineLearningCompute/operationalizationClusters/myCluster"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("alpha"),
				"key2": to.Ptr("beta"),
			},
			Properties: &armmachinelearningcompute.OperationalizationClusterProperties{
				Description: to.Ptr("My Operationalization Cluster"),
				AppInsights: &armmachinelearningcompute.AppInsightsProperties{
					ResourceID: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Insights/components/mlcrpai3d5859117108"),
				},
				ClusterType: to.Ptr(armmachinelearningcompute.ClusterTypeACS),
				ContainerRegistry: &armmachinelearningcompute.ContainerRegistryProperties{
					ResourceID: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myregistry123456"),
				},
				ContainerService: &armmachinelearningcompute.AcsClusterProperties{
					AgentCount:  to.Ptr[int32](2),
					AgentVMSize: to.Ptr(armmachinelearningcompute.AgentVMSizeTypesStandardD2V2),
					ClusterFqdn: to.Ptr("myclusterabcxyz.westus.cloudapp.azure.com"),
					MasterCount: to.Ptr[int32](3),
					OrchestratorProperties: &armmachinelearningcompute.KubernetesClusterProperties{
						ServicePrincipal: &armmachinelearningcompute.ServicePrincipalProperties{
							ClientID: to.Ptr("abcdefghijklmnopqrt"),
							Secret:   to.Ptr(""),
						},
					},
					OrchestratorType: to.Ptr(armmachinelearningcompute.OrchestratorTypeKubernetes),
					SystemServices: []*armmachinelearningcompute.SystemService{
						{
							PublicIPAddress:   to.Ptr("13.92.143.67"),
							SystemServiceType: to.Ptr(armmachinelearningcompute.SystemServiceTypeScoringFrontEnd),
							Version:           to.Ptr("prod/20170803.1.5a451c98af3972f7c966b439d471c1ed280314ea"),
						}},
				},
				CreatedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-04T07:12:28.191Z"); return t }()),
				GlobalServiceConfiguration: &armmachinelearningcompute.GlobalServiceConfiguration{
					AutoScale: &armmachinelearningcompute.AutoScaleConfiguration{
						MaxReplicas: to.Ptr[int32](100),
						MinReplicas: to.Ptr[int32](1),
						Status:      to.Ptr(armmachinelearningcompute.StatusEnabled),
					},
					SSL: &armmachinelearningcompute.SSLConfiguration{
						Cert:   to.Ptr("afjdklq2131casfakld="),
						Cname:  to.Ptr("foo.bar.com"),
						Key:    to.Ptr("flksdafkldsajf"),
						Status: to.Ptr(armmachinelearningcompute.StatusEnabled),
					},
				},
				ModifiedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-04T07:12:28.191Z"); return t }()),
				ProvisioningErrors: []*armmachinelearningcompute.ErrorResponseWrapper{
					{}},
				ProvisioningState: to.Ptr(armmachinelearningcompute.OperationStatusSucceeded),
				StorageAccount: &armmachinelearningcompute.StorageAccountProperties{
					ResourceID: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/mycluster123456"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationalizationCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationalizationCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperationalizationClusters_Update(t *testing.T) {
	// From example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PATCH Operationalization Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningcompute.NewOperationalizationClustersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"myResourceGroup",
		"myCluster",
		armmachinelearningcompute.OperationalizationClusterUpdateParameters{
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningcompute.OperationalizationCluster{
			Name:     to.Ptr("MyCluster"),
			Type:     to.Ptr("Microsoft.MachineLearningCompute/operationalizationClusters"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.MachineLearningCompute/operationalizationClusters/myCluster"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armmachinelearningcompute.OperationalizationClusterProperties{
				Description: to.Ptr("My Operationalization Cluster"),
				AppInsights: &armmachinelearningcompute.AppInsightsProperties{
					ResourceID: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Insights/components/mlcrpai3d5859117108"),
				},
				ClusterType: to.Ptr(armmachinelearningcompute.ClusterTypeACS),
				ContainerRegistry: &armmachinelearningcompute.ContainerRegistryProperties{
					ResourceID: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/mycluster742894"),
				},
				ContainerService: &armmachinelearningcompute.AcsClusterProperties{
					AgentCount:  to.Ptr[int32](2),
					AgentVMSize: to.Ptr(armmachinelearningcompute.AgentVMSizeTypesStandardD2V2),
					ClusterFqdn: to.Ptr("myclusterabcxyz.westus.cloudapp.azure.com"),
					MasterCount: to.Ptr[int32](3),
					OrchestratorProperties: &armmachinelearningcompute.KubernetesClusterProperties{
						ServicePrincipal: &armmachinelearningcompute.ServicePrincipalProperties{
							ClientID: to.Ptr("abcdefghijklmnopqrt"),
							Secret:   to.Ptr(""),
						},
					},
					OrchestratorType: to.Ptr(armmachinelearningcompute.OrchestratorTypeKubernetes),
					SystemServices: []*armmachinelearningcompute.SystemService{
						{
							PublicIPAddress:   to.Ptr("13.92.143.67"),
							SystemServiceType: to.Ptr(armmachinelearningcompute.SystemServiceTypeScoringFrontEnd),
							Version:           to.Ptr("prod/20170803.1.5a451c98af3972f7c966b439d471c1ed280314ea"),
						}},
				},
				CreatedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-04T07:12:28.191Z"); return t }()),
				GlobalServiceConfiguration: &armmachinelearningcompute.GlobalServiceConfiguration{
					AutoScale: &armmachinelearningcompute.AutoScaleConfiguration{
						MaxReplicas: to.Ptr[int32](100),
						MinReplicas: to.Ptr[int32](1),
						Status:      to.Ptr(armmachinelearningcompute.StatusEnabled),
					},
					SSL: &armmachinelearningcompute.SSLConfiguration{
						Cert:   to.Ptr("afjdklq2131casfakld="),
						Cname:  to.Ptr("foo.bar.com"),
						Key:    to.Ptr("flksdafkldsajf"),
						Status: to.Ptr(armmachinelearningcompute.StatusEnabled),
					},
				},
				ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-04T07:12:28.191Z"); return t }()),
				ProvisioningState: to.Ptr(armmachinelearningcompute.OperationStatusSucceeded),
				StorageAccount: &armmachinelearningcompute.StorageAccountProperties{
					ResourceID: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/mycluster123456"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationalizationCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationalizationCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperationalizationClusters_Delete(t *testing.T) {
	// From example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DELETE Operationalization Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningcompute.NewOperationalizationClustersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myCluster",
		&armmachinelearningcompute.OperationalizationClustersClientBeginDeleteOptions{DeleteAll: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_Delete.json: %v", err)
	}
}

func TestOperationalizationClusters_ListKeys(t *testing.T) {
	// From example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_ListKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Keys of an Operationalization Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningcompute.NewOperationalizationClustersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ListKeys(ctx,
		"myResourceGroup",
		"myCluster",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_ListKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningcompute.OperationalizationClusterCredentials{
			AppInsights: &armmachinelearningcompute.AppInsightsCredentials{
				AppID:              to.Ptr("abcdefghijklmnop"),
				InstrumentationKey: to.Ptr("ppppppppppppppppppTTTTTTTT"),
			},
			ContainerRegistry: &armmachinelearningcompute.ContainerRegistryCredentials{
				LoginServer: to.Ptr("myclusterghijkl.azurecr.io"),
				Password:    to.Ptr("<password>"),
				Password2:   to.Ptr("bddddTTTTTTTTTTT"),
				Username:    to.Ptr("mlcrpacr489402380295"),
			},
			ContainerService: &armmachinelearningcompute.ContainerServiceCredentials{
				AcsKubeConfig:       to.Ptr("AAAAAAAAAAAAAACCCCCCCCCCCCCCCCCCCCCCCCCAAAAAAAAAAAAAAAAA==="),
				ImagePullSecretName: to.Ptr("myclusterghijklacrkey"),
			},
			StorageAccount: &armmachinelearningcompute.StorageAccountCredentials{
				PrimaryKey:   to.Ptr("<primaryKey>"),
				ResourceID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myCluster998989"),
				SecondaryKey: to.Ptr("<secondaryKey>"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationalizationClusterCredentials) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationalizationClusterCredentials)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_ListKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperationalizationClusters_CheckSystemServicesUpdatesAvailable(t *testing.T) {
	// From example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_CheckSystemServicesUpdatesAvailable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check Update for an Operationalization Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningcompute.NewOperationalizationClustersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CheckSystemServicesUpdatesAvailable(ctx,
		"myResourceGroup",
		"myCluster",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_CheckSystemServicesUpdatesAvailable.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningcompute.CheckSystemServicesUpdatesAvailableResponse{
			UpdatesAvailable: to.Ptr(armmachinelearningcompute.UpdatesAvailableYes),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckSystemServicesUpdatesAvailableResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckSystemServicesUpdatesAvailableResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_CheckSystemServicesUpdatesAvailable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperationalizationClusters_UpdateSystemServices(t *testing.T) {
	// From example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_UpdateSystemServices.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update System Services in an Operationalization Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningcompute.NewOperationalizationClustersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdateSystemServices(ctx,
		"myResourceGroup",
		"myCluster",
		&armmachinelearningcompute.OperationalizationClustersClientBeginUpdateSystemServicesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_UpdateSystemServices.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_UpdateSystemServices.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningcompute.UpdateSystemServicesResponse{
			UpdateCompletedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-04T07:13:28.191Z"); return t }()),
			UpdateStartedOn:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-04T07:12:28.191Z"); return t }()),
			UpdateStatus:      to.Ptr(armmachinelearningcompute.OperationStatus("Completed")),
		}
		if !reflect.DeepEqual(exampleRes, res.UpdateSystemServicesResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.UpdateSystemServicesResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_UpdateSystemServices.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperationalizationClusters_ListByResourceGroup(t *testing.T) {
	// From example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Operationalization Clusters by Resource Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningcompute.NewOperationalizationClustersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		&armmachinelearningcompute.OperationalizationClustersClientListByResourceGroupOptions{Skiptoken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmachinelearningcompute.PaginatedOperationalizationClustersList{
			Value: []*armmachinelearningcompute.OperationalizationCluster{
				{
					Name:     to.Ptr("MyCluster"),
					Type:     to.Ptr("Microsoft.MachineLearningCompute/operationalizationClusters"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.MachineLearningCompute/operationalizationClusters/MyCluster"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("alpha"),
						"key2": to.Ptr("beta"),
					},
					Properties: &armmachinelearningcompute.OperationalizationClusterProperties{
						Description: to.Ptr("My Operationalization Cluster"),
						AppInsights: &armmachinelearningcompute.AppInsightsProperties{
							ResourceID: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Insights/components/mlcrpai3d5859117108"),
						},
						ClusterType: to.Ptr(armmachinelearningcompute.ClusterTypeACS),
						ContainerRegistry: &armmachinelearningcompute.ContainerRegistryProperties{
							ResourceID: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/mycluster123456"),
						},
						ContainerService: &armmachinelearningcompute.AcsClusterProperties{
							AgentCount:  to.Ptr[int32](2),
							AgentVMSize: to.Ptr(armmachinelearningcompute.AgentVMSizeTypesStandardD2V2),
							ClusterFqdn: to.Ptr("myclusterabcxyz.westus.cloudapp.azure.com"),
							MasterCount: to.Ptr[int32](3),
							OrchestratorProperties: &armmachinelearningcompute.KubernetesClusterProperties{
								ServicePrincipal: &armmachinelearningcompute.ServicePrincipalProperties{
									ClientID: to.Ptr("abcdefghijklmnopqrt"),
									Secret:   to.Ptr(""),
								},
							},
							OrchestratorType: to.Ptr(armmachinelearningcompute.OrchestratorTypeKubernetes),
							SystemServices: []*armmachinelearningcompute.SystemService{
								{
									PublicIPAddress:   to.Ptr("13.92.143.67"),
									SystemServiceType: to.Ptr(armmachinelearningcompute.SystemServiceTypeScoringFrontEnd),
									Version:           to.Ptr("prod/20170803.1.5a451c98af3972f7c966b439d471c1ed280314ea"),
								}},
						},
						CreatedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-04T07:12:28.191Z"); return t }()),
						GlobalServiceConfiguration: &armmachinelearningcompute.GlobalServiceConfiguration{
							AutoScale: &armmachinelearningcompute.AutoScaleConfiguration{
								MaxReplicas: to.Ptr[int32](100),
								MinReplicas: to.Ptr[int32](1),
								Status:      to.Ptr(armmachinelearningcompute.StatusEnabled),
							},
							SSL: &armmachinelearningcompute.SSLConfiguration{
								Cert:   to.Ptr("afjdklq2131casfakld="),
								Cname:  to.Ptr("foo.bar.com"),
								Key:    to.Ptr("flksdafkldsajf"),
								Status: to.Ptr(armmachinelearningcompute.StatusEnabled),
							},
						},
						ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-04T07:12:28.191Z"); return t }()),
						ProvisioningState: to.Ptr(armmachinelearningcompute.OperationStatusSucceeded),
						StorageAccount: &armmachinelearningcompute.StorageAccountProperties{
							ResourceID: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/mycluster123456"),
						},
					},
				},
				{
					Name:     to.Ptr("MyCluster2"),
					Type:     to.Ptr("Microsoft.MachineLearningCompute/operationalizationClusters"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.MachineLearningCompute/operationalizationClusters/MyCluster2"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1": to.Ptr("alpha"),
						"key2": to.Ptr("beta"),
					},
					Properties: &armmachinelearningcompute.OperationalizationClusterProperties{
						Description: to.Ptr("My Operationalization Cluster 2"),
						AppInsights: &armmachinelearningcompute.AppInsightsProperties{
							ResourceID: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Insights/components/mlcrpai3d5859117108"),
						},
						ClusterType: to.Ptr(armmachinelearningcompute.ClusterTypeACS),
						ContainerRegistry: &armmachinelearningcompute.ContainerRegistryProperties{
							ResourceID: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myregistry8923849"),
						},
						ContainerService: &armmachinelearningcompute.AcsClusterProperties{
							AgentCount:  to.Ptr[int32](2),
							AgentVMSize: to.Ptr(armmachinelearningcompute.AgentVMSizeTypesStandardD2V2),
							ClusterFqdn: to.Ptr("mycluster2defghi.westus.cloudapp.azure.com"),
							MasterCount: to.Ptr[int32](3),
							OrchestratorProperties: &armmachinelearningcompute.KubernetesClusterProperties{
								ServicePrincipal: &armmachinelearningcompute.ServicePrincipalProperties{
									ClientID: to.Ptr("abcdefghijklmnopqrt"),
									Secret:   to.Ptr(""),
								},
							},
							OrchestratorType: to.Ptr(armmachinelearningcompute.OrchestratorTypeKubernetes),
							SystemServices: []*armmachinelearningcompute.SystemService{
								{
									PublicIPAddress:   to.Ptr("13.92.143.67"),
									SystemServiceType: to.Ptr(armmachinelearningcompute.SystemServiceTypeScoringFrontEnd),
									Version:           to.Ptr("prod/20170803.1.5a451c98af3972f7c966b439d471c1ed280314ea"),
								}},
						},
						CreatedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-04T07:12:28.191Z"); return t }()),
						GlobalServiceConfiguration: &armmachinelearningcompute.GlobalServiceConfiguration{
							AutoScale: &armmachinelearningcompute.AutoScaleConfiguration{
								MaxReplicas: to.Ptr[int32](100),
								MinReplicas: to.Ptr[int32](1),
								Status:      to.Ptr(armmachinelearningcompute.StatusEnabled),
							},
							SSL: &armmachinelearningcompute.SSLConfiguration{
								Cert:   to.Ptr("afjdklq2131casfakld="),
								Cname:  to.Ptr("foo.bar.com"),
								Key:    to.Ptr("flksdafkldsajf"),
								Status: to.Ptr(armmachinelearningcompute.StatusEnabled),
							},
						},
						ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-04T07:12:28.191Z"); return t }()),
						ProvisioningState: to.Ptr(armmachinelearningcompute.OperationStatusSucceeded),
						StorageAccount: &armmachinelearningcompute.StorageAccountProperties{
							ResourceID: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/mycluster998989"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PaginatedOperationalizationClustersList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PaginatedOperationalizationClustersList)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/OperationalizationClusters_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMachineLearningCompute_ListAvailableOperations(t *testing.T) {
	// From example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/MachineLearningCompute_ListAvailableOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Machine Learning Compute List Available Operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningcompute.NewClient(cred, &options)
	res, err := client.ListAvailableOperations(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/MachineLearningCompute_ListAvailableOperations.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningcompute.AvailableOperations{
			Value: []*armmachinelearningcompute.ResourceOperation{
				{
					Name: to.Ptr("Microsoft.MachineLearningCompute/register/action"),
					Display: &armmachinelearningcompute.ResourceOperationDisplay{
						Description: to.Ptr("Registers the subscription for the Machine Learning Compute resource provider and enables the management of Machine Leaning Compute resources."),
						Operation:   to.Ptr("Register the provider"),
						Provider:    to.Ptr("Microsoft Machine Learning Compute Management"),
						Resource:    to.Ptr("Machine Learning Compute Provider"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.MachineLearningCompute/operationalizationClusters/read"),
					Display: &armmachinelearningcompute.ResourceOperationDisplay{
						Description: to.Ptr("Read any operationalization cluster"),
						Operation:   to.Ptr("Read the operationalization cluster"),
						Provider:    to.Ptr("Microsoft Machine Learning Compute Management"),
						Resource:    to.Ptr("Machine Learning Compute Operationalization Cluster"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.MachineLearningCompute/operationalizationClusters/write"),
					Display: &armmachinelearningcompute.ResourceOperationDisplay{
						Description: to.Ptr("Create or update any operationalization cluster"),
						Operation:   to.Ptr("Write the operationalization cluster"),
						Provider:    to.Ptr("Microsoft Machine Learning Compute Management"),
						Resource:    to.Ptr("Machine Learning Compute Operationalization Cluster"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.MachineLearningCompute/operationalizationClusters/delete"),
					Display: &armmachinelearningcompute.ResourceOperationDisplay{
						Description: to.Ptr("Delete any operationalization cluster"),
						Operation:   to.Ptr("Delete the operationalization cluster"),
						Provider:    to.Ptr("Microsoft Machine Learning Compute Management"),
						Resource:    to.Ptr("Machine Learning Compute Operationalization Cluster"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.MachineLearningCompute/operationalizationClusters/listKeys/action"),
					Display: &armmachinelearningcompute.ResourceOperationDisplay{
						Description: to.Ptr("List keys for an operationalization cluster"),
						Operation:   to.Ptr("List keys for an operationalization cluster"),
						Provider:    to.Ptr("Microsoft Machine Learning Compute Management"),
						Resource:    to.Ptr("Machine Learning Compute Operationalization Cluster"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.MachineLearningCompute/operationalizationClusters/checkUpdate/action"),
					Display: &armmachinelearningcompute.ResourceOperationDisplay{
						Description: to.Ptr("Check available system updates for an operationalization cluster"),
						Operation:   to.Ptr("Check available system updates for an operationalization cluster"),
						Provider:    to.Ptr("Microsoft Machine Learning Compute Management"),
						Resource:    to.Ptr("Machine Learning Compute Operationalization Cluster"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.MachineLearningCompute/operationalizationClusters/updateSystem/action"),
					Display: &armmachinelearningcompute.ResourceOperationDisplay{
						Description: to.Ptr("Apply available system updates for an operationalization cluster"),
						Operation:   to.Ptr("Apply available system updates for an operationalization cluster"),
						Provider:    to.Ptr("Microsoft Machine Learning Compute Management"),
						Resource:    to.Ptr("Machine Learning Compute Operationalization Cluster"),
					},
					Origin: to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AvailableOperations) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AvailableOperations)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningcompute/resource-manager/Microsoft.MachineLearningCompute/preview/2017-08-01-preview/examples/MachineLearningCompute_ListAvailableOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
