//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmachinelearningcompute

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type AcsClusterProperties.
func (a AcsClusterProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "agentCount", a.AgentCount)
	populate(objectMap, "agentVmSize", a.AgentVMSize)
	populate(objectMap, "clusterFqdn", a.ClusterFqdn)
	populate(objectMap, "masterCount", a.MasterCount)
	populate(objectMap, "orchestratorProperties", a.OrchestratorProperties)
	populate(objectMap, "orchestratorType", a.OrchestratorType)
	populate(objectMap, "systemServices", a.SystemServices)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AvailableOperations.
func (a AvailableOperations) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ErrorResponse.
func (e ErrorResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GlobalServiceConfiguration.
func (g GlobalServiceConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "autoScale", g.AutoScale)
	populate(objectMap, "etag", g.Etag)
	populate(objectMap, "ssl", g.SSL)
	populate(objectMap, "serviceAuth", g.ServiceAuth)
	if g.AdditionalProperties != nil {
		for key, val := range g.AdditionalProperties {
			objectMap[key] = val
		}
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GlobalServiceConfiguration.
func (g *GlobalServiceConfiguration) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "autoScale":
			err = unpopulate(val, &g.AutoScale)
			delete(rawMsg, key)
		case "etag":
			err = unpopulate(val, &g.Etag)
			delete(rawMsg, key)
		case "ssl":
			err = unpopulate(val, &g.SSL)
			delete(rawMsg, key)
		case "serviceAuth":
			err = unpopulate(val, &g.ServiceAuth)
			delete(rawMsg, key)
		default:
			if g.AdditionalProperties == nil {
				g.AdditionalProperties = map[string]interface{}{}
			}
			if val != nil {
				var aux interface{}
				err = json.Unmarshal(val, &aux)
				g.AdditionalProperties[key] = aux
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperationalizationCluster.
func (o OperationalizationCluster) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", o.ID)
	populate(objectMap, "location", o.Location)
	populate(objectMap, "name", o.Name)
	populate(objectMap, "properties", o.Properties)
	populate(objectMap, "tags", o.Tags)
	populate(objectMap, "type", o.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OperationalizationClusterProperties.
func (o OperationalizationClusterProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appInsights", o.AppInsights)
	populate(objectMap, "clusterType", o.ClusterType)
	populate(objectMap, "containerRegistry", o.ContainerRegistry)
	populate(objectMap, "containerService", o.ContainerService)
	populateTimeRFC3339(objectMap, "createdOn", o.CreatedOn)
	populate(objectMap, "description", o.Description)
	populate(objectMap, "globalServiceConfiguration", o.GlobalServiceConfiguration)
	populateTimeRFC3339(objectMap, "modifiedOn", o.ModifiedOn)
	populate(objectMap, "provisioningErrors", o.ProvisioningErrors)
	populate(objectMap, "provisioningState", o.ProvisioningState)
	populate(objectMap, "storageAccount", o.StorageAccount)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperationalizationClusterProperties.
func (o *OperationalizationClusterProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "appInsights":
			err = unpopulate(val, &o.AppInsights)
			delete(rawMsg, key)
		case "clusterType":
			err = unpopulate(val, &o.ClusterType)
			delete(rawMsg, key)
		case "containerRegistry":
			err = unpopulate(val, &o.ContainerRegistry)
			delete(rawMsg, key)
		case "containerService":
			err = unpopulate(val, &o.ContainerService)
			delete(rawMsg, key)
		case "createdOn":
			err = unpopulateTimeRFC3339(val, &o.CreatedOn)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &o.Description)
			delete(rawMsg, key)
		case "globalServiceConfiguration":
			err = unpopulate(val, &o.GlobalServiceConfiguration)
			delete(rawMsg, key)
		case "modifiedOn":
			err = unpopulateTimeRFC3339(val, &o.ModifiedOn)
			delete(rawMsg, key)
		case "provisioningErrors":
			err = unpopulate(val, &o.ProvisioningErrors)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &o.ProvisioningState)
			delete(rawMsg, key)
		case "storageAccount":
			err = unpopulate(val, &o.StorageAccount)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperationalizationClusterUpdateParameters.
func (o OperationalizationClusterUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", o.Tags)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PaginatedOperationalizationClustersList.
func (p PaginatedOperationalizationClustersList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", r.ID)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type UpdateSystemServicesResponse.
func (u UpdateSystemServicesResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "updateCompletedOn", u.UpdateCompletedOn)
	populateTimeRFC3339(objectMap, "updateStartedOn", u.UpdateStartedOn)
	populate(objectMap, "updateStatus", u.UpdateStatus)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UpdateSystemServicesResponse.
func (u *UpdateSystemServicesResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "updateCompletedOn":
			err = unpopulateTimeRFC3339(val, &u.UpdateCompletedOn)
			delete(rawMsg, key)
		case "updateStartedOn":
			err = unpopulateTimeRFC3339(val, &u.UpdateStartedOn)
			delete(rawMsg, key)
		case "updateStatus":
			err = unpopulate(val, &u.UpdateStatus)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
