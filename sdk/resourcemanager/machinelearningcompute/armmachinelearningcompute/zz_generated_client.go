//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmachinelearningcompute

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// Client contains the methods for the MachineLearningCompute group.
// Don't use this type directly, use NewClient() instead.
type Client struct {
	host string
	pl   runtime.Pipeline
}

// NewClient creates a new instance of Client with the specified values.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewClient(credential azcore.TokenCredential, options *arm.ClientOptions) *Client {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := options.Endpoint
	if len(ep) == 0 {
		ep = arm.AzurePublicCloud
	}
	client := &Client{
		host: string(ep),
		pl:   armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options),
	}
	return client
}

// ListAvailableOperations - Gets all available operations.
// If the operation fails it returns an *azcore.ResponseError type.
// options - ClientListAvailableOperationsOptions contains the optional parameters for the Client.ListAvailableOperations
// method.
func (client *Client) ListAvailableOperations(ctx context.Context, options *ClientListAvailableOperationsOptions) (ClientListAvailableOperationsResponse, error) {
	req, err := client.listAvailableOperationsCreateRequest(ctx, options)
	if err != nil {
		return ClientListAvailableOperationsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientListAvailableOperationsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientListAvailableOperationsResponse{}, runtime.NewResponseError(resp)
	}
	return client.listAvailableOperationsHandleResponse(resp)
}

// listAvailableOperationsCreateRequest creates the ListAvailableOperations request.
func (client *Client) listAvailableOperationsCreateRequest(ctx context.Context, options *ClientListAvailableOperationsOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.MachineLearningCompute/operations"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-08-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listAvailableOperationsHandleResponse handles the ListAvailableOperations response.
func (client *Client) listAvailableOperationsHandleResponse(resp *http.Response) (ClientListAvailableOperationsResponse, error) {
	result := ClientListAvailableOperationsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AvailableOperations); err != nil {
		return ClientListAvailableOperationsResponse{}, err
	}
	return result, nil
}
