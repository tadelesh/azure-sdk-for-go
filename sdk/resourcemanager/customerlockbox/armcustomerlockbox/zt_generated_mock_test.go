//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcustomerlockbox_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/customerlockbox/armcustomerlockbox"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/customerlockbox/resource-manager/Microsoft.CustomerLockbox/preview/2018-02-28-preview/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List available operations for the Customer Lockbox resource provider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerlockbox.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customerlockbox/resource-manager/Microsoft.CustomerLockbox/preview/2018-02-28-preview/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomerlockbox.OperationListResult{
			Value: []*armcustomerlockbox.Operation{
				{
					Name: to.Ptr("Microsoft.CustomerLockbox/register/action"),
					Display: &armcustomerlockbox.OperationDisplay{
						Description: to.Ptr("Register Provider Microsoft.CustomerLockbox"),
						Operation:   to.Ptr("Register Provider Microsoft.CustomerLockboxx"),
						Provider:    to.Ptr("Microsoft Customer Lockbox"),
						Resource:    to.Ptr("Microsoft Customer Lockbox"),
					},
					IsDataAction: to.Ptr("false"),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CustomerLockbox/operations/read"),
					Display: &armcustomerlockbox.OperationDisplay{
						Description: to.Ptr("Read Lockbox Operations"),
						Operation:   to.Ptr("Read Lockbox Operations"),
						Provider:    to.Ptr("Microsoft Customer Lockbox"),
						Resource:    to.Ptr("Lockbox Operations"),
					},
					IsDataAction: to.Ptr("false"),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CustomerLockbox/requests/read"),
					Display: &armcustomerlockbox.OperationDisplay{
						Description: to.Ptr("Read Lockbox Request"),
						Operation:   to.Ptr("Read Lockbox Request"),
						Provider:    to.Ptr("Microsoft Customer Lockbox"),
						Resource:    to.Ptr("Customer Lockbox Request"),
					},
					IsDataAction: to.Ptr("false"),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CustomerLockbox/requests/activitylog/CreateLockboxRequest/action"),
					Display: &armcustomerlockbox.OperationDisplay{
						Description: to.Ptr("Create Lockbox Request"),
						Operation:   to.Ptr("Create Lockbox Request"),
						Provider:    to.Ptr("Microsoft Customer Lockbox"),
						Resource:    to.Ptr("Customer Lockbox Request"),
					},
					IsDataAction: to.Ptr("false"),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CustomerLockbox/requests/activitylog/ApproveLockboxRequest/action"),
					Display: &armcustomerlockbox.OperationDisplay{
						Description: to.Ptr("Approve Lockbox Request"),
						Operation:   to.Ptr("Approve Lockbox Request"),
						Provider:    to.Ptr("Microsoft Customer Lockbox"),
						Resource:    to.Ptr("Customer Lockbox Request"),
					},
					IsDataAction: to.Ptr("false"),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CustomerLockbox/requests/activitylog/DenyLockboxRequest/action"),
					Display: &armcustomerlockbox.OperationDisplay{
						Description: to.Ptr("Deny Lockbox Request"),
						Operation:   to.Ptr("Deny Lockbox Request"),
						Provider:    to.Ptr("Microsoft Customer Lockbox"),
						Resource:    to.Ptr("Customer Lockbox Request"),
					},
					IsDataAction: to.Ptr("false"),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CustomerLockbox/requests/activitylog/ExpireLockboxRequest/action"),
					Display: &armcustomerlockbox.OperationDisplay{
						Description: to.Ptr("Expire Lockbox Request"),
						Operation:   to.Ptr("Expire Lockbox Request"),
						Provider:    to.Ptr("Microsoft Customer Lockbox"),
						Resource:    to.Ptr("Customer Lockbox Request"),
					},
					IsDataAction: to.Ptr("false"),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CustomerLockbox/requests/activitylog/CancelLockboxRequest/action"),
					Display: &armcustomerlockbox.OperationDisplay{
						Description: to.Ptr("Cancel Lockbox Request"),
						Operation:   to.Ptr("Cancel Lockbox Request"),
						Provider:    to.Ptr("Microsoft Customer Lockbox"),
						Resource:    to.Ptr("Customer Lockbox Request"),
					},
					IsDataAction: to.Ptr("false"),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CustomerLockbox/requests/activitylog/AutoApproveLockboxRequest/action"),
					Display: &armcustomerlockbox.OperationDisplay{
						Description: to.Ptr("AutoApprove Lockbox Request"),
						Operation:   to.Ptr("AutoApprove Lockbox Request"),
						Provider:    to.Ptr("Microsoft Customer Lockbox"),
						Resource:    to.Ptr("Customer Lockbox Request"),
					},
					IsDataAction: to.Ptr("false"),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CustomerLockbox/requests/activitylog/AutoDenyLockboxRequest/action"),
					Display: &armcustomerlockbox.OperationDisplay{
						Description: to.Ptr("AutoDeny Lockbox Request"),
						Operation:   to.Ptr("AutoDeny Lockbox Request"),
						Provider:    to.Ptr("Microsoft Customer Lockbox"),
						Resource:    to.Ptr("Customer Lockbox Request"),
					},
					IsDataAction: to.Ptr("false"),
					Origin:       to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/customerlockbox/resource-manager/Microsoft.CustomerLockbox/preview/2018-02-28-preview/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGet_TenantOptedIn(t *testing.T) {
	// From example specification/customerlockbox/resource-manager/Microsoft.CustomerLockbox/preview/2018-02-28-preview/examples/TenantOptedIn.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"check if a TenantId is Optedin"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerlockbox.NewGetClient(cred, &options)
	res, err := client.TenantOptedIn(ctx,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customerlockbox/resource-manager/Microsoft.CustomerLockbox/preview/2018-02-28-preview/examples/TenantOptedIn.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerlockbox.TenantOptInResponse{
			IsOptedIn: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.TenantOptInResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TenantOptInResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/customerlockbox/resource-manager/Microsoft.CustomerLockbox/preview/2018-02-28-preview/examples/TenantOptedIn.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPost_EnableLockbox(t *testing.T) {
	// From example specification/customerlockbox/resource-manager/Microsoft.CustomerLockbox/preview/2018-02-28-preview/examples/EnableLockbox.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enable Tenant in Lockbox"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerlockbox.NewPostClient(cred, &options)
	_, err := client.EnableLockbox(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customerlockbox/resource-manager/Microsoft.CustomerLockbox/preview/2018-02-28-preview/examples/EnableLockbox.json: %v", err)
	}
}

func TestPost_DisableLockbox(t *testing.T) {
	// From example specification/customerlockbox/resource-manager/Microsoft.CustomerLockbox/preview/2018-02-28-preview/examples/DisableLockbox.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Disable a tenant in Lockbox"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerlockbox.NewPostClient(cred, &options)
	_, err := client.DisableLockbox(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customerlockbox/resource-manager/Microsoft.CustomerLockbox/preview/2018-02-28-preview/examples/DisableLockbox.json: %v", err)
	}
}

func TestRequests_Get(t *testing.T) {
	// From example specification/customerlockbox/resource-manager/Microsoft.CustomerLockbox/preview/2018-02-28-preview/examples/Requests_Get_InSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a lockbox request in subscription scope"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerlockbox.NewRequestsClient(cred, &options)
	res, err := client.Get(ctx,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customerlockbox/resource-manager/Microsoft.CustomerLockbox/preview/2018-02-28-preview/examples/Requests_Get_InSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerlockbox.LockboxRequestResponse{
			Name: to.Ptr("LockboxRequest_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
			Type: to.Ptr("requests"),
			ID:   to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/Microsoft.CustomerLockbox/requests/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
			Properties: &armcustomerlockbox.LockboxRequestResponseProperties{
				CreatedDateTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-17T23:15:42.031334Z"); return t }()),
				Duration:           to.Ptr("8"),
				ExpirationDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-21T23:15:42.031334Z"); return t }()),
				Justification:      to.Ptr("Microsoft Support Team is requesting access to your resource temporarily for troubleshooting."),
				RequestID:          to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
				ResourceIDs:        to.Ptr("SUBSCRIPTIONS/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/RESOURCEGROUPS/DEMORG/PROVIDERS/MICROSOFT.COMPUTE/VIRTUALMACHINES/DEMO"),
				ResourceType:       to.Ptr("VMSS"),
				Status:             to.Ptr(armcustomerlockbox.StatusExpired),
				SubscriptionID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
				SupportCaseURL:     to.Ptr("https://portal.azure.com/#resource/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/microsoft.support/supporttickets/12345"),
				SupportRequest:     to.Ptr("12345"),
				Workitemsource:     to.Ptr("Other"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LockboxRequestResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LockboxRequestResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/customerlockbox/resource-manager/Microsoft.CustomerLockbox/preview/2018-02-28-preview/examples/Requests_Get_InSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRequests_UpdateStatus(t *testing.T) {
	// From example specification/customerlockbox/resource-manager/Microsoft.CustomerLockbox/preview/2018-02-28-preview/examples/Requests_UpdateStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a lockbox request status"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerlockbox.NewRequestsClient(cred, &options)
	res, err := client.UpdateStatus(ctx,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
		armcustomerlockbox.Approval{
			Reason: to.Ptr("Customer approve"),
			Status: to.Ptr(armcustomerlockbox.StatusApprove),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/customerlockbox/resource-manager/Microsoft.CustomerLockbox/preview/2018-02-28-preview/examples/Requests_UpdateStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcustomerlockbox.Approval{
			Reason: to.Ptr("Customer approve"),
			Status: to.Ptr(armcustomerlockbox.StatusApprove),
		}
		if !reflect.DeepEqual(exampleRes, res.Approval) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Approval)
			t.Fatalf("Mock response is not equal to example response for example specification/customerlockbox/resource-manager/Microsoft.CustomerLockbox/preview/2018-02-28-preview/examples/Requests_UpdateStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRequests_List(t *testing.T) {
	// From example specification/customerlockbox/resource-manager/Microsoft.CustomerLockbox/preview/2018-02-28-preview/examples/Requests_List_FilterByStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List lockbox requests in a subscription with filter by request status (eg. $filter=properties/status eq 'Pending')"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcustomerlockbox.NewRequestsClient(cred, &options)
	pager := client.List("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
		&armcustomerlockbox.RequestsClientListOptions{Filter: to.Ptr("properties/status eq 'Expired'")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customerlockbox/resource-manager/Microsoft.CustomerLockbox/preview/2018-02-28-preview/examples/Requests_List_FilterByStatus.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomerlockbox.RequestListResult{
			Value: []*armcustomerlockbox.LockboxRequestResponse{
				{
					Name: to.Ptr("LockboxRequest_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
					Type: to.Ptr("requests"),
					ID:   to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/Microsoft.CustomerLockbox/requests/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
					Properties: &armcustomerlockbox.LockboxRequestResponseProperties{
						CreatedDateTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-17T23:15:42.031334Z"); return t }()),
						Duration:           to.Ptr("8"),
						ExpirationDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-21T23:15:42.031334Z"); return t }()),
						Justification:      to.Ptr("Microsoft Support Team is requesting access to your resource temporarily for troubleshooting."),
						RequestID:          to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
						ResourceIDs:        to.Ptr("SUBSCRIPTIONS/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/RESOURCEGROUPS/DEMORG/PROVIDERS/MICROSOFT.COMPUTE/VIRTUALMACHINES/DEMO"),
						ResourceType:       to.Ptr("VMSS"),
						Status:             to.Ptr(armcustomerlockbox.StatusExpired),
						SubscriptionID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
						SupportCaseURL:     to.Ptr("https://portal.azure.com/#resource/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/microsoft.support/supporttickets/12345"),
						SupportRequest:     to.Ptr("12345"),
						Workitemsource:     to.Ptr("Other"),
					},
				},
				{
					Name: to.Ptr("LockboxRequest_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
					Type: to.Ptr("requests"),
					ID:   to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/Microsoft.CustomerLockbox/requests/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
					Properties: &armcustomerlockbox.LockboxRequestResponseProperties{
						CreatedDateTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-19T03:12:51.2672319Z"); return t }()),
						Duration:           to.Ptr("8"),
						ExpirationDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-23T03:12:51.2672319Z"); return t }()),
						Justification:      to.Ptr("Microsoft Support Team is requesting access to your resource temporarily for troubleshooting."),
						RequestID:          to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
						ResourceIDs:        to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
						ResourceType:       to.Ptr("Subscription"),
						Status:             to.Ptr(armcustomerlockbox.StatusExpired),
						SubscriptionID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
						SupportCaseURL:     to.Ptr("https://portal.azure.com/#resource/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/microsoft.support/supporttickets/120101324000234"),
						SupportRequest:     to.Ptr("120101324000234"),
						Workitemsource:     to.Ptr("SupportRequest"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RequestListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RequestListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/customerlockbox/resource-manager/Microsoft.CustomerLockbox/preview/2018-02-28-preview/examples/Requests_List_FilterByStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/customerlockbox/resource-manager/Microsoft.CustomerLockbox/preview/2018-02-28-preview/examples/Requests_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List lockbox requests with no filters"},
	})
	client = armcustomerlockbox.NewRequestsClient(cred, &options)
	pager = client.List("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
		&armcustomerlockbox.RequestsClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/customerlockbox/resource-manager/Microsoft.CustomerLockbox/preview/2018-02-28-preview/examples/Requests_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcustomerlockbox.RequestListResult{
			Value: []*armcustomerlockbox.LockboxRequestResponse{
				{
					Name: to.Ptr("LockboxRequest_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
					Type: to.Ptr("requests"),
					ID:   to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/Microsoft.CustomerLockbox/requests/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
					Properties: &armcustomerlockbox.LockboxRequestResponseProperties{
						CreatedDateTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-17T23:15:42.031334Z"); return t }()),
						Duration:           to.Ptr("8"),
						ExpirationDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-21T23:15:42.031334Z"); return t }()),
						Justification:      to.Ptr("Microsoft Support Team is requesting access to your resource temporarily for troubleshooting."),
						RequestID:          to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
						ResourceIDs:        to.Ptr("SUBSCRIPTIONS/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/RESOURCEGROUPS/DEMORG/PROVIDERS/MICROSOFT.COMPUTE/VIRTUALMACHINES/DEMO"),
						ResourceType:       to.Ptr("VMSS"),
						Status:             to.Ptr(armcustomerlockbox.StatusExpired),
						SubscriptionID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
						SupportCaseURL:     to.Ptr("https://portal.azure.com/#resource/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/microsoft.support/supporttickets/12345"),
						SupportRequest:     to.Ptr("12345"),
						Workitemsource:     to.Ptr("Other"),
					},
				},
				{
					Name: to.Ptr("LockboxRequest_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
					Type: to.Ptr("requests"),
					ID:   to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/Microsoft.CustomerLockbox/requests/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
					Properties: &armcustomerlockbox.LockboxRequestResponseProperties{
						CreatedDateTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-19T03:12:51.2672319Z"); return t }()),
						Duration:           to.Ptr("8"),
						ExpirationDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-23T03:12:51.2672319Z"); return t }()),
						Justification:      to.Ptr("Microsoft Support Team is requesting access to your resource temporarily for troubleshooting."),
						RequestID:          to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
						ResourceIDs:        to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
						ResourceType:       to.Ptr("Subscription"),
						Status:             to.Ptr(armcustomerlockbox.StatusExpired),
						SubscriptionID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
						SupportCaseURL:     to.Ptr("https://portal.azure.com/#resource/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/microsoft.support/supporttickets/120101324000234"),
						SupportRequest:     to.Ptr("120101324000234"),
						Workitemsource:     to.Ptr("SupportRequest"),
					},
				},
				{
					Name: to.Ptr("LockboxRequest_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
					Type: to.Ptr("requests"),
					ID:   to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/Microsoft.CustomerLockbox/requests/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
					Properties: &armcustomerlockbox.LockboxRequestResponseProperties{
						CreatedDateTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-24T15:08:17.590109Z"); return t }()),
						Duration:           to.Ptr("Support request lifetime"),
						ExpirationDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-28T15:08:17.590109Z"); return t }()),
						Justification:      to.Ptr("Microsoft Support Team is requesting access to your resource temporarily for troubleshooting."),
						RequestID:          to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
						ResourceIDs:        to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
						ResourceType:       to.Ptr("Subscription"),
						Status:             to.Ptr(armcustomerlockbox.StatusDenied),
						SubscriptionID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
						SupportCaseURL:     to.Ptr("https://portal.azure.com/#resource/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/microsoft.support/supporttickets/120101324000234"),
						SupportRequest:     to.Ptr("120101324000234"),
						Workitemsource:     to.Ptr("SupportRequest"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RequestListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RequestListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/customerlockbox/resource-manager/Microsoft.CustomerLockbox/preview/2018-02-28-preview/examples/Requests_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
