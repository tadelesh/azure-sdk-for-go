//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmaps_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/maps/armmaps"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestAccounts_CreateOrUpdate(t *testing.T) {
	// From example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/CreateAccountManagedIdentity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Account with Managed Identities"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmaps.NewAccountsClient("21a9967a-e8a9-4656-a70b-96ff1c4d05a0", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myMapsAccount",
		armmaps.Account{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"test": to.Ptr("true"),
			},
			Identity: &armmaps.ManagedServiceIdentity{
				Type: to.Ptr(armmaps.ResourceIdentityTypeSystemAssignedUserAssigned),
				UserAssignedIdentities: map[string]*armmaps.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identityName": {},
				},
			},
			Kind: to.Ptr(armmaps.KindGen2),
			Properties: &armmaps.AccountProperties{
				DisableLocalAuth: to.Ptr(false),
				LinkedResources: []*armmaps.LinkedResource{
					{
						ID:         to.Ptr("/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.Storage/accounts/mystorageacc"),
						UniqueName: to.Ptr("myBatchStorageAccount"),
					},
					{
						ID:         to.Ptr("/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.Storage/accounts/mystorageacc"),
						UniqueName: to.Ptr("myBlobDataSource"),
					}},
			},
			SKU: &armmaps.SKU{
				Name: to.Ptr(armmaps.NameG2),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/CreateAccountManagedIdentity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmaps.Account{
			Name:     to.Ptr("myMapsAccount"),
			Type:     to.Ptr("Microsoft.Maps/accounts"),
			ID:       to.Ptr("/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.Maps/accounts/myMapsAccount"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"test": to.Ptr("true"),
			},
			Identity: &armmaps.ManagedServiceIdentity{
				Type:        to.Ptr(armmaps.ResourceIdentityTypeSystemAssignedUserAssigned),
				PrincipalID: to.Ptr("77f72dac-e0aa-484e-9acd-e5e7075310ef"),
				TenantID:    to.Ptr("06006684-60c1-4954-a20c-ffd8fbea7276"),
				UserAssignedIdentities: map[string]*armmaps.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identityName": {
						ClientID:    to.Ptr("b602d315-01b5-4265-af23-859edc4f2431"),
						PrincipalID: to.Ptr("ac287332-364a-41d9-a567-9ad86b9fc299"),
					},
				},
			},
			Kind: to.Ptr(armmaps.KindGen2),
			Properties: &armmaps.AccountProperties{
				DisableLocalAuth: to.Ptr(true),
				LinkedResources: []*armmaps.LinkedResource{
					{
						ID:         to.Ptr("/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.Storage/accounts/mystorageacc"),
						UniqueName: to.Ptr("myBatchStorageAccount"),
					},
					{
						ID:         to.Ptr("/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.Storage/accounts/mystorageacc"),
						UniqueName: to.Ptr("myBlobDataSource"),
					}},
				ProvisioningState: to.Ptr("Succeeded"),
				UniqueID:          to.Ptr("b2e763e6-d6f3-4858-9e2b-7cf8df85c593"),
			},
			SKU: &armmaps.SKU{
				Name: to.Ptr(armmaps.NameG2),
				Tier: to.Ptr("Standard"),
			},
			SystemData: &armmaps.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-02T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armmaps.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-02T01:01:01.1075056Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armmaps.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/CreateAccountManagedIdentity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/CreateAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Gen1 Account"},
	})
	client = armmaps.NewAccountsClient("21a9967a-e8a9-4656-a70b-96ff1c4d05a0", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myMapsAccount",
		armmaps.Account{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"test": to.Ptr("true"),
			},
			Kind: to.Ptr(armmaps.KindGen1),
			Properties: &armmaps.AccountProperties{
				Cors: &armmaps.CorsRules{
					CorsRules: []*armmaps.CorsRule{
						{
							AllowedOrigins: []*string{
								to.Ptr("http://www.contoso.com"),
								to.Ptr("http://www.fabrikam.com")},
						}},
				},
				DisableLocalAuth: to.Ptr(false),
			},
			SKU: &armmaps.SKU{
				Name: to.Ptr(armmaps.NameS0),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/CreateAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmaps.Account{
			Name:     to.Ptr("myMapsAccount"),
			Type:     to.Ptr("Microsoft.Maps/accounts"),
			ID:       to.Ptr("/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.Maps/accounts/myMapsAccount"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"test": to.Ptr("true"),
			},
			Kind: to.Ptr(armmaps.KindGen1),
			Properties: &armmaps.AccountProperties{
				Cors: &armmaps.CorsRules{
					CorsRules: []*armmaps.CorsRule{
						{
							AllowedOrigins: []*string{
								to.Ptr("http://www.contoso.com"),
								to.Ptr("http://www.fabrikam.com")},
						}},
				},
				DisableLocalAuth:  to.Ptr(false),
				ProvisioningState: to.Ptr("Succeeded"),
				UniqueID:          to.Ptr("b2e763e6-d6f3-4858-9e2b-7cf8df85c593"),
			},
			SKU: &armmaps.SKU{
				Name: to.Ptr(armmaps.NameS0),
				Tier: to.Ptr("Standard"),
			},
			SystemData: &armmaps.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-02T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armmaps.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-02T01:01:01.1075056Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armmaps.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/CreateAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/CreateAccountGen2.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Gen2 Account"},
	})
	client = armmaps.NewAccountsClient("21a9967a-e8a9-4656-a70b-96ff1c4d05a0", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myMapsAccount",
		armmaps.Account{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"test": to.Ptr("true"),
			},
			Kind: to.Ptr(armmaps.KindGen2),
			Properties: &armmaps.AccountProperties{
				Cors: &armmaps.CorsRules{
					CorsRules: []*armmaps.CorsRule{
						{
							AllowedOrigins: []*string{
								to.Ptr("http://www.contoso.com"),
								to.Ptr("http://www.fabrikam.com")},
						}},
				},
				DisableLocalAuth: to.Ptr(true),
			},
			SKU: &armmaps.SKU{
				Name: to.Ptr(armmaps.NameG2),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/CreateAccountGen2.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmaps.Account{
			Name:     to.Ptr("myMapsAccount"),
			Type:     to.Ptr("Microsoft.Maps/accounts"),
			ID:       to.Ptr("/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.Maps/accounts/myMapsAccount"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"test": to.Ptr("true"),
			},
			Kind: to.Ptr(armmaps.KindGen2),
			Properties: &armmaps.AccountProperties{
				Cors: &armmaps.CorsRules{
					CorsRules: []*armmaps.CorsRule{
						{
							AllowedOrigins: []*string{
								to.Ptr("http://www.contoso.com"),
								to.Ptr("http://www.fabrikam.com")},
						}},
				},
				DisableLocalAuth:  to.Ptr(true),
				ProvisioningState: to.Ptr("Succeeded"),
				UniqueID:          to.Ptr("b2e763e6-d6f3-4858-9e2b-7cf8df85c593"),
			},
			SKU: &armmaps.SKU{
				Name: to.Ptr(armmaps.NameG2),
				Tier: to.Ptr("Standard"),
			},
			SystemData: &armmaps.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-02T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armmaps.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-02T01:01:01.1075056Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armmaps.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/CreateAccountGen2.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Update(t *testing.T) {
	// From example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/UpdateAccountManagedIdentity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Account Managed Identities"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmaps.NewAccountsClient("21a9967a-e8a9-4656-a70b-96ff1c4d05a0", cred, &options)
	res, err := client.Update(ctx,
		"myResourceGroup",
		"myMapsAccount",
		armmaps.AccountUpdateParameters{
			Identity: &armmaps.ManagedServiceIdentity{
				Type: to.Ptr(armmaps.ResourceIdentityTypeSystemAssignedUserAssigned),
				UserAssignedIdentities: map[string]*armmaps.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identityName": {},
				},
			},
			Kind: to.Ptr(armmaps.KindGen2),
			Properties: &armmaps.AccountProperties{
				LinkedResources: []*armmaps.LinkedResource{
					{
						ID:         to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/accounts/{storageName}"),
						UniqueName: to.Ptr("myBatchStorageAccount"),
					}},
			},
			SKU: &armmaps.SKU{
				Name: to.Ptr(armmaps.NameG2),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/UpdateAccountManagedIdentity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmaps.Account{
			Name:     to.Ptr("myMapsAccount"),
			Type:     to.Ptr("Microsoft.Maps/accounts"),
			ID:       to.Ptr("/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.Maps/accounts/myMapsAccount"),
			Location: to.Ptr("eastus"),
			Identity: &armmaps.ManagedServiceIdentity{
				Type:        to.Ptr(armmaps.ResourceIdentityTypeSystemAssignedUserAssigned),
				PrincipalID: to.Ptr("77f72dac-e0aa-484e-9acd-e5e7075310ef"),
				TenantID:    to.Ptr("06006684-60c1-4954-a20c-ffd8fbea7276"),
				UserAssignedIdentities: map[string]*armmaps.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identityName": {
						ClientID:    to.Ptr("b602d315-01b5-4265-af23-859edc4f2431"),
						PrincipalID: to.Ptr("ac287332-364a-41d9-a567-9ad86b9fc299"),
					},
				},
			},
			Kind: to.Ptr(armmaps.KindGen2),
			Properties: &armmaps.AccountProperties{
				DisableLocalAuth: to.Ptr(false),
				LinkedResources: []*armmaps.LinkedResource{
					{
						ID:         to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/accounts/{storageName}"),
						UniqueName: to.Ptr("myBatchStorageAccount"),
					}},
				ProvisioningState: to.Ptr("Succeeded"),
				UniqueID:          to.Ptr("b2e763e6-d6f3-4858-9e2b-7cf8df85c593"),
			},
			SKU: &armmaps.SKU{
				Name: to.Ptr(armmaps.NameG2),
				Tier: to.Ptr("Standard"),
			},
			SystemData: &armmaps.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-02T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armmaps.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-02T01:01:01.1075056Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armmaps.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/UpdateAccountManagedIdentity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/UpdateAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Account Tags"},
	})
	client = armmaps.NewAccountsClient("21a9967a-e8a9-4656-a70b-96ff1c4d05a0", cred, &options)
	res, err = client.Update(ctx,
		"myResourceGroup",
		"myMapsAccount",
		armmaps.AccountUpdateParameters{
			Tags: map[string]*string{
				"specialTag": to.Ptr("true"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/UpdateAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmaps.Account{
			Name:     to.Ptr("myMapsAccount"),
			Type:     to.Ptr("Microsoft.Maps/accounts"),
			ID:       to.Ptr("/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.Maps/accounts/myMapsAccount"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"specialTag": to.Ptr("true"),
			},
			Kind: to.Ptr(armmaps.KindGen1),
			Properties: &armmaps.AccountProperties{
				DisableLocalAuth:  to.Ptr(false),
				ProvisioningState: to.Ptr("Succeeded"),
				UniqueID:          to.Ptr("b2e763e6-d6f3-4858-9e2b-7cf8df85c593"),
			},
			SKU: &armmaps.SKU{
				Name: to.Ptr(armmaps.NameS0),
				Tier: to.Ptr("Standard"),
			},
			SystemData: &armmaps.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-02T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armmaps.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-02T01:01:01.1075056Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armmaps.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/UpdateAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/UpdateAccountGen1.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update to Gen1 Account"},
	})
	client = armmaps.NewAccountsClient("21a9967a-e8a9-4656-a70b-96ff1c4d05a0", cred, &options)
	res, err = client.Update(ctx,
		"myResourceGroup",
		"myMapsAccount",
		armmaps.AccountUpdateParameters{
			Kind: to.Ptr(armmaps.KindGen1),
			SKU: &armmaps.SKU{
				Name: to.Ptr(armmaps.NameS1),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/UpdateAccountGen1.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmaps.Account{
			Name:     to.Ptr("myMapsAccount"),
			Type:     to.Ptr("Microsoft.Maps/accounts"),
			ID:       to.Ptr("/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.Maps/accounts/myMapsAccount"),
			Location: to.Ptr("global"),
			Kind:     to.Ptr(armmaps.KindGen1),
			Properties: &armmaps.AccountProperties{
				DisableLocalAuth:  to.Ptr(false),
				LinkedResources:   []*armmaps.LinkedResource{},
				ProvisioningState: to.Ptr("Succeeded"),
				UniqueID:          to.Ptr("b2e763e6-d6f3-4858-9e2b-7cf8df85c593"),
			},
			SKU: &armmaps.SKU{
				Name: to.Ptr(armmaps.NameS1),
				Tier: to.Ptr("Standard"),
			},
			SystemData: &armmaps.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-02T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armmaps.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-02T01:01:01.1075056Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armmaps.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/UpdateAccountGen1.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/UpdateAccountGen2.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update to Gen2 Account"},
	})
	client = armmaps.NewAccountsClient("21a9967a-e8a9-4656-a70b-96ff1c4d05a0", cred, &options)
	res, err = client.Update(ctx,
		"myResourceGroup",
		"myMapsAccount",
		armmaps.AccountUpdateParameters{
			Kind: to.Ptr(armmaps.KindGen2),
			SKU: &armmaps.SKU{
				Name: to.Ptr(armmaps.NameG2),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/UpdateAccountGen2.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmaps.Account{
			Name:     to.Ptr("myMapsAccount"),
			Type:     to.Ptr("Microsoft.Maps/accounts"),
			ID:       to.Ptr("/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.Maps/accounts/myMapsAccount"),
			Location: to.Ptr("global"),
			Kind:     to.Ptr(armmaps.KindGen2),
			Properties: &armmaps.AccountProperties{
				DisableLocalAuth:  to.Ptr(false),
				LinkedResources:   []*armmaps.LinkedResource{},
				ProvisioningState: to.Ptr("Succeeded"),
				UniqueID:          to.Ptr("b2e763e6-d6f3-4858-9e2b-7cf8df85c593"),
			},
			SKU: &armmaps.SKU{
				Name: to.Ptr(armmaps.NameG2),
				Tier: to.Ptr("Standard"),
			},
			SystemData: &armmaps.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-02T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armmaps.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-02T01:01:01.1075056Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armmaps.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/UpdateAccountGen2.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Delete(t *testing.T) {
	// From example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/DeleteAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteAccount"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmaps.NewAccountsClient("21a9967a-e8a9-4656-a70b-96ff1c4d05a0", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myMapsAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/DeleteAccount.json: %v", err)
	}
}

func TestAccounts_Get(t *testing.T) {
	// From example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/GetAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetAccount"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmaps.NewAccountsClient("21a9967a-e8a9-4656-a70b-96ff1c4d05a0", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myMapsAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/GetAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmaps.Account{
			Name:     to.Ptr("myMapsAccount"),
			Type:     to.Ptr("Microsoft.Maps/accounts"),
			ID:       to.Ptr("/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.Maps/accounts/myMapsAccount"),
			Location: to.Ptr("global"),
			Tags: map[string]*string{
				"test": to.Ptr("true"),
			},
			Kind: to.Ptr(armmaps.KindGen1),
			Properties: &armmaps.AccountProperties{
				DisableLocalAuth:  to.Ptr(false),
				LinkedResources:   []*armmaps.LinkedResource{},
				ProvisioningState: to.Ptr("Succeeded"),
				UniqueID:          to.Ptr("string"),
			},
			SKU: &armmaps.SKU{
				Name: to.Ptr(armmaps.NameS0),
				Tier: to.Ptr("Standard"),
			},
			SystemData: &armmaps.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-02T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armmaps.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-02T01:01:01.1075056Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armmaps.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/GetAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_ListByResourceGroup(t *testing.T) {
	// From example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/ListAccountsByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Accounts By Resource Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmaps.NewAccountsClient("21a9967a-e8a9-4656-a70b-96ff1c4d05a0", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/ListAccountsByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmaps.Accounts{
			Value: []*armmaps.Account{
				{
					Name:     to.Ptr("myMapsAccount2"),
					Type:     to.Ptr("Microsoft.Maps/accounts"),
					ID:       to.Ptr("/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.Maps/accounts/myMapsAccount2"),
					Location: to.Ptr("global"),
					Tags: map[string]*string{
						"test": to.Ptr("true"),
					},
					Kind: to.Ptr(armmaps.KindGen1),
					Properties: &armmaps.AccountProperties{
						DisableLocalAuth:  to.Ptr(false),
						ProvisioningState: to.Ptr("Succeeded"),
						UniqueID:          to.Ptr("b2e763e6-d6f3-4858-9e2b-7cf8df85c593"),
					},
					SKU: &armmaps.SKU{
						Name: to.Ptr(armmaps.NameS0),
						Tier: to.Ptr("Standard"),
					},
				},
				{
					Name:     to.Ptr("myMapsAccount"),
					Type:     to.Ptr("Microsoft.Maps/accounts"),
					ID:       to.Ptr("/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.Maps/accounts/myMapsAccount"),
					Location: to.Ptr("global"),
					Tags: map[string]*string{
						"test": to.Ptr("true"),
					},
					Kind: to.Ptr(armmaps.KindGen2),
					Properties: &armmaps.AccountProperties{
						DisableLocalAuth:  to.Ptr(true),
						ProvisioningState: to.Ptr("Succeeded"),
						UniqueID:          to.Ptr("b2e763e6-d6f3-4858-9e2b-7cf8df85c592"),
					},
					SKU: &armmaps.SKU{
						Name: to.Ptr(armmaps.NameG2),
						Tier: to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.Accounts) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.Accounts)
			t.Fatalf("Mock response is not equal to example response for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/ListAccountsByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_ListBySubscription(t *testing.T) {
	// From example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/ListAccountsBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Accounts By Subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmaps.NewAccountsClient("21a9967a-e8a9-4656-a70b-96ff1c4d05a0", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/ListAccountsBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmaps.Accounts{
			Value: []*armmaps.Account{
				{
					Name:     to.Ptr("myMapsAccount2"),
					Type:     to.Ptr("Microsoft.Maps/accounts"),
					ID:       to.Ptr("/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.Maps/accounts/myMapsAccount2"),
					Location: to.Ptr("global"),
					Tags: map[string]*string{
						"test": to.Ptr("true"),
					},
					Kind: to.Ptr(armmaps.KindGen1),
					Properties: &armmaps.AccountProperties{
						DisableLocalAuth:  to.Ptr(false),
						ProvisioningState: to.Ptr("Succeeded"),
						UniqueID:          to.Ptr("b2e763e6-d6f3-4858-9e2b-7cf8df85c593"),
					},
					SKU: &armmaps.SKU{
						Name: to.Ptr(armmaps.NameS0),
						Tier: to.Ptr("Standard"),
					},
				},
				{
					Name:     to.Ptr("myMapsAccount"),
					Type:     to.Ptr("Microsoft.Maps/accounts"),
					ID:       to.Ptr("/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.Maps/accounts/myMapsAccount"),
					Location: to.Ptr("global"),
					Tags: map[string]*string{
						"test": to.Ptr("true"),
					},
					Kind: to.Ptr(armmaps.KindGen2),
					Properties: &armmaps.AccountProperties{
						DisableLocalAuth:  to.Ptr(true),
						ProvisioningState: to.Ptr("Succeeded"),
						UniqueID:          to.Ptr("b2e763e6-d6f3-4858-9e2b-7cf8df85c592"),
					},
					SKU: &armmaps.SKU{
						Name: to.Ptr(armmaps.NameG2),
						Tier: to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.Accounts) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.Accounts)
			t.Fatalf("Mock response is not equal to example response for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/ListAccountsBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_ListSas(t *testing.T) {
	// From example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/AccountListSAS.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Account Sas"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmaps.NewAccountsClient("21a9967a-e8a9-4656-a70b-96ff1c4d05a0", cred, &options)
	res, err := client.ListSas(ctx,
		"myResourceGroup",
		"myMapsAccount",
		armmaps.AccountSasParameters{
			Expiry:           to.Ptr("2017-05-24T11:42:03.1567373Z"),
			MaxRatePerSecond: to.Ptr[int32](500),
			PrincipalID:      to.Ptr("e917f87b-324d-4728-98ed-e31d311a7d65"),
			Regions: []*string{
				to.Ptr("eastus")},
			SigningKey: to.Ptr(armmaps.SigningKeyPrimaryKey),
			Start:      to.Ptr("2017-05-24T10:42:03.1567373Z"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/AccountListSAS.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmaps.AccountSasToken{
			AccountSasToken: to.Ptr("accountSasToken"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccountSasToken) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountSasToken)
			t.Fatalf("Mock response is not equal to example response for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/AccountListSAS.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_ListKeys(t *testing.T) {
	// From example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/ListKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Keys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmaps.NewAccountsClient("21a9967a-e8a9-4656-a70b-96ff1c4d05a0", cred, &options)
	res, err := client.ListKeys(ctx,
		"myResourceGroup",
		"myMapsAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/ListKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmaps.AccountKeys{
			PrimaryKey:              to.Ptr("<primaryKey>"),
			PrimaryKeyLastUpdated:   to.Ptr("2021-07-02T01:01:01.1075056Z"),
			SecondaryKey:            to.Ptr("<secondaryKey>"),
			SecondaryKeyLastUpdated: to.Ptr("2021-07-02T01:01:01.1075056Z"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccountKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/ListKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_RegenerateKeys(t *testing.T) {
	// From example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/RegenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Regenerate Key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmaps.NewAccountsClient("21a9967a-e8a9-4656-a70b-96ff1c4d05a0", cred, &options)
	res, err := client.RegenerateKeys(ctx,
		"myResourceGroup",
		"myMapsAccount",
		armmaps.KeySpecification{
			KeyType: to.Ptr(armmaps.KeyTypePrimary),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/RegenerateKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmaps.AccountKeys{
			PrimaryKey:              to.Ptr("<primaryKey>"),
			PrimaryKeyLastUpdated:   to.Ptr("2021-07-02T01:01:01.1075056Z"),
			SecondaryKey:            to.Ptr("<secondaryKey>"),
			SecondaryKeyLastUpdated: to.Ptr("2021-07-02T01:01:01.1075056Z"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccountKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/RegenerateKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMaps_ListOperations(t *testing.T) {
	// From example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/GetOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmaps.NewClient("<subscription-id>", cred, &options)
	pager := client.ListOperations(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/GetOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmaps.Operations{
			Value: []*armmaps.OperationDetail{
				{
					Name: to.Ptr("Microsoft.Maps/register/action"),
					Display: &armmaps.OperationDisplay{
						Description: to.Ptr("Register the provider"),
						Operation:   to.Ptr("Register the provider"),
						Provider:    to.Ptr("Microsoft Maps"),
						Resource:    to.Ptr("Maps Account"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Maps/accounts/write"),
					Display: &armmaps.OperationDisplay{
						Description: to.Ptr("Create or update a Maps Account."),
						Operation:   to.Ptr("Create or update a Maps Account."),
						Provider:    to.Ptr("Microsoft Maps"),
						Resource:    to.Ptr("Maps Account"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Maps/accounts/read"),
					Display: &armmaps.OperationDisplay{
						Description: to.Ptr("Get a Maps Account."),
						Operation:   to.Ptr("Get a Maps Account."),
						Provider:    to.Ptr("Microsoft Maps"),
						Resource:    to.Ptr("Maps Account"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Maps/accounts/delete"),
					Display: &armmaps.OperationDisplay{
						Description: to.Ptr("Delete a Maps Account."),
						Operation:   to.Ptr("Delete a Maps Account."),
						Provider:    to.Ptr("Microsoft Maps"),
						Resource:    to.Ptr("Maps Account"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Maps/accounts/listKeys/action"),
					Display: &armmaps.OperationDisplay{
						Description: to.Ptr("List Maps Account keys"),
						Operation:   to.Ptr("List keys"),
						Provider:    to.Ptr("Microsoft Maps"),
						Resource:    to.Ptr("Maps Account"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Maps/accounts/regenerateKey/action"),
					Display: &armmaps.OperationDisplay{
						Description: to.Ptr("Generate new Maps Account primary or secondary key"),
						Operation:   to.Ptr("Generate new primary or secondary key"),
						Provider:    to.Ptr("Microsoft Maps"),
						Resource:    to.Ptr("Maps Account"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Maps/accounts/creators/write"),
					Display: &armmaps.OperationDisplay{
						Description: to.Ptr("Create or update a Maps Creator."),
						Operation:   to.Ptr("Create or update a Maps Creator."),
						Provider:    to.Ptr("Microsoft Maps"),
						Resource:    to.Ptr("Creator"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Maps/accounts/creators/read"),
					Display: &armmaps.OperationDisplay{
						Description: to.Ptr("Get a Maps Creator."),
						Operation:   to.Ptr("Get a Maps Creator."),
						Provider:    to.Ptr("Microsoft Maps"),
						Resource:    to.Ptr("Creator"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Maps/accounts/creators/delete"),
					Display: &armmaps.OperationDisplay{
						Description: to.Ptr("Delete a Maps Creator."),
						Operation:   to.Ptr("Delete a Maps Creator."),
						Provider:    to.Ptr("Microsoft Maps"),
						Resource:    to.Ptr("Creator"),
					},
					IsDataAction: to.Ptr(false),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.Operations) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.Operations)
			t.Fatalf("Mock response is not equal to example response for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/GetOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMaps_ListSubscriptionOperations(t *testing.T) {
	// From example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/GetOperationsSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Operations by Subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmaps.NewClient("21a9967a-e8a9-4656-a70b-96ff1c4d05a0", cred, &options)
	pager := client.ListSubscriptionOperations(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/GetOperationsSubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmaps.Operations{
			Value: []*armmaps.OperationDetail{
				{
					Name: to.Ptr("Microsoft.Maps/register/action"),
					Display: &armmaps.OperationDisplay{
						Description: to.Ptr("Register the provider"),
						Operation:   to.Ptr("Register the provider"),
						Provider:    to.Ptr("Microsoft Maps"),
						Resource:    to.Ptr("Maps Account"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Maps/accounts/write"),
					Display: &armmaps.OperationDisplay{
						Description: to.Ptr("Create or update a Maps Account."),
						Operation:   to.Ptr("Create or update a Maps Account."),
						Provider:    to.Ptr("Microsoft Maps"),
						Resource:    to.Ptr("Maps Account"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Maps/accounts/read"),
					Display: &armmaps.OperationDisplay{
						Description: to.Ptr("Get a Maps Account."),
						Operation:   to.Ptr("Get a Maps Account."),
						Provider:    to.Ptr("Microsoft Maps"),
						Resource:    to.Ptr("Maps Account"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Maps/accounts/delete"),
					Display: &armmaps.OperationDisplay{
						Description: to.Ptr("Delete a Maps Account."),
						Operation:   to.Ptr("Delete a Maps Account."),
						Provider:    to.Ptr("Microsoft Maps"),
						Resource:    to.Ptr("Maps Account"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Maps/accounts/listKeys/action"),
					Display: &armmaps.OperationDisplay{
						Description: to.Ptr("List Maps Account keys"),
						Operation:   to.Ptr("List keys"),
						Provider:    to.Ptr("Microsoft Maps"),
						Resource:    to.Ptr("Maps Account"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Maps/accounts/regenerateKey/action"),
					Display: &armmaps.OperationDisplay{
						Description: to.Ptr("Generate new Maps Account primary or secondary key"),
						Operation:   to.Ptr("Generate new primary or secondary key"),
						Provider:    to.Ptr("Microsoft Maps"),
						Resource:    to.Ptr("Maps Account"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Maps/accounts/creators/write"),
					Display: &armmaps.OperationDisplay{
						Description: to.Ptr("Create or update a Maps Creator."),
						Operation:   to.Ptr("Create or update a Maps Creator."),
						Provider:    to.Ptr("Microsoft Maps"),
						Resource:    to.Ptr("Creator"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Maps/accounts/creators/read"),
					Display: &armmaps.OperationDisplay{
						Description: to.Ptr("Get a Maps Creator."),
						Operation:   to.Ptr("Get a Maps Creator."),
						Provider:    to.Ptr("Microsoft Maps"),
						Resource:    to.Ptr("Creator"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.Maps/accounts/creators/delete"),
					Display: &armmaps.OperationDisplay{
						Description: to.Ptr("Delete a Maps Creator."),
						Operation:   to.Ptr("Delete a Maps Creator."),
						Provider:    to.Ptr("Microsoft Maps"),
						Resource:    to.Ptr("Creator"),
					},
					IsDataAction: to.Ptr(false),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.Operations) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.Operations)
			t.Fatalf("Mock response is not equal to example response for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/GetOperationsSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCreators_ListByAccount(t *testing.T) {
	// From example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/ListMapsCreatorsByAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Creator Resources By Account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmaps.NewCreatorsClient("21a9967a-e8a9-4656-a70b-96ff1c4d05a0", cred, &options)
	pager := client.ListByAccount("myResourceGroup",
		"myMapsAccount",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/ListMapsCreatorsByAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmaps.CreatorList{
			Value: []*armmaps.Creator{
				{
					Name:     to.Ptr("myCreator"),
					Type:     to.Ptr("Microsoft.Maps/accounts/creators"),
					ID:       to.Ptr("/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.Maps/accounts/myMapsAccount/creators/myCreator"),
					Location: to.Ptr("unitedstates"),
					Tags: map[string]*string{
						"test": to.Ptr("true"),
					},
					Properties: &armmaps.CreatorProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						StorageUnits:      to.Ptr[int32](5),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CreatorList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CreatorList)
			t.Fatalf("Mock response is not equal to example response for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/ListMapsCreatorsByAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCreators_CreateOrUpdate(t *testing.T) {
	// From example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/CreateMapsCreator.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Creator Resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmaps.NewCreatorsClient("21a9967a-e8a9-4656-a70b-96ff1c4d05a0", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myMapsAccount",
		"myCreator",
		armmaps.Creator{
			Location: to.Ptr("eastus2"),
			Tags: map[string]*string{
				"test": to.Ptr("true"),
			},
			Properties: &armmaps.CreatorProperties{
				StorageUnits: to.Ptr[int32](5),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/CreateMapsCreator.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmaps.Creator{
			Name:     to.Ptr("myCreator"),
			Type:     to.Ptr("Microsoft.Maps/accounts/creators"),
			ID:       to.Ptr("/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.Maps/accounts/myMapsAccount/creators/myCreator"),
			Location: to.Ptr("eastus2"),
			Tags: map[string]*string{
				"test": to.Ptr("true"),
			},
			Properties: &armmaps.CreatorProperties{
				ProvisioningState: to.Ptr("Succeeded"),
				StorageUnits:      to.Ptr[int32](5),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Creator) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Creator)
			t.Fatalf("Mock response is not equal to example response for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/CreateMapsCreator.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCreators_Update(t *testing.T) {
	// From example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/UpdateMapsCreator.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Creator Resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmaps.NewCreatorsClient("21a9967a-e8a9-4656-a70b-96ff1c4d05a0", cred, &options)
	res, err := client.Update(ctx,
		"myResourceGroup",
		"myMapsAccount",
		"myCreator",
		armmaps.CreatorUpdateParameters{
			Properties: &armmaps.CreatorProperties{
				StorageUnits: to.Ptr[int32](10),
			},
			Tags: map[string]*string{
				"specialTag": to.Ptr("true"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/UpdateMapsCreator.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmaps.Creator{
			Name:     to.Ptr("myCreator"),
			Type:     to.Ptr("Microsoft.Maps/accounts/creators"),
			ID:       to.Ptr("/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.Maps/accounts/myMapsAccount/creators/myCreator"),
			Location: to.Ptr("unitedstates"),
			Tags: map[string]*string{
				"specialTag": to.Ptr("true"),
			},
			Properties: &armmaps.CreatorProperties{
				ProvisioningState: to.Ptr("Succeeded"),
				StorageUnits:      to.Ptr[int32](10),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Creator) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Creator)
			t.Fatalf("Mock response is not equal to example response for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/UpdateMapsCreator.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCreators_Delete(t *testing.T) {
	// From example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/DeleteMapsCreator.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Creator Resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmaps.NewCreatorsClient("21a9967a-e8a9-4656-a70b-96ff1c4d05a0", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myMapsAccount",
		"myCreator",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/DeleteMapsCreator.json: %v", err)
	}
}

func TestCreators_Get(t *testing.T) {
	// From example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/GetMapsCreator.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Creator Resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmaps.NewCreatorsClient("21a9967a-e8a9-4656-a70b-96ff1c4d05a0", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myMapsAccount",
		"myCreator",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/GetMapsCreator.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmaps.Creator{
			Name:     to.Ptr("myCreator"),
			Type:     to.Ptr("Microsoft.Maps/accounts/creators"),
			ID:       to.Ptr("/subscriptions/21a9967a-e8a9-4656-a70b-96ff1c4d05a0/resourceGroups/myResourceGroup/providers/Microsoft.Maps/accounts/myMapsAccount/creators/myCreator"),
			Location: to.Ptr("unitedstates"),
			Tags: map[string]*string{
				"test": to.Ptr("true"),
			},
			Properties: &armmaps.CreatorProperties{
				ProvisioningState: to.Ptr("Succeeded"),
				StorageUnits:      to.Ptr[int32](5),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Creator) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Creator)
			t.Fatalf("Mock response is not equal to example response for example specification/maps/resource-manager/Microsoft.Maps/preview/2021-12-01-preview/examples/GetMapsCreator.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
