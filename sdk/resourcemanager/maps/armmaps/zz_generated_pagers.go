//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmaps

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// AccountsClientListByResourceGroupPager provides operations for iterating over paged responses.
type AccountsClientListByResourceGroupPager struct {
	client    *AccountsClient
	current   AccountsClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AccountsClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AccountsClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.Accounts.NextLink == nil || len(*p.current.Accounts.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AccountsClientListByResourceGroupPager) NextPage(ctx context.Context) (AccountsClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AccountsClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AccountsClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AccountsClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AccountsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return AccountsClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AccountsClientListBySubscriptionPager provides operations for iterating over paged responses.
type AccountsClientListBySubscriptionPager struct {
	client    *AccountsClient
	current   AccountsClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AccountsClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AccountsClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.Accounts.NextLink == nil || len(*p.current.Accounts.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AccountsClientListBySubscriptionPager) NextPage(ctx context.Context) (AccountsClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AccountsClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AccountsClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AccountsClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AccountsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return AccountsClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ClientListOperationsPager provides operations for iterating over paged responses.
type ClientListOperationsPager struct {
	client    *Client
	current   ClientListOperationsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ClientListOperationsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClientListOperationsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.Operations.NextLink == nil || len(*p.current.Operations.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ClientListOperationsPager) NextPage(ctx context.Context) (ClientListOperationsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ClientListOperationsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClientListOperationsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClientListOperationsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClientListOperationsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listOperationsHandleResponse(resp)
	if err != nil {
		return ClientListOperationsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ClientListSubscriptionOperationsPager provides operations for iterating over paged responses.
type ClientListSubscriptionOperationsPager struct {
	client    *Client
	current   ClientListSubscriptionOperationsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ClientListSubscriptionOperationsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClientListSubscriptionOperationsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.Operations.NextLink == nil || len(*p.current.Operations.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ClientListSubscriptionOperationsPager) NextPage(ctx context.Context) (ClientListSubscriptionOperationsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ClientListSubscriptionOperationsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClientListSubscriptionOperationsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClientListSubscriptionOperationsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClientListSubscriptionOperationsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listSubscriptionOperationsHandleResponse(resp)
	if err != nil {
		return ClientListSubscriptionOperationsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// CreatorsClientListByAccountPager provides operations for iterating over paged responses.
type CreatorsClientListByAccountPager struct {
	client    *CreatorsClient
	current   CreatorsClientListByAccountResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CreatorsClientListByAccountResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *CreatorsClientListByAccountPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CreatorList.NextLink == nil || len(*p.current.CreatorList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *CreatorsClientListByAccountPager) NextPage(ctx context.Context) (CreatorsClientListByAccountResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return CreatorsClientListByAccountResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return CreatorsClientListByAccountResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return CreatorsClientListByAccountResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return CreatorsClientListByAccountResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByAccountHandleResponse(resp)
	if err != nil {
		return CreatorsClientListByAccountResponse{}, err
	}
	p.current = result
	return p.current, nil
}
