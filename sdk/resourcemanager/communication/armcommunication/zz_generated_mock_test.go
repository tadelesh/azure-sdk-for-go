//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcommunication

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestCommunicationService_CheckNameAvailability(t *testing.T) {
	// From example Check name availability available
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCommunicationServiceClient(con,
		"12345")
	_, err := client.CheckNameAvailability(ctx,
		&CommunicationServiceCheckNameAvailabilityOptions{NameAvailabilityParameters: &NameAvailabilityParameters{
			Name: to.StringPtr("MyCommunicationService"),
			Type: to.StringPtr("Microsoft.Communication/CommunicationServices"),
		},
		})
	if err != nil {
		t.Fatal(err)
	}

	// From example Check name availability unavailable
	_, err = client.CheckNameAvailability(ctx,
		&CommunicationServiceCheckNameAvailabilityOptions{NameAvailabilityParameters: &NameAvailabilityParameters{
			Name: to.StringPtr("MyCommunicationService"),
			Type: to.StringPtr("Microsoft.Communication/CommunicationServices"),
		},
		})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCommunicationService_LinkNotificationHub(t *testing.T) {
	// From example Link notification hub
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCommunicationServiceClient(con,
		"12345")
	_, err := client.LinkNotificationHub(ctx,
		"MyResourceGroup",
		"MyCommunicationResource",
		&CommunicationServiceLinkNotificationHubOptions{LinkNotificationHubParameters: &LinkNotificationHubParameters{
			ConnectionString: to.StringPtr("Endpoint=sb://MyNamespace.servicebus.windows.net/;SharedAccessKey=abcd1234"),
			ResourceID:       to.StringPtr("/subscriptions/12345/resourceGroups/MyOtherResourceGroup/providers/Microsoft.NotificationHubs/namespaces/MyNamespace/notificationHubs/MyHub"),
		},
		})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCommunicationService_ListBySubscription(t *testing.T) {
	// From example List by subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCommunicationServiceClient(con,
		"12345")
	pager := client.ListBySubscription(&CommunicationServiceListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("CommunicationServiceResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("CommunicationServiceResource.ID should not be nil!")
			}
		}
	}
}

func TestCommunicationService_ListByResourceGroup(t *testing.T) {
	// From example List by resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCommunicationServiceClient(con,
		"12345")
	pager := client.ListByResourceGroup("MyResourceGroup",
		&CommunicationServiceListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("CommunicationServiceResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("CommunicationServiceResource.ID should not be nil!")
			}
		}
	}
}

func TestCommunicationService_Update(t *testing.T) {
	// From example Update resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCommunicationServiceClient(con,
		"12345")
	res, err := client.Update(ctx,
		"MyResourceGroup",
		"MyCommunicationResource",
		&CommunicationServiceUpdateOptions{Parameters: &CommunicationServiceResource{
			TaggedResource: TaggedResource{
				Tags: map[string]*string{
					"newTag": to.StringPtr("newVal"),
				},
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.CommunicationServiceResource.ID == nil {
		t.Fatal("CommunicationServiceResource.ID should not be nil!")
	}
}

func TestCommunicationService_Get(t *testing.T) {
	// From example Get resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCommunicationServiceClient(con,
		"12345")
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"MyCommunicationResource",
		&CommunicationServiceGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CommunicationServiceResource.ID == nil {
		t.Fatal("CommunicationServiceResource.ID should not be nil!")
	}
}

func TestCommunicationService_CreateOrUpdate(t *testing.T) {
	// From example Create or update resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCommunicationServiceClient(con,
		"12345")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"MyResourceGroup",
		"MyCommunicationResource",
		&CommunicationServiceBeginCreateOrUpdateOptions{Parameters: &CommunicationServiceResource{
			LocationResource: LocationResource{
				Location: to.StringPtr("Global"),
			},
			Properties: &CommunicationServiceProperties{
				DataLocation: to.StringPtr("United States"),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.CommunicationServiceResource.ID == nil {
		t.Fatal("CommunicationServiceResource.ID should not be nil!")
	}
}

func TestCommunicationService_Delete(t *testing.T) {
	// From example Delete resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCommunicationServiceClient(con,
		"12345")
	poller, err := client.BeginDelete(ctx,
		"MyResourceGroup",
		"MyCommunicationResource",
		&CommunicationServiceBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestCommunicationService_ListKeys(t *testing.T) {
	// From example List keys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCommunicationServiceClient(con,
		"12345")
	_, err := client.ListKeys(ctx,
		"MyResourceGroup",
		"MyCommunicationResource",
		&CommunicationServiceListKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCommunicationService_RegenerateKey(t *testing.T) {
	// From example Regenerate key
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCommunicationServiceClient(con,
		"12345")
	_, err := client.RegenerateKey(ctx,
		"MyResourceGroup",
		"MyCommunicationResource",
		RegenerateKeyParameters{
			KeyType: KeyTypePrimary.ToPtr(),
		},
		&CommunicationServiceRegenerateKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
