//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcommunication_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/communication/armcommunication"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestCommunicationService_CheckNameAvailability(t *testing.T) {
	// From example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/checkNameAvailabilityAvailable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check name availability available"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcommunication.NewServiceClient("12345", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		&armcommunication.ServiceClientCheckNameAvailabilityOptions{NameAvailabilityParameters: &armcommunication.NameAvailabilityParameters{
			Name: to.Ptr("MyCommunicationService"),
			Type: to.Ptr("Microsoft.Communication/CommunicationServices"),
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/checkNameAvailabilityAvailable.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcommunication.NameAvailability{
			Message:       to.Ptr("Requested name is available for the requested type"),
			NameAvailable: to.Ptr(true),
			Reason:        to.Ptr("NameAvailable"),
		}
		if !reflect.DeepEqual(exampleRes, res.NameAvailability) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NameAvailability)
			t.Fatalf("Mock response is not equal to example response for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/checkNameAvailabilityAvailable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/checkNameAvailabilityUnavailable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check name availability unavailable"},
	})
	client = armcommunication.NewServiceClient("12345", cred, &options)
	res, err = client.CheckNameAvailability(ctx,
		&armcommunication.ServiceClientCheckNameAvailabilityOptions{NameAvailabilityParameters: &armcommunication.NameAvailabilityParameters{
			Name: to.Ptr("MyCommunicationService"),
			Type: to.Ptr("Microsoft.Communication/CommunicationServices"),
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/checkNameAvailabilityUnavailable.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcommunication.NameAvailability{
			Message:       to.Ptr("Requested name is unavailable for the requested type"),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr("AlreadyExists"),
		}
		if !reflect.DeepEqual(exampleRes, res.NameAvailability) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NameAvailability)
			t.Fatalf("Mock response is not equal to example response for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/checkNameAvailabilityUnavailable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCommunicationService_LinkNotificationHub(t *testing.T) {
	// From example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/linkNotificationHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Link notification hub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcommunication.NewServiceClient("12345", cred, &options)
	res, err := client.LinkNotificationHub(ctx,
		"MyResourceGroup",
		"MyCommunicationResource",
		&armcommunication.ServiceClientLinkNotificationHubOptions{LinkNotificationHubParameters: &armcommunication.LinkNotificationHubParameters{
			ConnectionString: to.Ptr("Endpoint=sb://MyNamespace.servicebus.windows.net/;SharedAccessKey=abcd1234"),
			ResourceID:       to.Ptr("/subscriptions/12345/resourceGroups/MyOtherResourceGroup/providers/Microsoft.NotificationHubs/namespaces/MyNamespace/notificationHubs/MyHub"),
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/linkNotificationHub.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcommunication.LinkedNotificationHub{
			ResourceID: to.Ptr("/subscriptions/12345/resourceGroups/MyOtherResourceGroup/providers/Microsoft.NotificationHubs/namespaces/MyNamespace/notificationHubs/MyHub"),
		}
		if !reflect.DeepEqual(exampleRes, res.LinkedNotificationHub) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LinkedNotificationHub)
			t.Fatalf("Mock response is not equal to example response for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/linkNotificationHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCommunicationService_ListBySubscription(t *testing.T) {
	// From example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/listBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List by subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcommunication.NewServiceClient("12345", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/listBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcommunication.ServiceResourceList{
			Value: []*armcommunication.ServiceResource{
				{
					Properties: &armcommunication.ServiceProperties{
						DataLocation:      to.Ptr("United States"),
						HostName:          to.Ptr("mycommunicationservice.comms.azure.net"),
						ProvisioningState: to.Ptr(armcommunication.ProvisioningStateSucceeded),
						Version:           to.Ptr("0.2.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/listBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCommunicationService_ListByResourceGroup(t *testing.T) {
	// From example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/listByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcommunication.NewServiceClient("12345", cred, &options)
	pager := client.ListByResourceGroup("MyResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/listByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcommunication.ServiceResourceList{
			Value: []*armcommunication.ServiceResource{
				{
					Properties: &armcommunication.ServiceProperties{
						DataLocation:      to.Ptr("United States"),
						HostName:          to.Ptr("mycommunicationservice.comms.azure.net"),
						ProvisioningState: to.Ptr(armcommunication.ProvisioningStateSucceeded),
						Version:           to.Ptr("0.2.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/listByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCommunicationService_Update(t *testing.T) {
	// From example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcommunication.NewServiceClient("12345", cred, &options)
	res, err := client.Update(ctx,
		"MyResourceGroup",
		"MyCommunicationResource",
		&armcommunication.ServiceClientUpdateOptions{Parameters: &armcommunication.ServiceResource{
			Tags: map[string]*string{
				"newTag": to.Ptr("newVal"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcommunication.ServiceResource{
			Location: to.Ptr("Global"),
			Name:     to.Ptr("MyCommunicationResource"),
			Type:     to.Ptr("Microsoft.Communication/CommunicationServices"),
			ID:       to.Ptr("/subscriptions/12345/resourceGroups/MyResourceGroup/providers/Microsoft.Communication/CommunicationServices/MyCommunicationResource"),
			Tags: map[string]*string{
				"newTag": to.Ptr("newVal"),
			},
			Properties: &armcommunication.ServiceProperties{
				DataLocation:      to.Ptr("United States"),
				HostName:          to.Ptr("mycommunicationresource.communications.azure.com"),
				ProvisioningState: to.Ptr(armcommunication.ProvisioningStateSucceeded),
				Version:           to.Ptr("0.2.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCommunicationService_Get(t *testing.T) {
	// From example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcommunication.NewServiceClient("12345", cred, &options)
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"MyCommunicationResource",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcommunication.ServiceResource{
			Location: to.Ptr("Global"),
			Name:     to.Ptr("MyCommunicationResource"),
			Type:     to.Ptr("Microsoft.Communication/CommunicationServices"),
			ID:       to.Ptr("/subscriptions/12345/resourceGroups/MyResourceGroup/providers/Microsoft.Communication/CommunicationServices/MyCommunicationResource"),
			Properties: &armcommunication.ServiceProperties{
				DataLocation:      to.Ptr("United States"),
				HostName:          to.Ptr("mycommunicationservice.comms.azure.net"),
				ProvisioningState: to.Ptr(armcommunication.ProvisioningStateSucceeded),
				Version:           to.Ptr("0.2.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCommunicationService_CreateOrUpdate(t *testing.T) {
	// From example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcommunication.NewServiceClient("12345", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"MyResourceGroup",
		"MyCommunicationResource",
		&armcommunication.ServiceClientBeginCreateOrUpdateOptions{Parameters: &armcommunication.ServiceResource{
			Location: to.Ptr("Global"),
			Properties: &armcommunication.ServiceProperties{
				DataLocation: to.Ptr("United States"),
			},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/createOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/createOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcommunication.ServiceResource{
			Location: to.Ptr("Global"),
			Name:     to.Ptr("MyCommunicationResource"),
			Type:     to.Ptr("Microsoft.Communication/CommunicationServices"),
			ID:       to.Ptr("/subscriptions/12345/resourceGroups/MyResourceGroup/providers/Microsoft.Communication/CommunicationServices/MyCommunicationResource"),
			Properties: &armcommunication.ServiceProperties{
				DataLocation:      to.Ptr("United States"),
				HostName:          to.Ptr("mycommunicationresource.communications.azure.com"),
				ProvisioningState: to.Ptr(armcommunication.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCommunicationService_Delete(t *testing.T) {
	// From example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcommunication.NewServiceClient("12345", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"MyResourceGroup",
		"MyCommunicationResource",
		&armcommunication.ServiceClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/delete.json: %v", err)
	}
}

func TestCommunicationService_ListKeys(t *testing.T) {
	// From example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/listKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List keys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcommunication.NewServiceClient("12345", cred, &options)
	res, err := client.ListKeys(ctx,
		"MyResourceGroup",
		"MyCommunicationResource",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/listKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcommunication.ServiceKeys{
			PrimaryKey:   to.Ptr("<primaryKey>"),
			SecondaryKey: to.Ptr("<secondaryKey>"),
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/listKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCommunicationService_RegenerateKey(t *testing.T) {
	// From example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/regenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Regenerate key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcommunication.NewServiceClient("12345", cred, &options)
	res, err := client.RegenerateKey(ctx,
		"MyResourceGroup",
		"MyCommunicationResource",
		armcommunication.RegenerateKeyParameters{
			KeyType: to.Ptr(armcommunication.KeyTypePrimary),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/regenerateKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcommunication.ServiceKeys{
			PrimaryConnectionString: to.Ptr("endpoint=http://example.com;accesskey=1234"),
			PrimaryKey:              to.Ptr("1234"),
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/communication/resource-manager/Microsoft.Communication/stable/2020-08-20/examples/regenerateKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
