//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdataboxedge

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	// From example OperationsGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestAvailableSkus_List(t *testing.T) {
	// From example AvailableSkus
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAvailableSKUsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.List(&AvailableSKUsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestDevices_ListBySubscription(t *testing.T) {
	// From example DataBoxEdgeDeviceGetBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.ListBySubscription(&DevicesListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DataBoxEdgeDevice.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DataBoxEdgeDevice.ID should not be nil!")
			}
		}
	}
}

func TestDevices_ListByResourceGroup(t *testing.T) {
	// From example DataBoxEdgeDeviceGetByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.ListByResourceGroup("GroupForEdgeAutomation",
		&DevicesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DataBoxEdgeDevice.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DataBoxEdgeDevice.ID should not be nil!")
			}
		}
	}
}

func TestDevices_Get(t *testing.T) {
	// From example DataBoxEdgeDeviceGetByName
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		&DevicesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataBoxEdgeDevice.ID == nil {
		t.Fatal("DataBoxEdgeDevice.ID should not be nil!")
	}
}

func TestDevices_CreateOrUpdate(t *testing.T) {
	// From example DataBoxEdgeDevicePut
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.CreateOrUpdate(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		DataBoxEdgeDevice{
			Location: to.StringPtr("WUS"),
			SKU: &SKU{
				Name: SKUNameEdge.ToPtr(),
				Tier: SKUTierStandard.ToPtr(),
			},
			Tags: map[string]*string{},
		},
		&DevicesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataBoxEdgeDevice.ID == nil {
		t.Fatal("DataBoxEdgeDevice.ID should not be nil!")
	}
}

func TestDevices_Delete(t *testing.T) {
	// From example DataBoxEdgeDeviceDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		&DevicesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDevices_Update(t *testing.T) {
	// From example DataBoxEdgeDevicePatch
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Update(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		DataBoxEdgeDevicePatch{
			Properties: &DataBoxEdgeDevicePropertiesPatch{
				EdgeProfile: &EdgeProfilePatch{
					Subscription: &EdgeProfileSubscriptionPatch{
						ID: to.StringPtr("/subscriptions/0d44739e-0563-474f-97e7-24a0cdb23b29/resourceGroups/rapvs-rg/providers/Microsoft.AzureStack/linkedSubscriptions/ca014ddc-5cf2-45f8-b390-e901e4a0ae87"),
					},
				},
			},
		},
		&DevicesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataBoxEdgeDevice.ID == nil {
		t.Fatal("DataBoxEdgeDevice.ID should not be nil!")
	}
}

func TestDevices_DownloadUpdates(t *testing.T) {
	// From example DownloadUpdatesPost
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDownloadUpdates(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		&DevicesBeginDownloadUpdatesOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDevices_GenerateCertificate(t *testing.T) {
	// From example GenerateCertificate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.GenerateCertificate(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		&DevicesGenerateCertificateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDevices_GetExtendedInformation(t *testing.T) {
	// From example ExtendedInfoPost
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.GetExtendedInformation(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		&DevicesGetExtendedInformationOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataBoxEdgeDeviceExtendedInfo.ID == nil {
		t.Fatal("DataBoxEdgeDeviceExtendedInfo.ID should not be nil!")
	}
}

func TestDevices_InstallUpdates(t *testing.T) {
	// From example InstallUpdatesPost
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginInstallUpdates(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		&DevicesBeginInstallUpdatesOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDevices_GetNetworkSettings(t *testing.T) {
	// From example NetworkSettingsGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.GetNetworkSettings(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		&DevicesGetNetworkSettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkSettings.ID == nil {
		t.Fatal("NetworkSettings.ID should not be nil!")
	}
}

func TestDevices_ScanForUpdates(t *testing.T) {
	// From example ScanForUpdatesPost
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginScanForUpdates(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		&DevicesBeginScanForUpdatesOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDevices_CreateOrUpdateSecuritySettings(t *testing.T) {
	// From example CreateOrUpdateSecuritySettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreateOrUpdateSecuritySettings(ctx,
		"testedgedevice",
		"AzureVM",
		SecuritySettings{
			Properties: &SecuritySettingsProperties{
				DeviceAdminPassword: &AsymmetricEncryptedSecret{
					EncryptionAlgorithm:      EncryptionAlgorithmAES256.ToPtr(),
					EncryptionCertThumbprint: to.StringPtr("<encryptionThumprint>"),
					Value:                    to.StringPtr("<deviceAdminPassword>"),
				},
			},
		},
		&DevicesBeginCreateOrUpdateSecuritySettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDevices_UpdateExtendedInformation(t *testing.T) {
	// From example GetUpdateExtendedInfo
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.UpdateExtendedInformation(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		DataBoxEdgeDeviceExtendedInfoPatch{},
		&DevicesUpdateExtendedInformationOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataBoxEdgeDeviceExtendedInfo.ID == nil {
		t.Fatal("DataBoxEdgeDeviceExtendedInfo.ID should not be nil!")
	}
}

func TestDevices_GetUpdateSummary(t *testing.T) {
	// From example UpdateSummaryGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.GetUpdateSummary(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		&DevicesGetUpdateSummaryOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.UpdateSummary.ID == nil {
		t.Fatal("UpdateSummary.ID should not be nil!")
	}
}

func TestDevices_UploadCertificate(t *testing.T) {
	// From example UploadCertificatePost
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDevicesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.UploadCertificate(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		UploadCertificateRequest{
			Properties: &RawCertificateData{
				Certificate: to.StringPtr("MIIC9DCCAdygAwIBAgIQWJae7GNjiI9Mcv/gJyrOPTANBgkqhkiG9w0BAQUFADASMRAwDgYDVQQDDAdXaW5kb3dzMB4XDTE4MTEyNzAwMTA0NVoXDTIxMTEyODAwMTA0NVowEjEQMA4GA1UEAwwHV2luZG93czCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKxkRExqxf0qH1avnyORptIbRC2yQwqe3EIbJ2FPKr5jtAppGeX/dGKrFSnX+7/0HFr77aJHafdpEAtOiLyJ4zCAVs0obZCCIq4qJdmjYUTU0UXH/w/YzXfQA0d9Zh9AN+NJBX9xj05NzgsT24fkgsK2v6mWJQXT7YcWAsl5sEYPnx1e+MrupNyVSL/RUJmrS+etJSysHtFeWRhsUhVAs1DD5ExJvBLU3WH0IsojEvpXcjrutB5/MDQNrd/StGI6WovoSSPH7FyT9tgERx+q+Yg3YUGzfaIPCctlrRGehcdtzdNoKd0rsX62yCq0U6POoSfwe22NJu41oAUMd7e6R8cCAwEAAaNGMEQwEwYDVR0lBAwwCgYIKwYBBQUHAwIwHQYDVR0OBBYEFDd0VxnS3LnMIfwc7xW4b4IZWG5GMA4GA1UdDwEB/wQEAwIFIDANBgkqhkiG9w0BAQUFAAOCAQEAPQRby2u9celvtvL/DLEb5Vt3/tPStRQC5MyTD62L5RT/q8E6EMCXVZNkXF5WlWucLJi/18tY+9PNgP9xWLJh7kpSWlWdi9KPtwMqKDlEH8L2TnQdjimt9XuiCrTnoFy/1X2BGLY/rCaUJNSd15QCkz2xeW+Z+YSk2GwAc/A/4YfNpqSIMfNuPrT76o02VdD9WmJUA3fS/HY0sU9qgQRS/3F5/0EPS+HYQ0SvXCK9tggcCd4O050ytNBMJC9qMOJ7yE0iOrFfOJSCfDAuPhn/rHFh79Kn1moF+/CE+nc0/2RPiLC8r54/rt5dYyyxJDfXg0a3VrrX39W69WZGW5OXiw=="),
			},
		},
		&DevicesUploadCertificateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAlerts_ListByDataBoxEdgeDevice(t *testing.T) {
	// From example AlertGetAllInDevice
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAlertsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.ListByDataBoxEdgeDevice("testedgedevice",
		"GroupForEdgeAutomation",
		&AlertsListByDataBoxEdgeDeviceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Alert.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Alert.ID should not be nil!")
			}
		}
	}
}

func TestAlerts_Get(t *testing.T) {
	// From example AlertGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAlertsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"testedgedevice",
		"159a00c7-8543-4343-9435-263ac87df3bb",
		"GroupForEdgeAutomation",
		&AlertsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Alert.ID == nil {
		t.Fatal("Alert.ID should not be nil!")
	}
}

func TestBandwidthSchedules_ListByDataBoxEdgeDevice(t *testing.T) {
	// From example BandwidthScheduleGetAllInDevice
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBandwidthSchedulesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.ListByDataBoxEdgeDevice("testedgedevice",
		"GroupForEdgeAutomation",
		&BandwidthSchedulesListByDataBoxEdgeDeviceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("BandwidthSchedule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("BandwidthSchedule.ID should not be nil!")
			}
		}
	}
}

func TestBandwidthSchedules_Get(t *testing.T) {
	// From example BandwidthScheduleGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBandwidthSchedulesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"testedgedevice",
		"bandwidth-1",
		"GroupForEdgeAutomation",
		&BandwidthSchedulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BandwidthSchedule.ID == nil {
		t.Fatal("BandwidthSchedule.ID should not be nil!")
	}
}

func TestBandwidthSchedules_CreateOrUpdate(t *testing.T) {
	// From example BandwidthSchedulePut
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBandwidthSchedulesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testedgedevice",
		"bandwidth-1",
		"GroupForEdgeAutomation",
		BandwidthSchedule{
			Properties: &BandwidthScheduleProperties{
				Days: []*DayOfWeek{
					DayOfWeekSunday.ToPtr(),
					DayOfWeekMonday.ToPtr()},
				RateInMbps: to.Int32Ptr(100),
				Start:      to.StringPtr("0:0:0"),
				Stop:       to.StringPtr("13:59:0"),
			},
		},
		&BandwidthSchedulesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BandwidthSchedule.ID == nil {
		t.Fatal("BandwidthSchedule.ID should not be nil!")
	}
}

func TestBandwidthSchedules_Delete(t *testing.T) {
	// From example BandwidthScheduleDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBandwidthSchedulesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"bandwidth-1",
		"GroupForEdgeAutomation",
		&BandwidthSchedulesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDiagnosticSettings_GetDiagnosticProactiveLogCollectionSettings(t *testing.T) {
	// From example GetDiagnosticProactiveLogCollectionSettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticSettingsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.GetDiagnosticProactiveLogCollectionSettings(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		&DiagnosticSettingsGetDiagnosticProactiveLogCollectionSettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticProactiveLogCollectionSettings.ID == nil {
		t.Fatal("DiagnosticProactiveLogCollectionSettings.ID should not be nil!")
	}
}

func TestDiagnosticSettings_UpdateDiagnosticProactiveLogCollectionSettings(t *testing.T) {
	// From example UpdateDiagnosticProactiveLogCollectionSettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticSettingsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginUpdateDiagnosticProactiveLogCollectionSettings(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		DiagnosticProactiveLogCollectionSettings{
			Properties: &ProactiveLogCollectionSettingsProperties{
				UserConsent: ProactiveDiagnosticsConsentEnabled.ToPtr(),
			},
		},
		&DiagnosticSettingsBeginUpdateDiagnosticProactiveLogCollectionSettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDiagnosticSettings_GetDiagnosticRemoteSupportSettings(t *testing.T) {
	// From example GetDiagnosticRemoteSupportSettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticSettingsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.GetDiagnosticRemoteSupportSettings(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		&DiagnosticSettingsGetDiagnosticRemoteSupportSettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticRemoteSupportSettings.ID == nil {
		t.Fatal("DiagnosticRemoteSupportSettings.ID should not be nil!")
	}
}

func TestDiagnosticSettings_UpdateDiagnosticRemoteSupportSettings(t *testing.T) {
	// From example UpdateDiagnosticRemoteSupportSettings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticSettingsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginUpdateDiagnosticRemoteSupportSettings(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		DiagnosticRemoteSupportSettings{
			Properties: &DiagnosticRemoteSupportSettingsProperties{
				RemoteSupportSettingsList: []*RemoteSupportSettings{
					{
						AccessLevel:              AccessLevelReadWrite.ToPtr(),
						ExpirationTimeStampInUTC: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-07T00:00:00+00:00"); return t }()),
						RemoteApplicationType:    RemoteApplicationTypePowershell.ToPtr(),
					}},
			},
		},
		&DiagnosticSettingsBeginUpdateDiagnosticRemoteSupportSettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestJobs_Get(t *testing.T) {
	// From example JobsGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"testedgedevice",
		"159a00c7-8543-4343-9435-263ac87df3bb",
		"GroupForEdgeAutomation",
		&JobsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Job.ID == nil {
		t.Fatal("Job.ID should not be nil!")
	}
}

func TestNodes_ListByDataBoxEdgeDevice(t *testing.T) {
	// From example NodesGetAllInDevice
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNodesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.ListByDataBoxEdgeDevice("testedgedevice",
		"GroupForEdgeAutomation",
		&NodesListByDataBoxEdgeDeviceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Node.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Node.ID should not be nil!")
			}
		}
	}
}

func TestOperationsStatus_Get(t *testing.T) {
	// From example OperationsStatusGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsStatusClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"testedgedevice",
		"159a00c7-8543-4343-9435-263ac87df3bb",
		"GroupForEdgeAutomation",
		&OperationsStatusGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Job.ID == nil {
		t.Fatal("Job.ID should not be nil!")
	}
}

func TestOrders_ListByDataBoxEdgeDevice(t *testing.T) {
	// From example OrderGetAllInDevice
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOrdersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.ListByDataBoxEdgeDevice("testedgedevice",
		"GroupForEdgeAutomation",
		&OrdersListByDataBoxEdgeDeviceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Order.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Order.ID should not be nil!")
			}
		}
	}
}

func TestOrders_Get(t *testing.T) {
	// From example OrderGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOrdersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		&OrdersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Order.ID == nil {
		t.Fatal("Order.ID should not be nil!")
	}
}

func TestOrders_CreateOrUpdate(t *testing.T) {
	// From example OrderPut
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOrdersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		Order{
			Properties: &OrderProperties{
				ContactInformation: &ContactDetails{
					CompanyName:   to.StringPtr("Microsoft"),
					ContactPerson: to.StringPtr("John Mcclane"),
					EmailList: []*string{
						to.StringPtr("john@microsoft.com")},
					Phone: to.StringPtr("(800) 426-9400"),
				},
				ShippingAddress: &Address{
					AddressLine1: to.StringPtr("Microsoft Corporation"),
					AddressLine2: to.StringPtr("One Microsoft Way"),
					AddressLine3: to.StringPtr("Redmond"),
					City:         to.StringPtr("WA"),
					Country:      to.StringPtr("USA"),
					PostalCode:   to.StringPtr("98052"),
					State:        to.StringPtr("WA"),
				},
			},
		},
		&OrdersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Order.ID == nil {
		t.Fatal("Order.ID should not be nil!")
	}
}

func TestOrders_Delete(t *testing.T) {
	// From example OrderDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOrdersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		&OrdersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestOrders_ListDCAccessCode(t *testing.T) {
	// From example GetDCAccessCode
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOrdersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.ListDCAccessCode(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		&OrdersListDCAccessCodeOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRoles_ListByDataBoxEdgeDevice(t *testing.T) {
	// From example RoleGetAllInDevice
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRolesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.ListByDataBoxEdgeDevice("testedgedevice",
		"GroupForEdgeAutomation",
		&RolesListByDataBoxEdgeDeviceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Role.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Role.ID should not be nil!")
			}
		}
	}
}

func TestRoles_Get(t *testing.T) {
	// From example RoleGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRolesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"testedgedevice",
		"IoTRole1",
		"GroupForEdgeAutomation",
		&RolesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Role.ID == nil {
		t.Fatal("Role.ID should not be nil!")
	}
}

func TestRoles_CreateOrUpdate(t *testing.T) {
	// From example RolePut
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRolesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testedgedevice",
		"IoTRole1",
		"GroupForEdgeAutomation",
		IoTRole{
			Role: Role{
				Kind: RoleTypesIOT.ToPtr(),
			},
			Properties: &IoTRoleProperties{
				HostPlatform: PlatformTypeLinux.ToPtr(),
				IoTDeviceDetails: &IoTDeviceInfo{
					Authentication: &Authentication{
						SymmetricKey: &SymmetricKey{
							ConnectionString: &AsymmetricEncryptedSecret{
								EncryptionAlgorithm:      EncryptionAlgorithmAES256.ToPtr(),
								EncryptionCertThumbprint: to.StringPtr("348586569999244"),
								Value:                    to.StringPtr("Encrypted<<HostName=iothub.azure-devices.net;DeviceId=iotDevice;SharedAccessKey=2C750FscEas3JmQ8Bnui5yQWZPyml0/UiRt1bQwd8=>>"),
							},
						},
					},
					DeviceID:   to.StringPtr("iotdevice"),
					IoTHostHub: to.StringPtr("iothub.azure-devices.net"),
				},
				IoTEdgeDeviceDetails: &IoTDeviceInfo{
					Authentication: &Authentication{
						SymmetricKey: &SymmetricKey{
							ConnectionString: &AsymmetricEncryptedSecret{
								EncryptionAlgorithm:      EncryptionAlgorithmAES256.ToPtr(),
								EncryptionCertThumbprint: to.StringPtr("1245475856069999244"),
								Value:                    to.StringPtr("Encrypted<<HostName=iothub.azure-devices.net;DeviceId=iotEdge;SharedAccessKey=2C750FscEas3JmQ8Bnui5yQWZPyml0/UiRt1bQwd8=>>"),
							},
						},
					},
					DeviceID:   to.StringPtr("iotEdge"),
					IoTHostHub: to.StringPtr("iothub.azure-devices.net"),
				},
				RoleStatus:    RoleStatusEnabled.ToPtr(),
				ShareMappings: []*MountPointMap{},
			},
		},
		&RolesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Role.ID == nil {
		t.Fatal("Role.ID should not be nil!")
	}
}

func TestRoles_Delete(t *testing.T) {
	// From example RoleDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRolesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"IoTRole1",
		"GroupForEdgeAutomation",
		&RolesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestAddons_ListByRole(t *testing.T) {
	// From example RoleListAddOns
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAddonsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.ListByRole("testedgedevice",
		"IoTRole1",
		"GroupForEdgeAutomation",
		&AddonsListByRoleOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Addon.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Addon.ID should not be nil!")
			}
		}
	}
}

func TestAddons_Get(t *testing.T) {
	// From example GetAddOns
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAddonsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"testedgedevice",
		"KubernetesRole",
		"arcName",
		"GroupForEdgeAutomation",
		&AddonsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Addon.ID == nil {
		t.Fatal("Addon.ID should not be nil!")
	}
}

func TestAddons_CreateOrUpdate(t *testing.T) {
	// From example PutAddOns
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAddonsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testedgedevice",
		"KubernetesRole",
		"arcName",
		"GroupForEdgeAutomation",
		ArcAddon{
			Addon: Addon{
				Kind: AddonTypeArcForKubernetes.ToPtr(),
			},
			Properties: &ArcAddonProperties{
				ResourceGroupName: to.StringPtr("GroupForEdgeAutomation"),
				ResourceLocation:  to.StringPtr("EastUS"),
				ResourceName:      to.StringPtr("testedgedevice"),
				SubscriptionID:    to.StringPtr("4385cf00-2d3a-425a-832f-f4285b1c9dce"),
			},
		},
		&AddonsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Addon.ID == nil {
		t.Fatal("Addon.ID should not be nil!")
	}
}

func TestAddons_Delete(t *testing.T) {
	// From example DeleteAddOns
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAddonsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"KubernetesRole",
		"arcName",
		"GroupForEdgeAutomation",
		&AddonsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestMonitoringConfig_List(t *testing.T) {
	// From example ListMonitoringConfig
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMonitoringConfigClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.List("testedgedevice",
		"testrole",
		"GroupForEdgeAutomation",
		&MonitoringConfigListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("MonitoringMetricConfiguration.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("MonitoringMetricConfiguration.ID should not be nil!")
			}
		}
	}
}

func TestMonitoringConfig_Get(t *testing.T) {
	// From example GetMonitoringConfig
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMonitoringConfigClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"testedgedevice",
		"testrole",
		"GroupForEdgeAutomation",
		&MonitoringConfigGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MonitoringMetricConfiguration.ID == nil {
		t.Fatal("MonitoringMetricConfiguration.ID should not be nil!")
	}
}

func TestMonitoringConfig_CreateOrUpdate(t *testing.T) {
	// From example PutMonitoringConfig
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMonitoringConfigClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testedgedevice",
		"testrole",
		"GroupForEdgeAutomation",
		MonitoringMetricConfiguration{
			Properties: &MonitoringMetricConfigurationProperties{
				MetricConfigurations: []*MetricConfiguration{
					{
						CounterSets: []*MetricCounterSet{
							{
								Counters: []*MetricCounter{
									{
										Name: to.StringPtr("test"),
									}},
							}},
						MdmAccount:      to.StringPtr("test"),
						MetricNameSpace: to.StringPtr("test"),
						ResourceID:      to.StringPtr("test"),
					}},
			},
		},
		&MonitoringConfigBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.MonitoringMetricConfiguration.ID == nil {
		t.Fatal("MonitoringMetricConfiguration.ID should not be nil!")
	}
}

func TestMonitoringConfig_Delete(t *testing.T) {
	// From example DeleteMonitoringConfig
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMonitoringConfigClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"testrole",
		"GroupForEdgeAutomation",
		&MonitoringConfigBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestShares_ListByDataBoxEdgeDevice(t *testing.T) {
	// From example ShareGetAllInDevice
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSharesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.ListByDataBoxEdgeDevice("testedgedevice",
		"GroupForEdgeAutomation",
		&SharesListByDataBoxEdgeDeviceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Share.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Share.ID should not be nil!")
			}
		}
	}
}

func TestShares_Get(t *testing.T) {
	// From example ShareGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSharesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"testedgedevice",
		"smbshare",
		"GroupForEdgeAutomation",
		&SharesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Share.ID == nil {
		t.Fatal("Share.ID should not be nil!")
	}
}

func TestShares_CreateOrUpdate(t *testing.T) {
	// From example SharePut
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSharesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testedgedevice",
		"smbshare",
		"GroupForEdgeAutomation",
		Share{
			Properties: &ShareProperties{
				Description:    to.StringPtr(""),
				AccessProtocol: ShareAccessProtocolSMB.ToPtr(),
				AzureContainerInfo: &AzureContainerInfo{
					ContainerName:              to.StringPtr("testContainerSMB"),
					DataFormat:                 AzureContainerDataFormatBlockBlob.ToPtr(),
					StorageAccountCredentialID: to.StringPtr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/storageAccountCredentials/sac1"),
				},
				DataPolicy:       DataPolicyCloud.ToPtr(),
				MonitoringStatus: MonitoringStatusEnabled.ToPtr(),
				ShareStatus:      ShareStatusOffline.ToPtr(),
				UserAccessRights: []*UserAccessRight{
					{
						AccessType: ShareAccessTypeChange.ToPtr(),
						UserID:     to.StringPtr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/users/user2"),
					}},
			},
		},
		&SharesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Share.ID == nil {
		t.Fatal("Share.ID should not be nil!")
	}
}

func TestShares_Delete(t *testing.T) {
	// From example ShareDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSharesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"smbshare",
		"GroupForEdgeAutomation",
		&SharesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestShares_Refresh(t *testing.T) {
	// From example ShareRefreshPost
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSharesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginRefresh(ctx,
		"testedgedevice",
		"smbshare",
		"GroupForEdgeAutomation",
		&SharesBeginRefreshOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestStorageAccountCredentials_ListByDataBoxEdgeDevice(t *testing.T) {
	// From example SACGetAllInDevice
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageAccountCredentialsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.ListByDataBoxEdgeDevice("testedgedevice",
		"GroupForEdgeAutomation",
		&StorageAccountCredentialsListByDataBoxEdgeDeviceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("StorageAccountCredential.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("StorageAccountCredential.ID should not be nil!")
			}
		}
	}
}

func TestStorageAccountCredentials_Get(t *testing.T) {
	// From example SACGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageAccountCredentialsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"testedgedevice",
		"sac1",
		"GroupForEdgeAutomation",
		&StorageAccountCredentialsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StorageAccountCredential.ID == nil {
		t.Fatal("StorageAccountCredential.ID should not be nil!")
	}
}

func TestStorageAccountCredentials_CreateOrUpdate(t *testing.T) {
	// From example SACPut
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageAccountCredentialsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testedgedevice",
		"sac1",
		"GroupForEdgeAutomation",
		StorageAccountCredential{
			Properties: &StorageAccountCredentialProperties{
				AccountKey: &AsymmetricEncryptedSecret{
					EncryptionAlgorithm:      EncryptionAlgorithmAES256.ToPtr(),
					EncryptionCertThumbprint: to.StringPtr("2A9D8D6BE51574B5461230AEF02F162C5F01AD31"),
					Value:                    to.StringPtr("lAeZEYi6rNP1/EyNaVUYmTSZEYyaIaWmwUsGwek0+xiZj54GM9Ue9/UA2ed/ClC03wuSit2XzM/cLRU5eYiFBwks23rGwiQOr3sruEL2a74EjPD050xYjA6M1I2hu/w2yjVHhn5j+DbXS4Xzi+rHHNZK3DgfDO3PkbECjPck+PbpSBjy9+6Mrjcld5DIZhUAeMlMHrFlg+WKRKB14o/og56u5/xX6WKlrMLEQ+y6E18dUwvWs2elTNoVO8PBE8SM/CfooX4AMNvaNdSObNBPdP+F6Lzc556nFNWXrBLRt0vC7s9qTiVRO4x/qCNaK/B4y7IqXMllwQFf4Np9UQ2ECA=="),
				},
				AccountType: AccountTypeBlobStorage.ToPtr(),
				Alias:       to.StringPtr("sac1"),
				SSLStatus:   SSLStatusDisabled.ToPtr(),
				UserName:    to.StringPtr("cisbvt"),
			},
		},
		&StorageAccountCredentialsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.StorageAccountCredential.ID == nil {
		t.Fatal("StorageAccountCredential.ID should not be nil!")
	}
}

func TestStorageAccountCredentials_Delete(t *testing.T) {
	// From example SACDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageAccountCredentialsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"sac1",
		"GroupForEdgeAutomation",
		&StorageAccountCredentialsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestStorageAccounts_ListByDataBoxEdgeDevice(t *testing.T) {
	// From example StorageAccountGetAllInDevice
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageAccountsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.ListByDataBoxEdgeDevice("testedgedevice",
		"GroupForEdgeAutomation",
		&StorageAccountsListByDataBoxEdgeDeviceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("StorageAccount.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("StorageAccount.ID should not be nil!")
			}
		}
	}
}

func TestStorageAccounts_Get(t *testing.T) {
	// From example StorageAccountGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageAccountsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"testedgedevice",
		"blobstorageaccount1",
		"GroupForEdgeAutomation",
		&StorageAccountsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StorageAccount.ID == nil {
		t.Fatal("StorageAccount.ID should not be nil!")
	}
}

func TestStorageAccounts_CreateOrUpdate(t *testing.T) {
	// From example StorageAccountPut
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageAccountsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testedgedevice",
		"blobstorageaccount1",
		"GroupForEdgeAutomation",
		StorageAccount{
			Properties: &StorageAccountProperties{
				Description:                to.StringPtr("It's an awesome storage account"),
				DataPolicy:                 DataPolicyCloud.ToPtr(),
				StorageAccountCredentialID: to.StringPtr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForDataBoxEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/storageAccountCredentials/cisbvt"),
				StorageAccountStatus:       StorageAccountStatusOK.ToPtr(),
			},
		},
		&StorageAccountsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.StorageAccount.ID == nil {
		t.Fatal("StorageAccount.ID should not be nil!")
	}
}

func TestStorageAccounts_Delete(t *testing.T) {
	// From example StorageAccountDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageAccountsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"storageaccount1",
		"GroupForEdgeAutomation",
		&StorageAccountsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestContainers_ListByStorageAccount(t *testing.T) {
	// From example ContainerListAllInDevice
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContainersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.ListByStorageAccount("testedgedevice",
		"storageaccount1",
		"GroupForEdgeAutomation",
		&ContainersListByStorageAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Container.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Container.ID should not be nil!")
			}
		}
	}
}

func TestContainers_Get(t *testing.T) {
	// From example ContainerGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContainersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"testedgedevice",
		"storageaccount1",
		"blobcontainer1",
		"GroupForEdgeAutomation",
		&ContainersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Container.ID == nil {
		t.Fatal("Container.ID should not be nil!")
	}
}

func TestContainers_CreateOrUpdate(t *testing.T) {
	// From example ContainerPut
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContainersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testedgedevice",
		"storageaccount1",
		"blobcontainer1",
		"GroupForEdgeAutomation",
		Container{
			Properties: &ContainerProperties{
				DataFormat: AzureContainerDataFormatBlockBlob.ToPtr(),
			},
		},
		&ContainersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Container.ID == nil {
		t.Fatal("Container.ID should not be nil!")
	}
}

func TestContainers_Delete(t *testing.T) {
	// From example ContainerDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContainersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"storageaccount1",
		"blobcontainer1",
		"GroupForEdgeAutomation",
		&ContainersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestContainers_Refresh(t *testing.T) {
	// From example ContainerRefresh
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContainersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginRefresh(ctx,
		"testedgedevice",
		"storageaccount1",
		"blobcontainer1",
		"GroupForEdgeAutomation",
		&ContainersBeginRefreshOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestTriggers_ListByDataBoxEdgeDevice(t *testing.T) {
	// From example TriggerGetAllInDevice
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTriggersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.ListByDataBoxEdgeDevice("testedgedevice",
		"GroupForEdgeAutomation",
		&TriggersListByDataBoxEdgeDeviceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Trigger.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Trigger.ID should not be nil!")
			}
		}
	}
}

func TestTriggers_Get(t *testing.T) {
	// From example TriggerGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTriggersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"testedgedevice",
		"trigger1",
		"GroupForEdgeAutomation",
		&TriggersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Trigger.ID == nil {
		t.Fatal("Trigger.ID should not be nil!")
	}
}

func TestTriggers_CreateOrUpdate(t *testing.T) {
	// From example TriggerPut
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTriggersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testedgedevice",
		"trigger1",
		"GroupForEdgeAutomation",
		FileEventTrigger{
			Trigger: Trigger{
				Kind: TriggerEventTypeFileEvent.ToPtr(),
			},
			Properties: &FileTriggerProperties{
				CustomContextTag: to.StringPtr("CustomContextTags-1235346475"),
				SinkInfo: &RoleSinkInfo{
					RoleID: to.StringPtr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/roles/role1"),
				},
				SourceInfo: &FileSourceInfo{
					ShareID: to.StringPtr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/shares/share1"),
				},
			},
		},
		&TriggersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Trigger.ID == nil {
		t.Fatal("Trigger.ID should not be nil!")
	}
}

func TestTriggers_Delete(t *testing.T) {
	// From example TriggerDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTriggersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"trigger1",
		"GroupForEdgeAutomation",
		&TriggersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSupportPackages_TriggerSupportPackage(t *testing.T) {
	// From example TriggerSupportPackage
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSupportPackagesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginTriggerSupportPackage(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		TriggerSupportPackageRequest{
			Properties: &SupportPackageRequestProperties{
				Include:          to.StringPtr("DefaultWithDumps"),
				MaximumTimeStamp: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-18T02:19:51.4270267Z"); return t }()),
				MinimumTimeStamp: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-18T02:18:51.4270267Z"); return t }()),
			},
		},
		&SupportPackagesBeginTriggerSupportPackageOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestUsers_ListByDataBoxEdgeDevice(t *testing.T) {
	// From example UserGetAllInDevice
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.ListByDataBoxEdgeDevice("testedgedevice",
		"GroupForEdgeAutomation",
		&UsersListByDataBoxEdgeDeviceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("User.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("User.ID should not be nil!")
			}
		}
	}
}

func TestUsers_Get(t *testing.T) {
	// From example UserGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"testedgedevice",
		"user1",
		"GroupForEdgeAutomation",
		&UsersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.User.ID == nil {
		t.Fatal("User.ID should not be nil!")
	}
}

func TestUsers_CreateOrUpdate(t *testing.T) {
	// From example UserPut
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testedgedevice",
		"user1",
		"GroupForEdgeAutomation",
		User{
			Properties: &UserProperties{
				EncryptedPassword: &AsymmetricEncryptedSecret{
					EncryptionAlgorithm:      EncryptionAlgorithmNone.ToPtr(),
					EncryptionCertThumbprint: to.StringPtr("blah"),
					Value:                    to.StringPtr("<value>"),
				},
				UserType: UserTypeShare.ToPtr(),
			},
		},
		&UsersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.User.ID == nil {
		t.Fatal("User.ID should not be nil!")
	}
}

func TestUsers_Delete(t *testing.T) {
	// From example UserDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsersClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"user1",
		"GroupForEdgeAutomation",
		&UsersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
