//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdataboxedge_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/databoxedge/armdataboxedge"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/OperationsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OperationsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/OperationsGet.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataboxedge.OperationsList{
			Value: []*armdataboxedge.Operation{
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/users/read"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Lists or gets the share users"),
						Operation:   to.Ptr("List share users"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("share users"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/users/read"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Lists or gets the share users"),
						Operation:   to.Ptr("List share users"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("share users"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/users/write"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Creates or updates the share users"),
						Operation:   to.Ptr("Creates or updates share users"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("share users"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/users/delete"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Deletes the share users"),
						Operation:   to.Ptr("Delete share users"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("share users"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/bandwidthSchedules/read"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Lists or gets the bandwidth schedules"),
						Operation:   to.Ptr("List bandwidth schedules"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("bandwidth schedules"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/bandwidthSchedules/read"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Lists or gets the bandwidth schedules"),
						Operation:   to.Ptr("List bandwidth schedules"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("bandwidth schedules"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/bandwidthSchedules/write"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Creates or updates the bandwidth schedules"),
						Operation:   to.Ptr("Creates or updates bandwidth schedules"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("bandwidth schedules"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/bandwidthSchedules/delete"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Deletes the bandwidth schedules"),
						Operation:   to.Ptr("Delete bandwidth schedules"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("bandwidth schedules"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/roles/read"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Lists or gets the ArmApiRes_roles"),
						Operation:   to.Ptr("List ArmApiRes_roles"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("ArmApiRes_roles"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/roles/read"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Lists or gets the ArmApiRes_roles"),
						Operation:   to.Ptr("List ArmApiRes_roles"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("ArmApiRes_roles"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/roles/write"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Creates or updates the ArmApiRes_roles"),
						Operation:   to.Ptr("Creates or updates ArmApiRes_roles"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("ArmApiRes_roles"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/roles/delete"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Deletes the ArmApiRes_roles"),
						Operation:   to.Ptr("Delete ArmApiRes_roles"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("ArmApiRes_roles"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/shares/read"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Lists or gets the shares"),
						Operation:   to.Ptr("List shares"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("shares"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/shares/read"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Lists or gets the shares"),
						Operation:   to.Ptr("List shares"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("shares"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/shares/write"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Creates or updates the shares"),
						Operation:   to.Ptr("Creates or updates shares"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("shares"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/shares/refresh/action"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("ArmApiDesc_action_refresh_shares"),
						Operation:   to.Ptr("ArmApiOp_action_refresh_shares"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("shares"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/shares/delete"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Deletes the shares"),
						Operation:   to.Ptr("Delete shares"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("shares"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/uploadCertificate/action"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Upload certificate for device registration"),
						Operation:   to.Ptr("Upload certificates"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("Data Box Edge devices"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/write"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Creates or updates the Data Box Edge devices"),
						Operation:   to.Ptr("Creates or updates Data Box Edge devices"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("Data Box Edge devices"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/read"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Lists or gets the Data Box Edge devices"),
						Operation:   to.Ptr("List Data Box Edge devices"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("Data Box Edge devices"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/delete"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Deletes the Data Box Edge devices"),
						Operation:   to.Ptr("Delete Data Box Edge devices"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("Data Box Edge devices"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/read"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Lists or gets the Data Box Edge devices"),
						Operation:   to.Ptr("List Data Box Edge devices"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("Data Box Edge devices"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/read"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Lists or gets the Data Box Edge devices"),
						Operation:   to.Ptr("List Data Box Edge devices"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("Data Box Edge devices"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/write"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Creates or updates the Data Box Edge devices"),
						Operation:   to.Ptr("Creates or updates Data Box Edge devices"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("Data Box Edge devices"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/getExtendedInformation/action"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("ArmApiDesc_action_getExtendedInformation_dataBoxEdgeDevices"),
						Operation:   to.Ptr("ArmApiOp_action_getExtendedInformation_dataBoxEdgeDevices"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("Data Box Edge devices"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/extendedInformation/action"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Retrieves resource extended information"),
						Operation:   to.Ptr("Gets resource extended information"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("Data Box Edge devices"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/networkSettings/read"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Lists or gets the Device network settings"),
						Operation:   to.Ptr("List Device network settings"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("Device network settings"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/securitySettings/update/action"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Update security settings"),
						Operation:   to.Ptr("Update security settings"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("Device security settings"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/updateSummary/read"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Lists or gets the update summary"),
						Operation:   to.Ptr("List update summary"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("update summary"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/scanForUpdates/action"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Scan for updates"),
						Operation:   to.Ptr("Scan for updates"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("Data Box Edge devices"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/downloadUpdates/action"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Download Updates in device"),
						Operation:   to.Ptr("Download Updates"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("Data Box Edge devices"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/installUpdates/action"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Install Updates on device"),
						Operation:   to.Ptr("Install Updates"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("Data Box Edge devices"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/jobs/read"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Lists or gets the jobs"),
						Operation:   to.Ptr("List jobs"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("jobs"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/storageAccountCredentials/write"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Creates or updates the storage account credentials"),
						Operation:   to.Ptr("Creates or updates storage account credentials"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("storage account credentials"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/storageAccountCredentials/read"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Lists or gets the storage account credentials"),
						Operation:   to.Ptr("List storage account credentials"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("storage account credentials"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/storageAccountCredentials/read"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Lists or gets the storage account credentials"),
						Operation:   to.Ptr("List storage account credentials"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("storage account credentials"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/storageAccountCredentials/delete"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Deletes the storage account credentials"),
						Operation:   to.Ptr("Delete storage account credentials"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("storage account credentials"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/alerts/read"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Lists or gets the alerts"),
						Operation:   to.Ptr("List alerts"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("alerts"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/alerts/read"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Lists or gets the alerts"),
						Operation:   to.Ptr("List alerts"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("alerts"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Gets the available Data Box Edge device level metrics"),
						Operation:   to.Ptr("Read Data Box Edge device metric definition"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("Data Box Edge device"),
					},
					Origin: to.Ptr("system"),
					Properties: &armdataboxedge.OperationProperties{
						ServiceSpecification: &armdataboxedge.ServiceSpecification{
							MetricSpecifications: []*armdataboxedge.MetricSpecificationV1{
								{
									Name:            to.Ptr("NICReadThroughput"),
									AggregationType: to.Ptr(armdataboxedge.MetricAggregationTypeAverage),
									Category:        to.Ptr(armdataboxedge.MetricCategoryTransaction),
									Dimensions: []*armdataboxedge.MetricDimensionV1{
										{
											Name:                   to.Ptr("InstanceName"),
											DisplayName:            to.Ptr("Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("The read throughput of the network interface on the device in the reporting period for all volumes in the gateway."),
									DisplayName:        to.Ptr("Read Throughput (Network)"),
									FillGapWithZero:    to.Ptr(false),
									SupportedAggregationTypes: []*armdataboxedge.MetricAggregationType{
										to.Ptr(armdataboxedge.MetricAggregationTypeAverage),
										to.Ptr(armdataboxedge.MetricAggregationTypeMinimum),
										to.Ptr(armdataboxedge.MetricAggregationTypeMaximum)},
									SupportedTimeGrainTypes: []*armdataboxedge.TimeGrain{
										to.Ptr(armdataboxedge.TimeGrainPT1M),
										to.Ptr(armdataboxedge.TimeGrainPT15M),
										to.Ptr(armdataboxedge.TimeGrainPT1H)},
									Unit: to.Ptr(armdataboxedge.MetricUnitBytesPerSecond),
								},
								{
									Name:            to.Ptr("NICWriteThroughput"),
									AggregationType: to.Ptr(armdataboxedge.MetricAggregationTypeAverage),
									Category:        to.Ptr(armdataboxedge.MetricCategoryTransaction),
									Dimensions: []*armdataboxedge.MetricDimensionV1{
										{
											Name:                   to.Ptr("InstanceName"),
											DisplayName:            to.Ptr("Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("The write throughput of the network interface on the device in the reporting period for all volumes in the gateway."),
									DisplayName:        to.Ptr("Write Throughput (Network)"),
									FillGapWithZero:    to.Ptr(false),
									SupportedAggregationTypes: []*armdataboxedge.MetricAggregationType{
										to.Ptr(armdataboxedge.MetricAggregationTypeAverage),
										to.Ptr(armdataboxedge.MetricAggregationTypeMinimum),
										to.Ptr(armdataboxedge.MetricAggregationTypeMaximum)},
									SupportedTimeGrainTypes: []*armdataboxedge.TimeGrain{
										to.Ptr(armdataboxedge.TimeGrainPT1M),
										to.Ptr(armdataboxedge.TimeGrainPT15M),
										to.Ptr(armdataboxedge.TimeGrainPT1H)},
									Unit: to.Ptr(armdataboxedge.MetricUnitBytesPerSecond),
								},
								{
									Name:            to.Ptr("CloudReadThroughputPerShare"),
									AggregationType: to.Ptr(armdataboxedge.MetricAggregationTypeAverage),
									Category:        to.Ptr(armdataboxedge.MetricCategoryTransaction),
									Dimensions: []*armdataboxedge.MetricDimensionV1{
										{
											Name:                   to.Ptr("Share"),
											DisplayName:            to.Ptr("Share"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("The download throughput to Azure from a share during the reporting period."),
									DisplayName:        to.Ptr("Cloud Download Throughput (Share)"),
									FillGapWithZero:    to.Ptr(false),
									SupportedAggregationTypes: []*armdataboxedge.MetricAggregationType{
										to.Ptr(armdataboxedge.MetricAggregationTypeAverage),
										to.Ptr(armdataboxedge.MetricAggregationTypeMinimum),
										to.Ptr(armdataboxedge.MetricAggregationTypeMaximum)},
									SupportedTimeGrainTypes: []*armdataboxedge.TimeGrain{
										to.Ptr(armdataboxedge.TimeGrainPT1M),
										to.Ptr(armdataboxedge.TimeGrainPT15M),
										to.Ptr(armdataboxedge.TimeGrainPT1H)},
									Unit: to.Ptr(armdataboxedge.MetricUnitBytesPerSecond),
								},
								{
									Name:            to.Ptr("CloudUploadThroughputPerShare"),
									AggregationType: to.Ptr(armdataboxedge.MetricAggregationTypeAverage),
									Category:        to.Ptr(armdataboxedge.MetricCategoryTransaction),
									Dimensions: []*armdataboxedge.MetricDimensionV1{
										{
											Name:                   to.Ptr("Share"),
											DisplayName:            to.Ptr("Share"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("The upload throughput to Azure from a share during the reporting period."),
									DisplayName:        to.Ptr("Cloud Upload Throughput (Share)"),
									FillGapWithZero:    to.Ptr(false),
									SupportedAggregationTypes: []*armdataboxedge.MetricAggregationType{
										to.Ptr(armdataboxedge.MetricAggregationTypeAverage),
										to.Ptr(armdataboxedge.MetricAggregationTypeMinimum),
										to.Ptr(armdataboxedge.MetricAggregationTypeMaximum)},
									SupportedTimeGrainTypes: []*armdataboxedge.TimeGrain{
										to.Ptr(armdataboxedge.TimeGrainPT1M),
										to.Ptr(armdataboxedge.TimeGrainPT15M),
										to.Ptr(armdataboxedge.TimeGrainPT1H)},
									Unit: to.Ptr(armdataboxedge.MetricUnitBytesPerSecond),
								},
								{
									Name:            to.Ptr("BytesUploadedToCloudPerShare"),
									AggregationType: to.Ptr(armdataboxedge.MetricAggregationTypeAverage),
									Category:        to.Ptr(armdataboxedge.MetricCategoryTransaction),
									Dimensions: []*armdataboxedge.MetricDimensionV1{
										{
											Name:                   to.Ptr("Share"),
											DisplayName:            to.Ptr("Share"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("The total number of bytes that is uploaded to Azure from a share during the reporting period."),
									DisplayName:        to.Ptr("Cloud Bytes Uploaded (Share)"),
									FillGapWithZero:    to.Ptr(false),
									SupportedAggregationTypes: []*armdataboxedge.MetricAggregationType{
										to.Ptr(armdataboxedge.MetricAggregationTypeAverage),
										to.Ptr(armdataboxedge.MetricAggregationTypeMinimum),
										to.Ptr(armdataboxedge.MetricAggregationTypeMaximum)},
									SupportedTimeGrainTypes: []*armdataboxedge.TimeGrain{
										to.Ptr(armdataboxedge.TimeGrainPT1M),
										to.Ptr(armdataboxedge.TimeGrainPT15M),
										to.Ptr(armdataboxedge.TimeGrainPT1H)},
									Unit: to.Ptr(armdataboxedge.MetricUnitBytes),
								},
								{
									Name:               to.Ptr("TotalCapacity"),
									AggregationType:    to.Ptr(armdataboxedge.MetricAggregationTypeAverage),
									Category:           to.Ptr(armdataboxedge.MetricCategoryCapacity),
									Dimensions:         []*armdataboxedge.MetricDimensionV1{},
									DisplayDescription: to.Ptr("Total Capacity"),
									DisplayName:        to.Ptr("Total Capacity"),
									FillGapWithZero:    to.Ptr(false),
									SupportedAggregationTypes: []*armdataboxedge.MetricAggregationType{
										to.Ptr(armdataboxedge.MetricAggregationTypeAverage),
										to.Ptr(armdataboxedge.MetricAggregationTypeMinimum),
										to.Ptr(armdataboxedge.MetricAggregationTypeMaximum)},
									SupportedTimeGrainTypes: []*armdataboxedge.TimeGrain{
										to.Ptr(armdataboxedge.TimeGrainPT5M),
										to.Ptr(armdataboxedge.TimeGrainPT15M),
										to.Ptr(armdataboxedge.TimeGrainPT1H)},
									Unit: to.Ptr(armdataboxedge.MetricUnitBytes),
								},
								{
									Name:               to.Ptr("AvailableCapacity"),
									AggregationType:    to.Ptr(armdataboxedge.MetricAggregationTypeAverage),
									Category:           to.Ptr(armdataboxedge.MetricCategoryCapacity),
									Dimensions:         []*armdataboxedge.MetricDimensionV1{},
									DisplayDescription: to.Ptr("The available capacity in bytes during the reporting period."),
									DisplayName:        to.Ptr("Available Capacity"),
									FillGapWithZero:    to.Ptr(false),
									SupportedAggregationTypes: []*armdataboxedge.MetricAggregationType{
										to.Ptr(armdataboxedge.MetricAggregationTypeAverage),
										to.Ptr(armdataboxedge.MetricAggregationTypeMinimum),
										to.Ptr(armdataboxedge.MetricAggregationTypeMaximum)},
									SupportedTimeGrainTypes: []*armdataboxedge.TimeGrain{
										to.Ptr(armdataboxedge.TimeGrainPT5M),
										to.Ptr(armdataboxedge.TimeGrainPT15M),
										to.Ptr(armdataboxedge.TimeGrainPT1H)},
									Unit: to.Ptr(armdataboxedge.MetricUnitBytes),
								},
								{
									Name:               to.Ptr("CloudUploadThroughput"),
									AggregationType:    to.Ptr(armdataboxedge.MetricAggregationTypeAverage),
									Category:           to.Ptr(armdataboxedge.MetricCategoryTransaction),
									Dimensions:         []*armdataboxedge.MetricDimensionV1{},
									DisplayDescription: to.Ptr("The cloud upload throughput during the reporting period."),
									DisplayName:        to.Ptr("Cloud Upload Throughput"),
									FillGapWithZero:    to.Ptr(false),
									SupportedAggregationTypes: []*armdataboxedge.MetricAggregationType{
										to.Ptr(armdataboxedge.MetricAggregationTypeAverage),
										to.Ptr(armdataboxedge.MetricAggregationTypeMinimum),
										to.Ptr(armdataboxedge.MetricAggregationTypeMaximum)},
									SupportedTimeGrainTypes: []*armdataboxedge.TimeGrain{
										to.Ptr(armdataboxedge.TimeGrainPT5M),
										to.Ptr(armdataboxedge.TimeGrainPT15M),
										to.Ptr(armdataboxedge.TimeGrainPT1H)},
									Unit: to.Ptr(armdataboxedge.MetricUnitBytesPerSecond),
								},
								{
									Name:               to.Ptr("CloudReadThroughput"),
									AggregationType:    to.Ptr(armdataboxedge.MetricAggregationTypeAverage),
									Category:           to.Ptr(armdataboxedge.MetricCategoryTransaction),
									Dimensions:         []*armdataboxedge.MetricDimensionV1{},
									DisplayDescription: to.Ptr("The cloud download throughput during the reporting period."),
									DisplayName:        to.Ptr("Cloud Read Throughput"),
									FillGapWithZero:    to.Ptr(false),
									SupportedAggregationTypes: []*armdataboxedge.MetricAggregationType{
										to.Ptr(armdataboxedge.MetricAggregationTypeAverage),
										to.Ptr(armdataboxedge.MetricAggregationTypeMinimum),
										to.Ptr(armdataboxedge.MetricAggregationTypeMaximum)},
									SupportedTimeGrainTypes: []*armdataboxedge.TimeGrain{
										to.Ptr(armdataboxedge.TimeGrainPT5M),
										to.Ptr(armdataboxedge.TimeGrainPT15M),
										to.Ptr(armdataboxedge.TimeGrainPT1H)},
									Unit: to.Ptr(armdataboxedge.MetricUnitBytesPerSecond),
								},
								{
									Name:               to.Ptr("BytesUploadedToCloud"),
									AggregationType:    to.Ptr(armdataboxedge.MetricAggregationTypeAverage),
									Category:           to.Ptr(armdataboxedge.MetricCategoryTransaction),
									Dimensions:         []*armdataboxedge.MetricDimensionV1{},
									DisplayDescription: to.Ptr("The total number of bytes that is uploaded to Azure from a device during the reporting period."),
									DisplayName:        to.Ptr("Cloud Bytes Uploaded (Device)"),
									FillGapWithZero:    to.Ptr(false),
									SupportedAggregationTypes: []*armdataboxedge.MetricAggregationType{
										to.Ptr(armdataboxedge.MetricAggregationTypeAverage),
										to.Ptr(armdataboxedge.MetricAggregationTypeMinimum),
										to.Ptr(armdataboxedge.MetricAggregationTypeMaximum)},
									SupportedTimeGrainTypes: []*armdataboxedge.TimeGrain{
										to.Ptr(armdataboxedge.TimeGrainPT5M),
										to.Ptr(armdataboxedge.TimeGrainPT15M),
										to.Ptr(armdataboxedge.TimeGrainPT1H)},
									Unit: to.Ptr(armdataboxedge.MetricUnitBytes),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostics setting for the resource"),
						Operation:   to.Ptr("Write diagnostics setting"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("Data Box Edge device"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armdataboxedge.OperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource"),
						Operation:   to.Ptr("Read diagnostics setting"),
						Provider:    to.Ptr("Microsoft.DataBoxEdge"),
						Resource:    to.Ptr("Data Box Edge device"),
					},
					Origin: to.Ptr("system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationsList)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/OperationsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAvailableSKUs_List(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/AvailableSkusList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailableSkus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewAvailableSKUsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/AvailableSkusList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataboxedge.SKUList{
			Value: []*armdataboxedge.SKU{
				{
					Name:         to.Ptr(armdataboxedge.SKUNameGateway),
					Availability: to.Ptr(armdataboxedge.SKUAvailabilityAvailable),
					Kind:         to.Ptr("AzureDataBoxGateway"),
					LocationInfo: []*armdataboxedge.SKULocationInfo{
						{
							Location: to.Ptr("West US"),
						}},
					Locations: []*string{
						to.Ptr("West US")},
					ResourceType: to.Ptr("dataBoxEdgeDevices"),
					SignupOption: to.Ptr(armdataboxedge.SKUSignupOptionAvailable),
					Tier:         to.Ptr(armdataboxedge.SKUTierStandard),
					Version:      to.Ptr(armdataboxedge.SKUVersionStable),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SKUList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SKUList)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/AvailableSkusList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDevices_ListBySubscription(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDeviceGetBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataBoxEdgeDeviceGetBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewDevicesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	pager := client.ListBySubscription(&armdataboxedge.DevicesClientListBySubscriptionOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDeviceGetBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataboxedge.DeviceList{
			Value: []*armdataboxedge.Device{
				{
					Name: to.Ptr("linksub01"),
					Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices"),
					ID:   to.Ptr("/subscriptions/0d44739e-0563-474f-97e7-24a0cdb23b29/resourcegroups/abhudeda-rg/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/linksub01"),
					Etag: to.Ptr("W/\"datetime'2020-11-19T01%3A39%3A55.1270082Z'\"_W/\"datetime'2020-11-19T01%3A39%3A55.1320118Z'\""),
					Identity: &armdataboxedge.ResourceIdentity{
						Type:        to.Ptr(armdataboxedge.MsiIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("083df009-06d9-4e3c-ae72-f9249a814334"),
						TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
					Kind:     to.Ptr(armdataboxedge.DataBoxEdgeDeviceKindAzureDataBoxGateway),
					Location: to.Ptr("eastus2euap"),
					SKU: &armdataboxedge.SKUInfo{
						Name: to.Ptr(armdataboxedge.SKUNameGateway),
						Tier: to.Ptr(armdataboxedge.SKUTierStandard),
					},
					Tags: map[string]*string{},
				},
				{
					Name: to.Ptr("mergeazstest"),
					Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices"),
					ID:   to.Ptr("/subscriptions/0d44739e-0563-474f-97e7-24a0cdb23b29/resourcegroups/abhudeda-rg/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/mergeazstest"),
					Etag: to.Ptr("W/\"datetime'2020-11-19T01%3A40%3A05.9246966Z'\"_W/\"datetime'2020-11-19T01%3A40%3A05.9317011Z'\""),
					Identity: &armdataboxedge.ResourceIdentity{
						Type:        to.Ptr(armdataboxedge.MsiIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("8536db30-78d2-4759-95b7-896a66e14c24"),
						TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
					Kind:     to.Ptr(armdataboxedge.DataBoxEdgeDeviceKindAzureDataBoxGateway),
					Location: to.Ptr("eastus2euap"),
					SKU: &armdataboxedge.SKUInfo{
						Name: to.Ptr(armdataboxedge.SKUNameGateway),
						Tier: to.Ptr(armdataboxedge.SKUTierStandard),
					},
					Tags: map[string]*string{},
				},
				{
					Name: to.Ptr("mergeazstest2"),
					Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices"),
					ID:   to.Ptr("/subscriptions/0d44739e-0563-474f-97e7-24a0cdb23b29/resourcegroups/abhudeda-rg/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/mergeazstest2"),
					Etag: to.Ptr("W/\"datetime'2020-11-19T01%3A40%3A06.496102Z'\"_W/\"datetime'2020-11-19T01%3A40%3A06.503107Z'\""),
					Identity: &armdataboxedge.ResourceIdentity{
						Type:        to.Ptr(armdataboxedge.MsiIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("fc4c1205-35c8-4f35-abc7-f5a78945f676"),
						TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
					Kind:     to.Ptr(armdataboxedge.DataBoxEdgeDeviceKindAzureDataBoxGateway),
					Location: to.Ptr("eastus2euap"),
					SKU: &armdataboxedge.SKUInfo{
						Name: to.Ptr(armdataboxedge.SKUNameGateway),
						Tier: to.Ptr(armdataboxedge.SKUTierStandard),
					},
					Tags: map[string]*string{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeviceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeviceList)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDeviceGetBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDevices_ListByResourceGroup(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDeviceGetByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataBoxEdgeDeviceGetByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewDevicesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	pager := client.ListByResourceGroup("GroupForEdgeAutomation",
		&armdataboxedge.DevicesClientListByResourceGroupOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDeviceGetByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataboxedge.DeviceList{
			Value: []*armdataboxedge.Device{
				{
					Name: to.Ptr("EdgeTestPassResource"),
					Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices"),
					ID:   to.Ptr("/subscriptions/0d44739e-0563-474f-97e7-24a0cdb23b29/resourcegroups/VmMgmtTestPass/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/EdgeTestPassResource"),
					Etag: to.Ptr("W/\"datetime'2020-09-29T18%3A50%3A31.1203818Z'\"_W/\"datetime'2020-09-29T18%3A50%3A31.1343914Z'\""),
					Identity: &armdataboxedge.ResourceIdentity{
						Type:        to.Ptr(armdataboxedge.MsiIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("b3e34fcc-ab02-4ca4-9d22-5de115419091"),
						TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
					Kind:     to.Ptr(armdataboxedge.DataBoxEdgeDeviceKindAzureStackEdge),
					Location: to.Ptr("eastus2euap"),
					SKU: &armdataboxedge.SKUInfo{
						Name: to.Ptr(armdataboxedge.SKUNameEdge),
						Tier: to.Ptr(armdataboxedge.SKUTierStandard),
					},
					Tags: map[string]*string{},
				},
				{
					Name: to.Ptr("FPGAResource"),
					Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices"),
					ID:   to.Ptr("/subscriptions/0d44739e-0563-474f-97e7-24a0cdb23b29/resourcegroups/VmMgmtTestPass/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/FPGAResource"),
					Etag: to.Ptr("W/\"datetime'2020-11-18T23%3A31%3A30.3266766Z'\"_W/\"datetime'2020-11-18T23%3A31%3A30.3326804Z'\""),
					Identity: &armdataboxedge.ResourceIdentity{
						Type:        to.Ptr(armdataboxedge.MsiIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("d97a6de5-f5c0-485a-8f5e-b7f705d2dbc4"),
						TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
					Kind:     to.Ptr(armdataboxedge.DataBoxEdgeDeviceKindAzureStackEdge),
					Location: to.Ptr("centraluseuap"),
					SKU: &armdataboxedge.SKUInfo{
						Name: to.Ptr(armdataboxedge.SKUNameEdge),
						Tier: to.Ptr(armdataboxedge.SKUTierStandard),
					},
					Tags: map[string]*string{},
				},
				{
					Name: to.Ptr("TestVMEdgeResource"),
					Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices"),
					ID:   to.Ptr("/subscriptions/0d44739e-0563-474f-97e7-24a0cdb23b29/resourcegroups/VmMgmtTestPass/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/TestVMEdgeResource"),
					Etag: to.Ptr("W/\"datetime'2020-11-18T23%3A31%3A23.1715672Z'\"_W/\"datetime'2020-11-18T23%3A31%3A23.2396152Z'\""),
					Identity: &armdataboxedge.ResourceIdentity{
						Type:        to.Ptr(armdataboxedge.MsiIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("6f2b341b-aded-4ec2-a1bd-d09438d6cc8f"),
						TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
					Kind:     to.Ptr(armdataboxedge.DataBoxEdgeDeviceKindAzureStackEdge),
					Location: to.Ptr("centraluseuap"),
					SKU: &armdataboxedge.SKUInfo{
						Name: to.Ptr(armdataboxedge.SKUNameEdge),
						Tier: to.Ptr(armdataboxedge.SKUTierStandard),
					},
					Tags: map[string]*string{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeviceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeviceList)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDeviceGetByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDevices_Get(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDeviceGetByName.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataBoxEdgeDeviceGetByName"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewDevicesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.Get(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDeviceGetByName.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.Device{
			Name: to.Ptr("EdgeTestPassResource"),
			Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices"),
			ID:   to.Ptr("/subscriptions/0d44739e-0563-474f-97e7-24a0cdb23b29/resourcegroups/VmMgmtTestPass/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/EdgeTestPassResource"),
			Etag: to.Ptr("W/\"datetime'2020-09-29T18%3A50%3A31.1203818Z'\"_W/\"datetime'2020-09-29T18%3A50%3A31.1343914Z'\""),
			Identity: &armdataboxedge.ResourceIdentity{
				Type:        to.Ptr(armdataboxedge.MsiIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("b3e34fcc-ab02-4ca4-9d22-5de115419091"),
				TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
			},
			Kind:     to.Ptr(armdataboxedge.DataBoxEdgeDeviceKindAzureStackEdge),
			Location: to.Ptr("eastus2euap"),
			Properties: &armdataboxedge.DeviceProperties{
				ConfiguredRoleTypes: []*armdataboxedge.RoleTypes{
					to.Ptr(armdataboxedge.RoleTypesCloudEdgeManagement)},
				DataBoxEdgeDeviceStatus: to.Ptr(armdataboxedge.DataBoxEdgeDeviceStatusOffline),
				DeviceHcsVersion:        to.Ptr("2.1.1361.23408"),
				DeviceLocalCapacity:     to.Ptr[int64](8042259),
				DeviceModel:             to.Ptr("Physical"),
				DeviceSoftwareVersion:   to.Ptr("Azure Stack Edge 2009"),
				DeviceType:              to.Ptr(armdataboxedge.DeviceTypeDataBoxEdgeDevice),
				EdgeProfile: &armdataboxedge.EdgeProfile{
					Subscription: &armdataboxedge.EdgeProfileSubscription{
						ID:             to.Ptr("/subscriptions/0d44739e-0563-474f-97e7-24a0cdb23b29/resourceGroups/VmMgmtTestPass/providers/Microsoft.AzureStack/edgeSubscriptions/daaac4b0-35c4-4008-bdc6-b72ca5890f16"),
						RegistrationID: to.Ptr("91d8753b-af42-4908-9a5e-2a61f08b20de"),
						State:          to.Ptr(armdataboxedge.SubscriptionStateRegistered),
					},
				},
				FriendlyName: to.Ptr("DBE-1D6QHQ2"),
				NodeCount:    to.Ptr[int32](1),
				SerialNumber: to.Ptr("1D6QHQ2"),
				TimeZone:     to.Ptr("Pacific Standard Time"),
			},
			SKU: &armdataboxedge.SKUInfo{
				Name: to.Ptr(armdataboxedge.SKUNameEdge),
				Tier: to.Ptr(armdataboxedge.SKUTierStandard),
			},
			Tags: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.Device) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Device)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDeviceGetByName.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDeviceGetByNameWithDataResidency.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataBoxEdgeDeviceGetByNameWithDataResidency"},
	})
	client = armdataboxedge.NewDevicesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err = client.Get(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDeviceGetByNameWithDataResidency.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.Device{
			Name: to.Ptr("EdgeTestPassResource"),
			Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices"),
			ID:   to.Ptr("/subscriptions/0d44739e-0563-474f-97e7-24a0cdb23b29/resourcegroups/VmMgmtTestPass/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/EdgeTestPassResource"),
			Etag: to.Ptr("W/\"datetime'2020-09-29T18%3A50%3A31.1203818Z'\"_W/\"datetime'2020-09-29T18%3A50%3A31.1343914Z'\""),
			Identity: &armdataboxedge.ResourceIdentity{
				Type:        to.Ptr(armdataboxedge.MsiIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("b3e34fcc-ab02-4ca4-9d22-5de115419091"),
				TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
			},
			Kind:     to.Ptr(armdataboxedge.DataBoxEdgeDeviceKindAzureStackEdge),
			Location: to.Ptr("eastus2euap"),
			Properties: &armdataboxedge.DeviceProperties{
				ConfiguredRoleTypes: []*armdataboxedge.RoleTypes{
					to.Ptr(armdataboxedge.RoleTypesCloudEdgeManagement)},
				DataBoxEdgeDeviceStatus: to.Ptr(armdataboxedge.DataBoxEdgeDeviceStatusOffline),
				DataResidency: &armdataboxedge.DataResidency{
					Type: to.Ptr(armdataboxedge.DataResidencyTypeZoneReplication),
				},
				DeviceHcsVersion:      to.Ptr("2.1.1361.23408"),
				DeviceLocalCapacity:   to.Ptr[int64](8042259),
				DeviceModel:           to.Ptr("Physical"),
				DeviceSoftwareVersion: to.Ptr("Azure Stack Edge 2009"),
				DeviceType:            to.Ptr(armdataboxedge.DeviceTypeDataBoxEdgeDevice),
				EdgeProfile: &armdataboxedge.EdgeProfile{
					Subscription: &armdataboxedge.EdgeProfileSubscription{
						ID:             to.Ptr("/subscriptions/0d44739e-0563-474f-97e7-24a0cdb23b29/resourceGroups/VmMgmtTestPass/providers/Microsoft.AzureStack/edgeSubscriptions/daaac4b0-35c4-4008-bdc6-b72ca5890f16"),
						RegistrationID: to.Ptr("91d8753b-af42-4908-9a5e-2a61f08b20de"),
						State:          to.Ptr(armdataboxedge.SubscriptionStateRegistered),
					},
				},
				FriendlyName: to.Ptr("DBE-1D6QHQ2"),
				NodeCount:    to.Ptr[int32](1),
				SerialNumber: to.Ptr("1D6QHQ2"),
				TimeZone:     to.Ptr("Pacific Standard Time"),
			},
			SKU: &armdataboxedge.SKUInfo{
				Name: to.Ptr(armdataboxedge.SKUNameEdge),
				Tier: to.Ptr(armdataboxedge.SKUTierStandard),
			},
			Tags: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.Device) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Device)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDeviceGetByNameWithDataResidency.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDevices_CreateOrUpdate(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDevicePut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataBoxEdgeDevicePut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewDevicesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		armdataboxedge.Device{
			Location: to.Ptr("WUS"),
			SKU: &armdataboxedge.SKUInfo{
				Name: to.Ptr(armdataboxedge.SKUNameEdge),
				Tier: to.Ptr(armdataboxedge.SKUTierStandard),
			},
			Tags: map[string]*string{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDevicePut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.Device{
			Name:     to.Ptr("testedgedevice"),
			Location: to.Ptr("WUS"),
			SKU: &armdataboxedge.SKUInfo{
				Name: to.Ptr(armdataboxedge.SKUNameEdge),
				Tier: to.Ptr(armdataboxedge.SKUTierStandard),
			},
			Tags: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.Device) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Device)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDevicePut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDevicePutWithDataResidency.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataBoxEdgeDevicePutWithDataResidency"},
	})
	client = armdataboxedge.NewDevicesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		armdataboxedge.Device{
			Location: to.Ptr("WUS"),
			Properties: &armdataboxedge.DeviceProperties{
				DataResidency: &armdataboxedge.DataResidency{
					Type: to.Ptr(armdataboxedge.DataResidencyTypeZoneReplication),
				},
			},
			SKU: &armdataboxedge.SKUInfo{
				Name: to.Ptr(armdataboxedge.SKUNameEdge),
				Tier: to.Ptr(armdataboxedge.SKUTierStandard),
			},
			Tags: map[string]*string{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDevicePutWithDataResidency.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.Device{
			Name:     to.Ptr("testedgedevice"),
			Location: to.Ptr("WUS"),
			Properties: &armdataboxedge.DeviceProperties{
				DataResidency: &armdataboxedge.DataResidency{
					Type: to.Ptr(armdataboxedge.DataResidencyTypeZoneReplication),
				},
			},
			SKU: &armdataboxedge.SKUInfo{
				Name: to.Ptr(armdataboxedge.SKUNameEdge),
				Tier: to.Ptr(armdataboxedge.SKUTierStandard),
			},
			Tags: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.Device) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Device)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDevicePutWithDataResidency.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDevices_Delete(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDeviceDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataBoxEdgeDeviceDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewDevicesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		&armdataboxedge.DevicesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDeviceDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDeviceDelete.json: %v", err)
	}
}

func TestDevices_Update(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDevicePatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataBoxEdgeDevicePatch"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewDevicesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.Update(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		armdataboxedge.DevicePatch{
			Properties: &armdataboxedge.DevicePropertiesPatch{
				EdgeProfile: &armdataboxedge.EdgeProfilePatch{
					Subscription: &armdataboxedge.EdgeProfileSubscriptionPatch{
						ID: to.Ptr("/subscriptions/0d44739e-0563-474f-97e7-24a0cdb23b29/resourceGroups/rapvs-rg/providers/Microsoft.AzureStack/linkedSubscriptions/ca014ddc-5cf2-45f8-b390-e901e4a0ae87"),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDevicePatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.Device{
			Name: to.Ptr("testedgedevice"),
			Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourcegroups/VmMgmtTestPass/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice"),
			Etag: to.Ptr("W/\"datetime'2020-11-19T04%3A43%3A38.6457308Z'\"_W/\"datetime'2020-11-19T04%3A43%3A38.6507339Z'\""),
			Identity: &armdataboxedge.ResourceIdentity{
				Type:        to.Ptr(armdataboxedge.MsiIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("b3e34fcc-ab02-4ca4-9d22-5de115419091"),
				TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
			},
			Kind:     to.Ptr(armdataboxedge.DataBoxEdgeDeviceKindAzureStackEdge),
			Location: to.Ptr("eastus2euap"),
			Properties: &armdataboxedge.DeviceProperties{
				DataBoxEdgeDeviceStatus: to.Ptr(armdataboxedge.DataBoxEdgeDeviceStatusReadyToSetup),
				DeviceLocalCapacity:     to.Ptr[int64](0),
				DeviceType:              to.Ptr(armdataboxedge.DeviceTypeDataBoxEdgeDevice),
				EdgeProfile: &armdataboxedge.EdgeProfile{
					Subscription: &armdataboxedge.EdgeProfileSubscription{
						ID:             to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/VmMgmtTestPass/providers/Microsoft.AzureStack/edgeSubscriptions/daaac4b0-35c4-4008-bdc6-b72ca5890f16"),
						RegistrationID: to.Ptr("91d8753b-af42-4908-9a5e-2a61f08b20de"),
						State:          to.Ptr(armdataboxedge.SubscriptionStateRegistered),
					},
				},
				NodeCount: to.Ptr[int32](0),
				ResourceMoveDetails: &armdataboxedge.ResourceMoveDetails{
					OperationInProgress: to.Ptr(armdataboxedge.ResourceMoveStatusNone),
				},
				TimeZone: to.Ptr("Pacific Standard Time"),
			},
			SKU: &armdataboxedge.SKUInfo{
				Name: to.Ptr(armdataboxedge.SKUNameEdge),
				Tier: to.Ptr(armdataboxedge.SKUTierStandard),
			},
			Tags: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.Device) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Device)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DataBoxEdgeDevicePatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDevices_DownloadUpdates(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DownloadUpdatesPost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DownloadUpdatesPost"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewDevicesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginDownloadUpdates(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		&armdataboxedge.DevicesClientBeginDownloadUpdatesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DownloadUpdatesPost.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DownloadUpdatesPost.json: %v", err)
	}
}

func TestDevices_GenerateCertificate(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/GenerateCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GenerateCertificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewDevicesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.GenerateCertificate(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/GenerateCertificate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.GenerateCertResponse{
			ExpiryTimeInUTC: to.Ptr("2020-11-22T05:06:20.000Z"),
			PublicKey:       to.Ptr("MIIEDjCCAnagAwIBAgIQEW4wrxj9+JdA4kFLDgegTTANBgkqhkiG9w0BAQUFADBDMUEwPwYDVQQDHjgAQwBCAF8AUABvAHIAdABhAGwAXwA2ADMANwA0ADEAMwA1ADkAMQA4ADAAMAA3ADAAOQAxADcANTAeFw0yMDExMTkwNDU2MjBaFw0yMDExMjIwNTA2MjBaMEMxQTA/BgNVBAMeOABDAEIAXwBQAG8AcgB0AGEAbABfADYAMwA3ADQAMQAzADUAOQAxADgAMAAwADcAMAA5ADEANwA1MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAqG617KAUc4gOoht527o6FGE/c97W/wZIXqKbx4G8vifljXWw3NGDDuSQfidE3MqSMMJ/AAlDhBH/Deo/PAgUWuWB2WgM+KFWrDS0oDBvLVeIIeiMx4LOsbz4J8IbcKrGWf+ulQyum7dE/yBLzPXcPTjhJP0oMfhGOMlVVWbiKaP78/WZk2PmBQaVv7PxAQnJAPqETH2qAyuc9bd0TaMlIER56WhX9+nzsoI0u7RmBEs8+BaudVroiiK/GpEczy73TCRlpVXGChdBHg+NvYRYz91ltCV9Ijo1bdvcUjdgDJZ4Tz7G8XVCQmxbd9ml6OBLgxQUpd9HSGTcIfFiv+rTUwHR7YkY+1UGHsDPOYnBVDTXs3RFm+c5uNnCKvtyTExDJgabT+FTNb3eyD/BSYsy6b/YZBRqPiO8BRFUsIhWhXtPaUjWOEx6XMeZRnGeF4Hi8iH8TR79kEJhfYy3piSPAc3JrhgoglpyyfZOgyPOje+8tAWS9FHUNyVXKKeksDoZAgMBAAEwDQYJKoZIhvcNAQEFBQADggGBACpfQt34mgr+WlFtY0tqaPAoF6XnVzyKB6XsVAoj1uKFTSCQnr0mWvUMWKSRFTu1bV1VdDokV5I+h92kBcO4ddtHhWtkt16j9XFDsGdDvoUWJeqecZVr9fBPC69wF/9R/2E6iJporR46Pui7gcilYGqb3IjJlh8RT/XBPamQrfDbS7G8eTe91ST5cHr89R6EtDwfyhyTZr2sRrvQrxY2AjEmdH5Zcl9q2Xf8DholZhZ9vwnuYBFfl6VCXWaDAzQWiPdxo1wgXxEpNNDstGFWJKnsnz9UCohNAiPf47B+csPqxjcTLVMhcGLdU/lwpzzkEOciijpYILscvPoU3IM6DmFROgU2z6CForpgwHPDJktyWU1MC7lFdfrSzwu/5b3ZAEQhnJf7rvrybULoYBQWJEuj26Is1S6kXpNUaHAc5HIyIoc2V2eRjasbPIqsU0smjPLS/1egjHxtw9u+v4qDDvDuOjhFJtC3NkPl06TfNgO9+5LgiB1JppXnkLyCQ9RQgw=="),
		}
		if !reflect.DeepEqual(exampleRes, res.GenerateCertResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GenerateCertResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/GenerateCertificate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDevices_GetExtendedInformation(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ExtendedInfoPost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExtendedInfoPost"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewDevicesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.GetExtendedInformation(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ExtendedInfoPost.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.DeviceExtendedInfo{
			Name: to.Ptr("testedgedevice"),
			Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice"),
			Properties: &armdataboxedge.DeviceExtendedInfoProperties{
				EncryptionKey:           to.Ptr("<encryptionkey>"),
				EncryptionKeyThumbprint: to.Ptr("<encryptionthumbprint>"),
				ResourceKey:             to.Ptr("3482840729935603111"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeviceExtendedInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeviceExtendedInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ExtendedInfoPost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDevices_InstallUpdates(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/InstallUpdatesPost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InstallUpdatesPost"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewDevicesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginInstallUpdates(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		&armdataboxedge.DevicesClientBeginInstallUpdatesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/InstallUpdatesPost.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/InstallUpdatesPost.json: %v", err)
	}
}

func TestDevices_GetNetworkSettings(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/NetworkSettingsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NetworkSettingsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewDevicesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.GetNetworkSettings(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/NetworkSettingsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.NetworkSettings{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/networkSettings"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/networkSettings/default"),
			Properties: &armdataboxedge.NetworkSettingsProperties{
				NetworkAdapters: []*armdataboxedge.NetworkAdapter{
					{
						AdapterID: to.Ptr("{47D0D0EC-AA8A-4221-AA2A-355B58082BA5}"),
						AdapterPosition: &armdataboxedge.NetworkAdapterPosition{
							NetworkGroup: to.Ptr(armdataboxedge.NetworkGroupNonRDMA),
							Port:         to.Ptr[int32](0),
						},
						DhcpStatus: to.Ptr(armdataboxedge.NetworkAdapterDHCPStatusDisabled),
						DNSServers: []*string{
							to.Ptr("10.50.50.50"),
							to.Ptr("10.50.10.50")},
						Index: to.Ptr[int32](1),
						IPv4Configuration: &armdataboxedge.IPv4Config{
							Gateway:   to.Ptr("10.150.76.1"),
							IPAddress: to.Ptr("10.150.78.56"),
							Subnet:    to.Ptr("255.255.252.0"),
						},
						IPv6Configuration: &armdataboxedge.IPv6Config{
							Gateway:      to.Ptr("fe80::12f3:11ff:fe36:994b%5"),
							IPAddress:    to.Ptr("2404:f801:4800:1e:d5c6:50a1:465b:1bbf"),
							PrefixLength: to.Ptr[int32](64),
						},
						IPv6LinkLocalAddress: to.Ptr("fe80::d5c6:50a1:465b:1bbf%5"),
						Label:                to.Ptr("DATA1"),
						LinkSpeed:            to.Ptr[int64](10000000000),
						MacAddress:           to.Ptr("00155D4E265B"),
						NetworkAdapterName:   to.Ptr("DATA1"),
						NodeID:               to.Ptr("3fd54d9e-f7a0-45bf-bdf1-39b0977d1984"),
						RdmaStatus:           to.Ptr(armdataboxedge.NetworkAdapterRDMAStatusIncapable),
						Status:               to.Ptr(armdataboxedge.NetworkAdapterStatusInactive),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NetworkSettings) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkSettings)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/NetworkSettingsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDevices_ScanForUpdates(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ScanForUpdatesPost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScanForUpdatesPost"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewDevicesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginScanForUpdates(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		&armdataboxedge.DevicesClientBeginScanForUpdatesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ScanForUpdatesPost.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ScanForUpdatesPost.json: %v", err)
	}
}

func TestDevices_CreateOrUpdateSecuritySettings(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/SecuritySettingsUpdatePost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdateSecuritySettings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewDevicesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginCreateOrUpdateSecuritySettings(ctx,
		"testedgedevice",
		"AzureVM",
		armdataboxedge.SecuritySettings{
			Properties: &armdataboxedge.SecuritySettingsProperties{
				DeviceAdminPassword: &armdataboxedge.AsymmetricEncryptedSecret{
					EncryptionAlgorithm:      to.Ptr(armdataboxedge.EncryptionAlgorithmAES256),
					EncryptionCertThumbprint: to.Ptr("<encryptionThumprint>"),
					Value:                    to.Ptr("<deviceAdminPassword>"),
				},
			},
		},
		&armdataboxedge.DevicesClientBeginCreateOrUpdateSecuritySettingsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/SecuritySettingsUpdatePost.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/SecuritySettingsUpdatePost.json: %v", err)
	}
}

func TestDevices_UpdateExtendedInformation(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/GetUpdateExtendedInfo.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetUpdateExtendedInfo"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewDevicesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.UpdateExtendedInformation(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		armdataboxedge.DeviceExtendedInfoPatch{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/GetUpdateExtendedInfo.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.DeviceExtendedInfo{
			Properties: &armdataboxedge.DeviceExtendedInfoProperties{
				ChannelIntegrityKeyName:    to.Ptr("ase-cik-ab861822-21ea-4d31-96ec-89aa066f9a59"),
				ChannelIntegrityKeyVersion: to.Ptr("95e9b619e65f433d82c9e1ead48214b9"),
				ClientSecretStoreID:        to.Ptr("/subscriptions/0d44739e-0563-474f-97e7-24a0cdb23b29/resourceGroups/arja-rg/providers/Microsoft.KeyVault/vaults/test-keyvault-ccy-523"),
				ClientSecretStoreURL:       to.Ptr("https://test-keyvault-ccy-523.vault.azure.net"),
				DeviceSecrets: map[string]*armdataboxedge.Secret{
					"BMCDefaultUserPassword": {},
					"HcsDataVolumeBitLockerExternalKey": {
						KeyVaultID: to.Ptr("Id"),
					},
					"HcsInternalVolumeBitLockerExternalKey": {
						KeyVaultID: to.Ptr("Id"),
					},
					"RotateKeyForDataVolumeBitlocker":  {},
					"RotateKeysForSedDrivesSerialized": {},
					"SEDEncryptionExternalKey":         {},
					"SEDEncryptionExternalKeyId":       {},
					"SystemVolumeBitLockerRecoveryKey": {
						KeyVaultID: to.Ptr("Id"),
					},
				},
				KeyVaultSyncStatus: to.Ptr(armdataboxedge.KeyVaultSyncStatusKeyVaultSynced),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeviceExtendedInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeviceExtendedInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/GetUpdateExtendedInfo.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDevices_GetUpdateSummary(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UpdateSummaryGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateSummaryGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewDevicesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.GetUpdateSummary(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UpdateSummaryGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.UpdateSummary{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/updateSummary"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/updateSummary/default"),
			Properties: &armdataboxedge.UpdateSummaryProperties{
				DeviceLastScannedDateTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-17T19:51:51.7864634Z"); return t }()),
				DeviceVersionNumber:                 to.Ptr("2.1.1377.2170"),
				FriendlyDeviceVersionName:           to.Ptr("Azure Stack Edge 2010"),
				LastCompletedScanJobDateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-17T19:47:46.1595547Z"); return t }()),
				LastDownloadJobStatus:               to.Ptr(armdataboxedge.JobStatusInvalid),
				LastInstallJobStatus:                to.Ptr(armdataboxedge.JobStatusInvalid),
				OngoingUpdateOperation:              to.Ptr(armdataboxedge.UpdateOperationInstall),
				RebootBehavior:                      to.Ptr(armdataboxedge.InstallRebootBehaviorNeverReboots),
				TotalNumberOfUpdatesAvailable:       to.Ptr[int32](1),
				TotalNumberOfUpdatesPendingDownload: to.Ptr[int32](1),
				TotalNumberOfUpdatesPendingInstall:  to.Ptr[int32](1),
				TotalUpdateSizeInBytes:              to.Ptr[float64](4260898192),
				UpdateTitles: []*string{
					to.Ptr("Azure Stack Edge Update 2101 Package 1 of 2 for Pro-GPU, Pro R, Mini R")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.UpdateSummary) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.UpdateSummary)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UpdateSummaryGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDevices_UploadCertificate(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UploadCertificatePost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UploadCertificatePost"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewDevicesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.UploadCertificate(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		armdataboxedge.UploadCertificateRequest{
			Properties: &armdataboxedge.RawCertificateData{
				Certificate: to.Ptr("MIIC9DCCAdygAwIBAgIQWJae7GNjiI9Mcv/gJyrOPTANBgkqhkiG9w0BAQUFADASMRAwDgYDVQQDDAdXaW5kb3dzMB4XDTE4MTEyNzAwMTA0NVoXDTIxMTEyODAwMTA0NVowEjEQMA4GA1UEAwwHV2luZG93czCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKxkRExqxf0qH1avnyORptIbRC2yQwqe3EIbJ2FPKr5jtAppGeX/dGKrFSnX+7/0HFr77aJHafdpEAtOiLyJ4zCAVs0obZCCIq4qJdmjYUTU0UXH/w/YzXfQA0d9Zh9AN+NJBX9xj05NzgsT24fkgsK2v6mWJQXT7YcWAsl5sEYPnx1e+MrupNyVSL/RUJmrS+etJSysHtFeWRhsUhVAs1DD5ExJvBLU3WH0IsojEvpXcjrutB5/MDQNrd/StGI6WovoSSPH7FyT9tgERx+q+Yg3YUGzfaIPCctlrRGehcdtzdNoKd0rsX62yCq0U6POoSfwe22NJu41oAUMd7e6R8cCAwEAAaNGMEQwEwYDVR0lBAwwCgYIKwYBBQUHAwIwHQYDVR0OBBYEFDd0VxnS3LnMIfwc7xW4b4IZWG5GMA4GA1UdDwEB/wQEAwIFIDANBgkqhkiG9w0BAQUFAAOCAQEAPQRby2u9celvtvL/DLEb5Vt3/tPStRQC5MyTD62L5RT/q8E6EMCXVZNkXF5WlWucLJi/18tY+9PNgP9xWLJh7kpSWlWdi9KPtwMqKDlEH8L2TnQdjimt9XuiCrTnoFy/1X2BGLY/rCaUJNSd15QCkz2xeW+Z+YSk2GwAc/A/4YfNpqSIMfNuPrT76o02VdD9WmJUA3fS/HY0sU9qgQRS/3F5/0EPS+HYQ0SvXCK9tggcCd4O050ytNBMJC9qMOJ7yE0iOrFfOJSCfDAuPhn/rHFh79Kn1moF+/CE+nc0/2RPiLC8r54/rt5dYyyxJDfXg0a3VrrX39W69WZGW5OXiw=="),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UploadCertificatePost.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.UploadCertificateResponse{
			AADAuthority:                    to.Ptr("https://login.windows.net"),
			AADTenantID:                     to.Ptr("100b019d-4626-4a9e-a83c-9cff8fe41909"),
			AuthType:                        to.Ptr(armdataboxedge.AuthenticationTypeAzureActiveDirectory),
			AzureManagementEndpointAudience: to.Ptr("https://wus-bvtgateway.ext.trafficmanager.net/"),
			ResourceID:                      to.Ptr("392799901267771"),
			ServicePrincipalClientID:        to.Ptr("ffd8a688-82b1-4e5a-a4c1-7ede8c928e68"),
			ServicePrincipalObjectID:        to.Ptr("cef6d40c-24e6-4a6f-bb9e-3ec60b4adec4"),
		}
		if !reflect.DeepEqual(exampleRes, res.UploadCertificateResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.UploadCertificateResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UploadCertificatePost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlerts_ListByDataBoxEdgeDevice(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/AlertGetAllInDevice.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AlertGetAllInDevice"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewAlertsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	pager := client.ListByDataBoxEdgeDevice("testedgedevice",
		"GroupForEdgeAutomation",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/AlertGetAllInDevice.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataboxedge.AlertList{
			Value: []*armdataboxedge.Alert{
				{
					Name: to.Ptr("83eccd0b-134b-40b0-ad62-b5f124d03790"),
					Type: to.Ptr("dataBoxEdgeDevices/alerts"),
					ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/alerts/83eccd0b-134b-40b0-ad62-b5f124d03790"),
					Properties: &armdataboxedge.AlertProperties{
						AlertType:           to.Ptr("PasswordChangedEvent"),
						AppearedAtDateTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-18T02:29:15.2325577Z"); return t }()),
						DetailedInformation: map[string]*string{},
						ErrorDetails: &armdataboxedge.AlertErrorDetails{
							ErrorCode:    to.Ptr(""),
							ErrorMessage: to.Ptr(""),
							Occurrences:  to.Ptr[int32](2),
						},
						Recommendation: to.Ptr("The device administrator password has changed. This is a required action as part of the first time device setup or regular password reset. No further action is required."),
						Severity:       to.Ptr(armdataboxedge.AlertSeverityInformational),
						Title:          to.Ptr("Device password has changed"),
					},
				},
				{
					Name: to.Ptr("159a00c7-8543-4343-9435-263ac87df3bb"),
					Type: to.Ptr("dataBoxEdgeDevices/alerts"),
					ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/alerts/159a00c7-8543-4343-9435-263ac87df3bb"),
					Properties: &armdataboxedge.AlertProperties{
						AlertType:           to.Ptr("UpdateScanFailedEvent"),
						AppearedAtDateTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-18T02:18:51.4270267Z"); return t }()),
						DetailedInformation: map[string]*string{},
						ErrorDetails: &armdataboxedge.AlertErrorDetails{
							ErrorCode:    to.Ptr(""),
							ErrorMessage: to.Ptr(""),
							Occurrences:  to.Ptr[int32](1),
						},
						Recommendation: to.Ptr("Resolve the error : An internal error has occurred. Please contact Microsoft Support."),
						Severity:       to.Ptr(armdataboxedge.AlertSeverityCritical),
						Title:          to.Ptr("Could not scan for updates. Error message : 'An internal error has occurred. Please contact Microsoft Support.'."),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AlertList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AlertList)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/AlertGetAllInDevice.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlerts_Get(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/AlertGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AlertGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewAlertsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.Get(ctx,
		"testedgedevice",
		"159a00c7-8543-4343-9435-263ac87df3bb",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/AlertGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.Alert{
			Name: to.Ptr("159a00c7-8543-4343-9435-263ac87df3bb"),
			Type: to.Ptr("dataBoxEdgeDevices/alerts"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/alerts/159a00c7-8543-4343-9435-263ac87df3bb"),
			Properties: &armdataboxedge.AlertProperties{
				AlertType:           to.Ptr("UpdateScanFailedEvent"),
				AppearedAtDateTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-18T02:18:51.4270267Z"); return t }()),
				DetailedInformation: map[string]*string{},
				ErrorDetails: &armdataboxedge.AlertErrorDetails{
					ErrorCode:    to.Ptr(""),
					ErrorMessage: to.Ptr(""),
					Occurrences:  to.Ptr[int32](1),
				},
				Recommendation: to.Ptr("Resolve the error : An internal error has occurred. Please contact Microsoft Support."),
				Severity:       to.Ptr(armdataboxedge.AlertSeverityCritical),
				Title:          to.Ptr("Could not scan for updates. Error message : 'An internal error has occurred. Please contact Microsoft Support.'."),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Alert) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Alert)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/AlertGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBandwidthSchedules_ListByDataBoxEdgeDevice(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/BandwidthScheduleGetAllInDevice.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BandwidthScheduleGetAllInDevice"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewBandwidthSchedulesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	pager := client.ListByDataBoxEdgeDevice("testedgedevice",
		"GroupForEdgeAutomation",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/BandwidthScheduleGetAllInDevice.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataboxedge.BandwidthSchedulesList{
			Value: []*armdataboxedge.BandwidthSchedule{
				{
					Name: to.Ptr("bandwidth-1"),
					Type: to.Ptr("dataBoxEdgeDevices/bandwidthSchedules"),
					ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/bandwidthSchedules/bandwidth-1"),
					Properties: &armdataboxedge.BandwidthScheduleProperties{
						Days: []*armdataboxedge.DayOfWeek{
							to.Ptr(armdataboxedge.DayOfWeekSunday),
							to.Ptr(armdataboxedge.DayOfWeekMonday)},
						RateInMbps: to.Ptr[int32](100),
						Start:      to.Ptr("00:00:00"),
						Stop:       to.Ptr("13:59:00"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BandwidthSchedulesList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BandwidthSchedulesList)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/BandwidthScheduleGetAllInDevice.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBandwidthSchedules_Get(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/BandwidthScheduleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BandwidthScheduleGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewBandwidthSchedulesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.Get(ctx,
		"testedgedevice",
		"bandwidth-1",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/BandwidthScheduleGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.BandwidthSchedule{
			Name: to.Ptr("bandwidth-1"),
			Type: to.Ptr("dataBoxEdgeDevices/bandwidthSchedules"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/bandwidthSchedules/bandwidth-1"),
			Properties: &armdataboxedge.BandwidthScheduleProperties{
				Days: []*armdataboxedge.DayOfWeek{
					to.Ptr(armdataboxedge.DayOfWeekSunday),
					to.Ptr(armdataboxedge.DayOfWeekMonday)},
				RateInMbps: to.Ptr[int32](100),
				Start:      to.Ptr("00:00:00"),
				Stop:       to.Ptr("13:59:00"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BandwidthSchedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BandwidthSchedule)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/BandwidthScheduleGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBandwidthSchedules_CreateOrUpdate(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/BandwidthSchedulePut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BandwidthSchedulePut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewBandwidthSchedulesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testedgedevice",
		"bandwidth-1",
		"GroupForEdgeAutomation",
		armdataboxedge.BandwidthSchedule{
			Properties: &armdataboxedge.BandwidthScheduleProperties{
				Days: []*armdataboxedge.DayOfWeek{
					to.Ptr(armdataboxedge.DayOfWeekSunday),
					to.Ptr(armdataboxedge.DayOfWeekMonday)},
				RateInMbps: to.Ptr[int32](100),
				Start:      to.Ptr("0:0:0"),
				Stop:       to.Ptr("13:59:0"),
			},
		},
		&armdataboxedge.BandwidthSchedulesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/BandwidthSchedulePut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/BandwidthSchedulePut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.BandwidthSchedule{
			Name: to.Ptr("bandwidth-1"),
			Type: to.Ptr("dataBoxEdgeDevices/bandwidthSchedules"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/bandwidthSchedules/bandwidth-1"),
			Properties: &armdataboxedge.BandwidthScheduleProperties{
				Days: []*armdataboxedge.DayOfWeek{
					to.Ptr(armdataboxedge.DayOfWeekSunday),
					to.Ptr(armdataboxedge.DayOfWeekMonday)},
				RateInMbps: to.Ptr[int32](100),
				Start:      to.Ptr("00:00:00"),
				Stop:       to.Ptr("13:59:00"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BandwidthSchedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BandwidthSchedule)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/BandwidthSchedulePut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBandwidthSchedules_Delete(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/BandwidthScheduleDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BandwidthScheduleDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewBandwidthSchedulesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"bandwidth-1",
		"GroupForEdgeAutomation",
		&armdataboxedge.BandwidthSchedulesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/BandwidthScheduleDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/BandwidthScheduleDelete.json: %v", err)
	}
}

func TestDiagnosticSettings_GetDiagnosticProactiveLogCollectionSettings(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/GetDiagnosticProactiveLogCollectionSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetDiagnosticProactiveLogCollectionSettings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewDiagnosticSettingsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.GetDiagnosticProactiveLogCollectionSettings(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/GetDiagnosticProactiveLogCollectionSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.DiagnosticProactiveLogCollectionSettings{
			Name: to.Ptr("default"),
			Type: to.Ptr("dataBoxEdgeDevices/diagnosticSettings"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/diagnosticProactiveLogCollectionSettings/default"),
			Properties: &armdataboxedge.ProactiveLogCollectionSettingsProperties{
				UserConsent: to.Ptr(armdataboxedge.ProactiveDiagnosticsConsentEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticProactiveLogCollectionSettings) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticProactiveLogCollectionSettings)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/GetDiagnosticProactiveLogCollectionSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnosticSettings_UpdateDiagnosticProactiveLogCollectionSettings(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UpdateDiagnosticProactiveLogCollectionSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateDiagnosticProactiveLogCollectionSettings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewDiagnosticSettingsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginUpdateDiagnosticProactiveLogCollectionSettings(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		armdataboxedge.DiagnosticProactiveLogCollectionSettings{
			Properties: &armdataboxedge.ProactiveLogCollectionSettingsProperties{
				UserConsent: to.Ptr(armdataboxedge.ProactiveDiagnosticsConsentEnabled),
			},
		},
		&armdataboxedge.DiagnosticSettingsClientBeginUpdateDiagnosticProactiveLogCollectionSettingsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UpdateDiagnosticProactiveLogCollectionSettings.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UpdateDiagnosticProactiveLogCollectionSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.DiagnosticProactiveLogCollectionSettings{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/diagnosticSettings"),
			ID:   to.Ptr("/subscriptions/0d44739e-0563-474f-97e7-24a0cdb23b29/resourceGroups/GroupForDataBoxEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/dbe-autobot-5428209/diagnosticProactiveLogCollectionSettings/default"),
			Properties: &armdataboxedge.ProactiveLogCollectionSettingsProperties{
				UserConsent: to.Ptr(armdataboxedge.ProactiveDiagnosticsConsentDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticProactiveLogCollectionSettings) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticProactiveLogCollectionSettings)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UpdateDiagnosticProactiveLogCollectionSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnosticSettings_GetDiagnosticRemoteSupportSettings(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/GetDiagnosticRemoteSupportSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetDiagnosticRemoteSupportSettings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewDiagnosticSettingsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.GetDiagnosticRemoteSupportSettings(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/GetDiagnosticRemoteSupportSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.DiagnosticRemoteSupportSettings{
			Name: to.Ptr("default"),
			Type: to.Ptr("dataBoxEdgeDevices/diagnosticSettings"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/diagnosticRemoteSupportSettings/default"),
			Properties: &armdataboxedge.DiagnosticRemoteSupportSettingsProperties{
				RemoteSupportSettingsList: []*armdataboxedge.RemoteSupportSettings{
					{
						AccessLevel:              to.Ptr(armdataboxedge.AccessLevelReadWrite),
						ExpirationTimeStampInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-07T00:00:00+00:00"); return t }()),
						RemoteApplicationType:    to.Ptr(armdataboxedge.RemoteApplicationTypeLocalUI),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticRemoteSupportSettings) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticRemoteSupportSettings)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/GetDiagnosticRemoteSupportSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnosticSettings_UpdateDiagnosticRemoteSupportSettings(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UpdateDiagnosticRemoteSupportSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateDiagnosticRemoteSupportSettings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewDiagnosticSettingsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginUpdateDiagnosticRemoteSupportSettings(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		armdataboxedge.DiagnosticRemoteSupportSettings{
			Properties: &armdataboxedge.DiagnosticRemoteSupportSettingsProperties{
				RemoteSupportSettingsList: []*armdataboxedge.RemoteSupportSettings{
					{
						AccessLevel:              to.Ptr(armdataboxedge.AccessLevelReadWrite),
						ExpirationTimeStampInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-07T00:00:00+00:00"); return t }()),
						RemoteApplicationType:    to.Ptr(armdataboxedge.RemoteApplicationTypePowershell),
					}},
			},
		},
		&armdataboxedge.DiagnosticSettingsClientBeginUpdateDiagnosticRemoteSupportSettingsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UpdateDiagnosticRemoteSupportSettings.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UpdateDiagnosticRemoteSupportSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.DiagnosticRemoteSupportSettings{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/diagnosticSettings"),
			ID:   to.Ptr("/subscriptions/0d44739e-0563-474f-97e7-24a0cdb23b29/resourceGroups/GroupForDataBoxEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/dbe-autobot-154c8a4/diagnosticRemoteSupportSettings/default"),
			Properties: &armdataboxedge.DiagnosticRemoteSupportSettingsProperties{
				RemoteSupportSettingsList: []*armdataboxedge.RemoteSupportSettings{
					{
						AccessLevel:              to.Ptr(armdataboxedge.AccessLevelReadWrite),
						ExpirationTimeStampInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2500-09-14T00:00:00+00:00"); return t }()),
						RemoteApplicationType:    to.Ptr(armdataboxedge.RemoteApplicationTypePowershell),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticRemoteSupportSettings) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticRemoteSupportSettings)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UpdateDiagnosticRemoteSupportSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobs_Get(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/JobsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"JobsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewJobsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.Get(ctx,
		"testedgedevice",
		"159a00c7-8543-4343-9435-263ac87df3bb",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/JobsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.Job{
			Name:            to.Ptr("159a00c7-8543-4343-9435-263ac87df3bb"),
			EndTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-18T03:18:51.4270267Z"); return t }()),
			ID:              to.Ptr("/subscriptions/id/locations/westus/jobs/159a00c7-8543-4343-9435-263ac87df3bb"),
			PercentComplete: to.Ptr[int32](100),
			Properties: &armdataboxedge.JobProperties{
				CurrentStage: to.Ptr(armdataboxedge.UpdateOperationStageSuccess),
				JobType:      to.Ptr(armdataboxedge.JobTypeDownloadUpdates),
			},
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-18T02:18:51.4270267Z"); return t }()),
			Status:    to.Ptr(armdataboxedge.JobStatusSucceeded),
		}
		if !reflect.DeepEqual(exampleRes, res.Job) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Job)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/JobsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNodes_ListByDataBoxEdgeDevice(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/NodeGetAllInDevice.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NodesGetAllInDevice"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewNodesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	pager := client.ListByDataBoxEdgeDevice("testedgedevice",
		"GroupForEdgeAutomation",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/NodeGetAllInDevice.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataboxedge.NodeList{
			Value: []*armdataboxedge.Node{
				{
					Name: to.Ptr("1D6QHQ2"),
					Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/nodes"),
					ID:   to.Ptr("/subscriptions/db4e2fdb-6d80-4e6e-b7cd-736098270664/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/DataBoxEdgeDevices/testedgedevice/nodes/1D6QHQ2"),
					Properties: &armdataboxedge.NodeProperties{
						NodeChassisSerialNumber:     to.Ptr("1D6QHQ2"),
						NodeDisplayName:             to.Ptr("Controller 1"),
						NodeFriendlySoftwareVersion: to.Ptr("Data Box Edge 1908"),
						NodeHcsVersion:              to.Ptr("1.6.961.8307"),
						NodeInstanceID:              to.Ptr("ad051874-7d27-4ac4-a7b1-b6f231d8a035"),
						NodeSerialNumber:            to.Ptr("1D6QHQ2"),
						NodeStatus:                  to.Ptr(armdataboxedge.NodeStatusUnknown),
					},
				},
				{
					Name: to.Ptr("1DCNHQ2"),
					Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/nodes"),
					ID:   to.Ptr("/subscriptions/db4e2fdb-6d80-4e6e-b7cd-736098270664/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/DataBoxEdgeDevices/testedgedevice/nodes/1DCNHQ2"),
					Properties: &armdataboxedge.NodeProperties{
						NodeChassisSerialNumber:     to.Ptr("1D6QHQ2"),
						NodeDisplayName:             to.Ptr("Controller 1"),
						NodeFriendlySoftwareVersion: to.Ptr("Data Box Edge 1908"),
						NodeHcsVersion:              to.Ptr("1.6.961.8307"),
						NodeInstanceID:              to.Ptr("ddf3a76d-ada4-44af-99c6-a69a0e21bcb6"),
						NodeSerialNumber:            to.Ptr("1DCNHQ2"),
						NodeStatus:                  to.Ptr(armdataboxedge.NodeStatusUnknown),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NodeList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NodeList)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/NodeGetAllInDevice.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperationsStatus_Get(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/OperationsStatusGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OperationsStatusGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewOperationsStatusClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.Get(ctx,
		"testedgedevice",
		"159a00c7-8543-4343-9435-263ac87df3bb",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/OperationsStatusGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.Job{
			Name:            to.Ptr("159a00c7-8543-4343-9435-263ac87df3bb"),
			EndTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-18T03:18:51.4270267Z"); return t }()),
			ID:              to.Ptr("/subscriptions/id/locations/westus/operationsStatus/159a00c7-8543-4343-9435-263ac87df3bb"),
			PercentComplete: to.Ptr[int32](100),
			Properties: &armdataboxedge.JobProperties{
				CurrentStage: to.Ptr(armdataboxedge.UpdateOperationStageSuccess),
				JobType:      to.Ptr(armdataboxedge.JobTypeDownloadUpdates),
			},
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-18T02:18:51.4270267Z"); return t }()),
			Status:    to.Ptr(armdataboxedge.JobStatusSucceeded),
		}
		if !reflect.DeepEqual(exampleRes, res.Job) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Job)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/OperationsStatusGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOrders_ListByDataBoxEdgeDevice(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/OrderGetAllInDevice.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OrderGetAllInDevice"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewOrdersClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	pager := client.ListByDataBoxEdgeDevice("testedgedevice",
		"GroupForEdgeAutomation",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/OrderGetAllInDevice.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataboxedge.OrderList{
			Value: []*armdataboxedge.Order{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("dataBoxEdgeDevices/orders"),
					ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/orders/default"),
					Properties: &armdataboxedge.OrderProperties{
						ContactInformation: &armdataboxedge.ContactDetails{
							CompanyName:   to.Ptr("Microsoft"),
							ContactPerson: to.Ptr("John Mcclane"),
							EmailList: []*string{
								to.Ptr("john@microsoft.com")},
							Phone: to.Ptr("(800) 426-9400"),
						},
						CurrentStatus: &armdataboxedge.OrderStatus{
							Comments:       to.Ptr(""),
							Status:         to.Ptr(armdataboxedge.OrderStateUntracked),
							UpdateDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-10T07:59:05.847Z"); return t }()),
						},
						DeliveryTrackingInfo: []*armdataboxedge.TrackingInfo{},
						OrderHistory: []*armdataboxedge.OrderStatus{
							{
								Comments:       to.Ptr("lorem ipsum"),
								Status:         to.Ptr(armdataboxedge.OrderStateUntracked),
								UpdateDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-10T07:59:05.847Z"); return t }()),
							}},
						ReturnTrackingInfo: []*armdataboxedge.TrackingInfo{},
						SerialNumber:       to.Ptr("UDS123NSDA123"),
						ShippingAddress: &armdataboxedge.Address{
							AddressLine1: to.Ptr("Microsoft Corporation"),
							AddressLine2: to.Ptr("One Microsoft Way"),
							AddressLine3: to.Ptr("Redmond"),
							City:         to.Ptr("WA"),
							Country:      to.Ptr("USA"),
							PostalCode:   to.Ptr("98052"),
							State:        to.Ptr("WA"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OrderList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OrderList)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/OrderGetAllInDevice.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOrders_Get(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/OrderGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OrderGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewOrdersClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.Get(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/OrderGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.Order{
			Name: to.Ptr("default"),
			Type: to.Ptr("dataBoxEdgeDevices/orders"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/orders/default"),
			Properties: &armdataboxedge.OrderProperties{
				ContactInformation: &armdataboxedge.ContactDetails{
					CompanyName:   to.Ptr("Microsoft"),
					ContactPerson: to.Ptr("John Mcclane"),
					EmailList: []*string{
						to.Ptr("john@microsoft.com")},
					Phone: to.Ptr("(800) 426-9400"),
				},
				CurrentStatus: &armdataboxedge.OrderStatus{
					Comments:       to.Ptr(""),
					Status:         to.Ptr(armdataboxedge.OrderStateUntracked),
					UpdateDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-10T07:59:05.847Z"); return t }()),
				},
				DeliveryTrackingInfo: []*armdataboxedge.TrackingInfo{},
				OrderHistory: []*armdataboxedge.OrderStatus{
					{
						Comments:       to.Ptr("lorem ipsum"),
						Status:         to.Ptr(armdataboxedge.OrderStateUntracked),
						UpdateDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-10T07:59:05.847Z"); return t }()),
					}},
				ReturnTrackingInfo: []*armdataboxedge.TrackingInfo{},
				SerialNumber:       to.Ptr("UDS123NSDA123"),
				ShippingAddress: &armdataboxedge.Address{
					AddressLine1: to.Ptr("Microsoft Corporation"),
					AddressLine2: to.Ptr("One Microsoft Way"),
					AddressLine3: to.Ptr("Redmond"),
					City:         to.Ptr("WA"),
					Country:      to.Ptr("USA"),
					PostalCode:   to.Ptr("98052"),
					State:        to.Ptr("WA"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Order) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Order)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/OrderGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOrders_CreateOrUpdate(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/OrderPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OrderPut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewOrdersClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		armdataboxedge.Order{
			Properties: &armdataboxedge.OrderProperties{
				ContactInformation: &armdataboxedge.ContactDetails{
					CompanyName:   to.Ptr("Microsoft"),
					ContactPerson: to.Ptr("John Mcclane"),
					EmailList: []*string{
						to.Ptr("john@microsoft.com")},
					Phone: to.Ptr("(800) 426-9400"),
				},
				ShippingAddress: &armdataboxedge.Address{
					AddressLine1: to.Ptr("Microsoft Corporation"),
					AddressLine2: to.Ptr("One Microsoft Way"),
					AddressLine3: to.Ptr("Redmond"),
					City:         to.Ptr("WA"),
					Country:      to.Ptr("USA"),
					PostalCode:   to.Ptr("98052"),
					State:        to.Ptr("WA"),
				},
			},
		},
		&armdataboxedge.OrdersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/OrderPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/OrderPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.Order{
			Name: to.Ptr("default"),
			Type: to.Ptr("dataBoxEdgeDevices/orders"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/orders/default"),
			Properties: &armdataboxedge.OrderProperties{
				ContactInformation: &armdataboxedge.ContactDetails{
					CompanyName:   to.Ptr("Microsoft"),
					ContactPerson: to.Ptr("John Mcclane"),
					EmailList: []*string{
						to.Ptr("john@microsoft.com")},
					Phone: to.Ptr("(800) 426-9400"),
				},
				CurrentStatus: &armdataboxedge.OrderStatus{
					Comments:       to.Ptr(""),
					Status:         to.Ptr(armdataboxedge.OrderStateUntracked),
					UpdateDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-10T07:59:05.847Z"); return t }()),
				},
				DeliveryTrackingInfo: []*armdataboxedge.TrackingInfo{},
				OrderHistory: []*armdataboxedge.OrderStatus{
					{
						Comments:       to.Ptr("lorem ipsum"),
						Status:         to.Ptr(armdataboxedge.OrderStateUntracked),
						UpdateDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-10T07:59:05.847Z"); return t }()),
					}},
				ReturnTrackingInfo: []*armdataboxedge.TrackingInfo{},
				SerialNumber:       to.Ptr("UDS123NSDA123"),
				ShippingAddress: &armdataboxedge.Address{
					AddressLine1: to.Ptr("Microsoft Corporation"),
					AddressLine2: to.Ptr("One Microsoft Way"),
					AddressLine3: to.Ptr("Redmond"),
					City:         to.Ptr("WA"),
					Country:      to.Ptr("USA"),
					PostalCode:   to.Ptr("98052"),
					State:        to.Ptr("WA"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Order) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Order)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/OrderPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOrders_Delete(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/OrderDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OrderDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewOrdersClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		&armdataboxedge.OrdersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/OrderDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/OrderDelete.json: %v", err)
	}
}

func TestOrders_ListDCAccessCode(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/GetDCAccessCode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetDCAccessCode"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewOrdersClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.ListDCAccessCode(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/GetDCAccessCode.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.DCAccessCode{
			Properties: &armdataboxedge.DCAccessCodeProperties{
				AuthCode: to.Ptr("_sv7-NY2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DCAccessCode) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DCAccessCode)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/GetDCAccessCode.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoles_ListByDataBoxEdgeDevice(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/RoleGetAllInDevice.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RoleGetAllInDevice"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewRolesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	pager := client.ListByDataBoxEdgeDevice("testedgedevice",
		"GroupForEdgeAutomation",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/RoleGetAllInDevice.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataboxedge.RoleList{
			Value: []armdataboxedge.RoleClassification{
				&armdataboxedge.IoTRole{
					Name: to.Ptr("IoTRole1"),
					Type: to.Ptr("dataBoxEdgeDevices/roles"),
					ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/roles/IoTRole1"),
					Kind: to.Ptr(armdataboxedge.RoleTypesIOT),
					Properties: &armdataboxedge.IoTRoleProperties{
						HostPlatform: to.Ptr(armdataboxedge.PlatformTypeLinux),
						IoTDeviceDetails: &armdataboxedge.IoTDeviceInfo{
							Authentication: &armdataboxedge.Authentication{
								SymmetricKey: &armdataboxedge.SymmetricKey{},
							},
							DeviceID:   to.Ptr("iotdevice"),
							IoTHostHub: to.Ptr("iothub.azure-devices.net"),
						},
						IoTEdgeDeviceDetails: &armdataboxedge.IoTDeviceInfo{
							Authentication: &armdataboxedge.Authentication{
								SymmetricKey: &armdataboxedge.SymmetricKey{},
							},
							DeviceID:   to.Ptr("iotEdge"),
							IoTHostHub: to.Ptr("iothub.azure-devices.net"),
						},
						RoleStatus:    to.Ptr(armdataboxedge.RoleStatusEnabled),
						ShareMappings: []*armdataboxedge.MountPointMap{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RoleList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RoleList)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/RoleGetAllInDevice.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoles_Get(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/RoleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RoleGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewRolesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.Get(ctx,
		"testedgedevice",
		"IoTRole1",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/RoleGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.RolesClientGetResponse{
			&armdataboxedge.IoTRole{
				Name: to.Ptr("IoTRole1"),
				Type: to.Ptr("dataBoxEdgeDevices/roles"),
				ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/roles/IoTRole1"),
				Kind: to.Ptr(armdataboxedge.RoleTypesIOT),
				Properties: &armdataboxedge.IoTRoleProperties{
					HostPlatform: to.Ptr(armdataboxedge.PlatformTypeLinux),
					IoTDeviceDetails: &armdataboxedge.IoTDeviceInfo{
						Authentication: &armdataboxedge.Authentication{
							SymmetricKey: &armdataboxedge.SymmetricKey{},
						},
						DeviceID:   to.Ptr("iotdevice"),
						IoTHostHub: to.Ptr("iothub.azure-devices.net"),
					},
					IoTEdgeDeviceDetails: &armdataboxedge.IoTDeviceInfo{
						Authentication: &armdataboxedge.Authentication{
							SymmetricKey: &armdataboxedge.SymmetricKey{},
						},
						DeviceID:   to.Ptr("iotEdge"),
						IoTHostHub: to.Ptr("iothub.azure-devices.net"),
					},
					RoleStatus:    to.Ptr(armdataboxedge.RoleStatusEnabled),
					ShareMappings: []*armdataboxedge.MountPointMap{},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/RoleGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoles_CreateOrUpdate(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/RolePut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RolePut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewRolesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testedgedevice",
		"IoTRole1",
		"GroupForEdgeAutomation",
		&armdataboxedge.IoTRole{
			Kind: to.Ptr(armdataboxedge.RoleTypesIOT),
			Properties: &armdataboxedge.IoTRoleProperties{
				HostPlatform: to.Ptr(armdataboxedge.PlatformTypeLinux),
				IoTDeviceDetails: &armdataboxedge.IoTDeviceInfo{
					Authentication: &armdataboxedge.Authentication{
						SymmetricKey: &armdataboxedge.SymmetricKey{
							ConnectionString: &armdataboxedge.AsymmetricEncryptedSecret{
								EncryptionAlgorithm:      to.Ptr(armdataboxedge.EncryptionAlgorithmAES256),
								EncryptionCertThumbprint: to.Ptr("348586569999244"),
								Value:                    to.Ptr("Encrypted<<HostName=iothub.azure-devices.net;DeviceId=iotDevice;SharedAccessKey=2C750FscEas3JmQ8Bnui5yQWZPyml0/UiRt1bQwd8=>>"),
							},
						},
					},
					DeviceID:   to.Ptr("iotdevice"),
					IoTHostHub: to.Ptr("iothub.azure-devices.net"),
				},
				IoTEdgeDeviceDetails: &armdataboxedge.IoTDeviceInfo{
					Authentication: &armdataboxedge.Authentication{
						SymmetricKey: &armdataboxedge.SymmetricKey{
							ConnectionString: &armdataboxedge.AsymmetricEncryptedSecret{
								EncryptionAlgorithm:      to.Ptr(armdataboxedge.EncryptionAlgorithmAES256),
								EncryptionCertThumbprint: to.Ptr("1245475856069999244"),
								Value:                    to.Ptr("Encrypted<<HostName=iothub.azure-devices.net;DeviceId=iotEdge;SharedAccessKey=2C750FscEas3JmQ8Bnui5yQWZPyml0/UiRt1bQwd8=>>"),
							},
						},
					},
					DeviceID:   to.Ptr("iotEdge"),
					IoTHostHub: to.Ptr("iothub.azure-devices.net"),
				},
				RoleStatus:    to.Ptr(armdataboxedge.RoleStatusEnabled),
				ShareMappings: []*armdataboxedge.MountPointMap{},
			},
		},
		&armdataboxedge.RolesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/RolePut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/RolePut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.RolesClientCreateOrUpdateResponse{
			&armdataboxedge.IoTRole{
				Name: to.Ptr("IoTRole1"),
				Type: to.Ptr("dataBoxEdgeDevices/roles"),
				ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/roles/IoTRole1"),
				Kind: to.Ptr(armdataboxedge.RoleTypesIOT),
				Properties: &armdataboxedge.IoTRoleProperties{
					HostPlatform: to.Ptr(armdataboxedge.PlatformTypeLinux),
					IoTDeviceDetails: &armdataboxedge.IoTDeviceInfo{
						Authentication: &armdataboxedge.Authentication{
							SymmetricKey: &armdataboxedge.SymmetricKey{},
						},
						DeviceID:   to.Ptr("iotdevice"),
						IoTHostHub: to.Ptr("iothub.azure-devices.net"),
					},
					IoTEdgeDeviceDetails: &armdataboxedge.IoTDeviceInfo{
						Authentication: &armdataboxedge.Authentication{
							SymmetricKey: &armdataboxedge.SymmetricKey{},
						},
						DeviceID:   to.Ptr("iotEdge"),
						IoTHostHub: to.Ptr("iothub.azure-devices.net"),
					},
					RoleStatus:    to.Ptr(armdataboxedge.RoleStatusEnabled),
					ShareMappings: []*armdataboxedge.MountPointMap{},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/RolePut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRoles_Delete(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/RoleDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RoleDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewRolesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"IoTRole1",
		"GroupForEdgeAutomation",
		&armdataboxedge.RolesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/RoleDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/RoleDelete.json: %v", err)
	}
}

func TestAddons_ListByRole(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/RoleListAddOns.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RoleListAddOns"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewAddonsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	pager := client.ListByRole("testedgedevice",
		"IoTRole1",
		"GroupForEdgeAutomation",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/RoleListAddOns.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataboxedge.AddonList{
			Value: []armdataboxedge.AddonClassification{
				&armdataboxedge.ArcAddon{
					Name: to.Ptr("arcName"),
					Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/roles/addons"),
					ID:   to.Ptr("/subscriptions/0d44739e-0563-474f-97e7-24a0cdb23b29/resourcegroups/prpare/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/addonExamples/roles/kubernetesRole/addons/arcName"),
					Kind: to.Ptr(armdataboxedge.AddonTypeArcForKubernetes),
					Properties: &armdataboxedge.ArcAddonProperties{
						HostPlatform:      to.Ptr(armdataboxedge.PlatformTypeLinux),
						HostPlatformType:  to.Ptr(armdataboxedge.HostPlatformTypeKubernetesCluster),
						ProvisioningState: to.Ptr(armdataboxedge.AddonState("Succeeded")),
						ResourceGroupName: to.Ptr("testrg1"),
						ResourceLocation:  to.Ptr("EastUS"),
						ResourceName:      to.Ptr("testresource1"),
						SubscriptionID:    to.Ptr("0d44739e-0563-474f-97e7-24a0cdb23b29"),
						Version:           to.Ptr("0.2.18"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AddonList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AddonList)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/RoleListAddOns.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAddons_Get(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/GetAddons.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetAddOns"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewAddonsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.Get(ctx,
		"testedgedevice",
		"KubernetesRole",
		"arcName",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/GetAddons.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.AddonsClientGetResponse{
			&armdataboxedge.ArcAddon{
				Name: to.Ptr("arcName"),
				Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/roles/addons"),
				ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourcegroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/addonExamples/roles/kubernetesRole/addons/arcName"),
				Kind: to.Ptr(armdataboxedge.AddonTypeArcForKubernetes),
				Properties: &armdataboxedge.ArcAddonProperties{
					HostPlatform:      to.Ptr(armdataboxedge.PlatformTypeLinux),
					HostPlatformType:  to.Ptr(armdataboxedge.HostPlatformTypeKubernetesCluster),
					ProvisioningState: to.Ptr(armdataboxedge.AddonState("Succeeded")),
					ResourceGroupName: to.Ptr("GroupForEdgeAutomation"),
					ResourceLocation:  to.Ptr("EastUS"),
					ResourceName:      to.Ptr("testedgedevice"),
					SubscriptionID:    to.Ptr("4385cf00-2d3a-425a-832f-f4285b1c9dce"),
					Version:           to.Ptr("0.2.18"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/GetAddons.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAddons_CreateOrUpdate(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/PutAddons.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutAddOns"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewAddonsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testedgedevice",
		"KubernetesRole",
		"arcName",
		"GroupForEdgeAutomation",
		&armdataboxedge.ArcAddon{
			Kind: to.Ptr(armdataboxedge.AddonTypeArcForKubernetes),
			Properties: &armdataboxedge.ArcAddonProperties{
				ResourceGroupName: to.Ptr("GroupForEdgeAutomation"),
				ResourceLocation:  to.Ptr("EastUS"),
				ResourceName:      to.Ptr("testedgedevice"),
				SubscriptionID:    to.Ptr("4385cf00-2d3a-425a-832f-f4285b1c9dce"),
			},
		},
		&armdataboxedge.AddonsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/PutAddons.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/PutAddons.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.AddonsClientCreateOrUpdateResponse{
			&armdataboxedge.ArcAddon{
				Name: to.Ptr("arcName"),
				Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/roles/addons"),
				ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourcegroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/addonExamples/roles/kubernetesRole/addons/arcName"),
				Kind: to.Ptr(armdataboxedge.AddonTypeArcForKubernetes),
				Properties: &armdataboxedge.ArcAddonProperties{
					HostPlatform:      to.Ptr(armdataboxedge.PlatformTypeLinux),
					HostPlatformType:  to.Ptr(armdataboxedge.HostPlatformTypeKubernetesCluster),
					ProvisioningState: to.Ptr(armdataboxedge.AddonState("Succeeded")),
					ResourceGroupName: to.Ptr("GroupForEdgeAutomation"),
					ResourceLocation:  to.Ptr("EastUS"),
					ResourceName:      to.Ptr("testedgedevice"),
					SubscriptionID:    to.Ptr("4385cf00-2d3a-425a-832f-f4285b1c9dce"),
					Version:           to.Ptr("0.2.18"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/PutAddons.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAddons_Delete(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DeleteAddons.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteAddOns"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewAddonsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"KubernetesRole",
		"arcName",
		"GroupForEdgeAutomation",
		&armdataboxedge.AddonsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DeleteAddons.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DeleteAddons.json: %v", err)
	}
}

func TestMonitoringConfig_List(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ListMonitoringConfig.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListMonitoringConfig"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewMonitoringConfigClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	pager := client.List("testedgedevice",
		"testrole",
		"GroupForEdgeAutomation",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ListMonitoringConfig.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataboxedge.MonitoringMetricConfigurationList{
			Value: []*armdataboxedge.MonitoringMetricConfiguration{
				{
					Properties: &armdataboxedge.MonitoringMetricConfigurationProperties{
						MetricConfigurations: []*armdataboxedge.MetricConfiguration{
							{
								CounterSets: []*armdataboxedge.MetricCounterSet{
									{
										Counters: []*armdataboxedge.MetricCounter{
											{
												Name: to.Ptr("test"),
											}},
									}},
								MdmAccount:      to.Ptr("test"),
								MetricNameSpace: to.Ptr("test"),
								ResourceID:      to.Ptr("test"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MonitoringMetricConfigurationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MonitoringMetricConfigurationList)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ListMonitoringConfig.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitoringConfig_Get(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/GetMonitoringConfig.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetMonitoringConfig"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewMonitoringConfigClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.Get(ctx,
		"testedgedevice",
		"testrole",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/GetMonitoringConfig.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.MonitoringMetricConfiguration{
			Properties: &armdataboxedge.MonitoringMetricConfigurationProperties{
				MetricConfigurations: []*armdataboxedge.MetricConfiguration{
					{
						CounterSets: []*armdataboxedge.MetricCounterSet{
							{
								Counters: []*armdataboxedge.MetricCounter{
									{
										Name: to.Ptr("test"),
									}},
							}},
						MdmAccount:      to.Ptr("test"),
						MetricNameSpace: to.Ptr("test"),
						ResourceID:      to.Ptr("test"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitoringMetricConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitoringMetricConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/GetMonitoringConfig.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitoringConfig_CreateOrUpdate(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/PutMonitoringConfig.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutMonitoringConfig"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewMonitoringConfigClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testedgedevice",
		"testrole",
		"GroupForEdgeAutomation",
		armdataboxedge.MonitoringMetricConfiguration{
			Properties: &armdataboxedge.MonitoringMetricConfigurationProperties{
				MetricConfigurations: []*armdataboxedge.MetricConfiguration{
					{
						CounterSets: []*armdataboxedge.MetricCounterSet{
							{
								Counters: []*armdataboxedge.MetricCounter{
									{
										Name: to.Ptr("test"),
									}},
							}},
						MdmAccount:      to.Ptr("test"),
						MetricNameSpace: to.Ptr("test"),
						ResourceID:      to.Ptr("test"),
					}},
			},
		},
		&armdataboxedge.MonitoringConfigClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/PutMonitoringConfig.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/PutMonitoringConfig.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.MonitoringMetricConfiguration{
			Properties: &armdataboxedge.MonitoringMetricConfigurationProperties{
				MetricConfigurations: []*armdataboxedge.MetricConfiguration{
					{
						CounterSets: []*armdataboxedge.MetricCounterSet{
							{
								Counters: []*armdataboxedge.MetricCounter{
									{
										Name: to.Ptr("test"),
									}},
							}},
						MdmAccount:      to.Ptr("test"),
						MetricNameSpace: to.Ptr("test"),
						ResourceID:      to.Ptr("test"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitoringMetricConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitoringMetricConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/PutMonitoringConfig.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitoringConfig_Delete(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DeleteMonitoringConfig.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteMonitoringConfig"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewMonitoringConfigClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"testrole",
		"GroupForEdgeAutomation",
		&armdataboxedge.MonitoringConfigClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DeleteMonitoringConfig.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/DeleteMonitoringConfig.json: %v", err)
	}
}

func TestShares_ListByDataBoxEdgeDevice(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ShareGetAllInDevice.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ShareGetAllInDevice"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewSharesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	pager := client.ListByDataBoxEdgeDevice("testedgedevice",
		"GroupForEdgeAutomation",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ShareGetAllInDevice.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataboxedge.ShareList{
			Value: []*armdataboxedge.Share{
				{
					Name: to.Ptr("smbshare"),
					Type: to.Ptr("dataBoxEdgeDevices/shares"),
					ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/shares/smbshare"),
					Properties: &armdataboxedge.ShareProperties{
						Description:    to.Ptr(""),
						AccessProtocol: to.Ptr(armdataboxedge.ShareAccessProtocolSMB),
						AzureContainerInfo: &armdataboxedge.AzureContainerInfo{
							ContainerName:              to.Ptr("testContainerSMB"),
							DataFormat:                 to.Ptr(armdataboxedge.AzureContainerDataFormatBlockBlob),
							StorageAccountCredentialID: to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/storageAccountCredentials/sac1"),
						},
						ClientAccessRights: []*armdataboxedge.ClientAccessRight{},
						DataPolicy:         to.Ptr(armdataboxedge.DataPolicyCloud),
						MonitoringStatus:   to.Ptr(armdataboxedge.MonitoringStatusDisabled),
						RefreshDetails:     &armdataboxedge.RefreshDetails{},
						ShareMappings:      []*armdataboxedge.MountPointMap{},
						ShareStatus:        to.Ptr(armdataboxedge.ShareStatus("Online")),
						UserAccessRights: []*armdataboxedge.UserAccessRight{
							{
								AccessType: to.Ptr(armdataboxedge.ShareAccessTypeChange),
								UserID:     to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/users/user2"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ShareList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ShareList)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ShareGetAllInDevice.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestShares_Get(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ShareGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ShareGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewSharesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.Get(ctx,
		"testedgedevice",
		"smbshare",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ShareGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.Share{
			Name: to.Ptr("smbshare"),
			Type: to.Ptr("dataBoxEdgeDevices/shares"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/shares/smbshare"),
			Properties: &armdataboxedge.ShareProperties{
				Description:    to.Ptr(""),
				AccessProtocol: to.Ptr(armdataboxedge.ShareAccessProtocolSMB),
				AzureContainerInfo: &armdataboxedge.AzureContainerInfo{
					ContainerName:              to.Ptr("testContainerSMB"),
					DataFormat:                 to.Ptr(armdataboxedge.AzureContainerDataFormatBlockBlob),
					StorageAccountCredentialID: to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/storageAccountCredentials/sac1"),
				},
				ClientAccessRights: []*armdataboxedge.ClientAccessRight{},
				DataPolicy:         to.Ptr(armdataboxedge.DataPolicyCloud),
				MonitoringStatus:   to.Ptr(armdataboxedge.MonitoringStatusDisabled),
				RefreshDetails:     &armdataboxedge.RefreshDetails{},
				ShareMappings:      []*armdataboxedge.MountPointMap{},
				ShareStatus:        to.Ptr(armdataboxedge.ShareStatus("Online")),
				UserAccessRights: []*armdataboxedge.UserAccessRight{
					{
						AccessType: to.Ptr(armdataboxedge.ShareAccessTypeChange),
						UserID:     to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/users/user2"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Share) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Share)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ShareGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestShares_CreateOrUpdate(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/SharePut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SharePut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewSharesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testedgedevice",
		"smbshare",
		"GroupForEdgeAutomation",
		armdataboxedge.Share{
			Properties: &armdataboxedge.ShareProperties{
				Description:    to.Ptr(""),
				AccessProtocol: to.Ptr(armdataboxedge.ShareAccessProtocolSMB),
				AzureContainerInfo: &armdataboxedge.AzureContainerInfo{
					ContainerName:              to.Ptr("testContainerSMB"),
					DataFormat:                 to.Ptr(armdataboxedge.AzureContainerDataFormatBlockBlob),
					StorageAccountCredentialID: to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/storageAccountCredentials/sac1"),
				},
				DataPolicy:       to.Ptr(armdataboxedge.DataPolicyCloud),
				MonitoringStatus: to.Ptr(armdataboxedge.MonitoringStatusEnabled),
				ShareStatus:      to.Ptr(armdataboxedge.ShareStatus("Online")),
				UserAccessRights: []*armdataboxedge.UserAccessRight{
					{
						AccessType: to.Ptr(armdataboxedge.ShareAccessTypeChange),
						UserID:     to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/users/user2"),
					}},
			},
		},
		&armdataboxedge.SharesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/SharePut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/SharePut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.Share{
			Name: to.Ptr("smbshare"),
			Type: to.Ptr("dataBoxEdgeDevices/shares"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/shares/smbshare"),
			Properties: &armdataboxedge.ShareProperties{
				Description:    to.Ptr(""),
				AccessProtocol: to.Ptr(armdataboxedge.ShareAccessProtocolSMB),
				AzureContainerInfo: &armdataboxedge.AzureContainerInfo{
					ContainerName:              to.Ptr("testContainerSMB"),
					DataFormat:                 to.Ptr(armdataboxedge.AzureContainerDataFormatBlockBlob),
					StorageAccountCredentialID: to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/storageAccountCredentials/sac1"),
				},
				ClientAccessRights: []*armdataboxedge.ClientAccessRight{},
				DataPolicy:         to.Ptr(armdataboxedge.DataPolicyCloud),
				MonitoringStatus:   to.Ptr(armdataboxedge.MonitoringStatusDisabled),
				RefreshDetails:     &armdataboxedge.RefreshDetails{},
				ShareMappings:      []*armdataboxedge.MountPointMap{},
				ShareStatus:        to.Ptr(armdataboxedge.ShareStatus("Online")),
				UserAccessRights: []*armdataboxedge.UserAccessRight{
					{
						AccessType: to.Ptr(armdataboxedge.ShareAccessTypeChange),
						UserID:     to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/users/user2"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Share) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Share)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/SharePut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestShares_Delete(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ShareDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ShareDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewSharesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"smbshare",
		"GroupForEdgeAutomation",
		&armdataboxedge.SharesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ShareDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ShareDelete.json: %v", err)
	}
}

func TestShares_Refresh(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ShareRefreshPost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ShareRefreshPost"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewSharesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginRefresh(ctx,
		"testedgedevice",
		"smbshare",
		"GroupForEdgeAutomation",
		&armdataboxedge.SharesClientBeginRefreshOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ShareRefreshPost.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ShareRefreshPost.json: %v", err)
	}
}

func TestStorageAccountCredentials_ListByDataBoxEdgeDevice(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/SACGetAllInDevice.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SACGetAllInDevice"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewStorageAccountCredentialsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	pager := client.ListByDataBoxEdgeDevice("testedgedevice",
		"GroupForEdgeAutomation",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/SACGetAllInDevice.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataboxedge.StorageAccountCredentialList{
			Value: []*armdataboxedge.StorageAccountCredential{
				{
					Name: to.Ptr("sac1128180128323"),
					Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/storageAccountCredentials"),
					ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/storageAccountCredentials/sac1128180128323"),
					Properties: &armdataboxedge.StorageAccountCredentialProperties{
						AccountType: to.Ptr(armdataboxedge.AccountTypeGeneralPurposeStorage),
						Alias:       to.Ptr("sac1128180128323"),
						SSLStatus:   to.Ptr(armdataboxedge.SSLStatusDisabled),
						UserName:    to.Ptr("cisbvt"),
					},
				},
				{
					Name: to.Ptr("sac1128180128312"),
					Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/storageAccountCredentials"),
					ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/storageAccountCredentials/sac1128180128312"),
					Properties: &armdataboxedge.StorageAccountCredentialProperties{
						AccountType: to.Ptr(armdataboxedge.AccountTypeBlobStorage),
						Alias:       to.Ptr("sac1128180128312"),
						SSLStatus:   to.Ptr(armdataboxedge.SSLStatusDisabled),
						UserName:    to.Ptr("cisbvt"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StorageAccountCredentialList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StorageAccountCredentialList)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/SACGetAllInDevice.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageAccountCredentials_Get(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/SACGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SACGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewStorageAccountCredentialsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.Get(ctx,
		"testedgedevice",
		"sac1",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/SACGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.StorageAccountCredential{
			Name: to.Ptr("sac1"),
			Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/storageAccountCredentials"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/storageAccountCredentials/sac1"),
			Properties: &armdataboxedge.StorageAccountCredentialProperties{
				AccountType: to.Ptr(armdataboxedge.AccountTypeBlobStorage),
				Alias:       to.Ptr("sac1"),
				SSLStatus:   to.Ptr(armdataboxedge.SSLStatusDisabled),
				UserName:    to.Ptr("cisbvt"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StorageAccountCredential) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StorageAccountCredential)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/SACGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageAccountCredentials_CreateOrUpdate(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/SACPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SACPut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewStorageAccountCredentialsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testedgedevice",
		"sac1",
		"GroupForEdgeAutomation",
		armdataboxedge.StorageAccountCredential{
			Properties: &armdataboxedge.StorageAccountCredentialProperties{
				AccountKey: &armdataboxedge.AsymmetricEncryptedSecret{
					EncryptionAlgorithm:      to.Ptr(armdataboxedge.EncryptionAlgorithmAES256),
					EncryptionCertThumbprint: to.Ptr("2A9D8D6BE51574B5461230AEF02F162C5F01AD31"),
					Value:                    to.Ptr("lAeZEYi6rNP1/EyNaVUYmTSZEYyaIaWmwUsGwek0+xiZj54GM9Ue9/UA2ed/ClC03wuSit2XzM/cLRU5eYiFBwks23rGwiQOr3sruEL2a74EjPD050xYjA6M1I2hu/w2yjVHhn5j+DbXS4Xzi+rHHNZK3DgfDO3PkbECjPck+PbpSBjy9+6Mrjcld5DIZhUAeMlMHrFlg+WKRKB14o/og56u5/xX6WKlrMLEQ+y6E18dUwvWs2elTNoVO8PBE8SM/CfooX4AMNvaNdSObNBPdP+F6Lzc556nFNWXrBLRt0vC7s9qTiVRO4x/qCNaK/B4y7IqXMllwQFf4Np9UQ2ECA=="),
				},
				AccountType: to.Ptr(armdataboxedge.AccountTypeBlobStorage),
				Alias:       to.Ptr("sac1"),
				SSLStatus:   to.Ptr(armdataboxedge.SSLStatusDisabled),
				UserName:    to.Ptr("cisbvt"),
			},
		},
		&armdataboxedge.StorageAccountCredentialsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/SACPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/SACPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.StorageAccountCredential{
			Name: to.Ptr("sac1"),
			Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/storageAccountCredentials"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/storageAccountCredentials/sac1"),
			Properties: &armdataboxedge.StorageAccountCredentialProperties{
				AccountType: to.Ptr(armdataboxedge.AccountTypeBlobStorage),
				Alias:       to.Ptr("sac1"),
				SSLStatus:   to.Ptr(armdataboxedge.SSLStatusDisabled),
				UserName:    to.Ptr("cisbvt"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StorageAccountCredential) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StorageAccountCredential)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/SACPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageAccountCredentials_Delete(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/SACDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SACDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewStorageAccountCredentialsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"sac1",
		"GroupForEdgeAutomation",
		&armdataboxedge.StorageAccountCredentialsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/SACDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/SACDelete.json: %v", err)
	}
}

func TestStorageAccounts_ListByDataBoxEdgeDevice(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/StorageAccountGetAllInDevice.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountGetAllInDevice"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewStorageAccountsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	pager := client.ListByDataBoxEdgeDevice("testedgedevice",
		"GroupForEdgeAutomation",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/StorageAccountGetAllInDevice.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataboxedge.StorageAccountList{
			Value: []*armdataboxedge.StorageAccount{
				{
					Name: to.Ptr("blobstorageaccount1"),
					Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/storageAccounts"),
					ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForDataBoxEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/storageAccounts/blobstorageaccount1"),
					Properties: &armdataboxedge.StorageAccountProperties{
						Description:                to.Ptr("It's an awesome storage account"),
						BlobEndpoint:               to.Ptr("https://blobstorageaccount1.blob.testedge.microsoftdatabox.com/"),
						ContainerCount:             to.Ptr[int32](0),
						DataPolicy:                 to.Ptr(armdataboxedge.DataPolicyCloud),
						StorageAccountCredentialID: to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForDataBoxEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/storageAccountCredentials/cisbvt"),
						StorageAccountStatus:       to.Ptr(armdataboxedge.StorageAccountStatusOK),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StorageAccountList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StorageAccountList)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/StorageAccountGetAllInDevice.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageAccounts_Get(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/StorageAccountGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewStorageAccountsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.Get(ctx,
		"testedgedevice",
		"blobstorageaccount1",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/StorageAccountGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.StorageAccount{
			Name: to.Ptr("blobstorageaccount1"),
			Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/storageAccounts"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForDataBoxEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/storageAccounts/blobstorageaccount1"),
			Properties: &armdataboxedge.StorageAccountProperties{
				Description:                to.Ptr("It's an awesome storage account"),
				BlobEndpoint:               to.Ptr("https://blobstorageaccount1.blob.testedge.microsoftdatabox.com/"),
				ContainerCount:             to.Ptr[int32](0),
				DataPolicy:                 to.Ptr(armdataboxedge.DataPolicyCloud),
				StorageAccountCredentialID: to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForDataBoxEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/storageAccountCredentials/cisbvt"),
				StorageAccountStatus:       to.Ptr(armdataboxedge.StorageAccountStatusOK),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StorageAccount) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StorageAccount)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/StorageAccountGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageAccounts_CreateOrUpdate(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/StorageAccountPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountPut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewStorageAccountsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testedgedevice",
		"blobstorageaccount1",
		"GroupForEdgeAutomation",
		armdataboxedge.StorageAccount{
			Properties: &armdataboxedge.StorageAccountProperties{
				Description:                to.Ptr("It's an awesome storage account"),
				DataPolicy:                 to.Ptr(armdataboxedge.DataPolicyCloud),
				StorageAccountCredentialID: to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForDataBoxEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/storageAccountCredentials/cisbvt"),
				StorageAccountStatus:       to.Ptr(armdataboxedge.StorageAccountStatusOK),
			},
		},
		&armdataboxedge.StorageAccountsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/StorageAccountPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/StorageAccountPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.StorageAccount{
			Name: to.Ptr("blobstorageaccount1"),
			Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/storageAccounts"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForDataBoxEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/storageAccounts/blobstorageaccount1"),
			Properties: &armdataboxedge.StorageAccountProperties{
				Description:                to.Ptr("It's an awesome storage account"),
				BlobEndpoint:               to.Ptr("https://blobstorageaccount1.blob.testedge.microsoftdatabox.com/"),
				ContainerCount:             to.Ptr[int32](0),
				DataPolicy:                 to.Ptr(armdataboxedge.DataPolicyCloud),
				StorageAccountCredentialID: to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForDataBoxEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/storageAccountCredentials/cisbvt"),
				StorageAccountStatus:       to.Ptr(armdataboxedge.StorageAccountStatusOK),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StorageAccount) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StorageAccount)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/StorageAccountPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageAccounts_Delete(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/StorageAccountDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewStorageAccountsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"storageaccount1",
		"GroupForEdgeAutomation",
		&armdataboxedge.StorageAccountsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/StorageAccountDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/StorageAccountDelete.json: %v", err)
	}
}

func TestContainers_ListByStorageAccount(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ContainerListAllInDevice.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ContainerListAllInDevice"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewContainersClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	pager := client.ListByStorageAccount("testedgedevice",
		"storageaccount1",
		"GroupForEdgeAutomation",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ContainerListAllInDevice.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataboxedge.ContainerList{
			Value: []*armdataboxedge.Container{
				{
					Name: to.Ptr("blobcontainer1"),
					Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/storageAccounts/containers"),
					ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForDataBoxEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/EAuToWIN-6LJVNIFFB411021190437191/storageAccounts/storageaccount1/containers/blobcontainer1"),
					Properties: &armdataboxedge.ContainerProperties{
						ContainerStatus: to.Ptr(armdataboxedge.ContainerStatusOK),
						CreatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-20T23:14:32.3016929Z"); return t }()),
						DataFormat:      to.Ptr(armdataboxedge.AzureContainerDataFormatBlockBlob),
						RefreshDetails:  &armdataboxedge.RefreshDetails{},
					},
				},
				{
					Name: to.Ptr("blobcontainer2"),
					Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/storageAccounts/containers"),
					ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForDataBoxEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/EAuToWIN-6LJVNIFFB411021190437191/storageAccounts/storageaccount1/containers/blobcontainer2"),
					Properties: &armdataboxedge.ContainerProperties{
						ContainerStatus: to.Ptr(armdataboxedge.ContainerStatusOK),
						CreatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-20T23:15:38.0077675Z"); return t }()),
						DataFormat:      to.Ptr(armdataboxedge.AzureContainerDataFormatBlockBlob),
						RefreshDetails:  &armdataboxedge.RefreshDetails{},
					},
				},
				{
					Name: to.Ptr("blobcontainer3"),
					Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/storageAccounts/containers"),
					ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForDataBoxEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/EAuToWIN-6LJVNIFFB411021190437191/storageAccounts/storageaccount1/containers/blobcontainer3"),
					Properties: &armdataboxedge.ContainerProperties{
						ContainerStatus: to.Ptr(armdataboxedge.ContainerStatusOK),
						CreatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-20T23:13:27.8545799Z"); return t }()),
						DataFormat:      to.Ptr(armdataboxedge.AzureContainerDataFormatBlockBlob),
						RefreshDetails:  &armdataboxedge.RefreshDetails{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ContainerList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ContainerList)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ContainerListAllInDevice.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContainers_Get(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ContainerGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ContainerGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewContainersClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.Get(ctx,
		"testedgedevice",
		"storageaccount1",
		"blobcontainer1",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ContainerGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.Container{
			Name: to.Ptr("blobcontainer1"),
			Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/storageAccounts/containers"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForDataBoxEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/storageAccounts/storageaccount1/containers/blobcontainer1"),
			Properties: &armdataboxedge.ContainerProperties{
				ContainerStatus: to.Ptr(armdataboxedge.ContainerStatusOK),
				CreatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-20T23:13:27.8545799Z"); return t }()),
				DataFormat:      to.Ptr(armdataboxedge.AzureContainerDataFormatBlockBlob),
				RefreshDetails:  &armdataboxedge.RefreshDetails{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Container) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Container)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ContainerGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContainers_CreateOrUpdate(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ContainerPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ContainerPut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewContainersClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testedgedevice",
		"storageaccount1",
		"blobcontainer1",
		"GroupForEdgeAutomation",
		armdataboxedge.Container{
			Properties: &armdataboxedge.ContainerProperties{
				DataFormat: to.Ptr(armdataboxedge.AzureContainerDataFormatBlockBlob),
			},
		},
		&armdataboxedge.ContainersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ContainerPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ContainerPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.Container{
			Name: to.Ptr("blobcontainer-5e155efe"),
			Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/storageAccounts/containers"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForDataBoxEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/storageAccounts/storageaccount1/containers/blobcontainer1"),
			Properties: &armdataboxedge.ContainerProperties{
				ContainerStatus: to.Ptr(armdataboxedge.ContainerStatusOK),
				CreatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-20T23:13:27.8545799Z"); return t }()),
				DataFormat:      to.Ptr(armdataboxedge.AzureContainerDataFormatBlockBlob),
				RefreshDetails:  &armdataboxedge.RefreshDetails{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Container) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Container)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ContainerPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContainers_Delete(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ContainerDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ContainerDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewContainersClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"storageaccount1",
		"blobcontainer1",
		"GroupForEdgeAutomation",
		&armdataboxedge.ContainersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ContainerDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ContainerDelete.json: %v", err)
	}
}

func TestContainers_Refresh(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ContainerRefresh.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ContainerRefresh"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewContainersClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginRefresh(ctx,
		"testedgedevice",
		"storageaccount1",
		"blobcontainer1",
		"GroupForEdgeAutomation",
		&armdataboxedge.ContainersClientBeginRefreshOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ContainerRefresh.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/ContainerRefresh.json: %v", err)
	}
}

func TestTriggers_ListByDataBoxEdgeDevice(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/TriggerGetAllInDevice.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TriggerGetAllInDevice"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewTriggersClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	pager := client.ListByDataBoxEdgeDevice("testedgedevice",
		"GroupForEdgeAutomation",
		&armdataboxedge.TriggersClientListByDataBoxEdgeDeviceOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/TriggerGetAllInDevice.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataboxedge.TriggerList{
			Value: []armdataboxedge.TriggerClassification{
				&armdataboxedge.FileEventTrigger{
					Name: to.Ptr("trigger1"),
					Type: to.Ptr("dataBoxEdgeDevices/triggers"),
					ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/triggers/trigger1"),
					Kind: to.Ptr(armdataboxedge.TriggerEventTypeFileEvent),
					Properties: &armdataboxedge.FileTriggerProperties{
						CustomContextTag: to.Ptr("CustomContextTags-1235346475"),
						SinkInfo: &armdataboxedge.RoleSinkInfo{
							RoleID: to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/roles/role1"),
						},
						SourceInfo: &armdataboxedge.FileSourceInfo{
							ShareID: to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/shares/share1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TriggerList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TriggerList)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/TriggerGetAllInDevice.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTriggers_Get(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/TriggerGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TriggerGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewTriggersClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.Get(ctx,
		"testedgedevice",
		"trigger1",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/TriggerGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.TriggersClientGetResponse{
			&armdataboxedge.FileEventTrigger{
				Name: to.Ptr("trigger1"),
				Type: to.Ptr("dataBoxEdgeDevices/triggers"),
				ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/triggers/trigger1"),
				Kind: to.Ptr(armdataboxedge.TriggerEventTypeFileEvent),
				Properties: &armdataboxedge.FileTriggerProperties{
					CustomContextTag: to.Ptr("CustomContextTags-1235346475"),
					SinkInfo: &armdataboxedge.RoleSinkInfo{
						RoleID: to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/roles/role1"),
					},
					SourceInfo: &armdataboxedge.FileSourceInfo{
						ShareID: to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/shares/share1"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/TriggerGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTriggers_CreateOrUpdate(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/TriggerPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TriggerPut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewTriggersClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testedgedevice",
		"trigger1",
		"GroupForEdgeAutomation",
		&armdataboxedge.FileEventTrigger{
			Kind: to.Ptr(armdataboxedge.TriggerEventTypeFileEvent),
			Properties: &armdataboxedge.FileTriggerProperties{
				CustomContextTag: to.Ptr("CustomContextTags-1235346475"),
				SinkInfo: &armdataboxedge.RoleSinkInfo{
					RoleID: to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/roles/role1"),
				},
				SourceInfo: &armdataboxedge.FileSourceInfo{
					ShareID: to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/shares/share1"),
				},
			},
		},
		&armdataboxedge.TriggersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/TriggerPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/TriggerPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.TriggersClientCreateOrUpdateResponse{
			&armdataboxedge.FileEventTrigger{
				Name: to.Ptr("trigger1"),
				Type: to.Ptr("dataBoxEdgeDevices/triggers"),
				ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/triggers/trigger1"),
				Kind: to.Ptr(armdataboxedge.TriggerEventTypeFileEvent),
				Properties: &armdataboxedge.FileTriggerProperties{
					CustomContextTag: to.Ptr("CustomContextTags-1235346475"),
					SinkInfo: &armdataboxedge.RoleSinkInfo{
						RoleID: to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/roles/role1"),
					},
					SourceInfo: &armdataboxedge.FileSourceInfo{
						ShareID: to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/shares/share1"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/TriggerPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTriggers_Delete(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/TriggerDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TriggerDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewTriggersClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"trigger1",
		"GroupForEdgeAutomation",
		&armdataboxedge.TriggersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/TriggerDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/TriggerDelete.json: %v", err)
	}
}

func TestSupportPackages_TriggerSupportPackage(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/TriggerSupportPackage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TriggerSupportPackage"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewSupportPackagesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginTriggerSupportPackage(ctx,
		"testedgedevice",
		"GroupForEdgeAutomation",
		armdataboxedge.TriggerSupportPackageRequest{
			Properties: &armdataboxedge.SupportPackageRequestProperties{
				Include:          to.Ptr("DefaultWithDumps"),
				MaximumTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-18T02:19:51.4270267Z"); return t }()),
				MinimumTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-18T02:18:51.4270267Z"); return t }()),
			},
		},
		&armdataboxedge.SupportPackagesClientBeginTriggerSupportPackageOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/TriggerSupportPackage.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/TriggerSupportPackage.json: %v", err)
	}
}

func TestUsers_ListByDataBoxEdgeDevice(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UserGetAllInDevice.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UserGetAllInDevice"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewUsersClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	pager := client.ListByDataBoxEdgeDevice("testedgedevice",
		"GroupForEdgeAutomation",
		&armdataboxedge.UsersClientListByDataBoxEdgeDeviceOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UserGetAllInDevice.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataboxedge.UserList{
			Value: []*armdataboxedge.User{
				{
					Name: to.Ptr("user2"),
					Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/users"),
					ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/users/user2"),
					Properties: &armdataboxedge.UserProperties{
						UserType: to.Ptr(armdataboxedge.UserTypeShare),
					},
				},
				{
					Name: to.Ptr("user1"),
					Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/users"),
					ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/users/user1"),
					Properties: &armdataboxedge.UserProperties{
						UserType: to.Ptr(armdataboxedge.UserTypeShare),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UserList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UserList)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UserGetAllInDevice.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUsers_Get(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UserGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UserGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewUsersClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.Get(ctx,
		"testedgedevice",
		"user1",
		"GroupForEdgeAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UserGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.User{
			Name: to.Ptr("user1"),
			Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/users"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/users/user1"),
			Properties: &armdataboxedge.UserProperties{
				UserType: to.Ptr(armdataboxedge.UserTypeShare),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.User) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.User)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UserGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUsers_CreateOrUpdate(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UserPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UserPut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewUsersClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testedgedevice",
		"user1",
		"GroupForEdgeAutomation",
		armdataboxedge.User{
			Properties: &armdataboxedge.UserProperties{
				EncryptedPassword: &armdataboxedge.AsymmetricEncryptedSecret{
					EncryptionAlgorithm:      to.Ptr(armdataboxedge.EncryptionAlgorithmNone),
					EncryptionCertThumbprint: to.Ptr("blah"),
					Value:                    to.Ptr("<value>"),
				},
				UserType: to.Ptr(armdataboxedge.UserTypeShare),
			},
		},
		&armdataboxedge.UsersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UserPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UserPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataboxedge.User{
			Name: to.Ptr("user1"),
			Type: to.Ptr("Microsoft.DataBoxEdge/dataBoxEdgeDevices/users"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/users/user1"),
			Properties: &armdataboxedge.UserProperties{
				UserType: to.Ptr(armdataboxedge.UserTypeShare),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.User) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.User)
			t.Fatalf("Mock response is not equal to example response for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UserPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUsers_Delete(t *testing.T) {
	// From example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UserDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UserDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataboxedge.NewUsersClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testedgedevice",
		"user1",
		"GroupForEdgeAutomation",
		&armdataboxedge.UsersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UserDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databoxedge/resource-manager/Microsoft.DataBoxEdge/stable/2021-06-01/examples/UserDelete.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
