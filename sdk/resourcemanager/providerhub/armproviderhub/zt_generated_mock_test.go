//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armproviderhub_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/providerhub/armproviderhub"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestCustomRollouts_Get(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/CustomRollouts_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomRollouts_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewCustomRolloutsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	res, err := client.Get(ctx,
		"Microsoft.Contoso",
		"canaryTesting99",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/CustomRollouts_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armproviderhub.CustomRollout{
			Name: to.Ptr("Microsoft.Contoso/canaryTesting99"),
			Type: to.Ptr("Microsoft.ProviderHub/providerRegistrations/customRollouts"),
			ID:   to.Ptr("/subscriptions/ab7a8701-f7ef-471a-a2f4-d0ebbf494f77providers/Microsoft.ProviderHub/providerRegistrations/Microsoft.Contoso/customRollouts/canaryTesting99"),
			Properties: &armproviderhub.CustomRolloutProperties{
				ProvisioningState: to.Ptr(armproviderhub.ProvisioningStateSucceeded),
				Specification: &armproviderhub.CustomRolloutPropertiesSpecification{
					Canary: &armproviderhub.CustomRolloutSpecificationCanary{
						Regions: []*string{
							to.Ptr("eastus2euap"),
							to.Ptr("centraluseuap")},
					},
					ProviderRegistration: &armproviderhub.CustomRolloutSpecificationProviderRegistration{
						Name: to.Ptr("Microsoft.Contoso"),
						Type: to.Ptr("Microsoft.ProviderHub/providerRegistrations"),
						ID:   to.Ptr("/subscriptions/ab7a8701-f7ef-471a-a2f4-d0ebbf494f77providers/Microsoft.ProviderHub/providerRegistrations/Microsoft.Contoso"),
						Properties: &armproviderhub.ProviderRegistrationProperties{
							Capabilities: []*armproviderhub.ResourceProviderCapabilities{
								{
									Effect:  to.Ptr(armproviderhub.ResourceProviderCapabilitiesEffectAllow),
									QuotaID: to.Ptr("CSP_2015-05-01"),
								},
								{
									Effect:  to.Ptr(armproviderhub.ResourceProviderCapabilitiesEffectAllow),
									QuotaID: to.Ptr("CSP_MG_2017-12-01"),
								}},
							Management: &armproviderhub.ResourceProviderManifestPropertiesManagement{
								IncidentContactEmail:   to.Ptr("helpme@contoso.com"),
								IncidentRoutingService: to.Ptr(""),
								IncidentRoutingTeam:    to.Ptr(""),
								ManifestOwners: []*string{
									to.Ptr("SPARTA-PlatformServiceAdministrator")},
								ResourceAccessPolicy: to.Ptr(armproviderhub.ResourceProviderManagementResourceAccessPolicyNotSpecified),
							},
							Namespace: to.Ptr("microsoft.contoso"),
							ProviderAuthorizations: []*armproviderhub.ResourceProviderAuthorization{
								{
									ApplicationID:    to.Ptr("1a3b5c7d-8e9f-10g1-1h12-i13j14k1"),
									RoleDefinitionID: to.Ptr("123456bf-gkur-2098-b890-98da392a00b2"),
								}},
							ProviderType:    to.Ptr(armproviderhub.ResourceProviderType("Internal, Hidden")),
							ProviderVersion: to.Ptr("2.0"),
							ProviderHubMetadata: &armproviderhub.ProviderRegistrationPropertiesProviderHubMetadata{
								ProviderAuthentication: &armproviderhub.MetadataProviderAuthentication{
									AllowedAudiences: []*string{
										to.Ptr("https://management.core.windows.net/")},
								},
							},
							ProvisioningState: to.Ptr(armproviderhub.ProvisioningStateSucceeded),
						},
					},
					ResourceTypeRegistrations: []*armproviderhub.ResourceTypeRegistration{
						{
							Name: to.Ptr("Microsoft.Contoso/employees"),
							Type: to.Ptr("Microsoft.ProviderHub/providerRegistrations/resourceTypeRegistrations"),
							ID:   to.Ptr("/subscriptions/ab7a8701-f7ef-471a-a2f4-d0ebbf494f77providers/Microsoft.ProviderHub/providerRegistrations/Microsoft.Contoso/resourceTypeRegistrations/employees"),
							Properties: &armproviderhub.ResourceTypeRegistrationProperties{
								EnableAsyncOperation: to.Ptr(false),
								EnableThirdPartyS2S:  to.Ptr(false),
								Endpoints: []*armproviderhub.ResourceTypeEndpoint{
									{
										APIVersions: []*string{
											to.Ptr("2018-11-01-preview"),
											to.Ptr("2020-01-01-preview"),
											to.Ptr("2019-01-01")},
										Locations: []*string{
											to.Ptr("East Asia"),
											to.Ptr("East US"),
											to.Ptr("North Europe"),
											to.Ptr("Southeast Asia"),
											to.Ptr("East US 2 EUAP"),
											to.Ptr("Central US EUAP"),
											to.Ptr("West Europe"),
											to.Ptr("West US"),
											to.Ptr("West Central US"),
											to.Ptr("West US 2")},
										RequiredFeatures: []*string{
											to.Ptr("Microsoft.Contoso/RPaaSSampleApp")},
									}},
								ProvisioningState: to.Ptr(armproviderhub.ProvisioningStateSucceeded),
								Regionality:       to.Ptr(armproviderhub.RegionalityRegional),
								RoutingType:       to.Ptr(armproviderhub.RoutingTypeDefault),
								SwaggerSpecifications: []*armproviderhub.SwaggerSpecification{
									{
										APIVersions: []*string{
											to.Ptr("2018-11-01-preview"),
											to.Ptr("2020-01-01-preview"),
											to.Ptr("2019-01-01")},
										SwaggerSpecFolderURI: to.Ptr("https://github.com/Azure/azure-rest-api-specs/blob/feature/azure/contoso/specification/contoso/resource-manager/Microsoft.SampleRP/"),
									}},
							},
						}},
				},
				Status: &armproviderhub.CustomRolloutPropertiesStatus{
					CompletedRegions: []*string{
						to.Ptr("eastus2euap"),
						to.Ptr("centraluseuap")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomRollout) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomRollout)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/CustomRollouts_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomRollouts_CreateOrUpdate(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/CustomRollouts_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomRollouts_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewCustomRolloutsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"Microsoft.Contoso",
		"brazilUsShoeBoxTesting",
		armproviderhub.CustomRollout{
			Properties: &armproviderhub.CustomRolloutProperties{
				Specification: &armproviderhub.CustomRolloutPropertiesSpecification{
					Canary: &armproviderhub.CustomRolloutSpecificationCanary{
						Regions: []*string{
							to.Ptr("brazilus")},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/CustomRollouts_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armproviderhub.CustomRollout{
			Name: to.Ptr("Microsoft.Contoso/brazilUsShoeBoxTesting"),
			Type: to.Ptr("Microsoft.ProviderHub/providerRegistrations/customRollouts"),
			ID:   to.Ptr("/subscriptions/ab7a8701-f7ef-471a-a2f4-d0ebbf494f77providers/Microsoft.ProviderHub/providerRegistrations/Microsoft.Contoso/customRollouts/brazilUsShoeBoxTesting"),
			Properties: &armproviderhub.CustomRolloutProperties{
				ProvisioningState: to.Ptr(armproviderhub.ProvisioningStateSucceeded),
				Specification: &armproviderhub.CustomRolloutPropertiesSpecification{
					Canary: &armproviderhub.CustomRolloutSpecificationCanary{
						Regions: []*string{
							to.Ptr("brazilus"),
							to.Ptr("eastus2euap"),
							to.Ptr("centraluseuap")},
					},
				},
				Status: &armproviderhub.CustomRolloutPropertiesStatus{
					CompletedRegions: []*string{
						to.Ptr("brazilus"),
						to.Ptr("eastus2euap"),
						to.Ptr("centraluseuap")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomRollout) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomRollout)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/CustomRollouts_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomRollouts_ListByProviderRegistration(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/CustomRollouts_ListByProviderRegistration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomRollouts_ListByProviderRegistration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewCustomRolloutsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	pager := client.ListByProviderRegistration("Microsoft.Contoso",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/CustomRollouts_ListByProviderRegistration.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armproviderhub.CustomRolloutArrayResponseWithContinuation{
			Value: []*armproviderhub.CustomRollout{
				{
					Name: to.Ptr("Microsoft.Contoso/canaryTesting99"),
					Type: to.Ptr("Microsoft.ProviderHub/providerRegistrations/customRollouts"),
					ID:   to.Ptr("/subscriptions/ab7a8701-f7ef-471a-a2f4-d0ebbf494f77providers/Microsoft.ProviderHub/providerRegistrations/Microsoft.Contoso/customRollouts/canaryTesting99"),
					Properties: &armproviderhub.CustomRolloutProperties{
						ProvisioningState: to.Ptr(armproviderhub.ProvisioningStateSucceeded),
						Specification: &armproviderhub.CustomRolloutPropertiesSpecification{
							Canary: &armproviderhub.CustomRolloutSpecificationCanary{
								Regions: []*string{
									to.Ptr("eastus2euap"),
									to.Ptr("centraluseuap")},
							},
						},
						Status: &armproviderhub.CustomRolloutPropertiesStatus{
							CompletedRegions: []*string{
								to.Ptr("eastus2euap"),
								to.Ptr("centraluseuap")},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.Contoso/brazilustesting"),
					Type: to.Ptr("Microsoft.ProviderHub/providerRegistrations/customRollouts"),
					ID:   to.Ptr("/subscriptions/ab7a8701-f7ef-471a-a2f4-d0ebbf494f77providers/Microsoft.ProviderHub/providerRegistrations/Microsoft.Contoso/customRollouts/brazilustesting"),
					Properties: &armproviderhub.CustomRolloutProperties{
						ProvisioningState: to.Ptr(armproviderhub.ProvisioningStateSucceeded),
						Specification: &armproviderhub.CustomRolloutPropertiesSpecification{
							Canary: &armproviderhub.CustomRolloutSpecificationCanary{
								Regions: []*string{
									to.Ptr("brazilus")},
							},
						},
						Status: &armproviderhub.CustomRolloutPropertiesStatus{
							FailedOrSkippedRegions: map[string]*armproviderhub.ExtendedErrorInfo{
								"brazilus": {
									Code:    to.Ptr("RolloutTimedout"),
									Message: to.Ptr("Failed to rollout to specified region."),
								},
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CustomRolloutArrayResponseWithContinuation) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CustomRolloutArrayResponseWithContinuation)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/CustomRollouts_ListByProviderRegistration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDefaultRollouts_Get(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/DefaultRollouts_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DefaultRollouts_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewDefaultRolloutsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	res, err := client.Get(ctx,
		"Microsoft.Contoso",
		"2020week10",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/DefaultRollouts_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armproviderhub.DefaultRollout{
			Name: to.Ptr("Microsoft.Contoso/2020week10"),
			Type: to.Ptr("Microsoft.ProviderHub/providerRegistrations/defaultRollouts"),
			ID:   to.Ptr("/subscriptions/ab7a8701-f7ef-471a-a2f4-d0ebbf494f77providers/Microsoft.ProviderHub/providerRegistrations/Microsoft.Contoso/defaultRollouts/2020week10"),
			Properties: &armproviderhub.DefaultRolloutProperties{
				ProvisioningState: to.Ptr(armproviderhub.ProvisioningStateSucceeded),
				Specification: &armproviderhub.DefaultRolloutPropertiesSpecification{
					Canary: &armproviderhub.DefaultRolloutSpecificationCanary{
						Regions: []*string{
							to.Ptr("eastus2euap"),
							to.Ptr("centraluseuap")},
						SkipRegions: []*string{
							to.Ptr("brazilus")},
					},
					HighTraffic: &armproviderhub.DefaultRolloutSpecificationHighTraffic{
						Regions: []*string{
							to.Ptr("australiasoutheast"),
							to.Ptr("otherhightraficregions")},
						WaitDuration: to.Ptr("PT24H"),
					},
					LowTraffic: &armproviderhub.DefaultRolloutSpecificationLowTraffic{
						Regions: []*string{
							to.Ptr("southeastasia")},
						WaitDuration: to.Ptr("PT24H"),
					},
					MediumTraffic: &armproviderhub.DefaultRolloutSpecificationMediumTraffic{
						Regions: []*string{
							to.Ptr("uksouth"),
							to.Ptr("indiawest")},
						WaitDuration: to.Ptr("PT24H"),
					},
					ProviderRegistration: &armproviderhub.DefaultRolloutSpecificationProviderRegistration{
						Name: to.Ptr("Microsoft.Contoso"),
						Type: to.Ptr("Microsoft.ProviderHub/providerRegistrations"),
						ID:   to.Ptr("/subscriptions/ab7a8701-f7ef-471a-a2f4-d0ebbf494f77providers/Microsoft.ProviderHub/providerRegistrations/Microsoft.Contoso"),
						Properties: &armproviderhub.ProviderRegistrationProperties{
							Capabilities: []*armproviderhub.ResourceProviderCapabilities{
								{
									Effect:  to.Ptr(armproviderhub.ResourceProviderCapabilitiesEffectAllow),
									QuotaID: to.Ptr("CSP_2015-05-01"),
								},
								{
									Effect:  to.Ptr(armproviderhub.ResourceProviderCapabilitiesEffectAllow),
									QuotaID: to.Ptr("CSP_MG_2017-12-01"),
								}},
							Management: &armproviderhub.ResourceProviderManifestPropertiesManagement{
								IncidentContactEmail:   to.Ptr("helpme@contoso.com"),
								IncidentRoutingService: to.Ptr(""),
								IncidentRoutingTeam:    to.Ptr(""),
								ManifestOwners: []*string{
									to.Ptr("SPARTA-PlatformServiceAdministrator")},
								ResourceAccessPolicy: to.Ptr(armproviderhub.ResourceProviderManagementResourceAccessPolicyNotSpecified),
							},
							Namespace: to.Ptr("microsoft.contoso"),
							ProviderAuthorizations: []*armproviderhub.ResourceProviderAuthorization{
								{
									ApplicationID:    to.Ptr("1a3b5c7d-8e9f-10g1-1h12-i13j14k1"),
									RoleDefinitionID: to.Ptr("123456bf-gkur-2098-b890-98da392a00b2"),
								}},
							ProviderType:    to.Ptr(armproviderhub.ResourceProviderType("Internal, Hidden")),
							ProviderVersion: to.Ptr("2.0"),
							ProviderHubMetadata: &armproviderhub.ProviderRegistrationPropertiesProviderHubMetadata{
								ProviderAuthentication: &armproviderhub.MetadataProviderAuthentication{
									AllowedAudiences: []*string{
										to.Ptr("https://management.core.windows.net/")},
								},
							},
							ProvisioningState: to.Ptr(armproviderhub.ProvisioningStateSucceeded),
						},
					},
					ResourceTypeRegistrations: []*armproviderhub.ResourceTypeRegistration{
						{
							Name: to.Ptr("Microsoft.Contoso/employees"),
							Type: to.Ptr("Microsoft.ProviderHub/providerRegistrations/resourceTypeRegistrations"),
							ID:   to.Ptr("/subscriptions/ab7a8701-f7ef-471a-a2f4-d0ebbf494f77providers/Microsoft.ProviderHub/providerRegistrations/Microsoft.Contoso/resourceTypeRegistrations/employees"),
							Properties: &armproviderhub.ResourceTypeRegistrationProperties{
								EnableAsyncOperation: to.Ptr(false),
								EnableThirdPartyS2S:  to.Ptr(false),
								Endpoints: []*armproviderhub.ResourceTypeEndpoint{
									{
										APIVersions: []*string{
											to.Ptr("2018-11-01-preview"),
											to.Ptr("2020-01-01-preview"),
											to.Ptr("2019-01-01")},
										Locations: []*string{
											to.Ptr("East Asia"),
											to.Ptr("East US"),
											to.Ptr("North Europe"),
											to.Ptr("Southeast Asia"),
											to.Ptr("East US 2 EUAP"),
											to.Ptr("Central US EUAP"),
											to.Ptr("West Europe"),
											to.Ptr("West US"),
											to.Ptr("West Central US"),
											to.Ptr("West US 2")},
										RequiredFeatures: []*string{
											to.Ptr("Microsoft.Contoso/RPaaSSampleApp")},
									}},
								ProvisioningState: to.Ptr(armproviderhub.ProvisioningStateSucceeded),
								Regionality:       to.Ptr(armproviderhub.RegionalityRegional),
								RoutingType:       to.Ptr(armproviderhub.RoutingTypeDefault),
								SwaggerSpecifications: []*armproviderhub.SwaggerSpecification{
									{
										APIVersions: []*string{
											to.Ptr("2018-11-01-preview"),
											to.Ptr("2020-01-01-preview"),
											to.Ptr("2019-01-01")},
										SwaggerSpecFolderURI: to.Ptr("https://github.com/Azure/azure-rest-api-specs/blob/feature/azure/contoso/specification/contoso/resource-manager/Microsoft.SampleRP/"),
									}},
							},
						}},
					RestOfTheWorldGroupOne: &armproviderhub.DefaultRolloutSpecificationRestOfTheWorldGroupOne{
						Regions: []*string{
							to.Ptr("koreacentral"),
							to.Ptr("francecentral"),
							to.Ptr("australiacentral"),
							to.Ptr("westus"),
							to.Ptr("allotherregions")},
						WaitDuration: to.Ptr("PT4H"),
					},
					RestOfTheWorldGroupTwo: &armproviderhub.DefaultRolloutSpecificationRestOfTheWorldGroupTwo{
						Regions: []*string{
							to.Ptr("germanynorth"),
							to.Ptr("norwayeast"),
							to.Ptr("allotherregions")},
						WaitDuration: to.Ptr("PT4H"),
					},
				},
				Status: &armproviderhub.DefaultRolloutPropertiesStatus{
					CompletedRegions: []*string{
						to.Ptr("brazilus"),
						to.Ptr("eastus2euap"),
						to.Ptr("centraluseuap"),
						to.Ptr("allcompletedregions")},
					FailedOrSkippedRegions: map[string]*armproviderhub.ExtendedErrorInfo{
						"westus2": {
							Code:    to.Ptr("RolloutStoppedByUser"),
							Message: to.Ptr("Rollout was explicitly stopped by the user."),
						},
					},
					SubscriptionReregistrationResult: to.Ptr(armproviderhub.SubscriptionReregistrationResultConditionalUpdate),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DefaultRollout) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DefaultRollout)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/DefaultRollouts_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDefaultRollouts_Delete(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/DefaultRollouts_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DefaultRollouts_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewDefaultRolloutsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	_, err := client.Delete(ctx,
		"Microsoft.Contoso",
		"2020week10",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/DefaultRollouts_Delete.json: %v", err)
	}
}

func TestDefaultRollouts_CreateOrUpdate(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/DefaultRollouts_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DefaultRollouts_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewDefaultRolloutsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Microsoft.Contoso",
		"2020week10",
		armproviderhub.DefaultRollout{
			Properties: &armproviderhub.DefaultRolloutProperties{
				Specification: &armproviderhub.DefaultRolloutPropertiesSpecification{
					Canary: &armproviderhub.DefaultRolloutSpecificationCanary{
						SkipRegions: []*string{
							to.Ptr("eastus2euap")},
					},
					RestOfTheWorldGroupTwo: &armproviderhub.DefaultRolloutSpecificationRestOfTheWorldGroupTwo{
						WaitDuration: to.Ptr("PT4H"),
					},
				},
			},
		},
		&armproviderhub.DefaultRolloutsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/DefaultRollouts_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/DefaultRollouts_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armproviderhub.DefaultRollout{
			Name: to.Ptr("Microsoft.Contoso/2020week10"),
			Type: to.Ptr("Microsoft.ProviderHub/providerRegistrations/defaultRollouts"),
			ID:   to.Ptr("/subscriptions/ab7a8701-f7ef-471a-a2f4-d0ebbf494f77providers/Microsoft.ProviderHub/providerRegistrations/Microsoft.Contoso/defaultRollouts/2020week10"),
			Properties: &armproviderhub.DefaultRolloutProperties{
				ProvisioningState: to.Ptr(armproviderhub.ProvisioningStateSucceeded),
				Specification: &armproviderhub.DefaultRolloutPropertiesSpecification{
					Canary: &armproviderhub.DefaultRolloutSpecificationCanary{
						Regions: []*string{
							to.Ptr("brazilus"),
							to.Ptr("eastus2euap"),
							to.Ptr("centraluseuap")},
					},
					HighTraffic: &armproviderhub.DefaultRolloutSpecificationHighTraffic{
						Regions: []*string{
							to.Ptr("australiasoutheast"),
							to.Ptr("otherhightraficregions")},
						WaitDuration: to.Ptr("PT24H"),
					},
					LowTraffic: &armproviderhub.DefaultRolloutSpecificationLowTraffic{
						Regions: []*string{
							to.Ptr("southeastasia")},
						WaitDuration: to.Ptr("PT24H"),
					},
					MediumTraffic: &armproviderhub.DefaultRolloutSpecificationMediumTraffic{
						Regions: []*string{
							to.Ptr("uksouth"),
							to.Ptr("indiawest")},
						WaitDuration: to.Ptr("PT24H"),
					},
					RestOfTheWorldGroupOne: &armproviderhub.DefaultRolloutSpecificationRestOfTheWorldGroupOne{
						Regions: []*string{
							to.Ptr("koreacentral"),
							to.Ptr("francecentral"),
							to.Ptr("australiacentral"),
							to.Ptr("westus"),
							to.Ptr("allotherregions")},
						WaitDuration: to.Ptr("PT4H"),
					},
					RestOfTheWorldGroupTwo: &armproviderhub.DefaultRolloutSpecificationRestOfTheWorldGroupTwo{
						Regions: []*string{
							to.Ptr("germanynorth"),
							to.Ptr("norwayeast"),
							to.Ptr("allotherregions")},
						WaitDuration: to.Ptr("PT4H"),
					},
				},
				Status: &armproviderhub.DefaultRolloutPropertiesStatus{
					CompletedRegions: []*string{
						to.Ptr("brazilus"),
						to.Ptr("eastus2euap"),
						to.Ptr("centraluseuap"),
						to.Ptr("allcompletedregions")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DefaultRollout) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DefaultRollout)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/DefaultRollouts_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDefaultRollouts_ListByProviderRegistration(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/DefaultRollouts_ListByProviderRegistration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DefaultRollouts_ListByProviderRegistration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewDefaultRolloutsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	pager := client.ListByProviderRegistration("Microsoft.Contoso",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/DefaultRollouts_ListByProviderRegistration.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armproviderhub.DefaultRolloutArrayResponseWithContinuation{
			Value: []*armproviderhub.DefaultRollout{
				{
					Name: to.Ptr("Microsoft.Contoso/2020week01"),
					Type: to.Ptr("Microsoft.ProviderHub/providerRegistrations/defaultRollouts"),
					ID:   to.Ptr("/subscriptions/ab7a8701-f7ef-471a-a2f4-d0ebbf494f77providers/Microsoft.ProviderHub/providerRegistrations/Microsoft.Contoso/defaultRollouts/2020week01"),
					Properties: &armproviderhub.DefaultRolloutProperties{
						ProvisioningState: to.Ptr(armproviderhub.ProvisioningStateSucceeded),
						Specification: &armproviderhub.DefaultRolloutPropertiesSpecification{
							Canary: &armproviderhub.DefaultRolloutSpecificationCanary{
								Regions: []*string{
									to.Ptr("brazilus"),
									to.Ptr("eastus2euap"),
									to.Ptr("centraluseuap")},
							},
							HighTraffic: &armproviderhub.DefaultRolloutSpecificationHighTraffic{
								Regions: []*string{
									to.Ptr("australiasoutheast"),
									to.Ptr("otherhightraficregions")},
								WaitDuration: to.Ptr("PT24H"),
							},
							LowTraffic: &armproviderhub.DefaultRolloutSpecificationLowTraffic{
								Regions: []*string{
									to.Ptr("southeastasia")},
								WaitDuration: to.Ptr("PT24H"),
							},
							MediumTraffic: &armproviderhub.DefaultRolloutSpecificationMediumTraffic{
								Regions: []*string{
									to.Ptr("uksouth"),
									to.Ptr("indiawest")},
								WaitDuration: to.Ptr("PT24H"),
							},
							RestOfTheWorldGroupOne: &armproviderhub.DefaultRolloutSpecificationRestOfTheWorldGroupOne{
								Regions: []*string{
									to.Ptr("koreacentral"),
									to.Ptr("francecentral"),
									to.Ptr("australiacentral"),
									to.Ptr("westus"),
									to.Ptr("allotherregions")},
								WaitDuration: to.Ptr("PT4H"),
							},
							RestOfTheWorldGroupTwo: &armproviderhub.DefaultRolloutSpecificationRestOfTheWorldGroupTwo{
								Regions: []*string{
									to.Ptr("germanynorth"),
									to.Ptr("norwayeast"),
									to.Ptr("allotherregions")},
								WaitDuration: to.Ptr("PT4H"),
							},
						},
						Status: &armproviderhub.DefaultRolloutPropertiesStatus{
							CompletedRegions: []*string{
								to.Ptr("brazilus"),
								to.Ptr("eastus2euap"),
								to.Ptr("centraluseuap"),
								to.Ptr("allcompletedregions")},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.Contoso/2020week10"),
					Type: to.Ptr("Microsoft.ProviderHub/providerRegistrations/defaultRollouts"),
					ID:   to.Ptr("/subscriptions/ab7a8701-f7ef-471a-a2f4-d0ebbf494f77providers/Microsoft.ProviderHub/providerRegistrations/Microsoft.Contoso/defaultRollouts/2020week10"),
					Properties: &armproviderhub.DefaultRolloutProperties{
						ProvisioningState: to.Ptr(armproviderhub.ProvisioningStateSucceeded),
						Specification: &armproviderhub.DefaultRolloutPropertiesSpecification{
							Canary: &armproviderhub.DefaultRolloutSpecificationCanary{
								Regions: []*string{
									to.Ptr("brazilus"),
									to.Ptr("eastus2euap"),
									to.Ptr("centraluseuap")},
							},
							HighTraffic: &armproviderhub.DefaultRolloutSpecificationHighTraffic{
								Regions: []*string{
									to.Ptr("australiasoutheast"),
									to.Ptr("otherhightraficregions")},
								WaitDuration: to.Ptr("PT24H"),
							},
							LowTraffic: &armproviderhub.DefaultRolloutSpecificationLowTraffic{
								Regions: []*string{
									to.Ptr("southeastasia")},
								WaitDuration: to.Ptr("PT24H"),
							},
							MediumTraffic: &armproviderhub.DefaultRolloutSpecificationMediumTraffic{
								Regions: []*string{
									to.Ptr("uksouth"),
									to.Ptr("indiawest")},
								WaitDuration: to.Ptr("PT24H"),
							},
							RestOfTheWorldGroupOne: &armproviderhub.DefaultRolloutSpecificationRestOfTheWorldGroupOne{
								Regions: []*string{
									to.Ptr("koreacentral"),
									to.Ptr("francecentral"),
									to.Ptr("australiacentral"),
									to.Ptr("westus"),
									to.Ptr("allotherregions")},
								WaitDuration: to.Ptr("PT4H"),
							},
							RestOfTheWorldGroupTwo: &armproviderhub.DefaultRolloutSpecificationRestOfTheWorldGroupTwo{
								Regions: []*string{
									to.Ptr("germanynorth"),
									to.Ptr("norwayeast"),
									to.Ptr("allotherregions")},
								WaitDuration: to.Ptr("PT4H"),
							},
						},
						Status: &armproviderhub.DefaultRolloutPropertiesStatus{
							CompletedRegions: []*string{
								to.Ptr("brazilus"),
								to.Ptr("eastus2euap"),
								to.Ptr("centraluseuap"),
								to.Ptr("allcompletedregions")},
							FailedOrSkippedRegions: map[string]*armproviderhub.ExtendedErrorInfo{
								"westus2": {
									Code:    to.Ptr("RolloutStoppedByUser"),
									Message: to.Ptr("Rollout was explicitly stopped by the user."),
								},
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DefaultRolloutArrayResponseWithContinuation) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DefaultRolloutArrayResponseWithContinuation)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/DefaultRollouts_ListByProviderRegistration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDefaultRollouts_Stop(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/DefaultRollouts_Stop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DefaultRollouts_Stop"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewDefaultRolloutsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	_, err := client.Stop(ctx,
		"Microsoft.Contoso",
		"2020week10",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/DefaultRollouts_Stop.json: %v", err)
	}
}

func TestProviderHub_GenerateManifest(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/GenerateManifest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GenerateManifest"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	res, err := client.GenerateManifest(ctx,
		"Microsoft.Contoso",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/GenerateManifest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armproviderhub.ResourceProviderManifest{
			Capabilities: []*armproviderhub.ResourceProviderCapabilities{
				{
					Effect:  to.Ptr(armproviderhub.ResourceProviderCapabilitiesEffectAllow),
					QuotaID: to.Ptr("CSP_2015-05-01"),
				},
				{
					Effect:  to.Ptr(armproviderhub.ResourceProviderCapabilitiesEffectAllow),
					QuotaID: to.Ptr("CSP_MG_2017-12-01"),
				}},
			GlobalNotificationEndpoints: []*armproviderhub.ResourceProviderEndpoint{
				{
					Enabled:     to.Ptr(true),
					EndpointURI: to.Ptr("https://notificationendpoint.com"),
				}},
			Management: &armproviderhub.ResourceProviderManifestManagement{
				IncidentContactEmail:   to.Ptr("helpme@contoso.com"),
				IncidentRoutingService: to.Ptr(""),
				IncidentRoutingTeam:    to.Ptr(""),
				ManifestOwners: []*string{
					to.Ptr("manifestOwners-group")},
				ResourceAccessPolicy: to.Ptr(armproviderhub.ResourceProviderManagementResourceAccessPolicyNotSpecified),
			},
			Metadata: map[string]interface{}{
				"onboardedVia": "ProviderHub",
			},
			Namespace: to.Ptr("microsoft.contoso"),
			ProviderAuthorizations: []*armproviderhub.ResourceProviderAuthorization{
				{
					ApplicationID:    to.Ptr("1a3b5c7d-8e9f-10g1-1h12-i13j14k1"),
					RoleDefinitionID: to.Ptr("123456bf-gkur-2098-b890-98da392a00b2"),
				}},
			ProviderType:    to.Ptr(armproviderhub.ResourceProviderType("Internal, Hidden")),
			ProviderVersion: to.Ptr("2.0"),
			ReRegisterSubscriptionMetadata: &armproviderhub.ResourceProviderManifestReRegisterSubscriptionMetadata{
				ConcurrencyLimit: to.Ptr[int32](100),
				Enabled:          to.Ptr(true),
			},
			ResourceTypes: []*armproviderhub.ResourceType{
				{
					Name: to.Ptr("Operations"),
					AllowedUnauthorizedActions: []*string{
						to.Ptr("microsoft.contoso/operations/read")},
					Endpoints: []*armproviderhub.ResourceProviderEndpoint{
						{
							APIVersions: []*string{
								to.Ptr("2020-01-01-preview")},
							EndpointURI: to.Ptr("https://resource-endpoint.com/"),
							Locations: []*string{
								to.Ptr("")},
							Timeout: to.Ptr("PT20S"),
						}},
					LinkedOperationRules: []*armproviderhub.LinkedOperationRule{},
					ResourceValidation:   to.Ptr(armproviderhub.ResourceValidation("ReservedWords, ProfaneWords")),
					RoutingType:          to.Ptr(armproviderhub.RoutingType("ProxyOnly, Tenant")),
				},
				{
					Name: to.Ptr("Locations"),
					Endpoints: []*armproviderhub.ResourceProviderEndpoint{
						{
							APIVersions: []*string{
								to.Ptr("2020-01-01-preview")},
							EndpointURI: to.Ptr("https://resource-endpoint.com/"),
							Locations: []*string{
								to.Ptr("")},
							Timeout: to.Ptr("PT20S"),
						}},
					LinkedOperationRules: []*armproviderhub.LinkedOperationRule{},
					ResourceValidation:   to.Ptr(armproviderhub.ResourceValidation("ReservedWords, ProfaneWords")),
					RoutingType:          to.Ptr(armproviderhub.RoutingTypeProxyOnly),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceProviderManifest) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceProviderManifest)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/GenerateManifest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProviderHub_CheckinManifest(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/CheckinManifest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CheckinManifest"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	res, err := client.CheckinManifest(ctx,
		"Microsoft.Contoso",
		armproviderhub.CheckinManifestParams{
			BaselineArmManifestLocation: to.Ptr("EastUS2EUAP"),
			Environment:                 to.Ptr("Prod"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/CheckinManifest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armproviderhub.CheckinManifestInfo{
			IsCheckedIn:   to.Ptr(false),
			StatusMessage: to.Ptr("Manifest is successfully merged. Use the Default/Custom rollout (http://aka.ms/rpaasrollout) to roll out the manifest in ARM."),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckinManifestInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckinManifestInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/CheckinManifest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationRegistrations_Get(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/NotificationRegistrations_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NotificationRegistrations_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewNotificationRegistrationsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	res, err := client.Get(ctx,
		"Microsoft.Contoso",
		"fooNotificationRegistration",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/NotificationRegistrations_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armproviderhub.NotificationRegistration{
			Name: to.Ptr("fooNotificationRegistration"),
			Type: to.Ptr("Microsoft.ProviderHub/providerRegistrations/notificationregistrations"),
			ID:   to.Ptr("/subscriptions/ab7a8701-f7ef-471a-a2f4-d0ebbf494f77providers/Microsoft.ProviderHub/providerRegistrations/Microsoft.Contoso/notificationregistrations/fooNotificationRegistration"),
			Properties: &armproviderhub.NotificationRegistrationProperties{
				IncludedEvents: []*string{
					to.Ptr("*/write"),
					to.Ptr("Microsoft.Contoso/employees/delete")},
				MessageScope: to.Ptr(armproviderhub.MessageScopeRegisteredSubscriptions),
				NotificationEndpoints: []*armproviderhub.NotificationEndpoint{
					{
						Locations: []*string{
							to.Ptr(""),
							to.Ptr("East US")},
						NotificationDestination: to.Ptr("/subscriptions/ac6bcfb5-3dc1-491f-95a6-646b89bf3e88/resourceGroups/mgmtexp-eastus/providers/Microsoft.EventHub/namespaces/unitedstates-mgmtexpint/eventhubs/armlinkednotifications"),
					},
					{
						Locations: []*string{
							to.Ptr("North Europe")},
						NotificationDestination: to.Ptr("/subscriptions/ac6bcfb5-3dc1-491f-95a6-646b89bf3e88/resourceGroups/mgmtexp-northeurope/providers/Microsoft.EventHub/namespaces/europe-mgmtexpint/eventhubs/armlinkednotifications"),
					}},
				NotificationMode: to.Ptr(armproviderhub.NotificationModeEventHub),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NotificationRegistration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NotificationRegistration)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/NotificationRegistrations_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationRegistrations_CreateOrUpdate(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/NotificationRegistrations_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NotificationRegistrations_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewNotificationRegistrationsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"Microsoft.Contoso",
		"fooNotificationRegistration",
		armproviderhub.NotificationRegistration{
			Properties: &armproviderhub.NotificationRegistrationProperties{
				IncludedEvents: []*string{
					to.Ptr("*/write"),
					to.Ptr("Microsoft.Contoso/employees/delete")},
				MessageScope: to.Ptr(armproviderhub.MessageScopeRegisteredSubscriptions),
				NotificationEndpoints: []*armproviderhub.NotificationEndpoint{
					{
						Locations: []*string{
							to.Ptr(""),
							to.Ptr("East US")},
						NotificationDestination: to.Ptr("/subscriptions/ac6bcfb5-3dc1-491f-95a6-646b89bf3e88/resourceGroups/mgmtexp-eastus/providers/Microsoft.EventHub/namespaces/unitedstates-mgmtexpint/eventhubs/armlinkednotifications"),
					},
					{
						Locations: []*string{
							to.Ptr("North Europe")},
						NotificationDestination: to.Ptr("/subscriptions/ac6bcfb5-3dc1-491f-95a6-646b89bf3e88/resourceGroups/mgmtexp-northeurope/providers/Microsoft.EventHub/namespaces/europe-mgmtexpint/eventhubs/armlinkednotifications"),
					}},
				NotificationMode: to.Ptr(armproviderhub.NotificationModeEventHub),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/NotificationRegistrations_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armproviderhub.NotificationRegistration{
			Name: to.Ptr("fooNotificationRegistration"),
			Type: to.Ptr("Microsoft.ProviderHub/providerRegistrations/notificationregistrations"),
			ID:   to.Ptr("/subscriptions/ab7a8701-f7ef-471a-a2f4-d0ebbf494f77providers/Microsoft.ProviderHub/providerRegistrations/Microsoft.Contoso/notificationregistrations/fooNotificationRegistration"),
			Properties: &armproviderhub.NotificationRegistrationProperties{
				IncludedEvents: []*string{
					to.Ptr("*/write"),
					to.Ptr("Microsoft.Contoso/employees/delete")},
				MessageScope: to.Ptr(armproviderhub.MessageScopeRegisteredSubscriptions),
				NotificationEndpoints: []*armproviderhub.NotificationEndpoint{
					{
						Locations: []*string{
							to.Ptr(""),
							to.Ptr("East US")},
						NotificationDestination: to.Ptr("/subscriptions/ac6bcfb5-3dc1-491f-95a6-646b89bf3e88/resourceGroups/mgmtexp-eastus/providers/Microsoft.EventHub/namespaces/unitedstates-mgmtexpint/eventhubs/armlinkednotifications"),
					},
					{
						Locations: []*string{
							to.Ptr("North Europe")},
						NotificationDestination: to.Ptr("/subscriptions/ac6bcfb5-3dc1-491f-95a6-646b89bf3e88/resourceGroups/mgmtexp-northeurope/providers/Microsoft.EventHub/namespaces/europe-mgmtexpint/eventhubs/armlinkednotifications"),
					}},
				NotificationMode: to.Ptr(armproviderhub.NotificationModeEventHub),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NotificationRegistration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NotificationRegistration)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/NotificationRegistrations_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationRegistrations_Delete(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/NotificationRegistrations_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NotificationRegistrations_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewNotificationRegistrationsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	_, err := client.Delete(ctx,
		"Microsoft.Contoso",
		"fooNotificationRegistration",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/NotificationRegistrations_Delete.json: %v", err)
	}
}

func TestNotificationRegistrations_ListByProviderRegistration(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/NotificationRegistrations_ListByProviderRegistration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NotificationRegistrations_ListByProviderRegistration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewNotificationRegistrationsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	pager := client.ListByProviderRegistration("Microsoft.Contoso",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/NotificationRegistrations_ListByProviderRegistration.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armproviderhub.NotificationRegistrationArrayResponseWithContinuation{
			Value: []*armproviderhub.NotificationRegistration{
				{
					Name: to.Ptr("fooNotificationRegistration"),
					Properties: &armproviderhub.NotificationRegistrationProperties{
						IncludedEvents: []*string{
							to.Ptr("*/write"),
							to.Ptr("Microsoft.Contoso/employees/delete")},
						MessageScope: to.Ptr(armproviderhub.MessageScopeRegisteredSubscriptions),
						NotificationEndpoints: []*armproviderhub.NotificationEndpoint{
							{
								Locations: []*string{
									to.Ptr(""),
									to.Ptr("East US")},
								NotificationDestination: to.Ptr("/subscriptions/ac6bcfb5-3dc1-491f-95a6-646b89bf3e88/resourceGroups/mgmtexp-eastus/providers/Microsoft.EventHub/namespaces/unitedstates-mgmtexpint/eventhubs/armlinkednotifications"),
							},
							{
								Locations: []*string{
									to.Ptr("North Europe")},
								NotificationDestination: to.Ptr("/subscriptions/ac6bcfb5-3dc1-491f-95a6-646b89bf3e88/resourceGroups/mgmtexp-northeurope/providers/Microsoft.EventHub/namespaces/europe-mgmtexpint/eventhubs/armlinkednotifications"),
							}},
						NotificationMode: to.Ptr(armproviderhub.NotificationModeEventHub),
					},
				},
				{
					Name: to.Ptr("barNotificationRegistration"),
					Properties: &armproviderhub.NotificationRegistrationProperties{
						IncludedEvents: []*string{
							to.Ptr("*/delete")},
						MessageScope: to.Ptr(armproviderhub.MessageScopeRegisteredSubscriptions),
						NotificationEndpoints: []*armproviderhub.NotificationEndpoint{
							{
								Locations: []*string{
									to.Ptr("")},
								NotificationDestination: to.Ptr("/subscriptions/ac6bcfb5-3dc1-491f-95a6-646b89bf3e88/resourceGroups/mgmtexp-eastus/providers/Microsoft.EventHub/namespaces/unitedstates-mgmtexpint/eventhubs/armlinkednotifications"),
							}},
						NotificationMode: to.Ptr(armproviderhub.NotificationModeEventHub),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NotificationRegistrationArrayResponseWithContinuation) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NotificationRegistrationArrayResponseWithContinuation)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/NotificationRegistrations_ListByProviderRegistration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewOperationsClient("<subscription-id>", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armproviderhub.OperationsDefinitionArrayResponseWithContinuation{
			Value: []*armproviderhub.OperationsDefinition{
				{
					Name: to.Ptr("Microsoft.ProviderHub/register/action"),
					Display: &armproviderhub.OperationsDefinitionDisplay{
						Description: to.Ptr("Registers the specified subscription with Microsoft.ProviderHub resource provider"),
						Operation:   to.Ptr("Register for Microsoft.ProviderHub"),
						Provider:    to.Ptr("Microsoft ProviderHub"),
						Resource:    to.Ptr("register"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.ProviderHub/defaultRollouts/write"),
					Display: &armproviderhub.OperationsDefinitionDisplay{
						Description: to.Ptr("Creates or Updates any rollout"),
						Operation:   to.Ptr("Create or Update rollout"),
						Provider:    to.Ptr("Microsoft ProviderHub"),
						Resource:    to.Ptr("defaultRollouts"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.ProviderHub/defaultRollouts/read"),
					Display: &armproviderhub.OperationsDefinitionDisplay{
						Description: to.Ptr("Reads any rollout"),
						Operation:   to.Ptr("Read rollout"),
						Provider:    to.Ptr("Microsoft ProviderHub"),
						Resource:    to.Ptr("defaultRollouts"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.ProviderHub/defaultRollouts/delete"),
					Display: &armproviderhub.OperationsDefinitionDisplay{
						Description: to.Ptr("Deletes any rollout"),
						Operation:   to.Ptr("Delete rollout"),
						Provider:    to.Ptr("Microsoft ProviderHub"),
						Resource:    to.Ptr("defaultRollouts"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.ProviderHub/defaultRollouts/stop/action"),
					Display: &armproviderhub.OperationsDefinitionDisplay{
						Description: to.Ptr("Deletes any rollout"),
						Operation:   to.Ptr("Delete rollout"),
						Provider:    to.Ptr("Microsoft ProviderHub"),
						Resource:    to.Ptr("defaultRollouts"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.ProviderHub/customRollouts/write"),
					Display: &armproviderhub.OperationsDefinitionDisplay{
						Description: to.Ptr("Creates or Updates any rollout"),
						Operation:   to.Ptr("Create or Update rollout"),
						Provider:    to.Ptr("Microsoft ProviderHub"),
						Resource:    to.Ptr("customRollouts"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.ProviderHub/customRollouts/read"),
					Display: &armproviderhub.OperationsDefinitionDisplay{
						Description: to.Ptr("Reads any rollout"),
						Operation:   to.Ptr("Read rollout"),
						Provider:    to.Ptr("Microsoft ProviderHub"),
						Resource:    to.Ptr("customRollouts"),
					},
					IsDataAction: to.Ptr(false),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationsDefinitionArrayResponseWithContinuation) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationsDefinitionArrayResponseWithContinuation)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_ListByProviderRegistration(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Operations_ListByProviderRegistration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_ListByProviderRegistration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewOperationsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	res, err := client.ListByProviderRegistration(ctx,
		"Microsoft.Contoso",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Operations_ListByProviderRegistration.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armproviderhub.OperationsDefinition{
			{
				Name: to.Ptr("Microsoft.Contoso/Employees/Read"),
				Display: &armproviderhub.OperationsDefinitionDisplay{
					Description: to.Ptr("Read employees"),
					Operation:   to.Ptr("Gets/List employee resources"),
					Provider:    to.Ptr("Microsoft.Contoso"),
					Resource:    to.Ptr("Employees"),
				},
				IsDataAction: to.Ptr(false),
			},
			{
				Name: to.Ptr("Microsoft.Contoso/Employees/Write"),
				Display: &armproviderhub.OperationsDefinitionDisplay{
					Description: to.Ptr("Writes employees"),
					Operation:   to.Ptr("Create/update employee resources"),
					Provider:    to.Ptr("Microsoft.Contoso"),
					Resource:    to.Ptr("Employees"),
				},
				IsDataAction: to.Ptr(false),
			},
			{
				Name: to.Ptr("Microsoft.Contoso/Employees/Delete"),
				Display: &armproviderhub.OperationsDefinitionDisplay{
					Description: to.Ptr("Deletes employees"),
					Operation:   to.Ptr("Deletes employee resource"),
					Provider:    to.Ptr("Microsoft.Contoso"),
					Resource:    to.Ptr("Employees"),
				},
				IsDataAction: to.Ptr(false),
				Origin:       to.Ptr(armproviderhub.OperationsDefinitionOriginUser),
			},
			{
				Name: to.Ptr("Microsoft.Contoso/Employees/Action"),
				Display: &armproviderhub.OperationsDefinitionDisplay{
					Description: to.Ptr("Writes employees"),
					Operation:   to.Ptr("Create/update employee resources"),
					Provider:    to.Ptr("Microsoft.Contoso"),
					Resource:    to.Ptr("Employees"),
				},
				IsDataAction: to.Ptr(true),
				Origin:       to.Ptr(armproviderhub.OperationsDefinitionOriginSystem),
			}}
		if !reflect.DeepEqual(exampleRes, res.OperationsDefinitionArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationsDefinitionArray)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Operations_ListByProviderRegistration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_CreateOrUpdate(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Operations_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewOperationsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"Microsoft.Contoso",
		armproviderhub.OperationsPutContent{
			Contents: []*armproviderhub.OperationsDefinition{
				{
					Name: to.Ptr("Microsoft.Contoso/Employees/Read"),
					Display: &armproviderhub.OperationsDefinitionDisplay{
						Description: to.Ptr("Read employees"),
						Operation:   to.Ptr("Gets/List employee resources"),
						Provider:    to.Ptr("Microsoft.Contoso"),
						Resource:    to.Ptr("Employees"),
					},
				}},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Operations_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armproviderhub.OperationsContent{
			Properties: &armproviderhub.OperationsDefinition{
				Name: to.Ptr("Microsoft.Contoso/Employees/Read"),
				Display: &armproviderhub.OperationsDefinitionDisplay{
					Description: to.Ptr("Read employees"),
					Operation:   to.Ptr("Gets/List employee resources"),
					Provider:    to.Ptr("Microsoft.Contoso"),
					Resource:    to.Ptr("Employees"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationsContent) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationsContent)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Operations_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_Delete(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Operations_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewOperationsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	_, err := client.Delete(ctx,
		"Microsoft.Contoso",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Operations_Delete.json: %v", err)
	}
}

func TestProviderRegistrations_Get(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ProviderRegistrations_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ProviderRegistrations_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewProviderRegistrationsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	res, err := client.Get(ctx,
		"Microsoft.Contoso",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ProviderRegistrations_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armproviderhub.ProviderRegistration{
			Properties: &armproviderhub.ProviderRegistrationProperties{
				Capabilities: []*armproviderhub.ResourceProviderCapabilities{
					{
						Effect:  to.Ptr(armproviderhub.ResourceProviderCapabilitiesEffectAllow),
						QuotaID: to.Ptr("CSP_2015-05-01"),
					},
					{
						Effect:  to.Ptr(armproviderhub.ResourceProviderCapabilitiesEffectAllow),
						QuotaID: to.Ptr("CSP_MG_2017-12-01"),
					}},
				Management: &armproviderhub.ResourceProviderManifestPropertiesManagement{
					IncidentContactEmail:   to.Ptr("helpme@contoso.com"),
					IncidentRoutingService: to.Ptr(""),
					IncidentRoutingTeam:    to.Ptr(""),
					ManifestOwners: []*string{
						to.Ptr("SPARTA-PlatformServiceAdministrator")},
					ResourceAccessPolicy: to.Ptr(armproviderhub.ResourceProviderManagementResourceAccessPolicyNotSpecified),
				},
				Namespace: to.Ptr("microsoft.contoso"),
				ProviderAuthorizations: []*armproviderhub.ResourceProviderAuthorization{
					{
						ApplicationID:    to.Ptr("1a3b5c7d-8e9f-10g1-1h12-i13j14k1"),
						RoleDefinitionID: to.Ptr("123456bf-gkur-2098-b890-98da392a00b2"),
					}},
				ProviderType:    to.Ptr(armproviderhub.ResourceProviderType("Internal, Hidden")),
				ProviderVersion: to.Ptr("2.0"),
				ProviderHubMetadata: &armproviderhub.ProviderRegistrationPropertiesProviderHubMetadata{
					ProviderAuthentication: &armproviderhub.MetadataProviderAuthentication{
						AllowedAudiences: []*string{
							to.Ptr("https://management.core.windows.net/")},
					},
				},
				ProvisioningState: to.Ptr(armproviderhub.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProviderRegistration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProviderRegistration)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ProviderRegistrations_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProviderRegistrations_CreateOrUpdate(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ProviderRegistrations_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ProviderRegistrations_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewProviderRegistrationsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Microsoft.Contoso",
		armproviderhub.ProviderRegistration{
			Properties: &armproviderhub.ProviderRegistrationProperties{
				Capabilities: []*armproviderhub.ResourceProviderCapabilities{
					{
						Effect:  to.Ptr(armproviderhub.ResourceProviderCapabilitiesEffectAllow),
						QuotaID: to.Ptr("CSP_2015-05-01"),
					},
					{
						Effect:  to.Ptr(armproviderhub.ResourceProviderCapabilitiesEffectAllow),
						QuotaID: to.Ptr("CSP_MG_2017-12-01"),
					}},
				Management: &armproviderhub.ResourceProviderManifestPropertiesManagement{
					IncidentContactEmail:   to.Ptr("helpme@contoso.com"),
					IncidentRoutingService: to.Ptr("Contoso Resource Provider"),
					IncidentRoutingTeam:    to.Ptr("Contoso Triage"),
				},
				ProviderType:    to.Ptr(armproviderhub.ResourceProviderTypeInternal),
				ProviderVersion: to.Ptr("2.0"),
			},
		},
		&armproviderhub.ProviderRegistrationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ProviderRegistrations_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ProviderRegistrations_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armproviderhub.ProviderRegistration{
			Properties: &armproviderhub.ProviderRegistrationProperties{
				Capabilities: []*armproviderhub.ResourceProviderCapabilities{
					{
						Effect:  to.Ptr(armproviderhub.ResourceProviderCapabilitiesEffectAllow),
						QuotaID: to.Ptr("CSP_2015-05-01"),
					},
					{
						Effect:  to.Ptr(armproviderhub.ResourceProviderCapabilitiesEffectAllow),
						QuotaID: to.Ptr("CSP_MG_2017-12-01"),
					}},
				Management: &armproviderhub.ResourceProviderManifestPropertiesManagement{
					IncidentContactEmail:   to.Ptr("helpme@contoso.com"),
					IncidentRoutingService: to.Ptr(""),
					IncidentRoutingTeam:    to.Ptr(""),
					ManifestOwners: []*string{
						to.Ptr("manifestOwners-group")},
					ResourceAccessPolicy: to.Ptr(armproviderhub.ResourceProviderManagementResourceAccessPolicyNotSpecified),
				},
				Metadata: map[string]interface{}{
					"onboardedVia": "ProviderHub",
				},
				Namespace: to.Ptr("Microsoft.Contoso"),
				ProviderAuthorizations: []*armproviderhub.ResourceProviderAuthorization{
					{
						ApplicationID:    to.Ptr("1a3b5c7d-8e9f-10g1-1h12-i13j14k1"),
						RoleDefinitionID: to.Ptr("123456bf-gkur-2098-b890-98da392a00b2"),
					}},
				ProviderType:      to.Ptr(armproviderhub.ResourceProviderType("Internal, Hidden")),
				ProviderVersion:   to.Ptr("2.0"),
				ProvisioningState: to.Ptr(armproviderhub.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProviderRegistration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProviderRegistration)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ProviderRegistrations_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProviderRegistrations_Delete(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ProviderRegistrations_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ProviderRegistrations_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewProviderRegistrationsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	_, err := client.Delete(ctx,
		"Microsoft.Contoso",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ProviderRegistrations_Delete.json: %v", err)
	}
}

func TestProviderRegistrations_List(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ProviderRegistrations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ProviderRegistrations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewProviderRegistrationsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ProviderRegistrations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armproviderhub.ProviderRegistrationArrayResponseWithContinuation{
			Value: []*armproviderhub.ProviderRegistration{
				{
					Properties: &armproviderhub.ProviderRegistrationProperties{
						Capabilities: []*armproviderhub.ResourceProviderCapabilities{
							{
								Effect:  to.Ptr(armproviderhub.ResourceProviderCapabilitiesEffectAllow),
								QuotaID: to.Ptr("CSP_2015-05-01"),
							},
							{
								Effect:  to.Ptr(armproviderhub.ResourceProviderCapabilitiesEffectAllow),
								QuotaID: to.Ptr("CSP_MG_2017-12-01"),
							}},
						Management: &armproviderhub.ResourceProviderManifestPropertiesManagement{
							IncidentContactEmail:   to.Ptr("helpme@contoso.com"),
							IncidentRoutingService: to.Ptr(""),
							IncidentRoutingTeam:    to.Ptr(""),
							ManifestOwners: []*string{
								to.Ptr("manifestOwners-group")},
							ResourceAccessPolicy: to.Ptr(armproviderhub.ResourceProviderManagementResourceAccessPolicyNotSpecified),
						},
						Namespace: to.Ptr("microsoft.contoso"),
						ProviderAuthorizations: []*armproviderhub.ResourceProviderAuthorization{
							{
								ApplicationID:    to.Ptr("1a3b5c7d-8e9f-10g1-1h12-i13j14k1"),
								RoleDefinitionID: to.Ptr("123456bf-gkur-2098-b890-98da392a00b2"),
							}},
						ProviderType:    to.Ptr(armproviderhub.ResourceProviderType("Internal, Hidden")),
						ProviderVersion: to.Ptr("2.0"),
						ProviderHubMetadata: &armproviderhub.ProviderRegistrationPropertiesProviderHubMetadata{
							ProviderAuthentication: &armproviderhub.MetadataProviderAuthentication{
								AllowedAudiences: []*string{
									to.Ptr("https://management.core.windows.net/")},
							},
						},
						ProvisioningState: to.Ptr(armproviderhub.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProviderRegistrationArrayResponseWithContinuation) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProviderRegistrationArrayResponseWithContinuation)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ProviderRegistrations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProviderRegistrations_GenerateOperations(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ProviderRegistrations_GenerateOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ProviderRegistrations_GenerateOperations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewProviderRegistrationsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	res, err := client.GenerateOperations(ctx,
		"Microsoft.Contoso",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ProviderRegistrations_GenerateOperations.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armproviderhub.OperationsDefinition{
			{
				Name: to.Ptr("Microsoft.Contoso/Employees/Read"),
				Display: &armproviderhub.OperationsDefinitionDisplay{
					Description: to.Ptr("Read employees"),
					Operation:   to.Ptr("Gets/List employee resources"),
					Provider:    to.Ptr("Microsoft.Contoso"),
					Resource:    to.Ptr("Employees"),
				},
				IsDataAction: to.Ptr(false),
			},
			{
				Name: to.Ptr("Microsoft.Contoso/Employees/Write"),
				Display: &armproviderhub.OperationsDefinitionDisplay{
					Description: to.Ptr("Writes employees"),
					Operation:   to.Ptr("Create/update employee resources"),
					Provider:    to.Ptr("Microsoft.Contoso"),
					Resource:    to.Ptr("Employees"),
				},
				IsDataAction: to.Ptr(false),
			},
			{
				Name: to.Ptr("Microsoft.Contoso/Employees/Delete"),
				Display: &armproviderhub.OperationsDefinitionDisplay{
					Description: to.Ptr("Deletes employees"),
					Operation:   to.Ptr("Deletes employee resource"),
					Provider:    to.Ptr("Microsoft.Contoso"),
					Resource:    to.Ptr("Employees"),
				},
				IsDataAction: to.Ptr(false),
				Origin:       to.Ptr(armproviderhub.OperationsDefinitionOriginUser),
			},
			{
				Name: to.Ptr("Microsoft.Contoso/Employees/Action"),
				Display: &armproviderhub.OperationsDefinitionDisplay{
					Description: to.Ptr("Writes employees"),
					Operation:   to.Ptr("Create/update employee resources"),
					Provider:    to.Ptr("Microsoft.Contoso"),
					Resource:    to.Ptr("Employees"),
				},
				IsDataAction: to.Ptr(true),
				Origin:       to.Ptr(armproviderhub.OperationsDefinitionOriginSystem),
			}}
		if !reflect.DeepEqual(exampleRes, res.OperationsDefinitionArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationsDefinitionArray)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ProviderRegistrations_GenerateOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceTypeRegistrations_Get(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ResourceTypeRegistrations_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResourceTypeRegistrations_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewResourceTypeRegistrationsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	res, err := client.Get(ctx,
		"Microsoft.Contoso",
		"employees",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ResourceTypeRegistrations_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armproviderhub.ResourceTypeRegistration{
			Name: to.Ptr("employees"),
			Properties: &armproviderhub.ResourceTypeRegistrationProperties{
				EnableAsyncOperation: to.Ptr(false),
				EnableThirdPartyS2S:  to.Ptr(false),
				Endpoints: []*armproviderhub.ResourceTypeEndpoint{
					{
						APIVersions: []*string{
							to.Ptr("2018-11-01-preview"),
							to.Ptr("2020-01-01-preview"),
							to.Ptr("2019-01-01")},
						Locations: []*string{
							to.Ptr("East Asia"),
							to.Ptr("East US"),
							to.Ptr("North Europe"),
							to.Ptr("Southeast Asia"),
							to.Ptr("East US 2 EUAP"),
							to.Ptr("Central US EUAP"),
							to.Ptr("West Europe"),
							to.Ptr("West US"),
							to.Ptr("West Central US"),
							to.Ptr("West US 2")},
						RequiredFeatures: []*string{
							to.Ptr("Microsoft.Contoso/RPaaSSampleApp")},
					}},
				ProvisioningState: to.Ptr(armproviderhub.ProvisioningStateSucceeded),
				Regionality:       to.Ptr(armproviderhub.RegionalityRegional),
				RoutingType:       to.Ptr(armproviderhub.RoutingTypeDefault),
				SwaggerSpecifications: []*armproviderhub.SwaggerSpecification{
					{
						APIVersions: []*string{
							to.Ptr("2018-11-01-preview"),
							to.Ptr("2020-01-01-preview"),
							to.Ptr("2019-01-01")},
						SwaggerSpecFolderURI: to.Ptr("https://github.com/Azure/azure-rest-api-specs/blob/feature/azure/contoso/specification/contoso/resource-manager/Microsoft.SampleRP/"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceTypeRegistration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceTypeRegistration)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ResourceTypeRegistrations_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceTypeRegistrations_CreateOrUpdate(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ResourceTypeRegistrations_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResourceTypeRegistrations_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewResourceTypeRegistrationsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Microsoft.Contoso",
		"employees",
		armproviderhub.ResourceTypeRegistration{
			Properties: &armproviderhub.ResourceTypeRegistrationProperties{
				Endpoints: []*armproviderhub.ResourceTypeEndpoint{
					{
						APIVersions: []*string{
							to.Ptr("2020-06-01-preview")},
						Locations: []*string{
							to.Ptr("West US"),
							to.Ptr("East US"),
							to.Ptr("North Europe")},
						RequiredFeatures: []*string{
							to.Ptr("<feature flag>")},
					}},
				Regionality: to.Ptr(armproviderhub.RegionalityRegional),
				RoutingType: to.Ptr(armproviderhub.RoutingTypeDefault),
				SwaggerSpecifications: []*armproviderhub.SwaggerSpecification{
					{
						APIVersions: []*string{
							to.Ptr("2020-06-01-preview")},
						SwaggerSpecFolderURI: to.Ptr("https://github.com/Azure/azure-rest-api-specs/blob/feature/azure/contoso/specification/contoso/resource-manager/Microsoft.SampleRP/"),
					}},
			},
		},
		&armproviderhub.ResourceTypeRegistrationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ResourceTypeRegistrations_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ResourceTypeRegistrations_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armproviderhub.ResourceTypeRegistration{
			Name: to.Ptr("employees"),
			Properties: &armproviderhub.ResourceTypeRegistrationProperties{
				EnableAsyncOperation: to.Ptr(false),
				EnableThirdPartyS2S:  to.Ptr(false),
				Endpoints: []*armproviderhub.ResourceTypeEndpoint{
					{
						APIVersions: []*string{
							to.Ptr("2018-11-01-preview"),
							to.Ptr("2020-01-01-preview"),
							to.Ptr("2019-01-01")},
						Locations: []*string{
							to.Ptr("East Asia"),
							to.Ptr("East US"),
							to.Ptr("North Europe"),
							to.Ptr("Southeast Asia"),
							to.Ptr("East US 2 EUAP"),
							to.Ptr("Central US EUAP"),
							to.Ptr("West Europe"),
							to.Ptr("West US"),
							to.Ptr("West Central US"),
							to.Ptr("West US 2")},
						RequiredFeatures: []*string{
							to.Ptr("Microsoft.Contoso/RPaaSSampleApp")},
					}},
				ProvisioningState:      to.Ptr(armproviderhub.ProvisioningStateSucceeded),
				Regionality:            to.Ptr(armproviderhub.RegionalityRegional),
				ResourceDeletionPolicy: to.Ptr(armproviderhub.ResourceDeletionPolicyCascadeDeleteProxyOnlyChildren),
				RoutingType:            to.Ptr(armproviderhub.RoutingTypeDefault),
				SwaggerSpecifications: []*armproviderhub.SwaggerSpecification{
					{
						APIVersions: []*string{
							to.Ptr("2018-11-01-preview"),
							to.Ptr("2020-01-01-preview"),
							to.Ptr("2019-01-01")},
						SwaggerSpecFolderURI: to.Ptr("https://github.com/Azure/azure-rest-api-specs/blob/feature/azure/contoso/specification/contoso/resource-manager/Microsoft.SampleRP/"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceTypeRegistration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceTypeRegistration)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ResourceTypeRegistrations_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceTypeRegistrations_Delete(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ResourceTypeRegistrations_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResourceTypeRegistrations_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewResourceTypeRegistrationsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	_, err := client.Delete(ctx,
		"Microsoft.Contoso",
		"testResourceType",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ResourceTypeRegistrations_Delete.json: %v", err)
	}
}

func TestResourceTypeRegistrations_ListByProviderRegistration(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ResourceTypeRegistrations_ListByProviderRegistration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResourceTypeRegistrations_ListByProviderRegistration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewResourceTypeRegistrationsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	pager := client.ListByProviderRegistration("Microsoft.Contoso",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ResourceTypeRegistrations_ListByProviderRegistration.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armproviderhub.ResourceTypeRegistrationArrayResponseWithContinuation{
			Value: []*armproviderhub.ResourceTypeRegistration{
				{
					Name: to.Ptr("employees"),
					Properties: &armproviderhub.ResourceTypeRegistrationProperties{
						EnableAsyncOperation: to.Ptr(false),
						EnableThirdPartyS2S:  to.Ptr(false),
						Endpoints: []*armproviderhub.ResourceTypeEndpoint{
							{
								APIVersions: []*string{
									to.Ptr("2018-11-01-preview"),
									to.Ptr("2020-01-01-preview"),
									to.Ptr("2019-01-01")},
								Locations: []*string{
									to.Ptr("East Asia"),
									to.Ptr("East US"),
									to.Ptr("North Europe"),
									to.Ptr("Southeast Asia"),
									to.Ptr("East US 2 EUAP"),
									to.Ptr("Central US EUAP"),
									to.Ptr("West Europe"),
									to.Ptr("West US"),
									to.Ptr("West Central US"),
									to.Ptr("West US 2")},
								RequiredFeatures: []*string{
									to.Ptr("Microsoft.Contoso/RPaaSSampleApp")},
							}},
						ProvisioningState: to.Ptr(armproviderhub.ProvisioningStateSucceeded),
						Regionality:       to.Ptr(armproviderhub.RegionalityRegional),
						RoutingType:       to.Ptr(armproviderhub.RoutingTypeDefault),
						SwaggerSpecifications: []*armproviderhub.SwaggerSpecification{
							{
								APIVersions: []*string{
									to.Ptr("2018-11-01-preview"),
									to.Ptr("2020-01-01-preview"),
									to.Ptr("2019-01-01")},
								SwaggerSpecFolderURI: to.Ptr("https://github.com/Azure/azure-rest-api-specs/blob/feature/azure/contoso/specification/contoso/resource-manager/Microsoft.SampleRP/"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceTypeRegistrationArrayResponseWithContinuation) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceTypeRegistrationArrayResponseWithContinuation)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/ResourceTypeRegistrations_ListByProviderRegistration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSKUs_Get(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Skus_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewSKUsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	res, err := client.Get(ctx,
		"Microsoft.Contoso",
		"testResourceType",
		"testSku",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armproviderhub.SKUResource{
			Name: to.Ptr("testSku"),
			Properties: &armproviderhub.SKUResourceProperties{
				SKUSettings: []*armproviderhub.SKUSetting{
					{
						Name: to.Ptr("freeSku"),
						Kind: to.Ptr("Standard"),
						Tier: to.Ptr("Tier1"),
					},
					{
						Name: to.Ptr("premiumSku"),
						Costs: []*armproviderhub.SKUCost{
							{
								MeterID: to.Ptr("xxx"),
							}},
						Kind: to.Ptr("Premium"),
						Tier: to.Ptr("Tier2"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SKUResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SKUResource)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSKUs_CreateOrUpdate(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Skus_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewSKUsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"Microsoft.Contoso",
		"testResourceType",
		"testSku",
		armproviderhub.SKUResource{
			Properties: &armproviderhub.SKUResourceProperties{
				SKUSettings: []*armproviderhub.SKUSetting{
					{
						Name: to.Ptr("freeSku"),
						Kind: to.Ptr("Standard"),
						Tier: to.Ptr("Tier1"),
					},
					{
						Name: to.Ptr("premiumSku"),
						Costs: []*armproviderhub.SKUCost{
							{
								MeterID: to.Ptr("xxx"),
							}},
						Kind: to.Ptr("Premium"),
						Tier: to.Ptr("Tier2"),
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armproviderhub.SKUResource{
			Name: to.Ptr("Microsoft.Contoso/"),
			Type: to.Ptr("Microsoft.ProviderHub/providerRegistrations/"),
			ID:   to.Ptr("/subscriptions/ab7a8701-f7ef-471a-a2f4-d0ebbf494f77providers/Microsoft.ProviderHub/providerRegistrations/Microsoft.Contoso/"),
		}
		if !reflect.DeepEqual(exampleRes, res.SKUResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SKUResource)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSKUs_Delete(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Skus_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewSKUsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	_, err := client.Delete(ctx,
		"Microsoft.Contoso",
		"testResourceType",
		"testSku",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_Delete.json: %v", err)
	}
}

func TestSKUs_GetNestedResourceTypeFirst(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_GetNestedResourceTypeFirst.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Skus_GetNestedResourceTypeFirst"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewSKUsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	res, err := client.GetNestedResourceTypeFirst(ctx,
		"Microsoft.Contoso",
		"testResourceType",
		"nestedResourceTypeFirst",
		"testSku",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_GetNestedResourceTypeFirst.json: %v", err)
	}
	// Response check
	{
		exampleRes := armproviderhub.SKUResource{
			Name: to.Ptr("testSku"),
			Properties: &armproviderhub.SKUResourceProperties{
				SKUSettings: []*armproviderhub.SKUSetting{
					{
						Name: to.Ptr("freeSku"),
						Kind: to.Ptr("Standard"),
						Tier: to.Ptr("Tier1"),
					},
					{
						Name: to.Ptr("premiumSku"),
						Costs: []*armproviderhub.SKUCost{
							{
								MeterID: to.Ptr("xxx"),
							}},
						Kind: to.Ptr("Premium"),
						Tier: to.Ptr("Tier2"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SKUResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SKUResource)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_GetNestedResourceTypeFirst.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSKUs_CreateOrUpdateNestedResourceTypeFirst(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_CreateOrUpdateNestedResourceTypeFirst.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Skus_CreateOrUpdateNestedResourceTypeFirst"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewSKUsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	res, err := client.CreateOrUpdateNestedResourceTypeFirst(ctx,
		"Microsoft.Contoso",
		"testResourceType",
		"nestedResourceTypeFirst",
		"testSku",
		armproviderhub.SKUResource{
			Properties: &armproviderhub.SKUResourceProperties{
				SKUSettings: []*armproviderhub.SKUSetting{
					{
						Name: to.Ptr("freeSku"),
						Kind: to.Ptr("Standard"),
						Tier: to.Ptr("Tier1"),
					},
					{
						Name: to.Ptr("premiumSku"),
						Costs: []*armproviderhub.SKUCost{
							{
								MeterID: to.Ptr("xxx"),
							}},
						Kind: to.Ptr("Premium"),
						Tier: to.Ptr("Tier2"),
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_CreateOrUpdateNestedResourceTypeFirst.json: %v", err)
	}
	// Response check
	{
		exampleRes := armproviderhub.SKUResource{
			Name: to.Ptr("Microsoft.Contoso/"),
			Type: to.Ptr("Microsoft.ProviderHub/providerRegistrations/"),
			ID:   to.Ptr("/subscriptions/ab7a8701-f7ef-471a-a2f4-d0ebbf494f77providers/Microsoft.ProviderHub/providerRegistrations/Microsoft.Contoso/"),
		}
		if !reflect.DeepEqual(exampleRes, res.SKUResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SKUResource)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_CreateOrUpdateNestedResourceTypeFirst.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSKUs_DeleteNestedResourceTypeFirst(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_DeleteNestedResourceTypeFirst.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Skus_DeleteNestedResourceTypeFirst"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewSKUsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	_, err := client.DeleteNestedResourceTypeFirst(ctx,
		"Microsoft.Contoso",
		"testResourceType",
		"nestedResourceTypeFirst",
		"testSku",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_DeleteNestedResourceTypeFirst.json: %v", err)
	}
}

func TestSKUs_GetNestedResourceTypeSecond(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_GetNestedResourceTypeSecond.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Skus_GetNestedResourceTypeSecond"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewSKUsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	res, err := client.GetNestedResourceTypeSecond(ctx,
		"Microsoft.Contoso",
		"testResourceType",
		"nestedResourceTypeFirst",
		"nestedResourceTypeSecond",
		"testSku",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_GetNestedResourceTypeSecond.json: %v", err)
	}
	// Response check
	{
		exampleRes := armproviderhub.SKUResource{
			Name: to.Ptr("testSku"),
			Properties: &armproviderhub.SKUResourceProperties{
				SKUSettings: []*armproviderhub.SKUSetting{
					{
						Name: to.Ptr("freeSku"),
						Kind: to.Ptr("Standard"),
						Tier: to.Ptr("Tier1"),
					},
					{
						Name: to.Ptr("premiumSku"),
						Costs: []*armproviderhub.SKUCost{
							{
								MeterID: to.Ptr("xxx"),
							}},
						Kind: to.Ptr("Premium"),
						Tier: to.Ptr("Tier2"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SKUResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SKUResource)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_GetNestedResourceTypeSecond.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSKUs_CreateOrUpdateNestedResourceTypeSecond(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_CreateOrUpdateNestedResourceTypeSecond.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Skus_CreateOrUpdateNestedResourceTypeSecond"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewSKUsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	res, err := client.CreateOrUpdateNestedResourceTypeSecond(ctx,
		"Microsoft.Contoso",
		"testResourceType",
		"nestedResourceTypeFirst",
		"nestedResourceTypeSecond",
		"testSku",
		armproviderhub.SKUResource{
			Properties: &armproviderhub.SKUResourceProperties{
				SKUSettings: []*armproviderhub.SKUSetting{
					{
						Name: to.Ptr("freeSku"),
						Kind: to.Ptr("Standard"),
						Tier: to.Ptr("Tier1"),
					},
					{
						Name: to.Ptr("premiumSku"),
						Costs: []*armproviderhub.SKUCost{
							{
								MeterID: to.Ptr("xxx"),
							}},
						Kind: to.Ptr("Premium"),
						Tier: to.Ptr("Tier2"),
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_CreateOrUpdateNestedResourceTypeSecond.json: %v", err)
	}
	// Response check
	{
		exampleRes := armproviderhub.SKUResource{
			Name: to.Ptr("Microsoft.Contoso/"),
			Type: to.Ptr("Microsoft.ProviderHub/providerRegistrations/"),
			ID:   to.Ptr("/subscriptions/ab7a8701-f7ef-471a-a2f4-d0ebbf494f77providers/Microsoft.ProviderHub/providerRegistrations/Microsoft.Contoso/"),
		}
		if !reflect.DeepEqual(exampleRes, res.SKUResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SKUResource)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_CreateOrUpdateNestedResourceTypeSecond.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSKUs_DeleteNestedResourceTypeSecond(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_DeleteNestedResourceTypeSecond.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Skus_DeleteNestedResourceTypeSecond"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewSKUsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	_, err := client.DeleteNestedResourceTypeSecond(ctx,
		"Microsoft.Contoso",
		"testResourceType",
		"nestedResourceTypeFirst",
		"nestedResourceTypeSecond",
		"testSku",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_DeleteNestedResourceTypeSecond.json: %v", err)
	}
}

func TestSKUs_GetNestedResourceTypeThird(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_GetNestedResourceTypeThird.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Skus_GetNestedResourceTypeThird"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewSKUsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	res, err := client.GetNestedResourceTypeThird(ctx,
		"Microsoft.Contoso",
		"testResourceType",
		"nestedResourceTypeFirst",
		"nestedResourceTypeSecond",
		"nestedResourceTypeThird",
		"testSku",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_GetNestedResourceTypeThird.json: %v", err)
	}
	// Response check
	{
		exampleRes := armproviderhub.SKUResource{
			Name: to.Ptr("testSku"),
			Properties: &armproviderhub.SKUResourceProperties{
				SKUSettings: []*armproviderhub.SKUSetting{
					{
						Name: to.Ptr("freeSku"),
						Kind: to.Ptr("Standard"),
						Tier: to.Ptr("Tier1"),
					},
					{
						Name: to.Ptr("premiumSku"),
						Costs: []*armproviderhub.SKUCost{
							{
								MeterID: to.Ptr("xxx"),
							}},
						Kind: to.Ptr("Premium"),
						Tier: to.Ptr("Tier2"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SKUResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SKUResource)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_GetNestedResourceTypeThird.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSKUs_CreateOrUpdateNestedResourceTypeThird(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_CreateOrUpdateNestedResourceTypeThird.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Skus_CreateOrUpdateNestedResourceTypeThird"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewSKUsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	res, err := client.CreateOrUpdateNestedResourceTypeThird(ctx,
		"Microsoft.Contoso",
		"testResourceType",
		"nestedResourceTypeFirst",
		"nestedResourceTypeSecond",
		"nestedResourceTypeThird",
		"testSku",
		armproviderhub.SKUResource{
			Properties: &armproviderhub.SKUResourceProperties{
				SKUSettings: []*armproviderhub.SKUSetting{
					{
						Name: to.Ptr("freeSku"),
						Kind: to.Ptr("Standard"),
						Tier: to.Ptr("Tier1"),
					},
					{
						Name: to.Ptr("premiumSku"),
						Costs: []*armproviderhub.SKUCost{
							{
								MeterID: to.Ptr("xxx"),
							}},
						Kind: to.Ptr("Premium"),
						Tier: to.Ptr("Tier2"),
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_CreateOrUpdateNestedResourceTypeThird.json: %v", err)
	}
	// Response check
	{
		exampleRes := armproviderhub.SKUResource{
			Name: to.Ptr("Microsoft.Contoso/"),
			Type: to.Ptr("Microsoft.ProviderHub/providerRegistrations/"),
			ID:   to.Ptr("/subscriptions/ab7a8701-f7ef-471a-a2f4-d0ebbf494f77providers/Microsoft.ProviderHub/providerRegistrations/Microsoft.Contoso/"),
		}
		if !reflect.DeepEqual(exampleRes, res.SKUResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SKUResource)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_CreateOrUpdateNestedResourceTypeThird.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSKUs_DeleteNestedResourceTypeThird(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_DeleteNestedResourceTypeThird.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Skus_DeleteNestedResourceTypeThird"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewSKUsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	_, err := client.DeleteNestedResourceTypeThird(ctx,
		"Microsoft.Contoso",
		"testResourceType",
		"nestedResourceTypeFirst",
		"nestedResourceTypeSecond",
		"nestedResourceTypeThird",
		"testSku",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_DeleteNestedResourceTypeThird.json: %v", err)
	}
}

func TestSKUs_ListByResourceTypeRegistrations(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_ListByResourceTypeRegistrations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Skus_ListByResourceTypeRegistrations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewSKUsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	pager := client.ListByResourceTypeRegistrations("Microsoft.Contoso",
		"testResourceType",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_ListByResourceTypeRegistrations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armproviderhub.SKUResourceArrayResponseWithContinuation{
			Value: []*armproviderhub.SKUResource{
				{
					Name: to.Ptr("testSku"),
					Properties: &armproviderhub.SKUResourceProperties{
						SKUSettings: []*armproviderhub.SKUSetting{
							{
								Name: to.Ptr("freeSku"),
								Kind: to.Ptr("Standard"),
								Tier: to.Ptr("Tier1"),
							},
							{
								Name: to.Ptr("premiumSku"),
								Costs: []*armproviderhub.SKUCost{
									{
										MeterID: to.Ptr("xxx"),
									}},
								Kind: to.Ptr("Premium"),
								Tier: to.Ptr("Tier2"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SKUResourceArrayResponseWithContinuation) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SKUResourceArrayResponseWithContinuation)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_ListByResourceTypeRegistrations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSKUs_ListByResourceTypeRegistrationsNestedResourceTypeFirst(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_ListByResourceTypeRegistrationsNestedResourceTypeFirst.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Skus_ListByResourceTypeRegistrationsNestedResourceTypeFirst"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewSKUsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	pager := client.ListByResourceTypeRegistrationsNestedResourceTypeFirst("Microsoft.Contoso",
		"testResourceType",
		"nestedResourceTypeFirst",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_ListByResourceTypeRegistrationsNestedResourceTypeFirst.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armproviderhub.SKUResourceArrayResponseWithContinuation{
			Value: []*armproviderhub.SKUResource{
				{
					Name: to.Ptr("testSku"),
					Properties: &armproviderhub.SKUResourceProperties{
						SKUSettings: []*armproviderhub.SKUSetting{
							{
								Name: to.Ptr("freeSku"),
								Kind: to.Ptr("Standard"),
								Tier: to.Ptr("Tier1"),
							},
							{
								Name: to.Ptr("premiumSku"),
								Costs: []*armproviderhub.SKUCost{
									{
										MeterID: to.Ptr("xxx"),
									}},
								Kind: to.Ptr("Premium"),
								Tier: to.Ptr("Tier2"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SKUResourceArrayResponseWithContinuation) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SKUResourceArrayResponseWithContinuation)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_ListByResourceTypeRegistrationsNestedResourceTypeFirst.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSKUs_ListByResourceTypeRegistrationsNestedResourceTypeSecond(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_ListByResourceTypeRegistrationsNestedResourceTypeSecond.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Skus_ListByResourceTypeRegistrationsNestedResourceTypeSecond"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewSKUsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	pager := client.ListByResourceTypeRegistrationsNestedResourceTypeSecond("Microsoft.Contoso",
		"testResourceType",
		"nestedResourceTypeFirst",
		"nestedResourceTypeSecond",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_ListByResourceTypeRegistrationsNestedResourceTypeSecond.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armproviderhub.SKUResourceArrayResponseWithContinuation{
			Value: []*armproviderhub.SKUResource{
				{
					Name: to.Ptr("testSku"),
					Properties: &armproviderhub.SKUResourceProperties{
						SKUSettings: []*armproviderhub.SKUSetting{
							{
								Name: to.Ptr("freeSku"),
								Kind: to.Ptr("Standard"),
								Tier: to.Ptr("Tier1"),
							},
							{
								Name: to.Ptr("premiumSku"),
								Costs: []*armproviderhub.SKUCost{
									{
										MeterID: to.Ptr("xxx"),
									}},
								Kind: to.Ptr("Premium"),
								Tier: to.Ptr("Tier2"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SKUResourceArrayResponseWithContinuation) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SKUResourceArrayResponseWithContinuation)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_ListByResourceTypeRegistrationsNestedResourceTypeSecond.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSKUs_ListByResourceTypeRegistrationsNestedResourceTypeThird(t *testing.T) {
	// From example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_ListByResourceTypeRegistrationsNestedResourceTypeThird.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Skus_ListByResourceTypeRegistrationsNestedResourceTypeThird"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armproviderhub.NewSKUsClient("ab7a8701-f7ef-471a-a2f4-d0ebbf494f77", cred, &options)
	pager := client.ListByResourceTypeRegistrationsNestedResourceTypeThird("Microsoft.Contoso",
		"testResourceType",
		"nestedResourceTypeFirst",
		"nestedResourceTypeSecond",
		"nestedResourceTypeThird",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_ListByResourceTypeRegistrationsNestedResourceTypeThird.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armproviderhub.SKUResourceArrayResponseWithContinuation{
			Value: []*armproviderhub.SKUResource{
				{
					Name: to.Ptr("testSku"),
					Properties: &armproviderhub.SKUResourceProperties{
						SKUSettings: []*armproviderhub.SKUSetting{
							{
								Name: to.Ptr("freeSku"),
								Kind: to.Ptr("Standard"),
								Tier: to.Ptr("Tier1"),
							},
							{
								Name: to.Ptr("premiumSku"),
								Costs: []*armproviderhub.SKUCost{
									{
										MeterID: to.Ptr("xxx"),
									}},
								Kind: to.Ptr("Premium"),
								Tier: to.Ptr("Tier2"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SKUResourceArrayResponseWithContinuation) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SKUResourceArrayResponseWithContinuation)
			t.Fatalf("Mock response is not equal to example response for example specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_ListByResourceTypeRegistrationsNestedResourceTypeThird.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
