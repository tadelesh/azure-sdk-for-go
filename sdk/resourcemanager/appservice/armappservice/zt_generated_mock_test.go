//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappservice_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appservice/armappservice"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestAppServiceCertificateOrders_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_ValidatePurchaseInformation(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_ListByResourceGroup(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_Get(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_CreateOrUpdate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_Delete(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_Update(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_ListCertificates(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_GetCertificate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_CreateOrUpdateCertificate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_DeleteCertificate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_UpdateCertificate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_Reissue(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_Renew(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_ResendEmail(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_ResendRequestEmails(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_RetrieveSiteSeal(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_VerifyDomainOwnership(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_RetrieveCertificateActions(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_RetrieveCertificateEmailHistory(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestCertificateOrdersDiagnostics_ListAppServiceCertificateOrderDetectorResponse(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.CertificateRegistration/stable/2021-03-01/examples/Diagnostics_ListAppServiceCertificateOrderDetectorResponse.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List app service certificate detector response"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewCertificateOrdersDiagnosticsClient("5700fc96-77b4-4f8d-afce-c353d8c443bd", cred, &options)
	pager := client.ListAppServiceCertificateOrderDetectorResponse("Sample-WestUSResourceGroup",
		"SampleCertificateOrderName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.CertificateRegistration/stable/2021-03-01/examples/Diagnostics_ListAppServiceCertificateOrderDetectorResponse.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.DetectorResponseCollection{
			Value: []*armappservice.DetectorResponse{
				{
					Name: to.Ptr("CertsImport"),
					Type: to.Ptr("Microsoft.Web/certificateOrders/detectors"),
					ID:   to.Ptr("/subscriptions/5700fc96-77b4-4f8d-afce-c353d8c443bd/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.CertificateRegistration/certificateOrders/SampleCertificateOrderName/detectors/CertsImport"),
					Properties: &armappservice.DetectorResponseProperties{
						Dataset: []*armappservice.DiagnosticData{},
						Metadata: &armappservice.DetectorInfo{
							Name:   to.Ptr("Certificates Import/Upload"),
							Author: to.Ptr(""),
							ID:     to.Ptr("CertsImport"),
						},
						Status: &armappservice.Status{
							StatusID: to.Ptr(armappservice.InsightStatusNone),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DetectorResponseCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DetectorResponseCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.CertificateRegistration/stable/2021-03-01/examples/Diagnostics_ListAppServiceCertificateOrderDetectorResponse.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificateOrdersDiagnostics_GetAppServiceCertificateOrderDetectorResponse(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.CertificateRegistration/stable/2021-03-01/examples/Diagnostics_GetAppServiceCertificateOrderDetectorResponse.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get app service certificate order detector response"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewCertificateOrdersDiagnosticsClient("5700fc96-77b4-4f8d-afce-c353d8c443bd", cred, &options)
	res, err := client.GetAppServiceCertificateOrderDetectorResponse(ctx,
		"Sample-WestUSResourceGroup",
		"SampleCertificateOrderName",
		"AutoRenewStatus",
		&armappservice.CertificateOrdersDiagnosticsClientGetAppServiceCertificateOrderDetectorResponseOptions{StartTime: nil,
			EndTime:   nil,
			TimeGrain: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.CertificateRegistration/stable/2021-03-01/examples/Diagnostics_GetAppServiceCertificateOrderDetectorResponse.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DetectorResponse{
			Name: to.Ptr("AutoRenewStatus"),
			ID:   to.Ptr("/subscriptions/5700fc96-77b4-4f8d-afce-c353d8c443bd/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.CertificateRegistration/certificateOrders/SampleCertificateOrderName/detectors/AutoRenewStatus"),
			Properties: &armappservice.DetectorResponseProperties{
				Dataset: []*armappservice.DiagnosticData{
					{
						RenderingProperties: &armappservice.Rendering{
							Type: to.Ptr(armappservice.RenderingTypeInsights),
						},
						Table: &armappservice.DataTableResponseObject{
							Columns: []*armappservice.DataTableResponseColumn{
								{
									ColumnName: to.Ptr("Status"),
									DataType:   to.Ptr("String"),
								},
								{
									ColumnName: to.Ptr("Message"),
									DataType:   to.Ptr("String"),
								},
								{
									ColumnName: to.Ptr("Data.Name"),
									DataType:   to.Ptr("String"),
								},
								{
									ColumnName: to.Ptr("Data.Value"),
									DataType:   to.Ptr("String"),
								},
								{
									ColumnName: to.Ptr("Expanded"),
									DataType:   to.Ptr("String"),
								},
								{
									ColumnName: to.Ptr("Solutions"),
									DataType:   to.Ptr("String"),
								}},
							Rows: [][]*string{
								{
									to.Ptr("Info"),
									to.Ptr("App Service Certificate name SampleCertificateOrderName"),
									to.Ptr("Certificate for"),
									to.Ptr("<b>*.mysampledomain.com</b>"),
									to.Ptr("False"),
									to.Ptr("null")},
								{
									to.Ptr("Info"),
									to.Ptr("App Service Certificate name SampleCertificateOrderName"),
									to.Ptr("Certificate Status"),
									to.Ptr("<b>Issued</b>"),
									to.Ptr("False"),
									to.Ptr("null")}},
							TableName: to.Ptr(""),
						},
					}},
				Metadata: &armappservice.DetectorInfo{
					Name:             to.Ptr("AutoRenewStatus"),
					Type:             to.Ptr(armappservice.DetectorTypeDetector),
					Description:      to.Ptr("Check auto renew status"),
					ID:               to.Ptr("AutoRenewStatus"),
					Score:            to.Ptr[float32](0),
					SupportTopicList: []*armappservice.SupportTopic{},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DetectorResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DetectorResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.CertificateRegistration/stable/2021-03-01/examples/Diagnostics_GetAppServiceCertificateOrderDetectorResponse.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificateRegistrationProvider_ListOperations(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.CertificateRegistration/stable/2021-03-01/examples/ListOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewCertificateRegistrationProviderClient(cred, &options)
	pager := client.ListOperations(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.CertificateRegistration/stable/2021-03-01/examples/ListOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.CsmOperationCollection{
			Value: []*armappservice.CsmOperationDescription{
				{
					Name: to.Ptr("Microsoft.CertificateRegistration/certificateOrders/certificates/Write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Add a new certificate or update an existing one"),
						Operation:   to.Ptr("Add or Update Certificate"),
						Provider:    to.Ptr("Microsoft Certificates"),
						Resource:    to.Ptr("Certificate"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CertificateRegistration/certificateOrders/Write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Add a new certificateOrder or update an existing one"),
						Operation:   to.Ptr("Add or Update AppServiceCertificate"),
						Provider:    to.Ptr("Microsoft Certificates"),
						Resource:    to.Ptr("AppServiceCertificate"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CertificateRegistration/certificateOrders/certificates/Delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete an existing certificate"),
						Operation:   to.Ptr("Delete Certificate"),
						Provider:    to.Ptr("Microsoft Certificates"),
						Resource:    to.Ptr("Certificate"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CertificateRegistration/certificateOrders/Delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete an existing AppServiceCertificate"),
						Operation:   to.Ptr("Delete AppServiceCertificate"),
						Provider:    to.Ptr("Microsoft Certificates"),
						Resource:    to.Ptr("AppServiceCertificate"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CertificateRegistration/certificateOrders/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get the list of CertificateOrders"),
						Operation:   to.Ptr("Get CertificateOrders"),
						Provider:    to.Ptr("Microsoft Certificates"),
						Resource:    to.Ptr("AppServiceCertificate"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CertificateRegistration/certificateOrders/certificates/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get the list of certificates"),
						Operation:   to.Ptr("Get Certificates"),
						Provider:    to.Ptr("Microsoft Certificates"),
						Resource:    to.Ptr("Certificate"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CertificateRegistration/certificateOrders/reissue/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Reissue an existing certificateorder"),
						Operation:   to.Ptr("Reissue certificateorder"),
						Provider:    to.Ptr("Microsoft Certificates"),
						Resource:    to.Ptr("AppServiceCertificate"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CertificateRegistration/certificateOrders/renew/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Renew an existing certificateorder"),
						Operation:   to.Ptr("Renew certificateorder"),
						Provider:    to.Ptr("Microsoft Certificates"),
						Resource:    to.Ptr("AppServiceCertificate"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CertificateRegistration/certificateOrders/retrieveCertificateActions/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Retrieve the list of certificate actions"),
						Operation:   to.Ptr("Certificateorder actions"),
						Provider:    to.Ptr("Microsoft Certificates"),
						Resource:    to.Ptr("AppServiceCertificate"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CertificateRegistration/certificateOrders/retrieveEmailHistory/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Retrieve certificate email history"),
						Operation:   to.Ptr("Certificateorder email history"),
						Provider:    to.Ptr("Microsoft Certificates"),
						Resource:    to.Ptr("AppServiceCertificate"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CertificateRegistration/certificateOrders/resendEmail/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Resend certificate email"),
						Operation:   to.Ptr("Resend Certificateorder email"),
						Provider:    to.Ptr("Microsoft Certificates"),
						Resource:    to.Ptr("AppServiceCertificate"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CertificateRegistration/certificateOrders/verifyDomainOwnership/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Verify domain ownership"),
						Operation:   to.Ptr("Verify domain ownership"),
						Provider:    to.Ptr("Microsoft Certificates"),
						Resource:    to.Ptr("AppServiceCertificate"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CertificateRegistration/certificateOrders/resendRequestEmails/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Resend request emails to another email address"),
						Operation:   to.Ptr("Resend request emails to another email address"),
						Provider:    to.Ptr("Microsoft Certificates"),
						Resource:    to.Ptr("AppServiceCertificate"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CertificateRegistration/certificateOrders/resendRequestEmails/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Retrieve site seal for an issued App Service Certificate"),
						Operation:   to.Ptr("Retrieve site seal for an issued App Service Certificate"),
						Provider:    to.Ptr("Microsoft Certificates"),
						Resource:    to.Ptr("AppServiceCertificate"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CertificateRegistration/provisionGlobalAppServicePrincipalInUserTenant/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Provision service principal for service app principal"),
						Operation:   to.Ptr("Provision service principal"),
						Provider:    to.Ptr("Microsoft Certificates"),
						Resource:    to.Ptr("AppServiceCertificate"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CertificateRegistration/validateCertificateRegistrationInformation/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Validate certificate purchase object without submitting it"),
						Operation:   to.Ptr("Certificate Purchase Info Validation"),
						Provider:    to.Ptr("Microsoft Certificates"),
						Resource:    to.Ptr("AppServiceCertificate"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.CertificateRegistration/register/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Register the Microsoft Certificates resource provider for the subscription"),
						Operation:   to.Ptr("Register Microsoft Certificates resource provider"),
						Provider:    to.Ptr("Microsoft Certificates"),
						Resource:    to.Ptr("Microsoft Certificates resource provider"),
					},
					Origin: to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CsmOperationCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CsmOperationCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.CertificateRegistration/stable/2021-03-01/examples/ListOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDomains_CheckAvailability(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_GetControlCenterSsoRequest(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_ListRecommendations(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_ListByResourceGroup(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_Get(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_CreateOrUpdate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_Delete(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_Update(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_ListOwnershipIdentifiers(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_GetOwnershipIdentifier(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_CreateOrUpdateOwnershipIdentifier(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_DeleteOwnershipIdentifier(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_UpdateOwnershipIdentifier(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_Renew(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.DomainRegistration/stable/2021-03-01/examples/RenewDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Renew an existing domain"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDomainsClient("3dddfa4f-cedf-4dc0-ba29-b6d1a69ab545", cred, &options)
	_, err := client.Renew(ctx,
		"RG",
		"example.com",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.DomainRegistration/stable/2021-03-01/examples/RenewDomain.json: %v", err)
	}
}

func TestDomains_TransferOut(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.DomainRegistration/stable/2021-03-01/examples/TransferOutDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Transfer out domain"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDomainsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.TransferOut(ctx,
		"testrg123",
		"example.com",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.DomainRegistration/stable/2021-03-01/examples/TransferOutDomain.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.Domain{
			Name:     to.Ptr("example.com"),
			Type:     to.Ptr("Microsoft.DomainRegistration/domains"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.DomainRegistration/domains/example.com"),
			Location: to.Ptr("global"),
			Tags:     map[string]*string{},
			Properties: &armappservice.DomainProperties{
				AuthCode:    to.Ptr("exampleAuthCode"),
				AutoRenew:   to.Ptr(true),
				CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-10T19:30:53Z"); return t }()),
				DNSType:     to.Ptr(armappservice.DNSTypeDefaultDomainRegistrarDNS),
				DomainNotRenewableReasons: []*armappservice.DomainPropertiesDomainNotRenewableReasonsItem{
					to.Ptr(armappservice.DomainPropertiesDomainNotRenewableReasonsItemExpirationNotInRenewalTimeRange)},
				ExpirationTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-09-10T19:30:53Z"); return t }()),
				ManagedHostNames: []*armappservice.HostName{},
				NameServers: []*string{
					to.Ptr("ns01.ote.domaincontrol.com"),
					to.Ptr("ns02.ote.domaincontrol.com")},
				Privacy:                     to.Ptr(false),
				ProvisioningState:           to.Ptr(armappservice.ProvisioningStateSucceeded),
				ReadyForDNSRecordManagement: to.Ptr(true),
				RegistrationStatus:          to.Ptr(armappservice.DomainStatusActive),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Domain) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Domain)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.DomainRegistration/stable/2021-03-01/examples/TransferOutDomain.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTopLevelDomains_List(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.DomainRegistration/stable/2021-03-01/examples/ListTopLevelDomains.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Top Level Domains"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewTopLevelDomainsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.DomainRegistration/stable/2021-03-01/examples/ListTopLevelDomains.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.TopLevelDomainCollection{
			Value: []*armappservice.TopLevelDomain{
				{
					Name: to.Ptr("com"),
					Type: to.Ptr("Microsoft.DomainRegistration/topLevelDomains"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/providers/Microsoft.DomainRegistration/topLevelDomains/com"),
					Properties: &armappservice.TopLevelDomainProperties{
						Privacy: to.Ptr(true),
					},
				},
				{
					Name: to.Ptr("net"),
					Type: to.Ptr("Microsoft.DomainRegistration/topLevelDomains"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/providers/Microsoft.DomainRegistration/topLevelDomains/net"),
					Properties: &armappservice.TopLevelDomainProperties{
						Privacy: to.Ptr(true),
					},
				},
				{
					Name: to.Ptr("co.uk"),
					Type: to.Ptr("Microsoft.DomainRegistration/topLevelDomains"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/providers/Microsoft.DomainRegistration/topLevelDomains/co.uk"),
					Properties: &armappservice.TopLevelDomainProperties{
						Privacy: to.Ptr(false),
					},
				},
				{
					Name: to.Ptr("org"),
					Type: to.Ptr("Microsoft.DomainRegistration/topLevelDomains"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/providers/Microsoft.DomainRegistration/topLevelDomains/org"),
					Properties: &armappservice.TopLevelDomainProperties{
						Privacy: to.Ptr(true),
					},
				},
				{
					Name: to.Ptr("nl"),
					Type: to.Ptr("Microsoft.DomainRegistration/topLevelDomains"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/providers/Microsoft.DomainRegistration/topLevelDomains/nl"),
					Properties: &armappservice.TopLevelDomainProperties{
						Privacy: to.Ptr(true),
					},
				},
				{
					Name: to.Ptr("in"),
					Type: to.Ptr("Microsoft.DomainRegistration/topLevelDomains"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/providers/Microsoft.DomainRegistration/topLevelDomains/in"),
					Properties: &armappservice.TopLevelDomainProperties{
						Privacy: to.Ptr(false),
					},
				},
				{
					Name: to.Ptr("biz"),
					Type: to.Ptr("Microsoft.DomainRegistration/topLevelDomains"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/providers/Microsoft.DomainRegistration/topLevelDomains/biz"),
					Properties: &armappservice.TopLevelDomainProperties{
						Privacy: to.Ptr(true),
					},
				},
				{
					Name: to.Ptr("org.uk"),
					Type: to.Ptr("Microsoft.DomainRegistration/topLevelDomains"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/providers/Microsoft.DomainRegistration/topLevelDomains/org.uk"),
					Properties: &armappservice.TopLevelDomainProperties{
						Privacy: to.Ptr(false),
					},
				},
				{
					Name: to.Ptr("co.in"),
					Type: to.Ptr("Microsoft.DomainRegistration/topLevelDomains"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/providers/Microsoft.DomainRegistration/topLevelDomains/co.in"),
					Properties: &armappservice.TopLevelDomainProperties{
						Privacy: to.Ptr(false),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TopLevelDomainCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TopLevelDomainCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.DomainRegistration/stable/2021-03-01/examples/ListTopLevelDomains.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTopLevelDomains_Get(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.DomainRegistration/stable/2021-03-01/examples/GetTopLevelDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Top Level Domain"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewTopLevelDomainsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"com",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.DomainRegistration/stable/2021-03-01/examples/GetTopLevelDomain.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.TopLevelDomain{
			Name: to.Ptr("com"),
			Type: to.Ptr("Microsoft.DomainRegistration/topLevelDomains"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/providers/Microsoft.DomainRegistration/topLevelDomains/com"),
			Properties: &armappservice.TopLevelDomainProperties{
				Privacy: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TopLevelDomain) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TopLevelDomain)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.DomainRegistration/stable/2021-03-01/examples/GetTopLevelDomain.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTopLevelDomains_ListAgreements(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.DomainRegistration/stable/2021-03-01/examples/ListTopLevelDomainAgreements.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Top Level Domain Agreements"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewTopLevelDomainsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListAgreements("in",
		armappservice.TopLevelDomainAgreementOption{
			ForTransfer:    to.Ptr(false),
			IncludePrivacy: to.Ptr(true),
		},
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.DomainRegistration/stable/2021-03-01/examples/ListTopLevelDomainAgreements.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.TldLegalAgreementCollection{
			Value: []*armappservice.TldLegalAgreement{
				{
					AgreementKey: to.Ptr("DNRA"),
					Content:      to.Ptr("<table width=\"100%\">\n<tbody>\n<tr><td width=\"100\"></td><td></td></tr>\n<tr><td></td><td>\n<table>\n<tbody>\n<tr><th align=\"left\" class=\"EULATitle\">\nDomain Name Registration Agreement\n</th></tr>\n<tr><td class=\"bodyText\">\n<p><strong>Last Revised: October 6, 2017</strong></p>\n<p style=\"text-align: justify;\"><strong>PLEASE READ THIS AGREEMENT CAREFULLY, AS IT CONTAINS IMPORTANT INFORMATION REGARDING YOUR LEGAL RIGHTS AND REMEDIES.</strong></p>\r\n<p style=\"text-align: justify;\"><strong>1. OVERVIEW</strong></p>\r\n<p style=\"text-align: justify;\">This Domain Name Registration Agreement (this \"<span style=\"text-decoration: underline;\">Agreement</span>\") is entered into by and between 510456, an individual (\"<span style=\"text-decoration: underline;\">Azure</span>\") and you, and is made effective as of the date of electronic acceptance.&nbsp; This Agreement sets forth the terms and conditions of your use of Azure's Domain Name Registration services (the \"<span style=\"text-decoration: underline;\">Domain Name Registration Services</span>\" or the \"<span style=\"text-decoration: underline;\">Services</span>\").&nbsp;The terms \"we\", \"us\" or \"our\" shall refer to Azure.&nbsp; The terms \"you\", \"your\", \"User\" or \"customer\" shall refer to any individual or entity who accepts this Agreement.&nbsp; Unless otherwise specified, nothing in this Agreement shall be deemed to confer any third-party rights or benefits.</p>\r\n<p style=\"text-align: justify;\">Your electronic acceptance of this Agreement signifies that you have read, understand, acknowledge and agree to be bound by this Agreement, which incorporates by reference each of&nbsp;(i) Azure&rsquo;s&nbsp;<a href=\"http://www.securepaynet.net/agreements/ShowDoc.aspx?pageid=utos&amp;prog_id=510456\" target=\"_blank\">Universal Terms of Service Agreement</a> (\"<span style=\"text-decoration: underline;\">UTOS</span>\"),&nbsp;(ii) all agreements, guidelines, policies, practices, procedures, registration requirements or operational standards of the top-level domain (\"<span style=\"text-decoration: underline;\">TLD</span>\")&nbsp;in which you register any domain (&ldquo;<span style=\"text-decoration: underline;\">Registry Policies</span>&rdquo;),&nbsp;and (iii) any plan limits, product disclaimers or other restrictions presented to you on the Domain Name Registration Services landing page of the Azure website (this &ldquo;<span style=\"text-decoration: underline;\">Site</span>&rdquo;).&nbsp;</p>\r\n<p style=\"text-align: justify;\"><strong>TO&nbsp;LINK TO AND REVIEW THE REGISTRY POLICIES FOR THE TLD IN WHICH YOU WISH TO REGISTER A DOMAIN NAME, PLEASE CLICK&nbsp;<span style=\"text-decoration: underline;\"><a href=\"http://www.securepaynet.net/agreements/ShowDoc.aspx?pageid=20012&amp;prog_id=510456\" target=\"_blank\">HERE</a></span>.&nbsp;</strong>&nbsp;&nbsp;&nbsp;</p>\r\n<p style=\"text-align: justify;\">You acknowledge and agree that (i) Azure, in its sole and absolute discretion, may change or modify this Agreement, and any policies or agreements which are incorporated herein, at any time, and such changes or modifications shall be effective immediately upon posting to this Site, and (ii) your use of this Site or the Services found at this Site after such changes or modifications have been made&nbsp;shall constitute your acceptance of this Agreement as last revised.&nbsp; If you do not agree to be bound by this Agreement as last revised, do not use (or continue to use) this Site or the Services found at this Site.&nbsp; In addition, Azure may occasionally notify you of changes or modifications to this Agreement by email.&nbsp; It is therefore very important that you keep your shopper account (&ldquo;<span style=\"text-decoration: underline;\">Shopper Account</span>&rdquo;) information, including your email address, current.&nbsp; Azure assumes no liability or responsibility for your failure to receive an email notification if such failure results from an inaccurate or out-of-date email address.&nbsp; &nbsp;  Azure is not an Internet Corporation for Assigned Names and Numbers (\"<span style=\"text-decoration: underline;\">ICANN</span>\") accredited registrar; it is an authorized reseller of domain name registration services.&nbsp; Accordingly, you acknowledge and agree that Azure may modify this Agreement in order to comply with any terms and conditions set forth by (i) the sponsoring registrar, (ii) ICANN, and/or (iii) the registry applicable to the&nbsp;TLD or country code top level domain (\"<span style=\"text-decoration: underline;\">ccTLD</span>\") in question. &nbsp;As used herein, the terms \"registry\", \"Registry\", \"registry operator\" or \"Registry Operator\" shall refer to the registry applicable to the TLD or ccTLD in question.&nbsp; To identify the sponsoring registrar, click&nbsp;<a href=\"http://www.internic.net/whois.html\" target=\"_blank\">here</a>.&nbsp; </p>\r\n<p style=\"text-align: justify;\"><strong>2. PROVISIONS SPECIFIC TO ALL REGISTRATIONS</strong></p>\r\n<p style=\"text-align: justify;\"><strong><em>Unless otherwise noted, the provisions below in this Section 2 are generally applicable to all TLDs that we offer.&nbsp; Special provisions specific to any TLD or ccTLD (those in addition to posted Registry Policies) are identified elsewhere below in this Agreement.&nbsp;</em></strong></p>\r\n<ol>\r\n<li>\r\n<div style=\"text-align: justify;\"><em><span style=\"text-decoration: underline;\">Registry Policies</span></em>. You agree to be bound by all Registry Policies (defined above in this Agreement) applicable to your domain name registration (at any level).<strong>&nbsp;IT IS YOUR RESPONSIBILITY TO VISIT THE APPLICABLE TLD SITE AND READ AND REVIEW ALL APPLICABLE REGISTRY POLICIES PRIOR TO YOUR REGISTRATION IN THE TLD.&nbsp; REGISTRY POLICIES FOR EACH TLD CAN BE FOUND BY VISITING THE CORRESPONDING TLD LINK LISTED&nbsp;</strong><a href=\"http://www.securepaynet.net/agreements/ShowDoc.aspx?pageid=20012&amp;prog_id=510456\" target=\"_blank\">HERE</a>.&nbsp;&nbsp;Notwithstanding anything in this Agreement to the contrary, the Registry Operator of the TLD in which the domain name registration is made is and shall be an intended third party beneficiary of this Agreement. As such the parties to this agreement acknowledge and agree that the third party beneficiary rights of the Registry Operator have vested and that the Registry Operator has relied on its third party beneficiary rights under this Agreement in agreeing to Azure being a registrar for the respective TLD. The third party beneficiary rights of the Registry Operator will survive any termination of this Agreement.&nbsp;&nbsp;&nbsp;&nbsp;</div>\r\n</li>\r\n<li>\r\n<div style=\"text-align: justify;\"><em><span style=\"text-decoration: underline;\">Registration Requirements</span></em>.&nbsp; To the extent any TLD or ccTLD requires you meet eligibility (e.g., residency for .JP, .EU, etc.), validation (e.g., DNS validation) or other authentication requirements as a condition to registering a domain name in the TLD, you agree that by submitting an application or registering or renewing your domain name, you represent and warrant that: (a) all information provided to register or renew the domain name (including all supporting documents, if any) is true, complete and correct, and is not misleading in any way, and the application is made in good faith; (b) you meet, and will continue to meet, the eligibility criteria prescribed in the Registry Policies for the applicable TLD for the duration of the domain name registration; (c) you have not previously submitted an application for the domain name with another registrar using the same eligibility criteria, and the other registrar has rejected the application (if applicable); (d) you acknowledge and agree that even if the domain name is accepted for registration, your entitlement to register the domain name may be challenged by others who claim to have an entitlement to the domain name; and (e) you acknowledge and agree that the Registry or the registrar can cancel the registration of the domain name if any of the warranties required are found to be untrue, incomplete, incorrect or misleading.</div>\r\n</li>\r\n<li>\r\n<div style=\"text-align: justify;\"><em><span style=\"text-decoration: underline;\">Ownership</span></em>.&nbsp; You acknowledge and agree that registration of a domain name does not create any proprietary right for you, the registrar, or any other person in the name used as a domain name or the domain name registration and that the entry of a domain name in the Registry shall not be construed as evidence or ownership of the domain name registered as a domain name. You shall not in any way transfer or purport to transfer a proprietary right in any domain name registration or grant or purport to grant as security or in any other manner encumber or purport to encumber a domain name registration.</div>\r\n</li>\r\n<li>\r\n<div style=\"text-align: justify;\"><em><span style=\"text-decoration: underline;\">ICANN Requirements</span></em>. You agree to comply with the ICANN requirements, standards, policies, procedures, and practices for which each applicable Registry Operator has monitoring responsibility in accordance with the Registry Agreement between ICANN and itself or any other arrangement with ICANN.</div>\r\n</li>\r\n<li>\r\n<div style=\"text-align: justify;\"><em><span style=\"text-decoration: underline;\">Indemnification of Registry</span></em>.&nbsp; You agree to indemnify, defend and hold harmless (within 30 days of demand) the Registry Operator and Registry Service Provider and their subcontractors, subsidiaries, affiliates, divisions, shareholders, directors, officers, employees, accountants, attorneys, insurers, agents, predecessors, successors and assigns, from and against any and all claims, demands, damages, losses, costs, expenses, causes of action or other liabilities of any kind, whether known or unknown, including reasonable legal and attorney&rsquo;s fees and expenses, in any way arising out of, relating to, or otherwise in connection with the your domain name registration, including, without limitation, the use, registration, extension, renewal, deletion, and/or transfer thereof and/or the violation of any applicable terms or conditions governing the registration. You shall not enter into any settlement or compromise of any such indemnifiable claim without Registrar&rsquo;s or Registry Operator&rsquo;s prior written consent, which consent shall not be unreasonably withheld, and you agree that these indemnification obligations shall survive the termination or expiration of the Agreement for any reason.&nbsp; IN NO EVENT SHALL THE REGISTRY OPERATOR BE LIABLE TO YOU OR ANY OTHER PERSON FOR ANY DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL, EXEMPLARY OR PUNITIVE DAMAGES, INCLUDING LOSS OF PROFIT OR GOODWILL, FOR ANY MATTER, WHETHER SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT (INCLUDING NEGLIGENCE), BREACH OF WARRANTIES, EITHER EXPRESS OR IMPLIED, ANY BREACH OF THIS AGREEMENT OR ITS INCORPORATED AGREEMENTS AND POLICIES YOUR INABILITY TO USE THE DOMAIN NAME, YOUR LOSS OF DATA OR FILES OR OTHERWISE, EVEN IF THE REGISTRY OPERATOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</div>\r\n</li>\r\n<li>\r\n<div style=\"text-align: justify;\"><em><span style=\"text-decoration: underline;\">Regulated TLDs</span></em>.&nbsp;&nbsp; For domain name registration in any &ldquo;Regulated&rdquo; TLD, you acknowledge and agree your registration is subject to the following additional requirements: (a) comply with all applicable laws, including those that relate to privacy, data collection, consumer protection (including in relation to misleading and deceptive conduct), fair lending, debt collection, organic farming, disclosure of data, and financial disclosures; (b) if you collect and maintain sensitive health and financial data you must implement reasonable and appropriate security measures commensurate with the offering of those services, as defined by applicable law.&nbsp; Regulated TLDs include: <strong><em>.games, .juegos, .school, .schule, .toys, .eco, .care, .diet, .fitness, .health, .clinic, .dental, .healthcare, .capital, .cash, .broker, .claims, .exchange, .finance, .financial, .fund, .investments, .lease, .loans, .market, .money, .trading, .credit, .insure, .tax, .mortgage, .degree, .mba, .audio, .book, .broadway, .film, .movie, .music, .software, .fashion, .video, .app, .art, .band, .cloud, .data, .digital, .fan, .free, .gratis, .discount, .sale, .media, .news, .online, .pictures, .radio, .show, .theater, .tours, .accountants, .architect, .associates, .broker, .legal, .realty, .vet, .engineering, .law, .limited, .show; .theater; .town, .city, .reise, and .reisen</em></strong></div>\r\n</li>\r\n<li>\r\n<div style=\"text-align: justify;\"><em><span style=\"text-decoration: underline;\">Highly Regulated TLDs</span></em>. In addition to the requirements for Regulated TLDs, domain name registration in any Highly-Regulated TLD is subject to the following requirements: (a) you will provide administrative contact information, which must be kept up&#8208;to&#8208;date, for the notification of complaints or reports of registration abuse, as well as the contact details of the relevant regulatory, or Industry self&#8208;regulatory, bodies in their main place of business; (b) you represent that you possess any necessary authorizations, charters, licenses and/or other related credentials for participation in the sector associated with such Highly&#8208;regulated TLD; and (c) you will report any material changes to the validity of you authorizations, charters, licenses and/or other related credentials for participation in the sector associated with the Highly&#8208;regulated TLD to ensure you continue to conform to the appropriate regulations and licensing requirements and generally conduct your activities in the interests of the consumers they serve.&nbsp; Highly Regulated TLDs include: <strong><strong><em>.abogado, .attorney, .bank, .bet, .bingo, .casino .charity (and IDN equivalent xn--30rr7y), .cpa, .corp, creditcard, .creditunion .dds, .dentist, .doctor, .fail, .gmbh, .gripe, .hospital, .inc, .insurance, .lawyer, .lifeinsurance, .llc, .llp, .ltda, .medical, .mutuelle, .pharmacy, .poker, .university, .sarl, .spreadbetting, .srl, .sucks, .surgery .university, .vermogensberater, .vesicherung,&nbsp; and .wtf.&nbsp; </em></strong></strong><em><span style=\"background: white; color: black; font-family: 'Arial',sans-serif; font-size: 10pt; font-style: normal;\">For .doctor, registrants who hold themselves out to be licensed medical practitioners must be able to demonstrate to the Registrar and Registry, upon request, that they hold the applicable license.</span></em></div>\r\n</li>\r\n<li>\r\n<div style=\"text-align: justify;\"><em><span style=\"text-decoration: underline;\">Special Safeguard TLDs</span></em>.&nbsp; In addition to the requirements for Regulated and Highly-Regulated TLDs, by registering a domain name in any &ldquo;Special-Safeguard&rdquo; TLD, you agree to take reasonable steps to avoid misrepresenting or falsely implying that you or your business is affiliated with, sponsored or endorsed by one or more country's or government's military forces if such affiliation, sponsorship or endorsement does not exist.&nbsp; Special Safeguard TLDs include:&nbsp; <strong><em>.army, .navy, .airforce</em></strong></div>\r\n</li>\r\n<li>\r\n<div style=\"text-align: justify;\"><em><span style=\"text-decoration: underline;\">Third Party Beneficiary</span></em>.&nbsp; Notwithstanding anything in this Agreement to the contrary, the Registry Operator for any TLD in which your register a domain name is and shall be an intended third party beneficiary of this Agreement. As such the parties to this agreement acknowledge and agree that the third party beneficiary rights of the Registry Operator have vested and that the Registry Operator has relied on its third party beneficiary rights under this Agreement in agreeing to Azure being a registrar for the TLD. Third party beneficiary rights of the Registry Operator shall survive any termination of this Agreement.</div>\r\n</li>\r\n<li>\r\n<div style=\"text-align: justify;\"><em><span style=\"text-decoration: underline;\">Variable and Non-Uniform Pricing</span></em>.&nbsp; You acknowledge, understand and agree that certain domain names in certain TLDs are established by Registry Policies to be variably priced (i.e., standard v. premium names) and/or may have non-uniform renewal registration pricing (such that the Fee for a domain name registration renewal may differ from other domain names in the same TLD, e.g., renewal registration for one domain may be $100.00 and $33.00 for a different domain name).</div>\r\n</li>\r\n<li>\r\n<div style=\"text-align: justify;\"><em><span style=\"text-decoration: underline;\">Restriction on Availability of Privacy or Proxy</span></em>.&nbsp; You acknowledge and agree that, as dictated by the Registry Policies, for certain TLDs you may not be permitted to purchase private or proxy TLD registrations. In such case, you must register for any and all TLD registrations using your personal information, which information you represent and warrant is current, accurate and complete.</div>\r\n</li>\r\n</ol>\r\n<p style=\"text-align: justify;\"><strong>3. FEES AND PAYMENTS</strong></p>\r\n<p style=\"text-align: justify;\"><strong><em>(A) GENERAL TERMS, INCLUDING AUTOMATIC RENEWAL TERMS</em></strong></p>\r\n<p style=\"text-align: justify;\">You agree to pay any and all prices and fees due for Services purchased or obtained at this Site at the time you order the Services.&nbsp; Azure expressly reserves the right to change or modify its prices and fees at any time, and such changes or modifications shall be posted online at this Site and effective immediately without need for further notice to you.&nbsp; If you have purchased or obtained Services for a period of months or years, changes or modifications in prices and fees shall be effective when the Services in question come up for renewal as further described below.&nbsp;</p>\r\n<p style=\"text-align: justify;\">Unless otherwise specifically noted (for reasons such as those highlighted&nbsp;in Section 2(x) above), the renewal price for any domain name in any TLD will be the same as the list (non-sale) price shown when you search for and select a domain, and again in the cart prior to purchase.&nbsp; For example, if the list price is $9.99, and a different renewal price is not specifically identified, then the renewal price is also $9.99<strong></strong>.&nbsp; Likewise, if a domain name has a&nbsp;sale price of $8.99, with the list&nbsp;(non-sale) price&nbsp;shown (as a strike-through)&nbsp;at $9.99, the renewal price will be&nbsp;$9.99<strong>*</strong>.&nbsp;&nbsp;</p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: xx-small;\"><em><strong>*Renewal price&nbsp;subject to change prior to actual date of renewal.&nbsp; </strong></em></span></p>\r\n<p style=\"text-align: justify;\">For all other terms and conditions relating to&nbsp;fees, payment, refund and billing, etc. applicable to the Services offered under the scope of this Agreement, please refer to the &ldquo;Fees and Payments&rdquo; section of our&nbsp;<a href=\"http://www.securepaynet.net/agreements/ShowDoc.aspx?pageid=utos&amp;prog_id=510456\" target=\"_blank\"><span style=\"text-decoration: underline;\"><span style=\"color: #0066cc;\">UTOS</span></span></a>.&nbsp;</p>\r\n<p style=\"text-align: justify;\"><strong><em>(B) DOMAIN NAME RENEWAL TERMS</em></strong></p>\r\n<p style=\"text-align: justify;\">When you register a domain name, you will have two&nbsp;renewal options: (i) \"<span style=\"text-decoration: underline;\">Automatic Renewal</span>\"&nbsp;(ii) \"<span style=\"text-decoration: underline;\">Extended Automatic Renewal</span>\", and (iii) \"<span style=\"text-decoration: underline;\">Manual Renewal</span>\":&nbsp;</p>\r\n<ol style=\"text-align: justify;\">\r\n<li><span style=\"text-decoration: underline;\">Automatic Renewal</span>.&nbsp; Automatic Renewal is the default setting. Therefore, unless you select&nbsp;Extended Automatic Renewal, Azure will enroll you in&nbsp;Automatic Renewal.&nbsp;&nbsp;Domain names will automatically renew, for a period equivalent to the length of your original domain name registration, any domain name that is up for renewal and will take payment from the Payment Method you have on file with Azure, at Azure's then current rates. Thus, if you have chosen to register your domain name for one (1) year, Azure will automatically renew it for one (1) year. If you have chosen to register your domain name for two (2) years, Azure will automatically renew it for two (2) years, and so on.</li>\r\n<li><span style=\"text-decoration: underline;\">Extended Automatic Renewal</span>.&nbsp; If you enroll in the Extended Automatic Renewal plan, Azure will automatically renew any domain name that is up for renewal for an additional one-year period on each and every anniversary of your domain name registration, so the initial registration period will always remain intact.&nbsp; Thus, if you have chosen to register your domain name for two (2) years, Azure will automatically renew it for one (1) additional year on each and every anniversary of your domain name registration so your two (2) year registration period will always remain intact. If you have chosen to register your domain name for five (5) years, Azure will automatically renew it for one (1) additional year on each and every anniversary of your domain name registration so your five (5) year registration period will always remain intact, and so on.&nbsp; Azure will take payment from the Payment Method you have on file with Azure, at Azure's then current one-year domain name registration rate.</li>\r\n<li><span style=\"text-decoration: underline;\">Manual Renewal</span>.&nbsp; If you have elected to turn off automatic renewal and cancel the product (i.e., cancel&nbsp;the domain name registration) effective at expiration of the then current term, you may nonetheless elect to manually renew the domain name at anytime prior to its&nbsp;expiration date&nbsp;by&nbsp;logging into&nbsp;your <a href=\"https://www.securepaynet.net/gdshop/shopper_lookup.asp?prog_id=510456\" target=\"_blank\">Account Manager</a>&nbsp;and manually implementing the renewal or by calling customer service (should you in fact want the domain name to be renewed). If you fail to manually implement the renewal before the expiration date, the domain name will be cancelled and you will no longer have use of that name.</li>\r\n</ol>\r\n<p style=\"text-align: justify;\">All renewals will be subject to the terms of this Agreement, as it may be amended from time to time, and you acknowledge and agree to be bound by the terms of this Agreement (as amended) for all renewed domains.&nbsp; Domain name renewals will be non-refundable. <span style=\"color: #5b9bd5; font-family: 'Arial',sans-serif; font-size: 10pt; mso-fareast-font-family: Calibri; mso-fareast-theme-font: minor-latin; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA; mso-themecolor: accent1;\"><span style=\"color: #000000;\">In the event that we are unable to automatically renew your domain name for the renewal option selected for any reason, we may automatically renew your domain name for a period less than your original registration period to the extent necessary for the transaction to succeed.</span> </span>If for any reason Azure is not able to take the payment from the Payment Method you have on file, and you fail to respond to our notices, your domain name registration will expire. It is your responsibility to keep your Payment Method information current, which includes the expiration date if you are using a credit card.</p>\r\n<p style=\"text-align: justify;\">For certain ccTLDs (.am, .at, .be, .br, .ca, .cn, .com.cn, .net.cn, .org.cn, .de, .eu, .fm, .gs, .it, .jp, .ms, .nu, .nz, .co.nz, .net.nz, .org.nz, .tc, .tk, .tw, .com.tw, .org.tw, .idv.tw, .uk,&nbsp;and .vg), renewal billing will occur on the first day of the month prior to the month of expiration.</p>\r\n<p style=\"text-align: justify;\">For certain ccTLDs (.am, .at, .be, .ca, .cn, .com.cn, .net.cn, .org.cn, .de, .eu, .fm, .gs, .it, .jp, .ms, .nu, .nz, .co.nz, .net.nz, .org.nz, .tc, .tk, .tw, .com.tw, .org.tw, .idv.tw, .uk,&nbsp;and .vg),&nbsp;renewal will occur, or must occur manually if the product was previously cancelled, no later than the 20th of the month prior to the expiration date, or your domain name will be placed in non-renewal status. For some ccTLDs (.es) renewal&nbsp;must be processed&nbsp;no later than seven days before the expiration date, or your domain name will be placed in non-renewal status.&nbsp; When the domain name is in non-renewal status, you can renew the domain name only by calling Azure and requesting that the domain name be renewed. You cannot renew the domain name through your <a href=\"https://www.securepaynet.net/gdshop/shopper_lookup.asp?prog_id=510456\" target=\"_blank\">Account Manager</a>. If you fail to manually implement the renewal of any cancelled product before the expiration date, the domain name will be cancelled and you will no longer have use of that name.</p>\r\n<p style=\"text-align: justify;\">You agree that Azure will not be responsible for cancelled domain names that you fail to renew in the timeframes indicated in this Agreement. In any case, if you fail to renew your domain name in a timely fashion, additional charges may apply. If you signed up for privacy services, protected registration, or any other similar service, with your domain name registration, these services will automatically be renewed when your domain name registration is up for renewal, and you will incur the applicable additional renewal fee unless you cancel in advance.&nbsp;</p>\r\n<p style=\"text-align: justify;\">If you fail to renew your domain name in the timeframes indicated in this Agreement, you agree that Azure may, in its sole discretion, renew your expired domain name on your behalf. If Azure decides to renew your expired domain name on your behalf, you will have a Renewal Grace Period during which you may reimburse Azure for the renewal and keep your domain name. The Renewal Grace Period is currently twelve (12) days but subject to change under the terms of this Agreement. For certain ccTLDs (.am, .at, .be, .cn, .com.cn, .net.cn, .org.cn, .de, .eu, .fm, .gs, .it, .jp, .ms, .nu, .nz, .co.nz, .net.nz, .org.nz, .tc, .tk, .tw, .com.tw, .org.tw, .idv.tw, .uk,&nbsp;and .vg) there is no Renewal Grace Period after the expiration date of the domain name. If you do not reimburse Azure for the renewal during the Renewal Grace Period your domain name will be placed on Hold and flagged for deletion after which you will have a 30-day redemption period during which you may pay Azure a Redemption fee and redeem your domain name. The Redemption fee is currently $80.00 USD and is subject to change under the terms of this Agreement. If you do not redeem your domain name prior to the end of the 30-day redemption period Azure may, in its sole discretion, delete your domain name or transfer it to another registrant on your behalf.&nbsp; During the redemption period your domain name may be parked.&nbsp;</p>\r\n<p style=\"text-align: justify;\">If your domain name is deleted, the Registry also provides a 30-day Redemption Grace Period during which you may pay Azure a redemption fee and redeem your domain name. The redemption fee is currently $80.00 USD and is subject to change under the terms of this Agreement. If you do not redeem your domain name prior to the end of the Registry's Redemption Grace Period the Registry will release your name and it will become available for registration on a first-come-first-served basis.</p>\r\n<p style=\"text-align: justify;\">Renewal Grace Periods and Redemption Grace Periods vary for different ccTLDs. Please refer to the specific terms for the applicable TLD. In the event there is a conflict between the provisions of this paragraph and the ccTLD terms, the ccTLD terms shall control.</p>\r\n<p style=\"text-align: justify;\"></p>\r\n<p style=\"text-align: justify;\">Our registration expiration notification policy and associated fees are described&nbsp;<a href=\"http://help.securepaynet.net/article/8803\" target=\"_blank\">here</a>.</p>\r\n<p style=\"text-align: justify;\"></p>\r\n<p style=\"text-align: justify;\"></p>\r\n<p style=\"text-align: justify;\"><strong><em>(C) FREE PRODUCT TERMS</em></strong></p>\r\n<p style=\"text-align: justify;\">In the event you are provided with free products with the registration of a domain name, you acknowledge and agree that such free products will only be available with a valid purchase and may be terminated in the event the domain name&nbsp;is deleted or cancelled.&nbsp; For free domain names, you acknowledge and agree that you may not change the account associated with such free domain for the first five (5) days after registration.&nbsp; In the event a free domain name is offered with the registration of another domain and if the paid domain name registered fails, then we may, in its sole discretion, either delete the registration of the free domain or refund the difference between the amount paid and the value of the free domain.&nbsp; Failed registrations associated with promotionals offers may result in the deletion of the free or discounted item or an adjustment between the registered domain price and the value of the discounted item, in&nbsp;our sole discretion.</p>\r\n<p style=\"text-align: justify;\"><strong>4. TERM OF AGREEMENT; TRANSFERS; DOMAIN TASTING</strong></p>\r\n<p style=\"text-align: justify;\">The term of this Agreement shall continue in full force and effect as long as you have any domain name registered through Azure.</p>\r\n<p style=\"text-align: justify;\">You agree that you will not transfer any domain name registered through Azure to another domain name registrar during the first sixty (60) days after its initial registration date.&nbsp; You agree that you may not transfer any domain name for&nbsp;ten (10) days after a Change of Account.</p>\r\n<p style=\"text-align: justify;\">You further agree that you will not engage in \"domain tasting\" by using the five (5) day grace period in which a registrant may choose to cancel a domain name and get a full refund of the registration fee as a vehicle to test the marketability or viability of a domain name.&nbsp; If Azure determines (which determination shall be made by Azure in its sole and absolute discretion) that you have been engaging in \"domain tasting\", then Azure reserves the right to (a) charge you a small fee (which fee shall be deducted from any refund issued) or (b) refuse your cancellation/refund request altogether. Azure will not charge you a fee if Azure cancels your domain name during the five (5) day grace period due to fraud or other activity outside of your control. The five (5) day grace period does not apply to Premium Domains, which are non-refundable.</p>\r\n<p style=\"text-align: justify;\">You agree that Azure shall not be bound by (i) any representations made by third parties who you may use to purchase services from Azure, or (ii) any statements of a general nature, which may be posted on Azure's website or contained in Azure's promotional materials.</p>\r\n<p style=\"text-align: justify;\"><strong>5. UP TO DATE INFORMATION; USE OF INFORMATION AND EXPIRATION</strong></p>\r\n<p style=\"text-align: justify;\">You agree to notify Azure within five (5) business days when any of the information you provided as part of the application and/or registration process changes. It is your responsibility to keep this information in a current and accurate status. Failure by you, for whatever reason, to provide Azure with accurate and reliable information on an initial and continual basis, shall be considered to be a material breach of this Agreement and a basis for suspension and/or cancellation of the domain name. Failure by you, for whatever reason, to respond within five (5) business days to any inquiries made by Azure to determine the validity of information provided by you, shall also be considered to be a material breach of this Agreement and a basis for suspension and/or cancellation of the domain name. You agree to retain a copy for your record of the receipt for purchase of your domain name.</p>\r\n<p style=\"text-align: justify;\">You agree that for each domain name registered by you, the following contact data is required: postal address, email address, telephone number, and if available, a facsimile number for the Registered Name Holder and, if different from the Registered Name Holder, the same contact information for, a technical contact, an administrative contact and a billing contact.</p>\r\n<p style=\"text-align: justify;\">You acknowledge and agree that domain name registration requires that this contact information, in whole or in part, be shared with the registry operator, for their use, copying, distribution, publication, modification and other processing &nbsp;for (among other uses in accordance with our Privacy Policy) the purpose of administration of the domain name registration, which may require such information be transferred back and forth across international borders, to and from the U.S. to the EU, for example. As required by ICANN, this information must also be made publicly available by means of Whois, and that the registry operator may also be required to make this information publicly available by Whois. Both Azure and the registry operator may be required to archive this information with a third-party escrow service. You hereby consent and give permission for all such requirements and disclosures. Further, you represent and warrant that, if you are providing information about a third party, you have notified the third party of the disclosure and the purpose for the disclosure and you have obtained the third party's consent to such disclosure.&nbsp; Registrar will not process data in a way that is incompatible with this Agreement.&nbsp; Registrar will take reasonable precautions to protect data from loss or misuse.</p>\r\n<p style=\"text-align: justify;\">You agree that for each domain name registered by you the following information will be made publicly available in the Whois directory as determined by ICANN Policy and may be sold in bulk as set forth in the ICANN agreement:</p>\r\n<ul style=\"text-align: justify;\">\r\n<li>The domain name;</li>\r\n<li>Your name and postal address;</li>\r\n<li>The name, email address, postal address, voice and fax numbers for technical and administrative contacts;</li>\r\n<li>The Internet protocol numbers for the primary and secondary name servers;</li>\r\n<li>The corresponding names of the name servers; and</li>\r\n<li>The original date of registration and expiration date.</li>\r\n<li>Name of primary name server and secondary name server.</li>\r\n<li>Identity of the registrar.</li>\r\n</ul>\r\n<p style=\"text-align: justify;\">You agree that, to the extent permitted by ICANN, Azure may make use of the publicly available information you provided during the registration process. If you engage in the reselling of domain names you agree to provide any individuals whose personal information you've obtained, information about the possible uses of their personal information pursuant to ICANN policy. You also agree to obtain consent, and evidence of consent, from those individuals for such use of the personal information they provide.</p>\r\n<p style=\"text-align: justify;\">You agree that Azure has the right to make public and share with third parties&nbsp;certain information in connection with the sale or purchase of domain names on the website, including but not limited to (a) the name of the domain name sold or purchased, (b) the sale or purchase price of the domain name sold or purchased, and (c) information relating to the timing of the sale or purchase.</p>\r\n<p style=\"text-align: justify;\"></p>\r\n<p style=\"text-align: justify;\">In order for us to comply with any current or future rules and policies for domain name systems including any rules or policies established by the CIRA or any provincial or federal government or by other organization having control or authority to establish rules or policies, you hereby grant to us the right to disclose to third parties through an interactive publicly accessible registration database the following information that you are required to provide when applying for a domain name:</p>\r\n<ol style=\"text-align: justify;\">\r\n<li>The domain or sub-domain name(s) registered by you;</li>\r\n<li>Your organization name, type and postal address;</li>\r\n<li>The name(s), position(s), postal address(es), e-mail address(es), voice telephone number(s) and where available the fax number(s) of the technical and administrative contacts for your domain or sub-domain name(s);</li>\r\n<li>The full hostnames and Internet protocol (IP) addresses of at least two (2) name server hosts (one primary and at least one secondary) for your domain or sub-domain name. Up to six (6) name servers may be specified. If a host has more than one (1) IP address, use a comma-separated list;</li>\r\n<li>The corresponding names of those name servers;</li>\r\n<li>The original creation date of the registration; and</li>\r\n<li>The expiration date of the registration.</li>\r\n</ol>\r\n<p style=\"text-align: justify;\">We may be required to make this information available in bulk form to third parties. We may also transfer or assign this information to CIRA or such other third party as we may decide, in our sole discretion. </p>\r\n<p style=\"text-align: justify;\"><strong>6. DISPUTE RESOLUTION POLICY</strong></p>\r\n<p style=\"text-align: justify;\">You agree to be bound by our current Dispute Resolution Policy. This policy is incorporated herein and made a part of this Agreement. You can view the&nbsp;<a href=\"http://www.securepaynet.net/agreements/ShowDoc.aspx?pageid=uniform_domain&amp;prog_id=510456\" target=\"_blank\">Uniform Domain Name Dispute Resolution Policy</a>&nbsp;online. You agree that Azure may from time to time modify its Dispute Resolution Policy. Azure will post any changes to its Dispute Resolution Policy at least thirty (30) days before they become effective. You agree that by maintaining your domain name registrations with Azure after the updated policy becomes effective that you agree to the Dispute Resolution policy as amended. You agree to review Azure's website periodically to determine if changes have been made to the Dispute Resolution Policy. If you cancel or terminate your&nbsp;Services with Azure as a result of the modified Dispute Resolution policy, no fees will be refunded to you.&nbsp;You also agree to submit to proceedings commenced under ICANN's Uniform Rapid Suspension System, if applicable.&nbsp;</p>\r\n<p style=\"text-align: justify;\">You agree that if a dispute arises as a result of one (1) or more domain names you have registered using Azure, you will indemnify, defend and hold Azure harmless as provided for in this Agreement. You also agree that if Azure is notified that a complaint has been filed with a governmental, administrative or judicial body, regarding a domain name registered by you using Azure, that Azure, in its sole discretion, may take whatever action Azure deems necessary regarding further modification, assignment of and/or control of the domain name deemed necessary to comply with the actions or requirements of the governmental, administrative or judicial body until such time as the dispute is settled. In this event you agree to hold Azure harmless for any action taken by Azure.</p>\r\n<p style=\"text-align: justify;\">You agree to submit, without prejudice to other potentially applicable jurisdictions, to the jurisdiction of the courts (1) of your domicile,&nbsp;(2) where registrar is located or (3) where the registry operator is located (e.g., China for .CN, Columbia for .CO, UK for .EU, etc.).</p>\r\n<p style=\"text-align: justify;\"></p>\r\n<p style=\"text-align: justify;\">In the case of .ca domain names, you agree that, if your use of the service or the registration of a .ca domain name is challenged by a third party, you will be subject to the provisions specified by CIRA in their dispute resolution policy, in effect at the time of the dispute.</p>\r\n<p style=\"text-align: justify;\"></p>\r\n<p style=\"text-align: justify;\"><strong>7. TRANSFER OF DOMAIN NAMES; RESALE PRACTICES</strong></p>\r\n<p style=\"margin: 0in 0in 0pt;\"><span style=\"font-family: arial,helvetica,sans-serif; font-size: small;\">If you transfer any domain name, you agree to provide the information required by, and to abide by, the procedures and conditions set forth in our&nbsp;<a href=\"http://www.securepaynet.net/agreements/ShowDoc.aspx?pageid=TRANSFER_SA&amp;prog_id=510456\" target=\"_blank\"><span style=\"text-decoration: underline;\"><span style=\"color: #0066cc;\">Domain Name Transfer Agreement</span></span></a> and <a href=\"http://www.securepaynet.net/agreements/ShowDoc.aspx?pageid=domain_nc&amp;prog_id=510456\" target=\"_blank\"><span style=\"text-decoration: underline;\"><span style=\"color: #0066cc;\">Change of Registrant Agreement</span></span></a>. You may view the latest versions of our Domain Name Transfer Agreement and Change of Registrant Agreementonline. In order to further protect your domain name, any domain name registered with&nbsp;Azure or transferred to&nbsp;Azure shall be placed on lock status, unless an opted-out has occurred as defined in our Change of Registrant Agreement or Domain Name Proxy Agreement. The domain name must be placed on unlock status in order to initiate a transfer of the domain name away from&nbsp;Azure to a new Registrar. You may log into your account with&nbsp;Azure at any time after your domain name has been successfully transferred to Azure, and change the status to unlock.</span></p>\r\n<p style=\"text-align: justify;\">In the event you are purchasing a domain name on behalf of a third party, you agree to inform any customer of yours, who may be acquiring a domain name through you using Azure's registration services, that they are in fact registering their domain name through Azure and that Azure  or its licensor  is an accredited registrar with ICANN. You agree not to represent that you are an ICANN-accredited registrar or that you are in any way providing superior access to the ICANN Domain Name Registry. You also agree not to use the ICANN trademark logo in any of your promotional materials including your website.</p>\r\n<p style=\"text-align: justify;\">You agree to obtain each of your customers' acceptances to the then current version of this Agreement, and to retain evidence of their acceptance for a period of not less than three (3) years. Should you require that your customers accept additional terms and conditions that are not required by Azure, you agree that such additional terms and conditions shall not conflict with this Agreement and the policies and procedures adopted by ICANN.</p>\r\n<p style=\"text-align: justify;\">You agree that Azure is not lending you access to its registrar connections or its registry access, nor will you be deemed to be a registrar in your own right. Furthermore, you agree you will not attempt to gain access to Azure's registrar connections or registry access. You agree to provide complete, accurate and current data for each registrant to be added to a registry in accordance with ICANN requirements for inclusion in the Whois database.</p>\r\n<p style=\"text-align: justify;\">You agree to provide your customers with adequate customer support, and to maintain contact with them with regard to providing a medium for them to communicate changes in the information they provided as part of the domain name registration process. Upon receiving corrected or updated information you will, within five (5) business days, provide such information to Azure so Azure may update its registration records. You will retain copies of all communications between you and your customers and will upon request provide Azure copies of same.</p>\r\n<p style=\"text-align: justify;\"><strong>8. YOUR OBLIGATIONS; SUSPENSION OF SERVICES; BREACH OF AGREEMENT</strong></p>\r\n<p style=\"text-align: justify;\">You represent and warrant to the best of your knowledge that, neither the registration of the domain nor the manner it is directly or indirectly used, infringes the legal rights of any third party.&nbsp; You will comply with all applicable laws, including, but not limited to those relating to privacy, data collection, consumer protection, fair lending, debt collection, organic farming, and disclosure of data and financial disclosures.&nbsp; If you collect and maintain sensitive health and financial data, you must implement reasonable and appropriate security measures commensurate with the offering of those services, as defined by applicable law.&nbsp; You represent that you possess any necessary authorization, charter, license, and/or other related credential for participation in the sector associated with the associated registry tld string.&nbsp; You will report any material changes to the validity of your authorization, charter, license, and/or other related credential. You will indemnify and hold harmless the registrar and registry operator, and their directors, officers, employees and agents, from and against any and all claims, damages, liabilities, costs and expenses (including reasonable legal fees and expenses) arising out of or related to the domain name registration.&nbsp; This obligation shall survive expiration or termination of this Agreement or the domain name registration.</p>\r\n<p style=\"text-align: justify;\">You agree that, in addition to other events set forth in this Agreement:</p>\r\n<ol style=\"text-align: justify;\">\r\n<li>Your ability to use any of the services provided by Azure is subject to cancellation or suspension in the event there is an unresolved breach of this Agreement and/or suspension or cancellation is required by any policy now in effect or adopted later by ICANN;</li>\r\n<li>Your registration of any domain names shall be subject to suspension, cancellation or transfer pursuant to any ICANN&nbsp;adopted specification or policy, or pursuant to any Azure procedure not inconsistent with an ICANN adopted specification or policy (a) to correct mistakes by Azure or the registry operator in registering any domain name; or (b) for the resolution of disputes concerning any domain name.</li>\r\n</ol>\r\n<p style=\"text-align: justify;\">You acknowledge and agree that Azure and registry reserve the right to deny, cancel or transfer any registration or transaction, or place any domain name(s) on registry lock, hold or similar status, as either deems necessary, in the unlimited and sole discretion of either Azure or the registry: (i) to comply with specifications adopted by any industry group generally recognized as authoritative with respect to the Internet (e.g., RFCs), (ii) to correct mistakes made by registry or any registrar in connection with a domain name registration, (iii) for the non-payment of fees to registry, (iv) to protect the integrity and stability of the registry, (v) to comply with any applicable court orders, laws, government rules or requirements, requests of law enforcement, or any dispute resolution process, (vi) to comply with any applicable ICANN rules or regulations, including without limitation, the registry agreement, (vii) to avoid any liability, civil or criminal, on the part of registry operator, as well as its affiliates, subsidiaries, officers, directors, and employees, (viii) per the terms of this Agreement, (ix) following an occurrence of any of the prohibited activities described in Section 8 below, or (x) during the resolution of a dispute.</p>\r\n<p style=\"text-align: justify;\">You agree that your failure to comply completely with the terms and conditions of this Agreement and any Azure rule or policy may be considered by Azure to be a material breach of this Agreement and Azure may provide you with notice of such breach either in writing or electronically (i.e. email). In the event you do not provide Azure with material evidence that you have not breached your obligations to Azure within ten (10) business days, Azure may terminate its relationship with you and take any remedial action available to Azure under the applicable laws. Such remedial action may be implemented without notice to you and may include, but is not limited to, cancelling the registration of any of your domain names and discontinuing any services provided by Azure to you. No fees will be refunded to you should your Services be cancelled or terminated because of a breach.</p>\r\n<p style=\"text-align: justify;\">Azure's failure to act upon or notify you of any event, which may constitute a breach, shall not relieve you from or excuse you of the fact that you have committed a breach.</p>\r\n<p style=\"text-align: justify;\"><strong>9. RESTRICTION OF SERVICES; RIGHT OF REFUSAL</strong></p>\r\n<p style=\"text-align: justify;\">You agree not to use the services provided by Azure, or to allow or enable others, to use the services provided by Azure for the purposes of:</p>\r\n<ul style=\"text-align: justify;\">\r\n<li>The transmission of unsolicited email (Spam); and</li>\r\n<li>Repetitive, high volume inquires into any of the services provided by Azure (i.e. domain name availability, etc.).</li>\r\n</ul>\r\n<p style=\"text-align: justify;\">You acknowledge and agree that you are prohibited from distributing malware, abusively operating botnets, phishing, piracy, trademark or copyright infringement, fraudulent or deceptive practices, counterfeiting or otherwise engaging in activity contrary to applicable law, and you acknowledge and agree that the consequences for such activities include suspension of the domain name.</p>\r\n<p style=\"text-align: justify;\">If you are hosting your domain name system (&ldquo;<span style=\"text-decoration: underline;\">DNS</span>&rdquo;) on Azure&rsquo;s servers, or are using our systems to forward a domain name, URL, or otherwise to a system or site hosted elsewhere, or if you have your domain name registered with Azure, you are responsible for ensuring there is no excessive overloading on Azure&rsquo;s servers. You may not use Azure&rsquo;s servers and your domain name as a source, intermediary, reply to address, or destination address for mail bombs, Internet packet flooding, packet corruption, or other abusive attack. Server hacking or other perpetration of security breaches is prohibited. You agree that Azure reserves the right to deactivate your domain name from its DNS if Azure deems it is the recipient of activities caused by your site that threaten the stability of its network.</p>\r\n<p style=\"text-align: justify;\">You agree that Azure, in its sole discretion and without liability to you, may refuse to accept the registration of any domain name. Azure also may in its sole discretion and without liability to you delete the registration of any domain name during the first thirty (30) days after registration has taken place. Azure may also cancel the registration of a domain name, after thirty (30) days, if that name is being used, as determined by Azure in its sole discretion, in association with spam or morally objectionable activities. Morally objectionable activities will include, but not be limited to:</p>\r\n<ul style=\"text-align: justify;\">\r\n<li>Activities prohibited by the laws of the United States and/or foreign territories in which you conduct business;</li>\r\n<li>Activities designed to encourage unlawful behavior by others, such as hate crimes, terrorism and child pornography;&nbsp;and</li>\r\n<li>Activities designed to harm or use unethically minors in any way.</li>\r\n</ul>\r\n<p style=\"text-align: justify;\">In the event Azure refuses a registration or deletes an existing registration during the first thirty (30) days after registration, you will receive a refund of any fees paid to Azure in connection with the registration either being cancelled or refused. In the event Azure deletes the registration of a domain name being used in association with spam or morally objectionable activities, no refund will be issued.</p>\r\n<p style=\"text-align: justify;\"><strong>10. DEFAULT SETTINGS; PARKED PAGE</strong></p>\r\n<p style=\"text-align: justify;\"><span style=\"text-decoration: underline;\">Choosing Your Domain Name Settings</span>.&nbsp; When you register a domain name with Azure, you will be prompted to choose your domain name settings during the checkout process.&nbsp; If you plan on using another provider for your website or hosting needs, then you should enter the name servers of such provider when you choose your domain name settings.&nbsp; This will direct your domain name away from Azure&rsquo;s name servers.&nbsp; If you are an existing Azure customer and have already set up a customer profile designating your domain name settings for new domain name registrations, you will not need to complete this step again during the checkout process. &nbsp;&nbsp;</p>\r\n<p style=\"text-align: justify;\"><span style=\"text-decoration: underline;\">Azure&rsquo;s Default Settings</span>.&nbsp; If you do not direct your domain name away from Azure&rsquo;s name servers as described above, Azure will direct your domain name to&nbsp;a &ldquo;<span style=\"text-decoration: underline;\">Parked Page</span>&rdquo; (&ldquo;<span style=\"text-decoration: underline;\">Default Setting</span>&rdquo;).&nbsp; You acknowledge and agree that Azure has the right to set the Default Setting.&nbsp;</p>\r\n<p style=\"text-align: justify;\"><span style=\"text-decoration: underline;\">Parked Page Default Setting</span>.&nbsp; Azure&rsquo;s Parked Page service is an online domain monetization system designed to generate revenue (through the use of pay per click advertising) from domain names that are not actively being used as websites.&nbsp; If your domain name is directed to a Parked Page, you acknowledge and agree that Azure may display both (a) in-house advertising (which includes links to Azure products and services) and (b) third-party advertising (which includes links to third-party products and services) on your Parked Page through the use of pop-up or pop-under browser windows, banner advertisements, audio or video streams, or any other advertising means, and we may aggregate for our own use, related usage data by means of cookies and other similar means.&nbsp; In addition, you acknowledge and agree that all in-house and third-party advertising will be selected by Azure and its advertising partners, as appropriate, and you will not be permitted to customize the advertising, or entitled to any compensation in exchange therefor.&nbsp; Please note that the third-party advertising displayed on Azure&rsquo;s Parked Pages may contain content offensive to you, including but not limited to links to adult content.&nbsp; Azure makes no effort to edit, control, monitor, or restrict the content and third-party advertising displayed on Azure&rsquo;s Parked Pages, and expressly disclaims any liability or responsibility to you or any third party in connection therewith.</p>\r\n<p style=\"text-align: justify;\"><span style=\"text-decoration: underline;\">Changing Azure&rsquo;s Default Settings</span>.&nbsp; You may change Azure&rsquo;s Default Settings at any time during the term of your domain name registration.</p>\r\n<ol style=\"text-align: justify;\">\r\n<li><span style=\"text-decoration: underline;\">Content Displaying On Your Parked Page</span>.&nbsp;&nbsp;You&nbsp;can not&nbsp;modify the content displaying on your Parked Page.&nbsp; You may select one of the other options listed below.</li>\r\n<li><span style=\"text-decoration: underline;\">Participating In Domain Name Monetization</span>.&nbsp; If you wish to participate in the domain monetization potential presented by Azure&rsquo;s Parked Page service, please review and consider purchasing our CashParking&reg; service.&nbsp; &nbsp;</li>\r\n<li><span style=\"text-decoration: underline;\">No Content</span>.&nbsp; If the options listed above are not acceptable to you, please contact customer support to learn what other options might be available to you.</li>\r\n</ol>\r\n<p style=\"text-align: justify;\"><span style=\"text-decoration: underline;\">Return To Parked Page Default Setting Upon Domain Name Expiration</span>.&nbsp; Upon domain name expiration, and regardless of how you use your domain name during the term of your domain name registration, your domain name will automatically return to the Parked Page Default Setting described above.&nbsp; As used in this paragraph, &ldquo;expiration&rdquo; is deemed to include any &ldquo;renewal period&rdquo; or &ldquo;redemption period&rdquo; immediately after the domain name expires, but before the domain name is returned to the registry.&nbsp; Once your domain name has returned to the Parked Page Default Setting described above, the only way to opt out of the Parked Page service is to renew, redeem, or re-register your domain name in accordance with Section 2(B), Domain Name Renewal Terms, of this Agreement.&nbsp;&nbsp;&nbsp;</p>\r\n<p style=\"text-align: justify;\"><strong>11. DOMAIN ADD-ONS</strong></p>\r\n<p style=\"text-align: justify;\"><strong>Business Registration:&nbsp;&nbsp;</strong>Business registration allows You to display additional information about the business that is the basis of Your domain name, including, but not limited to, such information as Your fax number, street address, and hours of operation. </product-offering></p>\r\n<p style=\"text-align: justify;\"><strong>Certified Domains</strong>.&nbsp; The certified domain service generally allow You to:&nbsp;(i) put a Certified Domain Validation seal on Your website; and (ii) have Your domain name listed as \"Certified\", in WHOIS lookups on our website. &nbsp;&nbsp;The Certified Domain Validation seal renews independently of Your domain. When You renew Your domain, You must also, when necessary, separately renew Your Certified Validation seal. However, the Certified Domain Validation seal can be cancelled independently of Your domain. If the domain is cancelled, the Certified Domain associated with the cancelled domain will automatically cancel.&nbsp; The Certified Domain seal is a trademark and is protected by copyright, trademark and other intellectual property laws. You may use the Certified Domain seal only in conjunction with the purchase of the Services set forth in the Agreement, and subject to the terms and conditions hereof. Other than provided for in this Agreement, You may not otherwise use, reproduce, or modify the mark for any additional promotional use, without our prior written approval. Your right to the use of the Certified Domain seal is immediately terminated upon expiration or termination of this Agreement.</product-offering></p>\r\n<p style=\"text-align: justify;\"><strong>Expiration Consolidation.</strong>&nbsp; You understand and acknowledge the expiration consolidation service may only be used to consolidate the expiration of .com and .net domain names. The service may not be used to consolidate domains that are on Registrar HOLD, Registry HOLD, or pending Transfer status. You acknowledge the service may only be used to push the expiration date of Your domains forward in time, at least one (1) month forward and no more than ten (10) years forward, and then, only for a period lasting less than twelve (12) months. Once the service has been used to consolidate domains, the new expiration date may not be reversed. To ensure the service is not abused or used as an alternative to renewals, you may only use the service on each domain once in any 12-month period. The service may only be used on domain names that have not passed their expiration date. In order to change the expiration date again, You will be required to renew the domain name first.&nbsp; You further understand and acknowledge the service may only be used to coordinate domains where we are the registrar of record. Domains not registered with us must be transferred before we can perform the Service.&nbsp;</p>\r\n<p style=\"text-align: justify;\"></p>\r\n<p style=\"text-align: justify;\"><strong>Backordering/Monitoring</strong>.&nbsp; You agree a domain name that has expired shall be subject first to a grace period of twelve (12) days, followed by the ICANN-mandated&nbsp;redemption grace period of thirty (30) days. During this period of time, the current domain name registrant may renew the domain name and retain ownership. We do not guarantee your backorder will result in you obtaining the domain name and expressly reserves the right to (a) refuse additional backorders or (b) cancel existing backorders at any time for any reason.&nbsp; If your backorder is refused or cancelled,&nbsp;we agree to promptly refund any fees paid for such domain name backorder. The domain name may also be placed in a secondary market for resale through the Auctions&reg; service.&nbsp; After your first year of Auctions membership, you agree that unless otherwise advised, we will automatically renew your Auctions membership using the payment method you have on file for so long as your backorder credit is active. You may learn more about Auctions by visiting the Auctions website. The domain name may also be subject to a drop pool process before it is available for purchasing. You understand&nbsp;we and our registrar affiliates use our services, including backordering.&nbsp; Therefore, the domain name may be registered with a different registrar, but can be managed through your account.&nbsp; By using the Services, you will be able to, among other things:</p>\r\n<ol style=\"text-align: justify;\">\r\n<li>Backorder any domain name under the top level domains .COM, .NET, .US, .BIZ, .INFO, .ORG, .MOBI. A backorder for a domain name will include the price of up to a one-year domain name registration. Should you successfully backorder any domain name, you will be subject to the terms and conditions of the&nbsp;Domain Name Registration&nbsp;and related agreements, which are incorporated herein by reference.</li>\r\n<li>Change your backorder until you obtain a domain name. You will have the opportunity to change the credit to a different domain name until you successfully capture one. After three (3) years, if the credit is not used, we reserves the right to remove the credit.</li>\r\n<li>Subscribe monthly to an expiring domain name list. You may also choose to purchase a subscription to a list of domain names expiring within the next five (5) days. If you subscribe to the expiring domain name list, you agree the payment method you have on file may be charged on a monthly subscription basis for the term of the Services you purchase.</li>\r\n<li>Select domain names off the expiring domain name list you would like to register. Each domain name you attempt to backorder will include the price of up to a one-year domain name registration, as set forth in subsection (i) above.</li>\r\n<li>Monitor your currently registered domain names for changes in registrar, status, expiration date or name servers at no additional cost.</li>\r\n<li>Subscribe to Domain Alert Pro or monitoring, which enables you to monitor any currently registered domain name, regardless of registrar, for historical tracking of status changes and designation of multiple email notification addresses.</li>\r\n</ol>\r\n<p style=\"text-align: justify;\"></p>\r\n<p style=\"text-align: justify;\"></p>\r\n<p style=\"text-align: justify;\"><strong>Transfer Validation.</strong>&nbsp;The transfer validation service is provided to help You keep Your domain name secure. By choosing to use the service, You are making an explicit and voluntary request to us to deny all attempts to transfer Your domain name to another registrar, or to move Your domain name to another account, unless You verify each request as described herein. You will provide us with a contact name, phone number and PIN for domain transfer validations. You will be contacted by us when a domain transfer is requested for a domain name in Your account. When we receive a transfer request, we will call You to verify the transfer request. If we cannot reach You with seventy-two (72) hours of receipt of the transfer request, the transfer will be denied. If You do not provide the proper PIN, the transfer will be denied. When we receive a change of account request, we will call You to verify the change request. If we cannot reach You with seventy-two (72) hours of receipt of the change request, the change will be denied. If You do not provide the proper PIN, the change will be denied. Availability of Services are subject to the terms and conditions of this Agreement and each of our policies and procedures. We shall use commercially reasonable efforts to attempt to provide certain portions of the Services on a twenty-four (24) hours a day, seven (7) days a week basis throughout the term of this Agreement and other portions of the service, during normal business hours. You acknowledge and agree that from time to time the Services may be inaccessible or inoperable for any reason, including, without limitation: (i) equipment malfunctions; (ii) periodic maintenance procedures or repairs that we may undertake from time to time; or (iii) causes beyond the reasonable control of us or that are not reasonably foreseeable by us, including, without limitation, interruption or failure of telecommunication or digital transmission links, hostile network attacks, network congestion or other failures. You acknowledge and agree that we has no control over the availability of the service on a continuous or uninterrupted basis.</p>\r\n<p style=\"text-align: justify;\"></p>\r\n<p style=\"text-align: justify;\"><strong>12. PRE-REGISTRATIONS</strong></p>\r\n<p style=\"text-align: justify;\">If you submit an application for pre-registration of a domain name, Azure does not guarantee that the name will be secured for you, or that you will have immediate access to the domain name if secured.&nbsp; Azure may use third-party service providers for the pre-registration services.</p>\r\n<p style=\"text-align: justify;\"><strong>13. PROVISIONS SPECIFIC TO .BIZ REGISTRATIONS</strong></p>\r\n<p style=\"text-align: justify;\"><em><span style=\"text-decoration: underline;\">Domain Name Dispute Policy</span></em>.&nbsp;&nbsp;If you reserved or registered a .BIZ domain name through us, in addition to our Dispute Resolution Policy, you hereby acknowledge that you have read and understood and agree to be bound by the terms and conditions of the&nbsp;<a href=\"http://www.icann.org/en/help/dndr/rdrp\" target=\"_blank\">Restrictions Dispute Resolution Policy</a>&nbsp;applicable to the .biz TLD.</p>\r\n<p style=\"text-align: justify;\">The RDRP sets forth the terms under which any allegation that a domain name is not used primarily for business or commercial purposes shall be enforced on a case-by-case basis by an independent ICANN-accredited dispute provider. Registry Operator will not review, monitor, or otherwise verify that any particular domain name is being used primarily for business or commercial purposes or that a domain name is being used in compliance with the SUDRP or UDRP processes.</p>\r\n<p style=\"text-align: justify;\"><em><span style=\"text-decoration: underline;\">One Year Registration</span></em>.&nbsp; If you are registering a .BIZ domain name and you elect to take advantage of special pricing applicable to one-year registrations, we will automatically renew your domain name for an additional one-year period at the end of the first year term by taking payment from the Payment Method you have on file, unless you notify us that you do not wish to renew. You will be notified and given the opportunity to accept or decline the one-year renewal prior to your domain name expiration date. In the event you decide not to renew your one-year .BIZ domain name for a second year, your domain name registration will automatically revert back to us and we will gain full rights of registration to such domain name. You agree that if you delete or transfer your .BIZ domain name during the first year, you will automatically be charged the second year renewal fees. </p>\r\n<p style=\"text-align: justify;\"><show-only pl_id=\"GD\"></p>\r\n<p style=\"text-align: justify;\"><strong>14. PROVISIONS SPECIFIC TO .INFO REGISTRATIONS&nbsp;</strong></p>\r\n<p style=\"text-align: justify;\"><em><span style=\"text-decoration: underline;\">One Year Registration</span></em>.&nbsp; If you are registering a .INFO domain name and you elect to take advantage of special pricing applicable to one-year registrations, we will automatically renew your domain name for an additional one-year period at the end of the first year term by taking payment from the Payment Method you have on file, unless you notify us that you do not wish to renew. You will be notified and given the opportunity to accept or decline the one-year renewal prior to your domain name expiration date. In the event you decide not to renew your one-year .INFO domain name for a second year, your domain name registration will automatically revert back to us and we will gain full rights of registration to such domain name. You agree that if you delete or transfer your .INFO domain name during the first year, you will automatically be charged the second year renewal fees. </p>\r\n<p style=\"text-align: justify;\"><strong>15. PROVISIONS SPECIFIC TO .MOBI REGISTRATIONS&nbsp;</strong></p>\r\n<p style=\"text-align: justify;\"><em><span style=\"text-decoration: underline;\">Instant Mobilizer</span></em><span style=\"text-decoration: underline;\">.</span>&nbsp;You are hereby granted a personal, revocable, non-exclusive, non-transferable, non-assignable, non-sublicensable license to use the Instant Mobilizer service (&ldquo;Service&rdquo;), provided, however, You abide by the terms and conditions set forth. You shall not alter, modify, adapt or translate the whole or part of the Service in any way whatsoever. You may not create derivative works based on the Service. You may not rent, lease, assign, dispose of, novate, sub-license or otherwise transfer any of its rights to use the Service to any third party.&nbsp; In the event that the volume of traffic to You from Your use of the Service is sufficient so as to jeopardize the provision of Service for other end users, we and our licensors reserve the right to, at its sole discretion, permanently or temporarily, discontinue Your use of the Service. For the avoidance of doubt, the volume of traffic generated by You should not exceed two thousand (2,000) page views per day.&nbsp; You acknowledge and agree the text \"Instant Mobilizer from dotMobi\" or equivalent, will be inserted at the footer of Your site.&nbsp; In the event a dotMobi domain to which the Service is being provided is transferred to another domain name registrar, the Service will be interrupted on that dotMobi domain, and Service will not be restored if the new registrar does not offer the Service.&nbsp; </p>\r\n<p style=\"text-align: justify;\"><show-only pl_id=\"GD\"></p>\r\n<p style=\"text-align: justify;\"><strong>16. PROVISIONS SPECIFIC TO .NAME REGISTRATIONS&nbsp;</strong></p>\r\n<p style=\"text-align: justify;\"></p>\r\n<p style=\"text-align: justify;\"><strong>17.&nbsp;PROVISIONS SPECIFIC TO .REISE REGISTRATIONS</strong></p>\r\n<p style=\"text-align: justify;\">Domain Names registered in .REISE should be used for purposes dedicated to travel topics within six months following initial Registration, e.g. utilized on the Internet or otherwise used to perform a function.</p>\r\n<p style=\"text-align: justify;\"><strong>18.&nbsp;PROVISIONS SPECIFIC TO .SEXY REGISTRATIONS</strong></p>\r\n<p style=\"text-align: justify;\">You shall not permit content unsuitable for viewing by a minor to be viewed from the main or top-level directory of a .SEXY domain name. For purposes of clarity, content viewed at the main or top-level directory of a .SEXY domain name is the content immediately visible if a user navigates to http://example.sexy or http://www.example.sexy. No restrictions apply to the content at any other page or subdirectory addressed by a .SEXY Registered Name.&nbsp;</p>\r\n<p style=\"text-align: justify;\"><strong>19. COUNTRY CODE TOP LEVEL DOMAINS</strong></p>\r\n<p style=\"text-align: justify;\">You represent and warrant that you meet the eligibility requirements of each ccTLD you apply for. You further agree to be bound by any registry rules, policies, and agreements for that particular ccTLD. These may include, but are not limited to, agreeing to indemnify the ccTLD provider, limiting the liability of the ccTLD provider, and requirements that any disputes be resolved under that particular country's laws.</p>\r\n<p style=\"text-align: justify;\"><strong><em>(A)&nbsp;PROVISIONS SPECIFIC TO .AU REGISTRATIONS</em></strong><strong>&nbsp;</strong></p>\r\n<p style=\"text-align: justify;\">.au Registrations (to include com.au, net.au and org.au) are governed by the following additional terms and conditions:</p>\r\n<p style=\"text-align: justify;\"><span style=\"text-decoration: underline;\">auDA</span>. auDA means .au Domain Administration Limited ACN 079 009 340, the .au domain names administrator.&nbsp; The Registrar acts as agent for auDA for the sole purpose, but only to the extent necessary, to enable auDA to receive the benefit of rights and covenants conferred to it under this Agreement. auDA is an intended third party beneficiary of this agreement.</p>\r\n<p style=\"text-align: justify;\"><span style=\"text-decoration: underline;\">auDA Published Policy</span>.&nbsp; auDA Published Policies means those specifications and policies established and published by auDA from time to time at&nbsp;<a href=\"http://www.auda.org.au/\">http://www.auda.org.au</a>.&nbsp; You must comply with all auDA Published Policies, as if they were incorporated into, and form part of, this Agreement. In the event of any inconsistency between any auDA Published Policy and this Agreement, then the auDA Published Policy will prevail to the extent of such inconsistency.&nbsp; You acknowledge that under the auDA Published Policies: (1) there are mandatory terms and conditions that apply to all domain names; (2) licences, and such terms and conditions are incorporated into, and form part of, this Agreement; (3) You are bound by, and must submit to, the .au Dispute Resolution Policy; and (4) auDA may delete or cancel the registration of a .au domain name.<strong>&nbsp;</strong></p>\r\n<p style=\"text-align: justify;\"><span style=\"text-decoration: underline;\">auDA's Liabilities and Indemnity</span>.&nbsp; To the fullest extent permitted by law, auDA will not be liable to Registrant for any direct, indirect, consequential, special, punitive or exemplary losses or damages of any kind (including, without limitation, loss of use, loss or profit, loss or corruption of data, business interruption or indirect costs) suffered by Registrant arising from, as a result of, or otherwise in connection with, any act or omission whatsoever of auDA, its employees, agents or contractors. Registrant agrees to indemnify, keep indemnified and hold auDA, its employees, agents and contractors harmless from all and any claims or liabilities, arising from, as a result of, or otherwise in connection with, Registrant's registration or use of its .au domain name. Nothing in this document is intended to exclude the operation of Trade Practices Act 1974.</p>\r\n<p style=\"text-align: justify;\"><strong><em>(B) PROVISIONS SPECIFIC TO .CA REGISTRATIONS</em></strong><strong></strong></p>\r\n<p style=\"text-align: justify;\">You acknowledge and agree that registration of your selected domain name in your first application to CIRA shall not be effective until you have entered into and agreed to be bound by CIRA's Registrant Agreement.</p>\r\n<p style=\"text-align: justify;\"><em><span style=\"text-decoration: underline;\">CIRA Certified Registrar</span></em>.&nbsp; The registrar shall immediately give notice to you in the event that it is no longer a CIRA Certified Registrar, has had its certification as a CIRA Certified Registrar suspended or terminated, or the Registrar Agreement between CIRA and the Registrar is terminated or expires. CIRA may post notice of such suspension, termination, or expiry on its website and may, if CIRA deems appropriate, give notice to the registrants thereof. In the event that the registrar is no longer a CIRA Certified Registrar, has had its certification as a CIRA Certified Registrar suspended or terminated or in the event the Registrar Agreement between CIRA and the Registrar is terminated or expires, you shall be responsible for changing your Registrar of Record to a new CIRA Certified Registrar within thirty (30) days of the earlier of notice thereof being given to you by (i) the Registrar or (ii) CIRA in accordance with CIRA's then current Registry PRP; provided, however, that if any of your domain name registrations are scheduled to expire within thirty (30) days of the giving of such notice, then you shall have thirty (30) days from the anniversary date of the registration(s), to register with a new CIRA certified registrar and to renew such domain name registration(s) in accordance with the Registry PRP.</p>\r\n<p style=\"text-align: justify;\">You acknowledge and agree that should there be insufficient funds prepaid by the registrar in the CIRA Deposit Account to be applied in payment of any fees, CIRA may in its sole discretion stop accepting applications for domain name registrations from the registrar, stop effecting registrations of domain names and transfers, renewals, modifications, and cancellations requested by the registrar and stop performing other billable transactions requested by the registrar not paid in full and CIRA may terminate the Registrar Agreement between CIRA and the Registrar.</p>\r\n<p style=\"text-align: justify;\"><em><span style=\"text-decoration: underline;\">.CA ASCII and IDN domain variants</span></em><em>&nbsp;</em>are bundled and reserved for a single registrant.&nbsp; Registrants are not required to register all variants in a bundle, but all registered variants must be registered and managed at a single registrar. Each variant registered will incur a registration fee.&nbsp; In addition, when registering multiple .CA domain (ASCII and IDN) variants in a bundle, your registrant information&nbsp;<strong><span style=\"text-decoration: underline;\">must be identical</span></strong>.&nbsp; If variants are registered at other registrars or if registrant information does not match, it may result in an \"unavailable\" search result, delayed or failed registration. If information does not match, validation is required and may take up to seven business days and delay availability of domain.&nbsp;</p>\r\n<p style=\"text-align: justify;\"><strong><em>(C)&nbsp;PROVISIONS SPECIFIC TO .CN REGISTRATIONS</em></strong><strong>&nbsp;</strong></p>\r\n<p style=\"text-align: justify;\">.CN is a restricted TLD &ndash; applications are subject to both a domain name check <strong><span style=\"text-decoration: underline;\">and</span></strong> real name verification as required by the People&rsquo;s Republic of China.&nbsp; Registrations in .CN are therefore subject to the following additional terms:</p>\r\n<p style=\"text-align: justify;\"><em><span style=\"text-decoration: underline;\">Verification, Registration and Activation</span></em><em>.</em>&nbsp;&nbsp;If a domain name is not permitted to be registered by the Chinese government, as determined by us, the Registry Operator and/or a 3<sup>rd</sup>&nbsp;party provider utilized for such services and determinations, in either party&rsquo;s discretion, the application for registration will not be successful.&nbsp; In such event, the name will be deleted and you will be eligible for a refund as further described below.</p>\r\n<p style=\"text-align: justify;\">If permitted, then the Registration may proceed, but a .CN domain name may not be activated (i.e., it will not resolve in the Internet) <em><span style=\"text-decoration: underline;\">unless and until</span></em> you have submitted (via the process described during registration) valid documents required of us and the Registry to perform real name verification.&nbsp; The following are acceptable forms of documents for the purpose of verification:</p>\r\n<ul style=\"text-align: justify;\">\r\n<li>China: Resident ID, temporary resident ID, business license or organization code certificate</li>\r\n<li>Hong Kong/Macau: Resident ID, driver&rsquo;s license, passport or business license</li>\r\n<li>Singapore: Driver&rsquo;s license, passport or business license</li>\r\n<li>Taiwan: Resident ID, driver&rsquo;s license or business license</li>\r\n<li>Other Countries/Regions: Driver&rsquo;s license or passport</li>\r\n</ul>\r\n<p style=\"text-align: justify;\">Documents submitted to us&nbsp;are used by us and shared with the Registry solely for the purpose of real name verification, and are otherwise subject to our <a href=\"http://www.securepaynet.net/agreements/ShowDoc.aspx?pageid=privacy&amp;prog_id=510456\">Privacy Policy</a>. &nbsp;By registering a .CN domain, you expressly agree that your data may be stored on servers in the U.S., or otherwise outside of the People's Republic of China.</p>\r\n<p style=\"text-align: justify;\"><em><span style=\"text-decoration: underline;\">Refunds</span></em><em>.</em>&nbsp; Refunds for .CN Registrations will only be allowed where (i) registration of the applied for domain name is not permitted by the Chinese government; or (ii) you notify us of your intent to cancel for any reason within the first five (5) days after the Registration (i.e., after it is deemed permissible by the Chinese government).&nbsp; For the avoidance of doubt, refunds will not be permitted under any circumstances after five (5) days from the date of Registration, including, for example, in the event real name verification is not successful or if the Chinese government determines after Registration that the domain name should not have been registered (and directs us to delete).</p>\r\n<p style=\"text-align: justify;\"><strong><em>(D) PROVISIONS SPECIFIC TO .JP REGISTRATIONS</em></strong><strong></strong></p>\r\n<p style=\"text-align: justify;\"><em><span style=\"text-decoration: underline;\">Registration Restrictions</span></em>.&nbsp; You represent and warrant that you have a local presence in Japan with a home or office address. You agree that certain domain names are reserved and can only be registered by certain parties. These include: (i) TLDs, other than ccTLDs, as determined by ICANN; (ii) geographical-type .JP domain names that are defined as metropolitan, prefectural, and municipal labels; (iii) names of primary and secondary educational organizations; (iv) names of organizations related to Internet management; (v) names required for .JP domain name operations; and (vi) character strings which may be confused with ASCII-converted Japanese domain names. The complete list of .JP Reserved Domains is available&nbsp;<a href=\"http://www.nic.ad.jp/dotjp/doc/dotjp-reserved.html\" target=\"_blank\">here</a>.&nbsp;</p>\r\n<p style=\"text-align: justify;\"><strong>20. ENGLISH LANGUAGE CONTROLS</strong></p>\r\n<p style=\"text-align: justify;\">This Agreement, along with all policies and the applicable product agreements identified above and incorporated herein by reference (collectively, the &ldquo;Agreement&rdquo;), is executed in the English language. To the extent any translation is provided to you, it is provided for convenience purposes only, and in the event of any conflict between the English and translated version, where permitted by law, the English version will control and prevail. Where the translated version is required to be provided to you and is to be considered binding by law (i) both language versions shall have equal validity, (ii) each party acknowledges that it has reviewed both language versions and that they are substantially the same in all material respects, and (iii) in the event of any discrepancy between these two versions, the translated version may prevail, provided that the intent of the Parties has been fully taken into consideration.&nbsp;</p>\n</td></tr>\n<tr><td>\n<br />\n<span class=\"finePrint\">\nRevised: 10/6/17<br />\nCopyright &copy; 2000-2017  All Rights Reserved.\n</span>\n</td></tr>\n</tbody>\n</table>\n</td></tr>\n</tbody>\n</table>"),
					Title:        to.Ptr("Domain Name Registration Agreement"),
					URL:          to.Ptr("http://www.secureserver.net/agreements/ShowDoc.aspx?pageid=reg_sa&pl_id=510456"),
				},
				{
					AgreementKey: to.Ptr("DNPA"),
					Content:      to.Ptr("<table width=\"100%\">\n<tbody>\n<tr><td width=\"100\"></td><td></td></tr>\n<tr><td></td><td>\n<table>\n<tbody>\n<tr><th align=\"left\" class=\"EULATitle\">\nDomain Name Proxy Agreement\n</th></tr>\n<tr><td class=\"bodyText\">\n<p><strong>Last Revised: October 25, 2017</strong></p>\n<p>Please read this Domain Name Proxy Agreement (\"Agreement\") carefully. By using the Services and/or website of Domains By Proxy, LLC, a Delaware limited liability company (\"DBP\"), You (as defined below) agree to all the terms and conditions set forth both herein and in the DBP privacy policy, which is incorporated by reference and can be found by clicking <a href=\"http://www.domainsbyproxy.com/policy/ShowDoc.aspx?pageid=privacy\" target=\"_blank\">here</a>.&nbsp; You acknowledge that DBP may amend this Agreement at any time upon posting the amended terms on its website, and that any new, different or additional features changing the services provided by DBP will automatically be subject to this Agreement. If You do not agree to be bound by, or if You object to, the terms and conditions of this Agreement and any amendments hereto, do not use or access DBP's services. Continued use of DBP's services and its website after any such changes to this Agreement have been posted, constitutes Your acceptance of those changes.</p>\r\n<p>This Agreement is by and between DBP and you, your heirs, assigns, agents and contractors (\"You\") and is made effective as of the date of electronic execution. This Agreement sets forth the terms and conditions of Your relationship with DBP and Your use of DBP's services and represents the entire Agreement between You and DBP. By using DBP's Services, You acknowledge that You have read, understand and agree to be bound by all the terms and conditions of this Agreement, and You further agree to be bound by the terms of this Agreement for transactions entered into by:</p>\r\n<ol>\r\n<li>You on Your behalf;</li>\r\n<li>Anyone acting as Your agent; and</li>\r\n<li>Anyone who uses the account You have established with DBP, whether or not the transactions were on Your behalf and/or authorized by You.</li>\r\n</ol>\r\n<p>You agree You will be bound by representations made by third parties acting on Your behalf, which either use or&nbsp;purchase services from DBP.&nbsp;You further agree that DBP will not be bound by statements of a general nature on DBP's website or&nbsp;DBP promotional materials. You further agree to abide by the terms and conditions promulgated by the Internet Corporation for Assigned Names and Numbers (\"ICANN\") (including the Uniform Domain Name Dispute Resolution Policy (\"Dispute Resolution Policy\") and Your Registrar (i.e., the ICANN-accredited person or entity through which You register a domain name).</p>\r\n<p class=\"heading1\">1. description of DBP's private registration services</p>\r\n<p>When You subscribe to DBP's private registration service through a DBP-affiliated Registrar, DBP will display its contact information in the publicly available \"Whois\" directory in place of Your information. DBP shall keep Your name, postal address, email address, phone and fax numbers confidential, subject to Section 4 of this Agreement. The following&nbsp;information (and not Your personal information) will be made publicly available in the \"Whois\" directory as determined by ICANN policy:</p>\r\n<ol>\r\n<li>DBP's name as the proxy Registrant of the domain name&nbsp;and a proxy email&nbsp;address, phone number and postal address for the proxy Registrant's contact information;</li>\r\n<li>A proxy&nbsp;postal address and phone number for the domain name registration's technical contact;</li>\r\n<li>A proxy&nbsp;email address, postal address and phone number for the domain name registration's administrative contact;</li>\r\n<li>A proxy email address, postal address and phone number for the domain's name registration's billing contact;</li>\r\n<li>The primary and secondary domain name servers You designate for the domain name;</li>\r\n<li>The domain name's original date of registration and expiration date of the registration; and</li>\r\n<li>The identity of the Registrar.</li>\r\n</ol>\r\n<p class=\"heading1\">2. full benefits of domain registration retained by you</p>\r\n<p>Although DBP will show in the \"Whois\" directory as&nbsp;the Registrant of each domain name registration You designate, You will retain the full benefits of domain name registration with respect to each such domain name registration, including, subject to Section 4 below:</p>\r\n<ol>\r\n<li>The right to sell, transfer or assign each domain name registration, which shall require cancellation of the DBP services associated with each such domain name registration;</li>\r\n<li>The right to control the use of each domain name registration, including designating the primary and secondary domain name servers to which each domain name points;</li>\r\n<li>The right to cancel each domain name registration;</li>\r\n<li>The right to cancel the DBP services associated with each domain name registration and/or Your&nbsp;privacy services with DBP so that Your contract information is listed in the \"Whois\" directory; and</li>\r\n<li>The right to renew each domain name registration upon its expiration, subject to Your Registrar's applicable rules and policies.</li>\r\n</ol>\r\n<p class=\"heading1\">3. PERSONAL INFORMATION AND your notification obligations; representation and warranties; ACCOUNT SECURITY</p>\r\n<p><strong>Personal Information&nbsp;and Your Notification Obligations&nbsp;</strong></p>\r\n<p>You agree that for each domain name for which you use DBP services, You will provide accurate and current information as to:</p>\r\n<ol>\r\n<li>Your name, the email address,&nbsp;postal address, phone and fax numbers for the domain name registration's Registrant contact;</li>\r\n<li>The email address, postal address, phone and fax numbers for the domain name registration's technical contact;</li>\r\n<li>The email address, postal address, phone and fax numbers for the domain name registration's administrative contact;</li>\r\n<li>The email address, postal address, phone and fax numbers for the domain name registration's billing contact; and</li>\r\n<li>You agree to provide government issued photo identification and/or government issued business identification as required for verification of identity when requested.</li>\r\n</ol>\r\n<p>You agree to:</p>\r\n<ol>\r\n<li>Notify DBP within&nbsp;three (3) calendar days when any of the personal information You provided upon subscribing to DBP's services, changes;</li>\r\n<li>Respond within three (3)&nbsp;calendar days to any inquiries made by DBP to determine the validity of personal information provided by You; and</li>\r\n<li>Timely respond to email messages&nbsp;DBP sends to You regarding correspondence DBP has received that is either addressed to or involves You and/or Your domain name registration, as more fully set forth in Section 5(c) below.</li>\r\n<li>To allow DBP to act as your Designated Agent (as that term is defined below) in instances when DBP services are added to or cancelled from your domain name and&nbsp;for the purpose of facilitating&nbsp;a change of registrant request (as further described below).&nbsp;</li>\r\n</ol>\r\n<p>It is Your responsibility to keep Your personal information current and accurate at all times.</p>\r\n<p><strong>Renewals </strong></p>\r\n<p>You agree DBP will&nbsp;arrange for Your Registrar to charge the credit card You have on file with the Registrar, at the Registrar's then current rates.</p>\r\n<p>If for any reason DBP and/or the Registrar for Your domain name is unable to charge Your credit card for the full amount of the service provided, or if DBP and/or the Registrar is charged back for any fee it previously charged to the credit card You provided, You agree that DBP and/or the Registrar may, without notice to You, pursue all available remedies in order to obtain payment, including but not limited to immediate cancellation of all services DBP provides to You.</p>\r\n<p><strong>Representations and Warranties </strong></p>\r\n<p>You warrant that all information provided by You to DBP is truthful, complete, current and accurate. You also warrant that You are using DBP's private registration services in good faith and You have no knowledge of Your domain name infringing upon or conflicting with the legal rights of a third party or a third party's trademark or trade name. You also warrant the domain name being registered by DBP on Your behalf will not be used in connection with any illegal activity, or in connection with the transmission of Spam, or that contains or installs any viruses, worms, bugs, Trojan horses or other code, files or programs designed to, or capable or, disrupting, damaging or limiting the functionality of any software or hardware.</p>\r\n<p class=\"heading2\">Account Security</p>\r\n<p>You agree You are entirely responsible for maintaining the confidentiality of Your customer number/login ID&nbsp;and password (\"Account Access Information\").&nbsp; You agree to notify DBP immediately of any unauthorized use of Your account or any other breach of security.&nbsp; You agree DBP will not be liable for any loss that You may incur as a result of someone else using Your Account Access Information, either with or without Your knowledge.&nbsp; You further agree You could be held liable for losses incurred by DBP or another party due to someone else using Your Account Access Information.&nbsp; For security purposes, You should keep Account Access Information in a secure location and take precautions to prevent others from gaining access to Your Account Access Information.&nbsp; You agree that You are entirely responsible for all activity in Your account, whether initiated by You, or by others.&nbsp; DBP specifically disclaims liability for any activity in Your account, regardless of whether You authorized the activity.</p>\r\n<p><strong>Designated Agency and Change of Registrant Information</strong></p>\r\n<p>&ldquo;DESIGNATED AGENT&rdquo; MEANS AN INDIVIDUAL OR ENTITY THAT THE PRIOR REGISTRANT OR NEW REGISTRANT EXPLICITLY AUTHORIZES TO APPROVE A CHANGE OF REGISTRANT REQUEST ON ITS BEHALF.&nbsp; IN THE CASE OF DBP SERVICES, A CHANGE OF REGISTRANT REQUEST MAY ALSO ARISE&nbsp;DUE TO INSTANCES WHERE DBP SERVICES ARE ADDED, OR REMOVED, FROM A DOMAIN NAME.&nbsp;&nbsp;FOR THE PURPOSE OF&nbsp;FACILITATING ANY SUCH CHANGE REQUEST,&nbsp;AND IN ACCORDANCE WITH ICANN'S <a href=\"https://www.icann.org/resources/pages/transfer-policy-2016-06-01-en\">CHANGE OF REGISTRANT POLICY</a>, YOU AGREE TO APPOINT&nbsp;DBP AS&nbsp;YOUR DESIGNATED AGENT FOR THE SOLE PURPOSE OF&nbsp;EXPLICITLY CONSENTING TO MATERIAL CHANGES OF REGISTRATION CONTACT INFORMATION ON YOUR BEHALF.</p>\r\n<p class=\"heading1\">4. DBP's rights to deny, suspend, terminate service and to disclose your personal information</p>\r\n<p>You understand and agree that DBP has the absolute right and power, in its sole discretion and without any liability to You whatsoever, to:</p>\r\n<ol>\r\n<li>Cancel the privacy service (which means that Your information will be available in the \"Whois\" directory) and/or reveal Your name and personal information that You provided to DBP:&nbsp;&nbsp;<br />A. When required by law, in the good faith belief that such action is necessary in order to conform to the edicts of the law or in the interest of public safety; <br />B. To comply with legal process served upon DBP or in response to a reasonable threat of litigation against DBP (as determined by DBP in its sole and absolute discretion); or <br />C. To comply with ICANN rules, policies, or procedures.</li>\r\n<li>Resolve any and all third party claims, whether threatened or made, arising out of Your use of a domain name&nbsp;for which DBP is the registrant listed in the \"Whois\" directory&nbsp;on Your behalf; or</li>\r\n<li>Take any other action DBP deems necessary: <br />A. In the event you breach any provision of this Agreement or the DBP Anti-Spam Policy; <br />B.&nbsp;To protect the integrity and stability of, and to comply with registration requirements, terms, conditions and policies of, the applicable domain name Registry and/or Registry Provider;<ol><ol>C. To comply with any applicable laws, government rules or requirements, subpoenas, court orders or requests of law enforcement;&nbsp;</ol></ol>D. To comply with ICANN's Dispute Resolution Policy or ICANN's Change of Registrant Policy; <br />E. To avoid any financial loss or legal liability (civil or criminal) on the part of DBP, its parent companies, subsidiaries, affiliates, shareholders, agents, officers, directors and employees; <br />F. If the domain name for which DBP is the registrant on Your behalf violates or infringes a third party's trademark, trade name or other legal rights; and <br />G. If it comes to DBP's attention that You are using DBP's services in a manner (as determined by DBP in its sole and absolute discretion) that:</li>\r\n</ol>\r\n<blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">\r\n<ul>\r\n<li>Is illegal, or promotes or encourages illegal activity;</li>\r\n<li>Promotes, encourages or engages in child pornography or the exploitation of children;</li>\r\n<li>Promotes, encourages or engages in terrorism, violence against people, animals, or property;</li>\r\n<li>Promotes, encourages or engages in any spam or other unsolicited bulk email, or computer or network hacking or cracking;</li>\r\n<li>Violates the Ryan Haight Online Pharmacy Consumer Protection Act of 2008 or similar legislation, or promotes, encourages or engages in the sale or distribution of prescription medication without a valid prescription; &nbsp;</li>\r\n<li>Infringes on the intellectual property rights of another User or any other person or entity;</li>\r\n<li>Violates the privacy or publicity rights of another User or any other person or entity, or breaches any duty of confidentiality that you owe to another User or any other person or entity;</li>\r\n<li>Interferes with the operation of DBP services;</li>\r\n<li>Contains or installs any viruses, worms, bugs, Trojan horses or other code, files or programs designed to, or capable of, disrupting, damaging or limiting the functionality of any software or hardware; or</li>\r\n<li>Contains false or deceptive language, or unsubstantiated or comparative claims, regarding DBP or its services.</li>\r\n</ul>\r\n</blockquote>\r\n<p>You further understand and agree that if DBP is named as a defendant in, or investigated in anticipation of, any legal or administrative proceeding arising out of Your domain name registration or Your use of DBP's services, Your private registration service may be canceled, which means the domain name registration will revert back to You and Your identity will therefore be revealed in the Whois directory as Registrant.</p>\r\n<p>In the event:</p>\r\n<ol>\r\n<li>DBP takes any of the actions set forth in subsection&nbsp;i, ii, or iii&nbsp;above or section 5; and/or</li>\r\n<li>You elect to cancel DBP's services for any reason --</li>\r\n</ol>\r\n<p>Neither DBP nor your Registrar will refund any fees paid by You whatsoever.</p>\r\n<p class=\"heading1\">5. communications forwarding</p>\r\n<p><strong>a. Correspondence Forwarding </strong></p>\r\n<p>Inasmuch as DBP's name, postal address and phone number will be listed in the Whois directory, You agree DBP will review and forward communications addressed to Your domain name that are received via email, certified or traceable courier mail (such as UPS, FedEx, or DHL), or first class U.S. postal mail. You specifically acknowledge DBP will not forward to You first class postal mail (other than legal notices), \"junk\" mail or other unsolicited communications (whether delivered through email, fax, postal mail or telephone), and You further authorize DBP to either discard all such communications or return all such communications to sender unopened. You agree to waive any and all claims arising from Your failure to receive communications directed to Your domain name but not forwarded to You by DBP.</p>\r\n<p><strong>b. Email Forwarding </strong></p>\r\n<p>The Whois directory requires an email address for every purchased domain name registration. When You purchase a private domain registration, DBP creates a private email address for that domain name, \"@domainsbyproxy.com\". Thereafter, when messages are sent to that private email address, DBP handles them according to the email preference You selected for that particular domain name. You have three (3) email preferences from which to choose. You can elect to:</p>\r\n<ol>\r\n<li>Have all of the messages forwarded;</li>\r\n<li>Have all of the messages filtered for Spam and then forwarded; or</li>\r\n<li>Have none of the messages forwarded.</li>\r\n</ol>\r\n<p>As with all communications, You agree to waive any and all claims arising from Your failure to receive email directed to Your domain name but not forwarded to You by DBP.</p>\r\n<p><strong>c. Notifications Regarding Correspondence and Your Obligation to Respond </strong></p>\r\n<p>When DBP receives certified or traceable courier mail or legal notices addressed to Your domain name, in most cases, DBP will attempt to forward the mail to you via email. If&nbsp;You do not respond to the DBP email and/or the correspondence DBP has received regarding&nbsp;Your domain name registration concerns a&nbsp;dispute of any kind or otherwise requires immediate disposition, DBP may immediately reveal Your identity and/or cancel the DBP private registration service regarding either the domain name registration(s) in question.&nbsp;This means the Whois directory will revert to displaying Your name, postal address, email address and phone number that you provided to DBP.</p>\r\n<p><strong>d.&nbsp;</strong><strong>Additional Administrative Fees </strong></p>\r\n<p>DBP reserves the right to charge You&nbsp;reasonable&nbsp;\"administrative fees\" or \"processing fees\" for (i) &nbsp;tasks DBP may perform outside the normal scope of its&nbsp;Services, (ii) additional time and/or costs DBP may incur in providing its Services, and/or (iii) Your non-compliance with the Agreement (as determined by DBP in its sole and absolute discretion). Typical administrative or processing fee scenarios&nbsp;include, but are not limited to, (i) customer service issues that&nbsp;require additional personal time and attention; (ii)&nbsp;disputes that require accounting or&nbsp;legal services, whether performed by DBP staff or by outside firms retained by DBP; (iii) recouping any and all costs and fees, including the cost of Services, incurred by DBP as the result of chargebacks or other payment disputes brought by You, Your bank or Payment Method processor.&nbsp; These administrative fees or processing fees will be billed to the Payment Method You have on file with&nbsp;Your Registrar.</p>\r\n<p>You agree to waive the right to trial by jury in any proceeding that takes place relating to or arising out of this Agreement.</p>\r\n<p class=\"heading1\">6. limitations of liability</p>\r\n<p><strong>UNDER NO CIRCUMSTANCES SHALL DBP BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, PUNITIVE, SPECIAL, OR CONSEQUENTIAL DAMAGES FOR ANY REASON WHATSOEVER RELATED TO THIS AGREEMENT, YOUR DOMAIN NAME REGISTRATION, DBP'S SERVICES, USE OR INABILITY TO USE THE DBP WEBSITE OR THE MATERIALS AND CONTENT OF THE WEBSITE OR ANY OTHER WEBSITES LINKED TO THE DBP WEBSITE OR YOUR PROVISION OF ANY PERSONALLY IDENTIFIABLE INFORMATION TO DBP OR ANY THIRD PARTY. THIS LIMITATION APPLIES REGARDLESS OF WHETHER THE ALLEGED LIABILITY IS BASED ON CONTRACT, TORT, WARRANTY, NEGLIGENCE, STRICT LIABILITY OR ANY OTHER BASIS, EVEN IF DBP HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES OR SUCH DAMAGES WERE REASONABLY FORESEEABLE. BECAUSE CERTAIN JURISDICTIONS DO NOT PERMIT THE LIMITATION OR ELIMINATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES, DBP'S LIABILITY IN SUCH JURISDICTIONS SHALL BE LIMITED TO THE SMALLEST AMOUNT PERMITTED BY LAW. </strong></p>\r\n<p><strong>YOU FURTHER UNDERSTAND AND AGREE THAT DBP DISCLAIMS ANY LOSS OR LIABILITY RESULTING FROM: </strong></p>\r\n<ol>\r\n<li><strong>THE INADVERTENT DISCLOSURE OR THEFT OF YOUR PERSONAL INFORMATION; </strong></li>\r\n<li><strong>ACCESS DELAYS OR INTERRUPTIONS TO OUR WEBSITE OR THE WEBSITES OF OUR AFFILIATED REGISTRARS; </strong></li>\r\n<li><strong>DATA NON-DELIVERY OF MIS-DELIVERY BETWEEN YOU AND DBP; </strong></li>\r\n<li><strong>THE FAILURE FOR WHATEVER REASON TO RENEW A PRIVATE DOMAIN NAME REGISTRATION; </strong></li>\r\n<li><strong>THE UNAUTHORIZED USE OF YOUR DBP ACCOUNT OR ANY OF DBP'S SERVICES; </strong></li>\r\n<li><strong>ERRORS, OMISSIONS OR MISSTATEMENTS BY DBP; </strong></li>\r\n<li><strong>DELETION OF, FAILURE TO STORE, FAILURE TO PROCESS OR ACT UPON EMAIL MESSAGES FORWARDED TO EITHER YOU OR YOUR PRIVATE DOMAIN NAME REGISTRATION; </strong></li>\r\n<li><strong>PROCESSING OF UPDATED INFORMATION REGARDING YOUR DBP ACCOUNT; AND/OR </strong></li>\r\n<li><strong>ANY ACT OR OMISSION CAUSED BY YOU OR YOUR AGENTS (WHETHER AUTHORIZED BY YOU OR NOT). </strong></li>\r\n</ol>\r\n<p class=\"heading1\">7. indemnity</p>\r\n<p>You agree to release, defend, indemnify and hold harmless DBP, its parent companies, subsidiaries, affiliates, shareholders, agents, directors, officers and employees and Your Registrar, from and against any and all claims, demands, liabilities, losses, damages or costs, including reasonable attorneys' fees, arising out of or related in any way to this Agreement, the services provided hereunder by DBP, the DBP website, Your account with DBP, Your use of Your domain name registration, and/or disputes arising in connection with the <a href=\"http://www.icann.org/en/dndr/udrp/uniform-rules.htm\" target=\"_blank\">dispute policy</a>.</p>\r\n<p class=\"heading1\">8. DBP warranty disclaimer</p>\r\n<p><strong>DBP, ITS PARENT COMPANIES, SUBSIDIARIES, AFFILIATES, SHAREHOLDERS, AGENTS, DIRECTORS, OFFICERS, AND EMPLOYEES EXPRESSLY DISCLAIM ALL REPRESENTATIONS AND WARRANTIES OF ANY KIND IN CONNECTION WITH THIS AGREEMENT, THE SERVICE PROVIDED HEREUNDER, THE DBP WEBSITE OR ANY WEBSITES LINKED TO THE DBP WEBSITE, WHETHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL DBP SERVICES, AS WELL AS THE DBP WEBSITE, ARE PROVIDED \"AS IS\". YOUR SUBSCRIPTION TO AND USE OF DBP'S SERVICES AND ITS WEBSITE ARE ENTIRELY AT YOUR RISK. SOME JURISDICTIONS DO NOT ALLOW THE DISCLAIMER OF IMPLIED WARRANTIES, IN WHICH EVENT THE FOREGOING DISCLAIMER MAY NOT APPLY TO YOU. </strong></p>\r\n<p class=\"heading1\">9. copyright and trademark</p>\r\n<p>You understand and agree that all content and materials contained in this Agreement, the <a href=\"http://www.domainsbyproxy.com/policy/ShowDoc.aspx?pageid=privacy\" target=\"_blank\">Privacy Policy </a>and the DBP website <a href=\"http://www.domainsbyproxy.com/\" target=\"_blank\">found here </a>, are protected by the various copyright, patent, trademark, service mark and trade secret laws of the United States, as well as any other applicable proprietary rights and laws, and that DBP expressly reserves its rights in and to all such content and materials.</p>\r\n<p>You further understand and agree You are prohibited from using, in any manner whatsoever, any of the afore-described content and materials without the express written permission of DBP. No license or right under any copyright, patent, trademark, service mark or other proprietary right or license is granted to You or conferred upon You by this Agreement or otherwise.</p>\r\n<p class=\"heading1\">10. miscellaneous provisions</p>\r\n<p><strong>a. Severability; Construction; Entire Agreement </strong></p>\r\n<p>If any part of this Agreement shall be held to be illegal, unenforceable or invalid, in whole or in part, such provision shall be modified to the minimum extent necessary to make it legal, enforceable and valid, and the legality, enforceability and validity of the remaining provisions of this Agreement shall not be affected or impaired. The headings herein will not be considered a part of this Agreement. You agree this Agreement, including the policies it incorporates by reference, constitute the complete and only Agreement between You and DBP regarding the services contemplated herein.</p>\r\n<p><strong>b. Governing Law; Venue; Waiver Of Trial By Jury </strong></p>\r\n<p>This Agreement shall be governed in all respects by the laws and judicial decisions of Maricopa County, Arizona, excluding its conflicts of laws rules. Except as provided immediately below, You agree that any action relating to or arising out of this Agreement, shall be brought exclusively in the courts of Maricopa County, Arizona. For the adjudication of domain name registration disputes, you agree to submit to the exclusive jurisdiction and venue of the U.S. District Court for the District of Arizona located in Phoenix, Arizona. You agree to waive the right to trial by jury in any proceeding, regardless of venue, that takes place relating to or arising out of this Agreement.</p>\r\n<p><strong>c. Notices </strong></p>\r\n<p>All notices from DBP to You will be sent to the email address You provided to DBP. Notices by email shall be deemed effective twenty-four (24) hours after the email is sent by DBP, unless DBP receives notice that the email address is invalid, in which event DBP may give You notice via first class or certified mail, return receipt requested. All notices from You to DBP shall be sent via certified mail, return receipt requested or traceable courier to:</p>\r\n<ol><ol>Domains By Proxy, LLC</ol><ol>Attn: General Counsel</ol><ol>14455 North Hayden Rd.<br />Suite 219<br />Scottsdale, AZ 85260<br /></ol></ol>\r\n<p>Notices sent via certified mail or traceable courier shall be deemed effective five (5) days after the date of mailing.</p>\r\n<p><strong>d. Insurance </strong></p>\r\n<p>In the unlikely event You lose Your domain name registration to a third party solely as a result of DBP's negligent actions (and absent fraud or other negligent or willful misconduct committed by a third party), You may be insured against such loss through DBP's Professional Liability Insurance Policy, which is currently underwritten by American International Insurance Company. Of course, every claim is subject to the then-carrier's investigation into the facts and circumstances surrounding such claim. In the event You have reason to believe that circumstances exist which warrant the filing of an insurance claim, please send a written notice (specifying the basis for such claim), via certified mail, return receipt requested, to:</p>\r\n<ol><ol>Domains By Proxy, LLC</ol><ol>Attn: Insurance Claims</ol><ol>14455 North Hayden Rd.<br />Suite 219<br />Scottsdale, AZ 85260<br /></ol></ol>\r\n<p><strong>e. Indemnification </strong></p>\r\n<p>In the unlikely event You lose Your domain name registration to a third party solely as a result of DBP's willful misconduct, Your Registrar (the \"Indemnifying Party\") will indemnify and hold You harmless against any losses, damages or costs (including reasonable attorneys' fees) resulting from any claim, action, proceeding, suit or demand arising out of or related to the loss of Your domain name registration. Such indemnification obligations under this Section 10(e) are conditioned upon the following:</p>\r\n<ol>\r\n<li>That You promptly give both DBP and the Indemnifying Party written notice of the claim, demand, or action and provide reasonable assistance to the Indemnifying Party, at its cost and expense, in connection therewith, and</li>\r\n<li>That the Indemnifying Party has the right, at its option, to control and direct the defense to any settlement of such claim, demand, or action.</li>\r\n</ol>\r\n<p>Any notice concerning indemnification shall, with respect to DBP, be sent in accordance with Section 10(c) of this Agreement. With respect to Your Registrar, notices regarding indemnification should be sent in accordance with the notification provisions contained in Your Registrar's Domain Name Registration Agreement.</p>\r\n<p><strong>f. Term of Agreement; Survival </strong></p>\r\n<p>The terms of this Agreement shall continue in full force and effect as long as DBP is the Registrant for any domain name on Your behalf. Sections 5 (Communications Forwarding), 6 (Limitation of Liability), 7 (Indemnity), 8 (Warranty Disclaimer) and 10 (Miscellaneous Provisions) shall survive any termination or expiration of this Agreement.</p>\n</td></tr>\n<tr><td>\n<br />\n<span class=\"finePrint\">\nRevised: 10/25/17<br />\nCopyright &copy; 2003-2017  All Rights Reserved.\n</span>\n</td></tr>\n</tbody>\n</table>\n</td></tr>\n</tbody>\n</table>"),
					Title:        to.Ptr("Domain Name Proxy Agreement"),
					URL:          to.Ptr("http://www.secureserver.net/agreements/ShowDoc.aspx?pageid=domain_nameproxy&pl_id=510456"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TldLegalAgreementCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TldLegalAgreementCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.DomainRegistration/stable/2021-03-01/examples/ListTopLevelDomainAgreements.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDomainRegistrationProvider_ListOperations(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.DomainRegistration/stable/2021-03-01/examples/ListOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDomainRegistrationProviderClient(cred, &options)
	pager := client.ListOperations(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.DomainRegistration/stable/2021-03-01/examples/ListOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.CsmOperationCollection{
			Value: []*armappservice.CsmOperationDescription{
				{
					Name: to.Ptr("Microsoft.DomainRegistration/domains/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get the list of domains"),
						Operation:   to.Ptr("Get Domains"),
						Provider:    to.Ptr("Microsoft Domains"),
						Resource:    to.Ptr("Domain"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.DomainRegistration/domains/Write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Add a new Domain or update an existing one"),
						Operation:   to.Ptr("Add or Update Domain"),
						Provider:    to.Ptr("Microsoft Domains"),
						Resource:    to.Ptr("Domain"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.DomainRegistration/domains/Delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete an existing domain."),
						Operation:   to.Ptr("Delete Domain"),
						Provider:    to.Ptr("Microsoft Domains"),
						Resource:    to.Ptr("Domain"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.DomainRegistration/domains/operationresults/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get a domain operation"),
						Operation:   to.Ptr("Get Domain Operation"),
						Provider:    to.Ptr("Microsoft Domains"),
						Resource:    to.Ptr("Domain operation"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.DomainRegistration/generateSsoRequest/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Generate a request for signing into domain control center."),
						Operation:   to.Ptr("Generate Domain Control Center Single Sign On Request"),
						Provider:    to.Ptr("Microsoft Domains"),
						Resource:    to.Ptr("Domain Control Center Single Sign On Request"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.DomainRegistration/validateDomainRegistrationInformation/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Validate domain purchase object without submitting it"),
						Operation:   to.Ptr("Domain Purchase Info Validation"),
						Provider:    to.Ptr("Microsoft Domains"),
						Resource:    to.Ptr("Domain Validation"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.DomainRegistration/checkDomainAvailability/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Check if a domain is available for purchase"),
						Operation:   to.Ptr("Check Domain Availability"),
						Provider:    to.Ptr("Microsoft Domains"),
						Resource:    to.Ptr("Domain Availability Result"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.DomainRegistration/listDomainRecommendations/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Retrieve the list domain recommendations based on keywords"),
						Operation:   to.Ptr("Retrieve Domain Recommendations"),
						Provider:    to.Ptr("Microsoft Domains"),
						Resource:    to.Ptr("Domain Recommendations"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.DomainRegistration/register/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Register the Microsoft Domains resource provider for the subscription"),
						Operation:   to.Ptr("Register Microsoft Domains resource provider"),
						Provider:    to.Ptr("Microsoft Domains"),
						Resource:    to.Ptr("Microsoft Domains resource provider"),
					},
					Origin: to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CsmOperationCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CsmOperationCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.DomainRegistration/stable/2021-03-01/examples/ListOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAppServiceEnvironments_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListByResourceGroup(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_Get(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_CreateOrUpdate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_Delete(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_Update(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListCapacities(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_GetVipInfo(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ChangeVnet(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_GetAseV3NetworkingConfiguration(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_UpdateAseNetworkingConfiguration(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListDiagnostics(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_GetDiagnosticsItem(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_GetInboundNetworkDependenciesEndpoints(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetInboundNetworkDependenciesEndpoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Inbound Network Dependencies Endpoints"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewEnvironmentsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.GetInboundNetworkDependenciesEndpoints("Sample-WestUSResourceGroup",
		"SampleAse",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetInboundNetworkDependenciesEndpoints.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.InboundEnvironmentEndpointCollection{
			Value: []*armappservice.InboundEnvironmentEndpoint{
				{
					Description: to.Ptr("App Service management"),
					Endpoints: []*string{
						to.Ptr("70.37.57.58/32"),
						to.Ptr("157.55.208.185/32"),
						to.Ptr("23.102.188.65/32"),
						to.Ptr("191.236.154.88/32"),
						to.Ptr("52.174.22.21/32"),
						to.Ptr("13.94.149.179/32"),
						to.Ptr("13.94.143.126/32"),
						to.Ptr("13.94.141.115/32"),
						to.Ptr("52.178.195.197/32"),
						to.Ptr("52.178.190.65/32"),
						to.Ptr("52.178.184.149/32"),
						to.Ptr("52.178.177.147/32"),
						to.Ptr("13.75.127.117/32"),
						to.Ptr("40.83.125.161/32"),
						to.Ptr("40.83.121.56/32"),
						to.Ptr("40.83.120.64/32"),
						to.Ptr("52.187.56.50/32"),
						to.Ptr("52.187.63.37/32"),
						to.Ptr("52.187.59.251/32"),
						to.Ptr("52.187.63.19/32"),
						to.Ptr("52.165.158.140/32"),
						to.Ptr("52.165.152.214/32"),
						to.Ptr("52.165.154.193/32"),
						to.Ptr("52.165.153.122/32"),
						to.Ptr("104.44.129.255/32"),
						to.Ptr("104.44.134.255/32"),
						to.Ptr("104.44.129.243/32"),
						to.Ptr("104.44.129.141/32"),
						to.Ptr("65.52.193.203/32"),
						to.Ptr("70.37.89.222/32"),
						to.Ptr("13.64.115.203/32"),
						to.Ptr("52.225.177.153/32"),
						to.Ptr("65.52.172.237/32")},
					Ports: []*string{
						to.Ptr("454"),
						to.Ptr("455")},
				},
				{
					Description: to.Ptr("App Service Environment VIP"),
					Endpoints: []*string{
						to.Ptr("52.247.209.18/32")},
					Ports: []*string{
						to.Ptr("454"),
						to.Ptr("455"),
						to.Ptr("16001")},
				},
				{
					Description: to.Ptr("App Service Environment subnet"),
					Endpoints: []*string{
						to.Ptr("192.168.250.0/24")},
					Ports: []*string{
						to.Ptr("All")},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InboundEnvironmentEndpointCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InboundEnvironmentEndpointCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetInboundNetworkDependenciesEndpoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAppServiceEnvironments_ListMultiRolePools(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_GetMultiRolePool(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_CreateOrUpdateMultiRolePool(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_UpdateMultiRolePool(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListMultiRolePoolInstanceMetricDefinitions(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListMultiRoleMetricDefinitions(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListMultiRoleUsages(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListOperations(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_GetOutboundNetworkDependenciesEndpoints(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetOutboundNetworkDependenciesEndpoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Outbound Network Dependencies Endpoints"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewEnvironmentsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.GetOutboundNetworkDependenciesEndpoints("Sample-WestUSResourceGroup",
		"SampleAse",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetOutboundNetworkDependenciesEndpoints.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.OutboundEnvironmentEndpointCollection{
			Value: []*armappservice.OutboundEnvironmentEndpoint{
				{
					Category: to.Ptr("Azure Storage"),
					Endpoints: []*armappservice.EndpointDependency{
						{
							DomainName: to.Ptr("blob.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("52.183.104.36"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](42.0469),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("52.183.104.36"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](41.7038),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("queue.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("52.183.104.25"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](37.326),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("52.183.104.25"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](37.513600000000004),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("table.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("52.183.104.26"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](32.789),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("52.183.104.26"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](1.8702),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("file.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("52.183.104.28"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](36.7378),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("52.183.104.28"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](36.7108),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("blob.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.64"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](4.0261000000000005),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.64"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.8264),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("queue.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.73"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](40.8523),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.73"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](40.7501),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("table.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.74"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](1.2071),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.74"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](38.2975),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("file.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.76"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](59.383700000000005),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.76"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](60.0775),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("blob.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.64"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.5512),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.64"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](2.6777),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("queue.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.73"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.5204),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.73"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](2.8193),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("table.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.74"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.2720000000000002),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.74"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.0147),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("file.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.76"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.2387),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.76"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.2804),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("blob.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.66.176.16"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](43.025200000000005),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.66.176.16"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](43.1683),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("queue.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.66.176.25"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](41.8598),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.66.176.25"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](41.9805),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("table.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.66.176.26"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](30.542900000000003),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.66.176.26"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](0.9832000000000001),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("file.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.66.176.28"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](35.9562),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.66.176.28"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](36.0643),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("blob.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.64"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.2829),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.64"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](2.3393),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("queue.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.73"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.4103000000000003),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.73"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](4.1032),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("table.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.74"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.1141),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.74"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.0247),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("file.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.76"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](2.834),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.76"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](2.8198000000000003),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("blob.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.64"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](1.3855000000000002),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.64"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](1.0594000000000001),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("queue.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.73"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](2.4717000000000002),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.73"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](2.4827),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("table.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.74"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.395),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.74"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.1701),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("file.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.76"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](1.4308),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.76"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](22.5866),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("blob.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.64"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](2.5372),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.64"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](2.4626),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("queue.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.73"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.7873),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.73"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](4.1911000000000005),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("table.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.74"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](2.9162000000000003),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.74"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](2.7896),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("file.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.77.184.76"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](26.723100000000002),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("13.77.184.76"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](26.735200000000003),
									Port:         to.Ptr[int32](443),
								}},
						}},
				},
				{
					Category: to.Ptr("Azure SQL Database"),
					Endpoints: []*armappservice.EndpointDependency{
						{
							DomainName: to.Ptr("database.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.66.226.202"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](1.5964),
									Port:         to.Ptr[int32](1433),
								}},
						}},
				},
				{
					Category: to.Ptr("Azure Management"),
					Endpoints: []*armappservice.EndpointDependency{
						{
							DomainName: to.Ptr("management.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("23.102.135.246"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](46.5764),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("admin.core.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("23.102.135.247"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](47.408),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("management.azure.com"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("52.151.25.45"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.9529),
									Port:         to.Ptr[int32](443),
								}},
						}},
				},
				{
					Category: to.Ptr("Azure Active Directory"),
					Endpoints: []*armappservice.EndpointDependency{
						{
							DomainName: to.Ptr("graph.windows.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("20.190.133.83"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.2264),
									Port:         to.Ptr[int32](443),
								},
								{
									IPAddress:    to.Ptr("20.190.133.81"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.2264),
									Port:         to.Ptr[int32](443),
								},
								{
									IPAddress:    to.Ptr("20.190.133.67"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.2264),
									Port:         to.Ptr[int32](443),
								},
								{
									IPAddress:    to.Ptr("40.126.5.34"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.2264),
									Port:         to.Ptr[int32](443),
								}},
						}},
				},
				{
					Category: to.Ptr("Regional Service"),
					Endpoints: []*armappservice.EndpointDependency{
						{
							DomainName: to.Ptr("gr-prod-mwh.cloudapp.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("13.66.225.188"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](3.3826),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("az-prod.metrics.nsatc.net"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("40.77.24.27"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](38.5647),
									Port:         to.Ptr[int32](443),
								}},
						}},
				},
				{
					Category: to.Ptr("SSL Certificate Verification"),
					Endpoints: []*armappservice.EndpointDependency{
						{
							DomainName: to.Ptr("ocsp.msocsp.com"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("104.18.25.243"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](6.0651),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("104.18.25.243"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](12.888),
									Port:         to.Ptr[int32](443),
								},
								{
									IPAddress:    to.Ptr("104.18.24.243"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](6.0651),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("104.18.24.243"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](12.888),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("mscrl.microsoft.com"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("152.199.4.33"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](6.742900000000001),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("152.199.4.33"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](7.436100000000001),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("crl.microsoft.com"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("23.215.102.10"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](25.136200000000002),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("23.215.102.10"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](25.0085),
									Port:         to.Ptr[int32](443),
								},
								{
									IPAddress:    to.Ptr("23.215.102.42"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](25.136200000000002),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("23.215.102.42"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](25.0085),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("www.microsoft.com"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("23.49.13.56"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](7.9229),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("23.49.13.56"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](8.4871),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("crl3.digicert.com"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("72.21.91.29"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](5.4074),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("72.21.91.29"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](5.577),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("ocsp.digicert.com"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("72.21.91.29"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](6.8989),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("72.21.91.29"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](5.667400000000001),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("cacerts.digicert.com"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("104.18.11.39"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](10.772400000000001),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("104.18.11.39"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](10.7705),
									Port:         to.Ptr[int32](443),
								},
								{
									IPAddress:    to.Ptr("104.18.10.39"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](10.772400000000001),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("104.18.10.39"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](10.7705),
									Port:         to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("www.thawte.com"),
							EndpointDetails: []*armappservice.EndpointDetail{
								{
									IPAddress:    to.Ptr("54.69.98.161"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](47.532900000000005),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("54.69.98.161"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](48.5362),
									Port:         to.Ptr[int32](443),
								},
								{
									IPAddress:    to.Ptr("35.167.62.148"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](47.532900000000005),
									Port:         to.Ptr[int32](80),
								},
								{
									IPAddress:    to.Ptr("35.167.62.148"),
									IsAccessible: to.Ptr(true),
									Latency:      to.Ptr[float64](48.5362),
									Port:         to.Ptr[int32](443),
								}},
						}},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OutboundEnvironmentEndpointCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OutboundEnvironmentEndpointCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetOutboundNetworkDependenciesEndpoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAppServiceEnvironments_GetPrivateEndpointConnectionList(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_GetPrivateEndpointConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ApproveOrRejectPrivateEndpointConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_DeletePrivateEndpointConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_GetPrivateLinkResources(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_Reboot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_Resume(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListAppServicePlans(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListWebApps(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_Suspend(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListUsages(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListWorkerPools(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_GetWorkerPool(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_CreateOrUpdateWorkerPool(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_UpdateWorkerPool(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListWorkerPoolInstanceMetricDefinitions(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListWebWorkerMetricDefinitions(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListWebWorkerUsages(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_List(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListAppServicePlans.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List App Service plans"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewPlansClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List(&armappservice.PlansClientListOptions{Detailed: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListAppServicePlans.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.PlanCollection{
			Value: []*armappservice.Plan{
				{
					Name:     to.Ptr("testsf6141"),
					Type:     to.Ptr("Microsoft.Web/serverfarms"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Web/serverfarms/testsf6141"),
					Kind:     to.Ptr("app"),
					Location: to.Ptr("East US"),
					Properties: &armappservice.PlanProperties{
						GeoRegion:              to.Ptr("East US"),
						IsSpot:                 to.Ptr(false),
						MaximumNumberOfWorkers: to.Ptr[int32](20),
						NumberOfSites:          to.Ptr[int32](4),
						ProvisioningState:      to.Ptr(armappservice.ProvisioningStateSucceeded),
						Reserved:               to.Ptr(false),
						Status:                 to.Ptr(armappservice.StatusOptionsReady),
						TargetWorkerCount:      to.Ptr[int32](0),
						TargetWorkerSizeID:     to.Ptr[int32](0),
					},
					SKU: &armappservice.SKUDescription{
						Name:     to.Ptr("P1"),
						Capacity: to.Ptr[int32](1),
						Family:   to.Ptr("P"),
						Size:     to.Ptr("P1"),
						Tier:     to.Ptr("Premium"),
					},
				},
				{
					Name:     to.Ptr("testsf7252"),
					Type:     to.Ptr("Microsoft.Web/serverfarms"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Web/serverfarms/testsf7252"),
					Kind:     to.Ptr("app"),
					Location: to.Ptr("East US"),
					Properties: &armappservice.PlanProperties{
						GeoRegion:              to.Ptr("East US"),
						IsSpot:                 to.Ptr(false),
						MaximumNumberOfWorkers: to.Ptr[int32](20),
						NumberOfSites:          to.Ptr[int32](4),
						ProvisioningState:      to.Ptr(armappservice.ProvisioningStateSucceeded),
						Reserved:               to.Ptr(false),
						Status:                 to.Ptr(armappservice.StatusOptionsReady),
						TargetWorkerCount:      to.Ptr[int32](0),
						TargetWorkerSizeID:     to.Ptr[int32](0),
					},
					SKU: &armappservice.SKUDescription{
						Name:     to.Ptr("P1"),
						Capacity: to.Ptr[int32](1),
						Family:   to.Ptr("P"),
						Size:     to.Ptr("P1"),
						Tier:     to.Ptr("Premium"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PlanCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PlanCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListAppServicePlans.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAppServicePlans_ListByResourceGroup(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListAppServicePlansByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List App Service plans by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewPlansClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByResourceGroup("testrg123",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListAppServicePlansByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.PlanCollection{
			Value: []*armappservice.Plan{
				{
					Name:     to.Ptr("testsf6141"),
					Type:     to.Ptr("Microsoft.Web/serverfarms"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Web/serverfarms/testsf6141"),
					Kind:     to.Ptr("app"),
					Location: to.Ptr("East US"),
					Properties: &armappservice.PlanProperties{
						GeoRegion:              to.Ptr("East US"),
						IsSpot:                 to.Ptr(false),
						MaximumNumberOfWorkers: to.Ptr[int32](20),
						NumberOfSites:          to.Ptr[int32](4),
						ProvisioningState:      to.Ptr(armappservice.ProvisioningStateSucceeded),
						Reserved:               to.Ptr(false),
						Status:                 to.Ptr(armappservice.StatusOptionsReady),
						TargetWorkerCount:      to.Ptr[int32](0),
						TargetWorkerSizeID:     to.Ptr[int32](0),
					},
					SKU: &armappservice.SKUDescription{
						Name:     to.Ptr("P1"),
						Capacity: to.Ptr[int32](1),
						Family:   to.Ptr("P"),
						Size:     to.Ptr("P1"),
						Tier:     to.Ptr("Premium"),
					},
				},
				{
					Name:     to.Ptr("testsf7252"),
					Type:     to.Ptr("Microsoft.Web/serverfarms"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Web/serverfarms/testsf7252"),
					Kind:     to.Ptr("app"),
					Location: to.Ptr("East US"),
					Properties: &armappservice.PlanProperties{
						GeoRegion:              to.Ptr("East US"),
						IsSpot:                 to.Ptr(false),
						MaximumNumberOfWorkers: to.Ptr[int32](20),
						NumberOfSites:          to.Ptr[int32](4),
						ProvisioningState:      to.Ptr(armappservice.ProvisioningStateSucceeded),
						Reserved:               to.Ptr(false),
						Status:                 to.Ptr(armappservice.StatusOptionsReady),
						TargetWorkerCount:      to.Ptr[int32](0),
						TargetWorkerSizeID:     to.Ptr[int32](0),
					},
					SKU: &armappservice.SKUDescription{
						Name:     to.Ptr("P1"),
						Capacity: to.Ptr[int32](1),
						Family:   to.Ptr("P"),
						Size:     to.Ptr("P1"),
						Tier:     to.Ptr("Premium"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PlanCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PlanCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListAppServicePlansByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAppServicePlans_Get(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetAppServicePlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Service plan"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewPlansClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"testrg123",
		"testsf6141",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetAppServicePlan.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.Plan{
			Name:     to.Ptr("testsf6141"),
			Type:     to.Ptr("Microsoft.Web/serverfarms"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Web/serverfarms/testsf6141"),
			Kind:     to.Ptr("app"),
			Location: to.Ptr("East US"),
			Properties: &armappservice.PlanProperties{
				GeoRegion:              to.Ptr("East US"),
				IsSpot:                 to.Ptr(false),
				MaximumNumberOfWorkers: to.Ptr[int32](20),
				NumberOfSites:          to.Ptr[int32](4),
				ProvisioningState:      to.Ptr(armappservice.ProvisioningStateSucceeded),
				Reserved:               to.Ptr(false),
				Status:                 to.Ptr(armappservice.StatusOptionsReady),
				TargetWorkerCount:      to.Ptr[int32](0),
				TargetWorkerSizeID:     to.Ptr[int32](0),
			},
			SKU: &armappservice.SKUDescription{
				Name:     to.Ptr("P1"),
				Capacity: to.Ptr[int32](1),
				Family:   to.Ptr("P"),
				Size:     to.Ptr("P1"),
				Tier:     to.Ptr("Premium"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Plan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Plan)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetAppServicePlan.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAppServicePlans_CreateOrUpdate(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateAppServicePlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Or Update App Service plan"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewPlansClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"testsf6141",
		armappservice.Plan{
			Kind:       to.Ptr("app"),
			Location:   to.Ptr("East US"),
			Properties: &armappservice.PlanProperties{},
			SKU: &armappservice.SKUDescription{
				Name:     to.Ptr("P1"),
				Capacity: to.Ptr[int32](1),
				Family:   to.Ptr("P"),
				Size:     to.Ptr("P1"),
				Tier:     to.Ptr("Premium"),
			},
		},
		&armappservice.PlansClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateAppServicePlan.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateAppServicePlan.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.Plan{
			Name:     to.Ptr("testsf6141"),
			Type:     to.Ptr("Microsoft.Web/serverfarms"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Web/serverfarms/testsf6141"),
			Kind:     to.Ptr("app"),
			Location: to.Ptr("East US"),
			Properties: &armappservice.PlanProperties{
				GeoRegion:              to.Ptr("East US"),
				MaximumNumberOfWorkers: to.Ptr[int32](20),
				NumberOfSites:          to.Ptr[int32](4),
				ProvisioningState:      to.Ptr(armappservice.ProvisioningStateSucceeded),
				Reserved:               to.Ptr(false),
				Status:                 to.Ptr(armappservice.StatusOptionsReady),
				TargetWorkerCount:      to.Ptr[int32](0),
				TargetWorkerSizeID:     to.Ptr[int32](0),
			},
			SKU: &armappservice.SKUDescription{
				Name:     to.Ptr("P1"),
				Capacity: to.Ptr[int32](1),
				Family:   to.Ptr("P"),
				Size:     to.Ptr("P1"),
				Tier:     to.Ptr("Premium"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Plan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Plan)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateAppServicePlan.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAppServicePlans_Delete(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteAppServicePlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete App Service plan"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewPlansClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Delete(ctx,
		"testrg123",
		"testsf6141",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteAppServicePlan.json: %v", err)
	}
}

func TestAppServicePlans_Update(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/PatchAppServicePlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch Service plan"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewPlansClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Update(ctx,
		"testrg123",
		"testsf6141",
		armappservice.PlanPatchResource{
			Kind:       to.Ptr("app"),
			Properties: &armappservice.PlanPatchResourceProperties{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/PatchAppServicePlan.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.Plan{
			Name:     to.Ptr("testsf6141"),
			Type:     to.Ptr("Microsoft.Web/serverfarms"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Web/serverfarms/testsf6141"),
			Kind:     to.Ptr("app"),
			Location: to.Ptr("East US"),
			Properties: &armappservice.PlanProperties{
				GeoRegion:              to.Ptr("East US"),
				MaximumNumberOfWorkers: to.Ptr[int32](20),
				NumberOfSites:          to.Ptr[int32](4),
				ProvisioningState:      to.Ptr(armappservice.ProvisioningStateSucceeded),
				Reserved:               to.Ptr(false),
				Status:                 to.Ptr(armappservice.StatusOptionsReady),
				TargetWorkerCount:      to.Ptr[int32](0),
				TargetWorkerSizeID:     to.Ptr[int32](0),
			},
			SKU: &armappservice.SKUDescription{
				Name:     to.Ptr("P1"),
				Capacity: to.Ptr[int32](1),
				Family:   to.Ptr("P"),
				Size:     to.Ptr("P1"),
				Tier:     to.Ptr("Premium"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Plan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Plan)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/PatchAppServicePlan.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAppServicePlans_ListCapabilities(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_GetHybridConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_DeleteHybridConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_ListHybridConnectionKeys(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_ListWebAppsByHybridConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_GetHybridConnectionPlanLimit(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_ListHybridConnections(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_RestartWebApps(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_ListWebApps(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_ListUsages(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_ListVnets(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_GetVnetFromServerFarm(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_GetVnetGateway(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_UpdateVnetGateway(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_ListRoutesForVnet(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_GetRouteForVnet(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_CreateOrUpdateVnetRoute(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_DeleteVnetRoute(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_UpdateVnetRoute(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_RebootWorker(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestCertificates_List(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListCertificates.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Certificates for subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewCertificatesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List(&armappservice.CertificatesClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListCertificates.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.AppCertificateCollection{
			Value: []*armappservice.AppCertificate{
				{
					Name:     to.Ptr("testc6282"),
					Type:     to.Ptr("Microsoft.Web/certificates"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Web/certificates/testc6282"),
					Location: to.Ptr("East US"),
					Properties: &armappservice.AppCertificateProperties{
						ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2039-12-31T23:59:59+00:00"); return t }()),
						FriendlyName:   to.Ptr(""),
						HostNames: []*string{
							to.Ptr("ServerCert")},
						IssueDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-11-12T23:40:25+00:00"); return t }()),
						Issuer:      to.Ptr("CACert"),
						SubjectName: to.Ptr("ServerCert"),
						Thumbprint:  to.Ptr("FE703D7411A44163B6D32B3AD9B03E175886EBFE"),
					},
				},
				{
					Name:     to.Ptr("testc4912"),
					Type:     to.Ptr("Microsoft.Web/certificates"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Web/certificates/testc4912"),
					Location: to.Ptr("West US"),
					Properties: &armappservice.AppCertificateProperties{
						ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2040-12-31T23:59:59+00:00"); return t }()),
						FriendlyName:   to.Ptr(""),
						HostNames: []*string{
							to.Ptr("ServerCert2")},
						IssueDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-12-12T23:40:25+00:00"); return t }()),
						Issuer:      to.Ptr("CACert"),
						SubjectName: to.Ptr("ServerCert2"),
						Thumbprint:  to.Ptr("FE703D7411A44163B6D32B3AD9B0490D5886EBFE"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AppCertificateCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AppCertificateCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListCertificates.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificates_ListByResourceGroup(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListCertificatesByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Certificates by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewCertificatesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByResourceGroup("testrg123",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListCertificatesByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.AppCertificateCollection{
			Value: []*armappservice.AppCertificate{
				{
					Name:     to.Ptr("testc6282"),
					Type:     to.Ptr("Microsoft.Web/certificates"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Web/certificates/testc6282"),
					Location: to.Ptr("East US"),
					Properties: &armappservice.AppCertificateProperties{
						ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2039-12-31T23:59:59+00:00"); return t }()),
						FriendlyName:   to.Ptr(""),
						HostNames: []*string{
							to.Ptr("ServerCert")},
						IssueDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-11-12T23:40:25+00:00"); return t }()),
						Issuer:      to.Ptr("CACert"),
						SubjectName: to.Ptr("ServerCert"),
						Thumbprint:  to.Ptr("FE703D7411A44163B6D32B3AD9B03E175886EBFE"),
					},
				},
				{
					Name:     to.Ptr("testc4912"),
					Type:     to.Ptr("Microsoft.Web/certificates"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Web/certificates/testc4912"),
					Location: to.Ptr("West US"),
					Properties: &armappservice.AppCertificateProperties{
						ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2040-12-31T23:59:59+00:00"); return t }()),
						FriendlyName:   to.Ptr(""),
						HostNames: []*string{
							to.Ptr("ServerCert2")},
						IssueDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-12-12T23:40:25+00:00"); return t }()),
						Issuer:      to.Ptr("CACert"),
						SubjectName: to.Ptr("ServerCert2"),
						Thumbprint:  to.Ptr("FE703D7411A44163B6D32B3AD9B0490D5886EBFE"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AppCertificateCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AppCertificateCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListCertificatesByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificates_Get(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Certificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewCertificatesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"testrg123",
		"testc6282",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetCertificate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.AppCertificate{
			Name:     to.Ptr("testc6282"),
			Type:     to.Ptr("Microsoft.Web/certificates"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Web/certificates/testc6282"),
			Location: to.Ptr("East US"),
			Properties: &armappservice.AppCertificateProperties{
				ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2039-12-31T23:59:59+00:00"); return t }()),
				FriendlyName:   to.Ptr(""),
				HostNames: []*string{
					to.Ptr("ServerCert")},
				IssueDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-11-12T23:40:25+00:00"); return t }()),
				Issuer:      to.Ptr("CACert"),
				SubjectName: to.Ptr("ServerCert"),
				Thumbprint:  to.Ptr("FE703D7411A44163B6D32B3AD9B03E175886EBFE"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AppCertificate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AppCertificate)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetCertificate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificates_CreateOrUpdate(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Or Update Certificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewCertificatesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"testrg123",
		"testc6282",
		armappservice.AppCertificate{
			Location: to.Ptr("East US"),
			Properties: &armappservice.AppCertificateProperties{
				HostNames: []*string{
					to.Ptr("ServerCert")},
				Password: to.Ptr("<password>"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateCertificate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.AppCertificate{
			Name:     to.Ptr("testc6282"),
			Type:     to.Ptr("Microsoft.Web/certificates"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Web/certificates/testc6282"),
			Location: to.Ptr("East US"),
			Properties: &armappservice.AppCertificateProperties{
				ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2039-12-31T23:59:59+00:00"); return t }()),
				FriendlyName:   to.Ptr(""),
				HostNames: []*string{
					to.Ptr("ServerCert")},
				IssueDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-11-12T23:40:25+00:00"); return t }()),
				Issuer:      to.Ptr("CACert"),
				SubjectName: to.Ptr("ServerCert"),
				Thumbprint:  to.Ptr("FE703D7411A44163B6D32B3AD9B03E175886EBFE"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AppCertificate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AppCertificate)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateCertificate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificates_Delete(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Certificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewCertificatesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Delete(ctx,
		"testrg123",
		"testc6282",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteCertificate.json: %v", err)
	}
}

func TestCertificates_Update(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/PatchCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch Certificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewCertificatesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Update(ctx,
		"testrg123",
		"testc6282",
		armappservice.AppCertificatePatchResource{
			Properties: &armappservice.AppCertificatePatchResourceProperties{
				Password: to.Ptr("<password>"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/PatchCertificate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.AppCertificate{
			Name:     to.Ptr("testc6282"),
			Type:     to.Ptr("Microsoft.Web/certificates"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Web/certificates/testc6282"),
			Location: to.Ptr("East US"),
			Properties: &armappservice.AppCertificateProperties{
				ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2039-12-31T23:59:59+00:00"); return t }()),
				FriendlyName:   to.Ptr(""),
				HostNames: []*string{
					to.Ptr("ServerCert")},
				IssueDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-11-12T23:40:25+00:00"); return t }()),
				Issuer:      to.Ptr("CACert"),
				SubjectName: to.Ptr("ServerCert"),
				Thumbprint:  to.Ptr("FE703D7411A44163B6D32B3AD9B03E175886EBFE"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AppCertificate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AppCertificate)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/PatchCertificate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContainerApps_ListBySubscription(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListContainerAppsBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Container Apps by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewContainerAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListContainerAppsBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.ContainerAppCollection{
			Value: []*armappservice.ContainerApp{
				{
					Name:     to.Ptr("testcontainerApp0"),
					Type:     to.Ptr("Microsoft.Web/containerApps"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/containerApps/testcontainerApp0"),
					Kind:     to.Ptr("containerApp"),
					Location: to.Ptr("East US"),
					Properties: &armappservice.ContainerAppProperties{
						Configuration: &armappservice.Configuration{
							Ingress: &armappservice.Ingress{
								External:   to.Ptr(true),
								Fqdn:       to.Ptr("testcontainerApp0.demokube-t24clv0g.eastus.containerApps.k4apps.io"),
								TargetPort: to.Ptr[int32](3000),
								Transport:  to.Ptr(armappservice.IngressTransportMethodAuto),
							},
						},
						KubeEnvironmentID:  to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/kubeEnvironments/demokube"),
						LatestRevisionFqdn: to.Ptr("testcontainerApp0-pjxhsye.demokube-t24clv0g.eastus.containerApps.k4apps.io"),
						ProvisioningState:  to.Ptr(armappservice.ContainerAppProvisioningStateSucceeded),
						Template: &armappservice.Template{
							Containers: []*armappservice.Container{
								{
									Name:  to.Ptr("testcontainerApp0"),
									Image: to.Ptr("repo/testcontainerApp0:v4"),
									Resources: &armappservice.ContainerResources{
										CPU:    to.Ptr[float64](0.2),
										Memory: to.Ptr("100Mi"),
									},
								}},
							Dapr: &armappservice.Dapr{
								AppPort: to.Ptr[int32](3000),
								Enabled: to.Ptr(true),
							},
							Scale: &armappservice.Scale{
								MaxReplicas: to.Ptr[int32](5),
								MinReplicas: to.Ptr[int32](1),
								Rules: []*armappservice.ScaleRule{
									{
										Name: to.Ptr("httpscalingrule"),
										HTTP: &armappservice.HTTPScaleRule{
											Metadata: map[string]*string{
												"concurrentRequests": to.Ptr("50"),
											},
										},
									}},
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ContainerAppCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ContainerAppCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListContainerAppsBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContainerApps_ListByResourceGroup(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListContainerAppsByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Container Apps by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewContainerAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByResourceGroup("rg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListContainerAppsByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.ContainerAppCollection{
			Value: []*armappservice.ContainerApp{
				{
					Name:     to.Ptr("testcontainerApp0"),
					Type:     to.Ptr("Microsoft.Web/containerApps"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/containerApps/testcontainerApp0"),
					Kind:     to.Ptr("containerApp"),
					Location: to.Ptr("East US"),
					Properties: &armappservice.ContainerAppProperties{
						Configuration: &armappservice.Configuration{
							Ingress: &armappservice.Ingress{
								External:   to.Ptr(true),
								Fqdn:       to.Ptr("testcontainerApp0.demokube-t24clv0g.eastus.containerApps.k4apps.io"),
								TargetPort: to.Ptr[int32](3000),
								Transport:  to.Ptr(armappservice.IngressTransportMethodAuto),
							},
						},
						KubeEnvironmentID:  to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/kubeEnvironments/demokube"),
						LatestRevisionFqdn: to.Ptr("testcontainerApp0-pjxhsye.demokube-t24clv0g.eastus.containerApps.k4apps.io"),
						ProvisioningState:  to.Ptr(armappservice.ContainerAppProvisioningStateSucceeded),
						Template: &armappservice.Template{
							Containers: []*armappservice.Container{
								{
									Name:  to.Ptr("testcontainerApp0"),
									Image: to.Ptr("repo/testcontainerApp0:v4"),
									Resources: &armappservice.ContainerResources{
										CPU:    to.Ptr[float64](0.2),
										Memory: to.Ptr("100Mi"),
									},
								}},
							Dapr: &armappservice.Dapr{
								AppPort: to.Ptr[int32](3000),
								Enabled: to.Ptr(true),
							},
							Scale: &armappservice.Scale{
								MaxReplicas: to.Ptr[int32](5),
								MinReplicas: to.Ptr[int32](1),
								Rules: []*armappservice.ScaleRule{
									{
										Name: to.Ptr("httpscalingrule"),
										HTTP: &armappservice.HTTPScaleRule{
											Metadata: map[string]*string{
												"concurrentRequests": to.Ptr("50"),
											},
										},
									}},
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ContainerAppCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ContainerAppCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListContainerAppsByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContainerApps_Get(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetContainerApp.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Container App"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewContainerAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"testcontainerApp0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetContainerApp.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.ContainerApp{
			Name:     to.Ptr("testcontainerApp0"),
			Type:     to.Ptr("Microsoft.Web/containerApps"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/containerApps/testcontainerApp0"),
			Kind:     to.Ptr("containerApp"),
			Location: to.Ptr("East US"),
			Properties: &armappservice.ContainerAppProperties{
				Configuration: &armappservice.Configuration{
					Ingress: &armappservice.Ingress{
						External:   to.Ptr(true),
						Fqdn:       to.Ptr("testcontainerApp0.demokube-t24clv0g.eastus.containerApps.k4apps.io"),
						TargetPort: to.Ptr[int32](3000),
						Transport:  to.Ptr(armappservice.IngressTransportMethodAuto),
					},
				},
				KubeEnvironmentID:  to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/kubeEnvironments/demokube"),
				LatestRevisionFqdn: to.Ptr("testcontainerApp0-pjxhsye.demokube-t24clv0g.eastus.containerApps.k4apps.io"),
				ProvisioningState:  to.Ptr(armappservice.ContainerAppProvisioningStateSucceeded),
				Template: &armappservice.Template{
					Containers: []*armappservice.Container{
						{
							Name:  to.Ptr("testcontainerApp0"),
							Image: to.Ptr("repo/testcontainerApp0:v4"),
							Resources: &armappservice.ContainerResources{
								CPU:    to.Ptr[float64](0.2),
								Memory: to.Ptr("100Mi"),
							},
						}},
					Dapr: &armappservice.Dapr{
						AppPort: to.Ptr[int32](3000),
						Enabled: to.Ptr(true),
					},
					Scale: &armappservice.Scale{
						MaxReplicas: to.Ptr[int32](5),
						MinReplicas: to.Ptr[int32](1),
						Rules: []*armappservice.ScaleRule{
							{
								Name: to.Ptr("httpscalingrule"),
								HTTP: &armappservice.HTTPScaleRule{
									Metadata: map[string]*string{
										"concurrentRequests": to.Ptr("50"),
									},
								},
							}},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ContainerApp) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContainerApp)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetContainerApp.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContainerApps_CreateOrUpdate(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateContainerApp.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update Container App"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewContainerAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg",
		"testcontainerApp0",
		armappservice.ContainerApp{
			Kind:     to.Ptr("containerApp"),
			Location: to.Ptr("East US"),
			Properties: &armappservice.ContainerAppProperties{
				Configuration: &armappservice.Configuration{
					Ingress: &armappservice.Ingress{
						External:   to.Ptr(true),
						TargetPort: to.Ptr[int32](3000),
					},
				},
				KubeEnvironmentID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/kubeEnvironments/demokube"),
				Template: &armappservice.Template{
					Containers: []*armappservice.Container{
						{
							Name:  to.Ptr("testcontainerApp0"),
							Image: to.Ptr("repo/testcontainerApp0:v1"),
						}},
					Dapr: &armappservice.Dapr{
						AppPort: to.Ptr[int32](3000),
						Enabled: to.Ptr(true),
					},
					Scale: &armappservice.Scale{
						MaxReplicas: to.Ptr[int32](5),
						MinReplicas: to.Ptr[int32](1),
						Rules: []*armappservice.ScaleRule{
							{
								Name: to.Ptr("httpscalingrule"),
								Custom: &armappservice.CustomScaleRule{
									Type: to.Ptr("http"),
									Metadata: map[string]*string{
										"concurrentRequests": to.Ptr("50"),
									},
								},
							}},
					},
				},
			},
		},
		&armappservice.ContainerAppsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateContainerApp.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateContainerApp.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.ContainerApp{
			Name:     to.Ptr("testcontainerApp0"),
			Type:     to.Ptr("Microsoft.Web/containerApps"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/containerApps/testcontainerApp0"),
			Kind:     to.Ptr("containerApp"),
			Location: to.Ptr("East US"),
			Properties: &armappservice.ContainerAppProperties{
				Configuration: &armappservice.Configuration{
					Ingress: &armappservice.Ingress{
						External:   to.Ptr(true),
						Fqdn:       to.Ptr("testcontainerApp0.demokube-t24clv0g.eastus.containerApps.k4apps.io"),
						TargetPort: to.Ptr[int32](3000),
						Transport:  to.Ptr(armappservice.IngressTransportMethodAuto),
					},
				},
				KubeEnvironmentID:  to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/kubeEnvironments/demokube"),
				LatestRevisionFqdn: to.Ptr("testcontainerApp0-pjxhsye.demokube-t24clv0g.eastus.containerApps.k4apps.io"),
				ProvisioningState:  to.Ptr(armappservice.ContainerAppProvisioningStateSucceeded),
				Template: &armappservice.Template{
					Containers: []*armappservice.Container{
						{
							Name:  to.Ptr("testcontainerApp0"),
							Image: to.Ptr("repo/testcontainerApp0:v4"),
							Resources: &armappservice.ContainerResources{
								CPU:    to.Ptr[float64](0.2),
								Memory: to.Ptr("100Mi"),
							},
						}},
					Dapr: &armappservice.Dapr{
						AppPort: to.Ptr[int32](3000),
						Enabled: to.Ptr(true),
					},
					Scale: &armappservice.Scale{
						MaxReplicas: to.Ptr[int32](5),
						MinReplicas: to.Ptr[int32](1),
						Rules: []*armappservice.ScaleRule{
							{
								Name: to.Ptr("httpscalingrule"),
								HTTP: &armappservice.HTTPScaleRule{
									Metadata: map[string]*string{
										"concurrentRequests": to.Ptr("50"),
									},
								},
							}},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ContainerApp) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContainerApp)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateContainerApp.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContainerApps_Delete(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteContainerApp.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Container App"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewContainerAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg",
		"testWorkerApp0",
		&armappservice.ContainerAppsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteContainerApp.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteContainerApp.json: %v", err)
	}
}

func TestContainerApps_ListSecrets(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListContainerAppSecrets.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Container Apps Secrets"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewContainerAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.ListSecrets(ctx,
		"testcontainerApp0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListContainerAppSecrets.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.SecretsCollection{
			Value: []*armappservice.ContainerAppSecret{
				{
					Name:  to.Ptr("secret1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("secret2"),
					Value: to.Ptr("value2"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SecretsCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SecretsCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListContainerAppSecrets.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContainerAppsRevisions_ListRevisions(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListRevisions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Container App's revisions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewContainerAppsRevisionsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListRevisions("rg",
		"testcontainerApp0",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListRevisions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.RevisionCollection{
			Value: []*armappservice.Revision{
				{
					Name:     to.Ptr("testcontainerApp0-pjxhsye"),
					Type:     to.Ptr("Microsoft.Web/containerApps/revisions"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/containerApps/testcontainerApp0/revisions/testcontainerApp0-pjxhsye"),
					Location: to.Ptr("East US"),
					Properties: &armappservice.RevisionProperties{
						Active:      to.Ptr(true),
						CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-24T21:24:22+00:00"); return t }()),
						Fqdn:        to.Ptr("testcontainerApp0-pjxhsye.demokube-t24clv0g.eastus.containerapps.k4apps.io"),
						Replicas:    to.Ptr[int32](1),
						Template: &armappservice.Template{
							Containers: []*armappservice.Container{
								{
									Name:  to.Ptr("testcontainerApp0"),
									Image: to.Ptr("repo/testcontainerApp0:v2"),
									Resources: &armappservice.ContainerResources{
										CPU:    to.Ptr[float64](0.2),
										Memory: to.Ptr("100Mi"),
									},
								}},
							Dapr: &armappservice.Dapr{
								AppPort: to.Ptr[int32](3000),
								Enabled: to.Ptr(true),
							},
							Scale: &armappservice.Scale{
								MaxReplicas: to.Ptr[int32](5),
								MinReplicas: to.Ptr[int32](1),
								Rules: []*armappservice.ScaleRule{
									{
										Name: to.Ptr("httpscalingrule"),
										HTTP: &armappservice.HTTPScaleRule{
											Metadata: map[string]*string{
												"concurrentRequests": to.Ptr("50"),
											},
										},
									}},
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RevisionCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RevisionCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListRevisions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContainerAppsRevisions_GetRevision(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetRevision.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Container App's revision"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewContainerAppsRevisionsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetRevision(ctx,
		"rg",
		"testcontainerApp0",
		"testcontainerApp0-pjxhsye",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetRevision.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.Revision{
			Name:     to.Ptr("testcontainerApp0-pjxhsye"),
			Type:     to.Ptr("Microsoft.Web/containerApps/revisions"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.WebcontainerApps/testcontainerApp0/revisions/testcontainerApp0-pjxhsye"),
			Location: to.Ptr("East US"),
			Properties: &armappservice.RevisionProperties{
				Active:      to.Ptr(true),
				CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-24T21:24:22+00:00"); return t }()),
				Fqdn:        to.Ptr("testcontainerApp0-pjxhsye.demokube-t24clv0g.eastus.containerApps.k4apps.io"),
				Replicas:    to.Ptr[int32](1),
				Template: &armappservice.Template{
					Containers: []*armappservice.Container{
						{
							Name:  to.Ptr("testcontainerApp0"),
							Image: to.Ptr("repo/testcontainerApp0:v2"),
							Resources: &armappservice.ContainerResources{
								CPU:    to.Ptr[float64](0.2),
								Memory: to.Ptr("100Mi"),
							},
						}},
					Dapr: &armappservice.Dapr{
						AppPort: to.Ptr[int32](3000),
						Enabled: to.Ptr(true),
					},
					Scale: &armappservice.Scale{
						MaxReplicas: to.Ptr[int32](5),
						MinReplicas: to.Ptr[int32](1),
						Rules: []*armappservice.ScaleRule{
							{
								Name: to.Ptr("httpscalingrule"),
								HTTP: &armappservice.HTTPScaleRule{
									Metadata: map[string]*string{
										"concurrentRequests": to.Ptr("50"),
									},
								},
							}},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Revision) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Revision)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetRevision.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContainerAppsRevisions_ActivateRevision(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ActivateRevision.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Activate Container App's revision"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewContainerAppsRevisionsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.ActivateRevision(ctx,
		"rg",
		"testcontainerApp0",
		"testcontainerApp0-pjxhsye",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ActivateRevision.json: %v", err)
	}
}

func TestContainerAppsRevisions_DeactivateRevision(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeactivateRevision.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deactivate Container App's revision"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewContainerAppsRevisionsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.DeactivateRevision(ctx,
		"rg",
		"testcontainerApp0",
		"testcontainerApp0-pjxhsye",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeactivateRevision.json: %v", err)
	}
}

func TestContainerAppsRevisions_RestartRevision(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/RestartRevision.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restart Container App's revision"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewContainerAppsRevisionsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.RestartRevision(ctx,
		"rg",
		"testStaticSite0",
		"testcontainerApp0-pjxhsye",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/RestartRevision.json: %v", err)
	}
}

func TestDeletedWebApps_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeletedWebApps_ListByLocation(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListDeletedWebAppsByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Deleted Web App by Location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDeletedWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByLocation("West US 2",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListDeletedWebAppsByLocation.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.DeletedWebAppCollection{
			Value: []*armappservice.DeletedSite{
				{
					Name: to.Ptr("wussite6"),
					Type: to.Ptr("Microsoft.Web/locations/deletedSites"),
					Properties: &armappservice.DeletedSiteProperties{
						DeletedSiteID:    to.Ptr[int32](9),
						DeletedSiteName:  to.Ptr("wussite6"),
						DeletedTimestamp: to.Ptr("2019-05-09T22:29:05.1337007"),
						GeoRegionName:    to.Ptr("West US 2"),
						Kind:             to.Ptr("app"),
						ResourceGroup:    to.Ptr("rg1"),
						Slot:             to.Ptr("Production"),
						Subscription:     to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeletedWebAppCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeletedWebAppCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListDeletedWebAppsByLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeletedWebApps_GetDeletedWebAppByLocation(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetDeletedWebAppByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Deleted Web App by Location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDeletedWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetDeletedWebAppByLocation(ctx,
		"West US 2",
		"9",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetDeletedWebAppByLocation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DeletedSite{
			Name: to.Ptr("wussite6"),
			Type: to.Ptr("Microsoft.Web/locations/deletedSites"),
			Properties: &armappservice.DeletedSiteProperties{
				DeletedSiteID:    to.Ptr[int32](9),
				DeletedSiteName:  to.Ptr("wussite6"),
				DeletedTimestamp: to.Ptr("2019-05-09T22:29:05.1337007"),
				GeoRegionName:    to.Ptr("West US 2"),
				Kind:             to.Ptr("app"),
				ResourceGroup:    to.Ptr("rg1"),
				Slot:             to.Ptr("Production"),
				Subscription:     to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeletedSite) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeletedSite)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetDeletedWebAppByLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostics_ListHostingEnvironmentDetectorResponses(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListHostingEnvironmentDetectorResponses.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Service Environment Detector Responses"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListHostingEnvironmentDetectorResponses("Sample-WestUSResourceGroup",
		"SampleAppServiceEnvironment",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListHostingEnvironmentDetectorResponses.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.DetectorResponseCollection{
			Value: []*armappservice.DetectorResponse{
				{
					Name: to.Ptr("runtimeavailability"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/hostingEnvironments/SampleAppServiceEnvironment/detectors/runtimeavailability"),
					Properties: &armappservice.DetectorResponseProperties{
						Dataset: []*armappservice.DiagnosticData{},
						Metadata: &armappservice.DetectorInfo{
							Description: to.Ptr("This detector analyzes all the requests to all applications running on this app service environment."),
							Category:    to.Ptr("Availability and Performance"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DetectorResponseCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DetectorResponseCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListHostingEnvironmentDetectorResponses.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostics_GetHostingEnvironmentDetectorResponse(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetHostingEnvironmentDetectorResponse.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Service Environment Detector Responses"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetHostingEnvironmentDetectorResponse(ctx,
		"Sample-WestUSResourceGroup",
		"SampleAppServiceEnvironment",
		"runtimeavailability",
		&armappservice.DiagnosticsClientGetHostingEnvironmentDetectorResponseOptions{StartTime: nil,
			EndTime:   nil,
			TimeGrain: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetHostingEnvironmentDetectorResponse.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DetectorResponse{
			Name: to.Ptr("runtimeavailability"),
			ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/hostingEnvironments/SampleAppServiceEnvironment/detectors/runtimeavailability"),
			Properties: &armappservice.DetectorResponseProperties{
				Dataset: []*armappservice.DiagnosticData{
					{
						RenderingProperties: &armappservice.Rendering{
							Description: to.Ptr("This detector breaks down the number of requests that your apps on this app service environment received for each status code."),
							Title:       to.Ptr("Requests by Status Code"),
						},
						Table: &armappservice.DataTableResponseObject{
							Columns: []*armappservice.DataTableResponseColumn{
								{
									ColumnName: to.Ptr("PreciseTimeStamp"),
									ColumnType: to.Ptr("datetime"),
									DataType:   to.Ptr("DateTime"),
								},
								{
									ColumnName: to.Ptr("count_Http2xx"),
									ColumnType: to.Ptr("long"),
									DataType:   to.Ptr("Int64"),
								},
								{
									ColumnName: to.Ptr("count_Http3xx"),
									ColumnType: to.Ptr("long"),
									DataType:   to.Ptr("Int64"),
								},
								{
									ColumnName: to.Ptr("count_Http4xx"),
									ColumnType: to.Ptr("long"),
									DataType:   to.Ptr("Int64"),
								},
								{
									ColumnName: to.Ptr("count_Http5xx"),
									ColumnType: to.Ptr("long"),
									DataType:   to.Ptr("Int64"),
								}},
							Rows: [][]*string{
								{
									to.Ptr("2018-03-27T00:25:00Z"),
									to.Ptr("772705"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:30:00Z"),
									to.Ptr("787069"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:35:00Z"),
									to.Ptr("781627"),
									to.Ptr("0"),
									to.Ptr("1"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:40:00Z"),
									to.Ptr("785017"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:45:00Z"),
									to.Ptr("783518"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:50:00Z"),
									to.Ptr("785783"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:55:00Z"),
									to.Ptr("772874"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T01:00:00Z"),
									to.Ptr("787162"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T01:05:00Z"),
									to.Ptr("782036"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T01:10:00Z"),
									to.Ptr("784642"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")}},
							TableName: to.Ptr("Table_0"),
						},
					}},
				Metadata: &armappservice.DetectorInfo{
					Description: to.Ptr("This detector analyzes all the requests to all applications running on this app service environment."),
					Category:    to.Ptr("Availability and Performance"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DetectorResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DetectorResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetHostingEnvironmentDetectorResponse.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostics_ListSiteDetectorResponses(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectorResponses.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Detector Responses"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListSiteDetectorResponses("Sample-WestUSResourceGroup",
		"SampleApp",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectorResponses.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.DetectorResponseCollection{
			Value: []*armappservice.DetectorResponse{
				{
					Name: to.Ptr("runtimeavailability"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/detectors/runtimeavailability"),
					Properties: &armappservice.DetectorResponseProperties{
						Dataset: []*armappservice.DiagnosticData{},
						Metadata: &armappservice.DetectorInfo{
							Description: to.Ptr("This detector analyzes the requests to your application."),
							Category:    to.Ptr("Availability and Performance"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DetectorResponseCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DetectorResponseCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectorResponses.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectorResponsesSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Slot Detector Responses"},
	})
	client = armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager = client.ListSiteDetectorResponses("Sample-WestUSResourceGroup",
		"SampleApp",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectorResponsesSlot.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.DetectorResponseCollection{
			Value: []*armappservice.DetectorResponse{
				{
					Name: to.Ptr("runtimeavailability"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/slots/staging/detectors/runtimeavailability"),
					Properties: &armappservice.DetectorResponseProperties{
						Dataset: []*armappservice.DiagnosticData{},
						Metadata: &armappservice.DetectorInfo{
							Description: to.Ptr("This detector analyzes the requests to your application."),
							Category:    to.Ptr("Availability and Performance"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DetectorResponseCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DetectorResponseCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectorResponsesSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostics_GetSiteDetectorResponse(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetectorResponse.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Detector Response"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetSiteDetectorResponse(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"runtimeavailability",
		&armappservice.DiagnosticsClientGetSiteDetectorResponseOptions{StartTime: nil,
			EndTime:   nil,
			TimeGrain: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetectorResponse.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DetectorResponse{
			Name: to.Ptr("runtimeavailability"),
			ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/detectors/runtimeavailability"),
			Properties: &armappservice.DetectorResponseProperties{
				Dataset: []*armappservice.DiagnosticData{
					{
						RenderingProperties: &armappservice.Rendering{
							Description: to.Ptr("This detector breaks down the number of requests that your app received for each status code."),
							Title:       to.Ptr("Requests by Status Code"),
						},
						Table: &armappservice.DataTableResponseObject{
							Columns: []*armappservice.DataTableResponseColumn{
								{
									ColumnName: to.Ptr("PreciseTimeStamp"),
									ColumnType: to.Ptr("datetime"),
									DataType:   to.Ptr("DateTime"),
								},
								{
									ColumnName: to.Ptr("count_Http2xx"),
									ColumnType: to.Ptr("long"),
									DataType:   to.Ptr("Int64"),
								},
								{
									ColumnName: to.Ptr("count_Http3xx"),
									ColumnType: to.Ptr("long"),
									DataType:   to.Ptr("Int64"),
								},
								{
									ColumnName: to.Ptr("count_Http4xx"),
									ColumnType: to.Ptr("long"),
									DataType:   to.Ptr("Int64"),
								},
								{
									ColumnName: to.Ptr("count_Http5xx"),
									ColumnType: to.Ptr("long"),
									DataType:   to.Ptr("Int64"),
								}},
							Rows: [][]*string{
								{
									to.Ptr("2018-03-27T00:25:00Z"),
									to.Ptr("772705"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:30:00Z"),
									to.Ptr("787069"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:35:00Z"),
									to.Ptr("781627"),
									to.Ptr("0"),
									to.Ptr("1"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:40:00Z"),
									to.Ptr("785017"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:45:00Z"),
									to.Ptr("783518"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:50:00Z"),
									to.Ptr("785783"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:55:00Z"),
									to.Ptr("772874"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T01:00:00Z"),
									to.Ptr("787162"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T01:05:00Z"),
									to.Ptr("782036"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T01:10:00Z"),
									to.Ptr("784642"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")}},
							TableName: to.Ptr("Table_0"),
						},
					}},
				Metadata: &armappservice.DetectorInfo{
					Description: to.Ptr("This detector analyzes the requests to your application."),
					Category:    to.Ptr("Availability and Performance"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DetectorResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DetectorResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetectorResponse.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetectorResponseSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Slot Detector Response"},
	})
	client = armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err = client.GetSiteDetectorResponse(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"runtimeavailability",
		&armappservice.DiagnosticsClientGetSiteDetectorResponseOptions{StartTime: nil,
			EndTime:   nil,
			TimeGrain: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetectorResponseSlot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DetectorResponse{
			Name: to.Ptr("runtimeavailability"),
			ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/slots/staging/detectors/runtimeavailability"),
			Properties: &armappservice.DetectorResponseProperties{
				Dataset: []*armappservice.DiagnosticData{
					{
						RenderingProperties: &armappservice.Rendering{
							Description: to.Ptr("This detector breaks down the number of requests that your app received for each status code."),
							Title:       to.Ptr("Requests by Status Code"),
						},
						Table: &armappservice.DataTableResponseObject{
							Columns: []*armappservice.DataTableResponseColumn{
								{
									ColumnName: to.Ptr("PreciseTimeStamp"),
									ColumnType: to.Ptr("datetime"),
									DataType:   to.Ptr("DateTime"),
								},
								{
									ColumnName: to.Ptr("count_Http2xx"),
									ColumnType: to.Ptr("long"),
									DataType:   to.Ptr("Int64"),
								},
								{
									ColumnName: to.Ptr("count_Http3xx"),
									ColumnType: to.Ptr("long"),
									DataType:   to.Ptr("Int64"),
								},
								{
									ColumnName: to.Ptr("count_Http4xx"),
									ColumnType: to.Ptr("long"),
									DataType:   to.Ptr("Int64"),
								},
								{
									ColumnName: to.Ptr("count_Http5xx"),
									ColumnType: to.Ptr("long"),
									DataType:   to.Ptr("Int64"),
								}},
							Rows: [][]*string{
								{
									to.Ptr("2018-03-27T00:25:00Z"),
									to.Ptr("772705"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:30:00Z"),
									to.Ptr("787069"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:35:00Z"),
									to.Ptr("781627"),
									to.Ptr("0"),
									to.Ptr("1"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:40:00Z"),
									to.Ptr("785017"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:45:00Z"),
									to.Ptr("783518"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:50:00Z"),
									to.Ptr("785783"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:55:00Z"),
									to.Ptr("772874"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T01:00:00Z"),
									to.Ptr("787162"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T01:05:00Z"),
									to.Ptr("782036"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T01:10:00Z"),
									to.Ptr("784642"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")}},
							TableName: to.Ptr("Table_0"),
						},
					}},
				Metadata: &armappservice.DetectorInfo{
					Description: to.Ptr("This detector analyzes the requests to your application."),
					Category:    to.Ptr("Availability and Performance"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DetectorResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DetectorResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetectorResponseSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostics_ListSiteDiagnosticCategories(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDiagnosticCategories.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List App Diagnostic Categories"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListSiteDiagnosticCategories("Sample-WestUSResourceGroup",
		"SampleApp",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDiagnosticCategories.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.DiagnosticCategoryCollection{
			Value: []*armappservice.DiagnosticCategory{
				{
					Name: to.Ptr("availability"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/diagnostics/availability"),
					Properties: &armappservice.DiagnosticCategoryProperties{
						Description: to.Ptr("Availability and Perfomance Diagnostics"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiagnosticCategoryCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiagnosticCategoryCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDiagnosticCategories.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDiagnosticCategoriesSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List App Slot Diagnostic Categories"},
	})
	client = armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager = client.ListSiteDiagnosticCategories("Sample-WestUSResourceGroup",
		"SampleApp",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDiagnosticCategoriesSlot.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.DiagnosticCategoryCollection{
			Value: []*armappservice.DiagnosticCategory{
				{
					Name: to.Ptr("availability"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/slots/staging/diagnostics/availability"),
					Properties: &armappservice.DiagnosticCategoryProperties{
						Description: to.Ptr("Availability and Perfomance Diagnostics"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiagnosticCategoryCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiagnosticCategoryCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDiagnosticCategoriesSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostics_GetSiteDiagnosticCategory(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDiagnosticCategory.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Diagnostic Category"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetSiteDiagnosticCategory(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDiagnosticCategory.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DiagnosticCategory{
			Name: to.Ptr("availability"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/diagnostics/availability"),
			Properties: &armappservice.DiagnosticCategoryProperties{
				Description: to.Ptr("Availability and Perfomance Diagnostics"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticCategory) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticCategory)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDiagnosticCategory.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDiagnosticCategorySlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Slot Diagnostic Category"},
	})
	client = armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err = client.GetSiteDiagnosticCategory(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDiagnosticCategorySlot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DiagnosticCategory{
			Name: to.Ptr("availability"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/diagnostics/availability"),
			Properties: &armappservice.DiagnosticCategoryProperties{
				Description: to.Ptr("Availability and Perfomance Diagnostics"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticCategory) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticCategory)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDiagnosticCategorySlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostics_ListSiteAnalyses(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteAnalyses.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List App Analyses"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListSiteAnalyses("Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteAnalyses.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.DiagnosticAnalysisCollection{
			Value: []*armappservice.AnalysisDefinition{
				{
					Name: to.Ptr("appanalysis"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/diagnostics/availability/analyses/appanalysis"),
					Properties: &armappservice.AnalysisDefinitionProperties{
						Description: to.Ptr("Determine causes of availability loss as well as solutions for these problems"),
					},
				},
				{
					Name: to.Ptr("apprestartanalysis"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/diagnostics/availability/analyses/apprestartanalyses"),
					Properties: &armappservice.AnalysisDefinitionProperties{
						Description: to.Ptr("Find the reasons that your app restarted"),
					},
				},
				{
					Name: to.Ptr("memoryanalysis"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/diagnostics/availability/analyses/memoryanalysis"),
					Properties: &armappservice.AnalysisDefinitionProperties{
						Description: to.Ptr("Detect issues with memory as well as suggest ways to troubleshoot memory problems"),
					},
				},
				{
					Name: to.Ptr("tcpconnectionsanalysis"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/diagnostics/availability/analyses/tcpconnectionsanalysis"),
					Properties: &armappservice.AnalysisDefinitionProperties{
						Description: to.Ptr("Analyze port usage and find out if a high number of connections is causing problems for your web app"),
					},
				},
				{
					Name: to.Ptr("perfanalysis"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/diagnostics/availability/analyses/perfanalysis"),
					Properties: &armappservice.AnalysisDefinitionProperties{
						Description: to.Ptr("Determine causes of performance degredation as well as solutions for these problems"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiagnosticAnalysisCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiagnosticAnalysisCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteAnalyses.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteAnalysesSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List App Slot Analyses"},
	})
	client = armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager = client.ListSiteAnalyses("Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteAnalysesSlot.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.DiagnosticAnalysisCollection{
			Value: []*armappservice.AnalysisDefinition{
				{
					Name: to.Ptr("appanalysis"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/slots/staging/diagnostics/availability/analyses/appanalysis"),
					Properties: &armappservice.AnalysisDefinitionProperties{
						Description: to.Ptr("Determine causes of availability loss as well as solutions for these problems"),
					},
				},
				{
					Name: to.Ptr("apprestartanalysis"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/slots/staging/diagnostics/availability/analyses/apprestartanalyses"),
					Properties: &armappservice.AnalysisDefinitionProperties{
						Description: to.Ptr("Find the reasons that your app restarted"),
					},
				},
				{
					Name: to.Ptr("memoryanalysis"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/slots/staging/diagnostics/availability/analyses/memoryanalysis"),
					Properties: &armappservice.AnalysisDefinitionProperties{
						Description: to.Ptr("Detect issues with memory as well as suggest ways to troubleshoot memory problems"),
					},
				},
				{
					Name: to.Ptr("tcpconnectionsanalysis"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/slots/staging/diagnostics/availability/analyses/tcpconnectionsanalysis"),
					Properties: &armappservice.AnalysisDefinitionProperties{
						Description: to.Ptr("Analyze port usage and find out if a high number of connections is causing problems for your web app"),
					},
				},
				{
					Name: to.Ptr("perfanalysis"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/slots/staging/diagnostics/availability/analyses/perfanalysis"),
					Properties: &armappservice.AnalysisDefinitionProperties{
						Description: to.Ptr("Determine causes of performance degredation as well as solutions for these problems"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiagnosticAnalysisCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiagnosticAnalysisCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteAnalysesSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostics_GetSiteAnalysis(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteAnalysis.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Analysis"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetSiteAnalysis(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"appanalysis",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteAnalysis.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.AnalysisDefinition{
			Name: to.Ptr("appanalysis"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/slots/staging/diagnostics/availability/analyses/appanalysis"),
			Properties: &armappservice.AnalysisDefinitionProperties{
				Description: to.Ptr("Determine causes of availability loss as well as solutions for these problems"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AnalysisDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AnalysisDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteAnalysis.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteAnalysisSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Slot Analysis"},
	})
	client = armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err = client.GetSiteAnalysis(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"appanalysis",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteAnalysisSlot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.AnalysisDefinition{
			Name: to.Ptr("appanalysis"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/slots/staging/diagnostics/availability/analyses/appanalysis"),
			Properties: &armappservice.AnalysisDefinitionProperties{
				Description: to.Ptr("Determine causes of availability loss as well as solutions for these problems"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AnalysisDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AnalysisDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteAnalysisSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostics_ExecuteSiteAnalysis(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteAnalysis.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute site analysis"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.ExecuteSiteAnalysis(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"apprestartanalyses",
		&armappservice.DiagnosticsClientExecuteSiteAnalysisOptions{StartTime: nil,
			EndTime:   nil,
			TimeGrain: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteAnalysis.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DiagnosticAnalysis{
			Name: to.Ptr("apprestartanalysis"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/diagnostics/availability/analyses/apprestartanalyses"),
			Properties: &armappservice.DiagnosticAnalysisProperties{
				AbnormalTimePeriods: []*armappservice.AbnormalTimePeriod{
					{
						EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
						Events: []*armappservice.DetectorAbnormalTimePeriod{
							{
								Type:    to.Ptr(armappservice.IssueTypeServiceIncident),
								EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:21:48Z"); return t }()),
								Message: to.Ptr("Your application process was restarted as application environment variables changed. This can most likely occur due to update in app settings or swap operation. This event occurred multiple times during the day."),
								MetaData: [][]*armappservice.NameValuePair{
									{
										{
											Name:  to.Ptr("feature"),
											Value: to.Ptr("auditlogs"),
										},
										{
											Name:  to.Ptr("displayedName"),
											Value: to.Ptr("Check Audit Logs"),
										}}},
								Priority:  to.Ptr[float64](0),
								Solutions: []*armappservice.Solution{},
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:21:50Z"); return t }()),
							}},
						Solutions: []*armappservice.Solution{},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
					}},
				EndTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
				NonCorrelatedDetectors: []*armappservice.DetectorDefinition{},
				Payload: []*armappservice.AnalysisData{
					{
						Data: [][]*armappservice.NameValuePair{},
						Metrics: []*armappservice.DiagnosticMetricSet{
							{
								Name:      to.Ptr("All Application Stop Events"),
								EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
								TimeGrain: to.Ptr("00:05:00"),
								Values: []*armappservice.DiagnosticMetricSample{
									{
										RoleInstance: to.Ptr("RD00155D3C15BE"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T00:00:00Z"); return t }()),
										Total:        to.Ptr[float64](2),
									},
									{
										IsAggregated: to.Ptr(true),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T00:00:00Z"); return t }()),
										Total:        to.Ptr[float64](2),
									},
									{
										RoleInstance: to.Ptr("RD00155D3C15C1"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T00:10:00Z"); return t }()),
										Total:        to.Ptr[float64](2),
									},
									{
										RoleInstance: to.Ptr("RD00155D3BE0FB"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T00:10:00Z"); return t }()),
										Total:        to.Ptr[float64](2),
									},
									{
										IsAggregated: to.Ptr(true),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T00:10:00Z"); return t }()),
										Total:        to.Ptr[float64](4),
									}},
							},
							{
								Name:      to.Ptr("User Events"),
								EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
								TimeGrain: to.Ptr("00:05:00"),
								Unit:      to.Ptr(""),
								Values: []*armappservice.DiagnosticMetricSample{
									{
										IsAggregated: to.Ptr(true),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:20:00Z"); return t }()),
										Total:        to.Ptr[float64](3),
									},
									{
										RoleInstance: to.Ptr("RD00155D3C09FC"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:20:00Z"); return t }()),
										Total:        to.Ptr[float64](1),
									},
									{
										RoleInstance: to.Ptr("RD00155D3C2ADC"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:20:00Z"); return t }()),
										Total:        to.Ptr[float64](1),
									},
									{
										RoleInstance: to.Ptr("RD00155D3C214E"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:20:00Z"); return t }()),
										Total:        to.Ptr[float64](1),
									}},
							}},
						Source: to.Ptr("workerprocessrecycle"),
					}},
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticAnalysis) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticAnalysis)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteAnalysis.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteAnalysisSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute site slot analysis"},
	})
	client = armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err = client.ExecuteSiteAnalysis(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"apprestartanalyses",
		&armappservice.DiagnosticsClientExecuteSiteAnalysisOptions{StartTime: nil,
			EndTime:   nil,
			TimeGrain: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteAnalysisSlot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DiagnosticAnalysis{
			Name: to.Ptr("apprestartanalysis"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/slots/staging/diagnostics/availability/analyses/apprestartanalyses"),
			Properties: &armappservice.DiagnosticAnalysisProperties{
				AbnormalTimePeriods: []*armappservice.AbnormalTimePeriod{
					{
						EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
						Events: []*armappservice.DetectorAbnormalTimePeriod{
							{
								Type:    to.Ptr(armappservice.IssueTypeServiceIncident),
								EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:21:48Z"); return t }()),
								Message: to.Ptr("Your application process was restarted as application environment variables changed. This can most likely occur due to update in app settings or swap operation. This event occurred multiple times during the day."),
								MetaData: [][]*armappservice.NameValuePair{
									{
										{
											Name:  to.Ptr("feature"),
											Value: to.Ptr("auditlogs"),
										},
										{
											Name:  to.Ptr("displayedName"),
											Value: to.Ptr("Check Audit Logs"),
										}}},
								Priority:  to.Ptr[float64](0),
								Solutions: []*armappservice.Solution{},
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:21:50Z"); return t }()),
							}},
						Solutions: []*armappservice.Solution{},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
					}},
				EndTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
				NonCorrelatedDetectors: []*armappservice.DetectorDefinition{},
				Payload: []*armappservice.AnalysisData{
					{
						Data: [][]*armappservice.NameValuePair{},
						Metrics: []*armappservice.DiagnosticMetricSet{
							{
								Name:      to.Ptr("All Application Stop Events"),
								EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
								TimeGrain: to.Ptr("00:05:00"),
								Values: []*armappservice.DiagnosticMetricSample{
									{
										RoleInstance: to.Ptr("RD00155D3C15BE"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T00:00:00Z"); return t }()),
										Total:        to.Ptr[float64](2),
									},
									{
										IsAggregated: to.Ptr(true),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T00:00:00Z"); return t }()),
										Total:        to.Ptr[float64](2),
									},
									{
										RoleInstance: to.Ptr("RD00155D3C15C1"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T00:10:00Z"); return t }()),
										Total:        to.Ptr[float64](2),
									},
									{
										RoleInstance: to.Ptr("RD00155D3BE0FB"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T00:10:00Z"); return t }()),
										Total:        to.Ptr[float64](2),
									},
									{
										IsAggregated: to.Ptr(true),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T00:10:00Z"); return t }()),
										Total:        to.Ptr[float64](4),
									}},
							},
							{
								Name:      to.Ptr("User Events"),
								EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
								TimeGrain: to.Ptr("00:05:00"),
								Unit:      to.Ptr(""),
								Values: []*armappservice.DiagnosticMetricSample{
									{
										IsAggregated: to.Ptr(true),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:20:00Z"); return t }()),
										Total:        to.Ptr[float64](3),
									},
									{
										RoleInstance: to.Ptr("RD00155D3C09FC"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:20:00Z"); return t }()),
										Total:        to.Ptr[float64](1),
									},
									{
										RoleInstance: to.Ptr("RD00155D3C2ADC"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:20:00Z"); return t }()),
										Total:        to.Ptr[float64](1),
									},
									{
										RoleInstance: to.Ptr("RD00155D3C214E"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:20:00Z"); return t }()),
										Total:        to.Ptr[float64](1),
									}},
							}},
						Source: to.Ptr("workerprocessrecycle"),
					}},
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticAnalysis) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticAnalysis)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteAnalysisSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostics_ListSiteDetectors(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectors.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List App Detectors"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListSiteDetectors("Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectors.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.DiagnosticDetectorCollection{
			Value: []*armappservice.DetectorDefinitionResource{
				{
					Name: to.Ptr("servicehealth"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/servicehealth"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Service Health"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](1),
					},
				},
				{
					Name: to.Ptr("siteswap"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/siteswap"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Site Swap Operations"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](8),
					},
				},
				{
					Name: to.Ptr("sitecrashes"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/sitecrashes"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Site Crash Events"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](9),
					},
				},
				{
					Name: to.Ptr("deployment"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/deployment"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Site Deployments"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](7),
					},
				},
				{
					Name: to.Ptr("sitecpuanalysis"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/sitecpuanalysis"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("CPU Analysis"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](3),
					},
				},
				{
					Name: to.Ptr("sitememoryanalysis"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/sitememoryanalysis"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Physical Memory Analysis"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](3),
					},
				},
				{
					Name: to.Ptr("committedmemoryusage"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/committedmemoryusage"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Committed Memory Usage"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](7),
					},
				},
				{
					Name: to.Ptr("pagefileoperations"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/pagefileoperations"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Page File Operations"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](3),
					},
				},
				{
					Name: to.Ptr("siterestartuserinitiated"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/siterestartuserinitiated"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("User Initiated Site Restarts"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](14),
					},
				},
				{
					Name: to.Ptr("siterestartsettingupdate"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/siterestartsettingupdate"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Config Update Site Restarts"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](12),
					},
				},
				{
					Name: to.Ptr("frebanalysis"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/frebanalysis"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Freb Logs Analysis"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](6),
					},
				},
				{
					Name: to.Ptr("workeravailability"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/workeravailability"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Worker Availability"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](11),
					},
				},
				{
					Name: to.Ptr("sitelatency"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/sitelatency"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Site Latency"),
						IsEnabled:   to.Ptr(false),
						Rank:        to.Ptr[float64](1005),
					},
				},
				{
					Name: to.Ptr("threadcount"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/threadcount"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Thread Count"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](23),
					},
				},
				{
					Name: to.Ptr("failedrequestsperuri"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/failedrequestsperuri"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Failed Requests Per URI"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](998),
					},
				},
				{
					Name: to.Ptr("autoheal"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/autoheal"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("AutoHeal"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](21),
					},
				},
				{
					Name: to.Ptr("loganalyzer"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/loganalyzer"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("PHP Log Analyzer"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](26),
					},
				},
				{
					Name: to.Ptr("aspnetcore"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/aspnetcore"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("ASP.NET Core"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](5),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiagnosticDetectorCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiagnosticDetectorCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectors.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectorsSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List App Slot Detectors"},
	})
	client = armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager = client.ListSiteDetectors("Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectorsSlot.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.DiagnosticDetectorCollection{
			Value: []*armappservice.DetectorDefinitionResource{
				{
					Name: to.Ptr("servicehealth"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/slots/staging/diagnostics/availability/detectors/servicehealth"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Service Health"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](1),
					},
				},
				{
					Name: to.Ptr("siteswap"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/slots/staging/diagnostics/availability/detectors/siteswap"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Site Swap Operations"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](8),
					},
				},
				{
					Name: to.Ptr("sitecrashes"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/slots/staging/diagnostics/availability/detectors/sitecrashes"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Site Crash Events"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](9),
					},
				},
				{
					Name: to.Ptr("deployment"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/slots/staging/diagnostics/availability/detectors/deployment"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Site Deployments"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](7),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiagnosticDetectorCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiagnosticDetectorCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectorsSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostics_GetSiteDetector(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetector.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Detector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetSiteDetector(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"sitecrashes",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetector.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DetectorDefinitionResource{
			Name: to.Ptr("sitecrashes"),
			ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/sitecrashes"),
			Properties: &armappservice.DetectorDefinition{
				DisplayName: to.Ptr("Site Crash Events"),
				IsEnabled:   to.Ptr(true),
				Rank:        to.Ptr[float64](9),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DetectorDefinitionResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DetectorDefinitionResource)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetector.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetectorSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Slot Detector"},
	})
	client = armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err = client.GetSiteDetector(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"sitecrashes",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetectorSlot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DetectorDefinitionResource{
			Name: to.Ptr("sitecrashes"),
			ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/slots/staging/diagnostics/availability/detectors/sitecrashes"),
			Properties: &armappservice.DetectorDefinition{
				DisplayName: to.Ptr("Site Crash Events"),
				IsEnabled:   to.Ptr(true),
				Rank:        to.Ptr[float64](9),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DetectorDefinitionResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DetectorDefinitionResource)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetectorSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostics_ExecuteSiteDetector(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteDetector.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute site detector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.ExecuteSiteDetector(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"sitecrashes",
		"availability",
		&armappservice.DiagnosticsClientExecuteSiteDetectorOptions{StartTime: nil,
			EndTime:   nil,
			TimeGrain: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteDetector.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DiagnosticDetectorResponse{
			Name: to.Ptr("sitecrashes"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/diagnostics/availability/detectors/sitecrashes"),
			Properties: &armappservice.DiagnosticDetectorResponseProperties{
				AbnormalTimePeriods: []*armappservice.DetectorAbnormalTimePeriod{
					{
						EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
						Solutions: []*armappservice.Solution{},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
					}},
				EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticDetectorResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticDetectorResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteDetector.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteDetectorSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute site slot detector"},
	})
	client = armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err = client.ExecuteSiteDetector(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"sitecrashes",
		"availability",
		&armappservice.DiagnosticsClientExecuteSiteDetectorOptions{StartTime: nil,
			EndTime:   nil,
			TimeGrain: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteDetectorSlot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DiagnosticDetectorResponse{
			Name: to.Ptr("sitecrashes"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/slots/staging/diagnostics/availability/detectors/sitecrashes"),
			Properties: &armappservice.DiagnosticDetectorResponseProperties{
				AbnormalTimePeriods: []*armappservice.DetectorAbnormalTimePeriod{
					{
						EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
						Solutions: []*armappservice.Solution{},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
					}},
				EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticDetectorResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticDetectorResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteDetectorSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostics_ListSiteDetectorResponsesSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectorResponses.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Detector Responses"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListSiteDetectorResponsesSlot("Sample-WestUSResourceGroup",
		"SampleApp",
		"staging",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectorResponses.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.DetectorResponseCollection{
			Value: []*armappservice.DetectorResponse{
				{
					Name: to.Ptr("runtimeavailability"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/detectors/runtimeavailability"),
					Properties: &armappservice.DetectorResponseProperties{
						Dataset: []*armappservice.DiagnosticData{},
						Metadata: &armappservice.DetectorInfo{
							Description: to.Ptr("This detector analyzes the requests to your application."),
							Category:    to.Ptr("Availability and Performance"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DetectorResponseCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DetectorResponseCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectorResponses.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectorResponsesSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Slot Detector Responses"},
	})
	client = armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager = client.ListSiteDetectorResponsesSlot("Sample-WestUSResourceGroup",
		"SampleApp",
		"staging",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectorResponsesSlot.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.DetectorResponseCollection{
			Value: []*armappservice.DetectorResponse{
				{
					Name: to.Ptr("runtimeavailability"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/slots/staging/detectors/runtimeavailability"),
					Properties: &armappservice.DetectorResponseProperties{
						Dataset: []*armappservice.DiagnosticData{},
						Metadata: &armappservice.DetectorInfo{
							Description: to.Ptr("This detector analyzes the requests to your application."),
							Category:    to.Ptr("Availability and Performance"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DetectorResponseCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DetectorResponseCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectorResponsesSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostics_GetSiteDetectorResponseSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetectorResponse.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Detector Response"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetSiteDetectorResponseSlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"runtimeavailability",
		"staging",
		&armappservice.DiagnosticsClientGetSiteDetectorResponseSlotOptions{StartTime: nil,
			EndTime:   nil,
			TimeGrain: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetectorResponse.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DetectorResponse{
			Name: to.Ptr("runtimeavailability"),
			ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/detectors/runtimeavailability"),
			Properties: &armappservice.DetectorResponseProperties{
				Dataset: []*armappservice.DiagnosticData{
					{
						RenderingProperties: &armappservice.Rendering{
							Description: to.Ptr("This detector breaks down the number of requests that your app received for each status code."),
							Title:       to.Ptr("Requests by Status Code"),
						},
						Table: &armappservice.DataTableResponseObject{
							Columns: []*armappservice.DataTableResponseColumn{
								{
									ColumnName: to.Ptr("PreciseTimeStamp"),
									ColumnType: to.Ptr("datetime"),
									DataType:   to.Ptr("DateTime"),
								},
								{
									ColumnName: to.Ptr("count_Http2xx"),
									ColumnType: to.Ptr("long"),
									DataType:   to.Ptr("Int64"),
								},
								{
									ColumnName: to.Ptr("count_Http3xx"),
									ColumnType: to.Ptr("long"),
									DataType:   to.Ptr("Int64"),
								},
								{
									ColumnName: to.Ptr("count_Http4xx"),
									ColumnType: to.Ptr("long"),
									DataType:   to.Ptr("Int64"),
								},
								{
									ColumnName: to.Ptr("count_Http5xx"),
									ColumnType: to.Ptr("long"),
									DataType:   to.Ptr("Int64"),
								}},
							Rows: [][]*string{
								{
									to.Ptr("2018-03-27T00:25:00Z"),
									to.Ptr("772705"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:30:00Z"),
									to.Ptr("787069"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:35:00Z"),
									to.Ptr("781627"),
									to.Ptr("0"),
									to.Ptr("1"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:40:00Z"),
									to.Ptr("785017"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:45:00Z"),
									to.Ptr("783518"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:50:00Z"),
									to.Ptr("785783"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:55:00Z"),
									to.Ptr("772874"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T01:00:00Z"),
									to.Ptr("787162"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T01:05:00Z"),
									to.Ptr("782036"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T01:10:00Z"),
									to.Ptr("784642"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")}},
							TableName: to.Ptr("Table_0"),
						},
					}},
				Metadata: &armappservice.DetectorInfo{
					Description: to.Ptr("This detector analyzes the requests to your application."),
					Category:    to.Ptr("Availability and Performance"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DetectorResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DetectorResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetectorResponse.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetectorResponseSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Slot Detector Response"},
	})
	client = armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err = client.GetSiteDetectorResponseSlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"runtimeavailability",
		"staging",
		&armappservice.DiagnosticsClientGetSiteDetectorResponseSlotOptions{StartTime: nil,
			EndTime:   nil,
			TimeGrain: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetectorResponseSlot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DetectorResponse{
			Name: to.Ptr("runtimeavailability"),
			ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/slots/staging/detectors/runtimeavailability"),
			Properties: &armappservice.DetectorResponseProperties{
				Dataset: []*armappservice.DiagnosticData{
					{
						RenderingProperties: &armappservice.Rendering{
							Description: to.Ptr("This detector breaks down the number of requests that your app received for each status code."),
							Title:       to.Ptr("Requests by Status Code"),
						},
						Table: &armappservice.DataTableResponseObject{
							Columns: []*armappservice.DataTableResponseColumn{
								{
									ColumnName: to.Ptr("PreciseTimeStamp"),
									ColumnType: to.Ptr("datetime"),
									DataType:   to.Ptr("DateTime"),
								},
								{
									ColumnName: to.Ptr("count_Http2xx"),
									ColumnType: to.Ptr("long"),
									DataType:   to.Ptr("Int64"),
								},
								{
									ColumnName: to.Ptr("count_Http3xx"),
									ColumnType: to.Ptr("long"),
									DataType:   to.Ptr("Int64"),
								},
								{
									ColumnName: to.Ptr("count_Http4xx"),
									ColumnType: to.Ptr("long"),
									DataType:   to.Ptr("Int64"),
								},
								{
									ColumnName: to.Ptr("count_Http5xx"),
									ColumnType: to.Ptr("long"),
									DataType:   to.Ptr("Int64"),
								}},
							Rows: [][]*string{
								{
									to.Ptr("2018-03-27T00:25:00Z"),
									to.Ptr("772705"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:30:00Z"),
									to.Ptr("787069"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:35:00Z"),
									to.Ptr("781627"),
									to.Ptr("0"),
									to.Ptr("1"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:40:00Z"),
									to.Ptr("785017"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:45:00Z"),
									to.Ptr("783518"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:50:00Z"),
									to.Ptr("785783"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T00:55:00Z"),
									to.Ptr("772874"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T01:00:00Z"),
									to.Ptr("787162"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T01:05:00Z"),
									to.Ptr("782036"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")},
								{
									to.Ptr("2018-03-27T01:10:00Z"),
									to.Ptr("784642"),
									to.Ptr("0"),
									to.Ptr("0"),
									to.Ptr("0")}},
							TableName: to.Ptr("Table_0"),
						},
					}},
				Metadata: &armappservice.DetectorInfo{
					Description: to.Ptr("This detector analyzes the requests to your application."),
					Category:    to.Ptr("Availability and Performance"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DetectorResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DetectorResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetectorResponseSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostics_ListSiteDiagnosticCategoriesSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDiagnosticCategories.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List App Diagnostic Categories"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListSiteDiagnosticCategoriesSlot("Sample-WestUSResourceGroup",
		"SampleApp",
		"Production",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDiagnosticCategories.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.DiagnosticCategoryCollection{
			Value: []*armappservice.DiagnosticCategory{
				{
					Name: to.Ptr("availability"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/diagnostics/availability"),
					Properties: &armappservice.DiagnosticCategoryProperties{
						Description: to.Ptr("Availability and Perfomance Diagnostics"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiagnosticCategoryCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiagnosticCategoryCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDiagnosticCategories.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDiagnosticCategoriesSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List App Slot Diagnostic Categories"},
	})
	client = armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager = client.ListSiteDiagnosticCategoriesSlot("Sample-WestUSResourceGroup",
		"SampleApp",
		"staging",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDiagnosticCategoriesSlot.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.DiagnosticCategoryCollection{
			Value: []*armappservice.DiagnosticCategory{
				{
					Name: to.Ptr("availability"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/slots/staging/diagnostics/availability"),
					Properties: &armappservice.DiagnosticCategoryProperties{
						Description: to.Ptr("Availability and Perfomance Diagnostics"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiagnosticCategoryCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiagnosticCategoryCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDiagnosticCategoriesSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostics_GetSiteDiagnosticCategorySlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDiagnosticCategory.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Diagnostic Category"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetSiteDiagnosticCategorySlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"Production",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDiagnosticCategory.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DiagnosticCategory{
			Name: to.Ptr("availability"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/diagnostics/availability"),
			Properties: &armappservice.DiagnosticCategoryProperties{
				Description: to.Ptr("Availability and Perfomance Diagnostics"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticCategory) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticCategory)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDiagnosticCategory.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDiagnosticCategorySlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Slot Diagnostic Category"},
	})
	client = armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err = client.GetSiteDiagnosticCategorySlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"staging",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDiagnosticCategorySlot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DiagnosticCategory{
			Name: to.Ptr("availability"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/diagnostics/availability"),
			Properties: &armappservice.DiagnosticCategoryProperties{
				Description: to.Ptr("Availability and Perfomance Diagnostics"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticCategory) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticCategory)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDiagnosticCategorySlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostics_ListSiteAnalysesSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteAnalyses.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List App Analyses"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListSiteAnalysesSlot("Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"Production",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteAnalyses.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.DiagnosticAnalysisCollection{
			Value: []*armappservice.AnalysisDefinition{
				{
					Name: to.Ptr("appanalysis"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/diagnostics/availability/analyses/appanalysis"),
					Properties: &armappservice.AnalysisDefinitionProperties{
						Description: to.Ptr("Determine causes of availability loss as well as solutions for these problems"),
					},
				},
				{
					Name: to.Ptr("apprestartanalysis"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/diagnostics/availability/analyses/apprestartanalyses"),
					Properties: &armappservice.AnalysisDefinitionProperties{
						Description: to.Ptr("Find the reasons that your app restarted"),
					},
				},
				{
					Name: to.Ptr("memoryanalysis"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/diagnostics/availability/analyses/memoryanalysis"),
					Properties: &armappservice.AnalysisDefinitionProperties{
						Description: to.Ptr("Detect issues with memory as well as suggest ways to troubleshoot memory problems"),
					},
				},
				{
					Name: to.Ptr("tcpconnectionsanalysis"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/diagnostics/availability/analyses/tcpconnectionsanalysis"),
					Properties: &armappservice.AnalysisDefinitionProperties{
						Description: to.Ptr("Analyze port usage and find out if a high number of connections is causing problems for your web app"),
					},
				},
				{
					Name: to.Ptr("perfanalysis"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/diagnostics/availability/analyses/perfanalysis"),
					Properties: &armappservice.AnalysisDefinitionProperties{
						Description: to.Ptr("Determine causes of performance degredation as well as solutions for these problems"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiagnosticAnalysisCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiagnosticAnalysisCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteAnalyses.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteAnalysesSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List App Slot Analyses"},
	})
	client = armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager = client.ListSiteAnalysesSlot("Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"staging",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteAnalysesSlot.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.DiagnosticAnalysisCollection{
			Value: []*armappservice.AnalysisDefinition{
				{
					Name: to.Ptr("appanalysis"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/slots/staging/diagnostics/availability/analyses/appanalysis"),
					Properties: &armappservice.AnalysisDefinitionProperties{
						Description: to.Ptr("Determine causes of availability loss as well as solutions for these problems"),
					},
				},
				{
					Name: to.Ptr("apprestartanalysis"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/slots/staging/diagnostics/availability/analyses/apprestartanalyses"),
					Properties: &armappservice.AnalysisDefinitionProperties{
						Description: to.Ptr("Find the reasons that your app restarted"),
					},
				},
				{
					Name: to.Ptr("memoryanalysis"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/slots/staging/diagnostics/availability/analyses/memoryanalysis"),
					Properties: &armappservice.AnalysisDefinitionProperties{
						Description: to.Ptr("Detect issues with memory as well as suggest ways to troubleshoot memory problems"),
					},
				},
				{
					Name: to.Ptr("tcpconnectionsanalysis"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/slots/staging/diagnostics/availability/analyses/tcpconnectionsanalysis"),
					Properties: &armappservice.AnalysisDefinitionProperties{
						Description: to.Ptr("Analyze port usage and find out if a high number of connections is causing problems for your web app"),
					},
				},
				{
					Name: to.Ptr("perfanalysis"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/slots/staging/diagnostics/availability/analyses/perfanalysis"),
					Properties: &armappservice.AnalysisDefinitionProperties{
						Description: to.Ptr("Determine causes of performance degredation as well as solutions for these problems"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiagnosticAnalysisCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiagnosticAnalysisCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteAnalysesSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostics_GetSiteAnalysisSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteAnalysis.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Analysis"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetSiteAnalysisSlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"appanalysis",
		"Production",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteAnalysis.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.AnalysisDefinition{
			Name: to.Ptr("appanalysis"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/slots/staging/diagnostics/availability/analyses/appanalysis"),
			Properties: &armappservice.AnalysisDefinitionProperties{
				Description: to.Ptr("Determine causes of availability loss as well as solutions for these problems"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AnalysisDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AnalysisDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteAnalysis.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteAnalysisSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Slot Analysis"},
	})
	client = armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err = client.GetSiteAnalysisSlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"appanalysis",
		"staging",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteAnalysisSlot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.AnalysisDefinition{
			Name: to.Ptr("appanalysis"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/slots/staging/diagnostics/availability/analyses/appanalysis"),
			Properties: &armappservice.AnalysisDefinitionProperties{
				Description: to.Ptr("Determine causes of availability loss as well as solutions for these problems"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AnalysisDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AnalysisDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteAnalysisSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostics_ExecuteSiteAnalysisSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteAnalysis.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute site analysis"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.ExecuteSiteAnalysisSlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"apprestartanalyses",
		"Production",
		&armappservice.DiagnosticsClientExecuteSiteAnalysisSlotOptions{StartTime: nil,
			EndTime:   nil,
			TimeGrain: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteAnalysis.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DiagnosticAnalysis{
			Name: to.Ptr("apprestartanalysis"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/diagnostics/availability/analyses/apprestartanalyses"),
			Properties: &armappservice.DiagnosticAnalysisProperties{
				AbnormalTimePeriods: []*armappservice.AbnormalTimePeriod{
					{
						EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
						Events: []*armappservice.DetectorAbnormalTimePeriod{
							{
								Type:    to.Ptr(armappservice.IssueTypeServiceIncident),
								EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:21:48Z"); return t }()),
								Message: to.Ptr("Your application process was restarted as application environment variables changed. This can most likely occur due to update in app settings or swap operation. This event occurred multiple times during the day."),
								MetaData: [][]*armappservice.NameValuePair{
									{
										{
											Name:  to.Ptr("feature"),
											Value: to.Ptr("auditlogs"),
										},
										{
											Name:  to.Ptr("displayedName"),
											Value: to.Ptr("Check Audit Logs"),
										}}},
								Priority:  to.Ptr[float64](0),
								Solutions: []*armappservice.Solution{},
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:21:50Z"); return t }()),
							}},
						Solutions: []*armappservice.Solution{},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
					}},
				EndTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
				NonCorrelatedDetectors: []*armappservice.DetectorDefinition{},
				Payload: []*armappservice.AnalysisData{
					{
						Data: [][]*armappservice.NameValuePair{},
						Metrics: []*armappservice.DiagnosticMetricSet{
							{
								Name:      to.Ptr("All Application Stop Events"),
								EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
								TimeGrain: to.Ptr("00:05:00"),
								Values: []*armappservice.DiagnosticMetricSample{
									{
										RoleInstance: to.Ptr("RD00155D3C15BE"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T00:00:00Z"); return t }()),
										Total:        to.Ptr[float64](2),
									},
									{
										IsAggregated: to.Ptr(true),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T00:00:00Z"); return t }()),
										Total:        to.Ptr[float64](2),
									},
									{
										RoleInstance: to.Ptr("RD00155D3C15C1"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T00:10:00Z"); return t }()),
										Total:        to.Ptr[float64](2),
									},
									{
										RoleInstance: to.Ptr("RD00155D3BE0FB"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T00:10:00Z"); return t }()),
										Total:        to.Ptr[float64](2),
									},
									{
										IsAggregated: to.Ptr(true),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T00:10:00Z"); return t }()),
										Total:        to.Ptr[float64](4),
									}},
							},
							{
								Name:      to.Ptr("User Events"),
								EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
								TimeGrain: to.Ptr("00:05:00"),
								Unit:      to.Ptr(""),
								Values: []*armappservice.DiagnosticMetricSample{
									{
										IsAggregated: to.Ptr(true),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:20:00Z"); return t }()),
										Total:        to.Ptr[float64](3),
									},
									{
										RoleInstance: to.Ptr("RD00155D3C09FC"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:20:00Z"); return t }()),
										Total:        to.Ptr[float64](1),
									},
									{
										RoleInstance: to.Ptr("RD00155D3C2ADC"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:20:00Z"); return t }()),
										Total:        to.Ptr[float64](1),
									},
									{
										RoleInstance: to.Ptr("RD00155D3C214E"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:20:00Z"); return t }()),
										Total:        to.Ptr[float64](1),
									}},
							}},
						Source: to.Ptr("workerprocessrecycle"),
					}},
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticAnalysis) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticAnalysis)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteAnalysis.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteAnalysisSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute site slot analysis"},
	})
	client = armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err = client.ExecuteSiteAnalysisSlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"apprestartanalyses",
		"staging",
		&armappservice.DiagnosticsClientExecuteSiteAnalysisSlotOptions{StartTime: nil,
			EndTime:   nil,
			TimeGrain: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteAnalysisSlot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DiagnosticAnalysis{
			Name: to.Ptr("apprestartanalysis"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/slots/staging/diagnostics/availability/analyses/apprestartanalyses"),
			Properties: &armappservice.DiagnosticAnalysisProperties{
				AbnormalTimePeriods: []*armappservice.AbnormalTimePeriod{
					{
						EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
						Events: []*armappservice.DetectorAbnormalTimePeriod{
							{
								Type:    to.Ptr(armappservice.IssueTypeServiceIncident),
								EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:21:48Z"); return t }()),
								Message: to.Ptr("Your application process was restarted as application environment variables changed. This can most likely occur due to update in app settings or swap operation. This event occurred multiple times during the day."),
								MetaData: [][]*armappservice.NameValuePair{
									{
										{
											Name:  to.Ptr("feature"),
											Value: to.Ptr("auditlogs"),
										},
										{
											Name:  to.Ptr("displayedName"),
											Value: to.Ptr("Check Audit Logs"),
										}}},
								Priority:  to.Ptr[float64](0),
								Solutions: []*armappservice.Solution{},
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:21:50Z"); return t }()),
							}},
						Solutions: []*armappservice.Solution{},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
					}},
				EndTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
				NonCorrelatedDetectors: []*armappservice.DetectorDefinition{},
				Payload: []*armappservice.AnalysisData{
					{
						Data: [][]*armappservice.NameValuePair{},
						Metrics: []*armappservice.DiagnosticMetricSet{
							{
								Name:      to.Ptr("All Application Stop Events"),
								EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
								TimeGrain: to.Ptr("00:05:00"),
								Values: []*armappservice.DiagnosticMetricSample{
									{
										RoleInstance: to.Ptr("RD00155D3C15BE"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T00:00:00Z"); return t }()),
										Total:        to.Ptr[float64](2),
									},
									{
										IsAggregated: to.Ptr(true),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T00:00:00Z"); return t }()),
										Total:        to.Ptr[float64](2),
									},
									{
										RoleInstance: to.Ptr("RD00155D3C15C1"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T00:10:00Z"); return t }()),
										Total:        to.Ptr[float64](2),
									},
									{
										RoleInstance: to.Ptr("RD00155D3BE0FB"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T00:10:00Z"); return t }()),
										Total:        to.Ptr[float64](2),
									},
									{
										IsAggregated: to.Ptr(true),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T00:10:00Z"); return t }()),
										Total:        to.Ptr[float64](4),
									}},
							},
							{
								Name:      to.Ptr("User Events"),
								EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
								TimeGrain: to.Ptr("00:05:00"),
								Unit:      to.Ptr(""),
								Values: []*armappservice.DiagnosticMetricSample{
									{
										IsAggregated: to.Ptr(true),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:20:00Z"); return t }()),
										Total:        to.Ptr[float64](3),
									},
									{
										RoleInstance: to.Ptr("RD00155D3C09FC"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:20:00Z"); return t }()),
										Total:        to.Ptr[float64](1),
									},
									{
										RoleInstance: to.Ptr("RD00155D3C2ADC"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:20:00Z"); return t }()),
										Total:        to.Ptr[float64](1),
									},
									{
										RoleInstance: to.Ptr("RD00155D3C214E"),
										Timestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:20:00Z"); return t }()),
										Total:        to.Ptr[float64](1),
									}},
							}},
						Source: to.Ptr("workerprocessrecycle"),
					}},
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticAnalysis) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticAnalysis)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteAnalysisSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostics_ListSiteDetectorsSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectors.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List App Detectors"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListSiteDetectorsSlot("Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"Production",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectors.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.DiagnosticDetectorCollection{
			Value: []*armappservice.DetectorDefinitionResource{
				{
					Name: to.Ptr("servicehealth"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/servicehealth"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Service Health"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](1),
					},
				},
				{
					Name: to.Ptr("siteswap"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/siteswap"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Site Swap Operations"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](8),
					},
				},
				{
					Name: to.Ptr("sitecrashes"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/sitecrashes"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Site Crash Events"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](9),
					},
				},
				{
					Name: to.Ptr("deployment"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/deployment"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Site Deployments"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](7),
					},
				},
				{
					Name: to.Ptr("sitecpuanalysis"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/sitecpuanalysis"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("CPU Analysis"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](3),
					},
				},
				{
					Name: to.Ptr("sitememoryanalysis"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/sitememoryanalysis"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Physical Memory Analysis"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](3),
					},
				},
				{
					Name: to.Ptr("committedmemoryusage"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/committedmemoryusage"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Committed Memory Usage"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](7),
					},
				},
				{
					Name: to.Ptr("pagefileoperations"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/pagefileoperations"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Page File Operations"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](3),
					},
				},
				{
					Name: to.Ptr("siterestartuserinitiated"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/siterestartuserinitiated"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("User Initiated Site Restarts"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](14),
					},
				},
				{
					Name: to.Ptr("siterestartsettingupdate"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/siterestartsettingupdate"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Config Update Site Restarts"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](12),
					},
				},
				{
					Name: to.Ptr("frebanalysis"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/frebanalysis"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Freb Logs Analysis"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](6),
					},
				},
				{
					Name: to.Ptr("workeravailability"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/workeravailability"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Worker Availability"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](11),
					},
				},
				{
					Name: to.Ptr("sitelatency"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/sitelatency"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Site Latency"),
						IsEnabled:   to.Ptr(false),
						Rank:        to.Ptr[float64](1005),
					},
				},
				{
					Name: to.Ptr("threadcount"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/threadcount"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Thread Count"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](23),
					},
				},
				{
					Name: to.Ptr("failedrequestsperuri"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/failedrequestsperuri"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Failed Requests Per URI"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](998),
					},
				},
				{
					Name: to.Ptr("autoheal"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/autoheal"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("AutoHeal"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](21),
					},
				},
				{
					Name: to.Ptr("loganalyzer"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/loganalyzer"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("PHP Log Analyzer"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](26),
					},
				},
				{
					Name: to.Ptr("aspnetcore"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/aspnetcore"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("ASP.NET Core"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](5),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiagnosticDetectorCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiagnosticDetectorCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectors.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectorsSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List App Slot Detectors"},
	})
	client = armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager = client.ListSiteDetectorsSlot("Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"staging",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectorsSlot.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.DiagnosticDetectorCollection{
			Value: []*armappservice.DetectorDefinitionResource{
				{
					Name: to.Ptr("servicehealth"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/slots/staging/diagnostics/availability/detectors/servicehealth"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Service Health"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](1),
					},
				},
				{
					Name: to.Ptr("siteswap"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/slots/staging/diagnostics/availability/detectors/siteswap"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Site Swap Operations"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](8),
					},
				},
				{
					Name: to.Ptr("sitecrashes"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/slots/staging/diagnostics/availability/detectors/sitecrashes"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Site Crash Events"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](9),
					},
				},
				{
					Name: to.Ptr("deployment"),
					ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/slots/staging/diagnostics/availability/detectors/deployment"),
					Properties: &armappservice.DetectorDefinition{
						DisplayName: to.Ptr("Site Deployments"),
						IsEnabled:   to.Ptr(true),
						Rank:        to.Ptr[float64](7),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiagnosticDetectorCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiagnosticDetectorCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ListSiteDetectorsSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostics_GetSiteDetectorSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetector.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Detector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetSiteDetectorSlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"sitecrashes",
		"Production",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetector.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DetectorDefinitionResource{
			Name: to.Ptr("sitecrashes"),
			ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/diagnostics/availability/detectors/sitecrashes"),
			Properties: &armappservice.DetectorDefinition{
				DisplayName: to.Ptr("Site Crash Events"),
				IsEnabled:   to.Ptr(true),
				Rank:        to.Ptr[float64](9),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DetectorDefinitionResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DetectorDefinitionResource)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetector.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetectorSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get App Slot Detector"},
	})
	client = armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err = client.GetSiteDetectorSlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"sitecrashes",
		"staging",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetectorSlot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DetectorDefinitionResource{
			Name: to.Ptr("sitecrashes"),
			ID:   to.Ptr("/subscriptions/ef90e930-9d7f-4a60-8a99-748e0eea69de/resourceGroups/Build2015DemoRG/providers/Microsoft.Web/sites/BuggyBakery/slots/staging/diagnostics/availability/detectors/sitecrashes"),
			Properties: &armappservice.DetectorDefinition{
				DisplayName: to.Ptr("Site Crash Events"),
				IsEnabled:   to.Ptr(true),
				Rank:        to.Ptr[float64](9),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DetectorDefinitionResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DetectorDefinitionResource)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_GetSiteDetectorSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiagnostics_ExecuteSiteDetectorSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteDetector.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute site detector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.ExecuteSiteDetectorSlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"sitecrashes",
		"availability",
		"Production",
		&armappservice.DiagnosticsClientExecuteSiteDetectorSlotOptions{StartTime: nil,
			EndTime:   nil,
			TimeGrain: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteDetector.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DiagnosticDetectorResponse{
			Name: to.Ptr("sitecrashes"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/diagnostics/availability/detectors/sitecrashes"),
			Properties: &armappservice.DiagnosticDetectorResponseProperties{
				AbnormalTimePeriods: []*armappservice.DetectorAbnormalTimePeriod{
					{
						EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
						Solutions: []*armappservice.Solution{},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
					}},
				EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticDetectorResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticDetectorResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteDetector.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteDetectorSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Execute site slot detector"},
	})
	client = armappservice.NewDiagnosticsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err = client.ExecuteSiteDetectorSlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"sitecrashes",
		"availability",
		"staging",
		&armappservice.DiagnosticsClientExecuteSiteDetectorSlotOptions{StartTime: nil,
			EndTime:   nil,
			TimeGrain: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteDetectorSlot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DiagnosticDetectorResponse{
			Name: to.Ptr("sitecrashes"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/Sample-WestUSResourceGroup/providers/Microsoft.Web/sites/SampleApp/slots/staging/diagnostics/availability/detectors/sitecrashes"),
			Properties: &armappservice.DiagnosticDetectorResponseProperties{
				AbnormalTimePeriods: []*armappservice.DetectorAbnormalTimePeriod{
					{
						EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
						Solutions: []*armappservice.Solution{},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
					}},
				EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-06T22:50:00Z"); return t }()),
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T22:50:00Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiagnosticDetectorResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiagnosticDetectorResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/Diagnostics_ExecuteSiteDetectorSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGlobal_GetDeletedWebApp(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetDeletedWebApp.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Deleted Web App"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewGlobalClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetDeletedWebApp(ctx,
		"9",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetDeletedWebApp.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.DeletedSite{
			Name: to.Ptr("wussite6"),
			Type: to.Ptr("Microsoft.Web/deletedSites"),
			Properties: &armappservice.DeletedSiteProperties{
				DeletedSiteID:    to.Ptr[int32](9),
				DeletedSiteName:  to.Ptr("wussite6"),
				DeletedTimestamp: to.Ptr("2019-05-09T22:29:05.1337007"),
				GeoRegionName:    to.Ptr("West US 2"),
				Kind:             to.Ptr("app"),
				ResourceGroup:    to.Ptr("rg1"),
				Slot:             to.Ptr("Production"),
				Subscription:     to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeletedSite) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeletedSite)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetDeletedWebApp.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGlobal_GetDeletedWebAppSnapshots(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetDeletedWebAppSnapshots.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Deleted Web App Snapshots"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewGlobalClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetDeletedWebAppSnapshots(ctx,
		"9",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetDeletedWebAppSnapshots.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armappservice.Snapshot{
			{
				Name: to.Ptr("wussite6"),
				Type: to.Ptr("Microsoft.Web/locations/deletedSites"),
				Properties: &armappservice.SnapshotProperties{
					Time: to.Ptr("2019-05-09T22:29:05.1337007"),
				},
			}}
		if !reflect.DeepEqual(exampleRes, res.SnapshotArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SnapshotArray)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetDeletedWebAppSnapshots.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGlobal_GetSubscriptionOperationWithAsyncResponse(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSubscriptionOperationWithAsyncResponse.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets an operation in a subscription and given region"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewGlobalClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.GetSubscriptionOperationWithAsyncResponse(ctx,
		"West US",
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab5d5",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSubscriptionOperationWithAsyncResponse.json: %v", err)
	}
}

func TestKubeEnvironments_ListBySubscription(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/KubeEnvironments_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List kube environments by subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewKubeEnvironmentsClient("8efdecc5-919e-44eb-b179-915dca89ebf9", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/KubeEnvironments_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.KubeEnvironmentCollection{
			Value: []*armappservice.KubeEnvironment{
				{
					Name:     to.Ptr("jlaw-demo1"),
					Type:     to.Ptr("Microsoft.Web/kubeEnvironments"),
					ID:       to.Ptr("/subscriptions/8efdecc5-919e-44eb-b179-915dca89ebf9/resourceGroups/examplerg/providers/Microsoft.Web/kubeEnvironments/jlaw-demo1"),
					Location: to.Ptr("North Central US"),
					Tags:     map[string]*string{},
					Properties: &armappservice.KubeEnvironmentProperties{
						DefaultDomain:               to.Ptr("jlaw-demo1.k4apps.io"),
						InternalLoadBalancerEnabled: to.Ptr(false),
						ProvisioningState:           to.Ptr(armappservice.KubeEnvironmentProvisioningStateSucceeded),
						StaticIP:                    to.Ptr("20.42.33.145"),
					},
				},
				{
					Name:     to.Ptr("demo1"),
					Type:     to.Ptr("Microsoft.Web/kubeEnvironments"),
					ID:       to.Ptr("/subscriptions/8efdecc5-919e-44eb-b179-915dca89ebf9/resourceGroups/DemoRG/providers/Microsoft.Web/kubeEnvironments/demo1"),
					Location: to.Ptr("North Central US"),
					Tags:     map[string]*string{},
					Properties: &armappservice.KubeEnvironmentProperties{
						DefaultDomain:               to.Ptr("demo1.k4apps.io"),
						InternalLoadBalancerEnabled: to.Ptr(false),
						ProvisioningState:           to.Ptr(armappservice.KubeEnvironmentProvisioningStateSucceeded),
						StaticIP:                    to.Ptr("52.142.21.61"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.KubeEnvironmentCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.KubeEnvironmentCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/KubeEnvironments_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKubeEnvironments_ListByResourceGroup(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/KubeEnvironments_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List kube environments by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewKubeEnvironmentsClient("8efdecc5-919e-44eb-b179-915dca89ebf9", cred, &options)
	pager := client.ListByResourceGroup("examplerg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/KubeEnvironments_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.KubeEnvironmentCollection{
			Value: []*armappservice.KubeEnvironment{
				{
					Name:     to.Ptr("jlaw-demo1"),
					Type:     to.Ptr("Microsoft.Web/kubeEnvironments"),
					ID:       to.Ptr("/subscriptions/8efdecc5-919e-44eb-b179-915dca89ebf9/resourceGroups/examplerg/providers/Microsoft.Web/kubeEnvironments/jlaw-demo1"),
					Location: to.Ptr("North Central US"),
					Tags:     map[string]*string{},
					ExtendedLocation: &armappservice.ExtendedLocation{
						Name: to.Ptr("/subscriptions/8efdecc5-919e-44eb-b179-915dca89ebf9/resourceGroups/examplerg/providers/Microsoft.ExtendedLocation/customLocations/testcustomlocation"),
						Type: to.Ptr("customLocation"),
					},
					Properties: &armappservice.KubeEnvironmentProperties{
						DefaultDomain:               to.Ptr("jlaw-demo1.k4apps.io"),
						InternalLoadBalancerEnabled: to.Ptr(false),
						ProvisioningState:           to.Ptr(armappservice.KubeEnvironmentProvisioningStateSucceeded),
						StaticIP:                    to.Ptr("20.42.33.145"),
					},
				},
				{
					Name:     to.Ptr("demo1"),
					Type:     to.Ptr("Microsoft.Web/kubeEnvironments"),
					ID:       to.Ptr("/subscriptions/8efdecc5-919e-44eb-b179-915dca89ebf9/resourceGroups/examplerg/providers/Microsoft.Web/kubeEnvironments/demo1"),
					Location: to.Ptr("North Central US"),
					Tags:     map[string]*string{},
					ExtendedLocation: &armappservice.ExtendedLocation{
						Name: to.Ptr("/subscriptions/8efdecc5-919e-44eb-b179-915dca89ebf9/resourceGroups/examplerg/providers/Microsoft.ExtendedLocation/customLocations/testcustomlocation"),
						Type: to.Ptr("customLocation"),
					},
					Properties: &armappservice.KubeEnvironmentProperties{
						DefaultDomain:               to.Ptr("demo1.k4apps.io"),
						InternalLoadBalancerEnabled: to.Ptr(false),
						ProvisioningState:           to.Ptr(armappservice.KubeEnvironmentProvisioningStateSucceeded),
						StaticIP:                    to.Ptr("52.142.21.61"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.KubeEnvironmentCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.KubeEnvironmentCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/KubeEnvironments_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKubeEnvironments_Get(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/KubeEnvironments_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get kube environments by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewKubeEnvironmentsClient("8efdecc5-919e-44eb-b179-915dca89ebf9", cred, &options)
	res, err := client.Get(ctx,
		"examplerg",
		"jlaw-demo1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/KubeEnvironments_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.KubeEnvironment{
			Name:     to.Ptr("jlaw-demo1"),
			Type:     to.Ptr("Microsoft.Web/kubeEnvironments"),
			ID:       to.Ptr("/subscriptions/8efdecc5-919e-44eb-b179-915dca89ebf9/resourceGroups/examplerg/providers/Microsoft.Web/kubeEnvironments/jlaw-demo1"),
			Location: to.Ptr("North Central US"),
			Tags:     map[string]*string{},
			ExtendedLocation: &armappservice.ExtendedLocation{
				Name: to.Ptr("/subscriptions/8efdecc5-919e-44eb-b179-915dca89ebf9/resourceGroups/examplerg/providers/Microsoft.ExtendedLocation/customLocations/testcustomlocation"),
				Type: to.Ptr("customLocation"),
			},
			Properties: &armappservice.KubeEnvironmentProperties{
				AksResourceID:               to.Ptr("/subscriptions/8efdecc5-919e-44eb-b179-915dca89ebf9/resourceGroups/examplerg/providers/Microsoft.ContainerService/managedClusters/jlaw-demo1"),
				DefaultDomain:               to.Ptr("jlaw-demo1.k4apps.io"),
				InternalLoadBalancerEnabled: to.Ptr(false),
				ProvisioningState:           to.Ptr(armappservice.KubeEnvironmentProvisioningStateSucceeded),
				StaticIP:                    to.Ptr("20.42.33.145"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.KubeEnvironment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.KubeEnvironment)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/KubeEnvironments_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKubeEnvironments_CreateOrUpdate(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/KubeEnvironments_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create kube environments"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewKubeEnvironmentsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"examplerg",
		"testkubeenv",
		armappservice.KubeEnvironment{
			Location: to.Ptr("East US"),
			Properties: &armappservice.KubeEnvironmentProperties{
				StaticIP: to.Ptr("1.2.3.4"),
			},
		},
		&armappservice.KubeEnvironmentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/KubeEnvironments_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/KubeEnvironments_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.KubeEnvironment{
			Name:     to.Ptr("testkubeenv"),
			Type:     to.Ptr("Microsoft.Web/kubeEnvironments"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/examplerg/providers/Microsoft.Web/kubeEnvironments/testkubeenv"),
			Location: to.Ptr("East US"),
			Tags:     map[string]*string{},
			ExtendedLocation: &armappservice.ExtendedLocation{
				Name: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/examplerg/providers/Microsoft.ExtendedLocation/customLocations/testcustomlocation"),
				Type: to.Ptr("customLocation"),
			},
			Properties: &armappservice.KubeEnvironmentProperties{
				AksResourceID:               to.Ptr("test"),
				DefaultDomain:               to.Ptr("testkubeenv.k4apps.io"),
				InternalLoadBalancerEnabled: to.Ptr(false),
				ProvisioningState:           to.Ptr(armappservice.KubeEnvironmentProvisioningStateSucceeded),
				StaticIP:                    to.Ptr("1.2.3.4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.KubeEnvironment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.KubeEnvironment)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/KubeEnvironments_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKubeEnvironments_Delete(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/KubeEnvironments_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete kube environment by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewKubeEnvironmentsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"examplerg",
		"examplekenv",
		&armappservice.KubeEnvironmentsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/KubeEnvironments_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/KubeEnvironments_Delete.json: %v", err)
	}
}

func TestKubeEnvironments_Update(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/KubeEnvironments_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update kube environments"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewKubeEnvironmentsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Update(ctx,
		"examplerg",
		"testkubeenv",
		armappservice.KubeEnvironmentPatchResource{
			Properties: &armappservice.KubeEnvironmentPatchResourceProperties{
				StaticIP: to.Ptr("1.2.3.4"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/KubeEnvironments_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.KubeEnvironment{
			Name:     to.Ptr("testkubeenv"),
			Type:     to.Ptr("Microsoft.Web/kubeEnvironments"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/examplerg/providers/Microsoft.Web/kubeEnvironments/testkubeenv"),
			Location: to.Ptr("East US"),
			Tags:     map[string]*string{},
			ExtendedLocation: &armappservice.ExtendedLocation{
				Name: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/examplerg/providers/Microsoft.ExtendedLocation/customLocations/testcustomlocation"),
				Type: to.Ptr("customLocation"),
			},
			Properties: &armappservice.KubeEnvironmentProperties{
				AksResourceID:               to.Ptr("test"),
				DefaultDomain:               to.Ptr("testkubeenv.k4apps.io"),
				InternalLoadBalancerEnabled: to.Ptr(false),
				ProvisioningState:           to.Ptr(armappservice.KubeEnvironmentProvisioningStateSucceeded),
				StaticIP:                    to.Ptr("1.2.3.4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.KubeEnvironment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.KubeEnvironment)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/KubeEnvironments_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProvider_GetAvailableStacks(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestProvider_GetFunctionAppStacks(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetFunctionAppStacks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Function App Stacks"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewProviderClient("<subscription-id>", cred, &options)
	pager := client.GetFunctionAppStacks(&armappservice.ProviderClientGetFunctionAppStacksOptions{StackOsType: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetFunctionAppStacks.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.FunctionAppStackCollection{
			Value: []*armappservice.FunctionAppStack{
				{
					Name: to.Ptr("dotnet"),
					Type: to.Ptr("Microsoft.Web/functionAppStacks"),
					ID:   to.Ptr("/providers/Microsoft.Web/functionAppStacks/dotnet"),
					Properties: &armappservice.FunctionAppStackProperties{
						DisplayText: to.Ptr(".NET"),
						MajorVersions: []*armappservice.FunctionAppMajorVersion{
							{
								DisplayText: to.Ptr(".NET Core 3"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr(".NET Core 3.1"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											LinuxRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("dotnet"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.1.301"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("dotnet|3.1"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													LinuxFxVersion:        to.Ptr("dotnet|3.1"),
													Use32BitWorkerProcess: to.Ptr(false),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3")},
											},
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("dotnet"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.1.301"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("3.1"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3")},
											},
										},
										Value: to.Ptr("3.1"),
									}},
								Value: to.Ptr("3"),
							},
							{
								DisplayText: to.Ptr(".NET Core 2"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr(".NET Core 2.2"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											LinuxRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("dotnet"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("2.2.207"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("dotnet|2.2"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													LinuxFxVersion:        to.Ptr("dotnet|2.2"),
													Use32BitWorkerProcess: to.Ptr(false),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~2")},
											},
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("dotnet"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("2.2.207"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("2.2"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~2")},
											},
										},
										Value: to.Ptr("2.2"),
									}},
								Value: to.Ptr("2"),
							},
							{
								DisplayText: to.Ptr(".NET Framework 4"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr(".NET Framework 4.7"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("4.7"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~1")},
											},
										},
										Value: to.Ptr("4.7"),
									}},
								Value: to.Ptr("2"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsWindows),
						Value:       to.Ptr("dotnet"),
					},
				},
				{
					Name: to.Ptr("node"),
					Type: to.Ptr("Microsoft.Web/functionAppStacks"),
					ID:   to.Ptr("/providers/Microsoft.Web/functionAppStacks/node"),
					Properties: &armappservice.FunctionAppStackProperties{
						DisplayText: to.Ptr("Node.js"),
						MajorVersions: []*armappservice.FunctionAppMajorVersion{
							{
								DisplayText: to.Ptr("Node.js 14"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr("Node.js 14 LTS"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											LinuxRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("node"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("14.x"),
												},
												IsHidden:                 to.Ptr(true),
												IsPreview:                to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("Node|14"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													LinuxFxVersion:        to.Ptr("Node|14"),
													Use32BitWorkerProcess: to.Ptr(false),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3")},
											},
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME":     to.Ptr("node"),
													"WEBSITE_NODE_DEFAULT_VERSION": to.Ptr("~14"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("14.x"),
												},
												IsHidden:                 to.Ptr(true),
												IsPreview:                to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("~14"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3")},
											},
										},
										Value: to.Ptr("14 LTS"),
									}},
								Value: to.Ptr("14"),
							},
							{
								DisplayText: to.Ptr("Node.js 12"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr("Node.js 12 LTS"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											LinuxRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("node"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("12.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("Node|12"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													LinuxFxVersion:        to.Ptr("Node|12"),
													Use32BitWorkerProcess: to.Ptr(false),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3")},
											},
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME":     to.Ptr("node"),
													"WEBSITE_NODE_DEFAULT_VERSION": to.Ptr("~12"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("12.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("~12"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3")},
											},
										},
										Value: to.Ptr("12 LTS"),
									}},
								Value: to.Ptr("12"),
							},
							{
								DisplayText: to.Ptr("Node.js 10"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr("Node.js 10 LTS"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											LinuxRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("node"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("Node|10"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													LinuxFxVersion:        to.Ptr("Node|10"),
													Use32BitWorkerProcess: to.Ptr(false),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~2"),
													to.Ptr("~3")},
											},
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME":     to.Ptr("node"),
													"WEBSITE_NODE_DEFAULT_VERSION": to.Ptr("~10"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("~10"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~2"),
													to.Ptr("~3")},
											},
										},
										Value: to.Ptr("10 LTS"),
									}},
								Value: to.Ptr("10"),
							},
							{
								DisplayText: to.Ptr("Node.js 8"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr("Node.js 8 LTS"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME":     to.Ptr("node"),
													"WEBSITE_NODE_DEFAULT_VERSION": to.Ptr("~8"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("~8"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~2")},
											},
										},
										Value: to.Ptr("8 LTS"),
									}},
								Value: to.Ptr("8"),
							},
							{
								DisplayText: to.Ptr("Node.js 6"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr("Node.js 6 LTS"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"WEBSITE_NODE_DEFAULT_VERSION": to.Ptr("~6"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("~6"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~1")},
											},
										},
										Value: to.Ptr("6 LTS"),
									}},
								Value: to.Ptr("6"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsWindows),
						Value:       to.Ptr("node"),
					},
				},
				{
					Name: to.Ptr("python"),
					Type: to.Ptr("Microsoft.Web/functionAppStacks"),
					ID:   to.Ptr("/providers/Microsoft.Web/functionAppStacks/python"),
					Properties: &armappservice.FunctionAppStackProperties{
						DisplayText: to.Ptr("Python"),
						MajorVersions: []*armappservice.FunctionAppMajorVersion{
							{
								DisplayText: to.Ptr("Python 3"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr("Python 3.8"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											LinuxRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("python"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("Python|3.8"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													LinuxFxVersion:        to.Ptr("Python|3.8"),
													Use32BitWorkerProcess: to.Ptr(false),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3")},
											},
										},
										Value: to.Ptr("3.8"),
									},
									{
										DisplayText: to.Ptr("Python 3.7"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											LinuxRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("python"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.7"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("Python|3.7"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													LinuxFxVersion:        to.Ptr("Python|3.7"),
													Use32BitWorkerProcess: to.Ptr(false),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~2"),
													to.Ptr("~3")},
											},
										},
										Value: to.Ptr("3.7"),
									},
									{
										DisplayText: to.Ptr("Python 3.6"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											LinuxRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("python"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.6"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("Python|3.6"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													LinuxFxVersion:        to.Ptr("Python|3.6"),
													Use32BitWorkerProcess: to.Ptr(false),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~2"),
													to.Ptr("~3")},
											},
										},
										Value: to.Ptr("3.6"),
									}},
								Value: to.Ptr("3"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsLinux),
						Value:       to.Ptr("python"),
					},
				},
				{
					Name: to.Ptr("java"),
					Type: to.Ptr("Microsoft.Web/functionAppStacks"),
					ID:   to.Ptr("/providers/Microsoft.Web/functionAppStacks/java"),
					Properties: &armappservice.FunctionAppStackProperties{
						DisplayText: to.Ptr("Java"),
						MajorVersions: []*armappservice.FunctionAppMajorVersion{
							{
								DisplayText: to.Ptr("Java 11"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr("Java 11"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											LinuxRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("java"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												IsAutoUpdate:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("Java|11"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													LinuxFxVersion:        to.Ptr("Java|11"),
													Use32BitWorkerProcess: to.Ptr(false),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3")},
											},
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("java"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												IsAutoUpdate:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("11"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													JavaVersion:           to.Ptr("11"),
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3")},
											},
										},
										Value: to.Ptr("11.0"),
									}},
								Value: to.Ptr("11"),
							},
							{
								DisplayText: to.Ptr("Java 8"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr("Java 8"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											LinuxRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("java"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												IsAutoUpdate:             to.Ptr(true),
												IsDefault:                to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("Java|8"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													LinuxFxVersion:        to.Ptr("Java|8"),
													Use32BitWorkerProcess: to.Ptr(false),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3")},
											},
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("java"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												IsAutoUpdate:             to.Ptr(true),
												IsDefault:                to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													JavaVersion:           to.Ptr("1.8"),
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~2"),
													to.Ptr("~3")},
											},
										},
										Value: to.Ptr("8.0"),
									}},
								Value: to.Ptr("8"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsWindows),
						Value:       to.Ptr("java"),
					},
				},
				{
					Name: to.Ptr("powershell"),
					Type: to.Ptr("Microsoft.Web/functionAppStacks"),
					ID:   to.Ptr("/providers/Microsoft.Web/functionAppStacks/powershell"),
					Properties: &armappservice.FunctionAppStackProperties{
						DisplayText: to.Ptr("PowerShell Core"),
						MajorVersions: []*armappservice.FunctionAppMajorVersion{
							{
								DisplayText: to.Ptr("PowerShell 7"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr("PowerShell 7.0"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("powershell"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("~7"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													PowerShellVersion:     to.Ptr("~7"),
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3")},
											},
										},
										Value: to.Ptr("7.0"),
									}},
								Value: to.Ptr("7"),
							},
							{
								DisplayText: to.Ptr("PowerShell Core 6"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr("PowerShell Core 6.2"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("powershell"),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-04T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("~6"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													PowerShellVersion:     to.Ptr("~6"),
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~2"),
													to.Ptr("~3")},
											},
										},
										Value: to.Ptr("6.2"),
									}},
								Value: to.Ptr("6"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsWindows),
						Value:       to.Ptr("powershell"),
					},
				},
				{
					Name: to.Ptr("custom"),
					Type: to.Ptr("Microsoft.Web/functionAppStacks"),
					ID:   to.Ptr("/providers/Microsoft.Web/functionAppStacks/custom"),
					Properties: &armappservice.FunctionAppStackProperties{
						DisplayText: to.Ptr("Custom"),
						MajorVersions: []*armappservice.FunctionAppMajorVersion{
							{
								DisplayText: to.Ptr("Custom"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr("Custom Handler"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											LinuxRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("custom"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsPreview:                to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr(""),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													LinuxFxVersion:        to.Ptr(""),
													Use32BitWorkerProcess: to.Ptr(false),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3"),
													to.Ptr("~2")},
											},
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("custom"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsPreview:                to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("custom"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3"),
													to.Ptr("~2")},
											},
										},
										Value: to.Ptr("custom"),
									}},
								Value: to.Ptr("custom"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsWindows),
						Value:       to.Ptr("custom"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FunctionAppStackCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FunctionAppStackCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetFunctionAppStacks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProvider_GetFunctionAppStacksForLocation(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetFunctionAppStacksForLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Locations Function App Stacks"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewProviderClient("<subscription-id>", cred, &options)
	pager := client.GetFunctionAppStacksForLocation("westus",
		&armappservice.ProviderClientGetFunctionAppStacksForLocationOptions{StackOsType: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetFunctionAppStacksForLocation.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.FunctionAppStackCollection{
			Value: []*armappservice.FunctionAppStack{
				{
					Name:     to.Ptr("dotnet"),
					Type:     to.Ptr("Microsoft.Web/locations/functionAppStacks"),
					ID:       to.Ptr("/providers/Microsoft.Web/locations/functionAppStacks/dotnet"),
					Location: to.Ptr("westus"),
					Properties: &armappservice.FunctionAppStackProperties{
						DisplayText: to.Ptr(".NET"),
						MajorVersions: []*armappservice.FunctionAppMajorVersion{
							{
								DisplayText: to.Ptr(".NET Core 3"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr(".NET Core 3.1"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											LinuxRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("dotnet"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.1.301"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("dotnet|3.1"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													LinuxFxVersion:        to.Ptr("dotnet|3.1"),
													Use32BitWorkerProcess: to.Ptr(false),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3")},
											},
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("dotnet"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.1.301"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("3.1"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3")},
											},
										},
										Value: to.Ptr("3.1"),
									}},
								Value: to.Ptr("3"),
							},
							{
								DisplayText: to.Ptr(".NET Core 2"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr(".NET Core 2.2"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											LinuxRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("dotnet"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("2.2.207"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("dotnet|2.2"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													LinuxFxVersion:        to.Ptr("dotnet|2.2"),
													Use32BitWorkerProcess: to.Ptr(false),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~2")},
											},
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("dotnet"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("2.2.207"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("2.2"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~2")},
											},
										},
										Value: to.Ptr("2.2"),
									}},
								Value: to.Ptr("2"),
							},
							{
								DisplayText: to.Ptr(".NET Framework 4"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr(".NET Framework 4.7"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("4.7"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~1")},
											},
										},
										Value: to.Ptr("4.7"),
									}},
								Value: to.Ptr("2"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsWindows),
						Value:       to.Ptr("dotnet"),
					},
				},
				{
					Name:     to.Ptr("node"),
					Type:     to.Ptr("Microsoft.Web/locations/functionAppStacks"),
					ID:       to.Ptr("/providers/Microsoft.Web/locations/functionAppStacks/node"),
					Location: to.Ptr("westus"),
					Properties: &armappservice.FunctionAppStackProperties{
						DisplayText: to.Ptr("Node.js"),
						MajorVersions: []*armappservice.FunctionAppMajorVersion{
							{
								DisplayText: to.Ptr("Node.js 14"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr("Node.js 14 LTS"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											LinuxRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("node"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("14.x"),
												},
												IsHidden:                 to.Ptr(true),
												IsPreview:                to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("Node|14"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													LinuxFxVersion:        to.Ptr("Node|14"),
													Use32BitWorkerProcess: to.Ptr(false),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3")},
											},
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME":     to.Ptr("node"),
													"WEBSITE_NODE_DEFAULT_VERSION": to.Ptr("~14"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("14.x"),
												},
												IsHidden:                 to.Ptr(true),
												IsPreview:                to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("~14"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3")},
											},
										},
										Value: to.Ptr("14 LTS"),
									}},
								Value: to.Ptr("14"),
							},
							{
								DisplayText: to.Ptr("Node.js 12"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr("Node.js 12 LTS"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											LinuxRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("node"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("12.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("Node|12"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													LinuxFxVersion:        to.Ptr("Node|12"),
													Use32BitWorkerProcess: to.Ptr(false),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3")},
											},
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME":     to.Ptr("node"),
													"WEBSITE_NODE_DEFAULT_VERSION": to.Ptr("~12"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("12.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("~12"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3")},
											},
										},
										Value: to.Ptr("12 LTS"),
									}},
								Value: to.Ptr("12"),
							},
							{
								DisplayText: to.Ptr("Node.js 10"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr("Node.js 10 LTS"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											LinuxRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("node"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("Node|10"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													LinuxFxVersion:        to.Ptr("Node|10"),
													Use32BitWorkerProcess: to.Ptr(false),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~2"),
													to.Ptr("~3")},
											},
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME":     to.Ptr("node"),
													"WEBSITE_NODE_DEFAULT_VERSION": to.Ptr("~10"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("~10"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~2"),
													to.Ptr("~3")},
											},
										},
										Value: to.Ptr("10 LTS"),
									}},
								Value: to.Ptr("10"),
							},
							{
								DisplayText: to.Ptr("Node.js 8"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr("Node.js 8 LTS"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME":     to.Ptr("node"),
													"WEBSITE_NODE_DEFAULT_VERSION": to.Ptr("~8"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("~8"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~2")},
											},
										},
										Value: to.Ptr("8 LTS"),
									}},
								Value: to.Ptr("8"),
							},
							{
								DisplayText: to.Ptr("Node.js 6"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr("Node.js 6 LTS"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"WEBSITE_NODE_DEFAULT_VERSION": to.Ptr("~6"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("~6"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~1")},
											},
										},
										Value: to.Ptr("6 LTS"),
									}},
								Value: to.Ptr("6"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsWindows),
						Value:       to.Ptr("node"),
					},
				},
				{
					Name:     to.Ptr("python"),
					Type:     to.Ptr("Microsoft.Web/locations/functionAppStacks"),
					ID:       to.Ptr("/providers/Microsoft.Web/locations/functionAppStacks/python"),
					Location: to.Ptr("westus"),
					Properties: &armappservice.FunctionAppStackProperties{
						DisplayText: to.Ptr("Python"),
						MajorVersions: []*armappservice.FunctionAppMajorVersion{
							{
								DisplayText: to.Ptr("Python 3"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr("Python 3.8"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											LinuxRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("python"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("Python|3.8"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													LinuxFxVersion:        to.Ptr("Python|3.8"),
													Use32BitWorkerProcess: to.Ptr(false),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3")},
											},
										},
										Value: to.Ptr("3.8"),
									},
									{
										DisplayText: to.Ptr("Python 3.7"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											LinuxRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("python"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.7"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("Python|3.7"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													LinuxFxVersion:        to.Ptr("Python|3.7"),
													Use32BitWorkerProcess: to.Ptr(false),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~2"),
													to.Ptr("~3")},
											},
										},
										Value: to.Ptr("3.7"),
									},
									{
										DisplayText: to.Ptr("Python 3.6"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											LinuxRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("python"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.6"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("Python|3.6"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													LinuxFxVersion:        to.Ptr("Python|3.6"),
													Use32BitWorkerProcess: to.Ptr(false),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~2"),
													to.Ptr("~3")},
											},
										},
										Value: to.Ptr("3.6"),
									}},
								Value: to.Ptr("3"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsLinux),
						Value:       to.Ptr("python"),
					},
				},
				{
					Name:     to.Ptr("java"),
					Type:     to.Ptr("Microsoft.Web/locations/functionAppStacks"),
					ID:       to.Ptr("/providers/Microsoft.Web/locations/functionAppStacks/java"),
					Location: to.Ptr("westus"),
					Properties: &armappservice.FunctionAppStackProperties{
						DisplayText: to.Ptr("Java"),
						MajorVersions: []*armappservice.FunctionAppMajorVersion{
							{
								DisplayText: to.Ptr("Java 11"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr("Java 11"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											LinuxRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("java"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												IsAutoUpdate:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("Java|11"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													LinuxFxVersion:        to.Ptr("Java|11"),
													Use32BitWorkerProcess: to.Ptr(false),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3")},
											},
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("java"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												IsAutoUpdate:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("11"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													JavaVersion:           to.Ptr("11"),
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3")},
											},
										},
										Value: to.Ptr("11.0"),
									}},
								Value: to.Ptr("11"),
							},
							{
								DisplayText: to.Ptr("Java 8"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr("Java 8"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											LinuxRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("java"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												IsAutoUpdate:             to.Ptr(true),
												IsDefault:                to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("Java|8"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													LinuxFxVersion:        to.Ptr("Java|8"),
													Use32BitWorkerProcess: to.Ptr(false),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3")},
											},
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("java"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												IsAutoUpdate:             to.Ptr(true),
												IsDefault:                to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													JavaVersion:           to.Ptr("1.8"),
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~2"),
													to.Ptr("~3")},
											},
										},
										Value: to.Ptr("8.0"),
									}},
								Value: to.Ptr("8"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsWindows),
						Value:       to.Ptr("java"),
					},
				},
				{
					Name:     to.Ptr("powershell"),
					Type:     to.Ptr("Microsoft.Web/locations/functionAppStacks"),
					ID:       to.Ptr("/providers/Microsoft.Web/locations/functionAppStacks/powershell"),
					Location: to.Ptr("westus"),
					Properties: &armappservice.FunctionAppStackProperties{
						DisplayText: to.Ptr("PowerShell Core"),
						MajorVersions: []*armappservice.FunctionAppMajorVersion{
							{
								DisplayText: to.Ptr("PowerShell 7"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr("PowerShell 7.0"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("powershell"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("~7"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													PowerShellVersion:     to.Ptr("~7"),
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3")},
											},
										},
										Value: to.Ptr("7.0"),
									}},
								Value: to.Ptr("7"),
							},
							{
								DisplayText: to.Ptr("PowerShell Core 6"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr("PowerShell Core 6.2"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("powershell"),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-04T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("~6"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													PowerShellVersion:     to.Ptr("~6"),
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~2"),
													to.Ptr("~3")},
											},
										},
										Value: to.Ptr("6.2"),
									}},
								Value: to.Ptr("6"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsWindows),
						Value:       to.Ptr("powershell"),
					},
				},
				{
					Name:     to.Ptr("custom"),
					Type:     to.Ptr("Microsoft.Web/locations/functionAppStacks"),
					ID:       to.Ptr("/providers/Microsoft.Web/locations/functionAppStacks/custom"),
					Location: to.Ptr("westus"),
					Properties: &armappservice.FunctionAppStackProperties{
						DisplayText: to.Ptr("Custom"),
						MajorVersions: []*armappservice.FunctionAppMajorVersion{
							{
								DisplayText: to.Ptr("Custom"),
								MinorVersions: []*armappservice.FunctionAppMinorVersion{
									{
										DisplayText: to.Ptr("Custom Handler"),
										StackSettings: &armappservice.FunctionAppRuntimes{
											LinuxRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("custom"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsPreview:                to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr(""),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													LinuxFxVersion:        to.Ptr(""),
													Use32BitWorkerProcess: to.Ptr(false),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3"),
													to.Ptr("~2")},
											},
											WindowsRuntimeSettings: &armappservice.FunctionAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												AppSettingsDictionary: map[string]*string{
													"FUNCTIONS_WORKER_RUNTIME": to.Ptr("custom"),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsPreview:                to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("custom"),
												SiteConfigPropertiesDictionary: &armappservice.SiteConfigPropertiesDictionary{
													Use32BitWorkerProcess: to.Ptr(true),
												},
												SupportedFunctionsExtensionVersions: []*string{
													to.Ptr("~3"),
													to.Ptr("~2")},
											},
										},
										Value: to.Ptr("custom"),
									}},
								Value: to.Ptr("custom"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsWindows),
						Value:       to.Ptr("custom"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FunctionAppStackCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FunctionAppStackCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetFunctionAppStacksForLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProvider_GetWebAppStacksForLocation(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebAppStacksForLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Locations Web App Stacks"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewProviderClient("<subscription-id>", cred, &options)
	pager := client.GetWebAppStacksForLocation("westus",
		&armappservice.ProviderClientGetWebAppStacksForLocationOptions{StackOsType: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebAppStacksForLocation.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.WebAppStackCollection{
			Value: []*armappservice.WebAppStack{
				{
					Name:     to.Ptr("dotnet"),
					Type:     to.Ptr("Microsoft.Web/locations/webAppStacks"),
					ID:       to.Ptr("/providers/Microsoft.Web/locations/webAppStacks/dotnet"),
					Location: to.Ptr("westus"),
					Properties: &armappservice.WebAppStackProperties{
						DisplayText: to.Ptr(".NET"),
						MajorVersions: []*armappservice.WebAppMajorVersion{
							{
								DisplayText: to.Ptr(".NET 5"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr(".NET 5"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("5.0.x"),
												},
												IsEarlyAccess:            to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("DOTNETCORE|5.0"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("5.0.x"),
												},
												IsEarlyAccess:            to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("v5.0"),
											},
										},
										Value: to.Ptr("5"),
									}},
								Value: to.Ptr("5"),
							},
							{
								DisplayText: to.Ptr(".NET Core 3"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr(".NET Core 3.1 (LTS)"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.1.301"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("DOTNETCORE|3.1"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.1.301"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("3.1"),
											},
										},
										Value: to.Ptr("3.1"),
									},
									{
										DisplayText: to.Ptr(".NET Core 3.0"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.0.103"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("DOTNETCORE|3.0"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.0.103"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("3.0"),
											},
										},
										Value: to.Ptr("3.0"),
									}},
								Value: to.Ptr("3"),
							},
							{
								DisplayText: to.Ptr(".NET Core 2"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr(".NET Core 2.2"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-23T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("2.2.207"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("DOTNETCORE|2.2"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-23T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("2.2.207"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("2.2"),
											},
										},
										Value: to.Ptr("2.2"),
									},
									{
										DisplayText: to.Ptr(".NET Core 2.1 (LTS)"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-21T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("2.1.807"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("DOTNETCORE|2.1"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-21T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("2.1.807"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("2.1"),
											},
										},
										Value: to.Ptr("2.1"),
									},
									{
										DisplayText: to.Ptr(".NET Core 2.0"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("2.1.202"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("DOTNETCORE|2.0"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("2.1.202"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("2.0"),
											},
										},
										Value: to.Ptr("2.0"),
									}},
								Value: to.Ptr("dotnetcore2"),
							},
							{
								DisplayText: to.Ptr(".NET Core 1"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr(".NET Core 1.1"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-27T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("1.1.14"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("DOTNETCORE|1.1"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-27T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("1.1.14"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.1"),
											},
										},
										Value: to.Ptr("1.1"),
									},
									{
										DisplayText: to.Ptr(".NET Core 1.0"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-27T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("1.1.14"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("DOTNETCORE|1.0"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-27T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("1.1.14"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.0"),
											},
										},
										Value: to.Ptr("1.0"),
									}},
								Value: to.Ptr("1"),
							},
							{
								DisplayText: to.Ptr("ASP.NET V4"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("ASP.NET V4.8"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.1"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("v4.0"),
											},
										},
										Value: to.Ptr("v4.8"),
									}},
								Value: to.Ptr("v4"),
							},
							{
								DisplayText: to.Ptr("ASP.NET V3"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("ASP.NET V3.5"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("2.1"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("v2.0"),
											},
										},
										Value: to.Ptr("v3.5"),
									}},
								Value: to.Ptr("v3"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsWindows),
						Value:       to.Ptr("dotnet"),
					},
				},
				{
					Name:     to.Ptr("node"),
					Type:     to.Ptr("Microsoft.Web/locations/webAppStacks"),
					ID:       to.Ptr("/providers/Microsoft.Web/locations/webAppStacks/node"),
					Location: to.Ptr("westus"),
					Properties: &armappservice.WebAppStackProperties{
						DisplayText: to.Ptr("Node"),
						MajorVersions: []*armappservice.WebAppMajorVersion{
							{
								DisplayText: to.Ptr("Node LTS"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Node LTS"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|lts"),
											},
										},
										Value: to.Ptr("lts"),
									}},
								Value: to.Ptr("lts"),
							},
							{
								DisplayText: to.Ptr("Node 14"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Node 14 LTS"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("14.x"),
												},
												IsPreview:                to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|14-lts"),
											},
										},
										Value: to.Ptr("14-lts"),
									}},
								Value: to.Ptr("14"),
							},
							{
								DisplayText: to.Ptr("Node 12"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Node 12 LTS"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("12.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|12-lts"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("12.13.0"),
											},
										},
										Value: to.Ptr("12-lts"),
									},
									{
										DisplayText: to.Ptr("Node 12.9"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("12.x"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(true),
												RuntimeVersion:           to.Ptr("NODE|12.9"),
											},
										},
										Value: to.Ptr("12.9"),
									}},
								Value: to.Ptr("12"),
							},
							{
								DisplayText: to.Ptr("Node 10"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Node 10 LTS"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|10-lts"),
											},
										},
										Value: to.Ptr("10-LTS"),
									},
									{
										DisplayText: to.Ptr("Node 10.16"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|10.16"),
											},
										},
										Value: to.Ptr("10.16"),
									},
									{
										DisplayText: to.Ptr("Node 10.15"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												IsHidden:                 to.Ptr(true),
												IsPreview:                to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("10.15.2"),
											},
										},
										Value: to.Ptr("10.15"),
									},
									{
										DisplayText: to.Ptr("Node 10.14"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|10.14"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("10.14.1"),
											},
										},
										Value: to.Ptr("10.14"),
									},
									{
										DisplayText: to.Ptr("Node 10.12"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|10.12"),
											},
										},
										Value: to.Ptr("10.12"),
									},
									{
										DisplayText: to.Ptr("Node 10.10"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|10.10"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("10.0.0"),
											},
										},
										Value: to.Ptr("10.10"),
									},
									{
										DisplayText: to.Ptr("Node 10.6"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|10.6"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("10.6.0"),
											},
										},
										Value: to.Ptr("10.6"),
									},
									{
										DisplayText: to.Ptr("Node 10.1"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|10.1"),
											},
										},
										Value: to.Ptr("10.1"),
									}},
								Value: to.Ptr("10"),
							},
							{
								DisplayText: to.Ptr("Node 9"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Node 9.4"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|9.4"),
											},
										},
										Value: to.Ptr("9.4"),
									}},
								Value: to.Ptr("9"),
							},
							{
								DisplayText: to.Ptr("Node 8"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Node 8 LTS"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|8-lts"),
											},
										},
										Value: to.Ptr("8-lts"),
									},
									{
										DisplayText: to.Ptr("Node 8.12"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|8.12"),
											},
										},
										Value: to.Ptr("8.12"),
									},
									{
										DisplayText: to.Ptr("Node 8.11"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|8.11"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("8.11"),
											},
										},
										Value: to.Ptr("8.11"),
									},
									{
										DisplayText: to.Ptr("Node 8.10"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("8.10"),
											},
										},
										Value: to.Ptr("8.10"),
									},
									{
										DisplayText: to.Ptr("Node 8.9"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|8.9"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("8.9"),
											},
										},
										Value: to.Ptr("8.9"),
									},
									{
										DisplayText: to.Ptr("Node 8.8"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|8.8"),
											},
										},
										Value: to.Ptr("8.8"),
									},
									{
										DisplayText: to.Ptr("Node 8.5"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("8.5"),
											},
										},
										Value: to.Ptr("8.5"),
									},
									{
										DisplayText: to.Ptr("Node 8.4"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("8.4"),
											},
										},
										Value: to.Ptr("8.4"),
									},
									{
										DisplayText: to.Ptr("Node 8.2"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|8.2"),
											},
										},
										Value: to.Ptr("8.2"),
									},
									{
										DisplayText: to.Ptr("Node 8.1"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|8.1"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("8.1.4"),
											},
										},
										Value: to.Ptr("8.1"),
									},
									{
										DisplayText: to.Ptr("Node 8.0"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|8.0"),
											},
										},
										Value: to.Ptr("8.0"),
									}},
								Value: to.Ptr("8"),
							},
							{
								DisplayText: to.Ptr("Node 7"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Node 7.10"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("7.10.1"),
											},
										},
										Value: to.Ptr("7.10"),
									}},
								Value: to.Ptr("7"),
							},
							{
								DisplayText: to.Ptr("Node 6"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Node 6 LTS"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|6-lts"),
											},
										},
										Value: to.Ptr("6-LTS"),
									},
									{
										DisplayText: to.Ptr("Node 6.12"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("6.12"),
											},
										},
										Value: to.Ptr("6.12"),
									},
									{
										DisplayText: to.Ptr("Node 6.11"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|6.11"),
											},
										},
										Value: to.Ptr("6.11"),
									},
									{
										DisplayText: to.Ptr("Node 6.10"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|6.10"),
											},
										},
										Value: to.Ptr("6.10"),
									},
									{
										DisplayText: to.Ptr("Node 6.9"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|6.9"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("6.9.5"),
											},
										},
										Value: to.Ptr("6.9"),
									},
									{
										DisplayText: to.Ptr("Node 6.6"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|6.6"),
											},
										},
										Value: to.Ptr("6.6"),
									},
									{
										DisplayText: to.Ptr("Node 6.5"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("6.5.0"),
											},
										},
										Value: to.Ptr("6.5"),
									},
									{
										DisplayText: to.Ptr("Node 6.2"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|6.2"),
											},
										},
										Value: to.Ptr("6.2"),
									}},
								Value: to.Ptr("6"),
							},
							{
								DisplayText: to.Ptr("Node 4"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Node 4.8"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|4.8"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("4.8"),
											},
										},
										Value: to.Ptr("4.8"),
									},
									{
										DisplayText: to.Ptr("Node 4.5"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|4.5"),
											},
										},
										Value: to.Ptr("4.5"),
									},
									{
										DisplayText: to.Ptr("Node 4.4"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|4.4"),
											},
										},
										Value: to.Ptr("4.4"),
									}},
								Value: to.Ptr("4"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsLinux),
						Value:       to.Ptr("node"),
					},
				},
				{
					Name:     to.Ptr("python"),
					Type:     to.Ptr("Microsoft.Web/locations/webAppStacks"),
					ID:       to.Ptr("/providers/Microsoft.Web/locations/webAppStacks/python"),
					Location: to.Ptr("westus"),
					Properties: &armappservice.WebAppStackProperties{
						DisplayText: to.Ptr("Python"),
						MajorVersions: []*armappservice.WebAppMajorVersion{
							{
								DisplayText: to.Ptr("Python 3"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Python 3.8"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("PYTHON|3.8"),
											},
										},
										Value: to.Ptr("3.8"),
									},
									{
										DisplayText: to.Ptr("Python 3.7"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.7"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("PYTHON|3.7"),
											},
										},
										Value: to.Ptr("3.7"),
									},
									{
										DisplayText: to.Ptr("Python 3.6"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.6"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("PYTHON|3.6"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.6"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("3.4.0"),
											},
										},
										Value: to.Ptr("3.6"),
									}},
								Value: to.Ptr("3"),
							},
							{
								DisplayText: to.Ptr("Python 2"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Python 2.7"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("2.7"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("PYTHON|2.7"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("2.7"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("2.7.3"),
											},
										},
										Value: to.Ptr("2.7"),
									}},
								Value: to.Ptr("2"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsLinux),
						Value:       to.Ptr("python"),
					},
				},
				{
					Name:     to.Ptr("php"),
					Type:     to.Ptr("Microsoft.Web/locations/webAppStacks"),
					ID:       to.Ptr("/providers/Microsoft.Web/locations/webAppStacks/php"),
					Location: to.Ptr("westus"),
					Properties: &armappservice.WebAppStackProperties{
						DisplayText: to.Ptr("PHP"),
						MajorVersions: []*armappservice.WebAppMajorVersion{
							{
								DisplayText: to.Ptr("PHP 7"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("PHP 7.4"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-12-28T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("PHP|7.4"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-12-28T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("7.4"),
											},
										},
										Value: to.Ptr("7.4"),
									},
									{
										DisplayText: to.Ptr("PHP 7.3"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-06T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("PHP|7.3"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-06T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("7.3"),
											},
										},
										Value: to.Ptr("7.3"),
									},
									{
										DisplayText: to.Ptr("PHP 7.2"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("PHP|7.2"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("7.2"),
											},
										},
										Value: to.Ptr("7.2"),
									},
									{
										DisplayText: to.Ptr("PHP 7.1"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("7.1"),
											},
										},
										Value: to.Ptr("7.1"),
									},
									{
										DisplayText: to.Ptr("7.0"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("PHP|7.0"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("7.0"),
											},
										},
										Value: to.Ptr("7.0"),
									}},
								Value: to.Ptr("7"),
							},
							{
								DisplayText: to.Ptr("PHP 5"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("PHP 5.6"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("PHP|5.6"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("5.6"),
											},
										},
										Value: to.Ptr("5.6"),
									}},
								Value: to.Ptr("5"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsLinux),
						Value:       to.Ptr("php"),
					},
				},
				{
					Name:     to.Ptr("ruby"),
					Type:     to.Ptr("Microsoft.Web/locations/webAppStacks"),
					ID:       to.Ptr("/providers/Microsoft.Web/locations/webAppStacks/ruby"),
					Location: to.Ptr("westus"),
					Properties: &armappservice.WebAppStackProperties{
						DisplayText: to.Ptr("Ruby"),
						MajorVersions: []*armappservice.WebAppMajorVersion{
							{
								DisplayText: to.Ptr("Ruby 2"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Ruby 2.6"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("RUBY|2.6"),
											},
										},
										Value: to.Ptr("2.6"),
									},
									{
										DisplayText: to.Ptr("Ruby 2.6.2"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("RUBY|2.6.2"),
											},
										},
										Value: to.Ptr("2.6.2"),
									},
									{
										DisplayText: to.Ptr("Ruby 2.5"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("RUBY|2.5"),
											},
										},
										Value: to.Ptr("2.5"),
									},
									{
										DisplayText: to.Ptr("Ruby 2.5.5"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("RUBY|2.5.5"),
											},
										},
										Value: to.Ptr("2.5.5"),
									},
									{
										DisplayText: to.Ptr("Ruby 2.4"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("RUBY|2.4"),
											},
										},
										Value: to.Ptr("2.4"),
									},
									{
										DisplayText: to.Ptr("Ruby 2.4.5"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("RUBY|2.4.5"),
											},
										},
										Value: to.Ptr("2.4.5"),
									},
									{
										DisplayText: to.Ptr("Ruby 2.3"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("RUBY|2.3"),
											},
										},
										Value: to.Ptr("2.3"),
									},
									{
										DisplayText: to.Ptr("Ruby 2.3.8"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("RUBY|2.3.8"),
											},
										},
										Value: to.Ptr("2.3.8"),
									},
									{
										DisplayText: to.Ptr("Ruby 2.3.3"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("RUBY|2.3.3"),
											},
										},
										Value: to.Ptr("2.3.3"),
									}},
								Value: to.Ptr("2"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsLinux),
						Value:       to.Ptr("ruby"),
					},
				},
				{
					Name:     to.Ptr("java"),
					Type:     to.Ptr("Microsoft.Web/locations/webAppStacks"),
					ID:       to.Ptr("/providers/Microsoft.Web/locations/webAppStacks/java"),
					Location: to.Ptr("westus"),
					Properties: &armappservice.WebAppStackProperties{
						DisplayText: to.Ptr("Java"),
						MajorVersions: []*armappservice.WebAppMajorVersion{
							{
								DisplayText: to.Ptr("Java 11"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Java 11"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2026-10-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												IsAutoUpdate:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr(""),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2026-10-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												IsAutoUpdate:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("11"),
											},
										},
										Value: to.Ptr("11.0"),
									},
									{
										DisplayText: to.Ptr("Java 11.0.7"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2026-10-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr(""),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2026-10-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("11.0.7"),
											},
										},
										Value: to.Ptr("11.0.7"),
									},
									{
										DisplayText: to.Ptr("Java 11.0.6"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2026-10-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr(""),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2026-10-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("11.0.6"),
											},
										},
										Value: to.Ptr("11.0.6"),
									},
									{
										DisplayText: to.Ptr("Java 11.0.5"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2026-10-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr(""),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2026-10-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("11.0.5_ZULU"),
											},
										},
										Value: to.Ptr("11.0.5"),
									},
									{
										DisplayText: to.Ptr("Java 11.0.3"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2026-10-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("11.0.3_ZULU"),
											},
										},
										Value: to.Ptr("11.0.3"),
									},
									{
										DisplayText: to.Ptr("Java 11.0.2"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2026-10-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("11.0.2_ZULU"),
											},
										},
										Value: to.Ptr("11.0.2"),
									}},
								Value: to.Ptr("11"),
							},
							{
								DisplayText: to.Ptr("Java 8"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Java 8"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												IsAutoUpdate:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr(""),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												IsAutoUpdate:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8"),
											},
										},
										Value: to.Ptr("8.0"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_252"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr(""),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_252"),
											},
										},
										Value: to.Ptr("8.0.252"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_242"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr(""),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_242"),
											},
										},
										Value: to.Ptr("8.0.242"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_232"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr(""),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_232_ZULU"),
											},
										},
										Value: to.Ptr("8.0.232"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_212"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_212_ZULU"),
											},
										},
										Value: to.Ptr("8.0.212"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_202"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_202_ZULU"),
											},
										},
										Value: to.Ptr("8.0.202"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_202 (Oracle)"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_202"),
											},
										},
										Value: to.Ptr("8.0.202 (Oracle)"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_181"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_181_ZULU"),
											},
										},
										Value: to.Ptr("8.0.181"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_181 (Oracle)"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_181"),
											},
										},
										Value: to.Ptr("8.0.181 (Oracle)"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_172"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_172_ZULU"),
											},
										},
										Value: to.Ptr("8.0.172"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_172 (Oracle)"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_172"),
											},
										},
										Value: to.Ptr("8.0.172 (Oracle)"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_144"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_144"),
											},
										},
										Value: to.Ptr("8.0.144"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_111 (Oracle)"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_111"),
											},
										},
										Value: to.Ptr("8.0.111 (Oracle)"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_102"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_102"),
											},
										},
										Value: to.Ptr("8.0.102"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_92"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_92"),
											},
										},
										Value: to.Ptr("8.0.92"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_73 (Oracle)"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_73"),
											},
										},
										Value: to.Ptr("8.0.73 (Oracle)"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_60 (Oracle)"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_60"),
											},
										},
										Value: to.Ptr("8.0.60 (Oracle)"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_25 (Oracle)"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_25"),
											},
										},
										Value: to.Ptr("8.0.25 (Oracle)"),
									}},
								Value: to.Ptr("8"),
							},
							{
								DisplayText: to.Ptr("Java 7"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Java 7"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-08-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsAutoUpdate:             to.Ptr(true),
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.7"),
											},
										},
										Value: to.Ptr("7.0"),
									},
									{
										DisplayText: to.Ptr("Java 1.7.0_262"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-08-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.7.0_262_ZULU"),
											},
										},
										Value: to.Ptr("7.0.262"),
									},
									{
										DisplayText: to.Ptr("Java 1.7.0_242"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-08-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.7.0_242_ZULU"),
											},
										},
										Value: to.Ptr("7.0.242"),
									},
									{
										DisplayText: to.Ptr("Java 1.7.0_222"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-08-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.7.0_222_ZULU"),
											},
										},
										Value: to.Ptr("7.0.222"),
									},
									{
										DisplayText: to.Ptr("Java 1.7.0_191"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-08-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.7.0_191_ZULU"),
											},
										},
										Value: to.Ptr("7.0.191"),
									},
									{
										DisplayText: to.Ptr("Java 1.7.0_80 (Oracle)"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.7.0_80"),
											},
										},
										Value: to.Ptr("7.0.80 (Oracle)"),
									},
									{
										DisplayText: to.Ptr("Java 1.7.0_71 (Oracle)"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.7.0_71"),
											},
										},
										Value: to.Ptr("7.0.71 (Oracle)"),
									},
									{
										DisplayText: to.Ptr("Java 1.7.0_51 (Oracle)"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.7.0_51"),
											},
										},
										Value: to.Ptr("7.0.51 (Oracle)"),
									}},
								Value: to.Ptr("7"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsLinux),
						Value:       to.Ptr("java"),
					},
				},
				{
					Name:     to.Ptr("javacontainers"),
					Type:     to.Ptr("Microsoft.Web/locations/webAppStacks"),
					ID:       to.Ptr("/providers/Microsoft.Web/locations/webAppStacks/javacontainers"),
					Location: to.Ptr("westus"),
					Properties: &armappservice.WebAppStackProperties{
						DisplayText: to.Ptr("Java Containers"),
						MajorVersions: []*armappservice.WebAppMajorVersion{
							{
								DisplayText: to.Ptr("Java SE (Embedded Web Server)"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Java SE (Embedded Web Server)"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												IsAutoUpdate:  to.Ptr(true),
												Java11Runtime: to.Ptr("JAVA|11-java11"),
												Java8Runtime:  to.Ptr("JAVA|8-jre8"),
											},
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												IsAutoUpdate:         to.Ptr(true),
												JavaContainer:        to.Ptr("JAVA"),
												JavaContainerVersion: to.Ptr("SE"),
											},
										},
										Value: to.Ptr("SE"),
									},
									{
										DisplayText: to.Ptr("Java SE 11.0.7"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java11Runtime: to.Ptr("JAVA|11.0.7"),
											},
										},
										Value: to.Ptr("11.0.7"),
									},
									{
										DisplayText: to.Ptr("Java SE 11.0.6"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java11Runtime: to.Ptr("JAVA|11.0.6"),
											},
										},
										Value: to.Ptr("11.0.6"),
									},
									{
										DisplayText: to.Ptr("Java SE 11.0.5"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java11Runtime: to.Ptr("JAVA|11.0.5"),
											},
										},
										Value: to.Ptr("11.0.5"),
									},
									{
										DisplayText: to.Ptr("Java SE 8u252"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java8Runtime: to.Ptr("JAVA|8u252"),
											},
										},
										Value: to.Ptr("1.8.252"),
									},
									{
										DisplayText: to.Ptr("Java SE 8u242"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java8Runtime: to.Ptr("JAVA|8u242"),
											},
										},
										Value: to.Ptr("1.8.242"),
									},
									{
										DisplayText: to.Ptr("Java SE 8u232"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java8Runtime: to.Ptr("JAVA|8u232"),
											},
										},
										Value: to.Ptr("1.8.232"),
									}},
								Value: to.Ptr("javase"),
							},
							{
								DisplayText: to.Ptr("JBoss EAP"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("JBoss EAP 7.2"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												IsPreview:    to.Ptr(true),
												Java8Runtime: to.Ptr("JBOSSEAP|7.2-java8"),
											},
										},
										Value: to.Ptr("7.2"),
									}},
								Value: to.Ptr("jbosseap"),
							},
							{
								DisplayText: to.Ptr("Tomcat 9.0"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Tomcat 9.0"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												IsAutoUpdate:  to.Ptr(true),
												Java11Runtime: to.Ptr("TOMCAT|9.0-java11"),
												Java8Runtime:  to.Ptr("TOMCAT|9.0-jre8"),
											},
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												IsAutoUpdate:         to.Ptr(true),
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("9.0"),
											},
										},
										Value: to.Ptr("9.0"),
									},
									{
										DisplayText: to.Ptr("Tomcat 9.0.37"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java11Runtime: to.Ptr("TOMCAT|9.0.37-java11"),
												Java8Runtime:  to.Ptr("TOMCAT|9.0.37-java8"),
											},
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("9.0.37"),
											},
										},
										Value: to.Ptr("9.0.37"),
									},
									{
										DisplayText: to.Ptr("Tomcat 9.0.33"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java11Runtime: to.Ptr("TOMCAT|9.0.33-java11"),
												Java8Runtime:  to.Ptr("TOMCAT|9.0.33-java8"),
											},
										},
										Value: to.Ptr("9.0.33"),
									},
									{
										DisplayText: to.Ptr("Tomcat 9.0.31"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("9.0.31"),
											},
										},
										Value: to.Ptr("9.0.31"),
									},
									{
										DisplayText: to.Ptr("Tomcat 9.0.27"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("9.0.27"),
											},
										},
										Value: to.Ptr("9.0.27"),
									},
									{
										DisplayText: to.Ptr("Tomcat 9.0.21"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("9.0.21"),
											},
										},
										Value: to.Ptr("9.0.21"),
									},
									{
										DisplayText: to.Ptr("Tomcat 9.0.20"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java11Runtime: to.Ptr("TOMCAT|9.0.20-java11"),
												Java8Runtime:  to.Ptr("TOMCAT|9.0.20-java8"),
											},
										},
										Value: to.Ptr("9.0.20"),
									},
									{
										DisplayText: to.Ptr("Tomcat 9.0.14"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("9.0.14"),
											},
										},
										Value: to.Ptr("9.0.14"),
									},
									{
										DisplayText: to.Ptr("Tomcat 9.0.12"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("9.0.12"),
											},
										},
										Value: to.Ptr("9.0.12"),
									},
									{
										DisplayText: to.Ptr("Tomcat 9.0.8"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("9.0.8"),
											},
										},
										Value: to.Ptr("9.0.8"),
									},
									{
										DisplayText: to.Ptr("Tomcat 9.0.0"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("9.0.0"),
											},
										},
										Value: to.Ptr("9.0.0"),
									}},
								Value: to.Ptr("tomcat9.0"),
							},
							{
								DisplayText: to.Ptr("Tomcat 8.5"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Tomcat 8.5"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												IsAutoUpdate:  to.Ptr(true),
												Java11Runtime: to.Ptr("TOMCAT|8.5-java11"),
												Java8Runtime:  to.Ptr("TOMCAT|8.5-jre8"),
											},
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												IsAutoUpdate:         to.Ptr(true),
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.5"),
											},
										},
										Value: to.Ptr("8.5"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.5.6"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.5.6"),
											},
										},
										Value: to.Ptr("8.5.6"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.5.57"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java11Runtime: to.Ptr("TOMCAT|8.5.57-java11"),
												Java8Runtime:  to.Ptr("TOMCAT|8.5.57-java8"),
											},
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.5.57"),
											},
										},
										Value: to.Ptr("8.5.57"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.5.53"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java11Runtime: to.Ptr("TOMCAT|8.5.53-java11"),
												Java8Runtime:  to.Ptr("TOMCAT|8.5.53-java8"),
											},
										},
										Value: to.Ptr("8.5.53"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.5.51"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.5.51"),
											},
										},
										Value: to.Ptr("8.5.51"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.5.47"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.5.47"),
											},
										},
										Value: to.Ptr("8.5.47"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.5.42"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.5.42"),
											},
										},
										Value: to.Ptr("8.5.42"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.5.41"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java11Runtime: to.Ptr("TOMCAT|8.5.41-java11"),
												Java8Runtime:  to.Ptr("TOMCAT|8.5.41-java8"),
											},
										},
										Value: to.Ptr("8.5.41"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.5.37"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.5.37"),
											},
										},
										Value: to.Ptr("8.5.37"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.5.34"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.5.34"),
											},
										},
										Value: to.Ptr("8.5.34"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.5.31"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.5.31"),
											},
										},
										Value: to.Ptr("8.5.31"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.5.20"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.5.20"),
											},
										},
										Value: to.Ptr("8.5.20"),
									}},
								Value: to.Ptr("tomcat8.5"),
							},
							{
								DisplayText: to.Ptr("Tomcat 8.0"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Tomcat 8.0"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												IsAutoUpdate:         to.Ptr(true),
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.0"),
											},
										},
										Value: to.Ptr("8.0"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.0.53"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.0.53"),
											},
										},
										Value: to.Ptr("8.0.53"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.0.46"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.0.46"),
											},
										},
										Value: to.Ptr("8.0.46"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.0.23"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.0.23"),
											},
										},
										Value: to.Ptr("8.0.23"),
									}},
								Value: to.Ptr("tomcat8.0"),
							},
							{
								DisplayText: to.Ptr("Tomcat 7.0"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Tomcat 7.0"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												IsAutoUpdate:         to.Ptr(true),
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("7.0"),
											},
										},
										Value: to.Ptr("7.0"),
									},
									{
										DisplayText: to.Ptr("Tomcat 7.0.94"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("7.0.94"),
											},
										},
										Value: to.Ptr("7.0.94"),
									},
									{
										DisplayText: to.Ptr("Tomcat 7.0.81"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("7.0.81"),
											},
										},
										Value: to.Ptr("7.0.81"),
									},
									{
										DisplayText: to.Ptr("Tomcat 7.0.62"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("7.0.62"),
											},
										},
										Value: to.Ptr("7.0.62"),
									},
									{
										DisplayText: to.Ptr("Tomcat 7.0.50"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("7.0.50"),
											},
										},
										Value: to.Ptr("7.0.50"),
									}},
								Value: to.Ptr("tomcat7.0"),
							},
							{
								DisplayText: to.Ptr("Jetty 9.3"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Jetty 9.3"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												IsAutoUpdate:         to.Ptr(true),
												IsDeprecated:         to.Ptr(true),
												JavaContainer:        to.Ptr("JETTY"),
												JavaContainerVersion: to.Ptr("9.3"),
											},
										},
										Value: to.Ptr("9.3"),
									},
									{
										DisplayText: to.Ptr("Jetty 9.3.25"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												IsDeprecated:         to.Ptr(true),
												JavaContainer:        to.Ptr("JETTY"),
												JavaContainerVersion: to.Ptr("9.3.25"),
											},
										},
										Value: to.Ptr("9.3.25"),
									},
									{
										DisplayText: to.Ptr("Jetty 9.3.13"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												IsDeprecated:         to.Ptr(true),
												JavaContainer:        to.Ptr("JETTY"),
												JavaContainerVersion: to.Ptr("9.3.13"),
											},
										},
										Value: to.Ptr("9.3.13"),
									}},
								Value: to.Ptr("jetty9.3"),
							},
							{
								DisplayText: to.Ptr("Jetty 9.1"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Jetty 9.1"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												IsAutoUpdate:         to.Ptr(true),
												IsDeprecated:         to.Ptr(true),
												JavaContainer:        to.Ptr("JETTY"),
												JavaContainerVersion: to.Ptr("9.1"),
											},
										},
										Value: to.Ptr("9.1"),
									},
									{
										DisplayText: to.Ptr("Jetty 9.1.0"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												IsDeprecated:         to.Ptr(true),
												JavaContainer:        to.Ptr("JETTY"),
												JavaContainerVersion: to.Ptr("9.1.0"),
											},
										},
										Value: to.Ptr("9.1.0"),
									}},
								Value: to.Ptr("jetty9.1"),
							},
							{
								DisplayText: to.Ptr("WildFly 14"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("WildFly 14"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												IsAutoUpdate: to.Ptr(true),
												IsDeprecated: to.Ptr(true),
												Java8Runtime: to.Ptr("WILDFLY|14-jre8"),
											},
										},
										Value: to.Ptr("14"),
									},
									{
										DisplayText: to.Ptr("WildFly 14.0.1"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												IsDeprecated: to.Ptr(true),
												Java8Runtime: to.Ptr("WILDFLY|14.0.1-java8"),
											},
										},
										Value: to.Ptr("14.0.1"),
									}},
								Value: to.Ptr("wildfly14"),
							}},
						Value: to.Ptr("javacontainers"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WebAppStackCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WebAppStackCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebAppStacksForLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProvider_ListOperations(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewProviderClient("<subscription-id>", cred, &options)
	pager := client.ListOperations(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.CsmOperationCollection{
			Value: []*armappservice.CsmOperationDescription{
				{
					Name: to.Ptr("Microsoft.Web/sites/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get the properties of a Web App"),
						Operation:   to.Ptr("Get Web App"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/Write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Create a new Web App or update an existing one"),
						Operation:   to.Ptr("Create or Update Web App"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slots/Write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Create a new Web App Slot or update an existing one"),
						Operation:   to.Ptr("Create or Update Web App Slot"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App Slot"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/Delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete an existing Web App"),
						Operation:   to.Ptr("Delete Web App"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slots/Delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete an existing Web App Slot"),
						Operation:   to.Ptr("Delete Web App Slot"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App Slot"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slots/config/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web App Slot's configuration settings"),
						Operation:   to.Ptr("Get Web App Slot Configuration"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App Slot"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/config/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web App configuration settings"),
						Operation:   to.Ptr("Get Web App Configuration"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/config/list/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("List Web App's security sensitive settings, such as publishing credentials, app settings and connection strings"),
						Operation:   to.Ptr("List Web App Security Sensitive Settings"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slots/config/list/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("List Web App Slot's security sensitive settings, such as publishing credentials, app settings and connection strings"),
						Operation:   to.Ptr("List Web App Slot Security Sensitive Settings"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App Slot"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/config/Write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web App's configuration settings"),
						Operation:   to.Ptr("Update Web App Configuration"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slots/config/Write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web App Slot's configuration settings"),
						Operation:   to.Ptr("Update Web App Slot Configuration"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App Slot"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/sourcecontrols/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web App's source control configuration settings"),
						Operation:   to.Ptr("Get Web App Source Control Configuration"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slots/sourcecontrols/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web App Slot's source control configuration settings"),
						Operation:   to.Ptr("Get Web App Slot Source Control Configuration"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App Slot"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/sourcecontrols/Write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web App's source control configuration settings"),
						Operation:   to.Ptr("Update Web App Source Control Configuration"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slots/sourcecontrols/Write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web App Slot's source control configuration settings"),
						Operation:   to.Ptr("Update Web App Slot Source Control Configuration"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App Slot"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/sourcecontrols/Delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web App's source control configuration settings"),
						Operation:   to.Ptr("Delete Web App Source Control Configuration"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slots/sourcecontrols/Delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web App Slot's source control configuration settings"),
						Operation:   to.Ptr("Delete Web App Slot Source Control Configuration"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App Slot"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/backup/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Create a new web app backup"),
						Operation:   to.Ptr("Create Web App Backup"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slots/backup/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Create new Web App Slot backup."),
						Operation:   to.Ptr("Create Web App Slot Backup"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App Slot"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/backups/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get the properties of a web app's backup"),
						Operation:   to.Ptr("Get Web App Backup"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slots/backups/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get the properties of a web app slots' backup"),
						Operation:   to.Ptr("List Web App Slot Backups"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App Slot"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/publishxml/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get publishing profile xml for a Web App"),
						Operation:   to.Ptr("Get Web App Publishing Profile"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slots/publishxml/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get publishing profile xml for Web App Slot"),
						Operation:   to.Ptr("Get Web App Slot Publishing Profile"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App Slot"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/publish/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Publish a Web App"),
						Operation:   to.Ptr("Publish Web App"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slots/publish/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Publish a Web App Slot"),
						Operation:   to.Ptr("Publish Web App Slot"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App Slot"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/restart/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Restart a Web App"),
						Operation:   to.Ptr("Restart Web App"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slots/restart/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Restart a Web App Slot"),
						Operation:   to.Ptr("Restart Web App Slot"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App Slot"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/start/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Start a Web App"),
						Operation:   to.Ptr("Start Web App"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slots/start/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Start a Web App Slot"),
						Operation:   to.Ptr("Start Web App Slot"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App Slot"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/stop/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Stop a Web App"),
						Operation:   to.Ptr("Stop Web App"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slots/stop/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Stop a Web App Slot"),
						Operation:   to.Ptr("Stop Web App Slot"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App Slot"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slotsswap/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Swap Web App deployment slots"),
						Operation:   to.Ptr("Swap Web App Slots"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slots/slotsswap/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Swap Web App deployment slots"),
						Operation:   to.Ptr("Swap Web App Slots"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App Slot"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slotsdiffs/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get differences in configuration between web app and slots"),
						Operation:   to.Ptr("Get Web App Slots Differences"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slots/slotsdiffs/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get differences in configuration between web app and slots"),
						Operation:   to.Ptr("Get Web App Slots Differences"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App Slot"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/applySlotConfig/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Apply web app slot configuration from target slot to the current web app"),
						Operation:   to.Ptr("Apply Web App Configuration"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slots/applySlotConfig/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Apply web app slot configuration from target slot to the current slot."),
						Operation:   to.Ptr("Apply Web App Slot Configuration"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App Slot"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/resetSlotConfig/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Reset web app configuration"),
						Operation:   to.Ptr("Reset Web App Configuration"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slots/resetSlotConfig/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Reset web app slot configuration"),
						Operation:   to.Ptr("Reset Web App Slot Configuration"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App Slot"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slots/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get the properties of a Web App deployment slot"),
						Operation:   to.Ptr("Get Web App Deployment Slot"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App Slot"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/serverfarms/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get the properties on an App Service Plan"),
						Operation:   to.Ptr("Get App Service Plan"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plan"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/serverfarms/Write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Create a new App Service Plan or update an existing one"),
						Operation:   to.Ptr("Create or Update App Service Plan"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plan"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/serverfarms/Delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete an existing App Service Plan"),
						Operation:   to.Ptr("Delete App Service Plan"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plan"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/serverfarms/restartSites/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Restart all Web Apps in an App Service Plan"),
						Operation:   to.Ptr("Restart Web Apps"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plan"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/certificates/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get the list of certificates."),
						Operation:   to.Ptr("Get Certificates"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Certificate"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/certificates/Write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Add a new certificate or update an existing one."),
						Operation:   to.Ptr("Add or Update Certificate"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Certificate"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/certificates/Delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete an existing certificate."),
						Operation:   to.Ptr("Delete Certificate"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Certificate"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/geoRegions/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get the list of Geo regions."),
						Operation:   to.Ptr("Get Geo Regions"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Geo Region"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/listSitesAssignedToHostName/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get names of sites assigned to hostname."),
						Operation:   to.Ptr("Get sites assigned to hostname"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Site Name"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/hostingEnvironments/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get the properties of an App Service Environment"),
						Operation:   to.Ptr("Get App Service Environment"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Environment"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/hostingEnvironments/Write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Create a new App Service Environment or update existing one"),
						Operation:   to.Ptr("Create or Update App Service Environment"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Environment"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/hostingEnvironments/Delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete an App Service Environment"),
						Operation:   to.Ptr("Delete App Service Environment"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Environment"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/hostingEnvironments/reboot/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Reboot all machines in an App Service Environment"),
						Operation:   to.Ptr("Reboot an App Service Environment"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Environment"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/hostingEnvironments/multiRolePools/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get the properties of a FrontEnd Pool in an App Service Environment"),
						Operation:   to.Ptr("Get FrontEnd Pool"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Environment FrontEnd Pool"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/hostingEnvironments/multiRolePools/Write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Create a new FrontEnd Pool in an App Service Environment or update an existing one"),
						Operation:   to.Ptr("Create or Update FrontEnd Pool"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Environment FrontEnd Pool"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/hostingEnvironments/workerPools/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get the properties of a Worker Pool in an App Service Environment"),
						Operation:   to.Ptr("Get Worker Pool"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Environment Worker Pool"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/hostingEnvironments/workerPools/Write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Create a new Worker Pool in an App Service Environment or update an existing one"),
						Operation:   to.Ptr("Create or Update Worker Pool"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Environment Worker Pool"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/connections/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get the list of Connections."),
						Operation:   to.Ptr("Get Connections"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/connections/Write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Creates or updates a Connection."),
						Operation:   to.Ptr("Add or Update Connection"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/connections/Delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Deletes a Connection."),
						Operation:   to.Ptr("Delete Connection"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/connections/Join/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Joins a Connection."),
						Operation:   to.Ptr("Join Connection"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/connectionGateways/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get the list of Connection Gateways."),
						Operation:   to.Ptr("Get Connection Gateways"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Connection Gateways"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/connectionGateways/Write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Creates or updates a Connection Gateway."),
						Operation:   to.Ptr("Add or Update Connection Gateways"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Connection Gateways"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/connectionGateways/Delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Deletes a Connection Gateway."),
						Operation:   to.Ptr("Delete Connection Gateway"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Connection Gateways"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/connectionGateways/Join/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Joins a Connection Gateway."),
						Operation:   to.Ptr("Join Connection Gateway"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Connection Gateways"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/recommendations/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get the list of recommendations for subscriptions."),
						Operation:   to.Ptr("Get recommendations"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Recommendation"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/recommendations/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get the list of recommendations for web app."),
						Operation:   to.Ptr("Get recommendations for web app"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Recommendation"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/availablestacks/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Available Stacks."),
						Operation:   to.Ptr("Get Available Stacks"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Available Stacks"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/functionappstacks/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Function App Stacks."),
						Operation:   to.Ptr("Get Function App Stacks"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Function App Stacks"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/webappstacks/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web App Stacks."),
						Operation:   to.Ptr("Get Web App Stacks"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web App Stacks"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/checknameavailability/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Check if resource name is available."),
						Operation:   to.Ptr("Get Check Name Availability"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Check Name Availability"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/classicmobileservices/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Classic Mobile Services."),
						Operation:   to.Ptr("Get Classic Mobile Services"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Classic Mobile Services"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/connections/confirmconsentcode/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Confirm Connections Consent Code."),
						Operation:   to.Ptr("Confirm Connections Consent Code"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/connections/listconsentlinks/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("List Consent Links for Connections."),
						Operation:   to.Ptr("List Consent Links for Connections"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/deploymentlocations/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Deployment Locations."),
						Operation:   to.Ptr("Get Deployment Locations"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Deployment Locations"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/hostingenvironments/capacities/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Hosting Environments Capacities."),
						Operation:   to.Ptr("Get Hosting Environments Capacities"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Hosting Environments Capacities"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/hostingenvironments/diagnostics/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Hosting Environments Diagnostics."),
						Operation:   to.Ptr("Get Hosting Environments Diagnostics"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Hosting Environments Diagnostics"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/hostingenvironments/metricdefinitions/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Hosting Environments Metric Definitions."),
						Operation:   to.Ptr("Get Hosting Environments Metric Definitions"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Hosting Environments Metric Definitions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/hostingenvironments/multirolepools/metricdefinitions/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Hosting Environments MultiRole Pools Metric Definitions."),
						Operation:   to.Ptr("Get Hosting Environments MultiRole Pools Metric Definitions"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Hosting Environments MultiRole Pools Metric Definitions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/hostingenvironments/multirolepools/metrics/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Hosting Environments MultiRole Pools Metrics."),
						Operation:   to.Ptr("Get Hosting Environments MultiRole Pools Metrics"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Hosting Environments MultiRole Pools Metrics"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/hostingenvironments/multirolepools/skus/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Hosting Environments MultiRole Pools SKUs."),
						Operation:   to.Ptr("Get Hosting Environments MultiRole Pools SKUs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Hosting Environments MultiRole Pools SKUs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/hostingenvironments/multirolepools/usages/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Hosting Environments MultiRole Pools Usages."),
						Operation:   to.Ptr("Get Hosting Environments MultiRole Pools Usages"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Hosting Environments MultiRole Pools Usages"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/hostingenvironments/operations/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Hosting Environments Operations."),
						Operation:   to.Ptr("Get Hosting Environments Operations"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Hosting Environments Operations"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/hostingenvironments/resume/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Resume Hosting Environments."),
						Operation:   to.Ptr("Resume Hosting Environments"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Hosting Environments"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/hostingenvironments/serverfarms/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Hosting Environments App Service Plans."),
						Operation:   to.Ptr("Get Hosting Environments App Service Plans"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Hosting Environments App Service Plans"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/hostingenvironments/sites/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Hosting Environments Web Apps."),
						Operation:   to.Ptr("Get Hosting Environments Web Apps"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Hosting Environments Web Apps"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/hostingenvironments/suspend/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Suspend Hosting Environments."),
						Operation:   to.Ptr("Suspend Hosting Environments"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Hosting Environments"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/hostingenvironments/usages/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Hosting Environments Usages."),
						Operation:   to.Ptr("Get Hosting Environments Usages"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Hosting Environments Usages"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/hostingenvironments/workerpools/metricdefinitions/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Hosting Environments Workerpools Metric Definitions."),
						Operation:   to.Ptr("Get Hosting Environments Workerpools Metric Definitions"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Hosting Environments Workerpools Metric Definitions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/hostingenvironments/workerpools/metrics/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Hosting Environments Workerpools Metrics."),
						Operation:   to.Ptr("Get Hosting Environments Workerpools Metrics"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Hosting Environments Workerpools Metrics"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/hostingenvironments/workerpools/skus/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Hosting Environments Workerpools SKUs."),
						Operation:   to.Ptr("Get Hosting Environments Workerpools SKUs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Hosting Environments Workerpools SKUs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/hostingenvironments/workerpools/usages/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Hosting Environments Workerpools Usages."),
						Operation:   to.Ptr("Get Hosting Environments Workerpools Usages"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Hosting Environments Workerpools Usages"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/ishostingenvironmentnameavailable/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get if Hosting Environment Name is available."),
						Operation:   to.Ptr("Check if Hosting Environment Name is available"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Hosting Environment Name"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/ishostnameavailable/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Check if Hostname is Available."),
						Operation:   to.Ptr("Check if Hostname is Available"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Hostname"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/isusernameavailable/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Check if Username is available."),
						Operation:   to.Ptr("Check if Username is available"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Username"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/locations/apioperations/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Locations API Operations."),
						Operation:   to.Ptr("Get Locations API Operations"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Locations API Operations"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/locations/connectiongatewayinstallations/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Locations Connection Gateway Installations."),
						Operation:   to.Ptr("Get Locations Connection Gateway Installations"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Locations Connection Gateway Installations"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/locations/functionappstacks/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Locations Function App Stacks."),
						Operation:   to.Ptr("Get Locations Function App Stacks"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Locations Function App Stacks"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/locations/webappstacks/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Locations Web App Stacks."),
						Operation:   to.Ptr("Get Locations Web App Stacks"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Locations Web App Stacks"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/locations/managedapis/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Locations Managed APIs."),
						Operation:   to.Ptr("Get Locations Managed APIs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Locations Managed APIs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/operations/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Operations."),
						Operation:   to.Ptr("Get Operations"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Operations"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/publishingusers/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Publishing Users."),
						Operation:   to.Ptr("Get Publishing Users"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Publishing Users"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/publishingusers/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Publishing Users."),
						Operation:   to.Ptr("Update Publishing Users"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Publishing Users"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/capabilities/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get App Service Plans Capabilities."),
						Operation:   to.Ptr("Get App Service Plans Capabilities"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plans Capabilities"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/firstpartyapps/settings/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete App Service Plans First Party Apps Settings."),
						Operation:   to.Ptr("Delete App Service Plans First Party Apps Settings"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plans First Party Apps Settings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/firstpartyapps/settings/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get App Service Plans First Party Apps Settings."),
						Operation:   to.Ptr("Get App Service Plans First Party Apps Settings"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plans First Party Apps Settings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/firstpartyapps/settings/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update App Service Plans First Party Apps Settings."),
						Operation:   to.Ptr("Update App Service Plans First Party Apps Settings"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plans First Party Apps Settings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/hybridconnectionnamespaces/relays/sites/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get App Service Plans Hybrid Connection Namespaces Relays Web Apps."),
						Operation:   to.Ptr("Get App Service Plans Hybrid Connection Namespaces Relays Web Apps"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plans Hybrid Connection Namespaces Relays Web Apps"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/hybridconnectionplanlimits/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get App Service Plans Hybrid Connection Plan Limits."),
						Operation:   to.Ptr("Get App Service Plans Hybrid Connection Plan Limits"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plans Hybrid Connection Plan Limits"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/hybridconnectionrelays/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get App Service Plans Hybrid Connection Relays."),
						Operation:   to.Ptr("Get App Service Plans Hybrid Connection Relays"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plans Hybrid Connection Relays"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/metricdefinitions/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get App Service Plans Metric Definitions."),
						Operation:   to.Ptr("Get App Service Plans Metric Definitions"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plans Metric Definitions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/metrics/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get App Service Plans Metrics."),
						Operation:   to.Ptr("Get App Service Plans Metrics"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plans Metrics"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/operationresults/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get App Service Plans Operation Results."),
						Operation:   to.Ptr("Get App Service Plans Operation Results"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plans Operation Results"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/sites/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get App Service Plans Web Apps."),
						Operation:   to.Ptr("Get App Service Plans Web Apps"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plans Web Apps"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/skus/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get App Service Plans SKUs."),
						Operation:   to.Ptr("Get App Service Plans SKUs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plans SKUs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/usages/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get App Service Plans Usages."),
						Operation:   to.Ptr("Get App Service Plans Usages"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plans Usages"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/virtualnetworkconnections/gateways/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update App Service Plans Virtual Network Connections Gateways."),
						Operation:   to.Ptr("Update App Service Plans Virtual Network Connections Gateways"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plans Virtual Network Connections Gateways"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/virtualnetworkconnections/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get App Service Plans Virtual Network Connections."),
						Operation:   to.Ptr("Get App Service Plans Virtual Network Connections"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plans Virtual Network Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/virtualnetworkconnections/routes/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete App Service Plans Virtual Network Connections Routes."),
						Operation:   to.Ptr("Delete App Service Plans Virtual Network Connections Routes"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plans Virtual Network Connections Routes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/virtualnetworkconnections/routes/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get App Service Plans Virtual Network Connections Routes."),
						Operation:   to.Ptr("Get App Service Plans Virtual Network Connections Routes"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plans Virtual Network Connections Routes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/virtualnetworkconnections/routes/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update App Service Plans Virtual Network Connections Routes."),
						Operation:   to.Ptr("Update App Service Plans Virtual Network Connections Routes"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plans Virtual Network Connections Routes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/workers/reboot/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Reboot App Service Plans Workers."),
						Operation:   to.Ptr("Reboot App Service Plans Workers"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plans Workers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/analyzecustomhostname/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Analyze Custom Hostname."),
						Operation:   to.Ptr("Analyze Custom Hostname"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Custom Hostname"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/backup/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Backup."),
						Operation:   to.Ptr("Get Web Apps Backup"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Backup"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/backup/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web Apps Backup."),
						Operation:   to.Ptr("Update Web Apps Backup"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Backup"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/backups/list/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("List Web Apps Backups."),
						Operation:   to.Ptr("List Web Apps Backups"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Backups"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/backups/restore/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Restore Web Apps Backups."),
						Operation:   to.Ptr("Restore Web Apps Backups"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Backups"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/config/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Config."),
						Operation:   to.Ptr("Delete Web Apps Config"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Config"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/continuouswebjobs/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Continuous Web Jobs."),
						Operation:   to.Ptr("Delete Web Apps Continuous Web Jobs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Continuous Web Jobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/continuouswebjobs/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Continuous Web Jobs."),
						Operation:   to.Ptr("Get Web Apps Continuous Web Jobs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Continuous Web Jobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/continuouswebjobs/start/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Start Web Apps Continuous Web Jobs."),
						Operation:   to.Ptr("Start Web Apps Continuous Web Jobs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Continuous Web Jobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/continuouswebjobs/stop/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Stop Web Apps Continuous Web Jobs."),
						Operation:   to.Ptr("Stop Web Apps Continuous Web Jobs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Continuous Web Jobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/deployments/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Deployments."),
						Operation:   to.Ptr("Delete Web Apps Deployments"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Deployments"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/deployments/log/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Deployments Log."),
						Operation:   to.Ptr("Get Web Apps Deployments Log"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Deployments Log"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/deployments/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Deployments."),
						Operation:   to.Ptr("Get Web Apps Deployments"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Deployments"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/deployments/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web Apps Deployments."),
						Operation:   to.Ptr("Update Web Apps Deployments"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Deployments"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/frebanalysis/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Diagnostics FREB Analysis."),
						Operation:   to.Ptr("Get Web Apps Diagnostics FREB Analysis"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics FREB Analysis"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/frebanalysis/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Diagnostics FREB Analysis."),
						Operation:   to.Ptr("Get Web Apps Slots Diagnostics FREB Analysis"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics FREB Analysis"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Diagnostics Categories."),
						Operation:   to.Ptr("Get Web Apps Diagnostics Category"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics Category"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/runtimeavailability/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Diagnostics Runtime Availability."),
						Operation:   to.Ptr("Get Web Apps Diagnostics Runtime Availability"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics Runtime Availability"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/servicehealth/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Diagnostics Service Health."),
						Operation:   to.Ptr("Get Web Apps Diagnostics Service Health"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics Service Health"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/workeravailability/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Diagnostics Workeravailability."),
						Operation:   to.Ptr("Get Web Apps Diagnostics Workeravailability"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics Workeravailability"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/workeravailability/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Diagnostics Workeravailability."),
						Operation:   to.Ptr("Get Web Apps Slots Diagnostics Workeravailability"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics Workeravailability"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/workerprocessrecycle/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Diagnostics Worker Process Recycle."),
						Operation:   to.Ptr("Get Web Apps Diagnostics Worker Process Recycle"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics Worker Process Recycle"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/workerprocessrecycle/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Diagnostics Worker Process Recycle."),
						Operation:   to.Ptr("Get Web Apps Slots Diagnostics Worker Process Recycle"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics Worker Process Recycle"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/aspnetcore/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Diagnostics for ASP.NET Core app."),
						Operation:   to.Ptr("Get Web Apps Diagnostics ASP.NET Core"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics ASP.NET Core"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/aspnetcore/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Diagnostics for ASP.NET Core app."),
						Operation:   to.Ptr("Get Web Apps Slots Diagnostics ASP.NET Core"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics ASP.NET Core"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/domainownershipidentifiers/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Domain Ownership Identifiers."),
						Operation:   to.Ptr("Get Web Apps Domain Ownership Identifiers"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Domain Ownership Identifiers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/domainownershipidentifiers/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web Apps Domain Ownership Identifiers."),
						Operation:   to.Ptr("Update Web Apps Domain Ownership Identifiers"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Domain Ownership Identifiers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/functions/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Functions Web Apps."),
						Operation:   to.Ptr("Functions Web Apps"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/functions/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Functions."),
						Operation:   to.Ptr("Delete Web Apps Functions"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Functions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/functions/listsecrets/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("List Secrets Web Apps Functions."),
						Operation:   to.Ptr("List Secrets Web Apps Functions"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Functions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/functions/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Functions."),
						Operation:   to.Ptr("Get Web Apps Functions"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Functions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/functions/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web Apps Functions."),
						Operation:   to.Ptr("Update Web Apps Functions"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Functions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/hostnamebindings/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Hostname Bindings."),
						Operation:   to.Ptr("Delete Web Apps Hostname Bindings"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Hostname Bindings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/hostnamebindings/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Hostname Bindings."),
						Operation:   to.Ptr("Get Web Apps Hostname Bindings"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Hostname Bindings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/hostnamebindings/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web Apps Hostname Bindings."),
						Operation:   to.Ptr("Update Web Apps Hostname Bindings"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Hostname Bindings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/hybridconnection/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Hybrid Connection."),
						Operation:   to.Ptr("Delete Web Apps Hybrid Connection"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Hybrid Connection"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/hybridconnection/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Hybrid Connection."),
						Operation:   to.Ptr("Get Web Apps Hybrid Connection"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Hybrid Connection"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/hybridconnection/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web Apps Hybrid Connection."),
						Operation:   to.Ptr("Update Web Apps Hybrid Connection"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Hybrid Connection"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/hybridconnectionrelays/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Hybrid Connection Relays."),
						Operation:   to.Ptr("Get Web Apps Hybrid Connection Relays"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Hybrid Connection Relays"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/instances/deployments/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Instances Deployments."),
						Operation:   to.Ptr("Get Web Apps Instances Deployments"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Instances Deployments"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/instances/processes/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Instances Processes."),
						Operation:   to.Ptr("Delete Web Apps Instances Processes"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Instances Processes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/instances/processes/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Instances Processes."),
						Operation:   to.Ptr("Get Web Apps Instances Processes"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Instances Processes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/instances/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Instances."),
						Operation:   to.Ptr("Get Web Apps Instances"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Instances"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/listsyncfunctiontriggerstatus/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("List Sync Function Trigger Status Web Apps."),
						Operation:   to.Ptr("List Sync Function Trigger Status Web Apps"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/metricdefinitions/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Metric Definitions."),
						Operation:   to.Ptr("Get Web Apps Metric Definitions"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Metric Definitions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/metrics/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Metrics."),
						Operation:   to.Ptr("Get Web Apps Metrics"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Metrics"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/networktrace/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Network Trace Web Apps."),
						Operation:   to.Ptr("Network Trace Web Apps"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/newpassword/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Newpassword Web Apps."),
						Operation:   to.Ptr("Newpassword Web Apps"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/operationresults/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Operation Results."),
						Operation:   to.Ptr("Get Web Apps Operation Results"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Operation Results"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/perfcounters/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Performance Counters."),
						Operation:   to.Ptr("Get Web Apps Performance Counters"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Performance Counters"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/premieraddons/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Premier Addons."),
						Operation:   to.Ptr("Delete Web Apps Premier Addons"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Premier Addons"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/premieraddons/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Premier Addons."),
						Operation:   to.Ptr("Get Web Apps Premier Addons"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Premier Addons"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/premieraddons/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web Apps Premier Addons."),
						Operation:   to.Ptr("Update Web Apps Premier Addons"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Premier Addons"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/publishxml/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Publishing XML."),
						Operation:   to.Ptr("Get Web Apps Publishing XML"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Publishing XML"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/recommendationhistory/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Recommendation History."),
						Operation:   to.Ptr("Get Web Apps Recommendation History"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Recommendation History"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/recommendations/disable/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Disable Web Apps Recommendations."),
						Operation:   to.Ptr("Disable Web Apps Recommendations"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Recommendations"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/restore/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Restore."),
						Operation:   to.Ptr("Get Web Apps Restore"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Restore"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/analyzecustomhostname/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Analyze Custom Hostname."),
						Operation:   to.Ptr("Get Web Apps Slots Analyze Custom Hostname"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Analyze Custom Hostname"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/backup/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web Apps Slots Backup."),
						Operation:   to.Ptr("Update Web Apps Slots Backup"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Backup"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/backups/list/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("List Web Apps Slots Backups."),
						Operation:   to.Ptr("List Web Apps Slots Backups"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Backups"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/backups/restore/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Restore Web Apps Slots Backups."),
						Operation:   to.Ptr("Restore Web Apps Slots Backups"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Backups"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/config/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Slots Config."),
						Operation:   to.Ptr("Delete Web Apps Slots Config"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Config"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/continuouswebjobs/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Slots Continuous Web Jobs."),
						Operation:   to.Ptr("Delete Web Apps Slots Continuous Web Jobs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Continuous Web Jobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/continuouswebjobs/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Continuous Web Jobs."),
						Operation:   to.Ptr("Get Web Apps Slots Continuous Web Jobs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Continuous Web Jobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/continuouswebjobs/start/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Start Web Apps Slots Continuous Web Jobs."),
						Operation:   to.Ptr("Start Web Apps Slots Continuous Web Jobs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Continuous Web Jobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/continuouswebjobs/stop/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Stop Web Apps Slots Continuous Web Jobs."),
						Operation:   to.Ptr("Stop Web Apps Slots Continuous Web Jobs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Continuous Web Jobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/deployments/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Slots Deployments."),
						Operation:   to.Ptr("Delete Web Apps Slots Deployments"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Deployments"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/deployments/log/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Deployments Log."),
						Operation:   to.Ptr("Get Web Apps Slots Deployments Log"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Deployments Log"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/deployments/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Deployments."),
						Operation:   to.Ptr("Get Web Apps Slots Deployments"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Deployments"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/deployments/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web Apps Slots Deployments."),
						Operation:   to.Ptr("Update Web Apps Slots Deployments"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Deployments"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/hostnamebindings/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Slots Hostname Bindings."),
						Operation:   to.Ptr("Delete Web Apps Slots Hostname Bindings"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Hostname Bindings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/hostnamebindings/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Hostname Bindings."),
						Operation:   to.Ptr("Get Web Apps Slots Hostname Bindings"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Hostname Bindings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/hostnamebindings/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web Apps Slots Hostname Bindings."),
						Operation:   to.Ptr("Update Web Apps Slots Hostname Bindings"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Hostname Bindings"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/hybridconnection/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Slots Hybrid Connection."),
						Operation:   to.Ptr("Delete Web Apps Slots Hybrid Connection"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Hybrid Connection"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/hybridconnection/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Hybrid Connection."),
						Operation:   to.Ptr("Get Web Apps Slots Hybrid Connection"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Hybrid Connection"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/hybridconnection/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web Apps Slots Hybrid Connection."),
						Operation:   to.Ptr("Update Web Apps Slots Hybrid Connection"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Hybrid Connection"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/instances/deployments/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Instances Deployments."),
						Operation:   to.Ptr("Get Web Apps Slots Instances Deployments"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Instances Deployments"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/instances/processes/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Instances Processes."),
						Operation:   to.Ptr("Get Web Apps Slots Instances Processes"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Instances Processes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/instances/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Instances."),
						Operation:   to.Ptr("Get Web Apps Slots Instances"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Instances"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/metricdefinitions/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Metric Definitions."),
						Operation:   to.Ptr("Get Web Apps Slots Metric Definitions"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Metric Definitions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/metrics/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Metrics."),
						Operation:   to.Ptr("Get Web Apps Slots Metrics"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Metrics"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/newpassword/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Newpassword Web Apps Slots."),
						Operation:   to.Ptr("Newpassword Web Apps Slots"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/operationresults/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Operation Results."),
						Operation:   to.Ptr("Get Web Apps Slots Operation Results"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Operation Results"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/phplogging/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Phplogging."),
						Operation:   to.Ptr("Get Web Apps Slots Phplogging"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Phplogging"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/premieraddons/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Slots Premier Addons."),
						Operation:   to.Ptr("Delete Web Apps Slots Premier Addons"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Premier Addons"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/premieraddons/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Premier Addons."),
						Operation:   to.Ptr("Get Web Apps Slots Premier Addons"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Premier Addons"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/premieraddons/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web Apps Slots Premier Addons."),
						Operation:   to.Ptr("Update Web Apps Slots Premier Addons"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Premier Addons"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/restore/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Restore."),
						Operation:   to.Ptr("Get Web Apps Slots Restore"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Restore"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/sync/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Sync Web Apps Slots."),
						Operation:   to.Ptr("Sync Web Apps Slots"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/triggeredwebjobs/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Slots Triggered WebJobs."),
						Operation:   to.Ptr("Delete Web Apps Slots Triggered WebJobs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Triggered WebJobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/triggeredwebjobs/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Triggered WebJobs."),
						Operation:   to.Ptr("Get Web Apps Slots Triggered WebJobs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Triggered WebJobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/triggeredwebjobs/run/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Run Web Apps Slots Triggered WebJobs."),
						Operation:   to.Ptr("Run Web Apps Slots Triggered WebJobs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Triggered WebJobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/usages/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Usages."),
						Operation:   to.Ptr("Get Web Apps Slots Usages"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Usages"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/virtualnetworkconnections/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Slots Virtual Network Connections."),
						Operation:   to.Ptr("Delete Web Apps Slots Virtual Network Connections"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Virtual Network Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/virtualnetworkconnections/gateways/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web Apps Slots Virtual Network Connections Gateways."),
						Operation:   to.Ptr("Update Web Apps Slots Virtual Network Connections Gateways"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Virtual Network Connections Gateways"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/virtualnetworkconnections/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Virtual Network Connections."),
						Operation:   to.Ptr("Get Web Apps Slots Virtual Network Connections"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Virtual Network Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/virtualnetworkconnections/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web Apps Slots Virtual Network Connections."),
						Operation:   to.Ptr("Update Web Apps Slots Virtual Network Connections"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Virtual Network Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/webjobs/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots WebJobs."),
						Operation:   to.Ptr("Get Web Apps Slots WebJobs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots WebJobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/snapshots/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Snapshots."),
						Operation:   to.Ptr("Get Web Apps Snapshots"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Snapshots"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/sync/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Sync Web Apps."),
						Operation:   to.Ptr("Sync Web Apps"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/triggeredwebjobs/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Triggered WebJobs."),
						Operation:   to.Ptr("Delete Web Apps Triggered WebJobs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Triggered WebJobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/triggeredwebjobs/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Triggered WebJobs."),
						Operation:   to.Ptr("Get Web Apps Triggered WebJobs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Triggered WebJobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/triggeredwebjobs/run/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Run Web Apps Triggered WebJobs."),
						Operation:   to.Ptr("Run Web Apps Triggered WebJobs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Triggered WebJobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/usages/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Usages."),
						Operation:   to.Ptr("Get Web Apps Usages"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Usages"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/virtualnetworkconnections/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Virtual Network Connections."),
						Operation:   to.Ptr("Delete Web Apps Virtual Network Connections"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Virtual Network Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/virtualnetworkconnections/gateways/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Virtual Network Connections Gateways."),
						Operation:   to.Ptr("Get Web Apps Virtual Network Connections Gateways"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Virtual Network Connections Gateways"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/virtualnetworkconnections/gateways/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web Apps Virtual Network Connections Gateways."),
						Operation:   to.Ptr("Update Web Apps Virtual Network Connections Gateways"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Virtual Network Connections Gateways"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/virtualnetworkconnections/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Virtual Network Connections."),
						Operation:   to.Ptr("Get Web Apps Virtual Network Connections"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Virtual Network Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/virtualnetworkconnections/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web Apps Virtual Network Connections."),
						Operation:   to.Ptr("Update Web Apps Virtual Network Connections"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Virtual Network Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/webjobs/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps WebJobs."),
						Operation:   to.Ptr("Get Web Apps WebJobs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps WebJobs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/skus/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get SKUs."),
						Operation:   to.Ptr("Get SKUs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("SKUs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sourcecontrols/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Source Controls."),
						Operation:   to.Ptr("Get Source Controls"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Source Controls"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sourcecontrols/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Source Controls."),
						Operation:   to.Ptr("Update Source Controls"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Source Controls"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/unregister/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Unregister Microsoft.Web resource provider for the subscription."),
						Operation:   to.Ptr("Unregister Microsoft.Web resource provider"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Microsoft.Web resource provider"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/validate/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Validate ."),
						Operation:   to.Ptr("Validate "),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr(""),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/register/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Register Microsoft.Web resource provider for the subscription."),
						Operation:   to.Ptr("Register Microsoft.Web resource provider"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Microsoft.Web resource provider"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/hybridconnectionnamespaces/relays/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get App Service Plans Hybrid Connection Namespaces Relays."),
						Operation:   to.Ptr("Get App Service Plans Hybrid Connection Namespaces Relays"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plans Hybrid Connection Namespaces Relays"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/backups/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Backups."),
						Operation:   to.Ptr("Delete Web Apps Backups"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Backups"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/hybridconnectionnamespaces/relays/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Hybrid Connection Namespaces Relays."),
						Operation:   to.Ptr("Delete Web Apps Hybrid Connection Namespaces Relays"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Hybrid Connection Namespaces Relays"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/hybridconnectionnamespaces/relays/listkeys/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("List Keys Web Apps Hybrid Connection Namespaces Relays."),
						Operation:   to.Ptr("List Keys Web Apps Hybrid Connection Namespaces Relays"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Hybrid Connection Namespaces Relays"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/hybridconnectionnamespaces/relays/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web Apps Hybrid Connection Namespaces Relays."),
						Operation:   to.Ptr("Update Web Apps Hybrid Connection Namespaces Relays"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Hybrid Connection Namespaces Relays"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/metricsdefinitions/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Metrics Definitions."),
						Operation:   to.Ptr("Get Web Apps Metrics Definitions"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Metrics Definitions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/migratemysql/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Migrate MySql Web Apps."),
						Operation:   to.Ptr("Migrate MySql Web Apps"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/migratemysql/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Migrate MySql."),
						Operation:   to.Ptr("Get Web Apps Migrate MySql"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Migrate MySql"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/recover/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Recover Web Apps."),
						Operation:   to.Ptr("Recover Web Apps"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/siteextensions/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Site Extensions."),
						Operation:   to.Ptr("Delete Web Apps Site Extensions"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Site Extensions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/siteextensions/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Site Extensions."),
						Operation:   to.Ptr("Get Web Apps Site Extensions"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Site Extensions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/siteextensions/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web Apps Site Extensions."),
						Operation:   to.Ptr("Update Web Apps Site Extensions"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Site Extensions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/backup/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Backup."),
						Operation:   to.Ptr("Get Web Apps Slots Backup"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Backup"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/hybridconnectionrelays/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Hybrid Connection Relays."),
						Operation:   to.Ptr("Get Web Apps Slots Hybrid Connection Relays"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Hybrid Connection Relays"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/siteextensions/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Slots Site Extensions."),
						Operation:   to.Ptr("Delete Web Apps Slots Site Extensions"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Site Extensions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/siteextensions/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Site Extensions."),
						Operation:   to.Ptr("Get Web Apps Slots Site Extensions"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Site Extensions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/siteextensions/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web Apps Slots Site Extensions."),
						Operation:   to.Ptr("Update Web Apps Slots Site Extensions"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Site Extensions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/snapshots/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Snapshots."),
						Operation:   to.Ptr("Get Web Apps Slots Snapshots"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Snapshots"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/syncfunctiontriggers/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Sync Function Triggers for Web Apps."),
						Operation:   to.Ptr("Sync Function Triggers for Web Apps"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/triggeredwebjobs/history/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Triggered WebJobs History."),
						Operation:   to.Ptr("Get Web Apps Triggered WebJobs History"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Triggered WebJobs History"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/connectiongateways/liststatus/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("List Status Connection Gateways."),
						Operation:   to.Ptr("List Status Connection Gateways"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Connection Gateways"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/hybridconnectionnamespaces/relays/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete App Service Plans Hybrid Connection Namespaces Relays."),
						Operation:   to.Ptr("Delete App Service Plans Hybrid Connection Namespaces Relays"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("App Service Plans Hybrid Connection Namespaces Relays"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/deployment/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Diagnostics Deployment."),
						Operation:   to.Ptr("Get Web Apps Diagnostics Deployment"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics Deployment"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/sitecpuanalysis/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Diagnostics Site CPU Analysis."),
						Operation:   to.Ptr("Get Web Apps Diagnostics Site CPU Analysis"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics Site CPU Analysis"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/sitelatency/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Diagnostics Site Latency."),
						Operation:   to.Ptr("Get Web Apps Diagnostics Site Latency"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics Site Latency"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/sitememoryanalysis/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Diagnostics Site Memory Analysis."),
						Operation:   to.Ptr("Get Web Apps Diagnostics Site Memory Analysis"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics Site Memory Analysis"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/threadcount/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Diagnostics Thread Count."),
						Operation:   to.Ptr("Get Web Apps Diagnostics Thread Count"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics Thread Count"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/deployment/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Diagnostics Deployment."),
						Operation:   to.Ptr("Get Web Apps Slots Diagnostics Deployment"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics Deployment"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/sitecpuanalysis/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Diagnostics Site CPU Analysis."),
						Operation:   to.Ptr("Get Web Apps Slots Diagnostics Site CPU Analysis"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics Site CPU Analysis"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/sitelatency/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Diagnostics Site Latency."),
						Operation:   to.Ptr("Get Web Apps Slots Diagnostics Site Latency"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics Site Latency"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/sitememoryanalysis/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Diagnostics Site Memory Analysis."),
						Operation:   to.Ptr("Get Web Apps Slots Diagnostics Site Memory Analysis"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics Site Memory Analysis"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/threadcount/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Diagnostics Thread Count."),
						Operation:   to.Ptr("Get Web Apps Slots Diagnostics Thread Count"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics Thread Count"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/functions/masterkey/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Functions Masterkey."),
						Operation:   to.Ptr("Get Web Apps Functions Masterkey"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Functions Masterkey"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/hybridconnectionnamespaces/relays/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Hybrid Connection Namespaces Relays."),
						Operation:   to.Ptr("Get Web Apps Hybrid Connection Namespaces Relays"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Hybrid Connection Namespaces Relays"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/instances/extensions/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Instances Extensions."),
						Operation:   to.Ptr("Get Web Apps Instances Extensions"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Instances Extensions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/operations/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Operations."),
						Operation:   to.Ptr("Get Web Apps Operations"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Operations"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/resourcehealthmetadata/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Resource Health Metadata."),
						Operation:   to.Ptr("Get Web Apps Resource Health Metadata"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Resource Health Metadata"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/backups/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Slots Backups."),
						Operation:   to.Ptr("Delete Web Apps Slots Backups"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Backups"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/domainownershipidentifiers/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Domain Ownership Identifiers."),
						Operation:   to.Ptr("Get Web Apps Slots Domain Ownership Identifiers"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Domain Ownership Identifiers"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/hybridconnectionnamespaces/relays/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Slots Hybrid Connection Namespaces Relays."),
						Operation:   to.Ptr("Delete Web Apps Slots Hybrid Connection Namespaces Relays"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Hybrid Connection Namespaces Relays"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/hybridconnectionnamespaces/relays/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web Apps Slots Hybrid Connection Namespaces Relays."),
						Operation:   to.Ptr("Update Web Apps Slots Hybrid Connection Namespaces Relays"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Hybrid Connection Namespaces Relays"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/operations/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Operations."),
						Operation:   to.Ptr("Get Web Apps Slots Operations"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Operations"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/perfcounters/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Performance Counters."),
						Operation:   to.Ptr("Get Web Apps Slots Performance Counters"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Performance Counters"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/resourcehealthmetadata/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Resource Health Metadata."),
						Operation:   to.Ptr("Get Web Apps Slots Resource Health Metadata"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Resource Health Metadata"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/apimanagementaccounts/apiacls/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Api Management Accounts Apiacls."),
						Operation:   to.Ptr("Get Api Management Accounts Apiacls"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Api Management Accounts Apiacls"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/apimanagementaccounts/apis/connections/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Api Management Accounts APIs Connections."),
						Operation:   to.Ptr("Get Api Management Accounts APIs Connections"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Api Management Accounts APIs Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/apimanagementaccounts/apis/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Api Management Accounts APIs."),
						Operation:   to.Ptr("Get Api Management Accounts APIs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Api Management Accounts APIs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/apimanagementaccounts/connectionacls/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Api Management Accounts Connectionacls."),
						Operation:   to.Ptr("Get Api Management Accounts Connectionacls"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Api Management Accounts Connectionacls"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/apimanagementaccounts/apis/apiacls/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Api Management Accounts APIs Apiacls."),
						Operation:   to.Ptr("Delete Api Management Accounts APIs Apiacls"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Api Management Accounts APIs Apiacls"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/apimanagementaccounts/apis/apiacls/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Api Management Accounts APIs Apiacls."),
						Operation:   to.Ptr("Get Api Management Accounts APIs Apiacls"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Api Management Accounts APIs Apiacls"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/apimanagementaccounts/apis/apiacls/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Api Management Accounts APIs Apiacls."),
						Operation:   to.Ptr("Update Api Management Accounts APIs Apiacls"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Api Management Accounts APIs Apiacls"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/apimanagementaccounts/apis/connectionacls/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Api Management Accounts APIs Connectionacls."),
						Operation:   to.Ptr("Get Api Management Accounts APIs Connectionacls"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Api Management Accounts APIs Connectionacls"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/apimanagementaccounts/apis/connections/confirmconsentcode/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Confirm Consent Code Api Management Accounts APIs Connections."),
						Operation:   to.Ptr("Confirm Consent Code Api Management Accounts APIs Connections"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Api Management Accounts APIs Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/apimanagementaccounts/apis/connections/connectionacls/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Api Management Accounts APIs Connections Connectionacls."),
						Operation:   to.Ptr("Delete Api Management Accounts APIs Connections Connectionacls"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Api Management Accounts APIs Connections Connectionacls"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/apimanagementaccounts/apis/connections/connectionacls/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Api Management Accounts APIs Connections Connectionacls."),
						Operation:   to.Ptr("Get Api Management Accounts APIs Connections Connectionacls"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Api Management Accounts APIs Connections Connectionacls"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/apimanagementaccounts/apis/connections/connectionacls/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Api Management Accounts APIs Connections Connectionacls."),
						Operation:   to.Ptr("Update Api Management Accounts APIs Connections Connectionacls"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Api Management Accounts APIs Connections Connectionacls"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/apimanagementaccounts/apis/connections/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Api Management Accounts APIs Connections."),
						Operation:   to.Ptr("Delete Api Management Accounts APIs Connections"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Api Management Accounts APIs Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/apimanagementaccounts/apis/connections/getconsentlinks/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Consent Links for Api Management Accounts APIs Connections."),
						Operation:   to.Ptr("Get Consent Links for Api Management Accounts APIs Connections"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Api Management Accounts APIs Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/apimanagementaccounts/apis/connections/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Api Management Accounts APIs Connections."),
						Operation:   to.Ptr("Update Api Management Accounts APIs Connections"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Api Management Accounts APIs Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/apimanagementaccounts/apis/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Api Management Accounts APIs."),
						Operation:   to.Ptr("Delete Api Management Accounts APIs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Api Management Accounts APIs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/apimanagementaccounts/apis/localizeddefinitions/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Api Management Accounts APIs Localized Definitions."),
						Operation:   to.Ptr("Delete Api Management Accounts APIs Localized Definitions"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Api Management Accounts APIs Localized Definitions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/apimanagementaccounts/apis/localizeddefinitions/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Api Management Accounts APIs Localized Definitions."),
						Operation:   to.Ptr("Get Api Management Accounts APIs Localized Definitions"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Api Management Accounts APIs Localized Definitions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/apimanagementaccounts/apis/localizeddefinitions/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Api Management Accounts APIs Localized Definitions."),
						Operation:   to.Ptr("Update Api Management Accounts APIs Localized Definitions"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Api Management Accounts APIs Localized Definitions"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/apimanagementaccounts/apis/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Api Management Accounts APIs."),
						Operation:   to.Ptr("Update Api Management Accounts APIs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Api Management Accounts APIs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/apimanagementaccounts/apis/connections/listconnectionkeys/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("List Connection Keys Api Management Accounts APIs Connections."),
						Operation:   to.Ptr("List Connection Keys Api Management Accounts APIs Connections"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Api Management Accounts APIs Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/apimanagementaccounts/apis/connections/listsecrets/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("List Secrets Api Management Accounts APIs Connections."),
						Operation:   to.Ptr("List Secrets Api Management Accounts APIs Connections"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Api Management Accounts APIs Connections"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/deployments/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Diagnostics Deployments."),
						Operation:   to.Ptr("Get Web Apps Diagnostics Deployments"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics Deployments"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/deployments/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Diagnostics Deployments."),
						Operation:   to.Ptr("Get Web Apps Slots Diagnostics Deployments"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics Deployments"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/loganalyzer/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Diagnostics Log Analyzer."),
						Operation:   to.Ptr("Get Web Apps Diagnostics Log Analyzer"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics Log Analyzer"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/loganalyzer/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Diagnostics Log Analyzer."),
						Operation:   to.Ptr("Get Web Apps Slots Diagnostics Log Analyzer"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics Log Analyzer"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/sitecrashes/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Diagnostics Site Crashes."),
						Operation:   to.Ptr("Get Web Apps Diagnostics Site Crashes"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics Site Crashes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/sitecrashes/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Diagnostics Site Crashes."),
						Operation:   to.Ptr("Get Web Apps Slots Diagnostics Site Crashes"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics Site Crashes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/siterestartsettingupdate/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Diagnostics Site Restart Setting Update."),
						Operation:   to.Ptr("Get Web Apps Diagnostics Site Restart Setting Update"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics Site Restart Setting Update"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/siterestartsettingupdate/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Diagnostics Site Restart Setting Update."),
						Operation:   to.Ptr("Get Web Apps Slots Diagnostics Site Restart Setting Update"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics Site Restart Setting Update"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/siterestartuserinitiated/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Diagnostics Site Restart User Initiated."),
						Operation:   to.Ptr("Get Web Apps Diagnostics Site Restart User Initiated"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics Site Restart User Initiated"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/siterestartuserinitiated/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Diagnostics Site Restart User Initiated."),
						Operation:   to.Ptr("Get Web Apps Slots Diagnostics Site Restart User Initiated"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics Site Restart User Initiated"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/siteswap/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Diagnostics Site Swap."),
						Operation:   to.Ptr("Get Web Apps Diagnostics Site Swap"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics Site Swap"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/siteswap/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Diagnostics Site Swap."),
						Operation:   to.Ptr("Get Web Apps Slots Diagnostics Site Swap"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics Site Swap"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/functions/token/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Functions Token."),
						Operation:   to.Ptr("Get Web Apps Functions Token"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Functions Token"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/instances/deployments/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Instances Deployments."),
						Operation:   to.Ptr("Delete Web Apps Instances Deployments"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Instances Deployments"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/processes/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Processes."),
						Operation:   to.Ptr("Get Web Apps Processes"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Processes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/publiccertificates/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Public Certificates."),
						Operation:   to.Ptr("Delete Web Apps Public Certificates"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Public Certificates"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/publiccertificates/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Public Certificates."),
						Operation:   to.Ptr("Get Web Apps Public Certificates"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Public Certificates"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/publiccertificates/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Web Apps Public Certificates."),
						Operation:   to.Ptr("Update Web Apps Public Certificates"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Public Certificates"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/networktrace/action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Network Trace Web Apps Slots."),
						Operation:   to.Ptr("Network Trace Web Apps Slots"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/autoheal/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Diagnostics Autoheal."),
						Operation:   to.Ptr("Get Web Apps Diagnostics Autoheal"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics Autoheal"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/autoheal/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Diagnostics Autoheal."),
						Operation:   to.Ptr("Get Web Apps Slots Diagnostics Autoheal"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics Autoheal"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Diagnostics."),
						Operation:   to.Ptr("Get Web Apps Slots Diagnostics"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/runtimeavailability/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Diagnostics Runtime Availability."),
						Operation:   to.Ptr("Get Web Apps Slots Diagnostics Runtime Availability"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics Runtime Availability"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/servicehealth/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Diagnostics Service Health."),
						Operation:   to.Ptr("Get Web Apps Slots Diagnostics Service Health"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics Service Health"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/sitelatency/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Diagnostics Site Latency."),
						Operation:   to.Ptr("Get Web Apps Slots Diagnostics Site Latency"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics Site Latency"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/migratemysql/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Migrate MySql."),
						Operation:   to.Ptr("Get Web Apps Slots Migrate MySql"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Migrate MySql"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource"),
						Operation:   to.Ptr("Read diagnostic setting"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Diagnostic setting for Web App"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource"),
						Operation:   to.Ptr("Write diagnostic setting"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Diagnostic setting for Web App"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource"),
						Operation:   to.Ptr("Read diagnostic setting"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Diagnostic setting for Web App slot"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource"),
						Operation:   to.Ptr("Write diagnostic setting"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Diagnostic setting for Web App slot"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource"),
						Operation:   to.Ptr("Read diagnostic setting"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Diagnostic setting for App Service plan"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("microsoft.web/serverfarms/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource"),
						Operation:   to.Ptr("Write diagnostic setting"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Diagnostic setting for App Service plan"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("microsoft.web/hostingenvironments/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource"),
						Operation:   to.Ptr("Read diagnostic setting"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Diagnostic setting for App Service Environment"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("microsoft.web/hostingenvironments/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource"),
						Operation:   to.Ptr("Write diagnostic setting"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Diagnostic setting for App Service Environment"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("microsoft.web/billingmeters/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get list of billing meters."),
						Operation:   to.Ptr("Read billing meters"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Billing meters for Microsoft Web Apps"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/instances/processes/delete"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Delete Web Apps Slots Instances Processes."),
						Operation:   to.Ptr("Delete Web Apps Slots Instances Processes"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Instances Processes"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/restore/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Restore Web Apps."),
						Operation:   to.Ptr("Restore Web Apps"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/instances/extensions/log/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Instances Extensions Log."),
						Operation:   to.Ptr("Get Web Apps Instances Extensions Log"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Instances Extensions Log"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/customapis/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Update Custom APIs."),
						Operation:   to.Ptr("Update Custom APIs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Custom APIs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/customapis/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Custom APIs."),
						Operation:   to.Ptr("Get Custom APIs"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Custom APIs"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/failedrequestsperuri/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Diagnostics Failed Requests Per Uri."),
						Operation:   to.Ptr("Get Web Apps Diagnostics Failed Requests Per Uri"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics Failed Requests Per Uri"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/restore/write"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Restore Web Apps Slots."),
						Operation:   to.Ptr("Restore Web Apps Slots"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/detectors/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Diagnostics Detector."),
						Operation:   to.Ptr("Get Web Apps Diagnostics Detector"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics Detector"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/analyses/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Diagnostics Analysis."),
						Operation:   to.Ptr("Get Web Apps Diagnostics Analysis"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics Analysis"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/analyses/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Diagnostics Analysis."),
						Operation:   to.Ptr("Get Web Apps Slots Diagnostics Analysis"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics Analysis"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/detectors/read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Get Web Apps Slots Diagnostics Detector."),
						Operation:   to.Ptr("Get Web Apps Slots Diagnostics Detector"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics Detector"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/analyses/execute/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Run Web Apps Diagnostics Analysis."),
						Operation:   to.Ptr("Run Web Apps Diagnostics Analysis"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics Analysis"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/diagnostics/detectors/execute/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Run Web Apps Diagnostics Detector."),
						Operation:   to.Ptr("Run Web Apps Diagnostics Detector"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Diagnostics Detector"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/analyses/execute/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Run Web Apps Slots Diagnostics Analysis."),
						Operation:   to.Ptr("Run Web Apps Slots Diagnostics Analysis"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics Analysis"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("microsoft.web/sites/slots/diagnostics/detectors/execute/Action"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Run Web Apps Slots Diagnostics Detector."),
						Operation:   to.Ptr("Run Web Apps Slots Diagnostics Detector"),
						Provider:    to.Ptr("Microsoft Web Apps"),
						Resource:    to.Ptr("Web Apps Slots Diagnostics Detector"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.Web/serverfarms/providers/Microsoft.Insights/metricDefinitions/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Gets the available metrics for App Service Plan"),
						Operation:   to.Ptr("Read App Service Plan metric definitions"),
						Provider:    to.Ptr("Microsoft.Web"),
						Resource:    to.Ptr("The metric definition of App Service Plan"),
					},
					Origin: to.Ptr("system"),
					Properties: &armappservice.CsmOperationDescriptionProperties{
						ServiceSpecification: &armappservice.ServiceSpecification{
							MetricSpecifications: []*armappservice.MetricSpecification{
								{
									Name:            to.Ptr("CpuPercentage"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("CPU Percentage"),
									DisplayName:                      to.Ptr("CPU Percentage"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Percent"),
								},
								{
									Name:            to.Ptr("MemoryPercentage"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Memory Percentage"),
									DisplayName:                      to.Ptr("Memory Percentage"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Percent"),
								},
								{
									Name:            to.Ptr("DiskQueueLength"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Disk Queue Length"),
									DisplayName:                      to.Ptr("Disk Queue Length"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("HttpQueueLength"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http Queue Length"),
									DisplayName:                      to.Ptr("Http Queue Length"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("BytesReceived"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Data In"),
									DisplayName:                      to.Ptr("Data In"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Bytes"),
								},
								{
									Name:            to.Ptr("BytesSent"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Data Out"),
									DisplayName:                      to.Ptr("Data Out"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Bytes"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/providers/Microsoft.Insights/metricDefinitions/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Gets the available metrics for Web App"),
						Operation:   to.Ptr("Read Web App metric definitions"),
						Provider:    to.Ptr("Microsoft.Web"),
						Resource:    to.Ptr("The metric definition of Web App"),
					},
					Origin: to.Ptr("system"),
					Properties: &armappservice.CsmOperationDescriptionProperties{
						ServiceSpecification: &armappservice.ServiceSpecification{
							MetricSpecifications: []*armappservice.MetricSpecification{
								{
									Name:            to.Ptr("CpuTime"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("CPU Time"),
									DisplayName:                      to.Ptr("CPU Time"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Seconds"),
								},
								{
									Name:            to.Ptr("Requests"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Requests"),
									DisplayName:                      to.Ptr("Requests"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("BytesReceived"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Data In"),
									DisplayName:                      to.Ptr("Data In"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Bytes"),
								},
								{
									Name:            to.Ptr("BytesSent"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Data Out"),
									DisplayName:                      to.Ptr("Data Out"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Bytes"),
								},
								{
									Name:            to.Ptr("Http101"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 101"),
									DisplayName:                      to.Ptr("Http 101"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http2xx"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 2xx"),
									DisplayName:                      to.Ptr("Http 2xx"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http3xx"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 3xx"),
									DisplayName:                      to.Ptr("Http 3xx"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http401"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 401"),
									DisplayName:                      to.Ptr("Http 401"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http403"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 403"),
									DisplayName:                      to.Ptr("Http 403"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http404"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 404"),
									DisplayName:                      to.Ptr("Http 404"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http406"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 406"),
									DisplayName:                      to.Ptr("Http 406"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http4xx"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 4xx"),
									DisplayName:                      to.Ptr("Http 4xx"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http5xx"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http Server Errors"),
									DisplayName:                      to.Ptr("Http Server Errors"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("MemoryWorkingSet"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Memory working set"),
									DisplayName:                      to.Ptr("Memory working set"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Bytes"),
								},
								{
									Name:            to.Ptr("AverageMemoryWorkingSet"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Average memory working set"),
									DisplayName:                      to.Ptr("Average memory working set"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Bytes"),
								},
								{
									Name:            to.Ptr("AverageResponseTime"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Average Response Time"),
									DisplayName:                      to.Ptr("Average Response Time"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Seconds"),
								},
								{
									Name:            to.Ptr("FunctionExecutionUnits"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Function Execution Units"),
									DisplayName:                      to.Ptr("Function Execution Units"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("(?i:functionapp)"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("FunctionExecutionCount"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Function Execution Count"),
									DisplayName:                      to.Ptr("Function Execution Count"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("(?i:functionapp)"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.Web/sites/slots/providers/Microsoft.Insights/metricDefinitions/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Gets the available metrics for Web App Slot"),
						Operation:   to.Ptr("Read Web App Slot metric definitions"),
						Provider:    to.Ptr("Microsoft.Web"),
						Resource:    to.Ptr("The metric definition of Web App Slot"),
					},
					Origin: to.Ptr("system"),
					Properties: &armappservice.CsmOperationDescriptionProperties{
						ServiceSpecification: &armappservice.ServiceSpecification{
							MetricSpecifications: []*armappservice.MetricSpecification{
								{
									Name:            to.Ptr("CpuTime"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("CPU Time"),
									DisplayName:                      to.Ptr("CPU Time"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Seconds"),
								},
								{
									Name:            to.Ptr("Requests"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Requests"),
									DisplayName:                      to.Ptr("Requests"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("BytesReceived"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Data In"),
									DisplayName:                      to.Ptr("Data In"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Bytes"),
								},
								{
									Name:            to.Ptr("BytesSent"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Data Out"),
									DisplayName:                      to.Ptr("Data Out"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Bytes"),
								},
								{
									Name:            to.Ptr("Http101"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 101"),
									DisplayName:                      to.Ptr("Http 101"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http2xx"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 2xx"),
									DisplayName:                      to.Ptr("Http 2xx"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http3xx"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 3xx"),
									DisplayName:                      to.Ptr("Http 3xx"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http401"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 401"),
									DisplayName:                      to.Ptr("Http 401"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http403"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 403"),
									DisplayName:                      to.Ptr("Http 403"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http404"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 404"),
									DisplayName:                      to.Ptr("Http 404"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http406"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 406"),
									DisplayName:                      to.Ptr("Http 406"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http4xx"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 4xx"),
									DisplayName:                      to.Ptr("Http 4xx"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http5xx"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http Server Errors"),
									DisplayName:                      to.Ptr("Http Server Errors"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("MemoryWorkingSet"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Memory working set"),
									DisplayName:                      to.Ptr("Memory working set"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Bytes"),
								},
								{
									Name:            to.Ptr("AverageMemoryWorkingSet"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Average memory working set"),
									DisplayName:                      to.Ptr("Average memory working set"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Bytes"),
								},
								{
									Name:            to.Ptr("AverageResponseTime"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Average Response Time"),
									DisplayName:                      to.Ptr("Average Response Time"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("^(?!functionapp).*$"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Seconds"),
								},
								{
									Name:            to.Ptr("FunctionExecutionUnits"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Function Execution Units"),
									DisplayName:                      to.Ptr("Function Execution Units"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("(?i:functionapp)"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("FunctionExecutionCount"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Function Execution Count"),
									DisplayName:                      to.Ptr("Function Execution Count"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									MetricFilterPattern:              to.Ptr("(?i:functionapp)"),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.Web/hostingEnvironments/multiRolePools/providers/Microsoft.Insights/metricDefinitions/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Gets the available metrics for App Service Environment MultiRole"),
						Operation:   to.Ptr("Read App Service Environment MultiRole metric definitions"),
						Provider:    to.Ptr("Microsoft.Web"),
						Resource:    to.Ptr("The metric definition of App Service Environment MultiRole"),
					},
					Origin: to.Ptr("system"),
					Properties: &armappservice.CsmOperationDescriptionProperties{
						ServiceSpecification: &armappservice.ServiceSpecification{
							MetricSpecifications: []*armappservice.MetricSpecification{
								{
									Name:            to.Ptr("Requests"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Requests"),
									DisplayName:                      to.Ptr("Requests"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("BytesReceived"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Data In"),
									DisplayName:                      to.Ptr("Data In"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Bytes"),
								},
								{
									Name:            to.Ptr("BytesSent"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Data Out"),
									DisplayName:                      to.Ptr("Data Out"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Bytes"),
								},
								{
									Name:            to.Ptr("Http101"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 101"),
									DisplayName:                      to.Ptr("Http 101"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http2xx"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 2xx"),
									DisplayName:                      to.Ptr("Http 2xx"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http3xx"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 3xx"),
									DisplayName:                      to.Ptr("Http 3xx"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http401"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 401"),
									DisplayName:                      to.Ptr("Http 401"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http403"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 403"),
									DisplayName:                      to.Ptr("Http 403"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http404"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 404"),
									DisplayName:                      to.Ptr("Http 404"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http406"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 406"),
									DisplayName:                      to.Ptr("Http 406"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http4xx"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http 4xx"),
									DisplayName:                      to.Ptr("Http 4xx"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("Http5xx"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http Server Errors"),
									DisplayName:                      to.Ptr("Http Server Errors"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("AverageResponseTime"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Average Response Time"),
									DisplayName:                      to.Ptr("Average Response Time"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Seconds"),
								},
								{
									Name:            to.Ptr("CpuPercentage"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("CPU Percentage"),
									DisplayName:                      to.Ptr("CPU Percentage"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Percent"),
								},
								{
									Name:            to.Ptr("MemoryPercentage"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Memory Percentage"),
									DisplayName:                      to.Ptr("Memory Percentage"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Percent"),
								},
								{
									Name:            to.Ptr("DiskQueueLength"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Disk Queue Length"),
									DisplayName:                      to.Ptr("Disk Queue Length"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("HttpQueueLength"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Http Queue Length"),
									DisplayName:                      to.Ptr("Http Queue Length"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("ActiveRequests"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									Dimensions: []*armappservice.Dimension{
										{
											Name:                   to.Ptr("Instance"),
											DisplayName:            to.Ptr("Instance"),
											InternalName:           to.Ptr("ServerName"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:               to.Ptr("Active Requests"),
									DisplayName:                      to.Ptr("Active Requests"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("TotalFrontEnds"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									DisplayDescription:               to.Ptr("Total Front Ends"),
									DisplayName:                      to.Ptr("Total Front Ends"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("SmallAppServicePlanInstances"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									DisplayDescription:               to.Ptr("Small App Service Plan Workers"),
									DisplayName:                      to.Ptr("Small App Service Plan Workers"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("MediumAppServicePlanInstances"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									DisplayDescription:               to.Ptr("Medium App Service Plan Workers"),
									DisplayName:                      to.Ptr("Medium App Service Plan Workers"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("LargeAppServicePlanInstances"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									DisplayDescription:               to.Ptr("Large App Service Plan Workers"),
									DisplayName:                      to.Ptr("Large App Service Plan Workers"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.Web/hostingEnvironments/workerPools/providers/Microsoft.Insights/metricDefinitions/Read"),
					Display: &armappservice.CsmOperationDisplay{
						Description: to.Ptr("Gets the available metrics for App Service Environment WorkerPool"),
						Operation:   to.Ptr("Read App Service Environment WorkerPool metric definitions"),
						Provider:    to.Ptr("Microsoft.Web"),
						Resource:    to.Ptr("The metric definition of App Service Environment WorkerPool"),
					},
					Origin: to.Ptr("system"),
					Properties: &armappservice.CsmOperationDescriptionProperties{
						ServiceSpecification: &armappservice.ServiceSpecification{
							MetricSpecifications: []*armappservice.MetricSpecification{
								{
									Name:            to.Ptr("WorkersTotal"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									DisplayDescription:               to.Ptr("Total Workers"),
									DisplayName:                      to.Ptr("Total Workers"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("WorkersAvailable"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									DisplayDescription:               to.Ptr("Available Workers"),
									DisplayName:                      to.Ptr("Available Workers"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("WorkersUsed"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armappservice.MetricAvailability{
										{
											BlobDuration: to.Ptr("P2D"),
											TimeGrain:    to.Ptr("PT1M"),
										},
										{
											BlobDuration: to.Ptr("P30D"),
											TimeGrain:    to.Ptr("PT1H"),
										},
										{
											BlobDuration: to.Ptr("P90D"),
											TimeGrain:    to.Ptr("P1D"),
										}},
									DisplayDescription:               to.Ptr("Used Workers"),
									DisplayName:                      to.Ptr("Used Workers"),
									EnableRegionalMdmAccount:         to.Ptr(false),
									FillGapWithZero:                  to.Ptr(true),
									IsInternal:                       to.Ptr(false),
									SupportsInstanceLevelAggregation: to.Ptr(false),
									Unit:                             to.Ptr("Count"),
								}},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CsmOperationCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CsmOperationCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProvider_GetWebAppStacks(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebAppStacks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Web App Stacks"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewProviderClient("<subscription-id>", cred, &options)
	pager := client.GetWebAppStacks(&armappservice.ProviderClientGetWebAppStacksOptions{StackOsType: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebAppStacks.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.WebAppStackCollection{
			Value: []*armappservice.WebAppStack{
				{
					Name: to.Ptr("dotnet"),
					Type: to.Ptr("Microsoft.Web/webAppStacks"),
					ID:   to.Ptr("/providers/Microsoft.Web/webAppStacks/dotnet"),
					Properties: &armappservice.WebAppStackProperties{
						DisplayText: to.Ptr(".NET"),
						MajorVersions: []*armappservice.WebAppMajorVersion{
							{
								DisplayText: to.Ptr(".NET 5"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr(".NET 5"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("5.0.x"),
												},
												IsEarlyAccess:            to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("DOTNETCORE|5.0"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("5.0.x"),
												},
												IsEarlyAccess:            to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("v5.0"),
											},
										},
										Value: to.Ptr("5"),
									}},
								Value: to.Ptr("5"),
							},
							{
								DisplayText: to.Ptr(".NET Core 3"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr(".NET Core 3.1 (LTS)"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.1.301"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("DOTNETCORE|3.1"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.1.301"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("3.1"),
											},
										},
										Value: to.Ptr("3.1"),
									},
									{
										DisplayText: to.Ptr(".NET Core 3.0"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.0.103"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("DOTNETCORE|3.0"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.0.103"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("3.0"),
											},
										},
										Value: to.Ptr("3.0"),
									}},
								Value: to.Ptr("3"),
							},
							{
								DisplayText: to.Ptr(".NET Core 2"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr(".NET Core 2.2"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-23T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("2.2.207"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("DOTNETCORE|2.2"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-23T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("2.2.207"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("2.2"),
											},
										},
										Value: to.Ptr("2.2"),
									},
									{
										DisplayText: to.Ptr(".NET Core 2.1 (LTS)"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-21T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("2.1.807"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("DOTNETCORE|2.1"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-21T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("2.1.807"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("2.1"),
											},
										},
										Value: to.Ptr("2.1"),
									},
									{
										DisplayText: to.Ptr(".NET Core 2.0"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("2.1.202"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("DOTNETCORE|2.0"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("2.1.202"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("2.0"),
											},
										},
										Value: to.Ptr("2.0"),
									}},
								Value: to.Ptr("dotnetcore2"),
							},
							{
								DisplayText: to.Ptr(".NET Core 1"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr(".NET Core 1.1"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-27T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("1.1.14"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("DOTNETCORE|1.1"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-27T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("1.1.14"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.1"),
											},
										},
										Value: to.Ptr("1.1"),
									},
									{
										DisplayText: to.Ptr(".NET Core 1.0"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-27T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("1.1.14"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("DOTNETCORE|1.0"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-27T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("1.1.14"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.0"),
											},
										},
										Value: to.Ptr("1.0"),
									}},
								Value: to.Ptr("1"),
							},
							{
								DisplayText: to.Ptr("ASP.NET V4"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("ASP.NET V4.8"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.1"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("v4.0"),
											},
										},
										Value: to.Ptr("v4.8"),
									}},
								Value: to.Ptr("v4"),
							},
							{
								DisplayText: to.Ptr("ASP.NET V3"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("ASP.NET V3.5"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("2.1"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("v2.0"),
											},
										},
										Value: to.Ptr("v3.5"),
									}},
								Value: to.Ptr("v3"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsWindows),
						Value:       to.Ptr("dotnet"),
					},
				},
				{
					Name: to.Ptr("node"),
					Type: to.Ptr("Microsoft.Web/webAppStacks"),
					ID:   to.Ptr("/providers/Microsoft.Web/webAppStacks/node"),
					Properties: &armappservice.WebAppStackProperties{
						DisplayText: to.Ptr("Node"),
						MajorVersions: []*armappservice.WebAppMajorVersion{
							{
								DisplayText: to.Ptr("Node LTS"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Node LTS"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|lts"),
											},
										},
										Value: to.Ptr("lts"),
									}},
								Value: to.Ptr("lts"),
							},
							{
								DisplayText: to.Ptr("Node 14"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Node 14 LTS"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("14.x"),
												},
												IsPreview:                to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|14-lts"),
											},
										},
										Value: to.Ptr("14-lts"),
									}},
								Value: to.Ptr("14"),
							},
							{
								DisplayText: to.Ptr("Node 12"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Node 12 LTS"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("12.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|12-lts"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("12.13.0"),
											},
										},
										Value: to.Ptr("12-lts"),
									},
									{
										DisplayText: to.Ptr("Node 12.9"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("12.x"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(true),
												RuntimeVersion:           to.Ptr("NODE|12.9"),
											},
										},
										Value: to.Ptr("12.9"),
									}},
								Value: to.Ptr("12"),
							},
							{
								DisplayText: to.Ptr("Node 10"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Node 10 LTS"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|10-lts"),
											},
										},
										Value: to.Ptr("10-LTS"),
									},
									{
										DisplayText: to.Ptr("Node 10.16"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|10.16"),
											},
										},
										Value: to.Ptr("10.16"),
									},
									{
										DisplayText: to.Ptr("Node 10.15"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												IsHidden:                 to.Ptr(true),
												IsPreview:                to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("10.15.2"),
											},
										},
										Value: to.Ptr("10.15"),
									},
									{
										DisplayText: to.Ptr("Node 10.14"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|10.14"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("10.14.1"),
											},
										},
										Value: to.Ptr("10.14"),
									},
									{
										DisplayText: to.Ptr("Node 10.12"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|10.12"),
											},
										},
										Value: to.Ptr("10.12"),
									},
									{
										DisplayText: to.Ptr("Node 10.10"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|10.10"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("10.0.0"),
											},
										},
										Value: to.Ptr("10.10"),
									},
									{
										DisplayText: to.Ptr("Node 10.6"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|10.6"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("10.6.0"),
											},
										},
										Value: to.Ptr("10.6"),
									},
									{
										DisplayText: to.Ptr("Node 10.1"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("10.x"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|10.1"),
											},
										},
										Value: to.Ptr("10.1"),
									}},
								Value: to.Ptr("10"),
							},
							{
								DisplayText: to.Ptr("Node 9"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Node 9.4"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|9.4"),
											},
										},
										Value: to.Ptr("9.4"),
									}},
								Value: to.Ptr("9"),
							},
							{
								DisplayText: to.Ptr("Node 8"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Node 8 LTS"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|8-lts"),
											},
										},
										Value: to.Ptr("8-lts"),
									},
									{
										DisplayText: to.Ptr("Node 8.12"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|8.12"),
											},
										},
										Value: to.Ptr("8.12"),
									},
									{
										DisplayText: to.Ptr("Node 8.11"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|8.11"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("8.11"),
											},
										},
										Value: to.Ptr("8.11"),
									},
									{
										DisplayText: to.Ptr("Node 8.10"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("8.10"),
											},
										},
										Value: to.Ptr("8.10"),
									},
									{
										DisplayText: to.Ptr("Node 8.9"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|8.9"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("8.9"),
											},
										},
										Value: to.Ptr("8.9"),
									},
									{
										DisplayText: to.Ptr("Node 8.8"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|8.8"),
											},
										},
										Value: to.Ptr("8.8"),
									},
									{
										DisplayText: to.Ptr("Node 8.5"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("8.5"),
											},
										},
										Value: to.Ptr("8.5"),
									},
									{
										DisplayText: to.Ptr("Node 8.4"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("8.4"),
											},
										},
										Value: to.Ptr("8.4"),
									},
									{
										DisplayText: to.Ptr("Node 8.2"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|8.2"),
											},
										},
										Value: to.Ptr("8.2"),
									},
									{
										DisplayText: to.Ptr("Node 8.1"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|8.1"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("8.1.4"),
											},
										},
										Value: to.Ptr("8.1"),
									},
									{
										DisplayText: to.Ptr("Node 8.0"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-31T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|8.0"),
											},
										},
										Value: to.Ptr("8.0"),
									}},
								Value: to.Ptr("8"),
							},
							{
								DisplayText: to.Ptr("Node 7"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Node 7.10"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("7.10.1"),
											},
										},
										Value: to.Ptr("7.10"),
									}},
								Value: to.Ptr("7"),
							},
							{
								DisplayText: to.Ptr("Node 6"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Node 6 LTS"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|6-lts"),
											},
										},
										Value: to.Ptr("6-LTS"),
									},
									{
										DisplayText: to.Ptr("Node 6.12"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("6.12"),
											},
										},
										Value: to.Ptr("6.12"),
									},
									{
										DisplayText: to.Ptr("Node 6.11"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|6.11"),
											},
										},
										Value: to.Ptr("6.11"),
									},
									{
										DisplayText: to.Ptr("Node 6.10"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|6.10"),
											},
										},
										Value: to.Ptr("6.10"),
									},
									{
										DisplayText: to.Ptr("Node 6.9"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|6.9"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("6.9.5"),
											},
										},
										Value: to.Ptr("6.9"),
									},
									{
										DisplayText: to.Ptr("Node 6.6"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|6.6"),
											},
										},
										Value: to.Ptr("6.6"),
									},
									{
										DisplayText: to.Ptr("Node 6.5"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("6.5.0"),
											},
										},
										Value: to.Ptr("6.5"),
									},
									{
										DisplayText: to.Ptr("Node 6.2"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|6.2"),
											},
										},
										Value: to.Ptr("6.2"),
									}},
								Value: to.Ptr("6"),
							},
							{
								DisplayText: to.Ptr("Node 4"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Node 4.8"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|4.8"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("4.8"),
											},
										},
										Value: to.Ptr("4.8"),
									},
									{
										DisplayText: to.Ptr("Node 4.5"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|4.5"),
											},
										},
										Value: to.Ptr("4.5"),
									},
									{
										DisplayText: to.Ptr("Node 4.4"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("NODE|4.4"),
											},
										},
										Value: to.Ptr("4.4"),
									}},
								Value: to.Ptr("4"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsLinux),
						Value:       to.Ptr("node"),
					},
				},
				{
					Name: to.Ptr("python"),
					Type: to.Ptr("Microsoft.Web/webAppStacks"),
					ID:   to.Ptr("/providers/Microsoft.Web/webAppStacks/python"),
					Properties: &armappservice.WebAppStackProperties{
						DisplayText: to.Ptr("Python"),
						MajorVersions: []*armappservice.WebAppMajorVersion{
							{
								DisplayText: to.Ptr("Python 3"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Python 3.8"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("PYTHON|3.8"),
											},
										},
										Value: to.Ptr("3.8"),
									},
									{
										DisplayText: to.Ptr("Python 3.7"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.7"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("PYTHON|3.7"),
											},
										},
										Value: to.Ptr("3.7"),
									},
									{
										DisplayText: to.Ptr("Python 3.6"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.6"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("PYTHON|3.6"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(true),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("3.6"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("3.4.0"),
											},
										},
										Value: to.Ptr("3.6"),
									}},
								Value: to.Ptr("3"),
							},
							{
								DisplayText: to.Ptr("Python 2"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Python 2.7"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("2.7"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("PYTHON|2.7"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("2.7"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("2.7.3"),
											},
										},
										Value: to.Ptr("2.7"),
									}},
								Value: to.Ptr("2"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsLinux),
						Value:       to.Ptr("python"),
					},
				},
				{
					Name: to.Ptr("php"),
					Type: to.Ptr("Microsoft.Web/webAppStacks"),
					ID:   to.Ptr("/providers/Microsoft.Web/webAppStacks/php"),
					Properties: &armappservice.WebAppStackProperties{
						DisplayText: to.Ptr("PHP"),
						MajorVersions: []*armappservice.WebAppMajorVersion{
							{
								DisplayText: to.Ptr("PHP 7"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("PHP 7.4"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-12-28T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("PHP|7.4"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-12-28T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("7.4"),
											},
										},
										Value: to.Ptr("7.4"),
									},
									{
										DisplayText: to.Ptr("PHP 7.3"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-06T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("PHP|7.3"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-06T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("7.3"),
											},
										},
										Value: to.Ptr("7.3"),
									},
									{
										DisplayText: to.Ptr("PHP 7.2"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("PHP|7.2"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-30T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("7.2"),
											},
										},
										Value: to.Ptr("7.2"),
									},
									{
										DisplayText: to.Ptr("PHP 7.1"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("7.1"),
											},
										},
										Value: to.Ptr("7.1"),
									},
									{
										DisplayText: to.Ptr("7.0"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("PHP|7.0"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("7.0"),
											},
										},
										Value: to.Ptr("7.0"),
									}},
								Value: to.Ptr("7"),
							},
							{
								DisplayText: to.Ptr("PHP 5"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("PHP 5.6"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("PHP|5.6"),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("5.6"),
											},
										},
										Value: to.Ptr("5.6"),
									}},
								Value: to.Ptr("5"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsLinux),
						Value:       to.Ptr("php"),
					},
				},
				{
					Name: to.Ptr("ruby"),
					Type: to.Ptr("Microsoft.Web/webAppStacks"),
					ID:   to.Ptr("/providers/Microsoft.Web/webAppStacks/ruby"),
					Properties: &armappservice.WebAppStackProperties{
						DisplayText: to.Ptr("Ruby"),
						MajorVersions: []*armappservice.WebAppMajorVersion{
							{
								DisplayText: to.Ptr("Ruby 2"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Ruby 2.6"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("RUBY|2.6"),
											},
										},
										Value: to.Ptr("2.6"),
									},
									{
										DisplayText: to.Ptr("Ruby 2.6.2"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("RUBY|2.6.2"),
											},
										},
										Value: to.Ptr("2.6.2"),
									},
									{
										DisplayText: to.Ptr("Ruby 2.5"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("RUBY|2.5"),
											},
										},
										Value: to.Ptr("2.5"),
									},
									{
										DisplayText: to.Ptr("Ruby 2.5.5"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("RUBY|2.5.5"),
											},
										},
										Value: to.Ptr("2.5.5"),
									},
									{
										DisplayText: to.Ptr("Ruby 2.4"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("RUBY|2.4"),
											},
										},
										Value: to.Ptr("2.4"),
									},
									{
										DisplayText: to.Ptr("Ruby 2.4.5"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("RUBY|2.4.5"),
											},
										},
										Value: to.Ptr("2.4.5"),
									},
									{
										DisplayText: to.Ptr("Ruby 2.3"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("RUBY|2.3"),
											},
										},
										Value: to.Ptr("2.3"),
									},
									{
										DisplayText: to.Ptr("Ruby 2.3.8"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("RUBY|2.3.8"),
											},
										},
										Value: to.Ptr("2.3.8"),
									},
									{
										DisplayText: to.Ptr("Ruby 2.3.3"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("RUBY|2.3.3"),
											},
										},
										Value: to.Ptr("2.3.3"),
									}},
								Value: to.Ptr("2"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsLinux),
						Value:       to.Ptr("ruby"),
					},
				},
				{
					Name: to.Ptr("java"),
					Type: to.Ptr("Microsoft.Web/webAppStacks"),
					ID:   to.Ptr("/providers/Microsoft.Web/webAppStacks/java"),
					Properties: &armappservice.WebAppStackProperties{
						DisplayText: to.Ptr("Java"),
						MajorVersions: []*armappservice.WebAppMajorVersion{
							{
								DisplayText: to.Ptr("Java 11"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Java 11"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2026-10-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												IsAutoUpdate:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr(""),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2026-10-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												IsAutoUpdate:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("11"),
											},
										},
										Value: to.Ptr("11.0"),
									},
									{
										DisplayText: to.Ptr("Java 11.0.7"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2026-10-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr(""),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2026-10-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("11.0.7"),
											},
										},
										Value: to.Ptr("11.0.7"),
									},
									{
										DisplayText: to.Ptr("Java 11.0.6"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2026-10-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr(""),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2026-10-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("11.0.6"),
											},
										},
										Value: to.Ptr("11.0.6"),
									},
									{
										DisplayText: to.Ptr("Java 11.0.5"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2026-10-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr(""),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2026-10-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("11.0.5_ZULU"),
											},
										},
										Value: to.Ptr("11.0.5"),
									},
									{
										DisplayText: to.Ptr("Java 11.0.3"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2026-10-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("11.0.3_ZULU"),
											},
										},
										Value: to.Ptr("11.0.3"),
									},
									{
										DisplayText: to.Ptr("Java 11.0.2"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2026-10-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("11"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("11.0.2_ZULU"),
											},
										},
										Value: to.Ptr("11.0.2"),
									}},
								Value: to.Ptr("11"),
							},
							{
								DisplayText: to.Ptr("Java 8"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Java 8"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												IsAutoUpdate:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr(""),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												IsAutoUpdate:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8"),
											},
										},
										Value: to.Ptr("8.0"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_252"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr(""),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_252"),
											},
										},
										Value: to.Ptr("8.0.252"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_242"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr(""),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_242"),
											},
										},
										Value: to.Ptr("8.0.242"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_232"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr(""),
											},
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_232_ZULU"),
											},
										},
										Value: to.Ptr("8.0.232"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_212"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_212_ZULU"),
											},
										},
										Value: to.Ptr("8.0.212"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_202"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_202_ZULU"),
											},
										},
										Value: to.Ptr("8.0.202"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_202 (Oracle)"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_202"),
											},
										},
										Value: to.Ptr("8.0.202 (Oracle)"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_181"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_181_ZULU"),
											},
										},
										Value: to.Ptr("8.0.181"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_181 (Oracle)"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_181"),
											},
										},
										Value: to.Ptr("8.0.181 (Oracle)"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_172"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_172_ZULU"),
											},
										},
										Value: to.Ptr("8.0.172"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_172 (Oracle)"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_172"),
											},
										},
										Value: to.Ptr("8.0.172 (Oracle)"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_144"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_144"),
											},
										},
										Value: to.Ptr("8.0.144"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_111 (Oracle)"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_111"),
											},
										},
										Value: to.Ptr("8.0.111 (Oracle)"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_102"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_102"),
											},
										},
										Value: to.Ptr("8.0.102"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_92"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-04-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_92"),
											},
										},
										Value: to.Ptr("8.0.92"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_73 (Oracle)"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_73"),
											},
										},
										Value: to.Ptr("8.0.73 (Oracle)"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_60 (Oracle)"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_60"),
											},
										},
										Value: to.Ptr("8.0.60 (Oracle)"),
									},
									{
										DisplayText: to.Ptr("Java 1.8.0_25 (Oracle)"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported:      to.Ptr(true),
													SupportedVersion: to.Ptr("8"),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.8.0_25"),
											},
										},
										Value: to.Ptr("8.0.25 (Oracle)"),
									}},
								Value: to.Ptr("8"),
							},
							{
								DisplayText: to.Ptr("Java 7"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Java 7"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-08-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsAutoUpdate:             to.Ptr(true),
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.7"),
											},
										},
										Value: to.Ptr("7.0"),
									},
									{
										DisplayText: to.Ptr("Java 1.7.0_262"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-08-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.7.0_262_ZULU"),
											},
										},
										Value: to.Ptr("7.0.262"),
									},
									{
										DisplayText: to.Ptr("Java 1.7.0_242"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-08-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.7.0_242_ZULU"),
											},
										},
										Value: to.Ptr("7.0.242"),
									},
									{
										DisplayText: to.Ptr("Java 1.7.0_222"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-08-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.7.0_222_ZULU"),
											},
										},
										Value: to.Ptr("7.0.222"),
									},
									{
										DisplayText: to.Ptr("Java 1.7.0_191"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-08-01T00:00:00+00:00"); return t }()),
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.7.0_191_ZULU"),
											},
										},
										Value: to.Ptr("7.0.191"),
									},
									{
										DisplayText: to.Ptr("Java 1.7.0_80 (Oracle)"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.7.0_80"),
											},
										},
										Value: to.Ptr("7.0.80 (Oracle)"),
									},
									{
										DisplayText: to.Ptr("Java 1.7.0_71 (Oracle)"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.7.0_71"),
											},
										},
										Value: to.Ptr("7.0.71 (Oracle)"),
									},
									{
										DisplayText: to.Ptr("Java 1.7.0_51 (Oracle)"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsRuntimeSettings: &armappservice.WebAppRuntimeSettings{
												AppInsightsSettings: &armappservice.AppInsightsWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												GitHubActionSettings: &armappservice.GitHubActionWebAppStackSettings{
													IsSupported: to.Ptr(false),
												},
												IsDeprecated:             to.Ptr(true),
												RemoteDebuggingSupported: to.Ptr(false),
												RuntimeVersion:           to.Ptr("1.7.0_51"),
											},
										},
										Value: to.Ptr("7.0.51 (Oracle)"),
									}},
								Value: to.Ptr("7"),
							}},
						PreferredOs: to.Ptr(armappservice.StackPreferredOsLinux),
						Value:       to.Ptr("java"),
					},
				},
				{
					Name: to.Ptr("javacontainers"),
					Type: to.Ptr("Microsoft.Web/webAppStacks"),
					ID:   to.Ptr("/providers/Microsoft.Web/webAppStacks/javacontainers"),
					Properties: &armappservice.WebAppStackProperties{
						DisplayText: to.Ptr("Java Containers"),
						MajorVersions: []*armappservice.WebAppMajorVersion{
							{
								DisplayText: to.Ptr("Java SE (Embedded Web Server)"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Java SE (Embedded Web Server)"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												IsAutoUpdate:  to.Ptr(true),
												Java11Runtime: to.Ptr("JAVA|11-java11"),
												Java8Runtime:  to.Ptr("JAVA|8-jre8"),
											},
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												IsAutoUpdate:         to.Ptr(true),
												JavaContainer:        to.Ptr("JAVA"),
												JavaContainerVersion: to.Ptr("SE"),
											},
										},
										Value: to.Ptr("SE"),
									},
									{
										DisplayText: to.Ptr("Java SE 11.0.7"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java11Runtime: to.Ptr("JAVA|11.0.7"),
											},
										},
										Value: to.Ptr("11.0.7"),
									},
									{
										DisplayText: to.Ptr("Java SE 11.0.6"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java11Runtime: to.Ptr("JAVA|11.0.6"),
											},
										},
										Value: to.Ptr("11.0.6"),
									},
									{
										DisplayText: to.Ptr("Java SE 11.0.5"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java11Runtime: to.Ptr("JAVA|11.0.5"),
											},
										},
										Value: to.Ptr("11.0.5"),
									},
									{
										DisplayText: to.Ptr("Java SE 8u252"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java8Runtime: to.Ptr("JAVA|8u252"),
											},
										},
										Value: to.Ptr("1.8.252"),
									},
									{
										DisplayText: to.Ptr("Java SE 8u242"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java8Runtime: to.Ptr("JAVA|8u242"),
											},
										},
										Value: to.Ptr("1.8.242"),
									},
									{
										DisplayText: to.Ptr("Java SE 8u232"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java8Runtime: to.Ptr("JAVA|8u232"),
											},
										},
										Value: to.Ptr("1.8.232"),
									}},
								Value: to.Ptr("javase"),
							},
							{
								DisplayText: to.Ptr("JBoss EAP"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("JBoss EAP 7.2"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												IsPreview:    to.Ptr(true),
												Java8Runtime: to.Ptr("JBOSSEAP|7.2-java8"),
											},
										},
										Value: to.Ptr("7.2"),
									}},
								Value: to.Ptr("jbosseap"),
							},
							{
								DisplayText: to.Ptr("Tomcat 9.0"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Tomcat 9.0"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												IsAutoUpdate:  to.Ptr(true),
												Java11Runtime: to.Ptr("TOMCAT|9.0-java11"),
												Java8Runtime:  to.Ptr("TOMCAT|9.0-jre8"),
											},
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												IsAutoUpdate:         to.Ptr(true),
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("9.0"),
											},
										},
										Value: to.Ptr("9.0"),
									},
									{
										DisplayText: to.Ptr("Tomcat 9.0.37"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java11Runtime: to.Ptr("TOMCAT|9.0.37-java11"),
												Java8Runtime:  to.Ptr("TOMCAT|9.0.37-java8"),
											},
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("9.0.37"),
											},
										},
										Value: to.Ptr("9.0.37"),
									},
									{
										DisplayText: to.Ptr("Tomcat 9.0.33"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java11Runtime: to.Ptr("TOMCAT|9.0.33-java11"),
												Java8Runtime:  to.Ptr("TOMCAT|9.0.33-java8"),
											},
										},
										Value: to.Ptr("9.0.33"),
									},
									{
										DisplayText: to.Ptr("Tomcat 9.0.31"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("9.0.31"),
											},
										},
										Value: to.Ptr("9.0.31"),
									},
									{
										DisplayText: to.Ptr("Tomcat 9.0.27"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("9.0.27"),
											},
										},
										Value: to.Ptr("9.0.27"),
									},
									{
										DisplayText: to.Ptr("Tomcat 9.0.21"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("9.0.21"),
											},
										},
										Value: to.Ptr("9.0.21"),
									},
									{
										DisplayText: to.Ptr("Tomcat 9.0.20"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java11Runtime: to.Ptr("TOMCAT|9.0.20-java11"),
												Java8Runtime:  to.Ptr("TOMCAT|9.0.20-java8"),
											},
										},
										Value: to.Ptr("9.0.20"),
									},
									{
										DisplayText: to.Ptr("Tomcat 9.0.14"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("9.0.14"),
											},
										},
										Value: to.Ptr("9.0.14"),
									},
									{
										DisplayText: to.Ptr("Tomcat 9.0.12"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("9.0.12"),
											},
										},
										Value: to.Ptr("9.0.12"),
									},
									{
										DisplayText: to.Ptr("Tomcat 9.0.8"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("9.0.8"),
											},
										},
										Value: to.Ptr("9.0.8"),
									},
									{
										DisplayText: to.Ptr("Tomcat 9.0.0"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("9.0.0"),
											},
										},
										Value: to.Ptr("9.0.0"),
									}},
								Value: to.Ptr("tomcat9.0"),
							},
							{
								DisplayText: to.Ptr("Tomcat 8.5"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Tomcat 8.5"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												IsAutoUpdate:  to.Ptr(true),
												Java11Runtime: to.Ptr("TOMCAT|8.5-java11"),
												Java8Runtime:  to.Ptr("TOMCAT|8.5-jre8"),
											},
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												IsAutoUpdate:         to.Ptr(true),
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.5"),
											},
										},
										Value: to.Ptr("8.5"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.5.6"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.5.6"),
											},
										},
										Value: to.Ptr("8.5.6"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.5.57"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java11Runtime: to.Ptr("TOMCAT|8.5.57-java11"),
												Java8Runtime:  to.Ptr("TOMCAT|8.5.57-java8"),
											},
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.5.57"),
											},
										},
										Value: to.Ptr("8.5.57"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.5.53"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java11Runtime: to.Ptr("TOMCAT|8.5.53-java11"),
												Java8Runtime:  to.Ptr("TOMCAT|8.5.53-java8"),
											},
										},
										Value: to.Ptr("8.5.53"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.5.51"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.5.51"),
											},
										},
										Value: to.Ptr("8.5.51"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.5.47"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.5.47"),
											},
										},
										Value: to.Ptr("8.5.47"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.5.42"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.5.42"),
											},
										},
										Value: to.Ptr("8.5.42"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.5.41"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												Java11Runtime: to.Ptr("TOMCAT|8.5.41-java11"),
												Java8Runtime:  to.Ptr("TOMCAT|8.5.41-java8"),
											},
										},
										Value: to.Ptr("8.5.41"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.5.37"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.5.37"),
											},
										},
										Value: to.Ptr("8.5.37"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.5.34"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.5.34"),
											},
										},
										Value: to.Ptr("8.5.34"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.5.31"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.5.31"),
											},
										},
										Value: to.Ptr("8.5.31"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.5.20"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.5.20"),
											},
										},
										Value: to.Ptr("8.5.20"),
									}},
								Value: to.Ptr("tomcat8.5"),
							},
							{
								DisplayText: to.Ptr("Tomcat 8.0"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Tomcat 8.0"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												IsAutoUpdate:         to.Ptr(true),
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.0"),
											},
										},
										Value: to.Ptr("8.0"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.0.53"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.0.53"),
											},
										},
										Value: to.Ptr("8.0.53"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.0.46"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.0.46"),
											},
										},
										Value: to.Ptr("8.0.46"),
									},
									{
										DisplayText: to.Ptr("Tomcat 8.0.23"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("8.0.23"),
											},
										},
										Value: to.Ptr("8.0.23"),
									}},
								Value: to.Ptr("tomcat8.0"),
							},
							{
								DisplayText: to.Ptr("Tomcat 7.0"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Tomcat 7.0"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												IsAutoUpdate:         to.Ptr(true),
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("7.0"),
											},
										},
										Value: to.Ptr("7.0"),
									},
									{
										DisplayText: to.Ptr("Tomcat 7.0.94"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("7.0.94"),
											},
										},
										Value: to.Ptr("7.0.94"),
									},
									{
										DisplayText: to.Ptr("Tomcat 7.0.81"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("7.0.81"),
											},
										},
										Value: to.Ptr("7.0.81"),
									},
									{
										DisplayText: to.Ptr("Tomcat 7.0.62"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("7.0.62"),
											},
										},
										Value: to.Ptr("7.0.62"),
									},
									{
										DisplayText: to.Ptr("Tomcat 7.0.50"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												JavaContainer:        to.Ptr("TOMCAT"),
												JavaContainerVersion: to.Ptr("7.0.50"),
											},
										},
										Value: to.Ptr("7.0.50"),
									}},
								Value: to.Ptr("tomcat7.0"),
							},
							{
								DisplayText: to.Ptr("Jetty 9.3"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Jetty 9.3"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												IsAutoUpdate:         to.Ptr(true),
												IsDeprecated:         to.Ptr(true),
												JavaContainer:        to.Ptr("JETTY"),
												JavaContainerVersion: to.Ptr("9.3"),
											},
										},
										Value: to.Ptr("9.3"),
									},
									{
										DisplayText: to.Ptr("Jetty 9.3.25"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												IsDeprecated:         to.Ptr(true),
												JavaContainer:        to.Ptr("JETTY"),
												JavaContainerVersion: to.Ptr("9.3.25"),
											},
										},
										Value: to.Ptr("9.3.25"),
									},
									{
										DisplayText: to.Ptr("Jetty 9.3.13"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												IsDeprecated:         to.Ptr(true),
												JavaContainer:        to.Ptr("JETTY"),
												JavaContainerVersion: to.Ptr("9.3.13"),
											},
										},
										Value: to.Ptr("9.3.13"),
									}},
								Value: to.Ptr("jetty9.3"),
							},
							{
								DisplayText: to.Ptr("Jetty 9.1"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("Jetty 9.1"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												IsAutoUpdate:         to.Ptr(true),
												IsDeprecated:         to.Ptr(true),
												JavaContainer:        to.Ptr("JETTY"),
												JavaContainerVersion: to.Ptr("9.1"),
											},
										},
										Value: to.Ptr("9.1"),
									},
									{
										DisplayText: to.Ptr("Jetty 9.1.0"),
										StackSettings: &armappservice.WebAppRuntimes{
											WindowsContainerSettings: &armappservice.WindowsJavaContainerSettings{
												IsDeprecated:         to.Ptr(true),
												JavaContainer:        to.Ptr("JETTY"),
												JavaContainerVersion: to.Ptr("9.1.0"),
											},
										},
										Value: to.Ptr("9.1.0"),
									}},
								Value: to.Ptr("jetty9.1"),
							},
							{
								DisplayText: to.Ptr("WildFly 14"),
								MinorVersions: []*armappservice.WebAppMinorVersion{
									{
										DisplayText: to.Ptr("WildFly 14"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												IsAutoUpdate: to.Ptr(true),
												IsDeprecated: to.Ptr(true),
												Java8Runtime: to.Ptr("WILDFLY|14-jre8"),
											},
										},
										Value: to.Ptr("14"),
									},
									{
										DisplayText: to.Ptr("WildFly 14.0.1"),
										StackSettings: &armappservice.WebAppRuntimes{
											LinuxContainerSettings: &armappservice.LinuxJavaContainerSettings{
												IsDeprecated: to.Ptr(true),
												Java8Runtime: to.Ptr("WILDFLY|14.0.1-java8"),
											},
										},
										Value: to.Ptr("14.0.1"),
									}},
								Value: to.Ptr("wildfly14"),
							}},
						Value: to.Ptr("javacontainers"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WebAppStackCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WebAppStackCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebAppStacks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProvider_GetAvailableStacksOnPrem(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_ResetAllFilters(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_DisableRecommendationForSubscription(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_ListHistoryForHostingEnvironment(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_ListRecommendedRulesForHostingEnvironment(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_DisableAllForHostingEnvironment(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_ResetAllFiltersForHostingEnvironment(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_GetRuleDetailsByHostingEnvironment(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_DisableRecommendationForHostingEnvironment(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_ListHistoryForWebApp(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_ListRecommendedRulesForWebApp(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_DisableAllForWebApp(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_ResetAllFiltersForWebApp(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_GetRuleDetailsByWebApp(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_DisableRecommendationForSite(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestResourceHealthMetadata_List(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListResourceHealthMetadataBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List ResourceHealthMetadata for a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewResourceHealthMetadataClient("4adb32ad-8327-4cbb-b775-b84b4465bb38", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListResourceHealthMetadataBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.ResourceHealthMetadataCollection{
			Value: []*armappservice.ResourceHealthMetadata{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Web/sites/resourceHealthMetadata"),
					ID:   to.Ptr("/subscriptions/4adb32ad-8327-4cbb-b775-b84b4465bb38/resourceGroups/Default-Web-NorthCentralUS/providers/Microsoft.Web/sites/newsiteinnewASE-NCUS/resourceHealthMetadata/default"),
					Properties: &armappservice.ResourceHealthMetadataProperties{
						Category:           to.Ptr("Shared"),
						SignalAvailability: to.Ptr(true),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceHealthMetadataCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceHealthMetadataCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListResourceHealthMetadataBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceHealthMetadata_ListByResourceGroup(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListResourceHealthMetadataByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List ResourceHealthMetadata for a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewResourceHealthMetadataClient("4adb32ad-8327-4cbb-b775-b84b4465bb38", cred, &options)
	pager := client.ListByResourceGroup("Default-Web-NorthCentralUS",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListResourceHealthMetadataByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.ResourceHealthMetadataCollection{
			Value: []*armappservice.ResourceHealthMetadata{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Web/sites/resourceHealthMetadata"),
					ID:   to.Ptr("/subscriptions/4adb32ad-8327-4cbb-b775-b84b4465bb38/resourceGroups/Default-Web-NorthCentralUS/providers/Microsoft.Web/sites/newsiteinnewASE-NCUS/resourceHealthMetadata/default"),
					Properties: &armappservice.ResourceHealthMetadataProperties{
						Category:           to.Ptr("Shared"),
						SignalAvailability: to.Ptr(true),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceHealthMetadataCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceHealthMetadataCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListResourceHealthMetadataByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceHealthMetadata_ListBySite(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListResourceHealthMetadataBySite.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List ResourceHealthMetadata for a site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewResourceHealthMetadataClient("4adb32ad-8327-4cbb-b775-b84b4465bb38", cred, &options)
	pager := client.ListBySite("Default-Web-NorthCentralUS",
		"newsiteinnewASE-NCUS",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListResourceHealthMetadataBySite.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.ResourceHealthMetadataCollection{
			Value: []*armappservice.ResourceHealthMetadata{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Web/sites/resourceHealthMetadata"),
					ID:   to.Ptr("/subscriptions/4adb32ad-8327-4cbb-b775-b84b4465bb38/resourceGroups/Default-Web-NorthCentralUS/providers/Microsoft.Web/sites/newsiteinnewASE-NCUS/resourceHealthMetadata/default"),
					Properties: &armappservice.ResourceHealthMetadataProperties{
						Category:           to.Ptr("Shared"),
						SignalAvailability: to.Ptr(true),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceHealthMetadataCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceHealthMetadataCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListResourceHealthMetadataBySite.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceHealthMetadata_GetBySite(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetResourceHealthMetadataBySite.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get ResourceHealthMetadata"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewResourceHealthMetadataClient("4adb32ad-8327-4cbb-b775-b84b4465bb38", cred, &options)
	res, err := client.GetBySite(ctx,
		"Default-Web-NorthCentralUS",
		"newsiteinnewASE-NCUS",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetResourceHealthMetadataBySite.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.ResourceHealthMetadata{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Web/sites/resourceHealthMetadata"),
			ID:   to.Ptr("/subscriptions/4adb32ad-8327-4cbb-b775-b84b4465bb38/resourceGroups/Default-Web-NorthCentralUS/providers/Microsoft.Web/sites/newsiteinnewASE-NCUS/resourceHealthMetadata/default"),
			Properties: &armappservice.ResourceHealthMetadataProperties{
				Category:           to.Ptr("Shared"),
				SignalAvailability: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceHealthMetadata) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceHealthMetadata)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetResourceHealthMetadataBySite.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceHealthMetadata_ListBySiteSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListResourceHealthMetadataBySite.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List ResourceHealthMetadata for a site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewResourceHealthMetadataClient("4adb32ad-8327-4cbb-b775-b84b4465bb38", cred, &options)
	pager := client.ListBySiteSlot("Default-Web-NorthCentralUS",
		"newsiteinnewASE-NCUS",
		"Production",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListResourceHealthMetadataBySite.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.ResourceHealthMetadataCollection{
			Value: []*armappservice.ResourceHealthMetadata{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Web/sites/resourceHealthMetadata"),
					ID:   to.Ptr("/subscriptions/4adb32ad-8327-4cbb-b775-b84b4465bb38/resourceGroups/Default-Web-NorthCentralUS/providers/Microsoft.Web/sites/newsiteinnewASE-NCUS/resourceHealthMetadata/default"),
					Properties: &armappservice.ResourceHealthMetadataProperties{
						Category:           to.Ptr("Shared"),
						SignalAvailability: to.Ptr(true),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceHealthMetadataCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceHealthMetadataCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListResourceHealthMetadataBySite.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceHealthMetadata_GetBySiteSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetResourceHealthMetadataBySite.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get ResourceHealthMetadata"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewResourceHealthMetadataClient("4adb32ad-8327-4cbb-b775-b84b4465bb38", cred, &options)
	res, err := client.GetBySiteSlot(ctx,
		"Default-Web-NorthCentralUS",
		"newsiteinnewASE-NCUS",
		"Production",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetResourceHealthMetadataBySite.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.ResourceHealthMetadata{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Web/sites/resourceHealthMetadata"),
			ID:   to.Ptr("/subscriptions/4adb32ad-8327-4cbb-b775-b84b4465bb38/resourceGroups/Default-Web-NorthCentralUS/providers/Microsoft.Web/sites/newsiteinnewASE-NCUS/resourceHealthMetadata/default"),
			Properties: &armappservice.ResourceHealthMetadataProperties{
				Category:           to.Ptr("Shared"),
				SignalAvailability: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceHealthMetadata) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceHealthMetadata)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetResourceHealthMetadataBySite.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebSiteManagementClient_GetPublishingUser(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebSiteManagementClient_UpdatePublishingUser(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebSiteManagementClient_ListSourceControls(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebSiteManagementClient_GetSourceControl(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebSiteManagementClient_UpdateSourceControl(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebSiteManagementClient_ListBillingMeters(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebSiteManagementClient_CheckNameAvailability(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebSiteManagementClient_ListCustomHostNameSites(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListCustomHostNameSites.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get custom hostnames under subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebSiteManagementClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListCustomHostNameSites(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListCustomHostNameSites.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.CustomHostnameSitesCollection{
			Value: []*armappservice.CustomHostnameSites{
				{
					Properties: &armappservice.CustomHostnameSitesProperties{
						CustomHostname: to.Ptr("mywebapp.azurewebsites.net"),
						Region:         to.Ptr("West US"),
						SiteResourceIDs: []*armappservice.Identifier{
							{
								ID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/westus-rg/providers/Microsoft.Web/sites/mywebapp"),
							}},
					},
				},
				{
					Properties: &armappservice.CustomHostnameSitesProperties{
						CustomHostname: to.Ptr("www.example.com"),
						Region:         to.Ptr("West US 2"),
						SiteResourceIDs: []*armappservice.Identifier{
							{
								ID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/westus2-rg/providers/Microsoft.Web/sites/westus2app1"),
							},
							{
								ID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/westus2-rg/providers/Microsoft.Web/sites/westus2app2"),
							},
							{
								ID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/westus2-rg/providers/Microsoft.Web/sites/westus2app3"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CustomHostnameSitesCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CustomHostnameSitesCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListCustomHostNameSites.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebSiteManagementClient_GetSubscriptionDeploymentLocations(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebSiteManagementClient_ListGeoRegions(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebSiteManagementClient_ListSiteIdentifiersAssignedToHostName(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebSiteManagementClient_ListPremierAddOnOffers(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebSiteManagementClient_VerifyHostingEnvironmentVnet(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/VerifyHostingEnvironmentVnet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VerifyHostingEnvironmentVnet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebSiteManagementClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.VerifyHostingEnvironmentVnet(ctx,
		armappservice.VnetParameters{
			Properties: &armappservice.VnetParametersProperties{
				VnetName:          to.Ptr("vNet123"),
				VnetResourceGroup: to.Ptr("vNet123rg"),
				VnetSubnetName:    to.Ptr("vNet123SubNet"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/VerifyHostingEnvironmentVnet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.VnetValidationFailureDetails{
			ID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/providers/Microsoft.Web/verifyHostingEnvironmentVnet"),
			Properties: &armappservice.VnetValidationFailureDetailsProperties{
				Failed:      to.Ptr(false),
				FailedTests: []*armappservice.VnetValidationTestFailure{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VnetValidationFailureDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VnetValidationFailureDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/VerifyHostingEnvironmentVnet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebSiteManagementClient_Move(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebSiteManagementClient_Validate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebSiteManagementClient_ValidateMove(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestStaticSites_PreviewWorkflow(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GenerateStaticSiteWorkflowPreview.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generates a preview workflow file for the static site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.PreviewWorkflow(ctx,
		"West US 2",
		armappservice.StaticSitesWorkflowPreviewRequest{
			Properties: &armappservice.StaticSitesWorkflowPreviewRequestProperties{
				Branch: to.Ptr("master"),
				BuildProperties: &armappservice.StaticSiteBuildProperties{
					APILocation:         to.Ptr("api"),
					AppArtifactLocation: to.Ptr("build"),
					AppLocation:         to.Ptr("app"),
				},
				RepositoryURL: to.Ptr("https://github.com/username/RepoName"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GenerateStaticSiteWorkflowPreview.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StaticSitesWorkflowPreview{
			Properties: &armappservice.StaticSitesWorkflowPreviewProperties{
				Path:     to.Ptr(".github/workflows/azure-static-web-apps-<generated_hostname>.yml"),
				Contents: to.Ptr("base64encodedworkflowcontentspreview"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StaticSitesWorkflowPreview) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StaticSitesWorkflowPreview)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GenerateStaticSiteWorkflowPreview.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_List(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetAllStaticSites.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all static sites in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetAllStaticSites.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.StaticSiteCollection{
			Value: []*armappservice.StaticSiteARMResource{
				{
					Name:     to.Ptr("testStaticSite0"),
					Type:     to.Ptr("Microsoft.Web/staticSites"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/staticSites/testStaticSite0"),
					Location: to.Ptr("West US 2"),
					Properties: &armappservice.StaticSite{
						AllowConfigFileUpdates:      to.Ptr(true),
						Branch:                      to.Ptr("demo"),
						ContentDistributionEndpoint: to.Ptr(""),
						CustomDomains:               []*string{},
						DefaultHostname:             to.Ptr("happy-sea-15afae3e.azurestaticwebsites.net"),
						KeyVaultReferenceIdentity:   to.Ptr("SystemAssigned"),
						PrivateEndpointConnections:  []*armappservice.ResponseMessageEnvelopeRemotePrivateEndpointConnection{},
						RepositoryURL:               to.Ptr("https://github.com/username/repo"),
						StagingEnvironmentPolicy:    to.Ptr(armappservice.StagingEnvironmentPolicyEnabled),
						UserProvidedFunctionApps:    []*armappservice.StaticSiteUserProvidedFunctionApp{},
					},
					SKU: &armappservice.SKUDescription{
						Name: to.Ptr("Standard"),
						Tier: to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StaticSiteCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StaticSiteCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetAllStaticSites.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_GetStaticSitesByResourceGroup(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetStaticSites.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get static sites for a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.GetStaticSitesByResourceGroup("rg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetStaticSites.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.StaticSiteCollection{
			Value: []*armappservice.StaticSiteARMResource{
				{
					Name:     to.Ptr("testStaticSite0"),
					Type:     to.Ptr("Microsoft.Web/staticSites"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/staticSites/testStaticSite0"),
					Location: to.Ptr("West US 2"),
					Properties: &armappservice.StaticSite{
						AllowConfigFileUpdates:      to.Ptr(true),
						Branch:                      to.Ptr("demo"),
						ContentDistributionEndpoint: to.Ptr(""),
						CustomDomains:               []*string{},
						DefaultHostname:             to.Ptr("happy-sea-15afae3e.azurestaticwebsites.net"),
						KeyVaultReferenceIdentity:   to.Ptr("SystemAssigned"),
						PrivateEndpointConnections:  []*armappservice.ResponseMessageEnvelopeRemotePrivateEndpointConnection{},
						RepositoryURL:               to.Ptr("https://github.com/username/repo"),
						StagingEnvironmentPolicy:    to.Ptr(armappservice.StagingEnvironmentPolicyEnabled),
						UserProvidedFunctionApps:    []*armappservice.StaticSiteUserProvidedFunctionApp{},
					},
					SKU: &armappservice.SKUDescription{
						Name: to.Ptr("Standard"),
						Tier: to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StaticSiteCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StaticSiteCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetStaticSites.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_GetStaticSite(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetStaticSite.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details for a static site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetStaticSite(ctx,
		"rg",
		"testStaticSite0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetStaticSite.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StaticSiteARMResource{
			Name:     to.Ptr("testStaticSite0"),
			Type:     to.Ptr("Microsoft.Web/staticSites"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/staticSites/testStaticSite0"),
			Location: to.Ptr("West US 2"),
			Properties: &armappservice.StaticSite{
				AllowConfigFileUpdates:      to.Ptr(true),
				Branch:                      to.Ptr("demo"),
				ContentDistributionEndpoint: to.Ptr(""),
				CustomDomains:               []*string{},
				DefaultHostname:             to.Ptr("happy-sea-15afae3e.azurestaticwebsites.net"),
				KeyVaultReferenceIdentity:   to.Ptr("SystemAssigned"),
				PrivateEndpointConnections:  []*armappservice.ResponseMessageEnvelopeRemotePrivateEndpointConnection{},
				RepositoryURL:               to.Ptr("https://github.com/username/repo"),
				StagingEnvironmentPolicy:    to.Ptr(armappservice.StagingEnvironmentPolicyEnabled),
				UserProvidedFunctionApps:    []*armappservice.StaticSiteUserProvidedFunctionApp{},
			},
			SKU: &armappservice.SKUDescription{
				Name: to.Ptr("Basic"),
				Tier: to.Ptr("Basic"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StaticSiteARMResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StaticSiteARMResource)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetStaticSite.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_CreateOrUpdateStaticSite(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateStaticSite.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a static site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginCreateOrUpdateStaticSite(ctx,
		"rg",
		"testStaticSite0",
		armappservice.StaticSiteARMResource{
			Location: to.Ptr("West US 2"),
			Properties: &armappservice.StaticSite{
				Branch: to.Ptr("master"),
				BuildProperties: &armappservice.StaticSiteBuildProperties{
					APILocation:         to.Ptr("api"),
					AppArtifactLocation: to.Ptr("build"),
					AppLocation:         to.Ptr("app"),
				},
				RepositoryToken: to.Ptr("repoToken123"),
				RepositoryURL:   to.Ptr("https://github.com/username/RepoName"),
			},
			SKU: &armappservice.SKUDescription{
				Name: to.Ptr("Basic"),
				Tier: to.Ptr("Basic"),
			},
		},
		&armappservice.StaticSitesClientBeginCreateOrUpdateStaticSiteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateStaticSite.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateStaticSite.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StaticSiteARMResource{
			Name:     to.Ptr("testStaticSite0"),
			Type:     to.Ptr("Microsoft.Web/staticSites"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/staticSites/testStaticSite0"),
			Location: to.Ptr("West US 2"),
			Properties: &armappservice.StaticSite{
				AllowConfigFileUpdates:      to.Ptr(true),
				Branch:                      to.Ptr("demo"),
				ContentDistributionEndpoint: to.Ptr(""),
				CustomDomains:               []*string{},
				DefaultHostname:             to.Ptr("happy-sea-15afae3e.azurestaticwebsites.net"),
				KeyVaultReferenceIdentity:   to.Ptr("SystemAssigned"),
				PrivateEndpointConnections:  []*armappservice.ResponseMessageEnvelopeRemotePrivateEndpointConnection{},
				RepositoryURL:               to.Ptr("https://github.com/username/RepoName"),
				StagingEnvironmentPolicy:    to.Ptr(armappservice.StagingEnvironmentPolicyEnabled),
				UserProvidedFunctionApps:    []*armappservice.StaticSiteUserProvidedFunctionApp{},
			},
			SKU: &armappservice.SKUDescription{
				Name: to.Ptr("Basic"),
				Tier: to.Ptr("Basic"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StaticSiteARMResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StaticSiteARMResource)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateStaticSite.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_DeleteStaticSite(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteStaticSite.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a static site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginDeleteStaticSite(ctx,
		"rg",
		"testStaticSite0",
		&armappservice.StaticSitesClientBeginDeleteStaticSiteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteStaticSite.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteStaticSite.json: %v", err)
	}
}

func TestStaticSites_UpdateStaticSite(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/PatchStaticSite.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch a static site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.UpdateStaticSite(ctx,
		"rg",
		"testStaticSite0",
		armappservice.StaticSitePatchResource{
			Properties: &armappservice.StaticSite{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/PatchStaticSite.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StaticSiteARMResource{
			Name:     to.Ptr("testStaticSite0"),
			Type:     to.Ptr("Microsoft.Web/staticSites"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/staticSites/testStaticSite0"),
			Location: to.Ptr("West US 2"),
			Properties: &armappservice.StaticSite{
				AllowConfigFileUpdates:      to.Ptr(true),
				Branch:                      to.Ptr("demo"),
				ContentDistributionEndpoint: to.Ptr(""),
				CustomDomains:               []*string{},
				DefaultHostname:             to.Ptr("happy-sea-15afae3e.azurestaticwebsites.net"),
				KeyVaultReferenceIdentity:   to.Ptr("SystemAssigned"),
				PrivateEndpointConnections:  []*armappservice.ResponseMessageEnvelopeRemotePrivateEndpointConnection{},
				RepositoryURL:               to.Ptr("https://github.com/username/RepoName"),
				StagingEnvironmentPolicy:    to.Ptr(armappservice.StagingEnvironmentPolicyEnabled),
				UserProvidedFunctionApps:    []*armappservice.StaticSiteUserProvidedFunctionApp{},
			},
			SKU: &armappservice.SKUDescription{
				Name: to.Ptr("Basic"),
				Tier: to.Ptr("Basic"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StaticSiteARMResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StaticSiteARMResource)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/PatchStaticSite.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_ListStaticSiteUsers(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteUsers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List users for a static site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListStaticSiteUsers("rg",
		"testStaticSite0",
		"all",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteUsers.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.StaticSiteUserCollection{
			Value: []*armappservice.StaticSiteUserARMResource{
				{
					Properties: &armappservice.StaticSiteUserARMResourceProperties{
						DisplayName: to.Ptr("username"),
						Provider:    to.Ptr("aad"),
						Roles:       to.Ptr("admin,anonymous,authenticated"),
						UserID:      to.Ptr("1234"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StaticSiteUserCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StaticSiteUserCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteUsers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_DeleteStaticSiteUser(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteStaticSiteUser.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a user for a static site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.DeleteStaticSiteUser(ctx,
		"rg",
		"testStaticSite0",
		"aad",
		"1234",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteStaticSiteUser.json: %v", err)
	}
}

func TestStaticSites_UpdateStaticSiteUser(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/UpdateStaticSiteUser.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a user for a static site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.UpdateStaticSiteUser(ctx,
		"rg",
		"testStaticSite0",
		"aad",
		"1234",
		armappservice.StaticSiteUserARMResource{
			Properties: &armappservice.StaticSiteUserARMResourceProperties{
				Roles: to.Ptr("contributor"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/UpdateStaticSiteUser.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StaticSiteUserARMResource{
			Properties: &armappservice.StaticSiteUserARMResourceProperties{
				DisplayName: to.Ptr("username"),
				Provider:    to.Ptr("aad"),
				Roles:       to.Ptr("contributor,anonymous,authenticated"),
				UserID:      to.Ptr("1234"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StaticSiteUserARMResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StaticSiteUserARMResource)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/UpdateStaticSiteUser.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_GetStaticSiteBuilds(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetStaticSiteBuilds.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all builds for a static site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.GetStaticSiteBuilds("rg",
		"testStaticSite0",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetStaticSiteBuilds.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.StaticSiteBuildCollection{
			Value: []*armappservice.StaticSiteBuildARMResource{
				{
					Properties: &armappservice.StaticSiteBuildARMResourceProperties{
						BuildID:                  to.Ptr("default"),
						CreatedTimeUTC:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:33:11.641Z"); return t }()),
						Hostname:                 to.Ptr("happy-sea-15afae3e.azurestaticwebsites.net"),
						LastUpdatedOn:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:33:11.641Z"); return t }()),
						SourceBranch:             to.Ptr("demo"),
						Status:                   to.Ptr(armappservice.BuildStatusReady),
						UserProvidedFunctionApps: []*armappservice.StaticSiteUserProvidedFunctionApp{},
					},
				},
				{
					Properties: &armappservice.StaticSiteBuildARMResourceProperties{
						BuildID:                  to.Ptr("12"),
						CreatedTimeUTC:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:33:11.641Z"); return t }()),
						Hostname:                 to.Ptr("happy-sea-15afae3e-12.westus2.azurestaticwebsites.net"),
						LastUpdatedOn:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:33:11.641Z"); return t }()),
						PullRequestTitle:         to.Ptr("Update README.md"),
						SourceBranch:             to.Ptr("demo-patch2"),
						Status:                   to.Ptr(armappservice.BuildStatusReady),
						UserProvidedFunctionApps: []*armappservice.StaticSiteUserProvidedFunctionApp{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StaticSiteBuildCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StaticSiteBuildCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetStaticSiteBuilds.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_GetStaticSiteBuild(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetStaticSiteBuild.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a static site build"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetStaticSiteBuild(ctx,
		"rg",
		"testStaticSite0",
		"12",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetStaticSiteBuild.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StaticSiteBuildARMResource{
			Properties: &armappservice.StaticSiteBuildARMResourceProperties{
				BuildID:                  to.Ptr("12"),
				CreatedTimeUTC:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:33:11.641Z"); return t }()),
				Hostname:                 to.Ptr("happy-sea-15afae3e-12.westus2.azurestaticwebsites.net"),
				LastUpdatedOn:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:33:11.641Z"); return t }()),
				PullRequestTitle:         to.Ptr("Update README.md"),
				SourceBranch:             to.Ptr("pr-branch"),
				Status:                   to.Ptr(armappservice.BuildStatusUploading),
				UserProvidedFunctionApps: []*armappservice.StaticSiteUserProvidedFunctionApp{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StaticSiteBuildARMResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StaticSiteBuildARMResource)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetStaticSiteBuild.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_DeleteStaticSiteBuild(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteStaticSiteBuild.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a static site build"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginDeleteStaticSiteBuild(ctx,
		"rg",
		"testStaticSite0",
		"12",
		&armappservice.StaticSitesClientBeginDeleteStaticSiteBuildOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteStaticSiteBuild.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteStaticSiteBuild.json: %v", err)
	}
}

func TestStaticSites_CreateOrUpdateStaticSiteBuildAppSettings(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateStaticSiteBuildAppSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates the function app settings of a static site build."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdateStaticSiteBuildAppSettings(ctx,
		"rg",
		"testStaticSite0",
		"12",
		armappservice.StringDictionary{
			Properties: map[string]*string{
				"setting1": to.Ptr("someval"),
				"setting2": to.Ptr("someval2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateStaticSiteBuildAppSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StringDictionary{
			Properties: map[string]*string{
				"setting1": to.Ptr("someval"),
				"setting2": to.Ptr("someval2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StringDictionary) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StringDictionary)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateStaticSiteBuildAppSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_CreateOrUpdateStaticSiteBuildFunctionAppSettings(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateStaticSiteBuildFunctionAppSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates the function app settings of a static site build."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdateStaticSiteBuildFunctionAppSettings(ctx,
		"rg",
		"testStaticSite0",
		"12",
		armappservice.StringDictionary{
			Properties: map[string]*string{
				"setting1": to.Ptr("someval"),
				"setting2": to.Ptr("someval2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateStaticSiteBuildFunctionAppSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StringDictionary{
			Properties: map[string]*string{
				"setting1": to.Ptr("someval"),
				"setting2": to.Ptr("someval2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StringDictionary) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StringDictionary)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateStaticSiteBuildFunctionAppSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_ListStaticSiteBuildFunctions(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteBuildFunctions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the functions of a particular static site build"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListStaticSiteBuildFunctions("rg",
		"testStaticSite0",
		"default",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteBuildFunctions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.StaticSiteFunctionOverviewCollection{
			Value: []*armappservice.StaticSiteFunctionOverviewARMResource{
				{
					Properties: &armappservice.StaticSiteFunctionOverviewARMResourceProperties{
						FunctionName: to.Ptr("GetList"),
						TriggerType:  to.Ptr(armappservice.TriggerTypesHTTPTrigger),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StaticSiteFunctionOverviewCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StaticSiteFunctionOverviewCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteBuildFunctions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_ListStaticSiteBuildAppSettings(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteBuildAppSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get app settings of a static site build"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.ListStaticSiteBuildAppSettings(ctx,
		"rg",
		"testStaticSite0",
		"12",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteBuildAppSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StringDictionary{
			Properties: map[string]*string{
				"setting0": to.Ptr("someVal"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StringDictionary) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StringDictionary)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteBuildAppSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_ListStaticSiteBuildFunctionAppSettings(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteBuildFunctionAppSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get function app settings of a static site build"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.ListStaticSiteBuildFunctionAppSettings(ctx,
		"rg",
		"testStaticSite0",
		"12",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteBuildFunctionAppSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StringDictionary{
			Properties: map[string]*string{
				"setting0": to.Ptr("someVal"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StringDictionary) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StringDictionary)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteBuildFunctionAppSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_GetUserProvidedFunctionAppsForStaticSiteBuild(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetUserProvidedFunctionAppsForStaticSiteBuild.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details of the user provided function apps registered with a static site build."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.GetUserProvidedFunctionAppsForStaticSiteBuild("rg",
		"testStaticSite0",
		"default",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetUserProvidedFunctionAppsForStaticSiteBuild.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.StaticSiteUserProvidedFunctionAppsCollection{
			Value: []*armappservice.StaticSiteUserProvidedFunctionAppARMResource{
				{
					Name: to.Ptr("testFunctionApp"),
					Type: to.Ptr("Microsoft.Web/staticSites/builds/userProvidedFunctionApps"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/staticSites/testStaticSite0/builds/default/userProvidedFunctionApps/testFunctionApp"),
					Properties: &armappservice.StaticSiteUserProvidedFunctionAppARMResourceProperties{
						CreatedOn:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:33:11.641Z"); return t }()),
						FunctionAppRegion:     to.Ptr("West US 2"),
						FunctionAppResourceID: to.Ptr("/subscription/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/functionRG/providers/Microsoft.Web/sites/testFunctionApp"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StaticSiteUserProvidedFunctionAppsCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StaticSiteUserProvidedFunctionAppsCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetUserProvidedFunctionAppsForStaticSiteBuild.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_GetUserProvidedFunctionAppForStaticSiteBuild(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetUserProvidedFunctionAppForStaticSiteBuild.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details of the user provided function app registered with a static site build."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetUserProvidedFunctionAppForStaticSiteBuild(ctx,
		"rg",
		"testStaticSite0",
		"default",
		"testFunctionApp",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetUserProvidedFunctionAppForStaticSiteBuild.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StaticSiteUserProvidedFunctionAppARMResource{
			Name: to.Ptr("testFunctionApp"),
			Type: to.Ptr("Microsoft.Web/staticSites/builds/userProvidedFunctionApps"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/staticSites/testStaticSite0/builds/default/userProvidedFunctionApps/testFunctionApp"),
			Properties: &armappservice.StaticSiteUserProvidedFunctionAppARMResourceProperties{
				CreatedOn:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:33:11.641Z"); return t }()),
				FunctionAppRegion:     to.Ptr("West US 2"),
				FunctionAppResourceID: to.Ptr("/subscription/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/functionRG/providers/Microsoft.Web/sites/testFunctionApp"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StaticSiteUserProvidedFunctionAppARMResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StaticSiteUserProvidedFunctionAppARMResource)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetUserProvidedFunctionAppForStaticSiteBuild.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_RegisterUserProvidedFunctionAppWithStaticSiteBuild(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/RegisterUserProvidedFunctionAppWithStaticSiteBuild.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Register a user provided function app with a static site build"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginRegisterUserProvidedFunctionAppWithStaticSiteBuild(ctx,
		"rg",
		"testStaticSite0",
		"default",
		"testFunctionApp",
		armappservice.StaticSiteUserProvidedFunctionAppARMResource{
			Properties: &armappservice.StaticSiteUserProvidedFunctionAppARMResourceProperties{
				FunctionAppRegion:     to.Ptr("West US 2"),
				FunctionAppResourceID: to.Ptr("/subscription/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/functionRG/providers/Microsoft.Web/sites/testFunctionApp"),
			},
		},
		&armappservice.StaticSitesClientBeginRegisterUserProvidedFunctionAppWithStaticSiteBuildOptions{IsForced: to.Ptr(true),
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/RegisterUserProvidedFunctionAppWithStaticSiteBuild.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/RegisterUserProvidedFunctionAppWithStaticSiteBuild.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StaticSiteUserProvidedFunctionAppARMResource{
			Name: to.Ptr("testFunctionApp"),
			Type: to.Ptr("Microsoft.Web/staticSites/builds/userProvidedFunctionApps"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/staticSites/testStaticSite0/builds/default/userProvidedFunctionApps/testFunctionApp"),
			Properties: &armappservice.StaticSiteUserProvidedFunctionAppARMResourceProperties{
				CreatedOn:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:33:11.641Z"); return t }()),
				FunctionAppRegion:     to.Ptr("West US 2"),
				FunctionAppResourceID: to.Ptr("/subscription/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/functionRG/providers/Microsoft.Web/sites/testFunctionApp"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StaticSiteUserProvidedFunctionAppARMResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StaticSiteUserProvidedFunctionAppARMResource)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/RegisterUserProvidedFunctionAppWithStaticSiteBuild.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_DetachUserProvidedFunctionAppFromStaticSiteBuild(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DetachUserProvidedFunctionAppFromStaticSiteBuild.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Detach the user provided function app from the static site build."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.DetachUserProvidedFunctionAppFromStaticSiteBuild(ctx,
		"rg",
		"testStaticSite0",
		"12",
		"testFunctionApp",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DetachUserProvidedFunctionAppFromStaticSiteBuild.json: %v", err)
	}
}

func TestStaticSites_CreateZipDeploymentForStaticSiteBuild(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StaticSiteBuildZipDeploy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deploy a site from a zipped package to a particular static site build"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginCreateZipDeploymentForStaticSiteBuild(ctx,
		"rg",
		"testStaticSite0",
		"12",
		armappservice.StaticSiteZipDeploymentARMResource{
			Properties: &armappservice.StaticSiteZipDeployment{
				APIZipURL:        to.Ptr("https://teststorageaccount.net/happy-sea-15afae3e-master-81828877/api-zipdeploy.zip"),
				AppZipURL:        to.Ptr("https://teststorageaccount.net/happy-sea-15afae3e-master-81828877/app-zipdeploy.zip"),
				DeploymentTitle:  to.Ptr("Update index.html"),
				FunctionLanguage: to.Ptr("testFunctionLanguage"),
				Provider:         to.Ptr("testProvider"),
			},
		},
		&armappservice.StaticSitesClientBeginCreateZipDeploymentForStaticSiteBuildOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StaticSiteBuildZipDeploy.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StaticSiteBuildZipDeploy.json: %v", err)
	}
}

func TestStaticSites_CreateOrUpdateStaticSiteAppSettings(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateStaticSiteAppSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates the app settings of a static site."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdateStaticSiteAppSettings(ctx,
		"rg",
		"testStaticSite0",
		armappservice.StringDictionary{
			Properties: map[string]*string{
				"setting1": to.Ptr("someval"),
				"setting2": to.Ptr("someval2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateStaticSiteAppSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StringDictionary{
			Properties: map[string]*string{
				"setting1": to.Ptr("someval"),
				"setting2": to.Ptr("someval2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StringDictionary) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StringDictionary)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateStaticSiteAppSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_CreateOrUpdateStaticSiteFunctionAppSettings(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateStaticSiteFunctionAppSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates the function app settings of a static site."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdateStaticSiteFunctionAppSettings(ctx,
		"rg",
		"testStaticSite0",
		armappservice.StringDictionary{
			Properties: map[string]*string{
				"setting1": to.Ptr("someval"),
				"setting2": to.Ptr("someval2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateStaticSiteFunctionAppSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StringDictionary{
			Properties: map[string]*string{
				"setting1": to.Ptr("someval"),
				"setting2": to.Ptr("someval2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StringDictionary) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StringDictionary)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateStaticSiteFunctionAppSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_CreateUserRolesInvitationLink(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateUserRolesInvitationLink.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an invitation link for a user for a static site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateUserRolesInvitationLink(ctx,
		"rg",
		"testStaticSite0",
		armappservice.StaticSiteUserInvitationRequestResource{
			Properties: &armappservice.StaticSiteUserInvitationRequestResourceProperties{
				Domain:               to.Ptr("happy-sea-15afae3e.azurestaticwebsites.net"),
				NumHoursToExpiration: to.Ptr[int32](1),
				Provider:             to.Ptr("aad"),
				Roles:                to.Ptr("admin,contributor"),
				UserDetails:          to.Ptr("username"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateUserRolesInvitationLink.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StaticSiteUserInvitationResponseResource{
			Properties: &armappservice.StaticSiteUserInvitationResponseResourceProperties{
				ExpiresOn:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-28T16:53:56.211Z"); return t }()),
				InvitationURL: to.Ptr("https://happy-sea-15afae3e.azurestaticwebsites.net?invite=asdf"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StaticSiteUserInvitationResponseResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StaticSiteUserInvitationResponseResource)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateUserRolesInvitationLink.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_ListStaticSiteCustomDomains(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetStaticSiteCustomDomains.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List custom domains for a static site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListStaticSiteCustomDomains("rg",
		"testStaticSite0",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetStaticSiteCustomDomains.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.StaticSiteCustomDomainOverviewCollection{
			Value: []*armappservice.StaticSiteCustomDomainOverviewARMResource{
				{
					Properties: &armappservice.StaticSiteCustomDomainOverviewARMResourceProperties{
						CreatedOn:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:33:11.641Z"); return t }()),
						DomainName: to.Ptr("custom.domain.net"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StaticSiteCustomDomainOverviewCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StaticSiteCustomDomainOverviewCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetStaticSiteCustomDomains.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_GetStaticSiteCustomDomain(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetStaticSiteCustomDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get custom domain for a static site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetStaticSiteCustomDomain(ctx,
		"rg",
		"testStaticSite0",
		"custom.domain.net",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetStaticSiteCustomDomain.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StaticSiteCustomDomainOverviewARMResource{
			Properties: &armappservice.StaticSiteCustomDomainOverviewARMResourceProperties{
				CreatedOn:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:33:11.641Z"); return t }()),
				DomainName: to.Ptr("custom.domain.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StaticSiteCustomDomainOverviewARMResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StaticSiteCustomDomainOverviewARMResource)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetStaticSiteCustomDomain.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_CreateOrUpdateStaticSiteCustomDomain(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateStaticSiteCustomDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a custom domain for a static site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginCreateOrUpdateStaticSiteCustomDomain(ctx,
		"rg",
		"testStaticSite0",
		"custom.domain.net",
		armappservice.StaticSiteCustomDomainRequestPropertiesARMResource{
			Properties: &armappservice.StaticSiteCustomDomainRequestPropertiesARMResourceProperties{},
		},
		&armappservice.StaticSitesClientBeginCreateOrUpdateStaticSiteCustomDomainOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateStaticSiteCustomDomain.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateStaticSiteCustomDomain.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StaticSiteCustomDomainOverviewARMResource{
			Properties: &armappservice.StaticSiteCustomDomainOverviewARMResourceProperties{
				CreatedOn:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:33:11.641Z"); return t }()),
				DomainName: to.Ptr("custom.domain.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StaticSiteCustomDomainOverviewARMResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StaticSiteCustomDomainOverviewARMResource)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/CreateOrUpdateStaticSiteCustomDomain.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_DeleteStaticSiteCustomDomain(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteStaticSiteCustomDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a custom domain for a static site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginDeleteStaticSiteCustomDomain(ctx,
		"rg",
		"testStaticSite0",
		"custom.domain.net",
		&armappservice.StaticSitesClientBeginDeleteStaticSiteCustomDomainOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteStaticSiteCustomDomain.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteStaticSiteCustomDomain.json: %v", err)
	}
}

func TestStaticSites_ValidateCustomDomainCanBeAddedToStaticSite(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ValidateStaticSiteCustomDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Validate a custom domain for a static site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginValidateCustomDomainCanBeAddedToStaticSite(ctx,
		"rg",
		"testStaticSite0",
		"custom.domain.net",
		armappservice.StaticSiteCustomDomainRequestPropertiesARMResource{
			Properties: &armappservice.StaticSiteCustomDomainRequestPropertiesARMResourceProperties{},
		},
		&armappservice.StaticSitesClientBeginValidateCustomDomainCanBeAddedToStaticSiteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ValidateStaticSiteCustomDomain.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ValidateStaticSiteCustomDomain.json: %v", err)
	}
}

func TestStaticSites_DetachStaticSite(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DetachStaticSite.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Detach a static site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginDetachStaticSite(ctx,
		"rg",
		"testStaticSite0",
		&armappservice.StaticSitesClientBeginDetachStaticSiteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DetachStaticSite.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DetachStaticSite.json: %v", err)
	}
}

func TestStaticSites_ListStaticSiteFunctions(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteFunctions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the functions of a static site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListStaticSiteFunctions("rg",
		"testStaticSite0",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteFunctions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.StaticSiteFunctionOverviewCollection{
			Value: []*armappservice.StaticSiteFunctionOverviewARMResource{
				{
					Properties: &armappservice.StaticSiteFunctionOverviewARMResourceProperties{
						FunctionName: to.Ptr("GetList"),
						TriggerType:  to.Ptr(armappservice.TriggerTypesHTTPTrigger),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StaticSiteFunctionOverviewCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StaticSiteFunctionOverviewCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteFunctions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_ListStaticSiteAppSettings(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteAppSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get app settings of a static site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.ListStaticSiteAppSettings(ctx,
		"rg",
		"testStaticSite0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteAppSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StringDictionary{
			Properties: map[string]*string{
				"setting0": to.Ptr("someVal"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StringDictionary) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StringDictionary)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteAppSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_ListStaticSiteConfiguredRoles(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteConfiguredRoles.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists the configured roles for a static site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.ListStaticSiteConfiguredRoles(ctx,
		"rg",
		"testStaticSite0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteConfiguredRoles.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StringList{
			Properties: []*string{
				to.Ptr("authenticated"),
				to.Ptr("anonymous"),
				to.Ptr("customRole1")},
		}
		if !reflect.DeepEqual(exampleRes, res.StringList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StringList)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteConfiguredRoles.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_ListStaticSiteFunctionAppSettings(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteFunctionAppSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get function app settings of a static site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.ListStaticSiteFunctionAppSettings(ctx,
		"rg",
		"testStaticSite0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteFunctionAppSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StringDictionary{
			Properties: map[string]*string{
				"setting0": to.Ptr("someVal"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StringDictionary) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StringDictionary)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteFunctionAppSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_ListStaticSiteSecrets(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteSecrets.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List secrets for a static site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.ListStaticSiteSecrets(ctx,
		"rg",
		"testStaticSite0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteSecrets.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StringDictionary{
			Properties: map[string]*string{
				"dnsOwnershipKey": to.Ptr("ownershipKey123123"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StringDictionary) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StringDictionary)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListStaticSiteSecrets.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_GetPrivateEndpointConnectionList(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSitePrivateEndpointConnectionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of private endpoint connections associated with a site."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.GetPrivateEndpointConnectionList("rg",
		"testStaticSite0",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSitePrivateEndpointConnectionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.PrivateEndpointConnectionCollection{
			Value: []*armappservice.RemotePrivateEndpointConnectionARMResource{
				{
					Properties: &armappservice.RemotePrivateEndpointConnectionARMResourceProperties{
						PrivateEndpoint: &armappservice.ArmIDWrapper{
							ID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armappservice.PrivateLinkConnectionState{
							Description:     to.Ptr("Approved by admin."),
							ActionsRequired: to.Ptr(""),
							Status:          to.Ptr("Approved"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSitePrivateEndpointConnectionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_GetPrivateEndpointConnection(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSitePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a private endpoint connection for a site."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetPrivateEndpointConnection(ctx,
		"rg",
		"testSite",
		"connection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSitePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.RemotePrivateEndpointConnectionARMResource{
			Properties: &armappservice.RemotePrivateEndpointConnectionARMResourceProperties{
				PrivateEndpoint: &armappservice.ArmIDWrapper{
					ID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armappservice.PrivateLinkConnectionState{
					Description:     to.Ptr("Approved by admin."),
					ActionsRequired: to.Ptr(""),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RemotePrivateEndpointConnectionARMResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RemotePrivateEndpointConnectionARMResource)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSitePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_ApproveOrRejectPrivateEndpointConnection(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ApproveRejectSitePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Approves or rejects a private endpoint connection for a site."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginApproveOrRejectPrivateEndpointConnection(ctx,
		"rg",
		"testSite",
		"connection",
		armappservice.PrivateLinkConnectionApprovalRequestResource{
			Properties: &armappservice.PrivateLinkConnectionApprovalRequest{
				PrivateLinkServiceConnectionState: &armappservice.PrivateLinkConnectionState{
					Description:     to.Ptr("Approved by admin."),
					ActionsRequired: to.Ptr(""),
					Status:          to.Ptr("Approved"),
				},
			},
		},
		&armappservice.StaticSitesClientBeginApproveOrRejectPrivateEndpointConnectionOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ApproveRejectSitePrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ApproveRejectSitePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.RemotePrivateEndpointConnectionARMResource{
			Properties: &armappservice.RemotePrivateEndpointConnectionARMResourceProperties{
				PrivateEndpoint: &armappservice.ArmIDWrapper{
					ID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armappservice.PrivateLinkConnectionState{
					Description:     to.Ptr("Approved by admin."),
					ActionsRequired: to.Ptr(""),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RemotePrivateEndpointConnectionARMResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RemotePrivateEndpointConnectionARMResource)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ApproveRejectSitePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_DeletePrivateEndpointConnection(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteSitePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a private endpoint connection for a site."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginDeletePrivateEndpointConnection(ctx,
		"rg",
		"testSite",
		"connection",
		&armappservice.StaticSitesClientBeginDeletePrivateEndpointConnectionOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteSitePrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteSitePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := map[string]interface{}{}
		if !reflect.DeepEqual(exampleRes, res.Interface) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Interface)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteSitePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_GetPrivateLinkResources(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSitePrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get private link resources of a site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetPrivateLinkResources(ctx,
		"rg",
		"testSite",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSitePrivateLinkResources.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.PrivateLinkResourcesWrapper{
			Value: []*armappservice.PrivateLinkResource{
				{
					Name: to.Ptr("site"),
					Type: to.Ptr("Microsoft.Web/sites/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/sites/testSite/privateLinkResources/site"),
					Properties: &armappservice.PrivateLinkResourceProperties{
						GroupID: to.Ptr("sites"),
						RequiredMembers: []*string{
							to.Ptr("sites")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.testsite.azurewebsites.net")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourcesWrapper) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourcesWrapper)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSitePrivateLinkResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_GetUserProvidedFunctionAppsForStaticSite(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetUserProvidedFunctionAppsForStaticSite.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details of the user provided function apps registered with a static site."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.GetUserProvidedFunctionAppsForStaticSite("rg",
		"testStaticSite0",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetUserProvidedFunctionAppsForStaticSite.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.StaticSiteUserProvidedFunctionAppsCollection{
			Value: []*armappservice.StaticSiteUserProvidedFunctionAppARMResource{
				{
					Name: to.Ptr("testFunctionApp"),
					Type: to.Ptr("Microsoft.Web/staticSites/builds/userProvidedFunctionApps"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/staticSites/testStaticSite0/builds/default/userProvidedFunctionApps/testFunctionApp"),
					Properties: &armappservice.StaticSiteUserProvidedFunctionAppARMResourceProperties{
						CreatedOn:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:33:11.641Z"); return t }()),
						FunctionAppRegion:     to.Ptr("West US 2"),
						FunctionAppResourceID: to.Ptr("/subscription/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/functionRG/providers/Microsoft.Web/sites/testFunctionApp"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StaticSiteUserProvidedFunctionAppsCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StaticSiteUserProvidedFunctionAppsCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetUserProvidedFunctionAppsForStaticSite.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_GetUserProvidedFunctionAppForStaticSite(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetUserProvidedFunctionAppForStaticSite.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details of the user provided function app registered with a static site."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetUserProvidedFunctionAppForStaticSite(ctx,
		"rg",
		"testStaticSite0",
		"testFunctionApp",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetUserProvidedFunctionAppForStaticSite.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StaticSiteUserProvidedFunctionAppARMResource{
			Name: to.Ptr("testFunctionApp"),
			Type: to.Ptr("Microsoft.Web/staticSites/builds/userProvidedFunctionApps"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/staticSites/testStaticSite0/builds/default/userProvidedFunctionApps/testFunctionApp"),
			Properties: &armappservice.StaticSiteUserProvidedFunctionAppARMResourceProperties{
				CreatedOn:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:33:11.641Z"); return t }()),
				FunctionAppRegion:     to.Ptr("West US 2"),
				FunctionAppResourceID: to.Ptr("/subscription/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/functionRG/providers/Microsoft.Web/sites/testFunctionApp"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StaticSiteUserProvidedFunctionAppARMResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StaticSiteUserProvidedFunctionAppARMResource)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetUserProvidedFunctionAppForStaticSite.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_RegisterUserProvidedFunctionAppWithStaticSite(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/RegisterUserProvidedFunctionAppWithStaticSite.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Register a user provided function app with a static site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginRegisterUserProvidedFunctionAppWithStaticSite(ctx,
		"rg",
		"testStaticSite0",
		"testFunctionApp",
		armappservice.StaticSiteUserProvidedFunctionAppARMResource{
			Properties: &armappservice.StaticSiteUserProvidedFunctionAppARMResourceProperties{
				FunctionAppRegion:     to.Ptr("West US 2"),
				FunctionAppResourceID: to.Ptr("/subscription/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/functionRG/providers/Microsoft.Web/sites/testFunctionApp"),
			},
		},
		&armappservice.StaticSitesClientBeginRegisterUserProvidedFunctionAppWithStaticSiteOptions{IsForced: to.Ptr(true),
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/RegisterUserProvidedFunctionAppWithStaticSite.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/RegisterUserProvidedFunctionAppWithStaticSite.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.StaticSiteUserProvidedFunctionAppARMResource{
			Name: to.Ptr("testFunctionApp"),
			Type: to.Ptr("Microsoft.Web/staticSites/builds/userProvidedFunctionApps"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/staticSites/testStaticSite0/builds/default/userProvidedFunctionApps/testFunctionApp"),
			Properties: &armappservice.StaticSiteUserProvidedFunctionAppARMResourceProperties{
				CreatedOn:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:33:11.641Z"); return t }()),
				FunctionAppRegion:     to.Ptr("West US 2"),
				FunctionAppResourceID: to.Ptr("/subscription/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/functionRG/providers/Microsoft.Web/sites/testFunctionApp"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StaticSiteUserProvidedFunctionAppARMResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StaticSiteUserProvidedFunctionAppARMResource)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/RegisterUserProvidedFunctionAppWithStaticSite.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStaticSites_DetachUserProvidedFunctionAppFromStaticSite(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DetachUserProvidedFunctionAppFromStaticSite.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Detach the user provided function app from the static site."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.DetachUserProvidedFunctionAppFromStaticSite(ctx,
		"rg",
		"testStaticSite0",
		"testFunctionApp",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DetachUserProvidedFunctionAppFromStaticSite.json: %v", err)
	}
}

func TestStaticSites_CreateZipDeploymentForStaticSite(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StaticSiteZipDeploy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deploy a site from a zipped package"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewStaticSitesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginCreateZipDeploymentForStaticSite(ctx,
		"rg",
		"testStaticSite0",
		armappservice.StaticSiteZipDeploymentARMResource{
			Properties: &armappservice.StaticSiteZipDeployment{
				APIZipURL:        to.Ptr("https://teststorageaccount.net/happy-sea-15afae3e-master-81828877/api-zipdeploy.zip"),
				AppZipURL:        to.Ptr("https://teststorageaccount.net/happy-sea-15afae3e-master-81828877/app-zipdeploy.zip"),
				DeploymentTitle:  to.Ptr("Update index.html"),
				FunctionLanguage: to.Ptr("testFunctionLanguage"),
				Provider:         to.Ptr("testProvider"),
			},
		},
		&armappservice.StaticSitesClientBeginCreateZipDeploymentForStaticSiteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StaticSiteZipDeploy.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StaticSiteZipDeploy.json: %v", err)
	}
}

func TestWebApps_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListByResourceGroup(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_Get(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_Delete(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_Update(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_AnalyzeCustomHostname(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ApplySlotConfigToProduction(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_Backup(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListBackups(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetBackupStatus(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteBackup(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListBackupStatusSecrets(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_Restore(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListBasicPublishingCredentialsPolicies(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListPublishingCredentialsPolicies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Publishing Credentials Policies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("3fb8d758-2e2c-42e9-a528-a8acdfe87237", cred, &options)
	pager := client.ListBasicPublishingCredentialsPolicies("testrg123",
		"testsite",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListPublishingCredentialsPolicies.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.PublishingCredentialsPoliciesCollection{
			Value: []*armappservice.CsmPublishingCredentialsPoliciesEntity{
				{
					Name: to.Ptr("ftp"),
					Type: to.Ptr("Microsoft.Web/sites/basicPublishingCredentialsPolicies"),
					ID:   to.Ptr("/subscriptions/3fb8d758-2e2c-42e9-a528-a8acdfe87237/resourceGroups/testrg123/providers/Microsoft.Web/sites/testsite/basicPublishingCredentialsPolicies/ftp"),
					Properties: &armappservice.CsmPublishingCredentialsPoliciesEntityProperties{
						Allow: to.Ptr(true),
					},
				},
				{
					Name: to.Ptr("scm"),
					Type: to.Ptr("Microsoft.Web/sites/basicPublishingCredentialsPolicies"),
					ID:   to.Ptr("/subscriptions/3fb8d758-2e2c-42e9-a528-a8acdfe87237/resourceGroups/testrg123/providers/Microsoft.Web/sites/testsite/basicPublishingCredentialsPolicies/scm"),
					Properties: &armappservice.CsmPublishingCredentialsPoliciesEntityProperties{
						Allow: to.Ptr(true),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PublishingCredentialsPoliciesCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PublishingCredentialsPoliciesCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListPublishingCredentialsPolicies.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_GetFtpAllowed(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetPublishingCredentialsPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get FTP Allowed"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetFtpAllowed(ctx,
		"rg",
		"testSite",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetPublishingCredentialsPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.CsmPublishingCredentialsPoliciesEntity{
			Properties: &armappservice.CsmPublishingCredentialsPoliciesEntityProperties{
				Allow: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CsmPublishingCredentialsPoliciesEntity) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CsmPublishingCredentialsPoliciesEntity)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetPublishingCredentialsPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_UpdateFtpAllowed(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/UpdatePublishingCredentialsPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update FTP Allowed"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.UpdateFtpAllowed(ctx,
		"rg",
		"testSite",
		armappservice.CsmPublishingCredentialsPoliciesEntity{
			Properties: &armappservice.CsmPublishingCredentialsPoliciesEntityProperties{
				Allow: to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/UpdatePublishingCredentialsPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.CsmPublishingCredentialsPoliciesEntity{
			Properties: &armappservice.CsmPublishingCredentialsPoliciesEntityProperties{
				Allow: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CsmPublishingCredentialsPoliciesEntity) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CsmPublishingCredentialsPoliciesEntity)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/UpdatePublishingCredentialsPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_GetScmAllowed(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetPublishingCredentialsPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get SCM Allowed"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetScmAllowed(ctx,
		"rg",
		"testSite",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetPublishingCredentialsPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.CsmPublishingCredentialsPoliciesEntity{
			Properties: &armappservice.CsmPublishingCredentialsPoliciesEntityProperties{
				Allow: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CsmPublishingCredentialsPoliciesEntity) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CsmPublishingCredentialsPoliciesEntity)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetPublishingCredentialsPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_UpdateScmAllowed(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/UpdatePublishingCredentialsPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update SCM Allowed"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.UpdateScmAllowed(ctx,
		"rg",
		"testSite",
		armappservice.CsmPublishingCredentialsPoliciesEntity{
			Properties: &armappservice.CsmPublishingCredentialsPoliciesEntityProperties{
				Allow: to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/UpdatePublishingCredentialsPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.CsmPublishingCredentialsPoliciesEntity{
			Properties: &armappservice.CsmPublishingCredentialsPoliciesEntityProperties{
				Allow: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CsmPublishingCredentialsPoliciesEntity) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CsmPublishingCredentialsPoliciesEntity)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/UpdatePublishingCredentialsPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_ListConfigurations(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateApplicationSettings(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListApplicationSettings(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateAuthSettings(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetAuthSettings(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetAuthSettingsV2WithoutSecrets(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateAuthSettingsV2(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetAuthSettingsV2(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateAzureStorageAccounts(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListAzureStorageAccounts(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateBackupConfiguration(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteBackupConfiguration(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetBackupConfiguration(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetAppSettingsKeyVaultReferences(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetKeyVaultReferencesForAppSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Azure Key Vault references for app settings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.GetAppSettingsKeyVaultReferences("testrg123",
		"testc6282",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetKeyVaultReferencesForAppSettings.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.APIKVReferenceCollection{
			Value: []*armappservice.APIKVReference{
				{
					Properties: &armappservice.APIKVReferenceProperties{
						SecretName:    to.Ptr("secretName"),
						SecretVersion: to.Ptr("secretVersion"),
						VaultName:     to.Ptr("keyVaultName"),
					},
				},
				{
					Properties: &armappservice.APIKVReferenceProperties{
						SecretName:    to.Ptr("secretName2"),
						SecretVersion: to.Ptr("secretVersion2"),
						VaultName:     to.Ptr("keyVaultName"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.APIKVReferenceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.APIKVReferenceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetKeyVaultReferencesForAppSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_GetAppSettingKeyVaultReference(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetKeyVaultReferencesForAppSetting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Azure Key Vault app setting reference"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetAppSettingKeyVaultReference(ctx,
		"testrg123",
		"testc6282",
		"setting",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetKeyVaultReferencesForAppSetting.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.APIKVReference{
			Properties: &armappservice.APIKVReferenceProperties{
				SecretName:    to.Ptr("secretName"),
				SecretVersion: to.Ptr("secretVersion"),
				VaultName:     to.Ptr("keyVaultName"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIKVReference) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIKVReference)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetKeyVaultReferencesForAppSetting.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_GetSiteConnectionStringKeyVaultReferences(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetSiteConnectionStringKeyVaultReference(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateConnectionStrings(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListConnectionStrings(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetDiagnosticLogsConfiguration(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateDiagnosticLogsConfig(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateMetadata(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListMetadata(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListPublishingCredentials(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateSitePushSettings(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSitePushSettings(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSlotConfigurationNames(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateSlotConfigurationNames(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetConfiguration(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateConfiguration(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateConfiguration(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListConfigurationSnapshotInfo(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetConfigurationSnapshot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RecoverSiteConfigurationSnapshot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetWebSiteContainerLogs(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetContainerLogsZip(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListContinuousWebJobs(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetContinuousWebJob(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteContinuousWebJob(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_StartContinuousWebJob(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_StopContinuousWebJob(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListDeployments(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetDeployment(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateDeployment(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteDeployment(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListDeploymentLog(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DiscoverBackup(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListDomainOwnershipIdentifiers(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetDomainOwnershipIdentifier(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateDomainOwnershipIdentifier(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteDomainOwnershipIdentifier(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateDomainOwnershipIdentifier(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetMSDeployStatus(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateMSDeployOperation(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetMSDeployLog(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetOneDeployStatus(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOneDeployOperation(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListFunctions(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetFunctionsAdminToken(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetFunction(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateFunction(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteFunction(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateFunctionSecret(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteFunctionSecret(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListFunctionKeys(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListFunctionSecrets(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListHostKeys(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSyncStatus(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_SyncFunctions(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateHostSecret(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteHostSecret(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListHostNameBindings(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetHostNameBinding(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateHostNameBinding(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteHostNameBinding(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetHybridConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateHybridConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteHybridConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateHybridConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListHybridConnections(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListRelayServiceConnections(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetRelayServiceConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateRelayServiceConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteRelayServiceConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateRelayServiceConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListInstanceIdentifiers(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetInstanceInfo(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSiteInstanceInfo.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get site instance info"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetInstanceInfo(ctx,
		"testrg123",
		"tests346",
		"134987120",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSiteInstanceInfo.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.WebSiteInstanceStatus{
			Name: to.Ptr("134987120"),
			Type: to.Ptr("Microsoft.Web/sites/instances"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Web/sites/tests346/slot/staging/instances/134987120"),
			Properties: &armappservice.WebSiteInstanceStatusProperties{
				Containers: map[string]*armappservice.ContainerInfo{
					"c1": {
						CurrentTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2013-10-21T13:28:06.419Z"); return t }()),
					},
				},
				DetectorURL: to.Ptr("testsec579"),
				State:       to.Ptr(armappservice.SiteRuntimeStateREADY),
				StatusURL:   to.Ptr("https://sampleurl"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WebSiteInstanceStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WebSiteInstanceStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSiteInstanceInfo.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_GetInstanceMsDeployStatus(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateInstanceMSDeployOperation(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetInstanceMSDeployLog(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListInstanceProcesses(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetInstanceProcess(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteInstanceProcess(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetInstanceProcessDump(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListInstanceProcessModules(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetInstanceProcessModule(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListInstanceProcessThreads(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_IsCloneable(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSiteBackups(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListSlotBackups.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List backups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListSiteBackups("testrg123",
		"tests346",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListSlotBackups.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.BackupItemCollection{
			Value: []*armappservice.BackupItem{
				{
					Name: to.Ptr("tests346/staging"),
					Type: to.Ptr("Microsoft.Web/sites/slots"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Web/sites/tests346/slot/staging"),
					Properties: &armappservice.BackupItemProperties{
						BlobName:          to.Ptr("blob1"),
						Status:            to.Ptr(armappservice.BackupItemStatusInProgress),
						StorageAccountURL: to.Ptr("https://blobstorage.windows.net"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BackupItemCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BackupItemCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListSlotBackups.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_ListSyncFunctionTriggers(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_MigrateStorage(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetSwiftVirtualNetworkConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateSwiftVirtualNetworkConnectionWithCheck(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteSwiftVirtualNetwork(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateSwiftVirtualNetworkConnectionWithCheck(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListNetworkFeatures(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetNetworkTraceOperation(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraceOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the current status of a network trace operation for a site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetNetworkTraceOperation(ctx,
		"testrg123",
		"SampleApp",
		"c291433b-53ad-4c49-8cae-0a293eae1c6d",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraceOperation.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armappservice.NetworkTrace{
			{
				Path:    to.Ptr("D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Message: to.Ptr("Trace file has been saved as D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Status:  to.Ptr("Succeeded"),
			}}
		if !reflect.DeepEqual(exampleRes, res.NetworkTraceArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkTraceArray)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraceOperation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_StartWebSiteNetworkTrace(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_StartWebSiteNetworkTraceOperation(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StartWebSiteNetworkTraceOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start a new network trace operation for a site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginStartWebSiteNetworkTraceOperation(ctx,
		"testrg123",
		"SampleApp",
		&armappservice.WebAppsClientBeginStartWebSiteNetworkTraceOperationOptions{DurationInSeconds: to.Ptr[int32](60),
			MaxFrameLength: nil,
			SasURL:         nil,
			ResumeToken:    "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StartWebSiteNetworkTraceOperation.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StartWebSiteNetworkTraceOperation.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armappservice.NetworkTrace{
			{
				Path:    to.Ptr("D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Message: to.Ptr("Trace file has been saved as D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Status:  to.Ptr("Succeeded"),
			}}
		if !reflect.DeepEqual(exampleRes, res.NetworkTraceArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkTraceArray)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StartWebSiteNetworkTraceOperation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_StopWebSiteNetworkTrace(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StopWebSiteNetworkTrace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop a currently running network trace operation for a site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.StopWebSiteNetworkTrace(ctx,
		"testrg123",
		"SampleApp",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StopWebSiteNetworkTrace.json: %v", err)
	}
}

func TestWebApps_GetNetworkTraces(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraces.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get NetworkTraces for a site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetNetworkTraces(ctx,
		"testrg123",
		"SampleApp",
		"c291433b-53ad-4c49-8cae-0a293eae1c6d",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraces.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armappservice.NetworkTrace{
			{
				Path:    to.Ptr("D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Message: to.Ptr("Trace file has been saved as D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Status:  to.Ptr("Succeeded"),
			}}
		if !reflect.DeepEqual(exampleRes, res.NetworkTraceArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkTraceArray)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraces.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_GetNetworkTraceOperationV2(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraceOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the current status of a network trace operation for a site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetNetworkTraceOperationV2(ctx,
		"testrg123",
		"SampleApp",
		"c291433b-53ad-4c49-8cae-0a293eae1c6d",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraceOperation.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armappservice.NetworkTrace{
			{
				Path:    to.Ptr("D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Message: to.Ptr("Trace file has been saved as D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Status:  to.Ptr("Succeeded"),
			}}
		if !reflect.DeepEqual(exampleRes, res.NetworkTraceArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkTraceArray)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraceOperation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_GetNetworkTracesV2(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraces.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get NetworkTraces for a site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetNetworkTracesV2(ctx,
		"testrg123",
		"SampleApp",
		"c291433b-53ad-4c49-8cae-0a293eae1c6d",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraces.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armappservice.NetworkTrace{
			{
				Path:    to.Ptr("D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Message: to.Ptr("Trace file has been saved as D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Status:  to.Ptr("Succeeded"),
			}}
		if !reflect.DeepEqual(exampleRes, res.NetworkTraceArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkTraceArray)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraces.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_GenerateNewSitePublishingPassword(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListPerfMonCounters(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetSitePhpErrorLogFlag(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListPremierAddOns(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetPremierAddOn(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_AddPremierAddOn(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeletePremierAddOn(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdatePremierAddOn(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetPrivateAccess(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_PutPrivateAccessVnet(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetPrivateEndpointConnectionList(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetPrivateEndpointConnection(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSitePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a private endpoint connection for a site."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetPrivateEndpointConnection(ctx,
		"rg",
		"testSite",
		"connection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSitePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.RemotePrivateEndpointConnectionARMResource{
			Properties: &armappservice.RemotePrivateEndpointConnectionARMResourceProperties{
				PrivateEndpoint: &armappservice.ArmIDWrapper{
					ID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armappservice.PrivateLinkConnectionState{
					Description:     to.Ptr("Approved by admin."),
					ActionsRequired: to.Ptr(""),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RemotePrivateEndpointConnectionARMResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RemotePrivateEndpointConnectionARMResource)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSitePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_ApproveOrRejectPrivateEndpointConnection(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ApproveRejectSitePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Approves or rejects a private endpoint connection for a site."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginApproveOrRejectPrivateEndpointConnection(ctx,
		"rg",
		"testSite",
		"connection",
		armappservice.PrivateLinkConnectionApprovalRequestResource{
			Properties: &armappservice.PrivateLinkConnectionApprovalRequest{
				PrivateLinkServiceConnectionState: &armappservice.PrivateLinkConnectionState{
					Description:     to.Ptr("Approved by admin."),
					ActionsRequired: to.Ptr(""),
					Status:          to.Ptr("Approved"),
				},
			},
		},
		&armappservice.WebAppsClientBeginApproveOrRejectPrivateEndpointConnectionOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ApproveRejectSitePrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ApproveRejectSitePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.RemotePrivateEndpointConnectionARMResource{
			Properties: &armappservice.RemotePrivateEndpointConnectionARMResourceProperties{
				PrivateEndpoint: &armappservice.ArmIDWrapper{
					ID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armappservice.PrivateLinkConnectionState{
					Description:     to.Ptr("Approved by admin."),
					ActionsRequired: to.Ptr(""),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RemotePrivateEndpointConnectionARMResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RemotePrivateEndpointConnectionARMResource)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ApproveRejectSitePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_DeletePrivateEndpointConnection(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteSitePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a private endpoint connection for a site."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginDeletePrivateEndpointConnection(ctx,
		"rg",
		"testSite",
		"connection",
		&armappservice.WebAppsClientBeginDeletePrivateEndpointConnectionOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteSitePrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteSitePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := map[string]interface{}{}
		if !reflect.DeepEqual(exampleRes, res.Interface) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Interface)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteSitePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_GetPrivateLinkResources(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSitePrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get private link resources of a site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetPrivateLinkResources(ctx,
		"rg",
		"testSite",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSitePrivateLinkResources.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.PrivateLinkResourcesWrapper{
			Value: []*armappservice.PrivateLinkResource{
				{
					Name: to.Ptr("site"),
					Type: to.Ptr("Microsoft.Web/sites/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/sites/testSite/privateLinkResources/site"),
					Properties: &armappservice.PrivateLinkResourceProperties{
						GroupID: to.Ptr("sites"),
						RequiredMembers: []*string{
							to.Ptr("sites")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.testsite.azurewebsites.net")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourcesWrapper) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourcesWrapper)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSitePrivateLinkResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_ListProcesses(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetProcess(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteProcess(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetProcessDump(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListProcessModules(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetProcessModule(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListProcessThreads(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListPublicCertificates(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetPublicCertificate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdatePublicCertificate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeletePublicCertificate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ResetProductionSlotConfig(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_Restart(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RestoreFromBackupBlob(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RestoreFromDeletedApp(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RestoreSnapshot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSiteExtensions(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetSiteExtension(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_InstallSiteExtension(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteSiteExtension(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSlots(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_AnalyzeCustomHostnameSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ApplySlotConfigurationSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_BackupSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListBackupsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetBackupStatusSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteBackupSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListBackupStatusSecretsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RestoreSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListBasicPublishingCredentialsPoliciesSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListPublishingCredentialsPoliciesSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Publishing Credentials Policies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("3fb8d758-2e2c-42e9-a528-a8acdfe87237", cred, &options)
	pager := client.ListBasicPublishingCredentialsPoliciesSlot("testrg123",
		"testsite",
		"staging",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListPublishingCredentialsPoliciesSlot.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.PublishingCredentialsPoliciesCollection{
			Value: []*armappservice.CsmPublishingCredentialsPoliciesEntity{
				{
					Name: to.Ptr("ftp"),
					Type: to.Ptr("Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies"),
					ID:   to.Ptr("/subscriptions/3fb8d758-2e2c-42e9-a528-a8acdfe87237/resourceGroups/testrg123/providers/Microsoft.Web/sites/testsite/slots/staging/basicPublishingCredentialsPolicies/ftp"),
					Properties: &armappservice.CsmPublishingCredentialsPoliciesEntityProperties{
						Allow: to.Ptr(true),
					},
				},
				{
					Name: to.Ptr("scm"),
					Type: to.Ptr("Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies"),
					ID:   to.Ptr("/subscriptions/3fb8d758-2e2c-42e9-a528-a8acdfe87237/resourceGroups/testrg123/providers/Microsoft.Web/sites/testsite/slots/staging/basicPublishingCredentialsPolicies/scm"),
					Properties: &armappservice.CsmPublishingCredentialsPoliciesEntityProperties{
						Allow: to.Ptr(true),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PublishingCredentialsPoliciesCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PublishingCredentialsPoliciesCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListPublishingCredentialsPoliciesSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_GetFtpAllowedSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetPublishingCredentialsPolicySlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get FTP Allowed"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetFtpAllowedSlot(ctx,
		"rg",
		"testSite",
		"stage",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetPublishingCredentialsPolicySlot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.CsmPublishingCredentialsPoliciesEntity{
			Properties: &armappservice.CsmPublishingCredentialsPoliciesEntityProperties{
				Allow: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CsmPublishingCredentialsPoliciesEntity) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CsmPublishingCredentialsPoliciesEntity)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetPublishingCredentialsPolicySlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_UpdateFtpAllowedSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/UpdatePublishingCredentialsPolicySlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update FTP Allowed"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.UpdateFtpAllowedSlot(ctx,
		"rg",
		"testSite",
		"stage",
		armappservice.CsmPublishingCredentialsPoliciesEntity{
			Properties: &armappservice.CsmPublishingCredentialsPoliciesEntityProperties{
				Allow: to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/UpdatePublishingCredentialsPolicySlot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.CsmPublishingCredentialsPoliciesEntity{
			Properties: &armappservice.CsmPublishingCredentialsPoliciesEntityProperties{
				Allow: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CsmPublishingCredentialsPoliciesEntity) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CsmPublishingCredentialsPoliciesEntity)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/UpdatePublishingCredentialsPolicySlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_GetScmAllowedSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetPublishingCredentialsPolicySlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get SCM Allowed"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetScmAllowedSlot(ctx,
		"rg",
		"testSite",
		"stage",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetPublishingCredentialsPolicySlot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.CsmPublishingCredentialsPoliciesEntity{
			Properties: &armappservice.CsmPublishingCredentialsPoliciesEntityProperties{
				Allow: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CsmPublishingCredentialsPoliciesEntity) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CsmPublishingCredentialsPoliciesEntity)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetPublishingCredentialsPolicySlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_UpdateScmAllowedSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/UpdatePublishingCredentialsPolicySlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update SCM Allowed"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.UpdateScmAllowedSlot(ctx,
		"rg",
		"testSite",
		"stage",
		armappservice.CsmPublishingCredentialsPoliciesEntity{
			Properties: &armappservice.CsmPublishingCredentialsPoliciesEntityProperties{
				Allow: to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/UpdatePublishingCredentialsPolicySlot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.CsmPublishingCredentialsPoliciesEntity{
			Properties: &armappservice.CsmPublishingCredentialsPoliciesEntityProperties{
				Allow: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CsmPublishingCredentialsPoliciesEntity) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CsmPublishingCredentialsPoliciesEntity)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/UpdatePublishingCredentialsPolicySlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_ListConfigurationsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateApplicationSettingsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListApplicationSettingsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateAuthSettingsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetAuthSettingsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateAuthSettingsV2Slot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetAuthSettingsV2Slot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateAzureStorageAccountsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListAzureStorageAccountsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateBackupConfigurationSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteBackupConfigurationSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetBackupConfigurationSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetAppSettingsKeyVaultReferencesSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetKeyVaultReferencesForAppSettingsSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Azure Key Vault references for app settings for slot"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.GetAppSettingsKeyVaultReferencesSlot("testrg123",
		"testc6282",
		"stage",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetKeyVaultReferencesForAppSettingsSlot.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.APIKVReferenceCollection{
			Value: []*armappservice.APIKVReference{
				{
					Properties: &armappservice.APIKVReferenceProperties{
						SecretName:    to.Ptr("secretName"),
						SecretVersion: to.Ptr("secretVersion"),
						VaultName:     to.Ptr("keyVaultName"),
					},
				},
				{
					Properties: &armappservice.APIKVReferenceProperties{
						SecretName:    to.Ptr("secretName2"),
						SecretVersion: to.Ptr("secretVersion2"),
						VaultName:     to.Ptr("keyVaultName"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.APIKVReferenceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.APIKVReferenceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetKeyVaultReferencesForAppSettingsSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_GetAppSettingKeyVaultReferenceSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetKeyVaultReferencesForAppSettingSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Azure Key Vault slot app setting reference"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetAppSettingKeyVaultReferenceSlot(ctx,
		"testrg123",
		"testc6282",
		"setting",
		"stage",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetKeyVaultReferencesForAppSettingSlot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.APIKVReference{
			Properties: &armappservice.APIKVReferenceProperties{
				SecretName:    to.Ptr("secretName"),
				SecretVersion: to.Ptr("secretVersion"),
				VaultName:     to.Ptr("keyVaultName"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.APIKVReference) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIKVReference)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetKeyVaultReferencesForAppSettingSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_GetSiteConnectionStringKeyVaultReferencesSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetSiteConnectionStringKeyVaultReferenceSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateConnectionStringsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListConnectionStringsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetDiagnosticLogsConfigurationSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateDiagnosticLogsConfigSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateMetadataSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListMetadataSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListPublishingCredentialsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateSitePushSettingsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSitePushSettingsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetConfigurationSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateConfigurationSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateConfigurationSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListConfigurationSnapshotInfoSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetConfigurationSnapshotSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RecoverSiteConfigurationSnapshotSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetWebSiteContainerLogsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetContainerLogsZipSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListContinuousWebJobsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetContinuousWebJobSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteContinuousWebJobSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_StartContinuousWebJobSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_StopContinuousWebJobSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListDeploymentsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetDeploymentSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateDeploymentSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteDeploymentSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListDeploymentLogSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DiscoverBackupSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListDomainOwnershipIdentifiersSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetDomainOwnershipIdentifierSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateDomainOwnershipIdentifierSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteDomainOwnershipIdentifierSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateDomainOwnershipIdentifierSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetMSDeployStatusSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateMSDeployOperationSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetMSDeployLogSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListInstanceFunctionsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetFunctionsAdminTokenSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetInstanceFunctionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateInstanceFunctionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteInstanceFunctionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateFunctionSecretSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteFunctionSecretSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListFunctionKeysSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListFunctionSecretsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListHostKeysSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSyncStatusSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_SyncFunctionsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateHostSecretSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteHostSecretSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListHostNameBindingsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetHostNameBindingSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateHostNameBindingSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteHostNameBindingSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetHybridConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateHybridConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteHybridConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateHybridConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListHybridConnectionsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListRelayServiceConnectionsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetRelayServiceConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateRelayServiceConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteRelayServiceConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateRelayServiceConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListInstanceIdentifiersSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetInstanceInfoSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSiteInstanceInfo.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get site instance info"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetInstanceInfoSlot(ctx,
		"testrg123",
		"tests346",
		"134987120",
		"staging",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSiteInstanceInfo.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.WebSiteInstanceStatus{
			Name: to.Ptr("134987120"),
			Type: to.Ptr("Microsoft.Web/sites/instances"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Web/sites/tests346/slot/staging/instances/134987120"),
			Properties: &armappservice.WebSiteInstanceStatusProperties{
				Containers: map[string]*armappservice.ContainerInfo{
					"c1": {
						CurrentTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2013-10-21T13:28:06.419Z"); return t }()),
					},
				},
				DetectorURL: to.Ptr("testsec579"),
				State:       to.Ptr(armappservice.SiteRuntimeStateREADY),
				StatusURL:   to.Ptr("https://sampleurl"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WebSiteInstanceStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WebSiteInstanceStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSiteInstanceInfo.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_GetInstanceMsDeployStatusSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateInstanceMSDeployOperationSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetInstanceMSDeployLogSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListInstanceProcessesSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetInstanceProcessSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteInstanceProcessSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetInstanceProcessDumpSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListInstanceProcessModulesSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetInstanceProcessModuleSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListInstanceProcessThreadsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_IsCloneableSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSiteBackupsSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListSlotBackups.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List backups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListSiteBackupsSlot("testrg123",
		"tests346",
		"staging",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListSlotBackups.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappservice.BackupItemCollection{
			Value: []*armappservice.BackupItem{
				{
					Name: to.Ptr("tests346/staging"),
					Type: to.Ptr("Microsoft.Web/sites/slots"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Web/sites/tests346/slot/staging"),
					Properties: &armappservice.BackupItemProperties{
						BlobName:          to.Ptr("blob1"),
						Status:            to.Ptr(armappservice.BackupItemStatusInProgress),
						StorageAccountURL: to.Ptr("https://blobstorage.windows.net"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BackupItemCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BackupItemCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ListSlotBackups.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_ListSyncFunctionTriggersSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetSwiftVirtualNetworkConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateSwiftVirtualNetworkConnectionWithCheckSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteSwiftVirtualNetworkSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateSwiftVirtualNetworkConnectionWithCheckSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListNetworkFeaturesSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetNetworkTraceOperationSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraceOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the current status of a network trace operation for a site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetNetworkTraceOperationSlot(ctx,
		"testrg123",
		"SampleApp",
		"c291433b-53ad-4c49-8cae-0a293eae1c6d",
		"Production",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraceOperation.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armappservice.NetworkTrace{
			{
				Path:    to.Ptr("D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Message: to.Ptr("Trace file has been saved as D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Status:  to.Ptr("Succeeded"),
			}}
		if !reflect.DeepEqual(exampleRes, res.NetworkTraceArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkTraceArray)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraceOperation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_StartWebSiteNetworkTraceSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_StartWebSiteNetworkTraceOperationSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StartWebSiteNetworkTraceOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start a new network trace operation for a site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginStartWebSiteNetworkTraceOperationSlot(ctx,
		"testrg123",
		"SampleApp",
		"Production",
		&armappservice.WebAppsClientBeginStartWebSiteNetworkTraceOperationSlotOptions{DurationInSeconds: to.Ptr[int32](60),
			MaxFrameLength: nil,
			SasURL:         nil,
			ResumeToken:    "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StartWebSiteNetworkTraceOperation.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StartWebSiteNetworkTraceOperation.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armappservice.NetworkTrace{
			{
				Path:    to.Ptr("D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Message: to.Ptr("Trace file has been saved as D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Status:  to.Ptr("Succeeded"),
			}}
		if !reflect.DeepEqual(exampleRes, res.NetworkTraceArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkTraceArray)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StartWebSiteNetworkTraceOperation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_StopWebSiteNetworkTraceSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StopWebSiteNetworkTrace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop a currently running network trace operation for a site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.StopWebSiteNetworkTraceSlot(ctx,
		"testrg123",
		"SampleApp",
		"Production",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StopWebSiteNetworkTrace.json: %v", err)
	}
}

func TestWebApps_GetNetworkTracesSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraces.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get NetworkTraces for a site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetNetworkTracesSlot(ctx,
		"testrg123",
		"SampleApp",
		"c291433b-53ad-4c49-8cae-0a293eae1c6d",
		"Production",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraces.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armappservice.NetworkTrace{
			{
				Path:    to.Ptr("D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Message: to.Ptr("Trace file has been saved as D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Status:  to.Ptr("Succeeded"),
			}}
		if !reflect.DeepEqual(exampleRes, res.NetworkTraceArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkTraceArray)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraces.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_GetNetworkTraceOperationSlotV2(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraceOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the current status of a network trace operation for a site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetNetworkTraceOperationSlotV2(ctx,
		"testrg123",
		"SampleApp",
		"c291433b-53ad-4c49-8cae-0a293eae1c6d",
		"Production",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraceOperation.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armappservice.NetworkTrace{
			{
				Path:    to.Ptr("D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Message: to.Ptr("Trace file has been saved as D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Status:  to.Ptr("Succeeded"),
			}}
		if !reflect.DeepEqual(exampleRes, res.NetworkTraceArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkTraceArray)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraceOperation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_GetNetworkTracesSlotV2(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraces.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get NetworkTraces for a site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetNetworkTracesSlotV2(ctx,
		"testrg123",
		"SampleApp",
		"c291433b-53ad-4c49-8cae-0a293eae1c6d",
		"Production",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraces.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armappservice.NetworkTrace{
			{
				Path:    to.Ptr("D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Message: to.Ptr("Trace file has been saved as D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Status:  to.Ptr("Succeeded"),
			}}
		if !reflect.DeepEqual(exampleRes, res.NetworkTraceArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkTraceArray)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetWebSiteNetworkTraces.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_GenerateNewSitePublishingPasswordSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListPerfMonCountersSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetSitePhpErrorLogFlagSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListPremierAddOnsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetPremierAddOnSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_AddPremierAddOnSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeletePremierAddOnSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdatePremierAddOnSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetPrivateAccessSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_PutPrivateAccessVnetSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetPrivateEndpointConnectionListSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetPrivateEndpointConnectionSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSitePrivateEndpointConnectionSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a private endpoint connection for a site."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetPrivateEndpointConnectionSlot(ctx,
		"rg",
		"testSite",
		"connection",
		"stage",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSitePrivateEndpointConnectionSlot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.RemotePrivateEndpointConnectionARMResource{
			Properties: &armappservice.RemotePrivateEndpointConnectionARMResourceProperties{
				PrivateEndpoint: &armappservice.ArmIDWrapper{
					ID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armappservice.PrivateLinkConnectionState{
					Description:     to.Ptr("Approved by admin."),
					ActionsRequired: to.Ptr(""),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RemotePrivateEndpointConnectionARMResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RemotePrivateEndpointConnectionARMResource)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSitePrivateEndpointConnectionSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_ApproveOrRejectPrivateEndpointConnectionSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ApproveRejectSitePrivateEndpointConnectionSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Approves or rejects a private endpoint connection for a site."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginApproveOrRejectPrivateEndpointConnectionSlot(ctx,
		"rg",
		"testSite",
		"connection",
		"stage",
		armappservice.PrivateLinkConnectionApprovalRequestResource{
			Properties: &armappservice.PrivateLinkConnectionApprovalRequest{
				PrivateLinkServiceConnectionState: &armappservice.PrivateLinkConnectionState{
					Description:     to.Ptr("Approved by admin."),
					ActionsRequired: to.Ptr(""),
					Status:          to.Ptr("Approved"),
				},
			},
		},
		&armappservice.WebAppsClientBeginApproveOrRejectPrivateEndpointConnectionSlotOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ApproveRejectSitePrivateEndpointConnectionSlot.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ApproveRejectSitePrivateEndpointConnectionSlot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.RemotePrivateEndpointConnectionARMResource{
			Properties: &armappservice.RemotePrivateEndpointConnectionARMResourceProperties{
				PrivateEndpoint: &armappservice.ArmIDWrapper{
					ID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armappservice.PrivateLinkConnectionState{
					Description:     to.Ptr("Approved by admin."),
					ActionsRequired: to.Ptr(""),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RemotePrivateEndpointConnectionARMResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RemotePrivateEndpointConnectionARMResource)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/ApproveRejectSitePrivateEndpointConnectionSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_DeletePrivateEndpointConnectionSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteSitePrivateEndpointConnectionSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a private endpoint connection for a site."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginDeletePrivateEndpointConnectionSlot(ctx,
		"rg",
		"testSite",
		"connection",
		"stage",
		&armappservice.WebAppsClientBeginDeletePrivateEndpointConnectionSlotOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteSitePrivateEndpointConnectionSlot.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteSitePrivateEndpointConnectionSlot.json: %v", err)
	}
	// Response check
	{
		exampleRes := map[string]interface{}{}
		if !reflect.DeepEqual(exampleRes, res.Interface) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Interface)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/DeleteSitePrivateEndpointConnectionSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_GetPrivateLinkResourcesSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSitePrivateLinkResourcesSlot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get private link resources of a site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetPrivateLinkResourcesSlot(ctx,
		"rg",
		"testSite",
		"stage",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSitePrivateLinkResourcesSlot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappservice.PrivateLinkResourcesWrapper{
			Value: []*armappservice.PrivateLinkResource{
				{
					Name: to.Ptr("site"),
					Type: to.Ptr("Microsoft.Web/sites/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/rg/providers/Microsoft.Web/sites/testSite/privateLinkResources/site"),
					Properties: &armappservice.PrivateLinkResourceProperties{
						GroupID: to.Ptr("sites"),
						RequiredMembers: []*string{
							to.Ptr("sites")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.testsite.azurewebsites.net")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourcesWrapper) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourcesWrapper)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/GetSitePrivateLinkResourcesSlot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_ListProcessesSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetProcessSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteProcessSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetProcessDumpSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListProcessModulesSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetProcessModuleSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListProcessThreadsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListPublicCertificatesSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetPublicCertificateSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdatePublicCertificateSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeletePublicCertificateSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ResetSlotConfigurationSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RestartSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RestoreFromBackupBlobSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RestoreFromDeletedAppSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RestoreSnapshotSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSiteExtensionsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetSiteExtensionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_InstallSiteExtensionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteSiteExtensionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSlotDifferencesSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_SwapSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSnapshotsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSnapshotsFromDRSecondarySlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetSourceControlSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateSourceControlSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteSourceControlSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateSourceControlSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_StartSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_StartNetworkTraceSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StartWebSiteNetworkTraceOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start a new network trace operation for a site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginStartNetworkTraceSlot(ctx,
		"testrg123",
		"SampleApp",
		"Production",
		&armappservice.WebAppsClientBeginStartNetworkTraceSlotOptions{DurationInSeconds: to.Ptr[int32](60),
			MaxFrameLength: nil,
			SasURL:         nil,
			ResumeToken:    "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StartWebSiteNetworkTraceOperation.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StartWebSiteNetworkTraceOperation.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armappservice.NetworkTrace{
			{
				Path:    to.Ptr("D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Message: to.Ptr("Trace file has been saved as D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Status:  to.Ptr("Succeeded"),
			}}
		if !reflect.DeepEqual(exampleRes, res.NetworkTraceArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkTraceArray)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StartWebSiteNetworkTraceOperation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_StopSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_StopNetworkTraceSlot(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StopWebSiteNetworkTrace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop a currently running network trace operation for a site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.StopNetworkTraceSlot(ctx,
		"testrg123",
		"SampleApp",
		"Production",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StopWebSiteNetworkTrace.json: %v", err)
	}
}

func TestWebApps_SyncRepositorySlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_SyncFunctionTriggersSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListTriggeredWebJobsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetTriggeredWebJobSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteTriggeredWebJobSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListTriggeredWebJobHistorySlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetTriggeredWebJobHistorySlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RunTriggeredWebJobSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListUsagesSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListVnetConnectionsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetVnetConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateVnetConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteVnetConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateVnetConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetVnetConnectionGatewaySlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateVnetConnectionGatewaySlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateVnetConnectionGatewaySlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListWebJobsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetWebJobSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSlotDifferencesFromProduction(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_SwapSlotWithProduction(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSnapshots(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSnapshotsFromDRSecondary(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetSourceControl(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateSourceControl(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteSourceControl(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateSourceControl(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_Start(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_StartNetworkTrace(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StartWebSiteNetworkTraceOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start a new network trace operation for a site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginStartNetworkTrace(ctx,
		"testrg123",
		"SampleApp",
		&armappservice.WebAppsClientBeginStartNetworkTraceOptions{DurationInSeconds: to.Ptr[int32](60),
			MaxFrameLength: nil,
			SasURL:         nil,
			ResumeToken:    "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StartWebSiteNetworkTraceOperation.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StartWebSiteNetworkTraceOperation.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armappservice.NetworkTrace{
			{
				Path:    to.Ptr("D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Message: to.Ptr("Trace file has been saved as D:\\home\\LogFiles\\networktrace\\10.0.0.1_2018_02_01T00_00_00.zip"),
				Status:  to.Ptr("Succeeded"),
			}}
		if !reflect.DeepEqual(exampleRes, res.NetworkTraceArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NetworkTraceArray)
			t.Fatalf("Mock response is not equal to example response for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StartWebSiteNetworkTraceOperation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebApps_Stop(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_StopNetworkTrace(t *testing.T) {
	// From example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StopWebSiteNetworkTrace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop a currently running network trace operation for a site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappservice.NewWebAppsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.StopNetworkTrace(ctx,
		"testrg123",
		"SampleApp",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/examples/StopWebSiteNetworkTrace.json: %v", err)
	}
}

func TestWebApps_SyncRepository(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_SyncFunctionTriggers(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListTriggeredWebJobs(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetTriggeredWebJob(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteTriggeredWebJob(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListTriggeredWebJobHistory(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetTriggeredWebJobHistory(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RunTriggeredWebJob(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListUsages(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListVnetConnections(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetVnetConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateVnetConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteVnetConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateVnetConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetVnetConnectionGateway(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateVnetConnectionGateway(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateVnetConnectionGateway(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListWebJobs(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetWebJob(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
