//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armkeyvault

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestKeys_CreateIfNotExist(t *testing.T) {
	// From example Create a key
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewKeysClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.CreateIfNotExist(ctx,
		"sample-group",
		"sample-vault-name",
		"sample-key-name",
		KeyCreateParameters{
			Properties: &KeyProperties{
				Kty: JSONWebKeyTypeRSA.ToPtr(),
			},
		},
		&KeysCreateIfNotExistOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Key.ID == nil {
		t.Fatal("Key.ID should not be nil!")
	}
}

func TestKeys_Get(t *testing.T) {
	// From example Get a key
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewKeysClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"sample-group",
		"sample-vault-name",
		"sample-key-name",
		&KeysGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Key.ID == nil {
		t.Fatal("Key.ID should not be nil!")
	}
}

func TestKeys_List(t *testing.T) {
	// From example List keys in the vault
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewKeysClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("sample-group",
		"sample-vault-name",
		&KeysListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Key.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Key.ID should not be nil!")
			}
		}
	}
}

func TestKeys_GetVersion(t *testing.T) {
	// From example Get a key version
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewKeysClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.GetVersion(ctx,
		"sample-group",
		"sample-vault-name",
		"sample-key-name",
		"fd618d9519b74f9aae94ade66b876acc",
		&KeysGetVersionOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Key.ID == nil {
		t.Fatal("Key.ID should not be nil!")
	}
}

func TestKeys_ListVersions(t *testing.T) {
	// From example List key versions in the vault
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewKeysClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListVersions("sample-group",
		"sample-vault-name",
		"sample-key-name",
		&KeysListVersionsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Key.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Key.ID should not be nil!")
			}
		}
	}
}

func TestVaults_CreateOrUpdate(t *testing.T) {
	// From example Create a new vault or update an existing vault
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sample-resource-group",
		"sample-vault",
		VaultCreateOrUpdateParameters{
			Location: to.StringPtr("westus"),
			Properties: &VaultProperties{
				AccessPolicies: []*AccessPolicyEntry{
					{
						ObjectID: to.StringPtr("00000000-0000-0000-0000-000000000000"),
						Permissions: &Permissions{
							Certificates: []*CertificatePermissions{
								CertificatePermissionsGet.ToPtr(),
								CertificatePermissionsList.ToPtr(),
								CertificatePermissionsDelete.ToPtr(),
								CertificatePermissionsCreate.ToPtr(),
								CertificatePermissionsImport.ToPtr(),
								CertificatePermissionsUpdate.ToPtr(),
								CertificatePermissionsManagecontacts.ToPtr(),
								CertificatePermissionsGetissuers.ToPtr(),
								CertificatePermissionsListissuers.ToPtr(),
								CertificatePermissionsSetissuers.ToPtr(),
								CertificatePermissionsDeleteissuers.ToPtr(),
								CertificatePermissionsManageissuers.ToPtr(),
								CertificatePermissionsRecover.ToPtr(),
								CertificatePermissionsPurge.ToPtr()},
							Keys: []*KeyPermissions{
								KeyPermissionsEncrypt.ToPtr(),
								KeyPermissionsDecrypt.ToPtr(),
								KeyPermissionsWrapKey.ToPtr(),
								KeyPermissionsUnwrapKey.ToPtr(),
								KeyPermissionsSign.ToPtr(),
								KeyPermissionsVerify.ToPtr(),
								KeyPermissionsGet.ToPtr(),
								KeyPermissionsList.ToPtr(),
								KeyPermissionsCreate.ToPtr(),
								KeyPermissionsUpdate.ToPtr(),
								KeyPermissionsImport.ToPtr(),
								KeyPermissionsDelete.ToPtr(),
								KeyPermissionsBackup.ToPtr(),
								KeyPermissionsRestore.ToPtr(),
								KeyPermissionsRecover.ToPtr(),
								KeyPermissionsPurge.ToPtr()},
							Secrets: []*SecretPermissions{
								SecretPermissionsGet.ToPtr(),
								SecretPermissionsList.ToPtr(),
								SecretPermissionsSet.ToPtr(),
								SecretPermissionsDelete.ToPtr(),
								SecretPermissionsBackup.ToPtr(),
								SecretPermissionsRestore.ToPtr(),
								SecretPermissionsRecover.ToPtr(),
								SecretPermissionsPurge.ToPtr()},
						},
						TenantID: to.StringPtr("00000000-0000-0000-0000-000000000000"),
					}},
				EnabledForDeployment:         to.BoolPtr(true),
				EnabledForDiskEncryption:     to.BoolPtr(true),
				EnabledForTemplateDeployment: to.BoolPtr(true),
				PublicNetworkAccess:          to.StringPtr("Enabled"),
				SKU: &SKU{
					Name:   SKUNameStandard.ToPtr(),
					Family: SKUFamilyA.ToPtr(),
				},
				TenantID: to.StringPtr("00000000-0000-0000-0000-000000000000"),
			},
		},
		&VaultsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Vault.ID == nil {
		t.Fatal("Vault.ID should not be nil!")
	}

	// From example Create or update a vault with network acls
	poller, err = client.BeginCreateOrUpdate(ctx,
		"sample-resource-group",
		"sample-vault",
		VaultCreateOrUpdateParameters{
			Location: to.StringPtr("westus"),
			Properties: &VaultProperties{
				EnabledForDeployment:         to.BoolPtr(true),
				EnabledForDiskEncryption:     to.BoolPtr(true),
				EnabledForTemplateDeployment: to.BoolPtr(true),
				NetworkACLs: &NetworkRuleSet{
					Bypass:        NetworkRuleBypassOptionsAzureServices.ToPtr(),
					DefaultAction: NetworkRuleActionDeny.ToPtr(),
					IPRules: []*IPRule{
						{
							Value: to.StringPtr("124.56.78.91"),
						},
						{
							Value: to.StringPtr("'10.91.4.0/24'"),
						}},
					VirtualNetworkRules: []*VirtualNetworkRule{
						{
							ID: to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1"),
						}},
				},
				SKU: &SKU{
					Name:   SKUNameStandard.ToPtr(),
					Family: SKUFamilyA.ToPtr(),
				},
				TenantID: to.StringPtr("00000000-0000-0000-0000-000000000000"),
			},
		},
		&VaultsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Vault.ID == nil {
		t.Fatal("Vault.ID should not be nil!")
	}
}

func TestVaults_Update(t *testing.T) {
	// From example Update an existing vault
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Update(ctx,
		"sample-resource-group",
		"sample-vault",
		VaultPatchParameters{
			Properties: &VaultPatchProperties{
				AccessPolicies: []*AccessPolicyEntry{
					{
						ObjectID: to.StringPtr("00000000-0000-0000-0000-000000000000"),
						Permissions: &Permissions{
							Certificates: []*CertificatePermissions{
								CertificatePermissionsGet.ToPtr(),
								CertificatePermissionsList.ToPtr(),
								CertificatePermissionsDelete.ToPtr(),
								CertificatePermissionsCreate.ToPtr(),
								CertificatePermissionsImport.ToPtr(),
								CertificatePermissionsUpdate.ToPtr(),
								CertificatePermissionsManagecontacts.ToPtr(),
								CertificatePermissionsGetissuers.ToPtr(),
								CertificatePermissionsListissuers.ToPtr(),
								CertificatePermissionsSetissuers.ToPtr(),
								CertificatePermissionsDeleteissuers.ToPtr(),
								CertificatePermissionsManageissuers.ToPtr(),
								CertificatePermissionsRecover.ToPtr(),
								CertificatePermissionsPurge.ToPtr()},
							Keys: []*KeyPermissions{
								KeyPermissionsEncrypt.ToPtr(),
								KeyPermissionsDecrypt.ToPtr(),
								KeyPermissionsWrapKey.ToPtr(),
								KeyPermissionsUnwrapKey.ToPtr(),
								KeyPermissionsSign.ToPtr(),
								KeyPermissionsVerify.ToPtr(),
								KeyPermissionsGet.ToPtr(),
								KeyPermissionsList.ToPtr(),
								KeyPermissionsCreate.ToPtr(),
								KeyPermissionsUpdate.ToPtr(),
								KeyPermissionsImport.ToPtr(),
								KeyPermissionsDelete.ToPtr(),
								KeyPermissionsBackup.ToPtr(),
								KeyPermissionsRestore.ToPtr(),
								KeyPermissionsRecover.ToPtr(),
								KeyPermissionsPurge.ToPtr()},
							Secrets: []*SecretPermissions{
								SecretPermissionsGet.ToPtr(),
								SecretPermissionsList.ToPtr(),
								SecretPermissionsSet.ToPtr(),
								SecretPermissionsDelete.ToPtr(),
								SecretPermissionsBackup.ToPtr(),
								SecretPermissionsRestore.ToPtr(),
								SecretPermissionsRecover.ToPtr(),
								SecretPermissionsPurge.ToPtr()},
						},
						TenantID: to.StringPtr("00000000-0000-0000-0000-000000000000"),
					}},
				EnabledForDeployment:         to.BoolPtr(true),
				EnabledForDiskEncryption:     to.BoolPtr(true),
				EnabledForTemplateDeployment: to.BoolPtr(true),
				PublicNetworkAccess:          to.StringPtr("Enabled"),
				SKU: &SKU{
					Name:   SKUNameStandard.ToPtr(),
					Family: SKUFamilyA.ToPtr(),
				},
				TenantID: to.StringPtr("00000000-0000-0000-0000-000000000000"),
			},
		},
		&VaultsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Vault.ID == nil {
		t.Fatal("Vault.ID should not be nil!")
	}
}

func TestVaults_Delete(t *testing.T) {
	// From example Delete a vault
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultsClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.Delete(ctx,
		"sample-resource-group",
		"sample-vault",
		&VaultsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVaults_Get(t *testing.T) {
	// From example Retrieve a vault
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"sample-resource-group",
		"sample-vault",
		&VaultsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Vault.ID == nil {
		t.Fatal("Vault.ID should not be nil!")
	}
}

func TestVaults_UpdateAccessPolicy(t *testing.T) {
	// From example Add an access policy, or update an access policy with new permissions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.UpdateAccessPolicy(ctx,
		"sample-group",
		"sample-vault",
		AccessPolicyUpdateKindAdd,
		VaultAccessPolicyParameters{
			Properties: &VaultAccessPolicyProperties{
				AccessPolicies: []*AccessPolicyEntry{
					{
						ObjectID: to.StringPtr("00000000-0000-0000-0000-000000000000"),
						Permissions: &Permissions{
							Certificates: []*CertificatePermissions{
								CertificatePermissionsGet.ToPtr()},
							Keys: []*KeyPermissions{
								KeyPermissionsEncrypt.ToPtr()},
							Secrets: []*SecretPermissions{
								SecretPermissionsGet.ToPtr()},
						},
						TenantID: to.StringPtr("00000000-0000-0000-0000-000000000000"),
					}},
			},
		},
		&VaultsUpdateAccessPolicyOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VaultAccessPolicyParameters.ID == nil {
		t.Fatal("VaultAccessPolicyParameters.ID should not be nil!")
	}
}

func TestVaults_ListByResourceGroup(t *testing.T) {
	// From example List vaults in the specified resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListByResourceGroup("sample-group",
		&VaultsListByResourceGroupOptions{Top: to.Int32Ptr(1)})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Vault.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Vault.ID should not be nil!")
			}
		}
	}
}

func TestVaults_ListBySubscription(t *testing.T) {
	// From example List vaults in the specified subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListBySubscription(&VaultsListBySubscriptionOptions{Top: to.Int32Ptr(1)})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Vault.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Vault.ID should not be nil!")
			}
		}
	}
}

func TestVaults_ListDeleted(t *testing.T) {
	// From example List deleted vaults in the specified subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListDeleted(&VaultsListDeletedOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DeletedVault.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DeletedVault.ID should not be nil!")
			}
		}
	}
}

func TestVaults_GetDeleted(t *testing.T) {
	// From example Retrieve a deleted vault
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.GetDeleted(ctx,
		"sample-vault",
		"westus",
		&VaultsGetDeletedOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DeletedVault.ID == nil {
		t.Fatal("DeletedVault.ID should not be nil!")
	}
}

func TestVaults_PurgeDeleted(t *testing.T) {
	// From example Purge a deleted vault
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginPurgeDeleted(ctx,
		"sample-vault",
		"westus",
		&VaultsBeginPurgeDeletedOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVaults_List(t *testing.T) {
	// From example List vaults in the specified subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List(Enum16ResourceTypeEqMicrosoftKeyVaultVaults,
		Enum17TwoThousandFifteen1101,
		&VaultsListOptions{Top: to.Int32Ptr(1)})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Resource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Resource.ID should not be nil!")
			}
		}
	}
}

func TestVaults_CheckNameAvailability(t *testing.T) {
	// From example Validate a vault name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVaultsClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.CheckNameAvailability(ctx,
		VaultCheckNameAvailabilityParameters{
			Name: to.StringPtr("sample-vault"),
			Type: to.StringPtr("Microsoft.KeyVault/vaults"),
		},
		&VaultsCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example KeyVaultGetPrivateEndpointConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"sample-group",
		"sample-vault",
		"sample-pec",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Put(t *testing.T) {
	// From example KeyVaultPutPrivateEndpointConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Put(ctx,
		"sample-group",
		"sample-vault",
		"sample-pec",
		PrivateEndpointConnection{
			Etag: to.StringPtr(""),
			Properties: &PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionState{
					Description: to.StringPtr("My name is Joe and I'm approving this."),
					Status:      PrivateEndpointServiceConnectionStatusApproved.ToPtr(),
				},
			},
		},
		&PrivateEndpointConnectionsPutOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example KeyVaultDeletePrivateEndpointConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"sample-group",
		"sample-vault",
		"sample-pec",
		&PrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_ListByResource(t *testing.T) {
	// From example KeyVaultListPrivateEndpointConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListByResource("sample-group",
		"sample-vault",
		&PrivateEndpointConnectionsListByResourceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateEndpointConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateEndpointConnection.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkResources_ListByVault(t *testing.T) {
	// From example KeyVaultListPrivateLinkResources
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.ListByVault(ctx,
		"sample-group",
		"sample-vault",
		&PrivateLinkResourcesListByVaultOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedHsms_CreateOrUpdate(t *testing.T) {
	// From example Create a new managed HSM Pool or update an existing managed HSM Pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedHsmsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"hsm-group",
		"hsm1",
		ManagedHsm{
			ManagedHsmResource: ManagedHsmResource{
				Location: to.StringPtr("westus"),
				SKU: &ManagedHsmSKU{
					Name:   ManagedHsmSKUNameStandardB1.ToPtr(),
					Family: ManagedHsmSKUFamilyB.ToPtr(),
				},
				Tags: map[string]*string{
					"Dept":        to.StringPtr("hsm"),
					"Environment": to.StringPtr("dogfood"),
				},
			},
			Properties: &ManagedHsmProperties{
				EnablePurgeProtection: to.BoolPtr(true),
				EnableSoftDelete:      to.BoolPtr(true),
				InitialAdminObjectIDs: []*string{
					to.StringPtr("00000000-0000-0000-0000-000000000000")},
				SoftDeleteRetentionInDays: to.Int32Ptr(90),
				TenantID:                  to.StringPtr("00000000-0000-0000-0000-000000000000"),
			},
		},
		&ManagedHsmsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedHsm.ID == nil {
		t.Fatal("ManagedHsm.ID should not be nil!")
	}
}

func TestManagedHsms_Update(t *testing.T) {
	// From example Update an existing managed HSM Pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedHsmsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginUpdate(ctx,
		"hsm-group",
		"hsm1",
		ManagedHsm{
			ManagedHsmResource: ManagedHsmResource{
				Tags: map[string]*string{
					"Dept":        to.StringPtr("hsm"),
					"Environment": to.StringPtr("dogfood"),
					"Slice":       to.StringPtr("A"),
				},
			},
		},
		&ManagedHsmsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedHsm.ID == nil {
		t.Fatal("ManagedHsm.ID should not be nil!")
	}
}

func TestManagedHsms_Delete(t *testing.T) {
	// From example Delete a managed HSM Pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedHsmsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"hsm-group",
		"hsm1",
		&ManagedHsmsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedHsms_Get(t *testing.T) {
	// From example Retrieve a managed HSM Pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedHsmsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"hsm-group",
		"hsm1",
		&ManagedHsmsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedHsm.ID == nil {
		t.Fatal("ManagedHsm.ID should not be nil!")
	}
}

func TestManagedHsms_ListByResourceGroup(t *testing.T) {
	// From example List managed HSM Pools in a resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedHsmsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListByResourceGroup("hsm-group",
		&ManagedHsmsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedHsm.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedHsm.ID should not be nil!")
			}
		}
	}
}

func TestManagedHsms_ListBySubscription(t *testing.T) {
	// From example List managed HSM Pools in a subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedHsmsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListBySubscription(&ManagedHsmsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedHsm.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedHsm.ID should not be nil!")
			}
		}
	}
}

func TestManagedHsms_ListDeleted(t *testing.T) {
	// From example List deleted managed HSMs in the specified subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedHsmsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListDeleted(&ManagedHsmsListDeletedOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DeletedManagedHsm.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DeletedManagedHsm.ID should not be nil!")
			}
		}
	}
}

func TestManagedHsms_GetDeleted(t *testing.T) {
	// From example Retrieve a deleted managed HSM
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedHsmsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.GetDeleted(ctx,
		"hsm1",
		"westus",
		&ManagedHsmsGetDeletedOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DeletedManagedHsm.ID == nil {
		t.Fatal("DeletedManagedHsm.ID should not be nil!")
	}
}

func TestManagedHsms_PurgeDeleted(t *testing.T) {
	// From example Purge a managed HSM Pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedHsmsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginPurgeDeleted(ctx,
		"hsm1",
		"westus",
		&ManagedHsmsBeginPurgeDeletedOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestMHSMPrivateEndpointConnections_ListByResource(t *testing.T) {
	// From example List managed HSM Pools in a subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMHSMPrivateEndpointConnectionsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListByResource("sample-group",
		"sample-mhsm",
		&MHSMPrivateEndpointConnectionsListByResourceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("MHSMPrivateEndpointConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("MHSMPrivateEndpointConnection.ID should not be nil!")
			}
		}
	}
}

func TestMHSMPrivateEndpointConnections_Get(t *testing.T) {
	// From example ManagedHsmGetPrivateEndpointConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMHSMPrivateEndpointConnectionsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"sample-group",
		"sample-mhsm",
		"sample-pec",
		&MHSMPrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MHSMPrivateEndpointConnection.ID == nil {
		t.Fatal("MHSMPrivateEndpointConnection.ID should not be nil!")
	}
}

func TestMHSMPrivateEndpointConnections_Put(t *testing.T) {
	// From example ManagedHsmPutPrivateEndpointConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMHSMPrivateEndpointConnectionsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Put(ctx,
		"sample-group",
		"sample-mhsm",
		"sample-pec",
		MHSMPrivateEndpointConnection{
			Properties: &MHSMPrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &MHSMPrivateLinkServiceConnectionState{
					Description: to.StringPtr("My name is Joe and I'm approving this."),
					Status:      PrivateEndpointServiceConnectionStatusApproved.ToPtr(),
				},
			},
		},
		&MHSMPrivateEndpointConnectionsPutOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MHSMPrivateEndpointConnection.ID == nil {
		t.Fatal("MHSMPrivateEndpointConnection.ID should not be nil!")
	}
}

func TestMHSMPrivateEndpointConnections_Delete(t *testing.T) {
	// From example ManagedHsmDeletePrivateEndpointConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMHSMPrivateEndpointConnectionsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"sample-group",
		"sample-mhsm",
		"sample-pec",
		&MHSMPrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.MHSMPrivateEndpointConnection.ID == nil {
		t.Fatal("MHSMPrivateEndpointConnection.ID should not be nil!")
	}
}

func TestMHSMPrivateLinkResources_ListByMHSMResource(t *testing.T) {
	// From example KeyVaultListPrivateLinkResources
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMHSMPrivateLinkResourcesClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.ListByMHSMResource(ctx,
		"sample-group",
		"sample-mhsm",
		&MHSMPrivateLinkResourcesListByMHSMResourceOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example Lists available Rest API operations.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestSecrets_CreateOrUpdate(t *testing.T) {
	// From example Create a secret
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSecretsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.CreateOrUpdate(ctx,
		"sample-group",
		"sample-vault",
		"secret-name",
		SecretCreateOrUpdateParameters{
			Properties: &SecretProperties{
				Value: to.StringPtr("secret-value"),
			},
		},
		&SecretsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Secret.ID == nil {
		t.Fatal("Secret.ID should not be nil!")
	}
}

func TestSecrets_Update(t *testing.T) {
	// From example Update a secret
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSecretsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Update(ctx,
		"sample-group",
		"sample-vault",
		"secret-name",
		SecretPatchParameters{
			Properties: &SecretPatchProperties{
				Value: to.StringPtr("secret-value2"),
			},
		},
		&SecretsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Secret.ID == nil {
		t.Fatal("Secret.ID should not be nil!")
	}
}

func TestSecrets_Get(t *testing.T) {
	// From example Get a secret
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSecretsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"sample-group",
		"sample-vault",
		"secret-name",
		&SecretsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Secret.ID == nil {
		t.Fatal("Secret.ID should not be nil!")
	}
}

func TestSecrets_List(t *testing.T) {
	// From example List secrets in the vault
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSecretsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("sample-group",
		"sample-vault",
		&SecretsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Secret.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Secret.ID should not be nil!")
			}
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
