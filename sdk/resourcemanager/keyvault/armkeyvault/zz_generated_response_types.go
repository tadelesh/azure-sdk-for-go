//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armkeyvault

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"time"
)

// KeysClientCreateIfNotExistResponse contains the response from method KeysClient.CreateIfNotExist.
type KeysClientCreateIfNotExistResponse struct {
	Key
}

// KeysClientGetResponse contains the response from method KeysClient.Get.
type KeysClientGetResponse struct {
	Key
}

// KeysClientGetVersionResponse contains the response from method KeysClient.GetVersion.
type KeysClientGetVersionResponse struct {
	Key
}

// KeysClientListResponse contains the response from method KeysClient.List.
type KeysClientListResponse struct {
	KeyListResult
}

// KeysClientListVersionsResponse contains the response from method KeysClient.ListVersions.
type KeysClientListVersionsResponse struct {
	KeyListResult
}

// MHSMPrivateEndpointConnectionsClientDeletePollerResponse contains the response from method MHSMPrivateEndpointConnectionsClient.Delete.
type MHSMPrivateEndpointConnectionsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *MHSMPrivateEndpointConnectionsClientDeletePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l MHSMPrivateEndpointConnectionsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (MHSMPrivateEndpointConnectionsClientDeleteResponse, error) {
	respType := MHSMPrivateEndpointConnectionsClientDeleteResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.MHSMPrivateEndpointConnection)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a MHSMPrivateEndpointConnectionsClientDeletePollerResponse from the provided client and resume token.
func (l *MHSMPrivateEndpointConnectionsClientDeletePollerResponse) Resume(ctx context.Context, client *MHSMPrivateEndpointConnectionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("MHSMPrivateEndpointConnectionsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &MHSMPrivateEndpointConnectionsClientDeletePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// MHSMPrivateEndpointConnectionsClientDeleteResponse contains the response from method MHSMPrivateEndpointConnectionsClient.Delete.
type MHSMPrivateEndpointConnectionsClientDeleteResponse struct {
	MHSMPrivateEndpointConnection
}

// MHSMPrivateEndpointConnectionsClientGetResponse contains the response from method MHSMPrivateEndpointConnectionsClient.Get.
type MHSMPrivateEndpointConnectionsClientGetResponse struct {
	MHSMPrivateEndpointConnection
}

// MHSMPrivateEndpointConnectionsClientListByResourceResponse contains the response from method MHSMPrivateEndpointConnectionsClient.ListByResource.
type MHSMPrivateEndpointConnectionsClientListByResourceResponse struct {
	MHSMPrivateEndpointConnectionsListResult
}

// MHSMPrivateEndpointConnectionsClientPutResponse contains the response from method MHSMPrivateEndpointConnectionsClient.Put.
type MHSMPrivateEndpointConnectionsClientPutResponse struct {
	MHSMPrivateEndpointConnection
	// AzureAsyncOperation contains the information returned from the Azure-AsyncOperation header response.
	AzureAsyncOperation *string

	// RetryAfter contains the information returned from the Retry-After header response.
	RetryAfter *int32
}

// MHSMPrivateLinkResourcesClientListByMHSMResourceResponse contains the response from method MHSMPrivateLinkResourcesClient.ListByMHSMResource.
type MHSMPrivateLinkResourcesClientListByMHSMResourceResponse struct {
	MHSMPrivateLinkResourceListResult
}

// ManagedHsmsClientCreateOrUpdatePollerResponse contains the response from method ManagedHsmsClient.CreateOrUpdate.
type ManagedHsmsClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ManagedHsmsClientCreateOrUpdatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ManagedHsmsClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ManagedHsmsClientCreateOrUpdateResponse, error) {
	respType := ManagedHsmsClientCreateOrUpdateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ManagedHsm)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a ManagedHsmsClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *ManagedHsmsClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *ManagedHsmsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ManagedHsmsClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ManagedHsmsClientCreateOrUpdatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// ManagedHsmsClientCreateOrUpdateResponse contains the response from method ManagedHsmsClient.CreateOrUpdate.
type ManagedHsmsClientCreateOrUpdateResponse struct {
	ManagedHsm
}

// ManagedHsmsClientDeletePollerResponse contains the response from method ManagedHsmsClient.Delete.
type ManagedHsmsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ManagedHsmsClientDeletePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ManagedHsmsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ManagedHsmsClientDeleteResponse, error) {
	respType := ManagedHsmsClientDeleteResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a ManagedHsmsClientDeletePollerResponse from the provided client and resume token.
func (l *ManagedHsmsClientDeletePollerResponse) Resume(ctx context.Context, client *ManagedHsmsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ManagedHsmsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ManagedHsmsClientDeletePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// ManagedHsmsClientDeleteResponse contains the response from method ManagedHsmsClient.Delete.
type ManagedHsmsClientDeleteResponse struct {
	// placeholder for future response values
}

// ManagedHsmsClientGetDeletedResponse contains the response from method ManagedHsmsClient.GetDeleted.
type ManagedHsmsClientGetDeletedResponse struct {
	DeletedManagedHsm
}

// ManagedHsmsClientGetResponse contains the response from method ManagedHsmsClient.Get.
type ManagedHsmsClientGetResponse struct {
	ManagedHsm
}

// ManagedHsmsClientListByResourceGroupResponse contains the response from method ManagedHsmsClient.ListByResourceGroup.
type ManagedHsmsClientListByResourceGroupResponse struct {
	ManagedHsmListResult
}

// ManagedHsmsClientListBySubscriptionResponse contains the response from method ManagedHsmsClient.ListBySubscription.
type ManagedHsmsClientListBySubscriptionResponse struct {
	ManagedHsmListResult
}

// ManagedHsmsClientListDeletedResponse contains the response from method ManagedHsmsClient.ListDeleted.
type ManagedHsmsClientListDeletedResponse struct {
	DeletedManagedHsmListResult
}

// ManagedHsmsClientPurgeDeletedPollerResponse contains the response from method ManagedHsmsClient.PurgeDeleted.
type ManagedHsmsClientPurgeDeletedPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ManagedHsmsClientPurgeDeletedPoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ManagedHsmsClientPurgeDeletedPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ManagedHsmsClientPurgeDeletedResponse, error) {
	respType := ManagedHsmsClientPurgeDeletedResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a ManagedHsmsClientPurgeDeletedPollerResponse from the provided client and resume token.
func (l *ManagedHsmsClientPurgeDeletedPollerResponse) Resume(ctx context.Context, client *ManagedHsmsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ManagedHsmsClient.PurgeDeleted", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ManagedHsmsClientPurgeDeletedPoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// ManagedHsmsClientPurgeDeletedResponse contains the response from method ManagedHsmsClient.PurgeDeleted.
type ManagedHsmsClientPurgeDeletedResponse struct {
	// placeholder for future response values
}

// ManagedHsmsClientUpdatePollerResponse contains the response from method ManagedHsmsClient.Update.
type ManagedHsmsClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ManagedHsmsClientUpdatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ManagedHsmsClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ManagedHsmsClientUpdateResponse, error) {
	respType := ManagedHsmsClientUpdateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ManagedHsm)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a ManagedHsmsClientUpdatePollerResponse from the provided client and resume token.
func (l *ManagedHsmsClientUpdatePollerResponse) Resume(ctx context.Context, client *ManagedHsmsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ManagedHsmsClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ManagedHsmsClientUpdatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// ManagedHsmsClientUpdateResponse contains the response from method ManagedHsmsClient.Update.
type ManagedHsmsClientUpdateResponse struct {
	ManagedHsm
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationListResult
}

// PrivateEndpointConnectionsClientDeletePollerResponse contains the response from method PrivateEndpointConnectionsClient.Delete.
type PrivateEndpointConnectionsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsClientDeletePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsClientDeleteResponse, error) {
	respType := PrivateEndpointConnectionsClientDeleteResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsClientDeletePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsClientDeletePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsClientDeletePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// PrivateEndpointConnectionsClientDeleteResponse contains the response from method PrivateEndpointConnectionsClient.Delete.
type PrivateEndpointConnectionsClientDeleteResponse struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsClientGetResponse contains the response from method PrivateEndpointConnectionsClient.Get.
type PrivateEndpointConnectionsClientGetResponse struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsClientListByResourceResponse contains the response from method PrivateEndpointConnectionsClient.ListByResource.
type PrivateEndpointConnectionsClientListByResourceResponse struct {
	PrivateEndpointConnectionListResult
}

// PrivateEndpointConnectionsClientPutResponse contains the response from method PrivateEndpointConnectionsClient.Put.
type PrivateEndpointConnectionsClientPutResponse struct {
	PrivateEndpointConnection
	// AzureAsyncOperation contains the information returned from the Azure-AsyncOperation header response.
	AzureAsyncOperation *string

	// RetryAfter contains the information returned from the Retry-After header response.
	RetryAfter *int32
}

// PrivateLinkResourcesClientListByVaultResponse contains the response from method PrivateLinkResourcesClient.ListByVault.
type PrivateLinkResourcesClientListByVaultResponse struct {
	PrivateLinkResourceListResult
}

// SecretsClientCreateOrUpdateResponse contains the response from method SecretsClient.CreateOrUpdate.
type SecretsClientCreateOrUpdateResponse struct {
	Secret
}

// SecretsClientGetResponse contains the response from method SecretsClient.Get.
type SecretsClientGetResponse struct {
	Secret
}

// SecretsClientListResponse contains the response from method SecretsClient.List.
type SecretsClientListResponse struct {
	SecretListResult
}

// SecretsClientUpdateResponse contains the response from method SecretsClient.Update.
type SecretsClientUpdateResponse struct {
	Secret
}

// VaultsClientCheckNameAvailabilityResponse contains the response from method VaultsClient.CheckNameAvailability.
type VaultsClientCheckNameAvailabilityResponse struct {
	CheckNameAvailabilityResult
}

// VaultsClientCreateOrUpdatePollerResponse contains the response from method VaultsClient.CreateOrUpdate.
type VaultsClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VaultsClientCreateOrUpdatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l VaultsClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VaultsClientCreateOrUpdateResponse, error) {
	respType := VaultsClientCreateOrUpdateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Vault)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a VaultsClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *VaultsClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *VaultsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("VaultsClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &VaultsClientCreateOrUpdatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// VaultsClientCreateOrUpdateResponse contains the response from method VaultsClient.CreateOrUpdate.
type VaultsClientCreateOrUpdateResponse struct {
	Vault
}

// VaultsClientDeleteResponse contains the response from method VaultsClient.Delete.
type VaultsClientDeleteResponse struct {
	// placeholder for future response values
}

// VaultsClientGetDeletedResponse contains the response from method VaultsClient.GetDeleted.
type VaultsClientGetDeletedResponse struct {
	DeletedVault
}

// VaultsClientGetResponse contains the response from method VaultsClient.Get.
type VaultsClientGetResponse struct {
	Vault
}

// VaultsClientListByResourceGroupResponse contains the response from method VaultsClient.ListByResourceGroup.
type VaultsClientListByResourceGroupResponse struct {
	VaultListResult
}

// VaultsClientListBySubscriptionResponse contains the response from method VaultsClient.ListBySubscription.
type VaultsClientListBySubscriptionResponse struct {
	VaultListResult
}

// VaultsClientListDeletedResponse contains the response from method VaultsClient.ListDeleted.
type VaultsClientListDeletedResponse struct {
	DeletedVaultListResult
}

// VaultsClientListResponse contains the response from method VaultsClient.List.
type VaultsClientListResponse struct {
	ResourceListResult
}

// VaultsClientPurgeDeletedPollerResponse contains the response from method VaultsClient.PurgeDeleted.
type VaultsClientPurgeDeletedPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VaultsClientPurgeDeletedPoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l VaultsClientPurgeDeletedPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VaultsClientPurgeDeletedResponse, error) {
	respType := VaultsClientPurgeDeletedResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a VaultsClientPurgeDeletedPollerResponse from the provided client and resume token.
func (l *VaultsClientPurgeDeletedPollerResponse) Resume(ctx context.Context, client *VaultsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("VaultsClient.PurgeDeleted", token, client.pl)
	if err != nil {
		return err
	}
	poller := &VaultsClientPurgeDeletedPoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// VaultsClientPurgeDeletedResponse contains the response from method VaultsClient.PurgeDeleted.
type VaultsClientPurgeDeletedResponse struct {
	// placeholder for future response values
}

// VaultsClientUpdateAccessPolicyResponse contains the response from method VaultsClient.UpdateAccessPolicy.
type VaultsClientUpdateAccessPolicyResponse struct {
	VaultAccessPolicyParameters
}

// VaultsClientUpdateResponse contains the response from method VaultsClient.Update.
type VaultsClientUpdateResponse struct {
	Vault
}
