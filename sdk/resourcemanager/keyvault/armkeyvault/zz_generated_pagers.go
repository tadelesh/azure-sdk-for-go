//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armkeyvault

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// KeysClientListPager provides operations for iterating over paged responses.
type KeysClientListPager struct {
	client    *KeysClient
	current   KeysClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, KeysClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *KeysClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.KeyListResult.NextLink == nil || len(*p.current.KeyListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *KeysClientListPager) NextPage(ctx context.Context) (KeysClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return KeysClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return KeysClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return KeysClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return KeysClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return KeysClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// KeysClientListVersionsPager provides operations for iterating over paged responses.
type KeysClientListVersionsPager struct {
	client    *KeysClient
	current   KeysClientListVersionsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, KeysClientListVersionsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *KeysClientListVersionsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.KeyListResult.NextLink == nil || len(*p.current.KeyListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *KeysClientListVersionsPager) NextPage(ctx context.Context) (KeysClientListVersionsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return KeysClientListVersionsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return KeysClientListVersionsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return KeysClientListVersionsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return KeysClientListVersionsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listVersionsHandleResponse(resp)
	if err != nil {
		return KeysClientListVersionsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// MHSMPrivateEndpointConnectionsClientListByResourcePager provides operations for iterating over paged responses.
type MHSMPrivateEndpointConnectionsClientListByResourcePager struct {
	client    *MHSMPrivateEndpointConnectionsClient
	current   MHSMPrivateEndpointConnectionsClientListByResourceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MHSMPrivateEndpointConnectionsClientListByResourceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MHSMPrivateEndpointConnectionsClientListByResourcePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MHSMPrivateEndpointConnectionsListResult.NextLink == nil || len(*p.current.MHSMPrivateEndpointConnectionsListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MHSMPrivateEndpointConnectionsClientListByResourcePager) NextPage(ctx context.Context) (MHSMPrivateEndpointConnectionsClientListByResourceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MHSMPrivateEndpointConnectionsClientListByResourceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MHSMPrivateEndpointConnectionsClientListByResourceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MHSMPrivateEndpointConnectionsClientListByResourceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MHSMPrivateEndpointConnectionsClientListByResourceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceHandleResponse(resp)
	if err != nil {
		return MHSMPrivateEndpointConnectionsClientListByResourceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ManagedHsmsClientListByResourceGroupPager provides operations for iterating over paged responses.
type ManagedHsmsClientListByResourceGroupPager struct {
	client    *ManagedHsmsClient
	current   ManagedHsmsClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ManagedHsmsClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ManagedHsmsClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedHsmListResult.NextLink == nil || len(*p.current.ManagedHsmListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ManagedHsmsClientListByResourceGroupPager) NextPage(ctx context.Context) (ManagedHsmsClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ManagedHsmsClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ManagedHsmsClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ManagedHsmsClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ManagedHsmsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return ManagedHsmsClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ManagedHsmsClientListBySubscriptionPager provides operations for iterating over paged responses.
type ManagedHsmsClientListBySubscriptionPager struct {
	client    *ManagedHsmsClient
	current   ManagedHsmsClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ManagedHsmsClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ManagedHsmsClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedHsmListResult.NextLink == nil || len(*p.current.ManagedHsmListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ManagedHsmsClientListBySubscriptionPager) NextPage(ctx context.Context) (ManagedHsmsClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ManagedHsmsClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ManagedHsmsClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ManagedHsmsClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ManagedHsmsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return ManagedHsmsClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ManagedHsmsClientListDeletedPager provides operations for iterating over paged responses.
type ManagedHsmsClientListDeletedPager struct {
	client    *ManagedHsmsClient
	current   ManagedHsmsClientListDeletedResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ManagedHsmsClientListDeletedResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ManagedHsmsClientListDeletedPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeletedManagedHsmListResult.NextLink == nil || len(*p.current.DeletedManagedHsmListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ManagedHsmsClientListDeletedPager) NextPage(ctx context.Context) (ManagedHsmsClientListDeletedResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ManagedHsmsClientListDeletedResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ManagedHsmsClientListDeletedResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ManagedHsmsClientListDeletedResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ManagedHsmsClientListDeletedResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listDeletedHandleResponse(resp)
	if err != nil {
		return ManagedHsmsClientListDeletedResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateEndpointConnectionsClientListByResourcePager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsClientListByResourcePager struct {
	client    *PrivateEndpointConnectionsClient
	current   PrivateEndpointConnectionsClientListByResourceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsClientListByResourceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateEndpointConnectionsClientListByResourcePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateEndpointConnectionsClientListByResourcePager) NextPage(ctx context.Context) (PrivateEndpointConnectionsClientListByResourceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateEndpointConnectionsClientListByResourceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateEndpointConnectionsClientListByResourceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateEndpointConnectionsClientListByResourceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateEndpointConnectionsClientListByResourceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceHandleResponse(resp)
	if err != nil {
		return PrivateEndpointConnectionsClientListByResourceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SecretsClientListPager provides operations for iterating over paged responses.
type SecretsClientListPager struct {
	client    *SecretsClient
	current   SecretsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SecretsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SecretsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecretListResult.NextLink == nil || len(*p.current.SecretListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SecretsClientListPager) NextPage(ctx context.Context) (SecretsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SecretsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SecretsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SecretsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SecretsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return SecretsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// VaultsClientListByResourceGroupPager provides operations for iterating over paged responses.
type VaultsClientListByResourceGroupPager struct {
	client    *VaultsClient
	current   VaultsClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, VaultsClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *VaultsClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VaultListResult.NextLink == nil || len(*p.current.VaultListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *VaultsClientListByResourceGroupPager) NextPage(ctx context.Context) (VaultsClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return VaultsClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return VaultsClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return VaultsClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return VaultsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return VaultsClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// VaultsClientListBySubscriptionPager provides operations for iterating over paged responses.
type VaultsClientListBySubscriptionPager struct {
	client    *VaultsClient
	current   VaultsClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, VaultsClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *VaultsClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VaultListResult.NextLink == nil || len(*p.current.VaultListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *VaultsClientListBySubscriptionPager) NextPage(ctx context.Context) (VaultsClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return VaultsClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return VaultsClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return VaultsClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return VaultsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return VaultsClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// VaultsClientListDeletedPager provides operations for iterating over paged responses.
type VaultsClientListDeletedPager struct {
	client    *VaultsClient
	current   VaultsClientListDeletedResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, VaultsClientListDeletedResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *VaultsClientListDeletedPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeletedVaultListResult.NextLink == nil || len(*p.current.DeletedVaultListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *VaultsClientListDeletedPager) NextPage(ctx context.Context) (VaultsClientListDeletedResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return VaultsClientListDeletedResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return VaultsClientListDeletedResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return VaultsClientListDeletedResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return VaultsClientListDeletedResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listDeletedHandleResponse(resp)
	if err != nil {
		return VaultsClientListDeletedResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// VaultsClientListPager provides operations for iterating over paged responses.
type VaultsClientListPager struct {
	client    *VaultsClient
	current   VaultsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, VaultsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *VaultsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceListResult.NextLink == nil || len(*p.current.ResourceListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *VaultsClientListPager) NextPage(ctx context.Context) (VaultsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return VaultsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return VaultsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return VaultsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return VaultsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return VaultsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
