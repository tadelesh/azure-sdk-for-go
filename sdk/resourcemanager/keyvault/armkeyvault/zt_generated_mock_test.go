//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armkeyvault_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/keyvault/armkeyvault"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestKeys_CreateIfNotExist(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/createKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewKeysClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateIfNotExist(ctx,
		"sample-group",
		"sample-vault-name",
		"sample-key-name",
		armkeyvault.KeyCreateParameters{
			Properties: &armkeyvault.KeyProperties{
				Kty: to.Ptr(armkeyvault.JSONWebKeyTypeRSA),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/createKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.Key{
			Name:     to.Ptr("sample-key-name"),
			Type:     to.Ptr("Microsoft.KeyVault/vaults/keys"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault-name/keys/sample-key-name"),
			Location: to.Ptr("westus"),
			Properties: &armkeyvault.KeyProperties{
				Attributes: &armkeyvault.KeyAttributes{
					Created:       to.Ptr[int64](1598533051),
					Enabled:       to.Ptr(true),
					RecoveryLevel: to.Ptr(armkeyvault.DeletionRecoveryLevelPurgeable),
					Updated:       to.Ptr[int64](1598533051),
				},
				KeyOps: []*armkeyvault.JSONWebKeyOperation{
					to.Ptr(armkeyvault.JSONWebKeyOperationEncrypt),
					to.Ptr(armkeyvault.JSONWebKeyOperationDecrypt),
					to.Ptr(armkeyvault.JSONWebKeyOperationSign),
					to.Ptr(armkeyvault.JSONWebKeyOperationVerify),
					to.Ptr(armkeyvault.JSONWebKeyOperationWrapKey),
					to.Ptr(armkeyvault.JSONWebKeyOperationUnwrapKey)},
				KeySize:           to.Ptr[int32](2048),
				KeyURI:            to.Ptr("https://sample-vault-name.vault.azure.net:443/keys/sample-key-name"),
				KeyURIWithVersion: to.Ptr("https://sample-vault-name.vault.azure.net:443/keys/sample-key-name/fd618d9519b74f9aae94ade66b876acc"),
				Kty:               to.Ptr(armkeyvault.JSONWebKeyTypeRSA),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Key) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Key)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/createKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKeys_Get(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/getKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewKeysClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"sample-group",
		"sample-vault-name",
		"sample-key-name",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/getKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.Key{
			Name:     to.Ptr("sample-key-name"),
			Type:     to.Ptr("Microsoft.KeyVault/vaults/keys"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault-name/keys/sample-key-name"),
			Location: to.Ptr("westus"),
			Properties: &armkeyvault.KeyProperties{
				Attributes: &armkeyvault.KeyAttributes{
					Created:       to.Ptr[int64](1598533051),
					Enabled:       to.Ptr(true),
					RecoveryLevel: to.Ptr(armkeyvault.DeletionRecoveryLevelPurgeable),
					Updated:       to.Ptr[int64](1598533051),
				},
				KeyOps: []*armkeyvault.JSONWebKeyOperation{
					to.Ptr(armkeyvault.JSONWebKeyOperationEncrypt),
					to.Ptr(armkeyvault.JSONWebKeyOperationDecrypt),
					to.Ptr(armkeyvault.JSONWebKeyOperationSign),
					to.Ptr(armkeyvault.JSONWebKeyOperationVerify),
					to.Ptr(armkeyvault.JSONWebKeyOperationWrapKey),
					to.Ptr(armkeyvault.JSONWebKeyOperationUnwrapKey)},
				KeySize:           to.Ptr[int32](2048),
				KeyURI:            to.Ptr("https://sample-vault-name.vault.azure.net:443/keys/sample-key-name"),
				KeyURIWithVersion: to.Ptr("https://sample-vault-name.vault.azure.net:443/keys/sample-key-name/fd618d9519b74f9aae94ade66b876acc"),
				Kty:               to.Ptr(armkeyvault.JSONWebKeyTypeRSA),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Key) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Key)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/getKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKeys_List(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List keys in the vault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewKeysClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("sample-group",
		"sample-vault-name",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listKeys.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkeyvault.KeyListResult{
			Value: []*armkeyvault.Key{
				{
					Name:     to.Ptr("sample-key-name-1"),
					Type:     to.Ptr("Microsoft.KeyVault/vaults/keys"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault-name/keys/sample-key-name-1"),
					Location: to.Ptr("westus"),
					Properties: &armkeyvault.KeyProperties{
						Attributes: &armkeyvault.KeyAttributes{
							Created:       to.Ptr[int64](1596493796),
							Enabled:       to.Ptr(true),
							RecoveryLevel: to.Ptr(armkeyvault.DeletionRecoveryLevelPurgeable),
							Updated:       to.Ptr[int64](1596493796),
						},
						KeyURI: to.Ptr("https://sample-vault-name.vault.azure.net:443/keys/sample-key-name-1"),
					},
				},
				{
					Name:     to.Ptr("sample-key-name-2"),
					Type:     to.Ptr("Microsoft.KeyVault/vaults/keys"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault-name/keys/sample-key-name-2"),
					Location: to.Ptr("westus"),
					Properties: &armkeyvault.KeyProperties{
						Attributes: &armkeyvault.KeyAttributes{
							Created:       to.Ptr[int64](1596493797),
							Enabled:       to.Ptr(true),
							RecoveryLevel: to.Ptr(armkeyvault.DeletionRecoveryLevelPurgeable),
							Updated:       to.Ptr[int64](1596493797),
						},
						KeyURI: to.Ptr("https://sample-vault-name.vault.azure.net:443/keys/sample-key-name-2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.KeyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.KeyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKeys_GetVersion(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/getKeyVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a key version"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewKeysClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.GetVersion(ctx,
		"sample-group",
		"sample-vault-name",
		"sample-key-name",
		"fd618d9519b74f9aae94ade66b876acc",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/getKeyVersion.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.Key{
			Name:     to.Ptr("fd618d9519b74f9aae94ade66b876acc"),
			Type:     to.Ptr("Microsoft.KeyVault/vaults/keys/versions"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault-name/keys/sample-key-name/versions/fd618d9519b74f9aae94ade66b876acc"),
			Location: to.Ptr("westus"),
			Properties: &armkeyvault.KeyProperties{
				Attributes: &armkeyvault.KeyAttributes{
					Created:       to.Ptr[int64](1598533051),
					Enabled:       to.Ptr(true),
					RecoveryLevel: to.Ptr(armkeyvault.DeletionRecoveryLevelPurgeable),
					Updated:       to.Ptr[int64](1598533051),
				},
				KeyOps: []*armkeyvault.JSONWebKeyOperation{
					to.Ptr(armkeyvault.JSONWebKeyOperationEncrypt),
					to.Ptr(armkeyvault.JSONWebKeyOperationDecrypt),
					to.Ptr(armkeyvault.JSONWebKeyOperationSign),
					to.Ptr(armkeyvault.JSONWebKeyOperationVerify),
					to.Ptr(armkeyvault.JSONWebKeyOperationWrapKey),
					to.Ptr(armkeyvault.JSONWebKeyOperationUnwrapKey)},
				KeySize:           to.Ptr[int32](2048),
				KeyURI:            to.Ptr("https://sample-vault-name.vault.azure.net:443/keys/sample-key-name"),
				KeyURIWithVersion: to.Ptr("https://sample-vault-name.vault.azure.net:443/keys/sample-key-name/fd618d9519b74f9aae94ade66b876acc"),
				Kty:               to.Ptr(armkeyvault.JSONWebKeyTypeRSA),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Key) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Key)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/getKeyVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKeys_ListVersions(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listKeyVersions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List key versions in the vault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewKeysClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListVersions("sample-group",
		"sample-vault-name",
		"sample-key-name",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listKeyVersions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkeyvault.KeyListResult{
			Value: []*armkeyvault.Key{
				{
					Name:     to.Ptr("c2296aa24acf4daf86942bff5aca73dd"),
					Type:     to.Ptr("Microsoft.KeyVault/vaults/keys/versions"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault-name/keys/sample-key-name/versions/c2296aa24acf4daf86942bff5aca73dd"),
					Location: to.Ptr("westus"),
					Properties: &armkeyvault.KeyProperties{
						Attributes: &armkeyvault.KeyAttributes{
							Created:       to.Ptr[int64](1598641074),
							Enabled:       to.Ptr(true),
							RecoveryLevel: to.Ptr(armkeyvault.DeletionRecoveryLevelPurgeable),
							Updated:       to.Ptr[int64](1598641074),
						},
						KeyURI:            to.Ptr("https://sample-vault-name.vault.azure.net:443/keys/sample-key-name"),
						KeyURIWithVersion: to.Ptr("https://sample-vault-name.vault.azure.net:443/keys/sample-key-name/c2296aa24acf4daf86942bff5aca73dd"),
					},
				},
				{
					Name:     to.Ptr("d5a04667b6f44b0ca62825f5eae93da6"),
					Type:     to.Ptr("Microsoft.KeyVault/vaults/keys/versions"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault-name/keys/sample-key-name/versions/d5a04667b6f44b0ca62825f5eae93da6"),
					Location: to.Ptr("westus"),
					Properties: &armkeyvault.KeyProperties{
						Attributes: &armkeyvault.KeyAttributes{
							Created:       to.Ptr[int64](1598641295),
							Enabled:       to.Ptr(true),
							RecoveryLevel: to.Ptr(armkeyvault.DeletionRecoveryLevelPurgeable),
							Updated:       to.Ptr[int64](1598641295),
						},
						KeyURI:            to.Ptr("https://sample-vault-name.vault.azure.net:443/keys/sample-key-name"),
						KeyURIWithVersion: to.Ptr("https://sample-vault-name.vault.azure.net:443/keys/sample-key-name/d5a04667b6f44b0ca62825f5eae93da6"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.KeyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.KeyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listKeyVersions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVaults_CreateOrUpdate(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/createVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a new vault or update an existing vault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewVaultsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sample-resource-group",
		"sample-vault",
		armkeyvault.VaultCreateOrUpdateParameters{
			Location: to.Ptr("westus"),
			Properties: &armkeyvault.VaultProperties{
				AccessPolicies: []*armkeyvault.AccessPolicyEntry{
					{
						ObjectID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						Permissions: &armkeyvault.Permissions{
							Certificates: []*armkeyvault.CertificatePermissions{
								to.Ptr(armkeyvault.CertificatePermissionsGet),
								to.Ptr(armkeyvault.CertificatePermissionsList),
								to.Ptr(armkeyvault.CertificatePermissionsDelete),
								to.Ptr(armkeyvault.CertificatePermissionsCreate),
								to.Ptr(armkeyvault.CertificatePermissionsImport),
								to.Ptr(armkeyvault.CertificatePermissionsUpdate),
								to.Ptr(armkeyvault.CertificatePermissionsManagecontacts),
								to.Ptr(armkeyvault.CertificatePermissionsGetissuers),
								to.Ptr(armkeyvault.CertificatePermissionsListissuers),
								to.Ptr(armkeyvault.CertificatePermissionsSetissuers),
								to.Ptr(armkeyvault.CertificatePermissionsDeleteissuers),
								to.Ptr(armkeyvault.CertificatePermissionsManageissuers),
								to.Ptr(armkeyvault.CertificatePermissionsRecover),
								to.Ptr(armkeyvault.CertificatePermissionsPurge)},
							Keys: []*armkeyvault.KeyPermissions{
								to.Ptr(armkeyvault.KeyPermissionsEncrypt),
								to.Ptr(armkeyvault.KeyPermissionsDecrypt),
								to.Ptr(armkeyvault.KeyPermissionsWrapKey),
								to.Ptr(armkeyvault.KeyPermissionsUnwrapKey),
								to.Ptr(armkeyvault.KeyPermissionsSign),
								to.Ptr(armkeyvault.KeyPermissionsVerify),
								to.Ptr(armkeyvault.KeyPermissionsGet),
								to.Ptr(armkeyvault.KeyPermissionsList),
								to.Ptr(armkeyvault.KeyPermissionsCreate),
								to.Ptr(armkeyvault.KeyPermissionsUpdate),
								to.Ptr(armkeyvault.KeyPermissionsImport),
								to.Ptr(armkeyvault.KeyPermissionsDelete),
								to.Ptr(armkeyvault.KeyPermissionsBackup),
								to.Ptr(armkeyvault.KeyPermissionsRestore),
								to.Ptr(armkeyvault.KeyPermissionsRecover),
								to.Ptr(armkeyvault.KeyPermissionsPurge)},
							Secrets: []*armkeyvault.SecretPermissions{
								to.Ptr(armkeyvault.SecretPermissionsGet),
								to.Ptr(armkeyvault.SecretPermissionsList),
								to.Ptr(armkeyvault.SecretPermissionsSet),
								to.Ptr(armkeyvault.SecretPermissionsDelete),
								to.Ptr(armkeyvault.SecretPermissionsBackup),
								to.Ptr(armkeyvault.SecretPermissionsRestore),
								to.Ptr(armkeyvault.SecretPermissionsRecover),
								to.Ptr(armkeyvault.SecretPermissionsPurge)},
						},
						TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
					}},
				EnabledForDeployment:         to.Ptr(true),
				EnabledForDiskEncryption:     to.Ptr(true),
				EnabledForTemplateDeployment: to.Ptr(true),
				PublicNetworkAccess:          to.Ptr("Enabled"),
				SKU: &armkeyvault.SKU{
					Name:   to.Ptr(armkeyvault.SKUNameStandard),
					Family: to.Ptr(armkeyvault.SKUFamilyA),
				},
				TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
		},
		&armkeyvault.VaultsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/createVault.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/createVault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.Vault{
			Name:     to.Ptr("sample-vault"),
			Type:     to.Ptr("Microsoft.KeyVault/vaults"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-resource-group/providers/Microsoft.KeyVault/vaults/sample-vault"),
			Location: to.Ptr("westus"),
			Properties: &armkeyvault.VaultProperties{
				AccessPolicies: []*armkeyvault.AccessPolicyEntry{
					{
						ObjectID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						Permissions: &armkeyvault.Permissions{
							Certificates: []*armkeyvault.CertificatePermissions{
								to.Ptr(armkeyvault.CertificatePermissionsGet),
								to.Ptr(armkeyvault.CertificatePermissionsList),
								to.Ptr(armkeyvault.CertificatePermissionsDelete),
								to.Ptr(armkeyvault.CertificatePermissionsCreate),
								to.Ptr(armkeyvault.CertificatePermissionsImport),
								to.Ptr(armkeyvault.CertificatePermissionsUpdate),
								to.Ptr(armkeyvault.CertificatePermissionsManagecontacts),
								to.Ptr(armkeyvault.CertificatePermissionsGetissuers),
								to.Ptr(armkeyvault.CertificatePermissionsListissuers),
								to.Ptr(armkeyvault.CertificatePermissionsSetissuers),
								to.Ptr(armkeyvault.CertificatePermissionsDeleteissuers),
								to.Ptr(armkeyvault.CertificatePermissionsManageissuers),
								to.Ptr(armkeyvault.CertificatePermissionsRecover),
								to.Ptr(armkeyvault.CertificatePermissionsPurge)},
							Keys: []*armkeyvault.KeyPermissions{
								to.Ptr(armkeyvault.KeyPermissionsEncrypt),
								to.Ptr(armkeyvault.KeyPermissionsDecrypt),
								to.Ptr(armkeyvault.KeyPermissionsWrapKey),
								to.Ptr(armkeyvault.KeyPermissionsUnwrapKey),
								to.Ptr(armkeyvault.KeyPermissionsSign),
								to.Ptr(armkeyvault.KeyPermissionsVerify),
								to.Ptr(armkeyvault.KeyPermissionsGet),
								to.Ptr(armkeyvault.KeyPermissionsList),
								to.Ptr(armkeyvault.KeyPermissionsCreate),
								to.Ptr(armkeyvault.KeyPermissionsUpdate),
								to.Ptr(armkeyvault.KeyPermissionsImport),
								to.Ptr(armkeyvault.KeyPermissionsDelete),
								to.Ptr(armkeyvault.KeyPermissionsBackup),
								to.Ptr(armkeyvault.KeyPermissionsRestore),
								to.Ptr(armkeyvault.KeyPermissionsRecover),
								to.Ptr(armkeyvault.KeyPermissionsPurge)},
							Secrets: []*armkeyvault.SecretPermissions{
								to.Ptr(armkeyvault.SecretPermissionsGet),
								to.Ptr(armkeyvault.SecretPermissionsList),
								to.Ptr(armkeyvault.SecretPermissionsSet),
								to.Ptr(armkeyvault.SecretPermissionsDelete),
								to.Ptr(armkeyvault.SecretPermissionsBackup),
								to.Ptr(armkeyvault.SecretPermissionsRestore),
								to.Ptr(armkeyvault.SecretPermissionsRecover),
								to.Ptr(armkeyvault.SecretPermissionsPurge)},
						},
						TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
					}},
				EnabledForDeployment:         to.Ptr(true),
				EnabledForDiskEncryption:     to.Ptr(true),
				EnabledForTemplateDeployment: to.Ptr(true),
				HsmPoolResourceID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
				NetworkACLs: &armkeyvault.NetworkRuleSet{
					Bypass:        to.Ptr(armkeyvault.NetworkRuleBypassOptionsAzureServices),
					DefaultAction: to.Ptr(armkeyvault.NetworkRuleActionDeny),
					IPRules: []*armkeyvault.IPRule{
						{
							Value: to.Ptr(""),
						}},
					VirtualNetworkRules: []*armkeyvault.VirtualNetworkRule{
						{
							ID:                               to.Ptr(""),
							IgnoreMissingVnetServiceEndpoint: to.Ptr(false),
						}},
				},
				PrivateEndpointConnections: []*armkeyvault.PrivateEndpointConnectionItem{
					{
						Etag: to.Ptr(""),
						ID:   to.Ptr(""),
						Properties: &armkeyvault.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armkeyvault.PrivateEndpoint{
								ID: to.Ptr(""),
							},
							PrivateLinkServiceConnectionState: &armkeyvault.PrivateLinkServiceConnectionState{
								ActionsRequired: to.Ptr(armkeyvault.ActionsRequiredNone),
								Status:          to.Ptr(armkeyvault.PrivateEndpointServiceConnectionStatusApproved),
							},
							ProvisioningState: to.Ptr(armkeyvault.PrivateEndpointConnectionProvisioningStateSucceeded),
						},
					}},
				ProvisioningState:   to.Ptr(armkeyvault.VaultProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr("Enabled"),
				SKU: &armkeyvault.SKU{
					Name:   to.Ptr(armkeyvault.SKUNameStandard),
					Family: to.Ptr(armkeyvault.SKUFamilyA),
				},
				TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				VaultURI: to.Ptr("https://sample-vault.vault.azure.net"),
			},
			SystemData: &armkeyvault.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
				CreatedBy:          to.Ptr("keyVaultUser1"),
				CreatedByType:      to.Ptr(armkeyvault.IdentityTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
				LastModifiedBy:     to.Ptr("keyVaultUser2"),
				LastModifiedByType: to.Ptr(armkeyvault.IdentityTypeUser),
			},
			Tags: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.Vault) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Vault)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/createVault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/createVaultWithNetworkAcls.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a vault with network acls"},
	})
	client = armkeyvault.NewVaultsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"sample-resource-group",
		"sample-vault",
		armkeyvault.VaultCreateOrUpdateParameters{
			Location: to.Ptr("westus"),
			Properties: &armkeyvault.VaultProperties{
				EnabledForDeployment:         to.Ptr(true),
				EnabledForDiskEncryption:     to.Ptr(true),
				EnabledForTemplateDeployment: to.Ptr(true),
				NetworkACLs: &armkeyvault.NetworkRuleSet{
					Bypass:        to.Ptr(armkeyvault.NetworkRuleBypassOptionsAzureServices),
					DefaultAction: to.Ptr(armkeyvault.NetworkRuleActionDeny),
					IPRules: []*armkeyvault.IPRule{
						{
							Value: to.Ptr("124.56.78.91"),
						},
						{
							Value: to.Ptr("'10.91.4.0/24'"),
						}},
					VirtualNetworkRules: []*armkeyvault.VirtualNetworkRule{
						{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1"),
						}},
				},
				SKU: &armkeyvault.SKU{
					Name:   to.Ptr(armkeyvault.SKUNameStandard),
					Family: to.Ptr(armkeyvault.SKUFamilyA),
				},
				TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
		},
		&armkeyvault.VaultsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/createVaultWithNetworkAcls.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/createVaultWithNetworkAcls.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.Vault{
			Name:     to.Ptr("sample-vault"),
			Type:     to.Ptr("Microsoft.KeyVault/vaults"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-resource-group/providers/Microsoft.KeyVault/vaults/sample-vault"),
			Location: to.Ptr("westus"),
			Properties: &armkeyvault.VaultProperties{
				EnabledForDeployment:         to.Ptr(true),
				EnabledForDiskEncryption:     to.Ptr(true),
				EnabledForTemplateDeployment: to.Ptr(true),
				HsmPoolResourceID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
				NetworkACLs: &armkeyvault.NetworkRuleSet{
					Bypass:        to.Ptr(armkeyvault.NetworkRuleBypassOptionsAzureServices),
					DefaultAction: to.Ptr(armkeyvault.NetworkRuleActionDeny),
					IPRules: []*armkeyvault.IPRule{
						{
							Value: to.Ptr("124.56.78.91/32"),
						},
						{
							Value: to.Ptr("'10.91.4.0/24'"),
						}},
					VirtualNetworkRules: []*armkeyvault.VirtualNetworkRule{
						{
							ID: to.Ptr("/subscriptions/subid/resourcegroups/rg1/providers/microsoft.network/virtualnetworks/test-vnet/subnets/subnet1"),
						}},
				},
				SKU: &armkeyvault.SKU{
					Name:   to.Ptr(armkeyvault.SKUNameStandard),
					Family: to.Ptr(armkeyvault.SKUFamilyA),
				},
				TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				VaultURI: to.Ptr("https://sample-vault.vault.azure.net"),
			},
			SystemData: &armkeyvault.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
				CreatedBy:          to.Ptr("keyVaultUser1"),
				CreatedByType:      to.Ptr(armkeyvault.IdentityTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
				LastModifiedBy:     to.Ptr("keyVaultUser2"),
				LastModifiedByType: to.Ptr(armkeyvault.IdentityTypeUser),
			},
			Tags: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.Vault) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Vault)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/createVaultWithNetworkAcls.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVaults_Update(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/updateVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update an existing vault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewVaultsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"sample-resource-group",
		"sample-vault",
		armkeyvault.VaultPatchParameters{
			Properties: &armkeyvault.VaultPatchProperties{
				AccessPolicies: []*armkeyvault.AccessPolicyEntry{
					{
						ObjectID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						Permissions: &armkeyvault.Permissions{
							Certificates: []*armkeyvault.CertificatePermissions{
								to.Ptr(armkeyvault.CertificatePermissionsGet),
								to.Ptr(armkeyvault.CertificatePermissionsList),
								to.Ptr(armkeyvault.CertificatePermissionsDelete),
								to.Ptr(armkeyvault.CertificatePermissionsCreate),
								to.Ptr(armkeyvault.CertificatePermissionsImport),
								to.Ptr(armkeyvault.CertificatePermissionsUpdate),
								to.Ptr(armkeyvault.CertificatePermissionsManagecontacts),
								to.Ptr(armkeyvault.CertificatePermissionsGetissuers),
								to.Ptr(armkeyvault.CertificatePermissionsListissuers),
								to.Ptr(armkeyvault.CertificatePermissionsSetissuers),
								to.Ptr(armkeyvault.CertificatePermissionsDeleteissuers),
								to.Ptr(armkeyvault.CertificatePermissionsManageissuers),
								to.Ptr(armkeyvault.CertificatePermissionsRecover),
								to.Ptr(armkeyvault.CertificatePermissionsPurge)},
							Keys: []*armkeyvault.KeyPermissions{
								to.Ptr(armkeyvault.KeyPermissionsEncrypt),
								to.Ptr(armkeyvault.KeyPermissionsDecrypt),
								to.Ptr(armkeyvault.KeyPermissionsWrapKey),
								to.Ptr(armkeyvault.KeyPermissionsUnwrapKey),
								to.Ptr(armkeyvault.KeyPermissionsSign),
								to.Ptr(armkeyvault.KeyPermissionsVerify),
								to.Ptr(armkeyvault.KeyPermissionsGet),
								to.Ptr(armkeyvault.KeyPermissionsList),
								to.Ptr(armkeyvault.KeyPermissionsCreate),
								to.Ptr(armkeyvault.KeyPermissionsUpdate),
								to.Ptr(armkeyvault.KeyPermissionsImport),
								to.Ptr(armkeyvault.KeyPermissionsDelete),
								to.Ptr(armkeyvault.KeyPermissionsBackup),
								to.Ptr(armkeyvault.KeyPermissionsRestore),
								to.Ptr(armkeyvault.KeyPermissionsRecover),
								to.Ptr(armkeyvault.KeyPermissionsPurge)},
							Secrets: []*armkeyvault.SecretPermissions{
								to.Ptr(armkeyvault.SecretPermissionsGet),
								to.Ptr(armkeyvault.SecretPermissionsList),
								to.Ptr(armkeyvault.SecretPermissionsSet),
								to.Ptr(armkeyvault.SecretPermissionsDelete),
								to.Ptr(armkeyvault.SecretPermissionsBackup),
								to.Ptr(armkeyvault.SecretPermissionsRestore),
								to.Ptr(armkeyvault.SecretPermissionsRecover),
								to.Ptr(armkeyvault.SecretPermissionsPurge)},
						},
						TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
					}},
				EnabledForDeployment:         to.Ptr(true),
				EnabledForDiskEncryption:     to.Ptr(true),
				EnabledForTemplateDeployment: to.Ptr(true),
				PublicNetworkAccess:          to.Ptr("Enabled"),
				SKU: &armkeyvault.SKU{
					Name:   to.Ptr(armkeyvault.SKUNameStandard),
					Family: to.Ptr(armkeyvault.SKUFamilyA),
				},
				TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/updateVault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.Vault{
			Name:     to.Ptr("sample-vault"),
			Type:     to.Ptr("Microsoft.KeyVault/vaults"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-resource-group/providers/Microsoft.KeyVault/vaults/sample-vault"),
			Location: to.Ptr("westus"),
			Properties: &armkeyvault.VaultProperties{
				AccessPolicies: []*armkeyvault.AccessPolicyEntry{
					{
						ObjectID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						Permissions: &armkeyvault.Permissions{
							Certificates: []*armkeyvault.CertificatePermissions{
								to.Ptr(armkeyvault.CertificatePermissionsGet),
								to.Ptr(armkeyvault.CertificatePermissionsList),
								to.Ptr(armkeyvault.CertificatePermissionsDelete),
								to.Ptr(armkeyvault.CertificatePermissionsCreate),
								to.Ptr(armkeyvault.CertificatePermissionsImport),
								to.Ptr(armkeyvault.CertificatePermissionsUpdate),
								to.Ptr(armkeyvault.CertificatePermissionsManagecontacts),
								to.Ptr(armkeyvault.CertificatePermissionsGetissuers),
								to.Ptr(armkeyvault.CertificatePermissionsListissuers),
								to.Ptr(armkeyvault.CertificatePermissionsSetissuers),
								to.Ptr(armkeyvault.CertificatePermissionsDeleteissuers),
								to.Ptr(armkeyvault.CertificatePermissionsManageissuers),
								to.Ptr(armkeyvault.CertificatePermissionsRecover),
								to.Ptr(armkeyvault.CertificatePermissionsPurge)},
							Keys: []*armkeyvault.KeyPermissions{
								to.Ptr(armkeyvault.KeyPermissionsEncrypt),
								to.Ptr(armkeyvault.KeyPermissionsDecrypt),
								to.Ptr(armkeyvault.KeyPermissionsWrapKey),
								to.Ptr(armkeyvault.KeyPermissionsUnwrapKey),
								to.Ptr(armkeyvault.KeyPermissionsSign),
								to.Ptr(armkeyvault.KeyPermissionsVerify),
								to.Ptr(armkeyvault.KeyPermissionsGet),
								to.Ptr(armkeyvault.KeyPermissionsList),
								to.Ptr(armkeyvault.KeyPermissionsCreate),
								to.Ptr(armkeyvault.KeyPermissionsUpdate),
								to.Ptr(armkeyvault.KeyPermissionsImport),
								to.Ptr(armkeyvault.KeyPermissionsDelete),
								to.Ptr(armkeyvault.KeyPermissionsBackup),
								to.Ptr(armkeyvault.KeyPermissionsRestore),
								to.Ptr(armkeyvault.KeyPermissionsRecover),
								to.Ptr(armkeyvault.KeyPermissionsPurge)},
							Secrets: []*armkeyvault.SecretPermissions{
								to.Ptr(armkeyvault.SecretPermissionsGet),
								to.Ptr(armkeyvault.SecretPermissionsList),
								to.Ptr(armkeyvault.SecretPermissionsSet),
								to.Ptr(armkeyvault.SecretPermissionsDelete),
								to.Ptr(armkeyvault.SecretPermissionsBackup),
								to.Ptr(armkeyvault.SecretPermissionsRestore),
								to.Ptr(armkeyvault.SecretPermissionsRecover),
								to.Ptr(armkeyvault.SecretPermissionsPurge)},
						},
						TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
					}},
				EnabledForDeployment:         to.Ptr(true),
				EnabledForDiskEncryption:     to.Ptr(true),
				EnabledForTemplateDeployment: to.Ptr(true),
				HsmPoolResourceID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
				NetworkACLs: &armkeyvault.NetworkRuleSet{
					Bypass:        to.Ptr(armkeyvault.NetworkRuleBypassOptionsAzureServices),
					DefaultAction: to.Ptr(armkeyvault.NetworkRuleActionDeny),
					IPRules: []*armkeyvault.IPRule{
						{
							Value: to.Ptr(""),
						}},
					VirtualNetworkRules: []*armkeyvault.VirtualNetworkRule{
						{
							ID:                               to.Ptr(""),
							IgnoreMissingVnetServiceEndpoint: to.Ptr(false),
						}},
				},
				PrivateEndpointConnections: []*armkeyvault.PrivateEndpointConnectionItem{
					{
						ID: to.Ptr(""),
						Properties: &armkeyvault.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armkeyvault.PrivateEndpoint{
								ID: to.Ptr(""),
							},
							PrivateLinkServiceConnectionState: &armkeyvault.PrivateLinkServiceConnectionState{
								ActionsRequired: to.Ptr(armkeyvault.ActionsRequiredNone),
								Status:          to.Ptr(armkeyvault.PrivateEndpointServiceConnectionStatusApproved),
							},
							ProvisioningState: to.Ptr(armkeyvault.PrivateEndpointConnectionProvisioningStateSucceeded),
						},
					}},
				ProvisioningState:   to.Ptr(armkeyvault.VaultProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr("Enabled"),
				SKU: &armkeyvault.SKU{
					Name:   to.Ptr(armkeyvault.SKUNameStandard),
					Family: to.Ptr(armkeyvault.SKUFamilyA),
				},
				TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				VaultURI: to.Ptr("https://sample-vault.vault.azure.net"),
			},
			SystemData: &armkeyvault.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
				CreatedBy:          to.Ptr("keyVaultUser1"),
				CreatedByType:      to.Ptr(armkeyvault.IdentityTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
				LastModifiedBy:     to.Ptr("keyVaultUser2"),
				LastModifiedByType: to.Ptr(armkeyvault.IdentityTypeUser),
			},
			Tags: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.Vault) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Vault)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/updateVault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVaults_Delete(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/deleteVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a vault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewVaultsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"sample-resource-group",
		"sample-vault",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/deleteVault.json: %v", err)
	}
}

func TestVaults_Get(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/getVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Retrieve a vault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewVaultsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"sample-resource-group",
		"sample-vault",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/getVault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.Vault{
			Name:     to.Ptr("sample-vault"),
			Type:     to.Ptr("Microsoft.KeyVault/vaults"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-resource-group/providers/Microsoft.KeyVault/vaults/sample-vault"),
			Location: to.Ptr("westus"),
			Properties: &armkeyvault.VaultProperties{
				AccessPolicies: []*armkeyvault.AccessPolicyEntry{
					{
						ObjectID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						Permissions: &armkeyvault.Permissions{
							Certificates: []*armkeyvault.CertificatePermissions{
								to.Ptr(armkeyvault.CertificatePermissionsGet),
								to.Ptr(armkeyvault.CertificatePermissionsList),
								to.Ptr(armkeyvault.CertificatePermissionsDelete),
								to.Ptr(armkeyvault.CertificatePermissionsCreate),
								to.Ptr(armkeyvault.CertificatePermissionsImport),
								to.Ptr(armkeyvault.CertificatePermissionsUpdate),
								to.Ptr(armkeyvault.CertificatePermissionsManagecontacts),
								to.Ptr(armkeyvault.CertificatePermissionsGetissuers),
								to.Ptr(armkeyvault.CertificatePermissionsListissuers),
								to.Ptr(armkeyvault.CertificatePermissionsSetissuers),
								to.Ptr(armkeyvault.CertificatePermissionsDeleteissuers),
								to.Ptr(armkeyvault.CertificatePermissionsManageissuers),
								to.Ptr(armkeyvault.CertificatePermissionsRecover),
								to.Ptr(armkeyvault.CertificatePermissionsPurge)},
							Keys: []*armkeyvault.KeyPermissions{
								to.Ptr(armkeyvault.KeyPermissionsEncrypt),
								to.Ptr(armkeyvault.KeyPermissionsDecrypt),
								to.Ptr(armkeyvault.KeyPermissionsWrapKey),
								to.Ptr(armkeyvault.KeyPermissionsUnwrapKey),
								to.Ptr(armkeyvault.KeyPermissionsSign),
								to.Ptr(armkeyvault.KeyPermissionsVerify),
								to.Ptr(armkeyvault.KeyPermissionsGet),
								to.Ptr(armkeyvault.KeyPermissionsList),
								to.Ptr(armkeyvault.KeyPermissionsCreate),
								to.Ptr(armkeyvault.KeyPermissionsUpdate),
								to.Ptr(armkeyvault.KeyPermissionsImport),
								to.Ptr(armkeyvault.KeyPermissionsDelete),
								to.Ptr(armkeyvault.KeyPermissionsBackup),
								to.Ptr(armkeyvault.KeyPermissionsRestore),
								to.Ptr(armkeyvault.KeyPermissionsRecover),
								to.Ptr(armkeyvault.KeyPermissionsPurge)},
							Secrets: []*armkeyvault.SecretPermissions{
								to.Ptr(armkeyvault.SecretPermissionsGet),
								to.Ptr(armkeyvault.SecretPermissionsList),
								to.Ptr(armkeyvault.SecretPermissionsSet),
								to.Ptr(armkeyvault.SecretPermissionsDelete),
								to.Ptr(armkeyvault.SecretPermissionsBackup),
								to.Ptr(armkeyvault.SecretPermissionsRestore),
								to.Ptr(armkeyvault.SecretPermissionsRecover),
								to.Ptr(armkeyvault.SecretPermissionsPurge)},
						},
						TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
					}},
				EnabledForDeployment:         to.Ptr(true),
				EnabledForDiskEncryption:     to.Ptr(true),
				EnabledForTemplateDeployment: to.Ptr(true),
				HsmPoolResourceID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
				ProvisioningState:            to.Ptr(armkeyvault.VaultProvisioningStateSucceeded),
				PublicNetworkAccess:          to.Ptr("Enabled"),
				SKU: &armkeyvault.SKU{
					Name:   to.Ptr(armkeyvault.SKUNameStandard),
					Family: to.Ptr(armkeyvault.SKUFamilyA),
				},
				TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				VaultURI: to.Ptr("https://sample-vault.vault.azure.net"),
			},
			SystemData: &armkeyvault.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
				CreatedBy:          to.Ptr("keyVaultUser1"),
				CreatedByType:      to.Ptr(armkeyvault.IdentityTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
				LastModifiedBy:     to.Ptr("keyVaultUser2"),
				LastModifiedByType: to.Ptr(armkeyvault.IdentityTypeUser),
			},
			Tags: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.Vault) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Vault)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/getVault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVaults_UpdateAccessPolicy(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/updateAccessPoliciesAdd.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Add an access policy, or update an access policy with new permissions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewVaultsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.UpdateAccessPolicy(ctx,
		"sample-group",
		"sample-vault",
		armkeyvault.AccessPolicyUpdateKindAdd,
		armkeyvault.VaultAccessPolicyParameters{
			Properties: &armkeyvault.VaultAccessPolicyProperties{
				AccessPolicies: []*armkeyvault.AccessPolicyEntry{
					{
						ObjectID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						Permissions: &armkeyvault.Permissions{
							Certificates: []*armkeyvault.CertificatePermissions{
								to.Ptr(armkeyvault.CertificatePermissionsGet)},
							Keys: []*armkeyvault.KeyPermissions{
								to.Ptr(armkeyvault.KeyPermissionsEncrypt)},
							Secrets: []*armkeyvault.SecretPermissions{
								to.Ptr(armkeyvault.SecretPermissionsGet)},
						},
						TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/updateAccessPoliciesAdd.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.VaultAccessPolicyParameters{
			Type: to.Ptr("Microsoft.KeyVault/vaults/accessPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault/accessPolicies/"),
			Properties: &armkeyvault.VaultAccessPolicyProperties{
				AccessPolicies: []*armkeyvault.AccessPolicyEntry{
					{
						ObjectID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						Permissions: &armkeyvault.Permissions{
							Certificates: []*armkeyvault.CertificatePermissions{
								to.Ptr(armkeyvault.CertificatePermissionsGet)},
							Keys: []*armkeyvault.KeyPermissions{
								to.Ptr(armkeyvault.KeyPermissionsEncrypt)},
							Secrets: []*armkeyvault.SecretPermissions{
								to.Ptr(armkeyvault.SecretPermissionsGet)},
						},
						TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VaultAccessPolicyParameters) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VaultAccessPolicyParameters)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/updateAccessPoliciesAdd.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVaults_ListByResourceGroup(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listVaultByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List vaults in the specified resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewVaultsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResourceGroup("sample-group",
		&armkeyvault.VaultsClientListByResourceGroupOptions{Top: to.Ptr[int32](1)})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listVaultByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkeyvault.VaultListResult{
			Value: []*armkeyvault.Vault{
				{
					Name:     to.Ptr("sample-vault"),
					Type:     to.Ptr("Microsoft.KeyVault/vaults"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault"),
					Location: to.Ptr("westus"),
					Properties: &armkeyvault.VaultProperties{
						AccessPolicies: []*armkeyvault.AccessPolicyEntry{
							{
								ObjectID: to.Ptr("00000000-0000-0000-0000-000000000000"),
								Permissions: &armkeyvault.Permissions{
									Certificates: []*armkeyvault.CertificatePermissions{
										to.Ptr(armkeyvault.CertificatePermissionsGet),
										to.Ptr(armkeyvault.CertificatePermissionsList),
										to.Ptr(armkeyvault.CertificatePermissionsDelete),
										to.Ptr(armkeyvault.CertificatePermissionsCreate),
										to.Ptr(armkeyvault.CertificatePermissionsImport),
										to.Ptr(armkeyvault.CertificatePermissionsUpdate),
										to.Ptr(armkeyvault.CertificatePermissionsManagecontacts),
										to.Ptr(armkeyvault.CertificatePermissionsGetissuers),
										to.Ptr(armkeyvault.CertificatePermissionsListissuers),
										to.Ptr(armkeyvault.CertificatePermissionsSetissuers),
										to.Ptr(armkeyvault.CertificatePermissionsDeleteissuers),
										to.Ptr(armkeyvault.CertificatePermissionsManageissuers),
										to.Ptr(armkeyvault.CertificatePermissionsRecover),
										to.Ptr(armkeyvault.CertificatePermissionsPurge)},
									Keys: []*armkeyvault.KeyPermissions{
										to.Ptr(armkeyvault.KeyPermissionsEncrypt),
										to.Ptr(armkeyvault.KeyPermissionsDecrypt),
										to.Ptr(armkeyvault.KeyPermissionsWrapKey),
										to.Ptr(armkeyvault.KeyPermissionsUnwrapKey),
										to.Ptr(armkeyvault.KeyPermissionsSign),
										to.Ptr(armkeyvault.KeyPermissionsVerify),
										to.Ptr(armkeyvault.KeyPermissionsGet),
										to.Ptr(armkeyvault.KeyPermissionsList),
										to.Ptr(armkeyvault.KeyPermissionsCreate),
										to.Ptr(armkeyvault.KeyPermissionsUpdate),
										to.Ptr(armkeyvault.KeyPermissionsImport),
										to.Ptr(armkeyvault.KeyPermissionsDelete),
										to.Ptr(armkeyvault.KeyPermissionsBackup),
										to.Ptr(armkeyvault.KeyPermissionsRestore),
										to.Ptr(armkeyvault.KeyPermissionsRecover),
										to.Ptr(armkeyvault.KeyPermissionsPurge)},
									Secrets: []*armkeyvault.SecretPermissions{
										to.Ptr(armkeyvault.SecretPermissionsGet),
										to.Ptr(armkeyvault.SecretPermissionsList),
										to.Ptr(armkeyvault.SecretPermissionsSet),
										to.Ptr(armkeyvault.SecretPermissionsDelete),
										to.Ptr(armkeyvault.SecretPermissionsBackup),
										to.Ptr(armkeyvault.SecretPermissionsRestore),
										to.Ptr(armkeyvault.SecretPermissionsRecover),
										to.Ptr(armkeyvault.SecretPermissionsPurge)},
								},
								TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
							}},
						EnableSoftDelete:             to.Ptr(true),
						EnabledForDeployment:         to.Ptr(true),
						EnabledForDiskEncryption:     to.Ptr(true),
						EnabledForTemplateDeployment: to.Ptr(true),
						HsmPoolResourceID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
						ProvisioningState:            to.Ptr(armkeyvault.VaultProvisioningStateSucceeded),
						SKU: &armkeyvault.SKU{
							Name:   to.Ptr(armkeyvault.SKUNamePremium),
							Family: to.Ptr(armkeyvault.SKUFamilyA),
						},
						TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						VaultURI: to.Ptr("https://sample-vault.vault.azure.net/"),
					},
					SystemData: &armkeyvault.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
						CreatedBy:          to.Ptr("keyVaultUser1"),
						CreatedByType:      to.Ptr(armkeyvault.IdentityTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
						LastModifiedBy:     to.Ptr("keyVaultUser2"),
						LastModifiedByType: to.Ptr(armkeyvault.IdentityTypeUser),
					},
					Tags: map[string]*string{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VaultListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VaultListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listVaultByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVaults_ListBySubscription(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listVaultBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List vaults in the specified subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewVaultsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBySubscription(&armkeyvault.VaultsClientListBySubscriptionOptions{Top: to.Ptr[int32](1)})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listVaultBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkeyvault.VaultListResult{
			Value: []*armkeyvault.Vault{
				{
					Name:     to.Ptr("sample-vault"),
					Type:     to.Ptr("Microsoft.KeyVault/vaults"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault"),
					Location: to.Ptr("westus"),
					Properties: &armkeyvault.VaultProperties{
						AccessPolicies: []*armkeyvault.AccessPolicyEntry{
							{
								ObjectID: to.Ptr("00000000-0000-0000-0000-000000000000"),
								Permissions: &armkeyvault.Permissions{
									Certificates: []*armkeyvault.CertificatePermissions{
										to.Ptr(armkeyvault.CertificatePermissionsGet),
										to.Ptr(armkeyvault.CertificatePermissionsList),
										to.Ptr(armkeyvault.CertificatePermissionsDelete),
										to.Ptr(armkeyvault.CertificatePermissionsCreate),
										to.Ptr(armkeyvault.CertificatePermissionsImport),
										to.Ptr(armkeyvault.CertificatePermissionsUpdate),
										to.Ptr(armkeyvault.CertificatePermissionsManagecontacts),
										to.Ptr(armkeyvault.CertificatePermissionsGetissuers),
										to.Ptr(armkeyvault.CertificatePermissionsListissuers),
										to.Ptr(armkeyvault.CertificatePermissionsSetissuers),
										to.Ptr(armkeyvault.CertificatePermissionsDeleteissuers),
										to.Ptr(armkeyvault.CertificatePermissionsManageissuers),
										to.Ptr(armkeyvault.CertificatePermissionsRecover),
										to.Ptr(armkeyvault.CertificatePermissionsPurge)},
									Keys: []*armkeyvault.KeyPermissions{
										to.Ptr(armkeyvault.KeyPermissionsEncrypt),
										to.Ptr(armkeyvault.KeyPermissionsDecrypt),
										to.Ptr(armkeyvault.KeyPermissionsWrapKey),
										to.Ptr(armkeyvault.KeyPermissionsUnwrapKey),
										to.Ptr(armkeyvault.KeyPermissionsSign),
										to.Ptr(armkeyvault.KeyPermissionsVerify),
										to.Ptr(armkeyvault.KeyPermissionsGet),
										to.Ptr(armkeyvault.KeyPermissionsList),
										to.Ptr(armkeyvault.KeyPermissionsCreate),
										to.Ptr(armkeyvault.KeyPermissionsUpdate),
										to.Ptr(armkeyvault.KeyPermissionsImport),
										to.Ptr(armkeyvault.KeyPermissionsDelete),
										to.Ptr(armkeyvault.KeyPermissionsBackup),
										to.Ptr(armkeyvault.KeyPermissionsRestore),
										to.Ptr(armkeyvault.KeyPermissionsRecover),
										to.Ptr(armkeyvault.KeyPermissionsPurge)},
									Secrets: []*armkeyvault.SecretPermissions{
										to.Ptr(armkeyvault.SecretPermissionsGet),
										to.Ptr(armkeyvault.SecretPermissionsList),
										to.Ptr(armkeyvault.SecretPermissionsSet),
										to.Ptr(armkeyvault.SecretPermissionsDelete),
										to.Ptr(armkeyvault.SecretPermissionsBackup),
										to.Ptr(armkeyvault.SecretPermissionsRestore),
										to.Ptr(armkeyvault.SecretPermissionsRecover),
										to.Ptr(armkeyvault.SecretPermissionsPurge)},
								},
								TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
							}},
						EnableSoftDelete:             to.Ptr(true),
						EnabledForDeployment:         to.Ptr(true),
						EnabledForDiskEncryption:     to.Ptr(true),
						EnabledForTemplateDeployment: to.Ptr(true),
						HsmPoolResourceID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
						ProvisioningState:            to.Ptr(armkeyvault.VaultProvisioningStateSucceeded),
						SKU: &armkeyvault.SKU{
							Name:   to.Ptr(armkeyvault.SKUNamePremium),
							Family: to.Ptr(armkeyvault.SKUFamilyA),
						},
						TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						VaultURI: to.Ptr("https://sample-vault.vault.azure.net/"),
					},
					SystemData: &armkeyvault.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
						CreatedBy:          to.Ptr("keyVaultUser1"),
						CreatedByType:      to.Ptr(armkeyvault.IdentityTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
						LastModifiedBy:     to.Ptr("keyVaultUser2"),
						LastModifiedByType: to.Ptr(armkeyvault.IdentityTypeUser),
					},
					Tags: map[string]*string{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VaultListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VaultListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listVaultBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVaults_ListDeleted(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listDeletedVaults.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List deleted vaults in the specified subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewVaultsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListDeleted(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listDeletedVaults.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkeyvault.DeletedVaultListResult{
			Value: []*armkeyvault.DeletedVault{
				{
					Name: to.Ptr("vault-agile-drawer-6404"),
					Type: to.Ptr("Microsoft.KeyVault/deletedVaults"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.KeyVault/locations/westus/deletedVaults/sample-vault"),
					Properties: &armkeyvault.DeletedVaultProperties{
						DeletionDate:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-01T00:00:59Z"); return t }()),
						Location:               to.Ptr("westus"),
						PurgeProtectionEnabled: to.Ptr(true),
						ScheduledPurgeDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T00:00:59Z"); return t }()),
						Tags:                   map[string]*string{},
						VaultID:                to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeletedVaultListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeletedVaultListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listDeletedVaults.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVaults_GetDeleted(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/getDeletedVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Retrieve a deleted vault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewVaultsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.GetDeleted(ctx,
		"sample-vault",
		"westus",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/getDeletedVault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.DeletedVault{
			Name: to.Ptr("sample-vault"),
			Type: to.Ptr("Microsoft.KeyVault/deletedVaults"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.KeyVault/locations/westus/deletedVaults/sample-vault"),
			Properties: &armkeyvault.DeletedVaultProperties{
				DeletionDate:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-01T00:00:59Z"); return t }()),
				Location:               to.Ptr("westus"),
				PurgeProtectionEnabled: to.Ptr(true),
				ScheduledPurgeDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T00:00:59Z"); return t }()),
				Tags:                   map[string]*string{},
				VaultID:                to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeletedVault) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeletedVault)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/getDeletedVault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVaults_PurgeDeleted(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/purgeDeletedVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Purge a deleted vault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewVaultsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginPurgeDeleted(ctx,
		"sample-vault",
		"westus",
		&armkeyvault.VaultsClientBeginPurgeDeletedOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/purgeDeletedVault.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/purgeDeletedVault.json: %v", err)
	}
}

func TestVaults_List(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List vaults in the specified subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewVaultsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List(&armkeyvault.VaultsClientListOptions{Top: to.Ptr[int32](1)})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listVault.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkeyvault.ResourceListResult{
			Value: []*armkeyvault.Resource{
				{
					Name:     to.Ptr("sample-vault"),
					Type:     to.Ptr("Microsoft.KeyVault/vaults"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listVault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVaults_CheckNameAvailability(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/checkVaultNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Validate a vault name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewVaultsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		armkeyvault.VaultCheckNameAvailabilityParameters{
			Name: to.Ptr("sample-vault"),
			Type: to.Ptr("Microsoft.KeyVault/vaults"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/checkVaultNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.CheckNameAvailabilityResult{
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/checkVaultNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/getPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KeyVaultGetPrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"sample-group",
		"sample-vault",
		"sample-pec",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/getPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.PrivateEndpointConnection{
			Name: to.Ptr("sample-pec"),
			Type: to.Ptr("Microsoft.KeyVault/vaults/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault/privateEndpointConnections/sample-pec"),
			Etag: to.Ptr(""),
			Properties: &armkeyvault.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armkeyvault.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/00000000-0000-0000-1234-000000000000/resourceGroups/sample-group/providers/Microsoft.Network/privateEndpoints/sample-pe"),
				},
				PrivateLinkServiceConnectionState: &armkeyvault.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("This was automatically approved by user1234@contoso.com"),
					ActionsRequired: to.Ptr(armkeyvault.ActionsRequiredNone),
					Status:          to.Ptr(armkeyvault.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armkeyvault.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/getPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Put(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/putPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KeyVaultPutPrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Put(ctx,
		"sample-group",
		"sample-vault",
		"sample-pec",
		armkeyvault.PrivateEndpointConnection{
			Etag: to.Ptr(""),
			Properties: &armkeyvault.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armkeyvault.PrivateLinkServiceConnectionState{
					Description: to.Ptr("My name is Joe and I'm approving this."),
					Status:      to.Ptr(armkeyvault.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/putPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.PrivateEndpointConnection{
			Name: to.Ptr("sample-pec"),
			Type: to.Ptr("Microsoft.KeyVault/vaults/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault/privateEndpointConnections/sample-pec"),
			Etag: to.Ptr(""),
			Properties: &armkeyvault.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armkeyvault.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/00000000-0000-0000-1234-000000000000/resourceGroups/sample-group/providers/Microsoft.Network/privateEndpoints/sample-pe"),
				},
				PrivateLinkServiceConnectionState: &armkeyvault.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("My name is Joe and I'm approving this."),
					ActionsRequired: to.Ptr(armkeyvault.ActionsRequiredNone),
					Status:          to.Ptr(armkeyvault.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armkeyvault.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/putPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/deletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KeyVaultDeletePrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"sample-group",
		"sample-vault",
		"sample-pec",
		&armkeyvault.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/deletePrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/deletePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.PrivateEndpointConnection{
			Name: to.Ptr("sample-pec"),
			Type: to.Ptr("Microsoft.KeyVault/vaults/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault/privateEndpointConnections/sample-pec"),
			Properties: &armkeyvault.PrivateEndpointConnectionProperties{
				ProvisioningState: to.Ptr(armkeyvault.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/deletePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_ListByResource(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KeyVaultListPrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResource("sample-group",
		"sample-vault",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listPrivateEndpointConnection.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkeyvault.PrivateEndpointConnectionListResult{
			Value: []*armkeyvault.PrivateEndpointConnection{
				{
					Name: to.Ptr("sample-pec"),
					Type: to.Ptr("Microsoft.KeyVault/vaults/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault/privateEndpointConnections/sample-pec"),
					Etag: to.Ptr(""),
					Properties: &armkeyvault.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armkeyvault.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-0000-0000-1234-000000000000/resourceGroups/sample-group/providers/Microsoft.Network/privateEndpoints/sample-pe"),
						},
						PrivateLinkServiceConnectionState: &armkeyvault.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("This was automatically approved by user1234@contoso.com"),
							ActionsRequired: to.Ptr(armkeyvault.ActionsRequiredNone),
							Status:          to.Ptr(armkeyvault.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armkeyvault.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("sample-pec"),
					Type: to.Ptr("Microsoft.KeyVault/vaults/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault/privateEndpointConnections/sample-pec"),
					Etag: to.Ptr(""),
					Properties: &armkeyvault.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armkeyvault.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-0000-0000-1234-000000000000/resourceGroups/sample-group/providers/Microsoft.Network/privateEndpoints/sample-pe"),
						},
						PrivateLinkServiceConnectionState: &armkeyvault.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("This was automatically approved by user1234@contoso.com"),
							ActionsRequired: to.Ptr(armkeyvault.ActionsRequiredNone),
							Status:          to.Ptr(armkeyvault.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armkeyvault.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_ListByVault(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listPrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KeyVaultListPrivateLinkResources"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ListByVault(ctx,
		"sample-group",
		"sample-vault",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listPrivateLinkResources.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.PrivateLinkResourceListResult{
			Value: []*armkeyvault.PrivateLinkResource{
				{
					Name: to.Ptr("vault"),
					Type: to.Ptr("Microsoft.KeyVault/vaults/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-resource-group/providers/Microsoft.KeyVault/vaults/sample-vault/privateLinkResources/vault"),
					Properties: &armkeyvault.PrivateLinkResourceProperties{
						GroupID: to.Ptr("vault"),
						RequiredMembers: []*string{
							to.Ptr("default")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.vaultcore.azure.net")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listPrivateLinkResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedHsms_CreateOrUpdate(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a new managed HSM Pool or update an existing managed HSM Pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewManagedHsmsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"hsm-group",
		"hsm1",
		armkeyvault.ManagedHsm{
			Location: to.Ptr("westus"),
			SKU: &armkeyvault.ManagedHsmSKU{
				Name:   to.Ptr(armkeyvault.ManagedHsmSKUNameStandardB1),
				Family: to.Ptr(armkeyvault.ManagedHsmSKUFamilyB),
			},
			Tags: map[string]*string{
				"Dept":        to.Ptr("hsm"),
				"Environment": to.Ptr("dogfood"),
			},
			Properties: &armkeyvault.ManagedHsmProperties{
				EnablePurgeProtection: to.Ptr(true),
				EnableSoftDelete:      to.Ptr(true),
				InitialAdminObjectIDs: []*string{
					to.Ptr("00000000-0000-0000-0000-000000000000")},
				SoftDeleteRetentionInDays: to.Ptr[int32](90),
				TenantID:                  to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
		},
		&armkeyvault.ManagedHsmsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.ManagedHsm{
			Name:     to.Ptr("hsm1"),
			Type:     to.Ptr("Microsoft.KeyVault/managedHSMs"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.KeyVault/managedHSMs/hsm1"),
			Location: to.Ptr("westus"),
			SKU: &armkeyvault.ManagedHsmSKU{
				Name:   to.Ptr(armkeyvault.ManagedHsmSKUNameStandardB1),
				Family: to.Ptr(armkeyvault.ManagedHsmSKUFamilyB),
			},
			Tags: map[string]*string{
				"Dept":        to.Ptr("hsm"),
				"Environment": to.Ptr("dogfood"),
			},
			Properties: &armkeyvault.ManagedHsmProperties{
				EnablePurgeProtection: to.Ptr(true),
				EnableSoftDelete:      to.Ptr(true),
				HsmURI:                to.Ptr("https://westus.hsm1.managedhsm.azure.net"),
				InitialAdminObjectIDs: []*string{
					to.Ptr("00000000-0000-0000-0000-000000000000")},
				ProvisioningState:         to.Ptr(armkeyvault.ProvisioningStateSucceeded),
				SoftDeleteRetentionInDays: to.Ptr[int32](90),
				StatusMessage:             to.Ptr("ManagedHsm is functional."),
				TenantID:                  to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedHsm) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedHsm)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedHsms_Update(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update an existing managed HSM Pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewManagedHsmsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"hsm-group",
		"hsm1",
		armkeyvault.ManagedHsm{
			Tags: map[string]*string{
				"Dept":        to.Ptr("hsm"),
				"Environment": to.Ptr("dogfood"),
				"Slice":       to.Ptr("A"),
			},
		},
		&armkeyvault.ManagedHsmsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.ManagedHsm{
			Name:     to.Ptr("hsm1"),
			Type:     to.Ptr("Microsoft.KeyVault/managedHSMs"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.KeyVault/managedHSMs/hsm1"),
			Location: to.Ptr("westus"),
			SKU: &armkeyvault.ManagedHsmSKU{
				Name:   to.Ptr(armkeyvault.ManagedHsmSKUNameStandardB1),
				Family: to.Ptr(armkeyvault.ManagedHsmSKUFamilyB),
			},
			Tags: map[string]*string{
				"Dept":        to.Ptr("hsm"),
				"Environment": to.Ptr("dogfood"),
				"Slice":       to.Ptr("A"),
			},
			Properties: &armkeyvault.ManagedHsmProperties{
				EnablePurgeProtection: to.Ptr(true),
				EnableSoftDelete:      to.Ptr(true),
				HsmURI:                to.Ptr("https://westus.hsm1.managedhsm.azure.net"),
				InitialAdminObjectIDs: []*string{
					to.Ptr("00000000-0000-0000-0000-000000000000")},
				ProvisioningState:         to.Ptr(armkeyvault.ProvisioningStateSucceeded),
				SoftDeleteRetentionInDays: to.Ptr[int32](90),
				StatusMessage:             to.Ptr("ManagedHsm is functional."),
				TenantID:                  to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedHsm) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedHsm)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedHsms_Delete(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a managed HSM Pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewManagedHsmsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"hsm-group",
		"hsm1",
		&armkeyvault.ManagedHsmsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_Delete.json: %v", err)
	}
}

func TestManagedHsms_Get(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Retrieve a managed HSM Pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewManagedHsmsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"hsm-group",
		"hsm1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.ManagedHsm{
			Name:     to.Ptr("hsm1"),
			Type:     to.Ptr("Microsoft.KeyVault/managedHSMs"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.KeyVault/managedHSMs/hsm1"),
			Location: to.Ptr("westus"),
			SKU: &armkeyvault.ManagedHsmSKU{
				Name:   to.Ptr(armkeyvault.ManagedHsmSKUNameStandardB1),
				Family: to.Ptr(armkeyvault.ManagedHsmSKUFamilyB),
			},
			Tags: map[string]*string{
				"Dept":        to.Ptr("hsm"),
				"Environment": to.Ptr("dogfood"),
			},
			Properties: &armkeyvault.ManagedHsmProperties{
				EnablePurgeProtection: to.Ptr(true),
				EnableSoftDelete:      to.Ptr(true),
				HsmURI:                to.Ptr("https://westus.hsm1.managedhsm.azure.net"),
				InitialAdminObjectIDs: []*string{
					to.Ptr("00000000-0000-0000-0000-000000000000")},
				ProvisioningState:         to.Ptr(armkeyvault.ProvisioningStateSucceeded),
				SoftDeleteRetentionInDays: to.Ptr[int32](90),
				StatusMessage:             to.Ptr("ManagedHsm is functional."),
				TenantID:                  to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedHsm) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedHsm)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedHsms_ListByResourceGroup(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List managed HSM Pools in a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewManagedHsmsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResourceGroup("hsm-group",
		&armkeyvault.ManagedHsmsClientListByResourceGroupOptions{Top: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkeyvault.ManagedHsmListResult{
			Value: []*armkeyvault.ManagedHsm{
				{
					Name:     to.Ptr("hsm1"),
					Type:     to.Ptr("Microsoft.KeyVault/managedHSMs"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.KeyVault/managedHSMs/hsm1"),
					Location: to.Ptr("westus"),
					SKU: &armkeyvault.ManagedHsmSKU{
						Name:   to.Ptr(armkeyvault.ManagedHsmSKUNameStandardB1),
						Family: to.Ptr(armkeyvault.ManagedHsmSKUFamilyB),
					},
					Tags: map[string]*string{
						"Dept":        to.Ptr("hsm"),
						"Environment": to.Ptr("dogfood"),
					},
					Properties: &armkeyvault.ManagedHsmProperties{
						EnablePurgeProtection: to.Ptr(true),
						EnableSoftDelete:      to.Ptr(true),
						HsmURI:                to.Ptr("https://westus.hsm1.managedhsm.azure.net"),
						InitialAdminObjectIDs: []*string{
							to.Ptr("00000000-0000-0000-0000-000000000000")},
						ProvisioningState:         to.Ptr(armkeyvault.ProvisioningStateSucceeded),
						SoftDeleteRetentionInDays: to.Ptr[int32](90),
						StatusMessage:             to.Ptr("ManagedHsm is functional."),
						TenantID:                  to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				},
				{
					Name:     to.Ptr("hsm2"),
					Type:     to.Ptr("Microsoft.KeyVault/managedHSMs"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.KeyVault/managedHSMs/hsm2"),
					Location: to.Ptr("westus"),
					SKU: &armkeyvault.ManagedHsmSKU{
						Name:   to.Ptr(armkeyvault.ManagedHsmSKUNameStandardB1),
						Family: to.Ptr(armkeyvault.ManagedHsmSKUFamilyB),
					},
					Tags: map[string]*string{
						"Dept":        to.Ptr("hsm"),
						"Environment": to.Ptr("production"),
					},
					Properties: &armkeyvault.ManagedHsmProperties{
						EnablePurgeProtection: to.Ptr(true),
						EnableSoftDelete:      to.Ptr(true),
						HsmURI:                to.Ptr("https://westus.hsm2.managedhsm.azure.net"),
						InitialAdminObjectIDs: []*string{
							to.Ptr("00000000-0000-0000-0000-000000000000")},
						ProvisioningState:         to.Ptr(armkeyvault.ProvisioningStateSucceeded),
						SoftDeleteRetentionInDays: to.Ptr[int32](90),
						StatusMessage:             to.Ptr("ManagedHsm is functional."),
						TenantID:                  to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedHsmListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedHsmListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedHsms_ListBySubscription(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List managed HSM Pools in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewManagedHsmsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBySubscription(&armkeyvault.ManagedHsmsClientListBySubscriptionOptions{Top: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkeyvault.ManagedHsmListResult{
			Value: []*armkeyvault.ManagedHsm{
				{
					Name:     to.Ptr("hsm1"),
					Type:     to.Ptr("Microsoft.KeyVault/managedHSMs"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.KeyVault/managedHSMs/hsm1"),
					Location: to.Ptr("westus"),
					SKU: &armkeyvault.ManagedHsmSKU{
						Name:   to.Ptr(armkeyvault.ManagedHsmSKUNameStandardB1),
						Family: to.Ptr(armkeyvault.ManagedHsmSKUFamilyB),
					},
					Tags: map[string]*string{
						"Dept":        to.Ptr("hsm"),
						"Environment": to.Ptr("dogfood"),
					},
					Properties: &armkeyvault.ManagedHsmProperties{
						EnablePurgeProtection: to.Ptr(true),
						EnableSoftDelete:      to.Ptr(true),
						HsmURI:                to.Ptr("https://westus.hsm1.managedhsm.azure.net"),
						InitialAdminObjectIDs: []*string{
							to.Ptr("00000000-0000-0000-0000-000000000000")},
						ProvisioningState:         to.Ptr(armkeyvault.ProvisioningStateSucceeded),
						SoftDeleteRetentionInDays: to.Ptr[int32](90),
						StatusMessage:             to.Ptr("ManagedHsm is functional."),
						TenantID:                  to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				},
				{
					Name:     to.Ptr("hsm2"),
					Type:     to.Ptr("Microsoft.KeyVault/managedHSMs"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.KeyVault/managedHSMs/hsm2"),
					Location: to.Ptr("westus"),
					SKU: &armkeyvault.ManagedHsmSKU{
						Name:   to.Ptr(armkeyvault.ManagedHsmSKUNameStandardB1),
						Family: to.Ptr(armkeyvault.ManagedHsmSKUFamilyB),
					},
					Tags: map[string]*string{
						"Dept":        to.Ptr("hsm"),
						"Environment": to.Ptr("production"),
					},
					Properties: &armkeyvault.ManagedHsmProperties{
						EnablePurgeProtection: to.Ptr(true),
						EnableSoftDelete:      to.Ptr(true),
						HsmURI:                to.Ptr("https://westus.hsm2.managedhsm.azure.net"),
						InitialAdminObjectIDs: []*string{
							to.Ptr("00000000-0000-0000-0000-000000000000")},
						ProvisioningState:         to.Ptr(armkeyvault.ProvisioningStateSucceeded),
						SoftDeleteRetentionInDays: to.Ptr[int32](90),
						StatusMessage:             to.Ptr("ManagedHsm is functional."),
						TenantID:                  to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedHsmListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedHsmListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedHsms_ListDeleted(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/DeletedManagedHsm_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List deleted managed HSMs in the specified subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewManagedHsmsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListDeleted(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/DeletedManagedHsm_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkeyvault.DeletedManagedHsmListResult{
			Value: []*armkeyvault.DeletedManagedHsm{
				{
					Name: to.Ptr("vault-agile-drawer-6404"),
					Type: to.Ptr("Microsoft.KeyVault/deletedManagedHSMs"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.KeyVault/locations/westus/deletedManagedHSMs/hsm1"),
					Properties: &armkeyvault.DeletedManagedHsmProperties{
						DeletionDate:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T00:00:59Z"); return t }()),
						Location:               to.Ptr("westus"),
						MhsmID:                 to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.KeyVault/managedHSMs/hsm1"),
						PurgeProtectionEnabled: to.Ptr(true),
						ScheduledPurgeDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T00:00:59Z"); return t }()),
						Tags: map[string]*string{
							"Dept":        to.Ptr("hsm"),
							"Environment": to.Ptr("production"),
						},
					},
				},
				{
					Name: to.Ptr("vault-agile-drawer-6404"),
					Type: to.Ptr("Microsoft.KeyVault/deletedManagedHSMs"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.KeyVault/locations/westus/deletedManagedHSMs/hsm2"),
					Properties: &armkeyvault.DeletedManagedHsmProperties{
						DeletionDate:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T00:00:59Z"); return t }()),
						Location:               to.Ptr("westus"),
						MhsmID:                 to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.KeyVault/managedHSMs/hsm2"),
						PurgeProtectionEnabled: to.Ptr(true),
						ScheduledPurgeDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T00:00:59Z"); return t }()),
						Tags: map[string]*string{
							"Dept":        to.Ptr("hsm"),
							"Environment": to.Ptr("production"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeletedManagedHsmListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeletedManagedHsmListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/DeletedManagedHsm_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedHsms_GetDeleted(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/DeletedManagedHsm_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Retrieve a deleted managed HSM"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewManagedHsmsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.GetDeleted(ctx,
		"hsm1",
		"westus",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/DeletedManagedHsm_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.DeletedManagedHsm{
			Name: to.Ptr("vault-agile-drawer-6404"),
			Type: to.Ptr("Microsoft.KeyVault/deletedManagedHSMs"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.KeyVault/locations/westus/deletedManagedHSMs/hsm1"),
			Properties: &armkeyvault.DeletedManagedHsmProperties{
				DeletionDate:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T00:00:59Z"); return t }()),
				Location:               to.Ptr("westus"),
				MhsmID:                 to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.KeyVault/managedHSMs/hsm1"),
				PurgeProtectionEnabled: to.Ptr(true),
				ScheduledPurgeDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T00:00:59Z"); return t }()),
				Tags: map[string]*string{
					"Dept":        to.Ptr("hsm"),
					"Environment": to.Ptr("production"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeletedManagedHsm) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeletedManagedHsm)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/DeletedManagedHsm_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedHsms_PurgeDeleted(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/DeletedManagedHsm_Purge.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Purge a managed HSM Pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewManagedHsmsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginPurgeDeleted(ctx,
		"hsm1",
		"westus",
		&armkeyvault.ManagedHsmsClientBeginPurgeDeletedOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/DeletedManagedHsm_Purge.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/DeletedManagedHsm_Purge.json: %v", err)
	}
}

func TestMHSMPrivateEndpointConnections_ListByResource(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_ListPrivateEndpointConnectionsByResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List managed HSM Pools in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewMHSMPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResource("sample-group",
		"sample-mhsm",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_ListPrivateEndpointConnectionsByResource.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkeyvault.MHSMPrivateEndpointConnectionsListResult{
			Value: []*armkeyvault.MHSMPrivateEndpointConnection{
				{
					Name: to.Ptr("sample-pec1"),
					Type: to.Ptr("Microsoft.KeyVault/managedhsms/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/managedhsms/sample-mhsm/privateEndpointConnections/sample-pec1"),
					Etag: to.Ptr(""),
					Properties: &armkeyvault.MHSMPrivateEndpointConnectionProperties{
						PrivateEndpoint: &armkeyvault.MHSMPrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-0000-0000-1234-000000000000/resourceGroups/sample-group/providers/Microsoft.Network/privateEndpoints/sample-pe1"),
						},
						PrivateLinkServiceConnectionState: &armkeyvault.MHSMPrivateLinkServiceConnectionState{
							Description:     to.Ptr("This was automatically approved by user1234@contoso.com"),
							ActionsRequired: to.Ptr(armkeyvault.ActionsRequiredNone),
							Status:          to.Ptr(armkeyvault.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armkeyvault.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("sample-pec2"),
					Type: to.Ptr("Microsoft.KeyVault/managedhsms/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/managedhsms/sample-mhsm/privateEndpointConnections/sample-pec2"),
					Etag: to.Ptr(""),
					Properties: &armkeyvault.MHSMPrivateEndpointConnectionProperties{
						PrivateEndpoint: &armkeyvault.MHSMPrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-0000-0000-1234-000000000000/resourceGroups/sample-group/providers/Microsoft.Network/privateEndpoints/sample-pe2"),
						},
						PrivateLinkServiceConnectionState: &armkeyvault.MHSMPrivateLinkServiceConnectionState{
							Description:     to.Ptr("This was automatically approved by user1234@contoso.com"),
							ActionsRequired: to.Ptr(armkeyvault.ActionsRequiredNone),
							Status:          to.Ptr(armkeyvault.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armkeyvault.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MHSMPrivateEndpointConnectionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MHSMPrivateEndpointConnectionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_ListPrivateEndpointConnectionsByResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMHSMPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_getPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagedHsmGetPrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewMHSMPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"sample-group",
		"sample-mhsm",
		"sample-pec",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_getPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.MHSMPrivateEndpointConnection{
			Name: to.Ptr("sample-pec"),
			Type: to.Ptr("Microsoft.KeyVault/managedhsms/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/managedhsms/sample-mhsm/privateEndpointConnections/sample-pec"),
			Etag: to.Ptr(""),
			Properties: &armkeyvault.MHSMPrivateEndpointConnectionProperties{
				PrivateEndpoint: &armkeyvault.MHSMPrivateEndpoint{
					ID: to.Ptr("/subscriptions/00000000-0000-0000-1234-000000000000/resourceGroups/sample-group/providers/Microsoft.Network/privateEndpoints/sample-pe"),
				},
				PrivateLinkServiceConnectionState: &armkeyvault.MHSMPrivateLinkServiceConnectionState{
					Description:     to.Ptr("This was automatically approved by user1234@contoso.com"),
					ActionsRequired: to.Ptr(armkeyvault.ActionsRequiredNone),
					Status:          to.Ptr(armkeyvault.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armkeyvault.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MHSMPrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MHSMPrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_getPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMHSMPrivateEndpointConnections_Put(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_putPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagedHsmPutPrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewMHSMPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Put(ctx,
		"sample-group",
		"sample-mhsm",
		"sample-pec",
		armkeyvault.MHSMPrivateEndpointConnection{
			Properties: &armkeyvault.MHSMPrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armkeyvault.MHSMPrivateLinkServiceConnectionState{
					Description: to.Ptr("My name is Joe and I'm approving this."),
					Status:      to.Ptr(armkeyvault.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_putPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.MHSMPrivateEndpointConnection{
			Name: to.Ptr("sample-pec"),
			Type: to.Ptr("Microsoft.KeyVault/managedhsms/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/managedhsms/sample-mhsm/privateEndpointConnections/sample-pec"),
			Properties: &armkeyvault.MHSMPrivateEndpointConnectionProperties{
				PrivateEndpoint: &armkeyvault.MHSMPrivateEndpoint{
					ID: to.Ptr("/subscriptions/00000000-0000-0000-1234-000000000000/resourceGroups/sample-group/providers/Microsoft.Network/privateEndpoints/sample-pe"),
				},
				PrivateLinkServiceConnectionState: &armkeyvault.MHSMPrivateLinkServiceConnectionState{
					Description:     to.Ptr("My name is Joe and I'm approving this."),
					ActionsRequired: to.Ptr(armkeyvault.ActionsRequiredNone),
					Status:          to.Ptr(armkeyvault.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armkeyvault.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MHSMPrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MHSMPrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_putPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMHSMPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_deletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagedHsmDeletePrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewMHSMPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"sample-group",
		"sample-mhsm",
		"sample-pec",
		&armkeyvault.MHSMPrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_deletePrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_deletePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.MHSMPrivateEndpointConnection{
			Name: to.Ptr("sample-pec"),
			Type: to.Ptr("Microsoft.KeyVault/managedhsms/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/managedhsms/sample-vault/privateEndpointConnections/sample-pec"),
			Properties: &armkeyvault.MHSMPrivateEndpointConnectionProperties{
				ProvisioningState: to.Ptr(armkeyvault.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MHSMPrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MHSMPrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_deletePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMHSMPrivateLinkResources_ListByMHSMResource(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_listPrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KeyVaultListPrivateLinkResources"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewMHSMPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ListByMHSMResource(ctx,
		"sample-group",
		"sample-mhsm",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_listPrivateLinkResources.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.MHSMPrivateLinkResourceListResult{
			Value: []*armkeyvault.MHSMPrivateLinkResource{
				{
					Name: to.Ptr("managedhsm"),
					Type: to.Ptr("Microsoft.KeyVault/managedhsms/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-resource-group/providers/Microsoft.KeyVault/managedhsms/sample-mhsm/privateLinkResources/managedhsm"),
					Properties: &armkeyvault.MHSMPrivateLinkResourceProperties{
						GroupID: to.Ptr("managedhsms"),
						RequiredMembers: []*string{
							to.Ptr("default")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.managedhsm.azure.net")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.MHSMPrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MHSMPrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_listPrivateLinkResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists available Rest API operations."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkeyvault.OperationListResult{
			Value: []*armkeyvault.Operation{
				{
					Name: to.Ptr("Microsoft.KeyVault/vaults/read"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("View the properties of a key vault"),
						Operation:   to.Ptr("View Key Vault"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Key Vault"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/vaults/write"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("Create a new key vault or update the properties of an existing key vault"),
						Operation:   to.Ptr("Update Key Vault"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Key Vault"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/vaults/delete"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("Delete a key vault"),
						Operation:   to.Ptr("Delete Key Vault"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Key Vault"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/vaults/deploy/action"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("Enables access to secrets in a key vault when deploying Azure resources"),
						Operation:   to.Ptr("Use Vault for Azure Deployments"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Key Vault"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/vaults/secrets/read"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("View the properties of a secret, but not its value"),
						Operation:   to.Ptr("View Secret Properties"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Secret"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/vaults/secrets/write"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("Create a new secret or update the value of an existing secret"),
						Operation:   to.Ptr("Update Secret"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Secret"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/vaults/accessPolicies/write"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("Update an existing access policy by merging or replacing, or add a new access policy to a vault."),
						Operation:   to.Ptr("Update Access Policy"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Access Policy"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/vaults/providers/Microsoft.Insights/logDefinitions/read"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("Gets the available logs for a key vault"),
						Operation:   to.Ptr("Read log definition"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Key Vault Log Definition"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("system"),
					OperationProperties: &armkeyvault.OperationProperties{
						ServiceSpecification: &armkeyvault.ServiceSpecification{
							LogSpecifications: []*armkeyvault.LogSpecification{
								{
									Name:         to.Ptr("AuditEvent"),
									BlobDuration: to.Ptr("PT1H"),
									DisplayName:  to.Ptr("Audit Logs"),
								}},
							MetricSpecifications: []*armkeyvault.MetricSpecification{
								{
									Name:            to.Ptr("ServiceApiHit"),
									AggregationType: to.Ptr(""),
									Dimensions: []*armkeyvault.DimensionProperties{
										{
											Name:                   to.Ptr("ActivityType"),
											DisplayName:            to.Ptr(""),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("ActivityName"),
											DisplayName:            to.Ptr(""),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:  to.Ptr(""),
									DisplayName:         to.Ptr(""),
									FillGapWithZero:     to.Ptr(false),
									InternalMetricName:  to.Ptr("AuditEvent"),
									LockAggregationType: to.Ptr(""),
									SupportedAggregationTypes: []*string{
										to.Ptr("")},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("")},
									Unit: to.Ptr(""),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/vaults/providers/Microsoft.Insights/diagnosticSettings/Read"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource"),
						Operation:   to.Ptr("Read diagnostic setting"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Key Vault Diagnostic Settings"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/vaults/providers/Microsoft.Insights/diagnosticSettings/Write"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource"),
						Operation:   to.Ptr("Write diagnostic setting"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Key Vault Diagnostic Settings"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/register/action"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("Registers a subscription"),
						Operation:   to.Ptr("Register Subscription"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Subscription"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/unregister/action"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("Unregisters a subscription"),
						Operation:   to.Ptr("Unregister Subscription"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Subscription"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/operations/read"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("Lists operations available on Microsoft.KeyVault resource provider"),
						Operation:   to.Ptr("Available Key Vault Operations"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Operations"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/checkNameAvailability/read"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("Checks that a key vault name is valid and is not in use"),
						Operation:   to.Ptr("Check Name Availability"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Name Availability"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/deletedVaults/read"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("View the properties of soft deleted key vaults"),
						Operation:   to.Ptr("View Soft Deleted Vaults"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Soft Deleted Key Vault"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/locations/deletedVaults/read"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("View the properties of a soft deleted key vault"),
						Operation:   to.Ptr("View Soft Deleted Key Vault"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Soft Deleted Key Vault"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/locations/deletedVaults/purge/action"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("Purge a soft deleted key vault"),
						Operation:   to.Ptr("Purge Soft Deleted Key Vault"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Soft Deleted Key Vault"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/locations/operationResults/read"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("Check the result of a long run operation"),
						Operation:   to.Ptr("Check Operation Result"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Long Run Operation Result"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/hsmPools/read"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("View the properties of an HSM pool"),
						Operation:   to.Ptr("View HSM pool"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("HSM pool"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/hsmPools/write"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("Create a new HSM pool of update the properties of an existing HSM pool"),
						Operation:   to.Ptr("Create or Update HSM pool"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("HSM pool"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/hsmPools/delete"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("Delete an HSM pool"),
						Operation:   to.Ptr("Delete HSM pool"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("HSM pool"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/hsmPools/joinVault/action"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("Join a key vault to an HSM pool"),
						Operation:   to.Ptr("Join KeyVault to HSM pool"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("HSM pool"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/managedHSMs/read"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("View the properties of a Managed HSM"),
						Operation:   to.Ptr("View Managed HSM"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Managed HSM"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/managedHSMs/write"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("Create a new Managed HSM of update the properties of an existing Managed HSM"),
						Operation:   to.Ptr("Create or Update Managed HSM"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Managed HSM"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/managedHSMs/delete"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("Delete a Managed HSM"),
						Operation:   to.Ptr("Delete Managed HSM"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Managed HSM"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/vaults/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("Gets the available metrics for a key vault"),
						Operation:   to.Ptr("Read metric definition"),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Key Vault Metric Definition"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("system"),
					OperationProperties: &armkeyvault.OperationProperties{
						ServiceSpecification: &armkeyvault.ServiceSpecification{},
					},
				},
				{
					Name: to.Ptr("Microsoft.KeyVault/locations/deleteVirtualNetworkOrSubnets/action"),
					Display: &armkeyvault.OperationDisplay{
						Description: to.Ptr("Notifies Microsoft.KeyVault that a virtual network or subnet is being deleted"),
						Operation:   to.Ptr("Modify Network ACLs containing the deleted Vitual Network or Subnet "),
						Provider:    to.Ptr("Microsoft Key Vault"),
						Resource:    to.Ptr("Location"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecrets_CreateOrUpdate(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/createSecret.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a secret"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewSecretsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"sample-group",
		"sample-vault",
		"secret-name",
		armkeyvault.SecretCreateOrUpdateParameters{
			Properties: &armkeyvault.SecretProperties{
				Value: to.Ptr("secret-value"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/createSecret.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.Secret{
			Name:     to.Ptr("secret-name"),
			Type:     to.Ptr("Microsoft.KeyVault/vaults/secrets"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault/secrets/secret-name"),
			Location: to.Ptr("westus"),
			Properties: &armkeyvault.SecretProperties{
				Attributes: &armkeyvault.SecretAttributes{
					Created: to.Ptr(time.Unix(1514938738, 0)),
					Enabled: to.Ptr(true),
					Updated: to.Ptr(time.Unix(1514938738, 0)),
				},
				SecretURI:            to.Ptr("https://sample-vault.vault.azure.net/secrets/secret-name"),
				SecretURIWithVersion: to.Ptr("https:/sample-vault.vault.azure.net/secrets/secret-name/baf6de32c4774c7c81345f6476cf90a4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Secret) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Secret)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/createSecret.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecrets_Update(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/updateSecret.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a secret"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewSecretsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"sample-group",
		"sample-vault",
		"secret-name",
		armkeyvault.SecretPatchParameters{
			Properties: &armkeyvault.SecretPatchProperties{
				Value: to.Ptr("secret-value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/updateSecret.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.Secret{
			Name:     to.Ptr("secret-name"),
			Type:     to.Ptr("Microsoft.KeyVault/vaults/secrets"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault/secrets/secret-name"),
			Location: to.Ptr("westus"),
			Properties: &armkeyvault.SecretProperties{
				Attributes: &armkeyvault.SecretAttributes{
					Created: to.Ptr(time.Unix(1514940684, 0)),
					Enabled: to.Ptr(true),
					Updated: to.Ptr(time.Unix(1514940698, 0)),
				},
				SecretURI:            to.Ptr("https://sample-vault.vault.azure.net/secrets/secret-name"),
				SecretURIWithVersion: to.Ptr("https://sample-vault.vault.azure.net/secrets/secret-name/b8c802f549764f2d97885d152f92ee9d"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Secret) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Secret)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/updateSecret.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecrets_Get(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/getSecret.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a secret"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewSecretsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"sample-group",
		"sample-vault",
		"secret-name",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/getSecret.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkeyvault.Secret{
			Name:     to.Ptr("secret-name"),
			Type:     to.Ptr("Microsoft.KeyVault/vaults/secrets"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault/secrets/secret-name"),
			Location: to.Ptr("westus"),
			Properties: &armkeyvault.SecretProperties{
				Attributes: &armkeyvault.SecretAttributes{
					Created: to.Ptr(time.Unix(1514940950, 0)),
					Enabled: to.Ptr(true),
					Updated: to.Ptr(time.Unix(1514940950, 0)),
				},
				SecretURI:            to.Ptr("https://sample-vault.vault.azure.net/secrets/secret-name"),
				SecretURIWithVersion: to.Ptr("https://sample-vault.vault.azure.net/secrets/secret-name/77445834f7de41bab81d0723bf996860"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Secret) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Secret)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/getSecret.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecrets_List(t *testing.T) {
	// From example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listSecrets.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List secrets in the vault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkeyvault.NewSecretsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("sample-group",
		"sample-vault",
		&armkeyvault.SecretsClientListOptions{Top: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listSecrets.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkeyvault.SecretListResult{
			Value: []*armkeyvault.Secret{
				{
					Name:     to.Ptr("secret-name"),
					Type:     to.Ptr("Microsoft.KeyVault/vaults/secrets"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault/secrets/secret-name"),
					Location: to.Ptr("westus"),
					Properties: &armkeyvault.SecretProperties{
						Attributes: &armkeyvault.SecretAttributes{
							Created: to.Ptr(time.Unix(1514941476, 0)),
							Enabled: to.Ptr(true),
							Updated: to.Ptr(time.Unix(1514941476, 0)),
						},
						SecretURI:            to.Ptr("https://sample-vault.vault.azure.net/secrets/secret-name"),
						SecretURIWithVersion: to.Ptr("https://sample-vault.vault.azure.net/secrets/secret-name/40af42fbc10047f8a756a73211492f56"),
					},
				},
				{
					Name:     to.Ptr("secret-name2"),
					Type:     to.Ptr("Microsoft.KeyVault/vaults/secrets"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault/secrets/secret-name2"),
					Location: to.Ptr("westus"),
					Properties: &armkeyvault.SecretProperties{
						Attributes: &armkeyvault.SecretAttributes{
							Created: to.Ptr(time.Unix(1514941476, 0)),
							Enabled: to.Ptr(true),
							Updated: to.Ptr(time.Unix(1514941476, 0)),
						},
						SecretURI:            to.Ptr("https://sample-vault.vault.azure.net/secrets/secret-name2"),
						SecretURIWithVersion: to.Ptr("https://sample-vault.vault.azure.net/secrets/secret-name2/cd7264a6f56c44d1b594423c80609aae"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SecretListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SecretListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listSecrets.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
