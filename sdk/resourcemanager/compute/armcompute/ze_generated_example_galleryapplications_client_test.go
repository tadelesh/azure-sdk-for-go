//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcompute_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryApplication.json
func ExampleGalleryApplicationsClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	galleryApplicationsClient, err := armcompute.NewGalleryApplicationsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	galleryApplicationsClientCreateOrUpdateResponsePoller, err := galleryApplicationsClient.BeginCreateOrUpdate(ctx,
		"<resource-group-name>",
		"<gallery-name>",
		"<gallery-application-name>",
		armcompute.GalleryApplication{
			Location: to.Ptr("<resource-location>"),
			Properties: &armcompute.GalleryApplicationProperties{
				Description:         to.Ptr("<the-description-of-this-gallery-application-definition-resource.-this-property-is-updatable.>"),
				Eula:                to.Ptr("<the-eula-agreement-for-the-gallery-application-definition.>"),
				PrivacyStatementURI: to.Ptr("<the-privacy-statement-uri.>"),
				ReleaseNoteURI:      to.Ptr("<the-release-note-uri.>"),
				SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
		},
		&armcompute.GalleryApplicationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	galleryApplicationsClientCreateOrUpdateResponse, err := galleryApplicationsClientCreateOrUpdateResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// TODO: use response item
	_ = galleryApplicationsClientCreateOrUpdateResponse
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGalleryApplication.json
func ExampleGalleryApplicationsClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	galleryApplicationsClient, err := armcompute.NewGalleryApplicationsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	galleryApplicationsClientUpdateResponsePoller, err := galleryApplicationsClient.BeginUpdate(ctx,
		"<resource-group-name>",
		"<gallery-name>",
		"<gallery-application-name>",
		armcompute.GalleryApplicationUpdate{
			Properties: &armcompute.GalleryApplicationProperties{
				Description:         to.Ptr("<the-description-of-this-gallery-application-definition-resource.-this-property-is-updatable.>"),
				Eula:                to.Ptr("<the-eula-agreement-for-the-gallery-application-definition.>"),
				PrivacyStatementURI: to.Ptr("<the-privacy-statement-uri.>"),
				ReleaseNoteURI:      to.Ptr("<the-release-note-uri.>"),
				SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
		},
		&armcompute.GalleryApplicationsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	galleryApplicationsClientUpdateResponse, err := galleryApplicationsClientUpdateResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// TODO: use response item
	_ = galleryApplicationsClientUpdateResponse
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryApplication.json
func ExampleGalleryApplicationsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	galleryApplicationsClient, err := armcompute.NewGalleryApplicationsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	galleryApplicationsClientGetResponse, err := galleryApplicationsClient.Get(ctx,
		"<resource-group-name>",
		"<gallery-name>",
		"<gallery-application-name>",
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// TODO: use response item
	_ = galleryApplicationsClientGetResponse
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/DeleteAGalleryApplication.json
func ExampleGalleryApplicationsClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	galleryApplicationsClient, err := armcompute.NewGalleryApplicationsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	galleryApplicationsClientDeleteResponsePoller, err := galleryApplicationsClient.BeginDelete(ctx,
		"<resource-group-name>",
		"<gallery-name>",
		"<gallery-application-name>",
		&armcompute.GalleryApplicationsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = galleryApplicationsClientDeleteResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ListGalleryApplicationsInAGallery.json
func ExampleGalleryApplicationsClient_NewListByGalleryPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	galleryApplicationsClient, err := armcompute.NewGalleryApplicationsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	galleryApplicationsClientNewListByGalleryPager := galleryApplicationsClient.NewListByGalleryPager("<resource-group-name>",
		"<gallery-name>",
		nil)
	for galleryApplicationsClientNewListByGalleryPager.More() {
		nextResult, err := galleryApplicationsClientNewListByGalleryPager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range nextResult.Value {
			// TODO: use page item
			_ = v
		}
	}
}
