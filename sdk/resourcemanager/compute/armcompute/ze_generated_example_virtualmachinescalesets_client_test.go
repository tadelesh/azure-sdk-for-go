//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcompute_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListVirtualMachineScaleSetsInASubscriptionByLocation.json
func ExampleVirtualMachineScaleSetsClient_NewListByLocationPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetsClient, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetsClientNewListByLocationPager := virtualMachineScaleSetsClient.NewListByLocationPager("<location>",
		nil)
	for virtualMachineScaleSetsClientNewListByLocationPager.More() {
		nextResult, err := virtualMachineScaleSetsClientNewListByLocationPager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range nextResult.Value {
			// TODO: use page item
			_ = v
		}
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithExtensionsSuppressFailuresEnabled.json
func ExampleVirtualMachineScaleSetsClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetsClient, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetsClientCreateOrUpdateResponsePoller, err := virtualMachineScaleSetsClient.BeginCreateOrUpdate(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("<resource-location>"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					DiagnosticsProfile: &armcompute.DiagnosticsProfile{
						BootDiagnostics: &armcompute.BootDiagnostics{
							Enabled:    to.Ptr(true),
							StorageURI: to.Ptr("<uri-of-the-storage-account-to-use-for-placing-the-console-output-and-screenshot.-<br><br>if-storage-uri-is-not-specified-while-enabling-boot-diagnostics,-managed-storage-will-be-used.>"),
						},
					},
					ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
						Extensions: []*armcompute.VirtualMachineScaleSetExtension{
							{
								Name: to.Ptr("<the-name-of-the-extension.>"),
								Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
									Type:                    to.Ptr("<specifies-the-type-of-the-extension;-an-example-is-\"custom-script-extension\".>"),
									AutoUpgradeMinorVersion: to.Ptr(false),
									Publisher:               to.Ptr("<the-name-of-the-extension-handler-publisher.>"),
									Settings:                map[string]interface{}{},
									SuppressFailures:        to.Ptr(true),
									TypeHandlerVersion:      to.Ptr("<specifies-the-version-of-the-script-handler.>"),
								},
							}},
					},
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("<the-network-configuration-name.>"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("<the-ip-configuration-name.>"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("<the-arm-resource-id-in-the-form-of-/subscriptions/{subscription-id}/resource-groups/{resource-group-name}/...>"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("<specifies-the-password-of-the-administrator-account.-<br><br>-**minimum-length-(windows):**-8-characters-<br><br>-**minimum-length-(linux):**-6-characters-<br><br>-**max-length-(windows):**-123-characters-<br><br>-**max-length-(linux):**-72-characters-<br><br>-**complexity-requirements:**-3-out-of-4-conditions-below-need-to-be-fulfilled-<br>-has-lower-characters-<br>has-upper-characters-<br>-has-a-digit-<br>-has-a-special-character-(regex-match-[\\w_])-<br><br>-**disallowed-values:**-\"abc@123\",-\"p@$$w0rd\",-\"p@ssw0rd\",-\"p@ssword123\",-\"pa$$word\",-\"pass@word1\",-\"password!\",-\"password1\",-\"password22\",-\"iloveyou!\"-<br><br>-for-resetting-the-password,-see-[how-to-reset-the-remote-desktop-service-or-its-login-password-in-a-windows-vm](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp)-<br><br>-for-resetting-root-password,-see-[manage-users,-ssh,-and-check-or-repair-disks-on-azure-linux-vms-using-the-vmaccess-extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)>"),
						AdminUsername:      to.Ptr("<specifies-the-name-of-the-administrator-account.-<br><br>-**windows-only-restriction:**-cannot-end-in-\".\"-<br><br>-**disallowed-values:**-\"administrator\",-\"admin\",-\"user\",-\"user1\",-\"test\",-\"user2\",-\"test1\",-\"user3\",-\"admin1\",-\"1\",-\"123\",-\"a\",-\"actuser\",-\"adm\",-\"admin2\",-\"aspnet\",-\"backup\",-\"console\",-\"david\",-\"guest\",-\"john\",-\"owner\",-\"root\",-\"server\",-\"sql\",-\"support\",-\"support_388945a0\",-\"sys\",-\"test2\",-\"test3\",-\"user4\",-\"user5\".-<br><br>-**minimum-length-(linux):**-1--character-<br><br>-**max-length-(linux):**-64-characters-<br><br>-**max-length-(windows):**-20-characters>"),
						ComputerNamePrefix: to.Ptr("<specifies-the-computer-name-prefix-for-all-of-the-virtual-machines-in-the-scale-set.-computer-name-prefixes-must-be-1-to-15-characters-long.>"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("<specifies-the-offer-of-the-platform-image-or-marketplace-image-used-to-create-the-virtual-machine.>"),
							Publisher: to.Ptr("<the-image-publisher.>"),
							SKU:       to.Ptr("<the-image-sku.>"),
							Version:   to.Ptr("<specifies-the-version-of-the-platform-image-or-marketplace-image-used-to-create-the-virtual-machine.-the-allowed-formats-are-major.minor.build-or-'latest'.-major,-minor,-and-build-are-decimal-numbers.-specify-'latest'-to-use-the-latest-version-of-an-image-available-at-deploy-time.-even-if-you-use-'latest',-the-vm-image-will-not-automatically-update-after-deploy-time-even-if-a-new-version-becomes-available.-please-do-not-use-field-'version'-for-gallery-image-deployment,-gallery-image-should-always-use-'id'-field-for-deployment,-to-use-'latest'-version-of-gallery-image,-just-set-'/subscriptions/{subscription-id}/resource-groups/{resource-group-name}/providers/microsoft.compute/galleries/{gallery-name}/images/{image-name}'-in-the-'id'-field-without-version-input.>"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("<the-sku-name.>"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("<specifies-the-tier-of-virtual-machines-in-a-scale-set.<br-/><br-/>-possible-values:<br-/><br-/>-**standard**<br-/><br-/>-**basic**>"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	virtualMachineScaleSetsClientCreateOrUpdateResponse, err := virtualMachineScaleSetsClientCreateOrUpdateResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// TODO: use response item
	_ = virtualMachineScaleSetsClientCreateOrUpdateResponse
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Update_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetsClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetsClient, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetsClientUpdateResponsePoller, err := virtualMachineScaleSetsClient.BeginUpdate(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		armcompute.VirtualMachineScaleSetUpdate{
			Tags: map[string]*string{
				"key246": to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
			},
			Identity: &armcompute.VirtualMachineScaleSetIdentity{
				Type: to.Ptr(armcompute.ResourceIdentityTypeSystemAssigned),
				UserAssignedIdentities: map[string]*armcompute.VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue{
					"key3951": &armcompute.VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue{},
				},
			},
			Plan: &armcompute.Plan{
				Name:          to.Ptr("<the-plan-id.>"),
				Product:       to.Ptr("<specifies-the-product-of-the-image-from-the-marketplace.-this-is-the-same-value-as-offer-under-the-image-reference-element.>"),
				PromotionCode: to.Ptr("<the-promotion-code.>"),
				Publisher:     to.Ptr("<the-publisher-id.>"),
			},
			Properties: &armcompute.VirtualMachineScaleSetUpdateProperties{
				AdditionalCapabilities: &armcompute.AdditionalCapabilities{
					HibernationEnabled: to.Ptr(true),
					UltraSSDEnabled:    to.Ptr(true),
				},
				AutomaticRepairsPolicy: &armcompute.AutomaticRepairsPolicy{
					Enabled:     to.Ptr(true),
					GracePeriod: to.Ptr("<the-amount-of-time-for-which-automatic-repairs-are-suspended-due-to-a-state-change-on-vm.-the-grace-time-starts-after-the-state-change-has-completed.-this-helps-avoid-premature-or-accidental-repairs.-the-time-duration-should-be-specified-in-iso-8601-format.-the-minimum-allowed-grace-period-is-10-minutes-(pt10m),-which-is-also-the-default-value.-the-maximum-allowed-grace-period-is-90-minutes-(pt90m).>"),
				},
				DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(true),
				Overprovision:                          to.Ptr(true),
				ProximityPlacementGroup: &armcompute.SubResource{
					ID: to.Ptr("<resource-id>"),
				},
				ScaleInPolicy: &armcompute.ScaleInPolicy{
					ForceDeletion: to.Ptr(true),
					Rules: []*armcompute.VirtualMachineScaleSetScaleInRules{
						to.Ptr(armcompute.VirtualMachineScaleSetScaleInRulesOldestVM)},
				},
				SinglePlacementGroup: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
						DisableAutomaticRollback: to.Ptr(true),
						EnableAutomaticOSUpgrade: to.Ptr(true),
					},
					Mode: to.Ptr(armcompute.UpgradeModeManual),
					RollingUpgradePolicy: &armcompute.RollingUpgradePolicy{
						EnableCrossZoneUpgrade:              to.Ptr(true),
						MaxBatchInstancePercent:             to.Ptr[int32](49),
						MaxUnhealthyInstancePercent:         to.Ptr[int32](81),
						MaxUnhealthyUpgradedInstancePercent: to.Ptr[int32](98),
						PauseTimeBetweenBatches:             to.Ptr("<the-wait-time-between-completing-the-update-for-all-virtual-machines-in-one-batch-and-starting-the-next-batch.-the-time-duration-should-be-specified-in-iso-8601-format.-the-default-value-is-0-seconds-(pt0s).>"),
						PrioritizeUnhealthyInstances:        to.Ptr(true),
					},
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetUpdateVMProfile{
					BillingProfile: &armcompute.BillingProfile{
						MaxPrice: to.Ptr[float64](-1),
					},
					DiagnosticsProfile: &armcompute.DiagnosticsProfile{
						BootDiagnostics: &armcompute.BootDiagnostics{
							Enabled:    to.Ptr(true),
							StorageURI: to.Ptr("<uri-of-the-storage-account-to-use-for-placing-the-console-output-and-screenshot.-<br><br>if-storage-uri-is-not-specified-while-enabling-boot-diagnostics,-managed-storage-will-be-used.>"),
						},
					},
					ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
						ExtensionsTimeBudget: to.Ptr("<specifies-the-time-alloted-for-all-extensions-to-start.-the-time-duration-should-be-between-15-minutes-and-120-minutes-(inclusive)-and-should-be-specified-in-iso-8601-format.-the-default-value-is-90-minutes-(pt1h30m).-<br><br>-minimum-api-version:-2020-06-01>"),
						Extensions: []*armcompute.VirtualMachineScaleSetExtension{
							{
								Name: to.Ptr("<the-name-of-the-extension.>"),
								Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
									Type:                    to.Ptr("<specifies-the-type-of-the-extension;-an-example-is-\"custom-script-extension\".>"),
									AutoUpgradeMinorVersion: to.Ptr(true),
									EnableAutomaticUpgrade:  to.Ptr(true),
									ForceUpdateTag:          to.Ptr("<if-a-value-is-provided-and-is-different-from-the-previous-value,-the-extension-handler-will-be-forced-to-update-even-if-the-extension-configuration-has-not-changed.>"),
									ProtectedSettings:       map[string]interface{}{},
									ProvisionAfterExtensions: []*string{
										to.Ptr("aa")},
									Publisher:          to.Ptr("<the-name-of-the-extension-handler-publisher.>"),
									Settings:           map[string]interface{}{},
									SuppressFailures:   to.Ptr(true),
									TypeHandlerVersion: to.Ptr("<specifies-the-version-of-the-script-handler.>"),
								},
							}},
					},
					LicenseType: to.Ptr("<the-license-type,-which-is-for-bring-your-own-license-scenario.>"),
					NetworkProfile: &armcompute.VirtualMachineScaleSetUpdateNetworkProfile{
						HealthProbe: &armcompute.APIEntityReference{
							ID: to.Ptr("<the-arm-resource-id-in-the-form-of-/subscriptions/{subscription-id}/resource-groups/{resource-group-name}/...>"),
						},
						NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetUpdateNetworkConfiguration{
							{
								ID:   to.Ptr("<resource-id>"),
								Name: to.Ptr("<the-network-configuration-name.>"),
								Properties: &armcompute.VirtualMachineScaleSetUpdateNetworkConfigurationProperties{
									DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
									DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.Ptr(true),
									EnableFpga:                  to.Ptr(true),
									EnableIPForwarding:          to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetUpdateIPConfiguration{
										{
											ID:   to.Ptr("<resource-id>"),
											Name: to.Ptr("<the-ip-configuration-name.>"),
											Properties: &armcompute.VirtualMachineScaleSetUpdateIPConfigurationProperties{
												ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("<resource-id>"),
													}},
												ApplicationSecurityGroups: []*armcompute.SubResource{
													{
														ID: to.Ptr("<resource-id>"),
													}},
												LoadBalancerBackendAddressPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("<resource-id>"),
													}},
												LoadBalancerInboundNatPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("<resource-id>"),
													}},
												Primary:                 to.Ptr(true),
												PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
												PublicIPAddressConfiguration: &armcompute.VirtualMachineScaleSetUpdatePublicIPAddressConfiguration{
													Name: to.Ptr("<the-public-ip-address-configuration-name.>"),
													Properties: &armcompute.VirtualMachineScaleSetUpdatePublicIPAddressConfigurationProperties{
														DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
														DNSSettings: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
															DomainNameLabel: to.Ptr("<the-domain-name-label.the-concatenation-of-the-domain-name-label-and-vm-index-will-be-the-domain-name-labels-of-the-public-ipaddress-resources-that-will-be-created>"),
														},
														IdleTimeoutInMinutes: to.Ptr[int32](3),
													},
												},
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("<the-arm-resource-id-in-the-form-of-/subscriptions/{subscription-id}/resource-groups/{resource-group-name}/...>"),
												},
											},
										}},
									NetworkSecurityGroup: &armcompute.SubResource{
										ID: to.Ptr("<resource-id>"),
									},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetUpdateOSProfile{
						CustomData: to.Ptr("<a-base-64-encoded-string-of-custom-data.>"),
						LinuxConfiguration: &armcompute.LinuxConfiguration{
							DisablePasswordAuthentication: to.Ptr(true),
							PatchSettings: &armcompute.LinuxPatchSettings{
								AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
								PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
							},
							ProvisionVMAgent: to.Ptr(true),
							SSH: &armcompute.SSHConfiguration{
								PublicKeys: []*armcompute.SSHPublicKey{
									{
										Path:    to.Ptr("<specifies-the-full-path-on-the-created-vm-where-ssh-public-key-is-stored.-if-the-file-already-exists,-the-specified-key-is-appended-to-the-file.-example:-/home/user/.ssh/authorized_keys>"),
										KeyData: to.Ptr("<ssh-public-key-certificate-used-to-authenticate-with-the-vm-through-ssh.-the-key-needs-to-be-at-least-2048-bit-and-in-ssh-rsa-format.-<br><br>-for-creating-ssh-keys,-see-[create-ssh-keys-on-linux-and-mac-for-linux-vms-in-azure]https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).>"),
									}},
							},
						},
						Secrets: []*armcompute.VaultSecretGroup{
							{
								SourceVault: &armcompute.SubResource{
									ID: to.Ptr("<resource-id>"),
								},
								VaultCertificates: []*armcompute.VaultCertificate{
									{
										CertificateStore: to.Ptr("<for-windows-vms,-specifies-the-certificate-store-on-the-virtual-machine-to-which-the-certificate-should-be-added.-the-specified-certificate-store-is-implicitly-in-the-local-machine-account.-<br><br>for-linux-vms,-the-certificate-file-is-placed-under-the-/var/lib/waagent-directory,-with-the-file-name-&lt;uppercase-thumbprint&gt;.crt-for-the-x509-certificate-file-and-&lt;uppercase-thumbprint&gt;.prv-for-private-key.-both-of-these-files-are-.pem-formatted.>"),
										CertificateURL:   to.Ptr("<this-is-the-url-of-a-certificate-that-has-been-uploaded-to-key-vault-as-a-secret.-for-adding-a-secret-to-the-key-vault,-see-[add-a-key-or-secret-to-the-key-vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add).-in-this-case,-your-certificate-needs-to-be-it-is-the-base64-encoding-of-the-following-json-object-which-is-encoded-in-utf-8:-<br><br>-{<br>--\"data\":\"<base64-encoded-certificate>\",<br>--\"data-type\":\"pfx\",<br>--\"password\":\"<pfx-file-password>\"<br>}-<br>-to-install-certificates-on-a-virtual-machine-it-is-recommended-to-use-the-[azure-key-vault-virtual-machine-extension-for-linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux)-or-the-[azure-key-vault-virtual-machine-extension-for-windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).>"),
									}},
							}},
						WindowsConfiguration: &armcompute.WindowsConfiguration{
							AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
								{
									ComponentName: to.Ptr("<the-component-name.-currently,-the-only-allowable-value-is-microsoft-windows-shell-setup.>"),
									Content:       to.Ptr("<specifies-the-xml-formatted-content-that-is-added-to-the-unattend.xml-file-for-the-specified-path-and-component.-the-xml-must-be-less-than-4kb-and-must-include-the-root-element-for-the-setting-or-feature-that-is-being-inserted.>"),
									PassName:      to.Ptr("<the-pass-name.-currently,-the-only-allowable-value-is-oobe-system.>"),
									SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
								}},
							EnableAutomaticUpdates: to.Ptr(true),
							PatchSettings: &armcompute.PatchSettings{
								AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
								EnableHotpatching: to.Ptr(true),
								PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByOS),
							},
							ProvisionVMAgent: to.Ptr(true),
							TimeZone:         to.Ptr("<specifies-the-time-zone-of-the-virtual-machine.-e.g.-\"pacific-standard-time\".-<br><br>-possible-values-can-be-[time-zone-info.id](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.id?#system_time-zone-info_id)-value-from-time-zones-returned-by-[time-zone-info.get-system-time-zones](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.getsystemtimezones).>"),
							WinRM: &armcompute.WinRMConfiguration{
								Listeners: []*armcompute.WinRMListener{
									{
										CertificateURL: to.Ptr("<this-is-the-url-of-a-certificate-that-has-been-uploaded-to-key-vault-as-a-secret.-for-adding-a-secret-to-the-key-vault,-see-[add-a-key-or-secret-to-the-key-vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add).-in-this-case,-your-certificate-needs-to-be-it-is-the-base64-encoding-of-the-following-json-object-which-is-encoded-in-utf-8:-<br><br>-{<br>--\"data\":\"<base64-encoded-certificate>\",<br>--\"data-type\":\"pfx\",<br>--\"password\":\"<pfx-file-password>\"<br>}-<br>-to-install-certificates-on-a-virtual-machine-it-is-recommended-to-use-the-[azure-key-vault-virtual-machine-extension-for-linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux)-or-the-[azure-key-vault-virtual-machine-extension-for-windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).>"),
										Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
									}},
							},
						},
					},
					ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
						TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("<configurable-length-of-time-a-virtual-machine-being-deleted-will-have-to-potentially-approve-the-terminate-scheduled-event-before-the-event-is-auto-approved-(timed-out).-the-configuration-must-be-specified-in-iso-8601-format,-the-default-value-is-5-minutes-(pt5m)>"),
						},
					},
					SecurityProfile: &armcompute.SecurityProfile{
						EncryptionAtHost: to.Ptr(true),
						SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
						UefiSettings: &armcompute.UefiSettings{
							SecureBootEnabled: to.Ptr(true),
							VTpmEnabled:       to.Ptr(true),
						},
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetUpdateStorageProfile{
						DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
							{
								Name:              to.Ptr("<the-disk-name.>"),
								Caching:           to.Ptr(armcompute.CachingTypesNone),
								CreateOption:      to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
								DiskIOPSReadWrite: to.Ptr[int64](28),
								DiskMBpsReadWrite: to.Ptr[int64](15),
								DiskSizeGB:        to.Ptr[int32](1023),
								Lun:               to.Ptr[int32](26),
								ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
									DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
										ID: to.Ptr("<resource-id>"),
									},
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
								},
								WriteAcceleratorEnabled: to.Ptr(true),
							}},
						ImageReference: &armcompute.ImageReference{
							ID:                   to.Ptr("<resource-id>"),
							Offer:                to.Ptr("<specifies-the-offer-of-the-platform-image-or-marketplace-image-used-to-create-the-virtual-machine.>"),
							Publisher:            to.Ptr("<the-image-publisher.>"),
							SharedGalleryImageID: to.Ptr("<specified-the-shared-gallery-image-unique-id-for-vm-deployment.-this-can-be-fetched-from-shared-gallery-image-get-call.>"),
							SKU:                  to.Ptr("<the-image-sku.>"),
							Version:              to.Ptr("<specifies-the-version-of-the-platform-image-or-marketplace-image-used-to-create-the-virtual-machine.-the-allowed-formats-are-major.minor.build-or-'latest'.-major,-minor,-and-build-are-decimal-numbers.-specify-'latest'-to-use-the-latest-version-of-an-image-available-at-deploy-time.-even-if-you-use-'latest',-the-vm-image-will-not-automatically-update-after-deploy-time-even-if-a-new-version-becomes-available.-please-do-not-use-field-'version'-for-gallery-image-deployment,-gallery-image-should-always-use-'id'-field-for-deployment,-to-use-'latest'-version-of-gallery-image,-just-set-'/subscriptions/{subscription-id}/resource-groups/{resource-group-name}/providers/microsoft.compute/galleries/{gallery-name}/images/{image-name}'-in-the-'id'-field-without-version-input.>"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetUpdateOSDisk{
							Caching:    to.Ptr(armcompute.CachingTypesReadWrite),
							DiskSizeGB: to.Ptr[int32](6),
							Image: &armcompute.VirtualHardDisk{
								URI: to.Ptr("<specifies-the-virtual-hard-disk's-uri.>"),
							},
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("<resource-id>"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
							VhdContainers: []*string{
								to.Ptr("aa")},
							WriteAcceleratorEnabled: to.Ptr(true),
						},
					},
					UserData: to.Ptr("<user-data-for-the-vm,-which-must-be-base-64-encoded.-customer-should-not-pass-any-secrets-in-here.-<br><br>minimum-api-version:-2021-03-01>"),
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("<the-sku-name.>"),
				Capacity: to.Ptr[int64](7),
				Tier:     to.Ptr("<specifies-the-tier-of-virtual-machines-in-a-scale-set.<br-/><br-/>-possible-values:<br-/><br-/>-**standard**<br-/><br-/>-**basic**>"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	virtualMachineScaleSetsClientUpdateResponse, err := virtualMachineScaleSetsClientUpdateResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// TODO: use response item
	_ = virtualMachineScaleSetsClientUpdateResponse
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ForceDeleteVirtualMachineScaleSets.json
func ExampleVirtualMachineScaleSetsClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetsClient, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetsClientDeleteResponsePoller, err := virtualMachineScaleSetsClient.BeginDelete(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		&armcompute.VirtualMachineScaleSetsClientBeginDeleteOptions{ForceDeletion: to.Ptr(true),
			ResumeToken: "",
		})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = virtualMachineScaleSetsClientDeleteResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSet.json
func ExampleVirtualMachineScaleSetsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetsClient, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetsClientGetResponse, err := virtualMachineScaleSetsClient.Get(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		&armcompute.VirtualMachineScaleSetsClientGetOptions{Expand: nil})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// TODO: use response item
	_ = virtualMachineScaleSetsClientGetResponse
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Deallocate_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetsClient_BeginDeallocate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetsClient, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetsClientDeallocateResponsePoller, err := virtualMachineScaleSetsClient.BeginDeallocate(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		&armcompute.VirtualMachineScaleSetsClientBeginDeallocateOptions{VMInstanceIDs: &armcompute.VirtualMachineScaleSetVMInstanceIDs{
			InstanceIDs: []*string{
				to.Ptr("aaaaaaaaaaaaaaaaa")},
		},
			ResumeToken: "",
		})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = virtualMachineScaleSetsClientDeallocateResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_DeleteInstances_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetsClient_BeginDeleteInstances() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetsClient, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetsClientDeleteInstancesResponsePoller, err := virtualMachineScaleSetsClient.BeginDeleteInstances(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		armcompute.VirtualMachineScaleSetVMInstanceRequiredIDs{
			InstanceIDs: []*string{
				to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa")},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginDeleteInstancesOptions{ForceDeletion: to.Ptr(true),
			ResumeToken: "",
		})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = virtualMachineScaleSetsClientDeleteInstancesResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_GetInstanceView_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetsClient_GetInstanceView() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetsClient, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetsClientGetInstanceViewResponse, err := virtualMachineScaleSetsClient.GetInstanceView(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// TODO: use response item
	_ = virtualMachineScaleSetsClientGetInstanceViewResponse
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_List_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetsClient_NewListPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetsClient, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetsClientNewListPager := virtualMachineScaleSetsClient.NewListPager("<resource-group-name>",
		nil)
	for virtualMachineScaleSetsClientNewListPager.More() {
		nextResult, err := virtualMachineScaleSetsClientNewListPager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range nextResult.Value {
			// TODO: use page item
			_ = v
		}
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ListAll_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetsClient_NewListAllPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetsClient, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetsClientNewListAllPager := virtualMachineScaleSetsClient.NewListAllPager(nil)
	for virtualMachineScaleSetsClientNewListAllPager.More() {
		nextResult, err := virtualMachineScaleSetsClientNewListAllPager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range nextResult.Value {
			// TODO: use page item
			_ = v
		}
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_GetOSUpgradeHistory_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetsClient_NewGetOSUpgradeHistoryPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetsClient, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetsClientNewGetOSUpgradeHistoryPager := virtualMachineScaleSetsClient.NewGetOSUpgradeHistoryPager("<resource-group-name>",
		"<vm-scale-set-name>",
		nil)
	for virtualMachineScaleSetsClientNewGetOSUpgradeHistoryPager.More() {
		nextResult, err := virtualMachineScaleSetsClientNewGetOSUpgradeHistoryPager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range nextResult.Value {
			// TODO: use page item
			_ = v
		}
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_PowerOff_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetsClient_BeginPowerOff() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetsClient, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetsClientPowerOffResponsePoller, err := virtualMachineScaleSetsClient.BeginPowerOff(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		&armcompute.VirtualMachineScaleSetsClientBeginPowerOffOptions{SkipShutdown: to.Ptr(true),
			VMInstanceIDs: &armcompute.VirtualMachineScaleSetVMInstanceIDs{
				InstanceIDs: []*string{
					to.Ptr("aaaaaaaaaaaaaaaaa")},
			},
			ResumeToken: "",
		})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = virtualMachineScaleSetsClientPowerOffResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Restart_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetsClient_BeginRestart() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetsClient, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetsClientRestartResponsePoller, err := virtualMachineScaleSetsClient.BeginRestart(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		&armcompute.VirtualMachineScaleSetsClientBeginRestartOptions{VMInstanceIDs: &armcompute.VirtualMachineScaleSetVMInstanceIDs{
			InstanceIDs: []*string{
				to.Ptr("aaaaaaaaaaaaaaaaa")},
		},
			ResumeToken: "",
		})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = virtualMachineScaleSetsClientRestartResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Start_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetsClient_BeginStart() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetsClient, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetsClientStartResponsePoller, err := virtualMachineScaleSetsClient.BeginStart(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		&armcompute.VirtualMachineScaleSetsClientBeginStartOptions{VMInstanceIDs: &armcompute.VirtualMachineScaleSetVMInstanceIDs{
			InstanceIDs: []*string{
				to.Ptr("aaaaaaaaaaaaaaaaa")},
		},
			ResumeToken: "",
		})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = virtualMachineScaleSetsClientStartResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Redeploy_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetsClient_BeginRedeploy() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetsClient, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetsClientRedeployResponsePoller, err := virtualMachineScaleSetsClient.BeginRedeploy(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		&armcompute.VirtualMachineScaleSetsClientBeginRedeployOptions{VMInstanceIDs: &armcompute.VirtualMachineScaleSetVMInstanceIDs{
			InstanceIDs: []*string{
				to.Ptr("aaaaaaaaaaaaaaaaa")},
		},
			ResumeToken: "",
		})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = virtualMachineScaleSetsClientRedeployResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_PerformMaintenance_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetsClient_BeginPerformMaintenance() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetsClient, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetsClientPerformMaintenanceResponsePoller, err := virtualMachineScaleSetsClient.BeginPerformMaintenance(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		&armcompute.VirtualMachineScaleSetsClientBeginPerformMaintenanceOptions{VMInstanceIDs: &armcompute.VirtualMachineScaleSetVMInstanceIDs{
			InstanceIDs: []*string{
				to.Ptr("aaaaaaaaaaaaaaaaa")},
		},
			ResumeToken: "",
		})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = virtualMachineScaleSetsClientPerformMaintenanceResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_UpdateInstances_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetsClient_BeginUpdateInstances() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetsClient, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetsClientUpdateInstancesResponsePoller, err := virtualMachineScaleSetsClient.BeginUpdateInstances(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		armcompute.VirtualMachineScaleSetVMInstanceRequiredIDs{
			InstanceIDs: []*string{
				to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa")},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginUpdateInstancesOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = virtualMachineScaleSetsClientUpdateInstancesResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Reimage_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetsClient_BeginReimage() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetsClient, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetsClientReimageResponsePoller, err := virtualMachineScaleSetsClient.BeginReimage(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		&armcompute.VirtualMachineScaleSetsClientBeginReimageOptions{VMScaleSetReimageInput: &armcompute.VirtualMachineScaleSetReimageParameters{
			TempDisk: to.Ptr(true),
			InstanceIDs: []*string{
				to.Ptr("aaaaaaaaaa")},
		},
			ResumeToken: "",
		})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = virtualMachineScaleSetsClientReimageResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ReimageAll_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetsClient_BeginReimageAll() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetsClient, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetsClientReimageAllResponsePoller, err := virtualMachineScaleSetsClient.BeginReimageAll(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		&armcompute.VirtualMachineScaleSetsClientBeginReimageAllOptions{VMInstanceIDs: &armcompute.VirtualMachineScaleSetVMInstanceIDs{
			InstanceIDs: []*string{
				to.Ptr("aaaaaaaaaaaaaaaaa")},
		},
			ResumeToken: "",
		})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = virtualMachineScaleSetsClientReimageAllResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ForceRecoveryServiceFabricPlatformUpdateDomainWalk_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetsClient_ForceRecoveryServiceFabricPlatformUpdateDomainWalk() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetsClient, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetsClientForceRecoveryServiceFabricPlatformUpdateDomainWalkResponse, err := virtualMachineScaleSetsClient.ForceRecoveryServiceFabricPlatformUpdateDomainWalk(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		30,
		&armcompute.VirtualMachineScaleSetsClientForceRecoveryServiceFabricPlatformUpdateDomainWalkOptions{Zone: nil,
			PlacementGroupID: nil,
		})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// TODO: use response item
	_ = virtualMachineScaleSetsClientForceRecoveryServiceFabricPlatformUpdateDomainWalkResponse
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ConvertToSinglePlacementGroup_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetsClient_ConvertToSinglePlacementGroup() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetsClient, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = virtualMachineScaleSetsClient.ConvertToSinglePlacementGroup(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		armcompute.VMScaleSetConvertToSinglePlacementGroupInput{
			ActivePlacementGroupID: to.Ptr("<id-of-the-placement-group-in-which-you-want-future-virtual-machine-instances-to-be-placed.-to-query-placement-group-id,-please-use-virtual-machine-scale-set-vms---get-api.-if-not-provided,-the-platform-will-choose-one-with-maximum-number-of-virtual-machine-instances.>"),
		},
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_SetOrchestrationServiceState_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetsClient_BeginSetOrchestrationServiceState() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetsClient, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetsClientSetOrchestrationServiceStateResponsePoller, err := virtualMachineScaleSetsClient.BeginSetOrchestrationServiceState(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		armcompute.OrchestrationServiceStateInput{
			Action:      to.Ptr(armcompute.OrchestrationServiceStateActionResume),
			ServiceName: to.Ptr(armcompute.OrchestrationServiceNamesAutomaticRepairs),
		},
		&armcompute.VirtualMachineScaleSetsClientBeginSetOrchestrationServiceStateOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = virtualMachineScaleSetsClientSetOrchestrationServiceStateResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}
